// Generator : SpinalHDL v1.4.3    git head : 3450f117fd8f4fa6ba064657d556824b2286454a
// Component : NexysA7SmpLinux
// Git hash  : 3450f117fd8f4fa6ba064657d556824b2286454a


`define BranchCtrlEnum_defaultEncoding_type [1:0]
`define BranchCtrlEnum_defaultEncoding_INC 2'b00
`define BranchCtrlEnum_defaultEncoding_B 2'b01
`define BranchCtrlEnum_defaultEncoding_JAL 2'b10
`define BranchCtrlEnum_defaultEncoding_JALR 2'b11

`define EnvCtrlEnum_defaultEncoding_type [1:0]
`define EnvCtrlEnum_defaultEncoding_NONE 2'b00
`define EnvCtrlEnum_defaultEncoding_XRET 2'b01
`define EnvCtrlEnum_defaultEncoding_WFI 2'b10
`define EnvCtrlEnum_defaultEncoding_ECALL 2'b11

`define ShiftCtrlEnum_defaultEncoding_type [1:0]
`define ShiftCtrlEnum_defaultEncoding_DISABLE_1 2'b00
`define ShiftCtrlEnum_defaultEncoding_SLL_1 2'b01
`define ShiftCtrlEnum_defaultEncoding_SRL_1 2'b10
`define ShiftCtrlEnum_defaultEncoding_SRA_1 2'b11

`define AluBitwiseCtrlEnum_defaultEncoding_type [1:0]
`define AluBitwiseCtrlEnum_defaultEncoding_XOR_1 2'b00
`define AluBitwiseCtrlEnum_defaultEncoding_OR_1 2'b01
`define AluBitwiseCtrlEnum_defaultEncoding_AND_1 2'b10

`define AluCtrlEnum_defaultEncoding_type [1:0]
`define AluCtrlEnum_defaultEncoding_ADD_SUB 2'b00
`define AluCtrlEnum_defaultEncoding_SLT_SLTU 2'b01
`define AluCtrlEnum_defaultEncoding_BITWISE 2'b10

`define Src2CtrlEnum_defaultEncoding_type [1:0]
`define Src2CtrlEnum_defaultEncoding_RS 2'b00
`define Src2CtrlEnum_defaultEncoding_IMI 2'b01
`define Src2CtrlEnum_defaultEncoding_IMS 2'b10
`define Src2CtrlEnum_defaultEncoding_PC 2'b11

`define Src1CtrlEnum_defaultEncoding_type [1:0]
`define Src1CtrlEnum_defaultEncoding_RS 2'b00
`define Src1CtrlEnum_defaultEncoding_IMU 2'b01
`define Src1CtrlEnum_defaultEncoding_PC_INCREMENT 2'b10
`define Src1CtrlEnum_defaultEncoding_URS1 2'b11

`define MmuPlugin_shared_State_defaultEncoding_type [2:0]
`define MmuPlugin_shared_State_defaultEncoding_IDLE 3'b000
`define MmuPlugin_shared_State_defaultEncoding_L1_CMD 3'b001
`define MmuPlugin_shared_State_defaultEncoding_L1_RSP 3'b010
`define MmuPlugin_shared_State_defaultEncoding_L0_CMD 3'b011
`define MmuPlugin_shared_State_defaultEncoding_L0_RSP 3'b100

`define DataCacheExternalAmoStates_defaultEncoding_type [1:0]
`define DataCacheExternalAmoStates_defaultEncoding_LR_CMD 2'b00
`define DataCacheExternalAmoStates_defaultEncoding_LR_RSP 2'b01
`define DataCacheExternalAmoStates_defaultEncoding_SC_CMD 2'b10
`define DataCacheExternalAmoStates_defaultEncoding_SC_RSP 2'b11

`define EnvCtrlEnum_1_defaultEncoding_type [1:0]
`define EnvCtrlEnum_1_defaultEncoding_NONE 2'b00
`define EnvCtrlEnum_1_defaultEncoding_XRET 2'b01
`define EnvCtrlEnum_1_defaultEncoding_WFI 2'b10
`define EnvCtrlEnum_1_defaultEncoding_ECALL 2'b11

`define ShiftCtrlEnum_1_defaultEncoding_type [1:0]
`define ShiftCtrlEnum_1_defaultEncoding_DISABLE_1 2'b00
`define ShiftCtrlEnum_1_defaultEncoding_SLL_1 2'b01
`define ShiftCtrlEnum_1_defaultEncoding_SRL_1 2'b10
`define ShiftCtrlEnum_1_defaultEncoding_SRA_1 2'b11

`define Src2CtrlEnum_1_defaultEncoding_type [1:0]
`define Src2CtrlEnum_1_defaultEncoding_RS 2'b00
`define Src2CtrlEnum_1_defaultEncoding_IMI 2'b01
`define Src2CtrlEnum_1_defaultEncoding_IMS 2'b10
`define Src2CtrlEnum_1_defaultEncoding_PC 2'b11

`define Src1CtrlEnum_1_defaultEncoding_type [1:0]
`define Src1CtrlEnum_1_defaultEncoding_RS 2'b00
`define Src1CtrlEnum_1_defaultEncoding_IMU 2'b01
`define Src1CtrlEnum_1_defaultEncoding_PC_INCREMENT 2'b10
`define Src1CtrlEnum_1_defaultEncoding_URS1 2'b11

`define MmuPlugin_shared_State_1_defaultEncoding_type [2:0]
`define MmuPlugin_shared_State_1_defaultEncoding_IDLE 3'b000
`define MmuPlugin_shared_State_1_defaultEncoding_L1_CMD 3'b001
`define MmuPlugin_shared_State_1_defaultEncoding_L1_RSP 3'b010
`define MmuPlugin_shared_State_1_defaultEncoding_L0_CMD 3'b011
`define MmuPlugin_shared_State_1_defaultEncoding_L0_RSP 3'b100

`define BmbExclusiveMonitorState_defaultEncoding_type [1:0]
`define BmbExclusiveMonitorState_defaultEncoding_IDLE 2'b00
`define BmbExclusiveMonitorState_defaultEncoding_FENCE_START 2'b01
`define BmbExclusiveMonitorState_defaultEncoding_FENCE_BUSY 2'b10
`define BmbExclusiveMonitorState_defaultEncoding_EMIT 2'b11

`define UartStopType_defaultEncoding_type [0:0]
`define UartStopType_defaultEncoding_ONE 1'b0
`define UartStopType_defaultEncoding_TWO 1'b1

`define UartParityType_defaultEncoding_type [1:0]
`define UartParityType_defaultEncoding_NONE 2'b00
`define UartParityType_defaultEncoding_EVEN 2'b01
`define UartParityType_defaultEncoding_ODD 2'b10

`define UartCtrlTxState_defaultEncoding_type [2:0]
`define UartCtrlTxState_defaultEncoding_IDLE 3'b000
`define UartCtrlTxState_defaultEncoding_START 3'b001
`define UartCtrlTxState_defaultEncoding_DATA 3'b010
`define UartCtrlTxState_defaultEncoding_PARITY 3'b011
`define UartCtrlTxState_defaultEncoding_STOP 3'b100

`define UartCtrlRxState_defaultEncoding_type [2:0]
`define UartCtrlRxState_defaultEncoding_IDLE 3'b000
`define UartCtrlRxState_defaultEncoding_START 3'b001
`define UartCtrlRxState_defaultEncoding_DATA 3'b010
`define UartCtrlRxState_defaultEncoding_PARITY 3'b011
`define UartCtrlRxState_defaultEncoding_STOP 3'b100

`define push_State_defaultEncoding_type [0:0]
`define push_State_defaultEncoding_LENGTH 1'b0
`define push_State_defaultEncoding_DATA 1'b1

`define pop_State_defaultEncoding_type [1:0]
`define pop_State_defaultEncoding_LENGTH 2'b00
`define pop_State_defaultEncoding_DATA 2'b01
`define pop_State_defaultEncoding_WAIT_1 2'b10


module NexysA7SmpLinux (
  input               clocking_GCLK100,
  output              clocking_clk50,
  output              audioOut_sd,
  output reg [1:0]    system_eth_mii_TX_D,
  output              system_eth_mii_TX_EN,
  input      [1:0]    system_eth_mii_RX_D,
  input               system_eth_mii_RX_CRS_DV,
  input               system_eth_mii_RX_ER,
  output              system_uartA_uart_txd,
  input               system_uartA_uart_rxd,
  (* keep , syn_keep *) output              system_spiA_user_sclk /* synthesis syn_keep = 1 */ ,
  (* keep , syn_keep *) output     [0:0]    system_spiA_flash_ss /* synthesis syn_keep = 1 */ ,
  (* keep , syn_keep *) output     [0:0]    system_spiA_sdcard_ss /* synthesis syn_keep = 1 */ ,
  (* keep , syn_keep *) output              system_spiA_sdcard_sclk /* synthesis syn_keep = 1 */ ,
  output              system_spiA_md_C,
  output     [1:0]    system_audioOut_outputs,
  output reg          system_vgaPhy_vSync,
  output reg          system_vgaPhy_hSync,
  output reg [3:0]    system_vgaPhy_color_r,
  output reg [3:0]    system_vgaPhy_color_g,
  output reg [3:0]    system_vgaPhy_color_b,
  output     [12:0]   sdramDomain_phyA_sdram_ADDR,
  output     [2:0]    sdramDomain_phyA_sdram_BA,
  output              sdramDomain_phyA_sdram_CASn,
  output              sdramDomain_phyA_sdram_CKE,
  output              sdramDomain_phyA_sdram_CSn,
  output              sdramDomain_phyA_sdram_RASn,
  output              sdramDomain_phyA_sdram_WEn,
  output              sdramDomain_phyA_sdram_CK,
  output              sdramDomain_phyA_sdram_CKn,
  output              sdramDomain_phyA_sdram_ODT,
  output     [1:0]    sdramDomain_phyA_sdram_DM,
   inout     [15:0]   sdramDomain_phyA_sdram_DQ,
   inout     [1:0]    sdramDomain_phyA_sdram_DQS,
   inout     [1:0]    sdramDomain_phyA_sdram_DQSn,
   inout     [31:0]   system_gpioA_gpio,
   inout     [1:0]    system_spiA_user_data,
   inout     [1:0]    system_spiA_flash_data,
   inout     [1:0]    system_spiA_sdcard_data,
   inout              system_spiA_md_IO
);
  wire                _zz_385;
  wire                _zz_386;
  wire                _zz_387;
  wire                _zz_388;
  wire                _zz_389;
  wire       [31:0]   _zz_390;
  reg                 _zz_391;
  wire                _zz_392;
  wire                _zz_393;
  wire                _zz_394;
  wire                _zz_395;
  wire                _zz_396;
  wire                _zz_397;
  wire                _zz_398;
  wire                _zz_399;
  wire       [31:0]   _zz_400;
  reg                 _zz_401;
  wire                _zz_402;
  wire                _zz_403;
  wire                _zz_404;
  wire                _zz_405;
  wire                _zz_406;
  wire                _zz_407;
  wire                _zz_408;
  wire                _zz_409;
  wire                _zz_410;
  wire       [15:0]   _zz_411;
  wire       [7:0]    _zz_412;
  wire       [5:0]    _zz_413;
  wire       [11:0]   _zz_414;
  reg        [0:0]    _zz_415;
  reg        [0:0]    _zz_416;
  wire       [5:0]    _zz_417;
  wire                _zz_418;
  wire                _zz_419;
  wire                _zz_420;
  wire                _zz_421;
  wire       [15:0]   _zz_422;
  wire       [7:0]    _zz_423;
  wire       [11:0]   _zz_424;
  wire       [12:0]   _zz_425;
  wire                _zz_426;
  wire                _zz_427;
  wire                _zz_428;
  wire                _zz_429;
  wire                _zz_430;
  wire                _zz_431;
  wire                _zz_432;
  wire                _zz_433;
  wire       [11:0]   _zz_434;
  wire       [26:0]   _zz_435;
  wire       [26:0]   _zz_436;
  wire       [63:0]   _zz_437;
  wire       [7:0]    _zz_438;
  wire                _zz_439;
  wire       [23:0]   _zz_440;
  wire       [23:0]   _zz_441;
  wire       [31:0]   _zz_442;
  wire       [3:0]    _zz_443;
  wire       [63:0]   _zz_444;
  wire       [7:0]    _zz_445;
  wire       [63:0]   _zz_446;
  wire       [7:0]    _zz_447;
  wire                clocking_pll_CLKFBOUT;
  wire                clocking_pll_CLKOUT0;
  wire                clocking_pll_CLKOUT1;
  wire                clocking_pll_CLKOUT2;
  wire                clocking_pll_CLKOUT3;
  wire                clocking_pll_CLKOUT4;
  wire                clocking_pll_CLKOUT5;
  wire                clocking_pll_CLKOUT6;
  wire                debug_logic_io_bmb_cmd_valid;
  wire                debug_logic_io_bmb_cmd_payload_last;
  wire       [0:0]    debug_logic_io_bmb_cmd_payload_fragment_opcode;
  wire       [31:0]   debug_logic_io_bmb_cmd_payload_fragment_address;
  wire       [1:0]    debug_logic_io_bmb_cmd_payload_fragment_length;
  wire       [31:0]   debug_logic_io_bmb_cmd_payload_fragment_data;
  wire       [3:0]    debug_logic_io_bmb_cmd_payload_fragment_mask;
  wire                debug_logic_io_bmb_rsp_ready;
  wire                bufferCC_33_io_dataOut;
  wire                bufferCC_34_io_dataOut;
  wire                bufferCC_35_io_dataOut;
  wire                system_cores_0_logic_cpu_dBus_cmd_valid;
  wire                system_cores_0_logic_cpu_dBus_cmd_payload_wr;
  wire                system_cores_0_logic_cpu_dBus_cmd_payload_uncached;
  wire       [31:0]   system_cores_0_logic_cpu_dBus_cmd_payload_address;
  wire       [31:0]   system_cores_0_logic_cpu_dBus_cmd_payload_data;
  wire       [3:0]    system_cores_0_logic_cpu_dBus_cmd_payload_mask;
  wire       [3:0]    system_cores_0_logic_cpu_dBus_cmd_payload_length;
  wire                system_cores_0_logic_cpu_dBus_cmd_payload_exclusive;
  wire                system_cores_0_logic_cpu_dBus_cmd_payload_last;
  wire                system_cores_0_logic_cpu_dBus_inv_ready;
  wire                system_cores_0_logic_cpu_dBus_ack_valid;
  wire                system_cores_0_logic_cpu_dBus_ack_payload_last;
  wire                system_cores_0_logic_cpu_dBus_ack_payload_fragment_hit;
  wire                system_cores_0_logic_cpu_dBus_sync_ready;
  wire                system_cores_0_logic_cpu_debug_bus_cmd_ready;
  wire       [31:0]   system_cores_0_logic_cpu_debug_bus_rsp_data;
  wire                system_cores_0_logic_cpu_debug_resetOut;
  wire                system_cores_0_logic_cpu_iBus_cmd_valid;
  wire       [31:0]   system_cores_0_logic_cpu_iBus_cmd_payload_address;
  wire       [2:0]    system_cores_0_logic_cpu_iBus_cmd_payload_size;
  wire                dBus_Bridge_withWriteBuffer_syncLogic_cmdCtx_fifo_io_push_ready;
  wire                dBus_Bridge_withWriteBuffer_syncLogic_cmdCtx_fifo_io_pop_valid;
  wire       [2:0]    dBus_Bridge_withWriteBuffer_syncLogic_cmdCtx_fifo_io_pop_payload;
  wire       [4:0]    dBus_Bridge_withWriteBuffer_syncLogic_cmdCtx_fifo_io_occupancy;
  wire                system_cores_1_logic_cpu_dBus_cmd_valid;
  wire                system_cores_1_logic_cpu_dBus_cmd_payload_wr;
  wire                system_cores_1_logic_cpu_dBus_cmd_payload_uncached;
  wire       [31:0]   system_cores_1_logic_cpu_dBus_cmd_payload_address;
  wire       [31:0]   system_cores_1_logic_cpu_dBus_cmd_payload_data;
  wire       [3:0]    system_cores_1_logic_cpu_dBus_cmd_payload_mask;
  wire       [3:0]    system_cores_1_logic_cpu_dBus_cmd_payload_length;
  wire                system_cores_1_logic_cpu_dBus_cmd_payload_exclusive;
  wire                system_cores_1_logic_cpu_dBus_cmd_payload_last;
  wire                system_cores_1_logic_cpu_dBus_inv_ready;
  wire                system_cores_1_logic_cpu_dBus_ack_valid;
  wire                system_cores_1_logic_cpu_dBus_ack_payload_last;
  wire                system_cores_1_logic_cpu_dBus_ack_payload_fragment_hit;
  wire                system_cores_1_logic_cpu_dBus_sync_ready;
  wire                system_cores_1_logic_cpu_debug_bus_cmd_ready;
  wire       [31:0]   system_cores_1_logic_cpu_debug_bus_rsp_data;
  wire                system_cores_1_logic_cpu_debug_resetOut;
  wire                system_cores_1_logic_cpu_iBus_cmd_valid;
  wire       [31:0]   system_cores_1_logic_cpu_iBus_cmd_payload_address;
  wire       [2:0]    system_cores_1_logic_cpu_iBus_cmd_payload_size;
  wire                dBus_Bridge_withWriteBuffer_syncLogic_cmdCtx_fifo_1_io_push_ready;
  wire                dBus_Bridge_withWriteBuffer_syncLogic_cmdCtx_fifo_1_io_pop_valid;
  wire       [2:0]    dBus_Bridge_withWriteBuffer_syncLogic_cmdCtx_fifo_1_io_pop_payload;
  wire       [4:0]    dBus_Bridge_withWriteBuffer_syncLogic_cmdCtx_fifo_1_io_occupancy;
  wire                bufferCC_36_io_dataOut;
  wire                bufferCC_37_io_dataOut;
  wire                bmbDecoder_7_io_input_cmd_ready;
  wire                bmbDecoder_7_io_input_rsp_valid;
  wire                bmbDecoder_7_io_input_rsp_payload_last;
  wire       [0:0]    bmbDecoder_7_io_input_rsp_payload_fragment_opcode;
  wire       [31:0]   bmbDecoder_7_io_input_rsp_payload_fragment_data;
  wire                bmbDecoder_7_io_outputs_0_cmd_valid;
  wire                bmbDecoder_7_io_outputs_0_cmd_payload_last;
  wire       [0:0]    bmbDecoder_7_io_outputs_0_cmd_payload_fragment_opcode;
  wire       [31:0]   bmbDecoder_7_io_outputs_0_cmd_payload_fragment_address;
  wire       [1:0]    bmbDecoder_7_io_outputs_0_cmd_payload_fragment_length;
  wire       [31:0]   bmbDecoder_7_io_outputs_0_cmd_payload_fragment_data;
  wire       [3:0]    bmbDecoder_7_io_outputs_0_cmd_payload_fragment_mask;
  wire                bmbDecoder_7_io_outputs_0_rsp_ready;
  wire                bmbDecoder_7_io_outputs_1_cmd_valid;
  wire                bmbDecoder_7_io_outputs_1_cmd_payload_last;
  wire       [0:0]    bmbDecoder_7_io_outputs_1_cmd_payload_fragment_opcode;
  wire       [31:0]   bmbDecoder_7_io_outputs_1_cmd_payload_fragment_address;
  wire       [1:0]    bmbDecoder_7_io_outputs_1_cmd_payload_fragment_length;
  wire       [31:0]   bmbDecoder_7_io_outputs_1_cmd_payload_fragment_data;
  wire       [3:0]    bmbDecoder_7_io_outputs_1_cmd_payload_fragment_mask;
  wire                bmbDecoder_7_io_outputs_1_rsp_ready;
  wire                system_fabric_invalidationMonitor_logic_io_input_cmd_ready;
  wire                system_fabric_invalidationMonitor_logic_io_input_rsp_valid;
  wire                system_fabric_invalidationMonitor_logic_io_input_rsp_payload_last;
  wire       [1:0]    system_fabric_invalidationMonitor_logic_io_input_rsp_payload_fragment_source;
  wire       [0:0]    system_fabric_invalidationMonitor_logic_io_input_rsp_payload_fragment_opcode;
  wire       [63:0]   system_fabric_invalidationMonitor_logic_io_input_rsp_payload_fragment_data;
  wire       [3:0]    system_fabric_invalidationMonitor_logic_io_input_rsp_payload_fragment_context;
  wire                system_fabric_invalidationMonitor_logic_io_input_inv_valid;
  wire                system_fabric_invalidationMonitor_logic_io_input_inv_payload_all;
  wire       [31:0]   system_fabric_invalidationMonitor_logic_io_input_inv_payload_address;
  wire       [5:0]    system_fabric_invalidationMonitor_logic_io_input_inv_payload_length;
  wire       [1:0]    system_fabric_invalidationMonitor_logic_io_input_inv_payload_source;
  wire                system_fabric_invalidationMonitor_logic_io_input_ack_ready;
  wire                system_fabric_invalidationMonitor_logic_io_input_sync_valid;
  wire       [1:0]    system_fabric_invalidationMonitor_logic_io_input_sync_payload_source;
  wire                system_fabric_invalidationMonitor_logic_io_output_cmd_valid;
  wire                system_fabric_invalidationMonitor_logic_io_output_cmd_payload_last;
  wire       [1:0]    system_fabric_invalidationMonitor_logic_io_output_cmd_payload_fragment_source;
  wire       [0:0]    system_fabric_invalidationMonitor_logic_io_output_cmd_payload_fragment_opcode;
  wire       [31:0]   system_fabric_invalidationMonitor_logic_io_output_cmd_payload_fragment_address;
  wire       [5:0]    system_fabric_invalidationMonitor_logic_io_output_cmd_payload_fragment_length;
  wire       [63:0]   system_fabric_invalidationMonitor_logic_io_output_cmd_payload_fragment_data;
  wire       [7:0]    system_fabric_invalidationMonitor_logic_io_output_cmd_payload_fragment_mask;
  wire       [42:0]   system_fabric_invalidationMonitor_logic_io_output_cmd_payload_fragment_context;
  wire                system_fabric_invalidationMonitor_logic_io_output_rsp_ready;
  wire                system_fabric_exclusiveMonitor_logic_io_input_cmd_ready;
  wire                system_fabric_exclusiveMonitor_logic_io_input_rsp_valid;
  wire                system_fabric_exclusiveMonitor_logic_io_input_rsp_payload_last;
  wire       [1:0]    system_fabric_exclusiveMonitor_logic_io_input_rsp_payload_fragment_source;
  wire       [0:0]    system_fabric_exclusiveMonitor_logic_io_input_rsp_payload_fragment_opcode;
  wire                system_fabric_exclusiveMonitor_logic_io_input_rsp_payload_fragment_exclusive;
  wire       [63:0]   system_fabric_exclusiveMonitor_logic_io_input_rsp_payload_fragment_data;
  wire       [2:0]    system_fabric_exclusiveMonitor_logic_io_input_rsp_payload_fragment_context;
  wire                system_fabric_exclusiveMonitor_logic_io_input_inv_valid;
  wire                system_fabric_exclusiveMonitor_logic_io_input_inv_payload_all;
  wire       [31:0]   system_fabric_exclusiveMonitor_logic_io_input_inv_payload_address;
  wire       [5:0]    system_fabric_exclusiveMonitor_logic_io_input_inv_payload_length;
  wire       [1:0]    system_fabric_exclusiveMonitor_logic_io_input_inv_payload_source;
  wire                system_fabric_exclusiveMonitor_logic_io_input_ack_ready;
  wire                system_fabric_exclusiveMonitor_logic_io_input_sync_valid;
  wire       [1:0]    system_fabric_exclusiveMonitor_logic_io_input_sync_payload_source;
  wire                system_fabric_exclusiveMonitor_logic_io_output_cmd_valid;
  wire                system_fabric_exclusiveMonitor_logic_io_output_cmd_payload_last;
  wire       [1:0]    system_fabric_exclusiveMonitor_logic_io_output_cmd_payload_fragment_source;
  wire       [0:0]    system_fabric_exclusiveMonitor_logic_io_output_cmd_payload_fragment_opcode;
  wire       [31:0]   system_fabric_exclusiveMonitor_logic_io_output_cmd_payload_fragment_address;
  wire       [5:0]    system_fabric_exclusiveMonitor_logic_io_output_cmd_payload_fragment_length;
  wire       [63:0]   system_fabric_exclusiveMonitor_logic_io_output_cmd_payload_fragment_data;
  wire       [7:0]    system_fabric_exclusiveMonitor_logic_io_output_cmd_payload_fragment_mask;
  wire       [3:0]    system_fabric_exclusiveMonitor_logic_io_output_cmd_payload_fragment_context;
  wire                system_fabric_exclusiveMonitor_logic_io_output_rsp_ready;
  wire                system_fabric_exclusiveMonitor_logic_io_output_inv_ready;
  wire                system_fabric_exclusiveMonitor_logic_io_output_ack_valid;
  wire                system_fabric_exclusiveMonitor_logic_io_output_sync_ready;
  wire                system_fabric_dBusCoherent_bmb_arbiter_io_inputs_0_cmd_ready;
  wire                system_fabric_dBusCoherent_bmb_arbiter_io_inputs_0_rsp_valid;
  wire                system_fabric_dBusCoherent_bmb_arbiter_io_inputs_0_rsp_payload_last;
  wire       [0:0]    system_fabric_dBusCoherent_bmb_arbiter_io_inputs_0_rsp_payload_fragment_opcode;
  wire       [63:0]   system_fabric_dBusCoherent_bmb_arbiter_io_inputs_0_rsp_payload_fragment_data;
  wire                system_fabric_dBusCoherent_bmb_arbiter_io_inputs_0_sync_valid;
  wire                system_fabric_dBusCoherent_bmb_arbiter_io_inputs_1_cmd_ready;
  wire                system_fabric_dBusCoherent_bmb_arbiter_io_inputs_1_rsp_valid;
  wire                system_fabric_dBusCoherent_bmb_arbiter_io_inputs_1_rsp_payload_last;
  wire       [0:0]    system_fabric_dBusCoherent_bmb_arbiter_io_inputs_1_rsp_payload_fragment_opcode;
  wire                system_fabric_dBusCoherent_bmb_arbiter_io_inputs_1_rsp_payload_fragment_exclusive;
  wire       [63:0]   system_fabric_dBusCoherent_bmb_arbiter_io_inputs_1_rsp_payload_fragment_data;
  wire       [2:0]    system_fabric_dBusCoherent_bmb_arbiter_io_inputs_1_rsp_payload_fragment_context;
  wire                system_fabric_dBusCoherent_bmb_arbiter_io_inputs_1_inv_valid;
  wire                system_fabric_dBusCoherent_bmb_arbiter_io_inputs_1_inv_payload_all;
  wire       [31:0]   system_fabric_dBusCoherent_bmb_arbiter_io_inputs_1_inv_payload_address;
  wire       [5:0]    system_fabric_dBusCoherent_bmb_arbiter_io_inputs_1_inv_payload_length;
  wire                system_fabric_dBusCoherent_bmb_arbiter_io_inputs_1_ack_ready;
  wire                system_fabric_dBusCoherent_bmb_arbiter_io_inputs_1_sync_valid;
  wire                system_fabric_dBusCoherent_bmb_arbiter_io_inputs_2_cmd_ready;
  wire                system_fabric_dBusCoherent_bmb_arbiter_io_inputs_2_rsp_valid;
  wire                system_fabric_dBusCoherent_bmb_arbiter_io_inputs_2_rsp_payload_last;
  wire       [0:0]    system_fabric_dBusCoherent_bmb_arbiter_io_inputs_2_rsp_payload_fragment_opcode;
  wire                system_fabric_dBusCoherent_bmb_arbiter_io_inputs_2_rsp_payload_fragment_exclusive;
  wire       [63:0]   system_fabric_dBusCoherent_bmb_arbiter_io_inputs_2_rsp_payload_fragment_data;
  wire       [2:0]    system_fabric_dBusCoherent_bmb_arbiter_io_inputs_2_rsp_payload_fragment_context;
  wire                system_fabric_dBusCoherent_bmb_arbiter_io_inputs_2_inv_valid;
  wire                system_fabric_dBusCoherent_bmb_arbiter_io_inputs_2_inv_payload_all;
  wire       [31:0]   system_fabric_dBusCoherent_bmb_arbiter_io_inputs_2_inv_payload_address;
  wire       [5:0]    system_fabric_dBusCoherent_bmb_arbiter_io_inputs_2_inv_payload_length;
  wire                system_fabric_dBusCoherent_bmb_arbiter_io_inputs_2_ack_ready;
  wire                system_fabric_dBusCoherent_bmb_arbiter_io_inputs_2_sync_valid;
  wire                system_fabric_dBusCoherent_bmb_arbiter_io_output_cmd_valid;
  wire                system_fabric_dBusCoherent_bmb_arbiter_io_output_cmd_payload_last;
  wire       [1:0]    system_fabric_dBusCoherent_bmb_arbiter_io_output_cmd_payload_fragment_source;
  wire       [0:0]    system_fabric_dBusCoherent_bmb_arbiter_io_output_cmd_payload_fragment_opcode;
  wire                system_fabric_dBusCoherent_bmb_arbiter_io_output_cmd_payload_fragment_exclusive;
  wire       [31:0]   system_fabric_dBusCoherent_bmb_arbiter_io_output_cmd_payload_fragment_address;
  wire       [5:0]    system_fabric_dBusCoherent_bmb_arbiter_io_output_cmd_payload_fragment_length;
  wire       [63:0]   system_fabric_dBusCoherent_bmb_arbiter_io_output_cmd_payload_fragment_data;
  wire       [7:0]    system_fabric_dBusCoherent_bmb_arbiter_io_output_cmd_payload_fragment_mask;
  wire       [2:0]    system_fabric_dBusCoherent_bmb_arbiter_io_output_cmd_payload_fragment_context;
  wire                system_fabric_dBusCoherent_bmb_arbiter_io_output_rsp_ready;
  wire                system_fabric_dBusCoherent_bmb_arbiter_io_output_inv_ready;
  wire                system_fabric_dBusCoherent_bmb_arbiter_io_output_ack_valid;
  wire                system_fabric_dBusCoherent_bmb_arbiter_io_output_sync_ready;
  wire                system_clint_logic_io_bus_cmd_ready;
  wire                system_clint_logic_io_bus_rsp_valid;
  wire                system_clint_logic_io_bus_rsp_payload_last;
  wire       [0:0]    system_clint_logic_io_bus_rsp_payload_fragment_source;
  wire       [0:0]    system_clint_logic_io_bus_rsp_payload_fragment_opcode;
  wire       [31:0]   system_clint_logic_io_bus_rsp_payload_fragment_data;
  wire       [6:0]    system_clint_logic_io_bus_rsp_payload_fragment_context;
  wire       [1:0]    system_clint_logic_io_timerInterrupt;
  wire       [1:0]    system_clint_logic_io_softwareInterrupt;
  wire       [63:0]   system_clint_logic_io_time;
  wire       [31:0]   system_gpioA_logic_io_gpio_write;
  wire       [31:0]   system_gpioA_logic_io_gpio_writeEnable;
  wire                system_gpioA_logic_io_bus_cmd_ready;
  wire                system_gpioA_logic_io_bus_rsp_valid;
  wire                system_gpioA_logic_io_bus_rsp_payload_last;
  wire       [0:0]    system_gpioA_logic_io_bus_rsp_payload_fragment_source;
  wire       [0:0]    system_gpioA_logic_io_bus_rsp_payload_fragment_opcode;
  wire       [31:0]   system_gpioA_logic_io_bus_rsp_payload_fragment_data;
  wire       [6:0]    system_gpioA_logic_io_bus_rsp_payload_fragment_context;
  wire       [31:0]   system_gpioA_logic_io_interrupt;
  wire                system_uartA_logic_io_bus_cmd_ready;
  wire                system_uartA_logic_io_bus_rsp_valid;
  wire                system_uartA_logic_io_bus_rsp_payload_last;
  wire       [0:0]    system_uartA_logic_io_bus_rsp_payload_fragment_source;
  wire       [0:0]    system_uartA_logic_io_bus_rsp_payload_fragment_opcode;
  wire       [31:0]   system_uartA_logic_io_bus_rsp_payload_fragment_data;
  wire       [6:0]    system_uartA_logic_io_bus_rsp_payload_fragment_context;
  wire                system_uartA_logic_io_uart_txd;
  wire                system_uartA_logic_io_interrupt;
  wire                system_spiA_logic_io_ctrl_cmd_ready;
  wire                system_spiA_logic_io_ctrl_rsp_valid;
  wire                system_spiA_logic_io_ctrl_rsp_payload_last;
  wire       [0:0]    system_spiA_logic_io_ctrl_rsp_payload_fragment_source;
  wire       [0:0]    system_spiA_logic_io_ctrl_rsp_payload_fragment_opcode;
  wire       [31:0]   system_spiA_logic_io_ctrl_rsp_payload_fragment_data;
  wire       [6:0]    system_spiA_logic_io_ctrl_rsp_payload_fragment_context;
  wire       [0:0]    system_spiA_logic_io_spi_sclk_write;
  wire       [2:0]    system_spiA_logic_io_spi_ss;
  wire       [0:0]    system_spiA_logic_io_spi_data_0_write;
  wire                system_spiA_logic_io_spi_data_0_writeEnable;
  wire       [0:0]    system_spiA_logic_io_spi_data_1_write;
  wire                system_spiA_logic_io_spi_data_1_writeEnable;
  wire                system_spiA_logic_io_interrupt;
  wire                system_mac_logic_io_bus_cmd_ready;
  wire                system_mac_logic_io_bus_rsp_valid;
  wire                system_mac_logic_io_bus_rsp_payload_last;
  wire       [0:0]    system_mac_logic_io_bus_rsp_payload_fragment_source;
  wire       [0:0]    system_mac_logic_io_bus_rsp_payload_fragment_opcode;
  wire       [31:0]   system_mac_logic_io_bus_rsp_payload_fragment_data;
  wire       [6:0]    system_mac_logic_io_bus_rsp_payload_fragment_context;
  wire                system_mac_logic_io_phy_tx_valid;
  wire                system_mac_logic_io_phy_tx_payload_last;
  wire       [1:0]    system_mac_logic_io_phy_tx_payload_fragment_data;
  wire                system_mac_logic_io_phy_rx_ready;
  wire                system_mac_logic_io_interrupt;
  wire                system_mac_logic_txReset;
  wire                macTxInterFrame_1_io_input_ready;
  wire                macTxInterFrame_1_io_output_valid;
  wire                macTxInterFrame_1_io_output_payload_last;
  wire       [1:0]    macTxInterFrame_1_io_output_payload_fragment_data;
  wire                system_dma_logic_io_sgRead_cmd_valid;
  wire                system_dma_logic_io_sgRead_cmd_payload_last;
  wire       [0:0]    system_dma_logic_io_sgRead_cmd_payload_fragment_opcode;
  wire       [31:0]   system_dma_logic_io_sgRead_cmd_payload_fragment_address;
  wire       [4:0]    system_dma_logic_io_sgRead_cmd_payload_fragment_length;
  wire                system_dma_logic_io_sgRead_rsp_ready;
  wire                system_dma_logic_io_sgWrite_cmd_valid;
  wire                system_dma_logic_io_sgWrite_cmd_payload_last;
  wire       [0:0]    system_dma_logic_io_sgWrite_cmd_payload_fragment_opcode;
  wire       [31:0]   system_dma_logic_io_sgWrite_cmd_payload_fragment_address;
  wire       [1:0]    system_dma_logic_io_sgWrite_cmd_payload_fragment_length;
  wire       [63:0]   system_dma_logic_io_sgWrite_cmd_payload_fragment_data;
  wire       [7:0]    system_dma_logic_io_sgWrite_cmd_payload_fragment_mask;
  wire                system_dma_logic_io_sgWrite_rsp_ready;
  wire                system_dma_logic_io_read_cmd_valid;
  wire                system_dma_logic_io_read_cmd_payload_last;
  wire       [0:0]    system_dma_logic_io_read_cmd_payload_fragment_source;
  wire       [0:0]    system_dma_logic_io_read_cmd_payload_fragment_opcode;
  wire       [31:0]   system_dma_logic_io_read_cmd_payload_fragment_address;
  wire       [5:0]    system_dma_logic_io_read_cmd_payload_fragment_length;
  wire       [13:0]   system_dma_logic_io_read_cmd_payload_fragment_context;
  wire                system_dma_logic_io_read_rsp_ready;
  wire                system_dma_logic_io_outputs_0_valid;
  wire       [63:0]   system_dma_logic_io_outputs_0_payload_data;
  wire       [7:0]    system_dma_logic_io_outputs_0_payload_mask;
  wire                system_dma_logic_io_outputs_0_payload_last;
  wire                system_dma_logic_io_outputs_1_valid;
  wire       [31:0]   system_dma_logic_io_outputs_1_payload_data;
  wire       [3:0]    system_dma_logic_io_outputs_1_payload_mask;
  wire                system_dma_logic_io_outputs_1_payload_last;
  wire       [1:0]    system_dma_logic_io_interrupts;
  wire                system_dma_logic_io_ctrl_cmd_ready;
  wire                system_dma_logic_io_ctrl_rsp_valid;
  wire                system_dma_logic_io_ctrl_rsp_payload_last;
  wire       [0:0]    system_dma_logic_io_ctrl_rsp_payload_fragment_source;
  wire       [0:0]    system_dma_logic_io_ctrl_rsp_payload_fragment_opcode;
  wire       [31:0]   system_dma_logic_io_ctrl_rsp_payload_fragment_data;
  wire       [6:0]    system_dma_logic_io_ctrl_rsp_payload_fragment_context;
  wire                system_vga_logic_io_input_ready;
  wire                system_vga_logic_io_ctrl_cmd_ready;
  wire                system_vga_logic_io_ctrl_rsp_valid;
  wire                system_vga_logic_io_ctrl_rsp_payload_last;
  wire       [0:0]    system_vga_logic_io_ctrl_rsp_payload_fragment_source;
  wire       [0:0]    system_vga_logic_io_ctrl_rsp_payload_fragment_opcode;
  wire       [31:0]   system_vga_logic_io_ctrl_rsp_payload_fragment_data;
  wire       [6:0]    system_vga_logic_io_ctrl_rsp_payload_fragment_context;
  wire                system_vga_logic_io_vga_vSync;
  wire                system_vga_logic_io_vga_hSync;
  wire                system_vga_logic_io_vga_colorEn;
  wire       [3:0]    system_vga_logic_io_vga_color_r;
  wire       [3:0]    system_vga_logic_io_vga_color_g;
  wire       [3:0]    system_vga_logic_io_vga_color_b;
  wire                system_dma_logic_io_outputs_0_queue_io_push_ready;
  wire                system_dma_logic_io_outputs_0_queue_io_pop_valid;
  wire       [63:0]   system_dma_logic_io_outputs_0_queue_io_pop_payload_data;
  wire       [7:0]    system_dma_logic_io_outputs_0_queue_io_pop_payload_mask;
  wire                system_dma_logic_io_outputs_0_queue_io_pop_payload_last;
  wire       [7:0]    system_dma_logic_io_outputs_0_queue_io_pushOccupancy;
  wire       [7:0]    system_dma_logic_io_outputs_0_queue_io_popOccupancy;
  wire                system_audioOut_logic_io_ctrl_cmd_ready;
  wire                system_audioOut_logic_io_ctrl_rsp_valid;
  wire                system_audioOut_logic_io_ctrl_rsp_payload_last;
  wire       [0:0]    system_audioOut_logic_io_ctrl_rsp_payload_fragment_source;
  wire       [0:0]    system_audioOut_logic_io_ctrl_rsp_payload_fragment_opcode;
  wire       [31:0]   system_audioOut_logic_io_ctrl_rsp_payload_fragment_data;
  wire       [6:0]    system_audioOut_logic_io_ctrl_rsp_payload_fragment_context;
  wire                system_audioOut_logic_io_input_ready;
  wire       [1:0]    system_audioOut_logic_io_outputs;
  wire                system_ramA_logic_io_bus_cmd_ready;
  wire                system_ramA_logic_io_bus_rsp_valid;
  wire                system_ramA_logic_io_bus_rsp_payload_last;
  wire       [0:0]    system_ramA_logic_io_bus_rsp_payload_fragment_source;
  wire       [0:0]    system_ramA_logic_io_bus_rsp_payload_fragment_opcode;
  wire       [31:0]   system_ramA_logic_io_bus_rsp_payload_fragment_data;
  wire       [6:0]    system_ramA_logic_io_bus_rsp_payload_fragment_context;
  wire                startupe2_1_CFGCLK;
  wire                startupe2_1_CFGMCLK;
  wire                startupe2_1_EOS;
  wire                startupe2_1_PREQ;
  wire                system_dma_writeSg_decoder_io_input_cmd_ready;
  wire                system_dma_writeSg_decoder_io_input_rsp_valid;
  wire                system_dma_writeSg_decoder_io_input_rsp_payload_last;
  wire       [0:0]    system_dma_writeSg_decoder_io_input_rsp_payload_fragment_opcode;
  wire                system_dma_writeSg_decoder_io_outputs_0_cmd_valid;
  wire                system_dma_writeSg_decoder_io_outputs_0_cmd_payload_last;
  wire       [0:0]    system_dma_writeSg_decoder_io_outputs_0_cmd_payload_fragment_opcode;
  wire       [31:0]   system_dma_writeSg_decoder_io_outputs_0_cmd_payload_fragment_address;
  wire       [1:0]    system_dma_writeSg_decoder_io_outputs_0_cmd_payload_fragment_length;
  wire       [63:0]   system_dma_writeSg_decoder_io_outputs_0_cmd_payload_fragment_data;
  wire       [7:0]    system_dma_writeSg_decoder_io_outputs_0_cmd_payload_fragment_mask;
  wire                system_dma_writeSg_decoder_io_outputs_0_rsp_ready;
  wire                system_fabric_dBusCoherent_bmb_syncRemover_io_input_cmd_ready;
  wire                system_fabric_dBusCoherent_bmb_syncRemover_io_input_rsp_valid;
  wire                system_fabric_dBusCoherent_bmb_syncRemover_io_input_rsp_payload_last;
  wire       [0:0]    system_fabric_dBusCoherent_bmb_syncRemover_io_input_rsp_payload_fragment_opcode;
  wire       [63:0]   system_fabric_dBusCoherent_bmb_syncRemover_io_input_rsp_payload_fragment_data;
  wire                system_fabric_dBusCoherent_bmb_syncRemover_io_output_cmd_valid;
  wire                system_fabric_dBusCoherent_bmb_syncRemover_io_output_cmd_payload_last;
  wire       [0:0]    system_fabric_dBusCoherent_bmb_syncRemover_io_output_cmd_payload_fragment_opcode;
  wire       [31:0]   system_fabric_dBusCoherent_bmb_syncRemover_io_output_cmd_payload_fragment_address;
  wire       [1:0]    system_fabric_dBusCoherent_bmb_syncRemover_io_output_cmd_payload_fragment_length;
  wire       [63:0]   system_fabric_dBusCoherent_bmb_syncRemover_io_output_cmd_payload_fragment_data;
  wire       [7:0]    system_fabric_dBusCoherent_bmb_syncRemover_io_output_cmd_payload_fragment_mask;
  wire                system_fabric_dBusCoherent_bmb_syncRemover_io_output_rsp_ready;
  wire                system_fabric_dBusCoherent_bmb_syncRemover_io_output_sync_ready;
  wire                system_sdramA_logic_io_bmb_0_cmd_ready;
  wire                system_sdramA_logic_io_bmb_0_rsp_valid;
  wire                system_sdramA_logic_io_bmb_0_rsp_payload_last;
  wire       [4:0]    system_sdramA_logic_io_bmb_0_rsp_payload_fragment_source;
  wire       [0:0]    system_sdramA_logic_io_bmb_0_rsp_payload_fragment_opcode;
  wire       [63:0]   system_sdramA_logic_io_bmb_0_rsp_payload_fragment_data;
  wire                system_sdramA_logic_io_ctrl_cmd_ready;
  wire                system_sdramA_logic_io_ctrl_rsp_valid;
  wire                system_sdramA_logic_io_ctrl_rsp_payload_last;
  wire       [0:0]    system_sdramA_logic_io_ctrl_rsp_payload_fragment_source;
  wire       [0:0]    system_sdramA_logic_io_ctrl_rsp_payload_fragment_opcode;
  wire       [31:0]   system_sdramA_logic_io_ctrl_rsp_payload_fragment_data;
  wire       [6:0]    system_sdramA_logic_io_ctrl_rsp_payload_fragment_context;
  wire                system_sdramA_logic_io_phy_phases_0_CASn;
  wire                system_sdramA_logic_io_phy_phases_0_CKE;
  wire                system_sdramA_logic_io_phy_phases_0_CSn;
  wire       [1:0]    system_sdramA_logic_io_phy_phases_0_DM_0;
  wire       [1:0]    system_sdramA_logic_io_phy_phases_0_DM_1;
  wire                system_sdramA_logic_io_phy_phases_0_RASn;
  wire                system_sdramA_logic_io_phy_phases_0_WEn;
  wire       [15:0]   system_sdramA_logic_io_phy_phases_0_DQw_0;
  wire       [15:0]   system_sdramA_logic_io_phy_phases_0_DQw_1;
  wire                system_sdramA_logic_io_phy_phases_0_ODT;
  wire                system_sdramA_logic_io_phy_phases_1_CASn;
  wire                system_sdramA_logic_io_phy_phases_1_CKE;
  wire                system_sdramA_logic_io_phy_phases_1_CSn;
  wire       [1:0]    system_sdramA_logic_io_phy_phases_1_DM_0;
  wire       [1:0]    system_sdramA_logic_io_phy_phases_1_DM_1;
  wire                system_sdramA_logic_io_phy_phases_1_RASn;
  wire                system_sdramA_logic_io_phy_phases_1_WEn;
  wire       [15:0]   system_sdramA_logic_io_phy_phases_1_DQw_0;
  wire       [15:0]   system_sdramA_logic_io_phy_phases_1_DQw_1;
  wire                system_sdramA_logic_io_phy_phases_1_ODT;
  wire       [12:0]   system_sdramA_logic_io_phy_ADDR;
  wire       [2:0]    system_sdramA_logic_io_phy_BA;
  wire                system_sdramA_logic_io_phy_readEnable;
  wire                system_sdramA_logic_io_phy_writeEnable;
  wire                system_sdramA_logic_io_phy_DQS_preamble;
  wire                system_sdramA_logic_io_phy_DQS_active;
  wire                system_sdramA_logic_io_phy_DQS_postamble;
  wire       [15:0]   sdramDomain_phyA_logic_phy_io_ctrl_phases_0_DQr_0;
  wire       [15:0]   sdramDomain_phyA_logic_phy_io_ctrl_phases_0_DQr_1;
  wire       [15:0]   sdramDomain_phyA_logic_phy_io_ctrl_phases_1_DQr_0;
  wire       [15:0]   sdramDomain_phyA_logic_phy_io_ctrl_phases_1_DQr_1;
  wire                sdramDomain_phyA_logic_phy_io_ctrl_readValid;
  wire                sdramDomain_phyA_logic_phy_io_sdram_CK;
  wire                sdramDomain_phyA_logic_phy_io_sdram_CKn;
  wire                sdramDomain_phyA_logic_phy_io_sdram_ODT;
  wire       [12:0]   sdramDomain_phyA_logic_phy_io_sdram_ADDR;
  wire       [2:0]    sdramDomain_phyA_logic_phy_io_sdram_BA;
  wire                sdramDomain_phyA_logic_phy_io_sdram_CASn;
  wire                sdramDomain_phyA_logic_phy_io_sdram_CKE;
  wire                sdramDomain_phyA_logic_phy_io_sdram_CSn;
  wire       [1:0]    sdramDomain_phyA_logic_phy_io_sdram_DM;
  wire                sdramDomain_phyA_logic_phy_io_sdram_RASn;
  wire                sdramDomain_phyA_logic_phy_io_sdram_WEn;
  wire                system_sdramA0_bmb_arbiter_io_inputs_0_cmd_ready;
  wire                system_sdramA0_bmb_arbiter_io_inputs_0_rsp_valid;
  wire                system_sdramA0_bmb_arbiter_io_inputs_0_rsp_payload_last;
  wire       [3:0]    system_sdramA0_bmb_arbiter_io_inputs_0_rsp_payload_fragment_source;
  wire       [0:0]    system_sdramA0_bmb_arbiter_io_inputs_0_rsp_payload_fragment_opcode;
  wire       [63:0]   system_sdramA0_bmb_arbiter_io_inputs_0_rsp_payload_fragment_data;
  wire                system_sdramA0_bmb_arbiter_io_inputs_1_cmd_ready;
  wire                system_sdramA0_bmb_arbiter_io_inputs_1_rsp_valid;
  wire                system_sdramA0_bmb_arbiter_io_inputs_1_rsp_payload_last;
  wire       [0:0]    system_sdramA0_bmb_arbiter_io_inputs_1_rsp_payload_fragment_source;
  wire       [0:0]    system_sdramA0_bmb_arbiter_io_inputs_1_rsp_payload_fragment_opcode;
  wire       [63:0]   system_sdramA0_bmb_arbiter_io_inputs_1_rsp_payload_fragment_data;
  wire                system_sdramA0_bmb_arbiter_io_output_cmd_valid;
  wire                system_sdramA0_bmb_arbiter_io_output_cmd_payload_last;
  wire       [4:0]    system_sdramA0_bmb_arbiter_io_output_cmd_payload_fragment_source;
  wire       [0:0]    system_sdramA0_bmb_arbiter_io_output_cmd_payload_fragment_opcode;
  wire       [26:0]   system_sdramA0_bmb_arbiter_io_output_cmd_payload_fragment_address;
  wire       [5:0]    system_sdramA0_bmb_arbiter_io_output_cmd_payload_fragment_length;
  wire       [63:0]   system_sdramA0_bmb_arbiter_io_output_cmd_payload_fragment_data;
  wire       [7:0]    system_sdramA0_bmb_arbiter_io_output_cmd_payload_fragment_mask;
  wire                system_sdramA0_bmb_arbiter_io_output_rsp_ready;
  wire                sdramDomain_bmbCc_bmb_decoder_io_input_cmd_ready;
  wire                sdramDomain_bmbCc_bmb_decoder_io_input_rsp_valid;
  wire                sdramDomain_bmbCc_bmb_decoder_io_input_rsp_payload_last;
  wire       [0:0]    sdramDomain_bmbCc_bmb_decoder_io_input_rsp_payload_fragment_source;
  wire       [0:0]    sdramDomain_bmbCc_bmb_decoder_io_input_rsp_payload_fragment_opcode;
  wire       [31:0]   sdramDomain_bmbCc_bmb_decoder_io_input_rsp_payload_fragment_data;
  wire       [6:0]    sdramDomain_bmbCc_bmb_decoder_io_input_rsp_payload_fragment_context;
  wire                sdramDomain_bmbCc_bmb_decoder_io_outputs_0_cmd_valid;
  wire                sdramDomain_bmbCc_bmb_decoder_io_outputs_0_cmd_payload_last;
  wire       [0:0]    sdramDomain_bmbCc_bmb_decoder_io_outputs_0_cmd_payload_fragment_source;
  wire       [0:0]    sdramDomain_bmbCc_bmb_decoder_io_outputs_0_cmd_payload_fragment_opcode;
  wire       [12:0]   sdramDomain_bmbCc_bmb_decoder_io_outputs_0_cmd_payload_fragment_address;
  wire       [1:0]    sdramDomain_bmbCc_bmb_decoder_io_outputs_0_cmd_payload_fragment_length;
  wire       [31:0]   sdramDomain_bmbCc_bmb_decoder_io_outputs_0_cmd_payload_fragment_data;
  wire       [3:0]    sdramDomain_bmbCc_bmb_decoder_io_outputs_0_cmd_payload_fragment_mask;
  wire       [6:0]    sdramDomain_bmbCc_bmb_decoder_io_outputs_0_cmd_payload_fragment_context;
  wire                sdramDomain_bmbCc_bmb_decoder_io_outputs_0_rsp_ready;
  wire                sdramDomain_bmbCc_bmb_decoder_io_outputs_1_cmd_valid;
  wire                sdramDomain_bmbCc_bmb_decoder_io_outputs_1_cmd_payload_last;
  wire       [0:0]    sdramDomain_bmbCc_bmb_decoder_io_outputs_1_cmd_payload_fragment_source;
  wire       [0:0]    sdramDomain_bmbCc_bmb_decoder_io_outputs_1_cmd_payload_fragment_opcode;
  wire       [12:0]   sdramDomain_bmbCc_bmb_decoder_io_outputs_1_cmd_payload_fragment_address;
  wire       [1:0]    sdramDomain_bmbCc_bmb_decoder_io_outputs_1_cmd_payload_fragment_length;
  wire       [31:0]   sdramDomain_bmbCc_bmb_decoder_io_outputs_1_cmd_payload_fragment_data;
  wire       [3:0]    sdramDomain_bmbCc_bmb_decoder_io_outputs_1_cmd_payload_fragment_mask;
  wire       [6:0]    sdramDomain_bmbCc_bmb_decoder_io_outputs_1_cmd_payload_fragment_context;
  wire                sdramDomain_bmbCc_bmb_decoder_io_outputs_1_rsp_ready;
  wire                system_bmbPeripheral_bmb_decoder_io_input_cmd_ready;
  wire                system_bmbPeripheral_bmb_decoder_io_input_rsp_valid;
  wire                system_bmbPeripheral_bmb_decoder_io_input_rsp_payload_last;
  wire       [0:0]    system_bmbPeripheral_bmb_decoder_io_input_rsp_payload_fragment_source;
  wire       [0:0]    system_bmbPeripheral_bmb_decoder_io_input_rsp_payload_fragment_opcode;
  wire       [31:0]   system_bmbPeripheral_bmb_decoder_io_input_rsp_payload_fragment_data;
  wire       [6:0]    system_bmbPeripheral_bmb_decoder_io_input_rsp_payload_fragment_context;
  wire                system_bmbPeripheral_bmb_decoder_io_outputs_0_cmd_valid;
  wire                system_bmbPeripheral_bmb_decoder_io_outputs_0_cmd_payload_last;
  wire       [0:0]    system_bmbPeripheral_bmb_decoder_io_outputs_0_cmd_payload_fragment_source;
  wire       [0:0]    system_bmbPeripheral_bmb_decoder_io_outputs_0_cmd_payload_fragment_opcode;
  wire       [23:0]   system_bmbPeripheral_bmb_decoder_io_outputs_0_cmd_payload_fragment_address;
  wire       [1:0]    system_bmbPeripheral_bmb_decoder_io_outputs_0_cmd_payload_fragment_length;
  wire       [31:0]   system_bmbPeripheral_bmb_decoder_io_outputs_0_cmd_payload_fragment_data;
  wire       [3:0]    system_bmbPeripheral_bmb_decoder_io_outputs_0_cmd_payload_fragment_mask;
  wire       [6:0]    system_bmbPeripheral_bmb_decoder_io_outputs_0_cmd_payload_fragment_context;
  wire                system_bmbPeripheral_bmb_decoder_io_outputs_0_rsp_ready;
  wire                system_bmbPeripheral_bmb_decoder_io_outputs_1_cmd_valid;
  wire                system_bmbPeripheral_bmb_decoder_io_outputs_1_cmd_payload_last;
  wire       [0:0]    system_bmbPeripheral_bmb_decoder_io_outputs_1_cmd_payload_fragment_source;
  wire       [0:0]    system_bmbPeripheral_bmb_decoder_io_outputs_1_cmd_payload_fragment_opcode;
  wire       [23:0]   system_bmbPeripheral_bmb_decoder_io_outputs_1_cmd_payload_fragment_address;
  wire       [1:0]    system_bmbPeripheral_bmb_decoder_io_outputs_1_cmd_payload_fragment_length;
  wire       [31:0]   system_bmbPeripheral_bmb_decoder_io_outputs_1_cmd_payload_fragment_data;
  wire       [3:0]    system_bmbPeripheral_bmb_decoder_io_outputs_1_cmd_payload_fragment_mask;
  wire       [6:0]    system_bmbPeripheral_bmb_decoder_io_outputs_1_cmd_payload_fragment_context;
  wire                system_bmbPeripheral_bmb_decoder_io_outputs_1_rsp_ready;
  wire                system_bmbPeripheral_bmb_decoder_io_outputs_2_cmd_valid;
  wire                system_bmbPeripheral_bmb_decoder_io_outputs_2_cmd_payload_last;
  wire       [0:0]    system_bmbPeripheral_bmb_decoder_io_outputs_2_cmd_payload_fragment_source;
  wire       [0:0]    system_bmbPeripheral_bmb_decoder_io_outputs_2_cmd_payload_fragment_opcode;
  wire       [23:0]   system_bmbPeripheral_bmb_decoder_io_outputs_2_cmd_payload_fragment_address;
  wire       [1:0]    system_bmbPeripheral_bmb_decoder_io_outputs_2_cmd_payload_fragment_length;
  wire       [31:0]   system_bmbPeripheral_bmb_decoder_io_outputs_2_cmd_payload_fragment_data;
  wire       [3:0]    system_bmbPeripheral_bmb_decoder_io_outputs_2_cmd_payload_fragment_mask;
  wire       [6:0]    system_bmbPeripheral_bmb_decoder_io_outputs_2_cmd_payload_fragment_context;
  wire                system_bmbPeripheral_bmb_decoder_io_outputs_2_rsp_ready;
  wire                system_bmbPeripheral_bmb_decoder_io_outputs_3_cmd_valid;
  wire                system_bmbPeripheral_bmb_decoder_io_outputs_3_cmd_payload_last;
  wire       [0:0]    system_bmbPeripheral_bmb_decoder_io_outputs_3_cmd_payload_fragment_source;
  wire       [0:0]    system_bmbPeripheral_bmb_decoder_io_outputs_3_cmd_payload_fragment_opcode;
  wire       [23:0]   system_bmbPeripheral_bmb_decoder_io_outputs_3_cmd_payload_fragment_address;
  wire       [1:0]    system_bmbPeripheral_bmb_decoder_io_outputs_3_cmd_payload_fragment_length;
  wire       [31:0]   system_bmbPeripheral_bmb_decoder_io_outputs_3_cmd_payload_fragment_data;
  wire       [3:0]    system_bmbPeripheral_bmb_decoder_io_outputs_3_cmd_payload_fragment_mask;
  wire       [6:0]    system_bmbPeripheral_bmb_decoder_io_outputs_3_cmd_payload_fragment_context;
  wire                system_bmbPeripheral_bmb_decoder_io_outputs_3_rsp_ready;
  wire                system_bmbPeripheral_bmb_decoder_io_outputs_4_cmd_valid;
  wire                system_bmbPeripheral_bmb_decoder_io_outputs_4_cmd_payload_last;
  wire       [0:0]    system_bmbPeripheral_bmb_decoder_io_outputs_4_cmd_payload_fragment_source;
  wire       [0:0]    system_bmbPeripheral_bmb_decoder_io_outputs_4_cmd_payload_fragment_opcode;
  wire       [23:0]   system_bmbPeripheral_bmb_decoder_io_outputs_4_cmd_payload_fragment_address;
  wire       [1:0]    system_bmbPeripheral_bmb_decoder_io_outputs_4_cmd_payload_fragment_length;
  wire       [31:0]   system_bmbPeripheral_bmb_decoder_io_outputs_4_cmd_payload_fragment_data;
  wire       [3:0]    system_bmbPeripheral_bmb_decoder_io_outputs_4_cmd_payload_fragment_mask;
  wire       [6:0]    system_bmbPeripheral_bmb_decoder_io_outputs_4_cmd_payload_fragment_context;
  wire                system_bmbPeripheral_bmb_decoder_io_outputs_4_rsp_ready;
  wire                system_bmbPeripheral_bmb_decoder_io_outputs_5_cmd_valid;
  wire                system_bmbPeripheral_bmb_decoder_io_outputs_5_cmd_payload_last;
  wire       [0:0]    system_bmbPeripheral_bmb_decoder_io_outputs_5_cmd_payload_fragment_source;
  wire       [0:0]    system_bmbPeripheral_bmb_decoder_io_outputs_5_cmd_payload_fragment_opcode;
  wire       [23:0]   system_bmbPeripheral_bmb_decoder_io_outputs_5_cmd_payload_fragment_address;
  wire       [1:0]    system_bmbPeripheral_bmb_decoder_io_outputs_5_cmd_payload_fragment_length;
  wire       [31:0]   system_bmbPeripheral_bmb_decoder_io_outputs_5_cmd_payload_fragment_data;
  wire       [3:0]    system_bmbPeripheral_bmb_decoder_io_outputs_5_cmd_payload_fragment_mask;
  wire       [6:0]    system_bmbPeripheral_bmb_decoder_io_outputs_5_cmd_payload_fragment_context;
  wire                system_bmbPeripheral_bmb_decoder_io_outputs_5_rsp_ready;
  wire                system_bmbPeripheral_bmb_decoder_io_outputs_6_cmd_valid;
  wire                system_bmbPeripheral_bmb_decoder_io_outputs_6_cmd_payload_last;
  wire       [0:0]    system_bmbPeripheral_bmb_decoder_io_outputs_6_cmd_payload_fragment_source;
  wire       [0:0]    system_bmbPeripheral_bmb_decoder_io_outputs_6_cmd_payload_fragment_opcode;
  wire       [23:0]   system_bmbPeripheral_bmb_decoder_io_outputs_6_cmd_payload_fragment_address;
  wire       [1:0]    system_bmbPeripheral_bmb_decoder_io_outputs_6_cmd_payload_fragment_length;
  wire       [31:0]   system_bmbPeripheral_bmb_decoder_io_outputs_6_cmd_payload_fragment_data;
  wire       [3:0]    system_bmbPeripheral_bmb_decoder_io_outputs_6_cmd_payload_fragment_mask;
  wire       [6:0]    system_bmbPeripheral_bmb_decoder_io_outputs_6_cmd_payload_fragment_context;
  wire                system_bmbPeripheral_bmb_decoder_io_outputs_6_rsp_ready;
  wire                system_bmbPeripheral_bmb_decoder_io_outputs_7_cmd_valid;
  wire                system_bmbPeripheral_bmb_decoder_io_outputs_7_cmd_payload_last;
  wire       [0:0]    system_bmbPeripheral_bmb_decoder_io_outputs_7_cmd_payload_fragment_source;
  wire       [0:0]    system_bmbPeripheral_bmb_decoder_io_outputs_7_cmd_payload_fragment_opcode;
  wire       [23:0]   system_bmbPeripheral_bmb_decoder_io_outputs_7_cmd_payload_fragment_address;
  wire       [1:0]    system_bmbPeripheral_bmb_decoder_io_outputs_7_cmd_payload_fragment_length;
  wire       [31:0]   system_bmbPeripheral_bmb_decoder_io_outputs_7_cmd_payload_fragment_data;
  wire       [3:0]    system_bmbPeripheral_bmb_decoder_io_outputs_7_cmd_payload_fragment_mask;
  wire       [6:0]    system_bmbPeripheral_bmb_decoder_io_outputs_7_cmd_payload_fragment_context;
  wire                system_bmbPeripheral_bmb_decoder_io_outputs_7_rsp_ready;
  wire                system_bmbPeripheral_bmb_decoder_io_outputs_8_cmd_valid;
  wire                system_bmbPeripheral_bmb_decoder_io_outputs_8_cmd_payload_last;
  wire       [0:0]    system_bmbPeripheral_bmb_decoder_io_outputs_8_cmd_payload_fragment_source;
  wire       [0:0]    system_bmbPeripheral_bmb_decoder_io_outputs_8_cmd_payload_fragment_opcode;
  wire       [23:0]   system_bmbPeripheral_bmb_decoder_io_outputs_8_cmd_payload_fragment_address;
  wire       [1:0]    system_bmbPeripheral_bmb_decoder_io_outputs_8_cmd_payload_fragment_length;
  wire       [31:0]   system_bmbPeripheral_bmb_decoder_io_outputs_8_cmd_payload_fragment_data;
  wire       [3:0]    system_bmbPeripheral_bmb_decoder_io_outputs_8_cmd_payload_fragment_mask;
  wire       [6:0]    system_bmbPeripheral_bmb_decoder_io_outputs_8_cmd_payload_fragment_context;
  wire                system_bmbPeripheral_bmb_decoder_io_outputs_8_rsp_ready;
  wire                system_bmbPeripheral_bmb_decoder_io_outputs_9_cmd_valid;
  wire                system_bmbPeripheral_bmb_decoder_io_outputs_9_cmd_payload_last;
  wire       [0:0]    system_bmbPeripheral_bmb_decoder_io_outputs_9_cmd_payload_fragment_source;
  wire       [0:0]    system_bmbPeripheral_bmb_decoder_io_outputs_9_cmd_payload_fragment_opcode;
  wire       [23:0]   system_bmbPeripheral_bmb_decoder_io_outputs_9_cmd_payload_fragment_address;
  wire       [1:0]    system_bmbPeripheral_bmb_decoder_io_outputs_9_cmd_payload_fragment_length;
  wire       [31:0]   system_bmbPeripheral_bmb_decoder_io_outputs_9_cmd_payload_fragment_data;
  wire       [3:0]    system_bmbPeripheral_bmb_decoder_io_outputs_9_cmd_payload_fragment_mask;
  wire       [6:0]    system_bmbPeripheral_bmb_decoder_io_outputs_9_cmd_payload_fragment_context;
  wire                system_bmbPeripheral_bmb_decoder_io_outputs_9_rsp_ready;
  wire                system_bmbPeripheral_bmb_decoder_io_outputs_10_cmd_valid;
  wire                system_bmbPeripheral_bmb_decoder_io_outputs_10_cmd_payload_last;
  wire       [0:0]    system_bmbPeripheral_bmb_decoder_io_outputs_10_cmd_payload_fragment_source;
  wire       [0:0]    system_bmbPeripheral_bmb_decoder_io_outputs_10_cmd_payload_fragment_opcode;
  wire       [23:0]   system_bmbPeripheral_bmb_decoder_io_outputs_10_cmd_payload_fragment_address;
  wire       [1:0]    system_bmbPeripheral_bmb_decoder_io_outputs_10_cmd_payload_fragment_length;
  wire       [31:0]   system_bmbPeripheral_bmb_decoder_io_outputs_10_cmd_payload_fragment_data;
  wire       [3:0]    system_bmbPeripheral_bmb_decoder_io_outputs_10_cmd_payload_fragment_mask;
  wire       [6:0]    system_bmbPeripheral_bmb_decoder_io_outputs_10_cmd_payload_fragment_context;
  wire                system_bmbPeripheral_bmb_decoder_io_outputs_10_rsp_ready;
  wire                system_bmbPeripheral_bmb_crossClock_io_input_cmd_ready;
  wire                system_bmbPeripheral_bmb_crossClock_io_input_rsp_valid;
  wire                system_bmbPeripheral_bmb_crossClock_io_input_rsp_payload_last;
  wire       [0:0]    system_bmbPeripheral_bmb_crossClock_io_input_rsp_payload_fragment_source;
  wire       [0:0]    system_bmbPeripheral_bmb_crossClock_io_input_rsp_payload_fragment_opcode;
  wire       [31:0]   system_bmbPeripheral_bmb_crossClock_io_input_rsp_payload_fragment_data;
  wire       [6:0]    system_bmbPeripheral_bmb_crossClock_io_input_rsp_payload_fragment_context;
  wire                system_bmbPeripheral_bmb_crossClock_io_output_cmd_valid;
  wire                system_bmbPeripheral_bmb_crossClock_io_output_cmd_payload_last;
  wire       [0:0]    system_bmbPeripheral_bmb_crossClock_io_output_cmd_payload_fragment_source;
  wire       [0:0]    system_bmbPeripheral_bmb_crossClock_io_output_cmd_payload_fragment_opcode;
  wire       [23:0]   system_bmbPeripheral_bmb_crossClock_io_output_cmd_payload_fragment_address;
  wire       [1:0]    system_bmbPeripheral_bmb_crossClock_io_output_cmd_payload_fragment_length;
  wire       [31:0]   system_bmbPeripheral_bmb_crossClock_io_output_cmd_payload_fragment_data;
  wire       [3:0]    system_bmbPeripheral_bmb_crossClock_io_output_cmd_payload_fragment_mask;
  wire       [6:0]    system_bmbPeripheral_bmb_crossClock_io_output_cmd_payload_fragment_context;
  wire                system_bmbPeripheral_bmb_crossClock_io_output_rsp_ready;
  wire                system_bmbPeripheral_bmb_arbiter_io_inputs_0_cmd_ready;
  wire                system_bmbPeripheral_bmb_arbiter_io_inputs_0_rsp_valid;
  wire                system_bmbPeripheral_bmb_arbiter_io_inputs_0_rsp_payload_last;
  wire       [0:0]    system_bmbPeripheral_bmb_arbiter_io_inputs_0_rsp_payload_fragment_opcode;
  wire       [31:0]   system_bmbPeripheral_bmb_arbiter_io_inputs_0_rsp_payload_fragment_data;
  wire       [6:0]    system_bmbPeripheral_bmb_arbiter_io_inputs_0_rsp_payload_fragment_context;
  wire                system_bmbPeripheral_bmb_arbiter_io_inputs_1_cmd_ready;
  wire                system_bmbPeripheral_bmb_arbiter_io_inputs_1_rsp_valid;
  wire                system_bmbPeripheral_bmb_arbiter_io_inputs_1_rsp_payload_last;
  wire       [0:0]    system_bmbPeripheral_bmb_arbiter_io_inputs_1_rsp_payload_fragment_opcode;
  wire       [31:0]   system_bmbPeripheral_bmb_arbiter_io_inputs_1_rsp_payload_fragment_data;
  wire       [3:0]    system_bmbPeripheral_bmb_arbiter_io_inputs_1_rsp_payload_fragment_context;
  wire                system_bmbPeripheral_bmb_arbiter_io_output_cmd_valid;
  wire                system_bmbPeripheral_bmb_arbiter_io_output_cmd_payload_last;
  wire       [0:0]    system_bmbPeripheral_bmb_arbiter_io_output_cmd_payload_fragment_source;
  wire       [0:0]    system_bmbPeripheral_bmb_arbiter_io_output_cmd_payload_fragment_opcode;
  wire       [23:0]   system_bmbPeripheral_bmb_arbiter_io_output_cmd_payload_fragment_address;
  wire       [1:0]    system_bmbPeripheral_bmb_arbiter_io_output_cmd_payload_fragment_length;
  wire       [31:0]   system_bmbPeripheral_bmb_arbiter_io_output_cmd_payload_fragment_data;
  wire       [3:0]    system_bmbPeripheral_bmb_arbiter_io_output_cmd_payload_fragment_mask;
  wire       [6:0]    system_bmbPeripheral_bmb_arbiter_io_output_cmd_payload_fragment_context;
  wire                system_bmbPeripheral_bmb_arbiter_io_output_rsp_ready;
  wire                system_fabric_iBus_bmb_decoder_io_input_cmd_ready;
  wire                system_fabric_iBus_bmb_decoder_io_input_rsp_valid;
  wire                system_fabric_iBus_bmb_decoder_io_input_rsp_payload_last;
  wire       [0:0]    system_fabric_iBus_bmb_decoder_io_input_rsp_payload_fragment_source;
  wire       [0:0]    system_fabric_iBus_bmb_decoder_io_input_rsp_payload_fragment_opcode;
  wire       [63:0]   system_fabric_iBus_bmb_decoder_io_input_rsp_payload_fragment_data;
  wire                system_fabric_iBus_bmb_decoder_io_outputs_0_cmd_valid;
  wire                system_fabric_iBus_bmb_decoder_io_outputs_0_cmd_payload_last;
  wire       [0:0]    system_fabric_iBus_bmb_decoder_io_outputs_0_cmd_payload_fragment_source;
  wire       [0:0]    system_fabric_iBus_bmb_decoder_io_outputs_0_cmd_payload_fragment_opcode;
  wire       [31:0]   system_fabric_iBus_bmb_decoder_io_outputs_0_cmd_payload_fragment_address;
  wire       [5:0]    system_fabric_iBus_bmb_decoder_io_outputs_0_cmd_payload_fragment_length;
  wire                system_fabric_iBus_bmb_decoder_io_outputs_0_rsp_ready;
  wire                system_fabric_iBus_bmb_decoder_io_outputs_1_cmd_valid;
  wire                system_fabric_iBus_bmb_decoder_io_outputs_1_cmd_payload_last;
  wire       [0:0]    system_fabric_iBus_bmb_decoder_io_outputs_1_cmd_payload_fragment_source;
  wire       [0:0]    system_fabric_iBus_bmb_decoder_io_outputs_1_cmd_payload_fragment_opcode;
  wire       [31:0]   system_fabric_iBus_bmb_decoder_io_outputs_1_cmd_payload_fragment_address;
  wire       [5:0]    system_fabric_iBus_bmb_decoder_io_outputs_1_cmd_payload_fragment_length;
  wire                system_fabric_iBus_bmb_decoder_io_outputs_1_rsp_ready;
  wire                system_fabric_dBus_bmb_decoder_io_input_cmd_ready;
  wire                system_fabric_dBus_bmb_decoder_io_input_rsp_valid;
  wire                system_fabric_dBus_bmb_decoder_io_input_rsp_payload_last;
  wire       [3:0]    system_fabric_dBus_bmb_decoder_io_input_rsp_payload_fragment_source;
  wire       [0:0]    system_fabric_dBus_bmb_decoder_io_input_rsp_payload_fragment_opcode;
  wire       [63:0]   system_fabric_dBus_bmb_decoder_io_input_rsp_payload_fragment_data;
  wire       [42:0]   system_fabric_dBus_bmb_decoder_io_input_rsp_payload_fragment_context;
  wire                system_fabric_dBus_bmb_decoder_io_outputs_0_cmd_valid;
  wire                system_fabric_dBus_bmb_decoder_io_outputs_0_cmd_payload_last;
  wire       [3:0]    system_fabric_dBus_bmb_decoder_io_outputs_0_cmd_payload_fragment_source;
  wire       [0:0]    system_fabric_dBus_bmb_decoder_io_outputs_0_cmd_payload_fragment_opcode;
  wire       [31:0]   system_fabric_dBus_bmb_decoder_io_outputs_0_cmd_payload_fragment_address;
  wire       [5:0]    system_fabric_dBus_bmb_decoder_io_outputs_0_cmd_payload_fragment_length;
  wire       [63:0]   system_fabric_dBus_bmb_decoder_io_outputs_0_cmd_payload_fragment_data;
  wire       [7:0]    system_fabric_dBus_bmb_decoder_io_outputs_0_cmd_payload_fragment_mask;
  wire                system_fabric_dBus_bmb_decoder_io_outputs_0_rsp_ready;
  wire                system_fabric_dBus_bmb_decoder_io_outputs_1_cmd_valid;
  wire                system_fabric_dBus_bmb_decoder_io_outputs_1_cmd_payload_last;
  wire       [3:0]    system_fabric_dBus_bmb_decoder_io_outputs_1_cmd_payload_fragment_source;
  wire       [0:0]    system_fabric_dBus_bmb_decoder_io_outputs_1_cmd_payload_fragment_opcode;
  wire       [31:0]   system_fabric_dBus_bmb_decoder_io_outputs_1_cmd_payload_fragment_address;
  wire       [5:0]    system_fabric_dBus_bmb_decoder_io_outputs_1_cmd_payload_fragment_length;
  wire       [63:0]   system_fabric_dBus_bmb_decoder_io_outputs_1_cmd_payload_fragment_data;
  wire       [7:0]    system_fabric_dBus_bmb_decoder_io_outputs_1_cmd_payload_fragment_mask;
  wire                system_fabric_dBus_bmb_decoder_io_outputs_1_rsp_ready;
  wire                system_fabric_iBus_bmb_downSizer_io_input_cmd_ready;
  wire                system_fabric_iBus_bmb_downSizer_io_input_rsp_valid;
  wire                system_fabric_iBus_bmb_downSizer_io_input_rsp_payload_last;
  wire       [0:0]    system_fabric_iBus_bmb_downSizer_io_input_rsp_payload_fragment_source;
  wire       [0:0]    system_fabric_iBus_bmb_downSizer_io_input_rsp_payload_fragment_opcode;
  wire       [63:0]   system_fabric_iBus_bmb_downSizer_io_input_rsp_payload_fragment_data;
  wire                system_fabric_iBus_bmb_downSizer_io_output_cmd_valid;
  wire                system_fabric_iBus_bmb_downSizer_io_output_cmd_payload_last;
  wire       [0:0]    system_fabric_iBus_bmb_downSizer_io_output_cmd_payload_fragment_source;
  wire       [0:0]    system_fabric_iBus_bmb_downSizer_io_output_cmd_payload_fragment_opcode;
  wire       [31:0]   system_fabric_iBus_bmb_downSizer_io_output_cmd_payload_fragment_address;
  wire       [5:0]    system_fabric_iBus_bmb_downSizer_io_output_cmd_payload_fragment_length;
  wire       [0:0]    system_fabric_iBus_bmb_downSizer_io_output_cmd_payload_fragment_context;
  wire                system_fabric_iBus_bmb_downSizer_io_output_rsp_ready;
  wire                system_fabric_iBus_bmb_unburstify_io_input_cmd_ready;
  wire                system_fabric_iBus_bmb_unburstify_io_input_rsp_valid;
  wire                system_fabric_iBus_bmb_unburstify_io_input_rsp_payload_last;
  wire       [0:0]    system_fabric_iBus_bmb_unburstify_io_input_rsp_payload_fragment_source;
  wire       [0:0]    system_fabric_iBus_bmb_unburstify_io_input_rsp_payload_fragment_opcode;
  wire       [31:0]   system_fabric_iBus_bmb_unburstify_io_input_rsp_payload_fragment_data;
  wire       [0:0]    system_fabric_iBus_bmb_unburstify_io_input_rsp_payload_fragment_context;
  wire                system_fabric_iBus_bmb_unburstify_io_output_cmd_valid;
  wire                system_fabric_iBus_bmb_unburstify_io_output_cmd_payload_last;
  wire       [0:0]    system_fabric_iBus_bmb_unburstify_io_output_cmd_payload_fragment_opcode;
  wire       [31:0]   system_fabric_iBus_bmb_unburstify_io_output_cmd_payload_fragment_address;
  wire       [1:0]    system_fabric_iBus_bmb_unburstify_io_output_cmd_payload_fragment_length;
  wire       [3:0]    system_fabric_iBus_bmb_unburstify_io_output_cmd_payload_fragment_context;
  wire                system_fabric_iBus_bmb_unburstify_io_output_rsp_ready;
  wire                system_fabric_dBus_bmb_downSizer_io_input_cmd_ready;
  wire                system_fabric_dBus_bmb_downSizer_io_input_rsp_valid;
  wire                system_fabric_dBus_bmb_downSizer_io_input_rsp_payload_last;
  wire       [3:0]    system_fabric_dBus_bmb_downSizer_io_input_rsp_payload_fragment_source;
  wire       [0:0]    system_fabric_dBus_bmb_downSizer_io_input_rsp_payload_fragment_opcode;
  wire       [63:0]   system_fabric_dBus_bmb_downSizer_io_input_rsp_payload_fragment_data;
  wire                system_fabric_dBus_bmb_downSizer_io_output_cmd_valid;
  wire                system_fabric_dBus_bmb_downSizer_io_output_cmd_payload_last;
  wire       [3:0]    system_fabric_dBus_bmb_downSizer_io_output_cmd_payload_fragment_source;
  wire       [0:0]    system_fabric_dBus_bmb_downSizer_io_output_cmd_payload_fragment_opcode;
  wire       [31:0]   system_fabric_dBus_bmb_downSizer_io_output_cmd_payload_fragment_address;
  wire       [5:0]    system_fabric_dBus_bmb_downSizer_io_output_cmd_payload_fragment_length;
  wire       [31:0]   system_fabric_dBus_bmb_downSizer_io_output_cmd_payload_fragment_data;
  wire       [3:0]    system_fabric_dBus_bmb_downSizer_io_output_cmd_payload_fragment_mask;
  wire       [0:0]    system_fabric_dBus_bmb_downSizer_io_output_cmd_payload_fragment_context;
  wire                system_fabric_dBus_bmb_downSizer_io_output_rsp_ready;
  wire                system_fabric_dBus_bmb_unburstify_io_input_cmd_ready;
  wire                system_fabric_dBus_bmb_unburstify_io_input_rsp_valid;
  wire                system_fabric_dBus_bmb_unburstify_io_input_rsp_payload_last;
  wire       [3:0]    system_fabric_dBus_bmb_unburstify_io_input_rsp_payload_fragment_source;
  wire       [0:0]    system_fabric_dBus_bmb_unburstify_io_input_rsp_payload_fragment_opcode;
  wire       [31:0]   system_fabric_dBus_bmb_unburstify_io_input_rsp_payload_fragment_data;
  wire       [0:0]    system_fabric_dBus_bmb_unburstify_io_input_rsp_payload_fragment_context;
  wire                system_fabric_dBus_bmb_unburstify_io_output_cmd_valid;
  wire                system_fabric_dBus_bmb_unburstify_io_output_cmd_payload_last;
  wire       [0:0]    system_fabric_dBus_bmb_unburstify_io_output_cmd_payload_fragment_opcode;
  wire       [31:0]   system_fabric_dBus_bmb_unburstify_io_output_cmd_payload_fragment_address;
  wire       [1:0]    system_fabric_dBus_bmb_unburstify_io_output_cmd_payload_fragment_length;
  wire       [31:0]   system_fabric_dBus_bmb_unburstify_io_output_cmd_payload_fragment_data;
  wire       [3:0]    system_fabric_dBus_bmb_unburstify_io_output_cmd_payload_fragment_mask;
  wire       [6:0]    system_fabric_dBus_bmb_unburstify_io_output_cmd_payload_fragment_context;
  wire                system_fabric_dBus_bmb_unburstify_io_output_rsp_ready;
  wire                system_fabric_iBus_bmb_arbiter_io_inputs_0_cmd_ready;
  wire                system_fabric_iBus_bmb_arbiter_io_inputs_0_rsp_valid;
  wire                system_fabric_iBus_bmb_arbiter_io_inputs_0_rsp_payload_last;
  wire       [0:0]    system_fabric_iBus_bmb_arbiter_io_inputs_0_rsp_payload_fragment_opcode;
  wire       [63:0]   system_fabric_iBus_bmb_arbiter_io_inputs_0_rsp_payload_fragment_data;
  wire                system_fabric_iBus_bmb_arbiter_io_inputs_1_cmd_ready;
  wire                system_fabric_iBus_bmb_arbiter_io_inputs_1_rsp_valid;
  wire                system_fabric_iBus_bmb_arbiter_io_inputs_1_rsp_payload_last;
  wire       [0:0]    system_fabric_iBus_bmb_arbiter_io_inputs_1_rsp_payload_fragment_opcode;
  wire       [63:0]   system_fabric_iBus_bmb_arbiter_io_inputs_1_rsp_payload_fragment_data;
  wire                system_fabric_iBus_bmb_arbiter_io_output_cmd_valid;
  wire                system_fabric_iBus_bmb_arbiter_io_output_cmd_payload_last;
  wire       [0:0]    system_fabric_iBus_bmb_arbiter_io_output_cmd_payload_fragment_source;
  wire       [0:0]    system_fabric_iBus_bmb_arbiter_io_output_cmd_payload_fragment_opcode;
  wire       [31:0]   system_fabric_iBus_bmb_arbiter_io_output_cmd_payload_fragment_address;
  wire       [5:0]    system_fabric_iBus_bmb_arbiter_io_output_cmd_payload_fragment_length;
  wire                system_fabric_iBus_bmb_arbiter_io_output_rsp_ready;
  wire                system_fabric_dBus_bmb_arbiter_io_inputs_0_cmd_ready;
  wire                system_fabric_dBus_bmb_arbiter_io_inputs_0_rsp_valid;
  wire                system_fabric_dBus_bmb_arbiter_io_inputs_0_rsp_payload_last;
  wire       [0:0]    system_fabric_dBus_bmb_arbiter_io_inputs_0_rsp_payload_fragment_opcode;
  wire       [63:0]   system_fabric_dBus_bmb_arbiter_io_inputs_0_rsp_payload_fragment_data;
  wire                system_fabric_dBus_bmb_arbiter_io_inputs_1_cmd_ready;
  wire                system_fabric_dBus_bmb_arbiter_io_inputs_1_rsp_valid;
  wire                system_fabric_dBus_bmb_arbiter_io_inputs_1_rsp_payload_last;
  wire       [0:0]    system_fabric_dBus_bmb_arbiter_io_inputs_1_rsp_payload_fragment_source;
  wire       [0:0]    system_fabric_dBus_bmb_arbiter_io_inputs_1_rsp_payload_fragment_opcode;
  wire       [63:0]   system_fabric_dBus_bmb_arbiter_io_inputs_1_rsp_payload_fragment_data;
  wire       [13:0]   system_fabric_dBus_bmb_arbiter_io_inputs_1_rsp_payload_fragment_context;
  wire                system_fabric_dBus_bmb_arbiter_io_inputs_2_cmd_ready;
  wire                system_fabric_dBus_bmb_arbiter_io_inputs_2_rsp_valid;
  wire                system_fabric_dBus_bmb_arbiter_io_inputs_2_rsp_payload_last;
  wire       [1:0]    system_fabric_dBus_bmb_arbiter_io_inputs_2_rsp_payload_fragment_source;
  wire       [0:0]    system_fabric_dBus_bmb_arbiter_io_inputs_2_rsp_payload_fragment_opcode;
  wire       [63:0]   system_fabric_dBus_bmb_arbiter_io_inputs_2_rsp_payload_fragment_data;
  wire       [42:0]   system_fabric_dBus_bmb_arbiter_io_inputs_2_rsp_payload_fragment_context;
  wire                system_fabric_dBus_bmb_arbiter_io_output_cmd_valid;
  wire                system_fabric_dBus_bmb_arbiter_io_output_cmd_payload_last;
  wire       [3:0]    system_fabric_dBus_bmb_arbiter_io_output_cmd_payload_fragment_source;
  wire       [0:0]    system_fabric_dBus_bmb_arbiter_io_output_cmd_payload_fragment_opcode;
  wire       [31:0]   system_fabric_dBus_bmb_arbiter_io_output_cmd_payload_fragment_address;
  wire       [5:0]    system_fabric_dBus_bmb_arbiter_io_output_cmd_payload_fragment_length;
  wire       [63:0]   system_fabric_dBus_bmb_arbiter_io_output_cmd_payload_fragment_data;
  wire       [7:0]    system_fabric_dBus_bmb_arbiter_io_output_cmd_payload_fragment_mask;
  wire       [42:0]   system_fabric_dBus_bmb_arbiter_io_output_cmd_payload_fragment_context;
  wire                system_fabric_dBus_bmb_arbiter_io_output_rsp_ready;
  wire                system_dma_read_decoder_io_input_cmd_ready;
  wire                system_dma_read_decoder_io_input_rsp_valid;
  wire                system_dma_read_decoder_io_input_rsp_payload_last;
  wire       [0:0]    system_dma_read_decoder_io_input_rsp_payload_fragment_source;
  wire       [0:0]    system_dma_read_decoder_io_input_rsp_payload_fragment_opcode;
  wire       [63:0]   system_dma_read_decoder_io_input_rsp_payload_fragment_data;
  wire       [13:0]   system_dma_read_decoder_io_input_rsp_payload_fragment_context;
  wire                system_dma_read_decoder_io_outputs_0_cmd_valid;
  wire                system_dma_read_decoder_io_outputs_0_cmd_payload_last;
  wire       [0:0]    system_dma_read_decoder_io_outputs_0_cmd_payload_fragment_source;
  wire       [0:0]    system_dma_read_decoder_io_outputs_0_cmd_payload_fragment_opcode;
  wire       [31:0]   system_dma_read_decoder_io_outputs_0_cmd_payload_fragment_address;
  wire       [5:0]    system_dma_read_decoder_io_outputs_0_cmd_payload_fragment_length;
  wire       [13:0]   system_dma_read_decoder_io_outputs_0_cmd_payload_fragment_context;
  wire                system_dma_read_decoder_io_outputs_0_rsp_ready;
  wire                system_dma_readSg_decoder_io_input_cmd_ready;
  wire                system_dma_readSg_decoder_io_input_rsp_valid;
  wire                system_dma_readSg_decoder_io_input_rsp_payload_last;
  wire       [0:0]    system_dma_readSg_decoder_io_input_rsp_payload_fragment_opcode;
  wire       [63:0]   system_dma_readSg_decoder_io_input_rsp_payload_fragment_data;
  wire                system_dma_readSg_decoder_io_outputs_0_cmd_valid;
  wire                system_dma_readSg_decoder_io_outputs_0_cmd_payload_last;
  wire       [0:0]    system_dma_readSg_decoder_io_outputs_0_cmd_payload_fragment_opcode;
  wire       [31:0]   system_dma_readSg_decoder_io_outputs_0_cmd_payload_fragment_address;
  wire       [4:0]    system_dma_readSg_decoder_io_outputs_0_cmd_payload_fragment_length;
  wire                system_dma_readSg_decoder_io_outputs_0_rsp_ready;
  wire                _zz_448;
  wire                _zz_449;
  wire                _zz_450;
  wire                _zz_451;
  wire                _zz_452;
  wire                _zz_453;
  wire                _zz_454;
  wire                _zz_455;
  wire                _zz_456;
  wire                _zz_457;
  wire                _zz_458;
  wire                _zz_459;
  wire                _zz_460;
  wire                _zz_461;
  wire                _zz_462;
  wire                _zz_463;
  wire                _zz_464;
  wire                _zz_465;
  wire                _zz_466;
  wire                _zz_467;
  wire                _zz_468;
  wire                _zz_469;
  wire                _zz_470;
  wire                _zz_471;
  wire                _zz_472;
  wire                _zz_473;
  wire                _zz_474;
  wire                _zz_475;
  wire                _zz_476;
  wire                _zz_477;
  wire                _zz_478;
  wire       [5:0]    _zz_479;
  wire       [5:0]    _zz_480;
  wire       [31:0]   _zz_481;
  wire       [5:0]    _zz_482;
  wire       [5:0]    _zz_483;
  wire       [31:0]   _zz_484;
  wire       [0:0]    _zz_485;
  wire       [0:0]    _zz_486;
  wire       [0:0]    _zz_487;
  wire       [0:0]    _zz_488;
  wire       [0:0]    _zz_489;
  wire       [0:0]    _zz_490;
  wire       [0:0]    _zz_491;
  wire       [0:0]    _zz_492;
  wire       [0:0]    _zz_493;
  wire       [0:0]    _zz_494;
  wire       [0:0]    _zz_495;
  wire       [0:0]    _zz_496;
  wire       [0:0]    _zz_497;
  wire       [0:0]    _zz_498;
  wire       [0:0]    _zz_499;
  wire       [0:0]    _zz_500;
  wire       [0:0]    _zz_501;
  wire       [0:0]    _zz_502;
  wire       [0:0]    _zz_503;
  wire       [0:0]    _zz_504;
  wire       [0:0]    _zz_505;
  wire       [0:0]    _zz_506;
  wire       [0:0]    _zz_507;
  wire       [0:0]    _zz_508;
  wire       [0:0]    _zz_509;
  wire       [0:0]    _zz_510;
  wire       [0:0]    _zz_511;
  wire       [0:0]    _zz_512;
  wire       [0:0]    _zz_513;
  wire       [0:0]    _zz_514;
  wire       [0:0]    _zz_515;
  wire       [0:0]    _zz_516;
  wire       [15:0]   _zz_517;
  wire       [0:0]    _zz_518;
  wire       [0:0]    _zz_519;
  wire       [0:0]    _zz_520;
  wire       [0:0]    _zz_521;
  wire       [0:0]    _zz_522;
  wire       [0:0]    _zz_523;
  wire       [0:0]    _zz_524;
  wire       [0:0]    _zz_525;
  wire       [0:0]    _zz_526;
  wire       [0:0]    _zz_527;
  wire       [0:0]    _zz_528;
  wire       [0:0]    _zz_529;
  wire       [0:0]    _zz_530;
  wire       [0:0]    _zz_531;
  wire       [0:0]    _zz_532;
  wire       [0:0]    _zz_533;
  wire       [15:0]   _zz_534;
  wire       [0:0]    _zz_535;
  wire       [0:0]    _zz_536;
  wire       [0:0]    _zz_537;
  wire       [0:0]    _zz_538;
  wire       [0:0]    _zz_539;
  wire       [0:0]    _zz_540;
  wire       [0:0]    _zz_541;
  wire       [0:0]    _zz_542;
  wire       [0:0]    _zz_543;
  wire       [0:0]    _zz_544;
  wire       [0:0]    _zz_545;
  wire       [0:0]    _zz_546;
  wire       [0:0]    _zz_547;
  wire       [0:0]    _zz_548;
  wire       [0:0]    _zz_549;
  wire       [0:0]    _zz_550;
  reg                 _zz_1;
  reg                 _zz_2;
  reg                 _zz_3;
  reg                 _zz_4;
  reg                 _zz_5;
  reg                 _zz_6;
  reg                 _zz_7;
  reg                 _zz_8;
  reg                 _zz_9;
  reg                 _zz_10;
  reg                 _zz_11;
  reg                 _zz_12;
  reg                 _zz_13;
  reg                 _zz_14;
  reg                 _zz_15;
  reg                 _zz_16;
  reg                 _zz_17;
  reg                 _zz_18;
  reg                 _zz_19;
  reg                 _zz_20;
  reg                 _zz_21;
  reg                 _zz_22;
  reg                 _zz_23;
  reg                 _zz_24;
  reg                 _zz_25;
  reg                 _zz_26;
  reg                 _zz_27;
  reg                 _zz_28;
  reg                 _zz_29;
  reg                 _zz_30;
  reg                 _zz_31;
  reg                 _zz_32;
  reg                 _zz_33;
  reg                 _zz_34;
  reg                 _zz_35;
  reg                 _zz_36;
  reg                 _zz_37;
  reg                 _zz_38;
  reg                 _zz_39;
  wire                debugCd_logic_inputResetTrigger;
  reg                 debugCd_logic_outputResetUnbuffered;
  reg        [11:0]   debugCd_logic_holdingLogic_resetCounter = 12'h0;
  reg                 debugCd_logic_outputReset = 1'b1;
  reg                 vgaCd_logic_inputResetTrigger;
  reg                 vgaCd_logic_outputResetUnbuffered;
  reg        [5:0]    vgaCd_logic_holdingLogic_resetCounter;
  reg                 vgaCd_logic_outputReset;
  reg                 sdramCd_logic_inputResetTrigger;
  reg                 sdramCd_logic_outputResetUnbuffered;
  reg        [5:0]    sdramCd_logic_holdingLogic_resetCounter;
  reg                 sdramCd_logic_outputReset;
  reg                 systemCd_logic_inputResetTrigger;
  reg                 systemCd_logic_outputResetUnbuffered;
  reg        [5:0]    systemCd_logic_holdingLogic_resetCounter;
  reg                 systemCd_logic_outputReset;
  wire                debug_bmb_connector_decoder_cmd_valid;
  wire                debug_bmb_connector_decoder_cmd_ready;
  wire                debug_bmb_connector_decoder_cmd_payload_last;
  wire       [0:0]    debug_bmb_connector_decoder_cmd_payload_fragment_opcode;
  wire       [31:0]   debug_bmb_connector_decoder_cmd_payload_fragment_address;
  wire       [1:0]    debug_bmb_connector_decoder_cmd_payload_fragment_length;
  wire       [31:0]   debug_bmb_connector_decoder_cmd_payload_fragment_data;
  wire       [3:0]    debug_bmb_connector_decoder_cmd_payload_fragment_mask;
  wire                debug_bmb_connector_decoder_rsp_valid;
  wire                debug_bmb_connector_decoder_rsp_ready;
  wire                debug_bmb_connector_decoder_rsp_payload_last;
  wire       [0:0]    debug_bmb_connector_decoder_rsp_payload_fragment_opcode;
  wire       [31:0]   debug_bmb_connector_decoder_rsp_payload_fragment_data;
  wire                system_cores_0_debugBmb_cmd_valid;
  wire                system_cores_0_debugBmb_cmd_ready;
  wire                system_cores_0_debugBmb_cmd_payload_last;
  wire       [0:0]    system_cores_0_debugBmb_cmd_payload_fragment_opcode;
  wire       [7:0]    system_cores_0_debugBmb_cmd_payload_fragment_address;
  wire       [1:0]    system_cores_0_debugBmb_cmd_payload_fragment_length;
  wire       [31:0]   system_cores_0_debugBmb_cmd_payload_fragment_data;
  wire       [3:0]    system_cores_0_debugBmb_cmd_payload_fragment_mask;
  wire                system_cores_0_debugBmb_rsp_valid;
  wire                system_cores_0_debugBmb_rsp_ready;
  wire                system_cores_0_debugBmb_rsp_payload_last;
  wire       [0:0]    system_cores_0_debugBmb_rsp_payload_fragment_opcode;
  wire       [31:0]   system_cores_0_debugBmb_rsp_payload_fragment_data;
  wire                system_cores_1_debugBmb_cmd_valid;
  wire                system_cores_1_debugBmb_cmd_ready;
  wire                system_cores_1_debugBmb_cmd_payload_last;
  wire       [0:0]    system_cores_1_debugBmb_cmd_payload_fragment_opcode;
  wire       [7:0]    system_cores_1_debugBmb_cmd_payload_fragment_address;
  wire       [1:0]    system_cores_1_debugBmb_cmd_payload_fragment_length;
  wire       [31:0]   system_cores_1_debugBmb_cmd_payload_fragment_data;
  wire       [3:0]    system_cores_1_debugBmb_cmd_payload_fragment_mask;
  wire                system_cores_1_debugBmb_rsp_valid;
  wire                system_cores_1_debugBmb_rsp_ready;
  wire                system_cores_1_debugBmb_rsp_payload_last;
  wire       [0:0]    system_cores_1_debugBmb_rsp_payload_fragment_opcode;
  wire       [31:0]   system_cores_1_debugBmb_rsp_payload_fragment_data;
  wire                system_cores_0_iBus_cmd_valid;
  wire                system_cores_0_iBus_cmd_ready;
  wire                system_cores_0_iBus_cmd_payload_last;
  wire       [0:0]    system_cores_0_iBus_cmd_payload_fragment_opcode;
  wire       [31:0]   system_cores_0_iBus_cmd_payload_fragment_address;
  wire       [5:0]    system_cores_0_iBus_cmd_payload_fragment_length;
  wire                system_cores_0_iBus_rsp_valid;
  wire                system_cores_0_iBus_rsp_ready;
  wire                system_cores_0_iBus_rsp_payload_last;
  wire       [0:0]    system_cores_0_iBus_rsp_payload_fragment_opcode;
  wire       [63:0]   system_cores_0_iBus_rsp_payload_fragment_data;
  wire                dBus_Bridge_bus_cmd_valid;
  wire                dBus_Bridge_bus_cmd_ready;
  wire                dBus_Bridge_bus_cmd_payload_last;
  wire       [0:0]    dBus_Bridge_bus_cmd_payload_fragment_opcode;
  wire                dBus_Bridge_bus_cmd_payload_fragment_exclusive;
  wire       [31:0]   dBus_Bridge_bus_cmd_payload_fragment_address;
  wire       [5:0]    dBus_Bridge_bus_cmd_payload_fragment_length;
  wire       [63:0]   dBus_Bridge_bus_cmd_payload_fragment_data;
  wire       [7:0]    dBus_Bridge_bus_cmd_payload_fragment_mask;
  wire       [2:0]    dBus_Bridge_bus_cmd_payload_fragment_context;
  wire                dBus_Bridge_bus_rsp_valid;
  wire                dBus_Bridge_bus_rsp_ready;
  wire                dBus_Bridge_bus_rsp_payload_last;
  wire       [0:0]    dBus_Bridge_bus_rsp_payload_fragment_opcode;
  wire                dBus_Bridge_bus_rsp_payload_fragment_exclusive;
  wire       [63:0]   dBus_Bridge_bus_rsp_payload_fragment_data;
  wire       [2:0]    dBus_Bridge_bus_rsp_payload_fragment_context;
  wire                dBus_Bridge_bus_inv_valid;
  wire                dBus_Bridge_bus_inv_ready;
  wire                dBus_Bridge_bus_inv_payload_all;
  wire       [31:0]   dBus_Bridge_bus_inv_payload_address;
  wire       [5:0]    dBus_Bridge_bus_inv_payload_length;
  wire                dBus_Bridge_bus_ack_valid;
  wire                dBus_Bridge_bus_ack_ready;
  wire                dBus_Bridge_bus_sync_valid;
  wire                dBus_Bridge_bus_sync_ready;
  wire                _zz_40;
  wire                dBus_Bridge_withWriteBuffer_buffer_stream_valid;
  wire                dBus_Bridge_withWriteBuffer_buffer_stream_ready;
  reg                 _zz_41;
  reg        [31:0]   dBus_Bridge_withWriteBuffer_buffer_address;
  reg        [5:0]    dBus_Bridge_withWriteBuffer_buffer_length;
  reg                 dBus_Bridge_withWriteBuffer_buffer_write;
  reg                 dBus_Bridge_withWriteBuffer_buffer_exclusive;
  reg        [63:0]   dBus_Bridge_withWriteBuffer_buffer_data;
  reg        [7:0]    dBus_Bridge_withWriteBuffer_buffer_mask;
  reg                 dBus_Bridge_withWriteBuffer_aggregationEnabled;
  reg        [2:0]    dBus_Bridge_withWriteBuffer_aggregationCounter;
  wire                dBus_Bridge_withWriteBuffer_aggregationCounterFull;
  reg        [4:0]    dBus_Bridge_withWriteBuffer_timer;
  wire                dBus_Bridge_withWriteBuffer_timerFull;
  wire                dBus_Bridge_withWriteBuffer_hit;
  wire                dBus_Bridge_withWriteBuffer_canAggregate;
  wire                dBus_Bridge_withWriteBuffer_doFlush;
  wire       [2:0]    dBus_Bridge_withWriteBuffer_busCmdContext_rspCount;
  reg                 dBus_Bridge_withWriteBuffer_halt;
  wire       [0:0]    dBus_Bridge_withWriteBuffer_aggregationSel;
  wire       [7:0]    _zz_42;
  wire       [7:0]    _zz_43;
  wire       [7:0]    _zz_44;
  wire       [7:0]    _zz_45;
  wire       [2:0]    dBus_Bridge_withWriteBuffer_rspCtx_rspCount;
  wire                dBus_Bridge_withWriteBuffer_syncLogic_cmdCtx_valid;
  wire                dBus_Bridge_withWriteBuffer_syncLogic_cmdCtx_ready;
  wire       [2:0]    dBus_Bridge_withWriteBuffer_syncLogic_cmdCtx_payload;
  reg                 system_cores_0_logic_cpu_dBus_ack_thrown_valid;
  wire                system_cores_0_logic_cpu_dBus_ack_thrown_ready;
  wire                system_cores_0_logic_cpu_dBus_ack_thrown_payload_last;
  wire                system_cores_0_logic_cpu_dBus_ack_thrown_payload_fragment_hit;
  reg                 system_cores_0_debugReset;
  reg                 _zz_46;
  wire                system_cores_1_iBus_cmd_valid;
  wire                system_cores_1_iBus_cmd_ready;
  wire                system_cores_1_iBus_cmd_payload_last;
  wire       [0:0]    system_cores_1_iBus_cmd_payload_fragment_opcode;
  wire       [31:0]   system_cores_1_iBus_cmd_payload_fragment_address;
  wire       [5:0]    system_cores_1_iBus_cmd_payload_fragment_length;
  wire                system_cores_1_iBus_rsp_valid;
  wire                system_cores_1_iBus_rsp_ready;
  wire                system_cores_1_iBus_rsp_payload_last;
  wire       [0:0]    system_cores_1_iBus_rsp_payload_fragment_opcode;
  wire       [63:0]   system_cores_1_iBus_rsp_payload_fragment_data;
  wire                dBus_Bridge_bus_cmd_valid_1;
  wire                dBus_Bridge_bus_cmd_ready_1;
  wire                dBus_Bridge_bus_cmd_payload_last_1;
  wire       [0:0]    dBus_Bridge_bus_cmd_payload_fragment_opcode_1;
  wire                dBus_Bridge_bus_cmd_payload_fragment_exclusive_1;
  wire       [31:0]   dBus_Bridge_bus_cmd_payload_fragment_address_1;
  wire       [5:0]    dBus_Bridge_bus_cmd_payload_fragment_length_1;
  wire       [63:0]   dBus_Bridge_bus_cmd_payload_fragment_data_1;
  wire       [7:0]    dBus_Bridge_bus_cmd_payload_fragment_mask_1;
  wire       [2:0]    dBus_Bridge_bus_cmd_payload_fragment_context_1;
  wire                dBus_Bridge_bus_rsp_valid_1;
  wire                dBus_Bridge_bus_rsp_ready_1;
  wire                dBus_Bridge_bus_rsp_payload_last_1;
  wire       [0:0]    dBus_Bridge_bus_rsp_payload_fragment_opcode_1;
  wire                dBus_Bridge_bus_rsp_payload_fragment_exclusive_1;
  wire       [63:0]   dBus_Bridge_bus_rsp_payload_fragment_data_1;
  wire       [2:0]    dBus_Bridge_bus_rsp_payload_fragment_context_1;
  wire                dBus_Bridge_bus_inv_valid_1;
  wire                dBus_Bridge_bus_inv_ready_1;
  wire                dBus_Bridge_bus_inv_payload_all_1;
  wire       [31:0]   dBus_Bridge_bus_inv_payload_address_1;
  wire       [5:0]    dBus_Bridge_bus_inv_payload_length_1;
  wire                dBus_Bridge_bus_ack_valid_1;
  wire                dBus_Bridge_bus_ack_ready_1;
  wire                dBus_Bridge_bus_sync_valid_1;
  wire                dBus_Bridge_bus_sync_ready_1;
  wire                _zz_47;
  wire                dBus_Bridge_withWriteBuffer_buffer_stream_valid_1;
  wire                dBus_Bridge_withWriteBuffer_buffer_stream_ready_1;
  reg                 _zz_48;
  reg        [31:0]   dBus_Bridge_withWriteBuffer_buffer_address_1;
  reg        [5:0]    dBus_Bridge_withWriteBuffer_buffer_length_1;
  reg                 dBus_Bridge_withWriteBuffer_buffer_write_1;
  reg                 dBus_Bridge_withWriteBuffer_buffer_exclusive_1;
  reg        [63:0]   dBus_Bridge_withWriteBuffer_buffer_data_1;
  reg        [7:0]    dBus_Bridge_withWriteBuffer_buffer_mask_1;
  reg                 dBus_Bridge_withWriteBuffer_aggregationEnabled_1;
  reg        [2:0]    dBus_Bridge_withWriteBuffer_aggregationCounter_1;
  wire                dBus_Bridge_withWriteBuffer_aggregationCounterFull_1;
  reg        [4:0]    dBus_Bridge_withWriteBuffer_timer_1;
  wire                dBus_Bridge_withWriteBuffer_timerFull_1;
  wire                dBus_Bridge_withWriteBuffer_hit_1;
  wire                dBus_Bridge_withWriteBuffer_canAggregate_1;
  wire                dBus_Bridge_withWriteBuffer_doFlush_1;
  wire       [2:0]    dBus_Bridge_withWriteBuffer_busCmdContext_rspCount_1;
  reg                 dBus_Bridge_withWriteBuffer_halt_1;
  wire       [0:0]    dBus_Bridge_withWriteBuffer_aggregationSel_1;
  wire       [7:0]    _zz_49;
  wire       [7:0]    _zz_50;
  wire       [7:0]    _zz_51;
  wire       [7:0]    _zz_52;
  wire       [2:0]    dBus_Bridge_withWriteBuffer_rspCtx_rspCount_1;
  wire                dBus_Bridge_withWriteBuffer_syncLogic_cmdCtx_valid_1;
  wire                dBus_Bridge_withWriteBuffer_syncLogic_cmdCtx_ready_1;
  wire       [2:0]    dBus_Bridge_withWriteBuffer_syncLogic_cmdCtx_payload_1;
  reg                 system_cores_1_logic_cpu_dBus_ack_thrown_valid;
  wire                system_cores_1_logic_cpu_dBus_ack_thrown_ready;
  wire                system_cores_1_logic_cpu_dBus_ack_thrown_payload_last;
  wire                system_cores_1_logic_cpu_dBus_ack_thrown_payload_fragment_hit;
  reg                 system_cores_1_debugReset;
  reg                 _zz_53;
  wire                system_cores_0_iBus_connector_decoder_cmd_valid;
  wire                system_cores_0_iBus_connector_decoder_cmd_ready;
  wire                system_cores_0_iBus_connector_decoder_cmd_payload_last;
  wire       [0:0]    system_cores_0_iBus_connector_decoder_cmd_payload_fragment_opcode;
  wire       [31:0]   system_cores_0_iBus_connector_decoder_cmd_payload_fragment_address;
  wire       [5:0]    system_cores_0_iBus_connector_decoder_cmd_payload_fragment_length;
  wire                system_cores_0_iBus_connector_decoder_rsp_valid;
  wire                system_cores_0_iBus_connector_decoder_rsp_ready;
  wire                system_cores_0_iBus_connector_decoder_rsp_payload_last;
  wire       [0:0]    system_cores_0_iBus_connector_decoder_rsp_payload_fragment_opcode;
  wire       [63:0]   system_cores_0_iBus_connector_decoder_rsp_payload_fragment_data;
  wire                system_cores_0_dBus_connector_decoder_cmd_valid;
  wire                system_cores_0_dBus_connector_decoder_cmd_ready;
  wire                system_cores_0_dBus_connector_decoder_cmd_payload_last;
  wire       [0:0]    system_cores_0_dBus_connector_decoder_cmd_payload_fragment_opcode;
  wire                system_cores_0_dBus_connector_decoder_cmd_payload_fragment_exclusive;
  wire       [31:0]   system_cores_0_dBus_connector_decoder_cmd_payload_fragment_address;
  wire       [5:0]    system_cores_0_dBus_connector_decoder_cmd_payload_fragment_length;
  wire       [63:0]   system_cores_0_dBus_connector_decoder_cmd_payload_fragment_data;
  wire       [7:0]    system_cores_0_dBus_connector_decoder_cmd_payload_fragment_mask;
  wire       [2:0]    system_cores_0_dBus_connector_decoder_cmd_payload_fragment_context;
  wire                system_cores_0_dBus_connector_decoder_rsp_valid;
  wire                system_cores_0_dBus_connector_decoder_rsp_ready;
  wire                system_cores_0_dBus_connector_decoder_rsp_payload_last;
  wire       [0:0]    system_cores_0_dBus_connector_decoder_rsp_payload_fragment_opcode;
  wire                system_cores_0_dBus_connector_decoder_rsp_payload_fragment_exclusive;
  wire       [63:0]   system_cores_0_dBus_connector_decoder_rsp_payload_fragment_data;
  wire       [2:0]    system_cores_0_dBus_connector_decoder_rsp_payload_fragment_context;
  wire                system_cores_0_dBus_connector_decoder_inv_valid;
  wire                system_cores_0_dBus_connector_decoder_inv_ready;
  wire                system_cores_0_dBus_connector_decoder_inv_payload_all;
  wire       [31:0]   system_cores_0_dBus_connector_decoder_inv_payload_address;
  wire       [5:0]    system_cores_0_dBus_connector_decoder_inv_payload_length;
  wire                system_cores_0_dBus_connector_decoder_ack_valid;
  wire                system_cores_0_dBus_connector_decoder_ack_ready;
  wire                system_cores_0_dBus_connector_decoder_sync_valid;
  wire                system_cores_0_dBus_connector_decoder_sync_ready;
  wire                _zz_54;
  wire                _zz_55;
  wire                dBus_Bridge_bus_cmd_m2sPipe_valid;
  wire                dBus_Bridge_bus_cmd_m2sPipe_ready;
  wire                dBus_Bridge_bus_cmd_m2sPipe_payload_last;
  wire       [0:0]    dBus_Bridge_bus_cmd_m2sPipe_payload_fragment_opcode;
  wire                dBus_Bridge_bus_cmd_m2sPipe_payload_fragment_exclusive;
  wire       [31:0]   dBus_Bridge_bus_cmd_m2sPipe_payload_fragment_address;
  wire       [5:0]    dBus_Bridge_bus_cmd_m2sPipe_payload_fragment_length;
  wire       [63:0]   dBus_Bridge_bus_cmd_m2sPipe_payload_fragment_data;
  wire       [7:0]    dBus_Bridge_bus_cmd_m2sPipe_payload_fragment_mask;
  wire       [2:0]    dBus_Bridge_bus_cmd_m2sPipe_payload_fragment_context;
  reg                 dBus_Bridge_bus_cmd_m2sPipe_rValid;
  reg                 dBus_Bridge_bus_cmd_m2sPipe_rData_last;
  reg        [0:0]    dBus_Bridge_bus_cmd_m2sPipe_rData_fragment_opcode;
  reg                 dBus_Bridge_bus_cmd_m2sPipe_rData_fragment_exclusive;
  reg        [31:0]   dBus_Bridge_bus_cmd_m2sPipe_rData_fragment_address;
  reg        [5:0]    dBus_Bridge_bus_cmd_m2sPipe_rData_fragment_length;
  reg        [63:0]   dBus_Bridge_bus_cmd_m2sPipe_rData_fragment_data;
  reg        [7:0]    dBus_Bridge_bus_cmd_m2sPipe_rData_fragment_mask;
  reg        [2:0]    dBus_Bridge_bus_cmd_m2sPipe_rData_fragment_context;
  wire                _zz_56;
  reg                 _zz_57;
  reg                 _zz_58;
  reg        [31:0]   _zz_59;
  reg        [5:0]    _zz_60;
  wire                dBus_Bridge_bus_ack_m2sPipe_valid;
  wire                dBus_Bridge_bus_ack_m2sPipe_ready;
  reg                 dBus_Bridge_bus_ack_m2sPipe_rValid;
  wire                _zz_61;
  reg                 _zz_62;
  wire                system_cores_1_iBus_connector_decoder_cmd_valid;
  wire                system_cores_1_iBus_connector_decoder_cmd_ready;
  wire                system_cores_1_iBus_connector_decoder_cmd_payload_last;
  wire       [0:0]    system_cores_1_iBus_connector_decoder_cmd_payload_fragment_opcode;
  wire       [31:0]   system_cores_1_iBus_connector_decoder_cmd_payload_fragment_address;
  wire       [5:0]    system_cores_1_iBus_connector_decoder_cmd_payload_fragment_length;
  wire                system_cores_1_iBus_connector_decoder_rsp_valid;
  wire                system_cores_1_iBus_connector_decoder_rsp_ready;
  wire                system_cores_1_iBus_connector_decoder_rsp_payload_last;
  wire       [0:0]    system_cores_1_iBus_connector_decoder_rsp_payload_fragment_opcode;
  wire       [63:0]   system_cores_1_iBus_connector_decoder_rsp_payload_fragment_data;
  wire                system_cores_1_dBus_connector_decoder_cmd_valid;
  wire                system_cores_1_dBus_connector_decoder_cmd_ready;
  wire                system_cores_1_dBus_connector_decoder_cmd_payload_last;
  wire       [0:0]    system_cores_1_dBus_connector_decoder_cmd_payload_fragment_opcode;
  wire                system_cores_1_dBus_connector_decoder_cmd_payload_fragment_exclusive;
  wire       [31:0]   system_cores_1_dBus_connector_decoder_cmd_payload_fragment_address;
  wire       [5:0]    system_cores_1_dBus_connector_decoder_cmd_payload_fragment_length;
  wire       [63:0]   system_cores_1_dBus_connector_decoder_cmd_payload_fragment_data;
  wire       [7:0]    system_cores_1_dBus_connector_decoder_cmd_payload_fragment_mask;
  wire       [2:0]    system_cores_1_dBus_connector_decoder_cmd_payload_fragment_context;
  wire                system_cores_1_dBus_connector_decoder_rsp_valid;
  wire                system_cores_1_dBus_connector_decoder_rsp_ready;
  wire                system_cores_1_dBus_connector_decoder_rsp_payload_last;
  wire       [0:0]    system_cores_1_dBus_connector_decoder_rsp_payload_fragment_opcode;
  wire                system_cores_1_dBus_connector_decoder_rsp_payload_fragment_exclusive;
  wire       [63:0]   system_cores_1_dBus_connector_decoder_rsp_payload_fragment_data;
  wire       [2:0]    system_cores_1_dBus_connector_decoder_rsp_payload_fragment_context;
  wire                system_cores_1_dBus_connector_decoder_inv_valid;
  wire                system_cores_1_dBus_connector_decoder_inv_ready;
  wire                system_cores_1_dBus_connector_decoder_inv_payload_all;
  wire       [31:0]   system_cores_1_dBus_connector_decoder_inv_payload_address;
  wire       [5:0]    system_cores_1_dBus_connector_decoder_inv_payload_length;
  wire                system_cores_1_dBus_connector_decoder_ack_valid;
  wire                system_cores_1_dBus_connector_decoder_ack_ready;
  wire                system_cores_1_dBus_connector_decoder_sync_valid;
  wire                system_cores_1_dBus_connector_decoder_sync_ready;
  wire                _zz_63;
  wire                _zz_64;
  wire                dBus_Bridge_bus_cmd_m2sPipe_valid_1;
  wire                dBus_Bridge_bus_cmd_m2sPipe_ready_1;
  wire                dBus_Bridge_bus_cmd_m2sPipe_payload_last_1;
  wire       [0:0]    dBus_Bridge_bus_cmd_m2sPipe_payload_fragment_opcode_1;
  wire                dBus_Bridge_bus_cmd_m2sPipe_payload_fragment_exclusive_1;
  wire       [31:0]   dBus_Bridge_bus_cmd_m2sPipe_payload_fragment_address_1;
  wire       [5:0]    dBus_Bridge_bus_cmd_m2sPipe_payload_fragment_length_1;
  wire       [63:0]   dBus_Bridge_bus_cmd_m2sPipe_payload_fragment_data_1;
  wire       [7:0]    dBus_Bridge_bus_cmd_m2sPipe_payload_fragment_mask_1;
  wire       [2:0]    dBus_Bridge_bus_cmd_m2sPipe_payload_fragment_context_1;
  reg                 dBus_Bridge_bus_cmd_m2sPipe_rValid_1;
  reg                 dBus_Bridge_bus_cmd_m2sPipe_rData_last_1;
  reg        [0:0]    dBus_Bridge_bus_cmd_m2sPipe_rData_fragment_opcode_1;
  reg                 dBus_Bridge_bus_cmd_m2sPipe_rData_fragment_exclusive_1;
  reg        [31:0]   dBus_Bridge_bus_cmd_m2sPipe_rData_fragment_address_1;
  reg        [5:0]    dBus_Bridge_bus_cmd_m2sPipe_rData_fragment_length_1;
  reg        [63:0]   dBus_Bridge_bus_cmd_m2sPipe_rData_fragment_data_1;
  reg        [7:0]    dBus_Bridge_bus_cmd_m2sPipe_rData_fragment_mask_1;
  reg        [2:0]    dBus_Bridge_bus_cmd_m2sPipe_rData_fragment_context_1;
  wire                _zz_65;
  reg                 _zz_66;
  reg                 _zz_67;
  reg        [31:0]   _zz_68;
  reg        [5:0]    _zz_69;
  wire                dBus_Bridge_bus_ack_m2sPipe_valid_1;
  wire                dBus_Bridge_bus_ack_m2sPipe_ready_1;
  reg                 dBus_Bridge_bus_ack_m2sPipe_rValid_1;
  wire                _zz_70;
  reg                 _zz_71;
  wire                resetGenerator_stuff_syncTrigger;
  wire                resetGenerator_stuff_syncTrigger_1;
  wire                system_fabric_exclusiveMonitor_output_connector_decoder_cmd_valid;
  wire                system_fabric_exclusiveMonitor_output_connector_decoder_cmd_ready;
  wire                system_fabric_exclusiveMonitor_output_connector_decoder_cmd_payload_last;
  wire       [1:0]    system_fabric_exclusiveMonitor_output_connector_decoder_cmd_payload_fragment_source;
  wire       [0:0]    system_fabric_exclusiveMonitor_output_connector_decoder_cmd_payload_fragment_opcode;
  wire       [31:0]   system_fabric_exclusiveMonitor_output_connector_decoder_cmd_payload_fragment_address;
  wire       [5:0]    system_fabric_exclusiveMonitor_output_connector_decoder_cmd_payload_fragment_length;
  wire       [63:0]   system_fabric_exclusiveMonitor_output_connector_decoder_cmd_payload_fragment_data;
  wire       [7:0]    system_fabric_exclusiveMonitor_output_connector_decoder_cmd_payload_fragment_mask;
  wire       [3:0]    system_fabric_exclusiveMonitor_output_connector_decoder_cmd_payload_fragment_context;
  wire                system_fabric_exclusiveMonitor_output_connector_decoder_rsp_valid;
  wire                system_fabric_exclusiveMonitor_output_connector_decoder_rsp_ready;
  wire                system_fabric_exclusiveMonitor_output_connector_decoder_rsp_payload_last;
  wire       [1:0]    system_fabric_exclusiveMonitor_output_connector_decoder_rsp_payload_fragment_source;
  wire       [0:0]    system_fabric_exclusiveMonitor_output_connector_decoder_rsp_payload_fragment_opcode;
  wire       [63:0]   system_fabric_exclusiveMonitor_output_connector_decoder_rsp_payload_fragment_data;
  wire       [3:0]    system_fabric_exclusiveMonitor_output_connector_decoder_rsp_payload_fragment_context;
  wire                system_fabric_exclusiveMonitor_output_connector_decoder_inv_valid;
  wire                system_fabric_exclusiveMonitor_output_connector_decoder_inv_ready;
  wire                system_fabric_exclusiveMonitor_output_connector_decoder_inv_payload_all;
  wire       [31:0]   system_fabric_exclusiveMonitor_output_connector_decoder_inv_payload_address;
  wire       [5:0]    system_fabric_exclusiveMonitor_output_connector_decoder_inv_payload_length;
  wire       [1:0]    system_fabric_exclusiveMonitor_output_connector_decoder_inv_payload_source;
  wire                system_fabric_exclusiveMonitor_output_connector_decoder_ack_valid;
  wire                system_fabric_exclusiveMonitor_output_connector_decoder_ack_ready;
  wire                system_fabric_exclusiveMonitor_output_connector_decoder_sync_valid;
  wire                system_fabric_exclusiveMonitor_output_connector_decoder_sync_ready;
  wire       [1:0]    system_fabric_exclusiveMonitor_output_connector_decoder_sync_payload_source;
  wire                system_fabric_invalidationMonitor_output_connector_decoder_cmd_valid;
  wire                system_fabric_invalidationMonitor_output_connector_decoder_cmd_ready;
  wire                system_fabric_invalidationMonitor_output_connector_decoder_cmd_payload_last;
  wire       [1:0]    system_fabric_invalidationMonitor_output_connector_decoder_cmd_payload_fragment_source;
  wire       [0:0]    system_fabric_invalidationMonitor_output_connector_decoder_cmd_payload_fragment_opcode;
  wire       [31:0]   system_fabric_invalidationMonitor_output_connector_decoder_cmd_payload_fragment_address;
  wire       [5:0]    system_fabric_invalidationMonitor_output_connector_decoder_cmd_payload_fragment_length;
  wire       [63:0]   system_fabric_invalidationMonitor_output_connector_decoder_cmd_payload_fragment_data;
  wire       [7:0]    system_fabric_invalidationMonitor_output_connector_decoder_cmd_payload_fragment_mask;
  wire       [42:0]   system_fabric_invalidationMonitor_output_connector_decoder_cmd_payload_fragment_context;
  wire                system_fabric_invalidationMonitor_output_connector_decoder_rsp_valid;
  wire                system_fabric_invalidationMonitor_output_connector_decoder_rsp_ready;
  wire                system_fabric_invalidationMonitor_output_connector_decoder_rsp_payload_last;
  wire       [1:0]    system_fabric_invalidationMonitor_output_connector_decoder_rsp_payload_fragment_source;
  wire       [0:0]    system_fabric_invalidationMonitor_output_connector_decoder_rsp_payload_fragment_opcode;
  wire       [63:0]   system_fabric_invalidationMonitor_output_connector_decoder_rsp_payload_fragment_data;
  wire       [42:0]   system_fabric_invalidationMonitor_output_connector_decoder_rsp_payload_fragment_context;
  wire                _zz_72;
  wire                system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_valid;
  wire                system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_ready;
  wire                system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_payload_last;
  wire       [1:0]    system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_payload_fragment_source;
  wire       [0:0]    system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_payload_fragment_opcode;
  wire       [31:0]   system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_payload_fragment_address;
  wire       [5:0]    system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_payload_fragment_length;
  wire       [63:0]   system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_payload_fragment_data;
  wire       [7:0]    system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_payload_fragment_mask;
  wire       [42:0]   system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_payload_fragment_context;
  reg                 system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_rValid;
  reg                 system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_rData_last;
  reg        [1:0]    system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_rData_fragment_source;
  reg        [0:0]    system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_rData_fragment_opcode;
  reg        [31:0]   system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_rData_fragment_address;
  reg        [5:0]    system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_rData_fragment_length;
  reg        [63:0]   system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_rData_fragment_data;
  reg        [7:0]    system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_rData_fragment_mask;
  reg        [42:0]   system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_rData_fragment_context;
  wire                system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_valid;
  wire                system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_ready;
  wire                system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_payload_last;
  wire       [1:0]    system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_payload_fragment_source;
  wire       [0:0]    system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_payload_fragment_opcode;
  wire       [31:0]   system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_payload_fragment_address;
  wire       [5:0]    system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_payload_fragment_length;
  wire       [63:0]   system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_payload_fragment_data;
  wire       [7:0]    system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_payload_fragment_mask;
  wire       [42:0]   system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_payload_fragment_context;
  reg                 system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_rValid;
  reg                 system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_rData_last;
  reg        [1:0]    system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_rData_fragment_source;
  reg        [0:0]    system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_rData_fragment_opcode;
  reg        [31:0]   system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_rData_fragment_address;
  reg        [5:0]    system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_rData_fragment_length;
  reg        [63:0]   system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_rData_fragment_data;
  reg        [7:0]    system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_rData_fragment_mask;
  reg        [42:0]   system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_rData_fragment_context;
  wire                _zz_73;
  reg                 _zz_74;
  reg                 _zz_75;
  reg        [1:0]    _zz_76;
  reg        [0:0]    _zz_77;
  reg        [63:0]   _zz_78;
  reg        [42:0]   _zz_79;
  wire                _zz_80;
  wire                _zz_81;
  wire                _zz_82;
  wire       [1:0]    _zz_83;
  wire       [0:0]    _zz_84;
  wire                _zz_85;
  wire       [31:0]   _zz_86;
  wire       [5:0]    _zz_87;
  wire       [63:0]   _zz_88;
  wire       [7:0]    _zz_89;
  wire       [2:0]    _zz_90;
  wire                _zz_91;
  wire                _zz_92;
  reg                 _zz_93;
  reg                 _zz_94;
  reg        [1:0]    _zz_95;
  reg        [0:0]    _zz_96;
  reg                 _zz_97;
  reg        [31:0]   _zz_98;
  reg        [5:0]    _zz_99;
  reg        [63:0]   _zz_100;
  reg        [7:0]    _zz_101;
  reg        [2:0]    _zz_102;
  wire                _zz_103;
  reg                 _zz_104;
  reg                 _zz_105;
  reg        [1:0]    _zz_106;
  reg        [0:0]    _zz_107;
  reg                 _zz_108;
  reg        [31:0]   _zz_109;
  reg        [5:0]    _zz_110;
  reg        [63:0]   _zz_111;
  reg        [7:0]    _zz_112;
  reg        [2:0]    _zz_113;
  wire                _zz_114;
  reg                 _zz_115;
  reg                 _zz_116;
  reg        [1:0]    _zz_117;
  reg        [0:0]    _zz_118;
  reg                 _zz_119;
  reg        [63:0]   _zz_120;
  reg        [2:0]    _zz_121;
  wire                system_fabric_dBusCoherent_bmb_cmd_valid;
  wire                system_fabric_dBusCoherent_bmb_cmd_ready;
  wire                system_fabric_dBusCoherent_bmb_cmd_payload_last;
  wire       [1:0]    system_fabric_dBusCoherent_bmb_cmd_payload_fragment_source;
  wire       [0:0]    system_fabric_dBusCoherent_bmb_cmd_payload_fragment_opcode;
  wire                system_fabric_dBusCoherent_bmb_cmd_payload_fragment_exclusive;
  wire       [31:0]   system_fabric_dBusCoherent_bmb_cmd_payload_fragment_address;
  wire       [5:0]    system_fabric_dBusCoherent_bmb_cmd_payload_fragment_length;
  wire       [63:0]   system_fabric_dBusCoherent_bmb_cmd_payload_fragment_data;
  wire       [7:0]    system_fabric_dBusCoherent_bmb_cmd_payload_fragment_mask;
  wire       [2:0]    system_fabric_dBusCoherent_bmb_cmd_payload_fragment_context;
  wire                system_fabric_dBusCoherent_bmb_rsp_valid;
  wire                system_fabric_dBusCoherent_bmb_rsp_ready;
  wire                system_fabric_dBusCoherent_bmb_rsp_payload_last;
  wire       [1:0]    system_fabric_dBusCoherent_bmb_rsp_payload_fragment_source;
  wire       [0:0]    system_fabric_dBusCoherent_bmb_rsp_payload_fragment_opcode;
  wire                system_fabric_dBusCoherent_bmb_rsp_payload_fragment_exclusive;
  wire       [63:0]   system_fabric_dBusCoherent_bmb_rsp_payload_fragment_data;
  wire       [2:0]    system_fabric_dBusCoherent_bmb_rsp_payload_fragment_context;
  wire                system_fabric_dBusCoherent_bmb_inv_valid;
  wire                system_fabric_dBusCoherent_bmb_inv_ready;
  wire                system_fabric_dBusCoherent_bmb_inv_payload_all;
  wire       [31:0]   system_fabric_dBusCoherent_bmb_inv_payload_address;
  wire       [5:0]    system_fabric_dBusCoherent_bmb_inv_payload_length;
  wire       [1:0]    system_fabric_dBusCoherent_bmb_inv_payload_source;
  wire                system_fabric_dBusCoherent_bmb_ack_valid;
  wire                system_fabric_dBusCoherent_bmb_ack_ready;
  wire                system_fabric_dBusCoherent_bmb_sync_valid;
  wire                system_fabric_dBusCoherent_bmb_sync_ready;
  wire       [1:0]    system_fabric_dBusCoherent_bmb_sync_payload_source;
  wire                system_fabric_dBusCoherent_bmb_connector_decoder_cmd_valid;
  wire                system_fabric_dBusCoherent_bmb_connector_decoder_cmd_ready;
  wire                system_fabric_dBusCoherent_bmb_connector_decoder_cmd_payload_last;
  wire       [1:0]    system_fabric_dBusCoherent_bmb_connector_decoder_cmd_payload_fragment_source;
  wire       [0:0]    system_fabric_dBusCoherent_bmb_connector_decoder_cmd_payload_fragment_opcode;
  wire                system_fabric_dBusCoherent_bmb_connector_decoder_cmd_payload_fragment_exclusive;
  wire       [31:0]   system_fabric_dBusCoherent_bmb_connector_decoder_cmd_payload_fragment_address;
  wire       [5:0]    system_fabric_dBusCoherent_bmb_connector_decoder_cmd_payload_fragment_length;
  wire       [63:0]   system_fabric_dBusCoherent_bmb_connector_decoder_cmd_payload_fragment_data;
  wire       [7:0]    system_fabric_dBusCoherent_bmb_connector_decoder_cmd_payload_fragment_mask;
  wire       [2:0]    system_fabric_dBusCoherent_bmb_connector_decoder_cmd_payload_fragment_context;
  wire                system_fabric_dBusCoherent_bmb_connector_decoder_rsp_valid;
  wire                system_fabric_dBusCoherent_bmb_connector_decoder_rsp_ready;
  wire                system_fabric_dBusCoherent_bmb_connector_decoder_rsp_payload_last;
  wire       [1:0]    system_fabric_dBusCoherent_bmb_connector_decoder_rsp_payload_fragment_source;
  wire       [0:0]    system_fabric_dBusCoherent_bmb_connector_decoder_rsp_payload_fragment_opcode;
  wire                system_fabric_dBusCoherent_bmb_connector_decoder_rsp_payload_fragment_exclusive;
  wire       [63:0]   system_fabric_dBusCoherent_bmb_connector_decoder_rsp_payload_fragment_data;
  wire       [2:0]    system_fabric_dBusCoherent_bmb_connector_decoder_rsp_payload_fragment_context;
  wire                system_fabric_dBusCoherent_bmb_connector_decoder_inv_valid;
  wire                system_fabric_dBusCoherent_bmb_connector_decoder_inv_ready;
  wire                system_fabric_dBusCoherent_bmb_connector_decoder_inv_payload_all;
  wire       [31:0]   system_fabric_dBusCoherent_bmb_connector_decoder_inv_payload_address;
  wire       [5:0]    system_fabric_dBusCoherent_bmb_connector_decoder_inv_payload_length;
  wire       [1:0]    system_fabric_dBusCoherent_bmb_connector_decoder_inv_payload_source;
  wire                system_fabric_dBusCoherent_bmb_connector_decoder_ack_valid;
  wire                system_fabric_dBusCoherent_bmb_connector_decoder_ack_ready;
  wire                system_fabric_dBusCoherent_bmb_connector_decoder_sync_valid;
  wire                system_fabric_dBusCoherent_bmb_connector_decoder_sync_ready;
  wire       [1:0]    system_fabric_dBusCoherent_bmb_connector_decoder_sync_payload_source;
  wire       [31:0]   _zz_122;
  wire       [31:0]   _zz_123;
  wire       [31:0]   _zz_124;
  wire       [1:0]    system_uartA_interrupt_plic_gateway_priority;
  reg                 system_uartA_interrupt_plic_gateway_ip;
  reg                 system_uartA_interrupt_plic_gateway_waitCompletion;
  wire       [0:0]    _zz_125;
  wire       [0:0]    _zz_126;
  wire                system_spiA_decoder_logic_ports_0_selected;
  wire       [0:0]    _zz_127;
  wire       [0:0]    _zz_128;
  wire       [0:0]    _zz_129;
  wire                system_spiA_decoder_logic_ports_1_selected;
  wire       [0:0]    _zz_130;
  wire       [0:0]    _zz_131;
  wire       [0:0]    _zz_132;
  wire                system_spiA_decoder_logic_ports_2_selected;
  wire       [0:0]    _zz_133;
  wire       [0:0]    _zz_134;
  wire       [0:0]    _zz_135;
  wire                system_spiA_decoder_logic_ports_3_selected;
  (* keep , syn_keep *) wire       [1:0]    _zz_136 /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) reg        [1:0]    _zz_137 /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) reg        [1:0]    _zz_138 /* synthesis syn_keep = 1 */ ;
  reg                 _zz_139;
  reg                 _zz_140;
  reg                 _zz_141;
  reg                 _zz_142;
  reg                 _zz_143;
  reg                 _zz_144;
  reg                 _zz_145;
  (* keep , syn_keep *) wire                system_spiA_flash_sclk /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [1:0]    _zz_146 /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) reg        [1:0]    _zz_147 /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) reg        [1:0]    _zz_148 /* synthesis syn_keep = 1 */ ;
  reg                 _zz_149;
  reg        [0:0]    _zz_129_regNext;
  reg                 _zz_150;
  reg                 _zz_151;
  reg                 _zz_152;
  reg                 _zz_153;
  reg                 _zz_154;
  reg                 _zz_155;
  (* keep , syn_keep *) wire       [1:0]    _zz_156 /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) reg        [1:0]    _zz_157 /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) reg        [1:0]    _zz_158 /* synthesis syn_keep = 1 */ ;
  reg                 _zz_159;
  reg        [0:0]    _zz_132_regNext;
  reg                 _zz_160;
  reg                 _zz_161;
  reg                 _zz_162;
  reg                 _zz_163;
  reg                 _zz_164;
  reg                 _zz_165;
  wire                _zz_166;
  wire                _zz_167;
  wire                _zz_168;
  reg                 _zz_169;
  reg                 _zz_170;
  reg                 _zz_171;
  reg                 _zz_166_regNext;
  wire       [1:0]    system_mac_interrupt_plic_gateway_priority;
  reg                 system_mac_interrupt_plic_gateway_ip;
  reg                 system_mac_interrupt_plic_gateway_waitCompletion;
  wire       [1:0]    _zz_172;
  reg        [1:0]    _zz_173;
  reg        [1:0]    macTxInterFrame_1_io_output_payload_fragment_data_regNext;
  reg                 macTxInterFrame_1_io_output_valid_regNext;
  wire                _zz_174;
  reg                 _zz_175;
  reg                 _zz_176;
  reg        [1:0]    _zz_177;
  reg                 _zz_178;
  reg                 _zz_179;
  reg        [1:0]    _zz_180;
  reg        [1:0]    _zz_173_regNext;
  reg                 _zz_181;
  reg                 _zz_182;
  wire                system_dma_interrupt;
  wire                system_dma_vga_channel_interrupt;
  wire       [1:0]    system_dma_vga_channel_interrupt_plic_gateway_priority;
  reg                 system_dma_vga_channel_interrupt_plic_gateway_ip;
  reg                 system_dma_vga_channel_interrupt_plic_gateway_waitCompletion;
  wire                system_dma_audioOut_channel_interrupt;
  wire       [1:0]    system_dma_audioOut_channel_interrupt_plic_gateway_priority;
  reg                 system_dma_audioOut_channel_interrupt_plic_gateway_ip;
  reg                 system_dma_audioOut_channel_interrupt_plic_gateway_waitCompletion;
  wire                system_gpioA_interrupts_0;
  wire                system_gpioA_interrupts_1;
  wire                system_gpioA_interrupts_2;
  wire                system_gpioA_interrupts_3;
  wire                system_gpioA_interrupts_4;
  wire                system_gpioA_interrupts_5;
  wire                system_gpioA_interrupts_6;
  wire                system_gpioA_interrupts_7;
  wire                system_gpioA_interrupts_8;
  wire                system_gpioA_interrupts_9;
  wire                system_gpioA_interrupts_10;
  wire                system_gpioA_interrupts_11;
  wire                system_gpioA_interrupts_12;
  wire                system_gpioA_interrupts_13;
  wire                system_gpioA_interrupts_14;
  wire                system_gpioA_interrupts_15;
  wire                system_gpioA_interrupts_16;
  wire                system_gpioA_interrupts_17;
  wire                system_gpioA_interrupts_18;
  wire                system_gpioA_interrupts_19;
  wire                system_gpioA_interrupts_20;
  wire                system_gpioA_interrupts_21;
  wire                system_gpioA_interrupts_22;
  wire                system_gpioA_interrupts_23;
  wire                system_gpioA_interrupts_24;
  wire                system_gpioA_interrupts_25;
  wire                system_gpioA_interrupts_26;
  wire                system_gpioA_interrupts_27;
  wire                system_gpioA_interrupts_28;
  wire                system_gpioA_interrupts_29;
  wire                system_gpioA_interrupts_30;
  wire                system_gpioA_interrupts_31;
  wire       [1:0]    system_gpioA_interrupts_24_plic_gateway_priority;
  reg                 system_gpioA_interrupts_24_plic_gateway_ip;
  reg                 system_gpioA_interrupts_24_plic_gateway_waitCompletion;
  wire       [1:0]    system_gpioA_interrupts_25_plic_gateway_priority;
  reg                 system_gpioA_interrupts_25_plic_gateway_ip;
  reg                 system_gpioA_interrupts_25_plic_gateway_waitCompletion;
  wire       [1:0]    system_gpioA_interrupts_26_plic_gateway_priority;
  reg                 system_gpioA_interrupts_26_plic_gateway_ip;
  reg                 system_gpioA_interrupts_26_plic_gateway_waitCompletion;
  wire       [1:0]    system_gpioA_interrupts_27_plic_gateway_priority;
  reg                 system_gpioA_interrupts_27_plic_gateway_ip;
  reg                 system_gpioA_interrupts_27_plic_gateway_waitCompletion;
  wire                system_plic_logic_bmb_cmd_valid;
  wire                system_plic_logic_bmb_cmd_ready;
  wire                system_plic_logic_bmb_cmd_payload_last;
  wire       [0:0]    system_plic_logic_bmb_cmd_payload_fragment_source;
  wire       [0:0]    system_plic_logic_bmb_cmd_payload_fragment_opcode;
  wire       [21:0]   system_plic_logic_bmb_cmd_payload_fragment_address;
  wire       [1:0]    system_plic_logic_bmb_cmd_payload_fragment_length;
  wire       [31:0]   system_plic_logic_bmb_cmd_payload_fragment_data;
  wire       [3:0]    system_plic_logic_bmb_cmd_payload_fragment_mask;
  wire       [6:0]    system_plic_logic_bmb_cmd_payload_fragment_context;
  wire                system_plic_logic_bmb_rsp_valid;
  wire                system_plic_logic_bmb_rsp_ready;
  wire                system_plic_logic_bmb_rsp_payload_last;
  wire       [0:0]    system_plic_logic_bmb_rsp_payload_fragment_source;
  wire       [0:0]    system_plic_logic_bmb_rsp_payload_fragment_opcode;
  wire       [31:0]   system_plic_logic_bmb_rsp_payload_fragment_data;
  wire       [6:0]    system_plic_logic_bmb_rsp_payload_fragment_context;
  reg                 system_plic_logic_bus_readHaltTrigger;
  wire                system_plic_logic_bus_writeHaltTrigger;
  wire                system_plic_logic_bus_rsp_valid;
  wire                system_plic_logic_bus_rsp_ready;
  wire                system_plic_logic_bus_rsp_payload_last;
  wire       [0:0]    system_plic_logic_bus_rsp_payload_fragment_source;
  wire       [0:0]    system_plic_logic_bus_rsp_payload_fragment_opcode;
  reg        [31:0]   system_plic_logic_bus_rsp_payload_fragment_data;
  wire       [6:0]    system_plic_logic_bus_rsp_payload_fragment_context;
  wire                _zz_183;
  wire                _zz_184;
  wire                _zz_185;
  reg                 _zz_186;
  reg                 _zz_187;
  reg        [0:0]    _zz_188;
  reg        [0:0]    _zz_189;
  reg        [31:0]   _zz_190;
  reg        [6:0]    _zz_191;
  wire                system_plic_logic_bus_askWrite;
  wire                system_plic_logic_bus_askRead;
  wire                system_plic_logic_bus_doWrite;
  wire                system_plic_logic_bus_doRead;
  wire                system_cores_0_externalInterrupt_plic_target_ie_0;
  wire                system_cores_0_externalInterrupt_plic_target_ie_1;
  wire                system_cores_0_externalInterrupt_plic_target_ie_2;
  wire                system_cores_0_externalInterrupt_plic_target_ie_3;
  wire                system_cores_0_externalInterrupt_plic_target_ie_4;
  wire                system_cores_0_externalInterrupt_plic_target_ie_5;
  wire                system_cores_0_externalInterrupt_plic_target_ie_6;
  wire                system_cores_0_externalInterrupt_plic_target_ie_7;
  wire       [1:0]    system_cores_0_externalInterrupt_plic_target_threshold;
  wire       [1:0]    system_cores_0_externalInterrupt_plic_target_requests_0_priority;
  wire       [3:0]    system_cores_0_externalInterrupt_plic_target_requests_0_id;
  wire                system_cores_0_externalInterrupt_plic_target_requests_0_valid;
  wire       [1:0]    system_cores_0_externalInterrupt_plic_target_requests_1_priority;
  wire       [3:0]    system_cores_0_externalInterrupt_plic_target_requests_1_id;
  wire                system_cores_0_externalInterrupt_plic_target_requests_1_valid;
  wire       [1:0]    system_cores_0_externalInterrupt_plic_target_requests_2_priority;
  wire       [3:0]    system_cores_0_externalInterrupt_plic_target_requests_2_id;
  wire                system_cores_0_externalInterrupt_plic_target_requests_2_valid;
  wire       [1:0]    system_cores_0_externalInterrupt_plic_target_requests_3_priority;
  wire       [3:0]    system_cores_0_externalInterrupt_plic_target_requests_3_id;
  wire                system_cores_0_externalInterrupt_plic_target_requests_3_valid;
  wire       [1:0]    system_cores_0_externalInterrupt_plic_target_requests_4_priority;
  wire       [3:0]    system_cores_0_externalInterrupt_plic_target_requests_4_id;
  wire                system_cores_0_externalInterrupt_plic_target_requests_4_valid;
  wire       [1:0]    system_cores_0_externalInterrupt_plic_target_requests_5_priority;
  wire       [3:0]    system_cores_0_externalInterrupt_plic_target_requests_5_id;
  wire                system_cores_0_externalInterrupt_plic_target_requests_5_valid;
  wire       [1:0]    system_cores_0_externalInterrupt_plic_target_requests_6_priority;
  wire       [3:0]    system_cores_0_externalInterrupt_plic_target_requests_6_id;
  wire                system_cores_0_externalInterrupt_plic_target_requests_6_valid;
  wire       [1:0]    system_cores_0_externalInterrupt_plic_target_requests_7_priority;
  wire       [3:0]    system_cores_0_externalInterrupt_plic_target_requests_7_id;
  wire                system_cores_0_externalInterrupt_plic_target_requests_7_valid;
  wire       [1:0]    system_cores_0_externalInterrupt_plic_target_requests_8_priority;
  wire       [3:0]    system_cores_0_externalInterrupt_plic_target_requests_8_id;
  wire                system_cores_0_externalInterrupt_plic_target_requests_8_valid;
  wire                _zz_192;
  wire       [1:0]    _zz_193;
  wire                _zz_194;
  wire                _zz_195;
  wire       [1:0]    _zz_196;
  wire                _zz_197;
  wire                _zz_198;
  wire       [1:0]    _zz_199;
  wire                _zz_200;
  wire                _zz_201;
  wire       [1:0]    _zz_202;
  wire                _zz_203;
  wire                _zz_204;
  wire       [1:0]    _zz_205;
  wire                _zz_206;
  wire                _zz_207;
  wire       [1:0]    _zz_208;
  wire                _zz_209;
  wire                _zz_210;
  wire       [1:0]    _zz_211;
  wire                _zz_212;
  wire                _zz_213;
  reg        [1:0]    system_cores_0_externalInterrupt_plic_target_bestRequest_priority;
  reg        [3:0]    system_cores_0_externalInterrupt_plic_target_bestRequest_id;
  reg                 system_cores_0_externalInterrupt_plic_target_bestRequest_valid;
  wire                system_cores_0_externalInterrupt_plic_target_iep;
  wire       [3:0]    system_cores_0_externalInterrupt_plic_target_claim;
  wire                system_cores_0_externalSupervisorInterrupt_plic_target_ie_0;
  wire                system_cores_0_externalSupervisorInterrupt_plic_target_ie_1;
  wire                system_cores_0_externalSupervisorInterrupt_plic_target_ie_2;
  wire                system_cores_0_externalSupervisorInterrupt_plic_target_ie_3;
  wire                system_cores_0_externalSupervisorInterrupt_plic_target_ie_4;
  wire                system_cores_0_externalSupervisorInterrupt_plic_target_ie_5;
  wire                system_cores_0_externalSupervisorInterrupt_plic_target_ie_6;
  wire                system_cores_0_externalSupervisorInterrupt_plic_target_ie_7;
  wire       [1:0]    system_cores_0_externalSupervisorInterrupt_plic_target_threshold;
  wire       [1:0]    system_cores_0_externalSupervisorInterrupt_plic_target_requests_0_priority;
  wire       [3:0]    system_cores_0_externalSupervisorInterrupt_plic_target_requests_0_id;
  wire                system_cores_0_externalSupervisorInterrupt_plic_target_requests_0_valid;
  wire       [1:0]    system_cores_0_externalSupervisorInterrupt_plic_target_requests_1_priority;
  wire       [3:0]    system_cores_0_externalSupervisorInterrupt_plic_target_requests_1_id;
  wire                system_cores_0_externalSupervisorInterrupt_plic_target_requests_1_valid;
  wire       [1:0]    system_cores_0_externalSupervisorInterrupt_plic_target_requests_2_priority;
  wire       [3:0]    system_cores_0_externalSupervisorInterrupt_plic_target_requests_2_id;
  wire                system_cores_0_externalSupervisorInterrupt_plic_target_requests_2_valid;
  wire       [1:0]    system_cores_0_externalSupervisorInterrupt_plic_target_requests_3_priority;
  wire       [3:0]    system_cores_0_externalSupervisorInterrupt_plic_target_requests_3_id;
  wire                system_cores_0_externalSupervisorInterrupt_plic_target_requests_3_valid;
  wire       [1:0]    system_cores_0_externalSupervisorInterrupt_plic_target_requests_4_priority;
  wire       [3:0]    system_cores_0_externalSupervisorInterrupt_plic_target_requests_4_id;
  wire                system_cores_0_externalSupervisorInterrupt_plic_target_requests_4_valid;
  wire       [1:0]    system_cores_0_externalSupervisorInterrupt_plic_target_requests_5_priority;
  wire       [3:0]    system_cores_0_externalSupervisorInterrupt_plic_target_requests_5_id;
  wire                system_cores_0_externalSupervisorInterrupt_plic_target_requests_5_valid;
  wire       [1:0]    system_cores_0_externalSupervisorInterrupt_plic_target_requests_6_priority;
  wire       [3:0]    system_cores_0_externalSupervisorInterrupt_plic_target_requests_6_id;
  wire                system_cores_0_externalSupervisorInterrupt_plic_target_requests_6_valid;
  wire       [1:0]    system_cores_0_externalSupervisorInterrupt_plic_target_requests_7_priority;
  wire       [3:0]    system_cores_0_externalSupervisorInterrupt_plic_target_requests_7_id;
  wire                system_cores_0_externalSupervisorInterrupt_plic_target_requests_7_valid;
  wire       [1:0]    system_cores_0_externalSupervisorInterrupt_plic_target_requests_8_priority;
  wire       [3:0]    system_cores_0_externalSupervisorInterrupt_plic_target_requests_8_id;
  wire                system_cores_0_externalSupervisorInterrupt_plic_target_requests_8_valid;
  wire                _zz_214;
  wire       [1:0]    _zz_215;
  wire                _zz_216;
  wire                _zz_217;
  wire       [1:0]    _zz_218;
  wire                _zz_219;
  wire                _zz_220;
  wire       [1:0]    _zz_221;
  wire                _zz_222;
  wire                _zz_223;
  wire       [1:0]    _zz_224;
  wire                _zz_225;
  wire                _zz_226;
  wire       [1:0]    _zz_227;
  wire                _zz_228;
  wire                _zz_229;
  wire       [1:0]    _zz_230;
  wire                _zz_231;
  wire                _zz_232;
  wire       [1:0]    _zz_233;
  wire                _zz_234;
  wire                _zz_235;
  reg        [1:0]    system_cores_0_externalSupervisorInterrupt_plic_target_bestRequest_priority;
  reg        [3:0]    system_cores_0_externalSupervisorInterrupt_plic_target_bestRequest_id;
  reg                 system_cores_0_externalSupervisorInterrupt_plic_target_bestRequest_valid;
  wire                system_cores_0_externalSupervisorInterrupt_plic_target_iep;
  wire       [3:0]    system_cores_0_externalSupervisorInterrupt_plic_target_claim;
  wire                system_cores_1_externalInterrupt_plic_target_ie_0;
  wire                system_cores_1_externalInterrupt_plic_target_ie_1;
  wire                system_cores_1_externalInterrupt_plic_target_ie_2;
  wire                system_cores_1_externalInterrupt_plic_target_ie_3;
  wire                system_cores_1_externalInterrupt_plic_target_ie_4;
  wire                system_cores_1_externalInterrupt_plic_target_ie_5;
  wire                system_cores_1_externalInterrupt_plic_target_ie_6;
  wire                system_cores_1_externalInterrupt_plic_target_ie_7;
  wire       [1:0]    system_cores_1_externalInterrupt_plic_target_threshold;
  wire       [1:0]    system_cores_1_externalInterrupt_plic_target_requests_0_priority;
  wire       [3:0]    system_cores_1_externalInterrupt_plic_target_requests_0_id;
  wire                system_cores_1_externalInterrupt_plic_target_requests_0_valid;
  wire       [1:0]    system_cores_1_externalInterrupt_plic_target_requests_1_priority;
  wire       [3:0]    system_cores_1_externalInterrupt_plic_target_requests_1_id;
  wire                system_cores_1_externalInterrupt_plic_target_requests_1_valid;
  wire       [1:0]    system_cores_1_externalInterrupt_plic_target_requests_2_priority;
  wire       [3:0]    system_cores_1_externalInterrupt_plic_target_requests_2_id;
  wire                system_cores_1_externalInterrupt_plic_target_requests_2_valid;
  wire       [1:0]    system_cores_1_externalInterrupt_plic_target_requests_3_priority;
  wire       [3:0]    system_cores_1_externalInterrupt_plic_target_requests_3_id;
  wire                system_cores_1_externalInterrupt_plic_target_requests_3_valid;
  wire       [1:0]    system_cores_1_externalInterrupt_plic_target_requests_4_priority;
  wire       [3:0]    system_cores_1_externalInterrupt_plic_target_requests_4_id;
  wire                system_cores_1_externalInterrupt_plic_target_requests_4_valid;
  wire       [1:0]    system_cores_1_externalInterrupt_plic_target_requests_5_priority;
  wire       [3:0]    system_cores_1_externalInterrupt_plic_target_requests_5_id;
  wire                system_cores_1_externalInterrupt_plic_target_requests_5_valid;
  wire       [1:0]    system_cores_1_externalInterrupt_plic_target_requests_6_priority;
  wire       [3:0]    system_cores_1_externalInterrupt_plic_target_requests_6_id;
  wire                system_cores_1_externalInterrupt_plic_target_requests_6_valid;
  wire       [1:0]    system_cores_1_externalInterrupt_plic_target_requests_7_priority;
  wire       [3:0]    system_cores_1_externalInterrupt_plic_target_requests_7_id;
  wire                system_cores_1_externalInterrupt_plic_target_requests_7_valid;
  wire       [1:0]    system_cores_1_externalInterrupt_plic_target_requests_8_priority;
  wire       [3:0]    system_cores_1_externalInterrupt_plic_target_requests_8_id;
  wire                system_cores_1_externalInterrupt_plic_target_requests_8_valid;
  wire                _zz_236;
  wire       [1:0]    _zz_237;
  wire                _zz_238;
  wire                _zz_239;
  wire       [1:0]    _zz_240;
  wire                _zz_241;
  wire                _zz_242;
  wire       [1:0]    _zz_243;
  wire                _zz_244;
  wire                _zz_245;
  wire       [1:0]    _zz_246;
  wire                _zz_247;
  wire                _zz_248;
  wire       [1:0]    _zz_249;
  wire                _zz_250;
  wire                _zz_251;
  wire       [1:0]    _zz_252;
  wire                _zz_253;
  wire                _zz_254;
  wire       [1:0]    _zz_255;
  wire                _zz_256;
  wire                _zz_257;
  reg        [1:0]    system_cores_1_externalInterrupt_plic_target_bestRequest_priority;
  reg        [3:0]    system_cores_1_externalInterrupt_plic_target_bestRequest_id;
  reg                 system_cores_1_externalInterrupt_plic_target_bestRequest_valid;
  wire                system_cores_1_externalInterrupt_plic_target_iep;
  wire       [3:0]    system_cores_1_externalInterrupt_plic_target_claim;
  wire                system_cores_1_externalSupervisorInterrupt_plic_target_ie_0;
  wire                system_cores_1_externalSupervisorInterrupt_plic_target_ie_1;
  wire                system_cores_1_externalSupervisorInterrupt_plic_target_ie_2;
  wire                system_cores_1_externalSupervisorInterrupt_plic_target_ie_3;
  wire                system_cores_1_externalSupervisorInterrupt_plic_target_ie_4;
  wire                system_cores_1_externalSupervisorInterrupt_plic_target_ie_5;
  wire                system_cores_1_externalSupervisorInterrupt_plic_target_ie_6;
  wire                system_cores_1_externalSupervisorInterrupt_plic_target_ie_7;
  wire       [1:0]    system_cores_1_externalSupervisorInterrupt_plic_target_threshold;
  wire       [1:0]    system_cores_1_externalSupervisorInterrupt_plic_target_requests_0_priority;
  wire       [3:0]    system_cores_1_externalSupervisorInterrupt_plic_target_requests_0_id;
  wire                system_cores_1_externalSupervisorInterrupt_plic_target_requests_0_valid;
  wire       [1:0]    system_cores_1_externalSupervisorInterrupt_plic_target_requests_1_priority;
  wire       [3:0]    system_cores_1_externalSupervisorInterrupt_plic_target_requests_1_id;
  wire                system_cores_1_externalSupervisorInterrupt_plic_target_requests_1_valid;
  wire       [1:0]    system_cores_1_externalSupervisorInterrupt_plic_target_requests_2_priority;
  wire       [3:0]    system_cores_1_externalSupervisorInterrupt_plic_target_requests_2_id;
  wire                system_cores_1_externalSupervisorInterrupt_plic_target_requests_2_valid;
  wire       [1:0]    system_cores_1_externalSupervisorInterrupt_plic_target_requests_3_priority;
  wire       [3:0]    system_cores_1_externalSupervisorInterrupt_plic_target_requests_3_id;
  wire                system_cores_1_externalSupervisorInterrupt_plic_target_requests_3_valid;
  wire       [1:0]    system_cores_1_externalSupervisorInterrupt_plic_target_requests_4_priority;
  wire       [3:0]    system_cores_1_externalSupervisorInterrupt_plic_target_requests_4_id;
  wire                system_cores_1_externalSupervisorInterrupt_plic_target_requests_4_valid;
  wire       [1:0]    system_cores_1_externalSupervisorInterrupt_plic_target_requests_5_priority;
  wire       [3:0]    system_cores_1_externalSupervisorInterrupt_plic_target_requests_5_id;
  wire                system_cores_1_externalSupervisorInterrupt_plic_target_requests_5_valid;
  wire       [1:0]    system_cores_1_externalSupervisorInterrupt_plic_target_requests_6_priority;
  wire       [3:0]    system_cores_1_externalSupervisorInterrupt_plic_target_requests_6_id;
  wire                system_cores_1_externalSupervisorInterrupt_plic_target_requests_6_valid;
  wire       [1:0]    system_cores_1_externalSupervisorInterrupt_plic_target_requests_7_priority;
  wire       [3:0]    system_cores_1_externalSupervisorInterrupt_plic_target_requests_7_id;
  wire                system_cores_1_externalSupervisorInterrupt_plic_target_requests_7_valid;
  wire       [1:0]    system_cores_1_externalSupervisorInterrupt_plic_target_requests_8_priority;
  wire       [3:0]    system_cores_1_externalSupervisorInterrupt_plic_target_requests_8_id;
  wire                system_cores_1_externalSupervisorInterrupt_plic_target_requests_8_valid;
  wire                _zz_258;
  wire       [1:0]    _zz_259;
  wire                _zz_260;
  wire                _zz_261;
  wire       [1:0]    _zz_262;
  wire                _zz_263;
  wire                _zz_264;
  wire       [1:0]    _zz_265;
  wire                _zz_266;
  wire                _zz_267;
  wire       [1:0]    _zz_268;
  wire                _zz_269;
  wire                _zz_270;
  wire       [1:0]    _zz_271;
  wire                _zz_272;
  wire                _zz_273;
  wire       [1:0]    _zz_274;
  wire                _zz_275;
  wire                _zz_276;
  wire       [1:0]    _zz_277;
  wire                _zz_278;
  wire                _zz_279;
  reg        [1:0]    system_cores_1_externalSupervisorInterrupt_plic_target_bestRequest_priority;
  reg        [3:0]    system_cores_1_externalSupervisorInterrupt_plic_target_bestRequest_id;
  reg                 system_cores_1_externalSupervisorInterrupt_plic_target_bestRequest_valid;
  wire                system_cores_1_externalSupervisorInterrupt_plic_target_iep;
  wire       [3:0]    system_cores_1_externalSupervisorInterrupt_plic_target_claim;
  reg        [1:0]    _zz_280;
  reg        [1:0]    _zz_281;
  reg        [1:0]    _zz_282;
  reg        [1:0]    _zz_283;
  reg        [1:0]    _zz_284;
  reg        [1:0]    _zz_285;
  reg        [1:0]    _zz_286;
  reg        [1:0]    _zz_287;
  reg                 system_plic_logic_bridge_claim_valid;
  reg        [3:0]    system_plic_logic_bridge_claim_payload;
  reg                 system_plic_logic_bridge_completion_valid;
  reg        [3:0]    system_plic_logic_bridge_completion_payload;
  reg                 system_plic_logic_bridge_coherencyStall_willIncrement;
  wire                system_plic_logic_bridge_coherencyStall_willClear;
  reg        [0:0]    system_plic_logic_bridge_coherencyStall_valueNext;
  reg        [0:0]    system_plic_logic_bridge_coherencyStall_value;
  wire                system_plic_logic_bridge_coherencyStall_willOverflowIfInc;
  wire                system_plic_logic_bridge_coherencyStall_willOverflow;
  reg        [1:0]    _zz_288;
  reg                 system_plic_logic_bridge_targetMapping_0_targetCompletion_valid;
  wire       [3:0]    system_plic_logic_bridge_targetMapping_0_targetCompletion_payload;
  reg                 _zz_289;
  reg                 _zz_290;
  reg                 _zz_291;
  reg                 _zz_292;
  reg                 _zz_293;
  reg                 _zz_294;
  reg                 _zz_295;
  reg                 _zz_296;
  reg        [1:0]    _zz_297;
  reg                 system_plic_logic_bridge_targetMapping_1_targetCompletion_valid;
  wire       [3:0]    system_plic_logic_bridge_targetMapping_1_targetCompletion_payload;
  reg                 _zz_298;
  reg                 _zz_299;
  reg                 _zz_300;
  reg                 _zz_301;
  reg                 _zz_302;
  reg                 _zz_303;
  reg                 _zz_304;
  reg                 _zz_305;
  reg        [1:0]    _zz_306;
  reg                 system_plic_logic_bridge_targetMapping_2_targetCompletion_valid;
  wire       [3:0]    system_plic_logic_bridge_targetMapping_2_targetCompletion_payload;
  reg                 _zz_307;
  reg                 _zz_308;
  reg                 _zz_309;
  reg                 _zz_310;
  reg                 _zz_311;
  reg                 _zz_312;
  reg                 _zz_313;
  reg                 _zz_314;
  reg        [1:0]    _zz_315;
  reg                 system_plic_logic_bridge_targetMapping_3_targetCompletion_valid;
  wire       [3:0]    system_plic_logic_bridge_targetMapping_3_targetCompletion_payload;
  reg                 _zz_316;
  reg                 _zz_317;
  reg                 _zz_318;
  reg                 _zz_319;
  reg                 _zz_320;
  reg                 _zz_321;
  reg                 _zz_322;
  reg                 _zz_323;
  wire                sdramDomain_phyA_logic_ctrl_cmd_valid;
  wire                sdramDomain_phyA_logic_ctrl_cmd_ready;
  wire                sdramDomain_phyA_logic_ctrl_cmd_payload_last;
  wire       [0:0]    sdramDomain_phyA_logic_ctrl_cmd_payload_fragment_source;
  wire       [0:0]    sdramDomain_phyA_logic_ctrl_cmd_payload_fragment_opcode;
  wire       [11:0]   sdramDomain_phyA_logic_ctrl_cmd_payload_fragment_address;
  wire       [1:0]    sdramDomain_phyA_logic_ctrl_cmd_payload_fragment_length;
  wire       [31:0]   sdramDomain_phyA_logic_ctrl_cmd_payload_fragment_data;
  wire       [3:0]    sdramDomain_phyA_logic_ctrl_cmd_payload_fragment_mask;
  wire       [6:0]    sdramDomain_phyA_logic_ctrl_cmd_payload_fragment_context;
  wire                sdramDomain_phyA_logic_ctrl_rsp_valid;
  wire                sdramDomain_phyA_logic_ctrl_rsp_ready;
  wire                sdramDomain_phyA_logic_ctrl_rsp_payload_last;
  wire       [0:0]    sdramDomain_phyA_logic_ctrl_rsp_payload_fragment_source;
  wire       [0:0]    sdramDomain_phyA_logic_ctrl_rsp_payload_fragment_opcode;
  wire       [31:0]   sdramDomain_phyA_logic_ctrl_rsp_payload_fragment_data;
  wire       [6:0]    sdramDomain_phyA_logic_ctrl_rsp_payload_fragment_context;
  wire                _zz_324;
  wire                _zz_325;
  wire                _zz_326;
  reg                 _zz_327;
  reg                 _zz_328;
  reg        [0:0]    _zz_329;
  reg        [0:0]    _zz_330;
  reg        [31:0]   _zz_331;
  reg        [6:0]    _zz_332;
  wire                _zz_333;
  reg        [4:0]    _zz_334;
  reg                 _zz_335;
  reg                 _zz_336;
  reg                 _zz_337;
  reg                 _zz_338;
  reg                 _zz_339;
  reg                 _zz_340;
  reg                 _zz_341;
  reg                 _zz_342;
  reg                 _zz_343;
  reg                 _zz_344;
  reg                 _zz_345;
  reg                 _zz_346;
  reg                 _zz_347;
  reg                 _zz_348;
  reg                 _zz_349;
  reg                 _zz_350;
  reg                 _zz_351;
  reg                 _zz_352;
  reg                 _zz_353;
  reg                 _zz_354;
  reg                 _zz_355;
  reg                 _zz_356;
  reg                 _zz_357;
  reg                 _zz_358;
  reg                 _zz_359;
  reg                 _zz_360;
  reg                 _zz_361;
  reg                 _zz_362;
  reg                 _zz_363;
  reg                 _zz_364;
  reg                 _zz_365;
  reg                 _zz_366;
  wire                _zz_367;
  wire                system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_valid;
  wire                system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_ready;
  wire                system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_payload_last;
  wire       [4:0]    system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_payload_fragment_source;
  wire       [0:0]    system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_payload_fragment_opcode;
  wire       [26:0]   system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_payload_fragment_address;
  wire       [5:0]    system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_payload_fragment_length;
  wire       [63:0]   system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_payload_fragment_data;
  wire       [7:0]    system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_payload_fragment_mask;
  reg                 system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_rValid;
  reg                 system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_rData_last;
  reg        [4:0]    system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_rData_fragment_source;
  reg        [0:0]    system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_rData_fragment_opcode;
  reg        [26:0]   system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_rData_fragment_address;
  reg        [5:0]    system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_rData_fragment_length;
  reg        [63:0]   system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_rData_fragment_data;
  reg        [7:0]    system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_rData_fragment_mask;
  wire                system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_m2sPipe_valid;
  wire                system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_m2sPipe_ready;
  wire                system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_m2sPipe_payload_last;
  wire       [4:0]    system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_m2sPipe_payload_fragment_source;
  wire       [0:0]    system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_m2sPipe_payload_fragment_opcode;
  wire       [26:0]   system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_m2sPipe_payload_fragment_address;
  wire       [5:0]    system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_m2sPipe_payload_fragment_length;
  wire       [63:0]   system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_m2sPipe_payload_fragment_data;
  wire       [7:0]    system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_m2sPipe_payload_fragment_mask;
  reg                 system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_m2sPipe_rValid;
  reg                 system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_m2sPipe_rData_last;
  reg        [4:0]    system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_m2sPipe_rData_fragment_source;
  reg        [0:0]    system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_m2sPipe_rData_fragment_opcode;
  reg        [26:0]   system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_m2sPipe_rData_fragment_address;
  reg        [5:0]    system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_m2sPipe_rData_fragment_length;
  reg        [63:0]   system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_m2sPipe_rData_fragment_data;
  reg        [7:0]    system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_m2sPipe_rData_fragment_mask;
  wire                _zz_368;
  reg                 _zz_369;
  reg                 _zz_370;
  reg        [4:0]    _zz_371;
  reg        [0:0]    _zz_372;
  reg        [63:0]   _zz_373;
  wire                sdramDomain_bmbCc_bmb_cmd_valid;
  wire                sdramDomain_bmbCc_bmb_cmd_ready;
  wire                sdramDomain_bmbCc_bmb_cmd_payload_last;
  wire       [0:0]    sdramDomain_bmbCc_bmb_cmd_payload_fragment_source;
  wire       [0:0]    sdramDomain_bmbCc_bmb_cmd_payload_fragment_opcode;
  wire       [12:0]   sdramDomain_bmbCc_bmb_cmd_payload_fragment_address;
  wire       [1:0]    sdramDomain_bmbCc_bmb_cmd_payload_fragment_length;
  wire       [31:0]   sdramDomain_bmbCc_bmb_cmd_payload_fragment_data;
  wire       [3:0]    sdramDomain_bmbCc_bmb_cmd_payload_fragment_mask;
  wire       [6:0]    sdramDomain_bmbCc_bmb_cmd_payload_fragment_context;
  wire                sdramDomain_bmbCc_bmb_rsp_valid;
  wire                sdramDomain_bmbCc_bmb_rsp_ready;
  wire                sdramDomain_bmbCc_bmb_rsp_payload_last;
  wire       [0:0]    sdramDomain_bmbCc_bmb_rsp_payload_fragment_source;
  wire       [0:0]    sdramDomain_bmbCc_bmb_rsp_payload_fragment_opcode;
  wire       [31:0]   sdramDomain_bmbCc_bmb_rsp_payload_fragment_data;
  wire       [6:0]    sdramDomain_bmbCc_bmb_rsp_payload_fragment_context;
  wire                system_bmbPeripheral_bmb_cmd_valid;
  wire                system_bmbPeripheral_bmb_cmd_ready;
  wire                system_bmbPeripheral_bmb_cmd_payload_last;
  wire       [0:0]    system_bmbPeripheral_bmb_cmd_payload_fragment_source;
  wire       [0:0]    system_bmbPeripheral_bmb_cmd_payload_fragment_opcode;
  wire       [23:0]   system_bmbPeripheral_bmb_cmd_payload_fragment_address;
  wire       [1:0]    system_bmbPeripheral_bmb_cmd_payload_fragment_length;
  wire       [31:0]   system_bmbPeripheral_bmb_cmd_payload_fragment_data;
  wire       [3:0]    system_bmbPeripheral_bmb_cmd_payload_fragment_mask;
  wire       [6:0]    system_bmbPeripheral_bmb_cmd_payload_fragment_context;
  wire                system_bmbPeripheral_bmb_rsp_valid;
  wire                system_bmbPeripheral_bmb_rsp_ready;
  wire                system_bmbPeripheral_bmb_rsp_payload_last;
  wire       [0:0]    system_bmbPeripheral_bmb_rsp_payload_fragment_source;
  wire       [0:0]    system_bmbPeripheral_bmb_rsp_payload_fragment_opcode;
  wire       [31:0]   system_bmbPeripheral_bmb_rsp_payload_fragment_data;
  wire       [6:0]    system_bmbPeripheral_bmb_rsp_payload_fragment_context;
  wire                _zz_374;
  wire                system_bmbPeripheral_bmb_cmd_halfPipe_valid;
  wire                system_bmbPeripheral_bmb_cmd_halfPipe_ready;
  wire                system_bmbPeripheral_bmb_cmd_halfPipe_payload_last;
  wire       [0:0]    system_bmbPeripheral_bmb_cmd_halfPipe_payload_fragment_source;
  wire       [0:0]    system_bmbPeripheral_bmb_cmd_halfPipe_payload_fragment_opcode;
  wire       [23:0]   system_bmbPeripheral_bmb_cmd_halfPipe_payload_fragment_address;
  wire       [1:0]    system_bmbPeripheral_bmb_cmd_halfPipe_payload_fragment_length;
  wire       [31:0]   system_bmbPeripheral_bmb_cmd_halfPipe_payload_fragment_data;
  wire       [3:0]    system_bmbPeripheral_bmb_cmd_halfPipe_payload_fragment_mask;
  wire       [6:0]    system_bmbPeripheral_bmb_cmd_halfPipe_payload_fragment_context;
  reg                 system_bmbPeripheral_bmb_cmd_halfPipe_regs_valid;
  reg                 system_bmbPeripheral_bmb_cmd_halfPipe_regs_ready;
  reg                 system_bmbPeripheral_bmb_cmd_halfPipe_regs_payload_last;
  reg        [0:0]    system_bmbPeripheral_bmb_cmd_halfPipe_regs_payload_fragment_source;
  reg        [0:0]    system_bmbPeripheral_bmb_cmd_halfPipe_regs_payload_fragment_opcode;
  reg        [23:0]   system_bmbPeripheral_bmb_cmd_halfPipe_regs_payload_fragment_address;
  reg        [1:0]    system_bmbPeripheral_bmb_cmd_halfPipe_regs_payload_fragment_length;
  reg        [31:0]   system_bmbPeripheral_bmb_cmd_halfPipe_regs_payload_fragment_data;
  reg        [3:0]    system_bmbPeripheral_bmb_cmd_halfPipe_regs_payload_fragment_mask;
  reg        [6:0]    system_bmbPeripheral_bmb_cmd_halfPipe_regs_payload_fragment_context;
  wire                _zz_375;
  reg                 _zz_376;
  reg                 _zz_377;
  reg                 _zz_378;
  reg        [0:0]    _zz_379;
  reg        [0:0]    _zz_380;
  reg        [31:0]   _zz_381;
  reg        [6:0]    _zz_382;
  wire                system_fabric_iBus_bmb_cmd_valid;
  wire                system_fabric_iBus_bmb_cmd_ready;
  wire                system_fabric_iBus_bmb_cmd_payload_last;
  wire       [0:0]    system_fabric_iBus_bmb_cmd_payload_fragment_source;
  wire       [0:0]    system_fabric_iBus_bmb_cmd_payload_fragment_opcode;
  wire       [31:0]   system_fabric_iBus_bmb_cmd_payload_fragment_address;
  wire       [5:0]    system_fabric_iBus_bmb_cmd_payload_fragment_length;
  wire                system_fabric_iBus_bmb_rsp_valid;
  wire                system_fabric_iBus_bmb_rsp_ready;
  wire                system_fabric_iBus_bmb_rsp_payload_last;
  wire       [0:0]    system_fabric_iBus_bmb_rsp_payload_fragment_source;
  wire       [0:0]    system_fabric_iBus_bmb_rsp_payload_fragment_opcode;
  wire       [63:0]   system_fabric_iBus_bmb_rsp_payload_fragment_data;
  wire                system_fabric_dBus_bmb_cmd_valid;
  wire                system_fabric_dBus_bmb_cmd_ready;
  wire                system_fabric_dBus_bmb_cmd_payload_last;
  wire       [3:0]    system_fabric_dBus_bmb_cmd_payload_fragment_source;
  wire       [0:0]    system_fabric_dBus_bmb_cmd_payload_fragment_opcode;
  wire       [31:0]   system_fabric_dBus_bmb_cmd_payload_fragment_address;
  wire       [5:0]    system_fabric_dBus_bmb_cmd_payload_fragment_length;
  wire       [63:0]   system_fabric_dBus_bmb_cmd_payload_fragment_data;
  wire       [7:0]    system_fabric_dBus_bmb_cmd_payload_fragment_mask;
  wire       [42:0]   system_fabric_dBus_bmb_cmd_payload_fragment_context;
  wire                system_fabric_dBus_bmb_rsp_valid;
  wire                system_fabric_dBus_bmb_rsp_ready;
  wire                system_fabric_dBus_bmb_rsp_payload_last;
  wire       [3:0]    system_fabric_dBus_bmb_rsp_payload_fragment_source;
  wire       [0:0]    system_fabric_dBus_bmb_rsp_payload_fragment_opcode;
  wire       [63:0]   system_fabric_dBus_bmb_rsp_payload_fragment_data;
  wire       [42:0]   system_fabric_dBus_bmb_rsp_payload_fragment_context;
  wire                system_fabric_iBus_bmb_cmd_m2sPipe_valid;
  wire                system_fabric_iBus_bmb_cmd_m2sPipe_ready;
  wire                system_fabric_iBus_bmb_cmd_m2sPipe_payload_last;
  wire       [0:0]    system_fabric_iBus_bmb_cmd_m2sPipe_payload_fragment_source;
  wire       [0:0]    system_fabric_iBus_bmb_cmd_m2sPipe_payload_fragment_opcode;
  wire       [31:0]   system_fabric_iBus_bmb_cmd_m2sPipe_payload_fragment_address;
  wire       [5:0]    system_fabric_iBus_bmb_cmd_m2sPipe_payload_fragment_length;
  reg                 system_fabric_iBus_bmb_cmd_m2sPipe_rValid;
  reg                 system_fabric_iBus_bmb_cmd_m2sPipe_rData_last;
  reg        [0:0]    system_fabric_iBus_bmb_cmd_m2sPipe_rData_fragment_source;
  reg        [0:0]    system_fabric_iBus_bmb_cmd_m2sPipe_rData_fragment_opcode;
  reg        [31:0]   system_fabric_iBus_bmb_cmd_m2sPipe_rData_fragment_address;
  reg        [5:0]    system_fabric_iBus_bmb_cmd_m2sPipe_rData_fragment_length;
  wire                system_dma_logic_io_read_cmd_halfPipe_valid;
  wire                system_dma_logic_io_read_cmd_halfPipe_ready;
  wire                system_dma_logic_io_read_cmd_halfPipe_payload_last;
  wire       [0:0]    system_dma_logic_io_read_cmd_halfPipe_payload_fragment_source;
  wire       [0:0]    system_dma_logic_io_read_cmd_halfPipe_payload_fragment_opcode;
  wire       [31:0]   system_dma_logic_io_read_cmd_halfPipe_payload_fragment_address;
  wire       [5:0]    system_dma_logic_io_read_cmd_halfPipe_payload_fragment_length;
  wire       [13:0]   system_dma_logic_io_read_cmd_halfPipe_payload_fragment_context;
  reg                 system_dma_logic_io_read_cmd_halfPipe_regs_valid;
  reg                 system_dma_logic_io_read_cmd_halfPipe_regs_ready;
  reg                 system_dma_logic_io_read_cmd_halfPipe_regs_payload_last;
  reg        [0:0]    system_dma_logic_io_read_cmd_halfPipe_regs_payload_fragment_source;
  reg        [0:0]    system_dma_logic_io_read_cmd_halfPipe_regs_payload_fragment_opcode;
  reg        [31:0]   system_dma_logic_io_read_cmd_halfPipe_regs_payload_fragment_address;
  reg        [5:0]    system_dma_logic_io_read_cmd_halfPipe_regs_payload_fragment_length;
  reg        [13:0]   system_dma_logic_io_read_cmd_halfPipe_regs_payload_fragment_context;
  wire       [15:0]   _zz_383;
  wire       [15:0]   _zz_384;

  assign _zz_448 = (debugCd_logic_holdingLogic_resetCounter != 12'hfff);
  assign _zz_449 = (vgaCd_logic_holdingLogic_resetCounter != 6'h3f);
  assign _zz_450 = (sdramCd_logic_holdingLogic_resetCounter != 6'h3f);
  assign _zz_451 = (systemCd_logic_holdingLogic_resetCounter != 6'h3f);
  assign _zz_452 = (! system_cores_0_logic_cpu_dBus_ack_payload_last);
  assign _zz_453 = (! system_cores_1_logic_cpu_dBus_ack_payload_last);
  assign _zz_454 = (system_plic_logic_bridge_coherencyStall_value != 1'b0);
  assign _zz_455 = (system_cores_0_logic_cpu_dBus_cmd_valid && _zz_40);
  assign _zz_456 = ((dBus_Bridge_withWriteBuffer_aggregationSel == 1'b0) && system_cores_0_logic_cpu_dBus_cmd_payload_mask[0]);
  assign _zz_457 = ((dBus_Bridge_withWriteBuffer_aggregationSel == 1'b0) && system_cores_0_logic_cpu_dBus_cmd_payload_mask[1]);
  assign _zz_458 = ((dBus_Bridge_withWriteBuffer_aggregationSel == 1'b0) && system_cores_0_logic_cpu_dBus_cmd_payload_mask[2]);
  assign _zz_459 = ((dBus_Bridge_withWriteBuffer_aggregationSel == 1'b0) && system_cores_0_logic_cpu_dBus_cmd_payload_mask[3]);
  assign _zz_460 = ((dBus_Bridge_withWriteBuffer_aggregationSel == 1'b1) && system_cores_0_logic_cpu_dBus_cmd_payload_mask[0]);
  assign _zz_461 = ((dBus_Bridge_withWriteBuffer_aggregationSel == 1'b1) && system_cores_0_logic_cpu_dBus_cmd_payload_mask[1]);
  assign _zz_462 = ((dBus_Bridge_withWriteBuffer_aggregationSel == 1'b1) && system_cores_0_logic_cpu_dBus_cmd_payload_mask[2]);
  assign _zz_463 = ((dBus_Bridge_withWriteBuffer_aggregationSel == 1'b1) && system_cores_0_logic_cpu_dBus_cmd_payload_mask[3]);
  assign _zz_464 = (system_cores_1_logic_cpu_dBus_cmd_valid && _zz_47);
  assign _zz_465 = ((dBus_Bridge_withWriteBuffer_aggregationSel_1 == 1'b0) && system_cores_1_logic_cpu_dBus_cmd_payload_mask[0]);
  assign _zz_466 = ((dBus_Bridge_withWriteBuffer_aggregationSel_1 == 1'b0) && system_cores_1_logic_cpu_dBus_cmd_payload_mask[1]);
  assign _zz_467 = ((dBus_Bridge_withWriteBuffer_aggregationSel_1 == 1'b0) && system_cores_1_logic_cpu_dBus_cmd_payload_mask[2]);
  assign _zz_468 = ((dBus_Bridge_withWriteBuffer_aggregationSel_1 == 1'b0) && system_cores_1_logic_cpu_dBus_cmd_payload_mask[3]);
  assign _zz_469 = ((dBus_Bridge_withWriteBuffer_aggregationSel_1 == 1'b1) && system_cores_1_logic_cpu_dBus_cmd_payload_mask[0]);
  assign _zz_470 = ((dBus_Bridge_withWriteBuffer_aggregationSel_1 == 1'b1) && system_cores_1_logic_cpu_dBus_cmd_payload_mask[1]);
  assign _zz_471 = ((dBus_Bridge_withWriteBuffer_aggregationSel_1 == 1'b1) && system_cores_1_logic_cpu_dBus_cmd_payload_mask[2]);
  assign _zz_472 = ((dBus_Bridge_withWriteBuffer_aggregationSel_1 == 1'b1) && system_cores_1_logic_cpu_dBus_cmd_payload_mask[3]);
  assign _zz_473 = (_zz_410 && (! system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_ready));
  assign _zz_474 = (_zz_81 && (! _zz_92));
  assign _zz_475 = (_zz_439 && (! system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_ready));
  assign _zz_476 = (! system_bmbPeripheral_bmb_cmd_halfPipe_regs_valid);
  assign _zz_477 = (! _zz_376);
  assign _zz_478 = (! system_dma_logic_io_read_cmd_halfPipe_regs_valid);
  assign _zz_479 = ({2'd0,system_cores_0_logic_cpu_dBus_cmd_payload_length} <<< 2);
  assign _zz_480 = 6'h0;
  assign _zz_481 = {26'd0, _zz_480};
  assign _zz_482 = ({2'd0,system_cores_1_logic_cpu_dBus_cmd_payload_length} <<< 2);
  assign _zz_483 = 6'h0;
  assign _zz_484 = {26'd0, _zz_483};
  assign _zz_485 = system_plic_logic_bmb_cmd_payload_fragment_data[1 : 1];
  assign _zz_486 = system_plic_logic_bmb_cmd_payload_fragment_data[3 : 3];
  assign _zz_487 = system_plic_logic_bmb_cmd_payload_fragment_data[12 : 12];
  assign _zz_488 = system_plic_logic_bmb_cmd_payload_fragment_data[13 : 13];
  assign _zz_489 = system_plic_logic_bmb_cmd_payload_fragment_data[4 : 4];
  assign _zz_490 = system_plic_logic_bmb_cmd_payload_fragment_data[5 : 5];
  assign _zz_491 = system_plic_logic_bmb_cmd_payload_fragment_data[6 : 6];
  assign _zz_492 = system_plic_logic_bmb_cmd_payload_fragment_data[7 : 7];
  assign _zz_493 = system_plic_logic_bmb_cmd_payload_fragment_data[1 : 1];
  assign _zz_494 = system_plic_logic_bmb_cmd_payload_fragment_data[3 : 3];
  assign _zz_495 = system_plic_logic_bmb_cmd_payload_fragment_data[12 : 12];
  assign _zz_496 = system_plic_logic_bmb_cmd_payload_fragment_data[13 : 13];
  assign _zz_497 = system_plic_logic_bmb_cmd_payload_fragment_data[4 : 4];
  assign _zz_498 = system_plic_logic_bmb_cmd_payload_fragment_data[5 : 5];
  assign _zz_499 = system_plic_logic_bmb_cmd_payload_fragment_data[6 : 6];
  assign _zz_500 = system_plic_logic_bmb_cmd_payload_fragment_data[7 : 7];
  assign _zz_501 = system_plic_logic_bmb_cmd_payload_fragment_data[1 : 1];
  assign _zz_502 = system_plic_logic_bmb_cmd_payload_fragment_data[3 : 3];
  assign _zz_503 = system_plic_logic_bmb_cmd_payload_fragment_data[12 : 12];
  assign _zz_504 = system_plic_logic_bmb_cmd_payload_fragment_data[13 : 13];
  assign _zz_505 = system_plic_logic_bmb_cmd_payload_fragment_data[4 : 4];
  assign _zz_506 = system_plic_logic_bmb_cmd_payload_fragment_data[5 : 5];
  assign _zz_507 = system_plic_logic_bmb_cmd_payload_fragment_data[6 : 6];
  assign _zz_508 = system_plic_logic_bmb_cmd_payload_fragment_data[7 : 7];
  assign _zz_509 = system_plic_logic_bmb_cmd_payload_fragment_data[1 : 1];
  assign _zz_510 = system_plic_logic_bmb_cmd_payload_fragment_data[3 : 3];
  assign _zz_511 = system_plic_logic_bmb_cmd_payload_fragment_data[12 : 12];
  assign _zz_512 = system_plic_logic_bmb_cmd_payload_fragment_data[13 : 13];
  assign _zz_513 = system_plic_logic_bmb_cmd_payload_fragment_data[4 : 4];
  assign _zz_514 = system_plic_logic_bmb_cmd_payload_fragment_data[5 : 5];
  assign _zz_515 = system_plic_logic_bmb_cmd_payload_fragment_data[6 : 6];
  assign _zz_516 = system_plic_logic_bmb_cmd_payload_fragment_data[7 : 7];
  assign _zz_517 = sdramDomain_phyA_logic_ctrl_cmd_payload_fragment_data[15 : 0];
  assign _zz_518 = _zz_383[0 : 0];
  assign _zz_519 = _zz_383[1 : 1];
  assign _zz_520 = _zz_383[2 : 2];
  assign _zz_521 = _zz_383[3 : 3];
  assign _zz_522 = _zz_383[4 : 4];
  assign _zz_523 = _zz_383[5 : 5];
  assign _zz_524 = _zz_383[6 : 6];
  assign _zz_525 = _zz_383[7 : 7];
  assign _zz_526 = _zz_383[8 : 8];
  assign _zz_527 = _zz_383[9 : 9];
  assign _zz_528 = _zz_383[10 : 10];
  assign _zz_529 = _zz_383[11 : 11];
  assign _zz_530 = _zz_383[12 : 12];
  assign _zz_531 = _zz_383[13 : 13];
  assign _zz_532 = _zz_383[14 : 14];
  assign _zz_533 = _zz_383[15 : 15];
  assign _zz_534 = sdramDomain_phyA_logic_ctrl_cmd_payload_fragment_data[15 : 0];
  assign _zz_535 = _zz_384[0 : 0];
  assign _zz_536 = _zz_384[1 : 1];
  assign _zz_537 = _zz_384[2 : 2];
  assign _zz_538 = _zz_384[3 : 3];
  assign _zz_539 = _zz_384[4 : 4];
  assign _zz_540 = _zz_384[5 : 5];
  assign _zz_541 = _zz_384[6 : 6];
  assign _zz_542 = _zz_384[7 : 7];
  assign _zz_543 = _zz_384[8 : 8];
  assign _zz_544 = _zz_384[9 : 9];
  assign _zz_545 = _zz_384[10 : 10];
  assign _zz_546 = _zz_384[11 : 11];
  assign _zz_547 = _zz_384[12 : 12];
  assign _zz_548 = _zz_384[13 : 13];
  assign _zz_549 = _zz_384[14 : 14];
  assign _zz_550 = _zz_384[15 : 15];
  MMCME2_ADV #(
    .CLKIN1_PERIOD(10.0),
    .CLKFBOUT_MULT_F(12),
    .CLKOUT0_DIVIDE_F(12),
    .CLKOUT0_PHASE(0),
    .CLKOUT1_DIVIDE(8),
    .CLKOUT1_PHASE(0),
    .CLKOUT2_DIVIDE(8),
    .CLKOUT2_PHASE(45),
    .CLKOUT3_DIVIDE(4),
    .CLKOUT3_PHASE(0),
    .CLKOUT4_DIVIDE(4),
    .CLKOUT4_PHASE(90),
    .CLKOUT5_DIVIDE(24),
    .CLKOUT5_PHASE(0),
    .CLKOUT6_DIVIDE(30),
    .CLKOUT6_PHASE(0) 
  ) clocking_pll (
    .CLKIN1      (clocking_GCLK100       ), //i
    .CLKFBIN     (clocking_pll_CLKFBOUT  ), //i
    .CLKFBOUT    (clocking_pll_CLKFBOUT  ), //o
    .CLKOUT0     (clocking_pll_CLKOUT0   ), //o
    .CLKOUT1     (clocking_pll_CLKOUT1   ), //o
    .CLKOUT2     (clocking_pll_CLKOUT2   ), //o
    .CLKOUT3     (clocking_pll_CLKOUT3   ), //o
    .CLKOUT4     (clocking_pll_CLKOUT4   ), //o
    .CLKOUT5     (clocking_pll_CLKOUT5   ), //o
    .CLKOUT6     (clocking_pll_CLKOUT6   )  //o
  );
  Bscane2BmbMaster debug_logic (
    .io_bmb_cmd_valid                       (debug_logic_io_bmb_cmd_valid                                 ), //o
    .io_bmb_cmd_ready                       (debug_bmb_connector_decoder_cmd_ready                        ), //i
    .io_bmb_cmd_payload_last                (debug_logic_io_bmb_cmd_payload_last                          ), //o
    .io_bmb_cmd_payload_fragment_opcode     (debug_logic_io_bmb_cmd_payload_fragment_opcode               ), //o
    .io_bmb_cmd_payload_fragment_address    (debug_logic_io_bmb_cmd_payload_fragment_address[31:0]        ), //o
    .io_bmb_cmd_payload_fragment_length     (debug_logic_io_bmb_cmd_payload_fragment_length[1:0]          ), //o
    .io_bmb_cmd_payload_fragment_data       (debug_logic_io_bmb_cmd_payload_fragment_data[31:0]           ), //o
    .io_bmb_cmd_payload_fragment_mask       (debug_logic_io_bmb_cmd_payload_fragment_mask[3:0]            ), //o
    .io_bmb_rsp_valid                       (debug_bmb_connector_decoder_rsp_valid                        ), //i
    .io_bmb_rsp_ready                       (debug_logic_io_bmb_rsp_ready                                 ), //o
    .io_bmb_rsp_payload_last                (debug_bmb_connector_decoder_rsp_payload_last                 ), //i
    .io_bmb_rsp_payload_fragment_opcode     (debug_bmb_connector_decoder_rsp_payload_fragment_opcode      ), //i
    .io_bmb_rsp_payload_fragment_data       (debug_bmb_connector_decoder_rsp_payload_fragment_data[31:0]  ), //i
    .CLKOUT0                                (clocking_pll_CLKOUT0                                         ), //i
    .debugCd_logic_outputReset              (debugCd_logic_outputReset                                    )  //i
  );
  BufferCC_28 bufferCC_33 (
    .io_dataIn                    (_zz_385                    ), //i
    .io_dataOut                   (bufferCC_33_io_dataOut     ), //o
    .CLKOUT6                      (clocking_pll_CLKOUT6       ), //i
    .debugCd_logic_outputReset    (debugCd_logic_outputReset  )  //i
  );
  BufferCC_29 bufferCC_34 (
    .io_dataIn                    (_zz_386                    ), //i
    .io_dataOut                   (bufferCC_34_io_dataOut     ), //o
    .CLKOUT1                      (clocking_pll_CLKOUT1       ), //i
    .debugCd_logic_outputReset    (debugCd_logic_outputReset  )  //i
  );
  BufferCC_30 bufferCC_35 (
    .io_dataIn                    (_zz_387                    ), //i
    .io_dataOut                   (bufferCC_35_io_dataOut     ), //o
    .CLKOUT0                      (clocking_pll_CLKOUT0       ), //i
    .sdramCd_logic_outputReset    (sdramCd_logic_outputReset  )  //i
  );
  VexRiscv system_cores_0_logic_cpu (
    .dBus_cmd_valid                       (system_cores_0_logic_cpu_dBus_cmd_valid                                ), //o
    .dBus_cmd_ready                       (_zz_40                                                                 ), //i
    .dBus_cmd_payload_wr                  (system_cores_0_logic_cpu_dBus_cmd_payload_wr                           ), //o
    .dBus_cmd_payload_uncached            (system_cores_0_logic_cpu_dBus_cmd_payload_uncached                     ), //o
    .dBus_cmd_payload_address             (system_cores_0_logic_cpu_dBus_cmd_payload_address[31:0]                ), //o
    .dBus_cmd_payload_data                (system_cores_0_logic_cpu_dBus_cmd_payload_data[31:0]                   ), //o
    .dBus_cmd_payload_mask                (system_cores_0_logic_cpu_dBus_cmd_payload_mask[3:0]                    ), //o
    .dBus_cmd_payload_length              (system_cores_0_logic_cpu_dBus_cmd_payload_length[3:0]                  ), //o
    .dBus_cmd_payload_exclusive           (system_cores_0_logic_cpu_dBus_cmd_payload_exclusive                    ), //o
    .dBus_cmd_payload_last                (system_cores_0_logic_cpu_dBus_cmd_payload_last                         ), //o
    .dBus_rsp_valid                       (dBus_Bridge_bus_rsp_valid                                              ), //i
    .dBus_rsp_payload_aggregated          (dBus_Bridge_withWriteBuffer_rspCtx_rspCount[2:0]                       ), //i
    .dBus_rsp_payload_last                (dBus_Bridge_bus_rsp_payload_last                                       ), //i
    .dBus_rsp_payload_data                (dBus_Bridge_bus_rsp_payload_fragment_data[63:0]                        ), //i
    .dBus_rsp_payload_error               (_zz_388                                                                ), //i
    .dBus_rsp_payload_exclusive           (dBus_Bridge_bus_rsp_payload_fragment_exclusive                         ), //i
    .dBus_inv_valid                       (dBus_Bridge_bus_inv_valid                                              ), //i
    .dBus_inv_ready                       (system_cores_0_logic_cpu_dBus_inv_ready                                ), //o
    .dBus_inv_payload_last                (_zz_389                                                                ), //i
    .dBus_inv_payload_fragment_enable     (dBus_Bridge_bus_inv_payload_all                                        ), //i
    .dBus_inv_payload_fragment_address    (_zz_390[31:0]                                                          ), //i
    .dBus_ack_valid                       (system_cores_0_logic_cpu_dBus_ack_valid                                ), //o
    .dBus_ack_ready                       (_zz_391                                                                ), //i
    .dBus_ack_payload_last                (system_cores_0_logic_cpu_dBus_ack_payload_last                         ), //o
    .dBus_ack_payload_fragment_hit        (system_cores_0_logic_cpu_dBus_ack_payload_fragment_hit                 ), //o
    .dBus_sync_valid                      (dBus_Bridge_bus_sync_valid                                             ), //i
    .dBus_sync_ready                      (system_cores_0_logic_cpu_dBus_sync_ready                               ), //o
    .dBus_sync_payload_aggregated         (dBus_Bridge_withWriteBuffer_syncLogic_cmdCtx_fifo_io_pop_payload[2:0]  ), //i
    .timerInterrupt                       (_zz_392                                                                ), //i
    .externalInterrupt                    (system_cores_0_externalInterrupt_plic_target_iep                       ), //i
    .softwareInterrupt                    (_zz_393                                                                ), //i
    .externalInterruptS                   (system_cores_0_externalSupervisorInterrupt_plic_target_iep             ), //i
    .utime                                (system_clint_logic_io_time[63:0]                                       ), //i
    .debug_bus_cmd_valid                  (system_cores_0_debugBmb_cmd_valid                                      ), //i
    .debug_bus_cmd_ready                  (system_cores_0_logic_cpu_debug_bus_cmd_ready                           ), //o
    .debug_bus_cmd_payload_wr             (_zz_394                                                                ), //i
    .debug_bus_cmd_payload_address        (system_cores_0_debugBmb_cmd_payload_fragment_address[7:0]              ), //i
    .debug_bus_cmd_payload_data           (system_cores_0_debugBmb_cmd_payload_fragment_data[31:0]                ), //i
    .debug_bus_rsp_data                   (system_cores_0_logic_cpu_debug_bus_rsp_data[31:0]                      ), //o
    .debug_resetOut                       (system_cores_0_logic_cpu_debug_resetOut                                ), //o
    .iBus_cmd_valid                       (system_cores_0_logic_cpu_iBus_cmd_valid                                ), //o
    .iBus_cmd_ready                       (system_cores_0_iBus_cmd_ready                                          ), //i
    .iBus_cmd_payload_address             (system_cores_0_logic_cpu_iBus_cmd_payload_address[31:0]                ), //o
    .iBus_cmd_payload_size                (system_cores_0_logic_cpu_iBus_cmd_payload_size[2:0]                    ), //o
    .iBus_rsp_valid                       (system_cores_0_iBus_rsp_valid                                          ), //i
    .iBus_rsp_payload_data                (system_cores_0_iBus_rsp_payload_fragment_data[63:0]                    ), //i
    .iBus_rsp_payload_error               (_zz_395                                                                ), //i
    .CLKOUT0                              (clocking_pll_CLKOUT0                                                   ), //i
    .systemCd_logic_outputReset           (systemCd_logic_outputReset                                             ), //i
    .debugCd_logic_outputReset            (debugCd_logic_outputReset                                              )  //i
  );
  StreamFifoLowLatency_3 dBus_Bridge_withWriteBuffer_syncLogic_cmdCtx_fifo (
    .io_push_valid                 (dBus_Bridge_withWriteBuffer_syncLogic_cmdCtx_valid                     ), //i
    .io_push_ready                 (dBus_Bridge_withWriteBuffer_syncLogic_cmdCtx_fifo_io_push_ready        ), //o
    .io_push_payload               (dBus_Bridge_withWriteBuffer_syncLogic_cmdCtx_payload[2:0]              ), //i
    .io_pop_valid                  (dBus_Bridge_withWriteBuffer_syncLogic_cmdCtx_fifo_io_pop_valid         ), //o
    .io_pop_ready                  (_zz_396                                                                ), //i
    .io_pop_payload                (dBus_Bridge_withWriteBuffer_syncLogic_cmdCtx_fifo_io_pop_payload[2:0]  ), //o
    .io_flush                      (_zz_397                                                                ), //i
    .io_occupancy                  (dBus_Bridge_withWriteBuffer_syncLogic_cmdCtx_fifo_io_occupancy[4:0]    ), //o
    .CLKOUT0                       (clocking_pll_CLKOUT0                                                   ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset                                             )  //i
  );
  VexRiscv_1 system_cores_1_logic_cpu (
    .dBus_cmd_valid                       (system_cores_1_logic_cpu_dBus_cmd_valid                                  ), //o
    .dBus_cmd_ready                       (_zz_47                                                                   ), //i
    .dBus_cmd_payload_wr                  (system_cores_1_logic_cpu_dBus_cmd_payload_wr                             ), //o
    .dBus_cmd_payload_uncached            (system_cores_1_logic_cpu_dBus_cmd_payload_uncached                       ), //o
    .dBus_cmd_payload_address             (system_cores_1_logic_cpu_dBus_cmd_payload_address[31:0]                  ), //o
    .dBus_cmd_payload_data                (system_cores_1_logic_cpu_dBus_cmd_payload_data[31:0]                     ), //o
    .dBus_cmd_payload_mask                (system_cores_1_logic_cpu_dBus_cmd_payload_mask[3:0]                      ), //o
    .dBus_cmd_payload_length              (system_cores_1_logic_cpu_dBus_cmd_payload_length[3:0]                    ), //o
    .dBus_cmd_payload_exclusive           (system_cores_1_logic_cpu_dBus_cmd_payload_exclusive                      ), //o
    .dBus_cmd_payload_last                (system_cores_1_logic_cpu_dBus_cmd_payload_last                           ), //o
    .dBus_rsp_valid                       (dBus_Bridge_bus_rsp_valid_1                                              ), //i
    .dBus_rsp_payload_aggregated          (dBus_Bridge_withWriteBuffer_rspCtx_rspCount_1[2:0]                       ), //i
    .dBus_rsp_payload_last                (dBus_Bridge_bus_rsp_payload_last_1                                       ), //i
    .dBus_rsp_payload_data                (dBus_Bridge_bus_rsp_payload_fragment_data_1[63:0]                        ), //i
    .dBus_rsp_payload_error               (_zz_398                                                                  ), //i
    .dBus_rsp_payload_exclusive           (dBus_Bridge_bus_rsp_payload_fragment_exclusive_1                         ), //i
    .dBus_inv_valid                       (dBus_Bridge_bus_inv_valid_1                                              ), //i
    .dBus_inv_ready                       (system_cores_1_logic_cpu_dBus_inv_ready                                  ), //o
    .dBus_inv_payload_last                (_zz_399                                                                  ), //i
    .dBus_inv_payload_fragment_enable     (dBus_Bridge_bus_inv_payload_all_1                                        ), //i
    .dBus_inv_payload_fragment_address    (_zz_400[31:0]                                                            ), //i
    .dBus_ack_valid                       (system_cores_1_logic_cpu_dBus_ack_valid                                  ), //o
    .dBus_ack_ready                       (_zz_401                                                                  ), //i
    .dBus_ack_payload_last                (system_cores_1_logic_cpu_dBus_ack_payload_last                           ), //o
    .dBus_ack_payload_fragment_hit        (system_cores_1_logic_cpu_dBus_ack_payload_fragment_hit                   ), //o
    .dBus_sync_valid                      (dBus_Bridge_bus_sync_valid_1                                             ), //i
    .dBus_sync_ready                      (system_cores_1_logic_cpu_dBus_sync_ready                                 ), //o
    .dBus_sync_payload_aggregated         (dBus_Bridge_withWriteBuffer_syncLogic_cmdCtx_fifo_1_io_pop_payload[2:0]  ), //i
    .timerInterrupt                       (_zz_402                                                                  ), //i
    .externalInterrupt                    (system_cores_1_externalInterrupt_plic_target_iep                         ), //i
    .softwareInterrupt                    (_zz_403                                                                  ), //i
    .externalInterruptS                   (system_cores_1_externalSupervisorInterrupt_plic_target_iep               ), //i
    .utime                                (system_clint_logic_io_time[63:0]                                         ), //i
    .debug_bus_cmd_valid                  (system_cores_1_debugBmb_cmd_valid                                        ), //i
    .debug_bus_cmd_ready                  (system_cores_1_logic_cpu_debug_bus_cmd_ready                             ), //o
    .debug_bus_cmd_payload_wr             (_zz_404                                                                  ), //i
    .debug_bus_cmd_payload_address        (system_cores_1_debugBmb_cmd_payload_fragment_address[7:0]                ), //i
    .debug_bus_cmd_payload_data           (system_cores_1_debugBmb_cmd_payload_fragment_data[31:0]                  ), //i
    .debug_bus_rsp_data                   (system_cores_1_logic_cpu_debug_bus_rsp_data[31:0]                        ), //o
    .debug_resetOut                       (system_cores_1_logic_cpu_debug_resetOut                                  ), //o
    .iBus_cmd_valid                       (system_cores_1_logic_cpu_iBus_cmd_valid                                  ), //o
    .iBus_cmd_ready                       (system_cores_1_iBus_cmd_ready                                            ), //i
    .iBus_cmd_payload_address             (system_cores_1_logic_cpu_iBus_cmd_payload_address[31:0]                  ), //o
    .iBus_cmd_payload_size                (system_cores_1_logic_cpu_iBus_cmd_payload_size[2:0]                      ), //o
    .iBus_rsp_valid                       (system_cores_1_iBus_rsp_valid                                            ), //i
    .iBus_rsp_payload_data                (system_cores_1_iBus_rsp_payload_fragment_data[63:0]                      ), //i
    .iBus_rsp_payload_error               (_zz_405                                                                  ), //i
    .CLKOUT0                              (clocking_pll_CLKOUT0                                                     ), //i
    .systemCd_logic_outputReset           (systemCd_logic_outputReset                                               ), //i
    .debugCd_logic_outputReset            (debugCd_logic_outputReset                                                )  //i
  );
  StreamFifoLowLatency_3 dBus_Bridge_withWriteBuffer_syncLogic_cmdCtx_fifo_1 (
    .io_push_valid                 (dBus_Bridge_withWriteBuffer_syncLogic_cmdCtx_valid_1                     ), //i
    .io_push_ready                 (dBus_Bridge_withWriteBuffer_syncLogic_cmdCtx_fifo_1_io_push_ready        ), //o
    .io_push_payload               (dBus_Bridge_withWriteBuffer_syncLogic_cmdCtx_payload_1[2:0]              ), //i
    .io_pop_valid                  (dBus_Bridge_withWriteBuffer_syncLogic_cmdCtx_fifo_1_io_pop_valid         ), //o
    .io_pop_ready                  (_zz_406                                                                  ), //i
    .io_pop_payload                (dBus_Bridge_withWriteBuffer_syncLogic_cmdCtx_fifo_1_io_pop_payload[2:0]  ), //o
    .io_flush                      (_zz_407                                                                  ), //i
    .io_occupancy                  (dBus_Bridge_withWriteBuffer_syncLogic_cmdCtx_fifo_1_io_occupancy[4:0]    ), //o
    .CLKOUT0                       (clocking_pll_CLKOUT0                                                     ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset                                               )  //i
  );
  BufferCC_31 bufferCC_36 (
    .io_dataIn                    (_zz_408                    ), //i
    .io_dataOut                   (bufferCC_36_io_dataOut     ), //o
    .CLKOUT1                      (clocking_pll_CLKOUT1       ), //i
    .system_cores_0_debugReset    (system_cores_0_debugReset  )  //i
  );
  BufferCC_32 bufferCC_37 (
    .io_dataIn                    (_zz_409                    ), //i
    .io_dataOut                   (bufferCC_37_io_dataOut     ), //o
    .CLKOUT1                      (clocking_pll_CLKOUT1       ), //i
    .system_cores_1_debugReset    (system_cores_1_debugReset  )  //i
  );
  BmbDecoder bmbDecoder_7 (
    .io_input_cmd_valid                           (debug_bmb_connector_decoder_cmd_valid                           ), //i
    .io_input_cmd_ready                           (bmbDecoder_7_io_input_cmd_ready                                 ), //o
    .io_input_cmd_payload_last                    (debug_bmb_connector_decoder_cmd_payload_last                    ), //i
    .io_input_cmd_payload_fragment_opcode         (debug_bmb_connector_decoder_cmd_payload_fragment_opcode         ), //i
    .io_input_cmd_payload_fragment_address        (debug_bmb_connector_decoder_cmd_payload_fragment_address[31:0]  ), //i
    .io_input_cmd_payload_fragment_length         (debug_bmb_connector_decoder_cmd_payload_fragment_length[1:0]    ), //i
    .io_input_cmd_payload_fragment_data           (debug_bmb_connector_decoder_cmd_payload_fragment_data[31:0]     ), //i
    .io_input_cmd_payload_fragment_mask           (debug_bmb_connector_decoder_cmd_payload_fragment_mask[3:0]      ), //i
    .io_input_rsp_valid                           (bmbDecoder_7_io_input_rsp_valid                                 ), //o
    .io_input_rsp_ready                           (debug_bmb_connector_decoder_rsp_ready                           ), //i
    .io_input_rsp_payload_last                    (bmbDecoder_7_io_input_rsp_payload_last                          ), //o
    .io_input_rsp_payload_fragment_opcode         (bmbDecoder_7_io_input_rsp_payload_fragment_opcode               ), //o
    .io_input_rsp_payload_fragment_data           (bmbDecoder_7_io_input_rsp_payload_fragment_data[31:0]           ), //o
    .io_outputs_0_cmd_valid                       (bmbDecoder_7_io_outputs_0_cmd_valid                             ), //o
    .io_outputs_0_cmd_ready                       (system_cores_0_debugBmb_cmd_ready                               ), //i
    .io_outputs_0_cmd_payload_last                (bmbDecoder_7_io_outputs_0_cmd_payload_last                      ), //o
    .io_outputs_0_cmd_payload_fragment_opcode     (bmbDecoder_7_io_outputs_0_cmd_payload_fragment_opcode           ), //o
    .io_outputs_0_cmd_payload_fragment_address    (bmbDecoder_7_io_outputs_0_cmd_payload_fragment_address[31:0]    ), //o
    .io_outputs_0_cmd_payload_fragment_length     (bmbDecoder_7_io_outputs_0_cmd_payload_fragment_length[1:0]      ), //o
    .io_outputs_0_cmd_payload_fragment_data       (bmbDecoder_7_io_outputs_0_cmd_payload_fragment_data[31:0]       ), //o
    .io_outputs_0_cmd_payload_fragment_mask       (bmbDecoder_7_io_outputs_0_cmd_payload_fragment_mask[3:0]        ), //o
    .io_outputs_0_rsp_valid                       (system_cores_0_debugBmb_rsp_valid                               ), //i
    .io_outputs_0_rsp_ready                       (bmbDecoder_7_io_outputs_0_rsp_ready                             ), //o
    .io_outputs_0_rsp_payload_last                (system_cores_0_debugBmb_rsp_payload_last                        ), //i
    .io_outputs_0_rsp_payload_fragment_opcode     (system_cores_0_debugBmb_rsp_payload_fragment_opcode             ), //i
    .io_outputs_0_rsp_payload_fragment_data       (system_cores_0_debugBmb_rsp_payload_fragment_data[31:0]         ), //i
    .io_outputs_1_cmd_valid                       (bmbDecoder_7_io_outputs_1_cmd_valid                             ), //o
    .io_outputs_1_cmd_ready                       (system_cores_1_debugBmb_cmd_ready                               ), //i
    .io_outputs_1_cmd_payload_last                (bmbDecoder_7_io_outputs_1_cmd_payload_last                      ), //o
    .io_outputs_1_cmd_payload_fragment_opcode     (bmbDecoder_7_io_outputs_1_cmd_payload_fragment_opcode           ), //o
    .io_outputs_1_cmd_payload_fragment_address    (bmbDecoder_7_io_outputs_1_cmd_payload_fragment_address[31:0]    ), //o
    .io_outputs_1_cmd_payload_fragment_length     (bmbDecoder_7_io_outputs_1_cmd_payload_fragment_length[1:0]      ), //o
    .io_outputs_1_cmd_payload_fragment_data       (bmbDecoder_7_io_outputs_1_cmd_payload_fragment_data[31:0]       ), //o
    .io_outputs_1_cmd_payload_fragment_mask       (bmbDecoder_7_io_outputs_1_cmd_payload_fragment_mask[3:0]        ), //o
    .io_outputs_1_rsp_valid                       (system_cores_1_debugBmb_rsp_valid                               ), //i
    .io_outputs_1_rsp_ready                       (bmbDecoder_7_io_outputs_1_rsp_ready                             ), //o
    .io_outputs_1_rsp_payload_last                (system_cores_1_debugBmb_rsp_payload_last                        ), //i
    .io_outputs_1_rsp_payload_fragment_opcode     (system_cores_1_debugBmb_rsp_payload_fragment_opcode             ), //i
    .io_outputs_1_rsp_payload_fragment_data       (system_cores_1_debugBmb_rsp_payload_fragment_data[31:0]         ), //i
    .CLKOUT0                                      (clocking_pll_CLKOUT0                                            ), //i
    .debugCd_logic_outputReset                    (debugCd_logic_outputReset                                       )  //i
  );
  BmbInvalidateMonitor system_fabric_invalidationMonitor_logic (
    .io_input_cmd_valid                        (system_fabric_exclusiveMonitor_output_connector_decoder_cmd_valid                           ), //i
    .io_input_cmd_ready                        (system_fabric_invalidationMonitor_logic_io_input_cmd_ready                                  ), //o
    .io_input_cmd_payload_last                 (system_fabric_exclusiveMonitor_output_connector_decoder_cmd_payload_last                    ), //i
    .io_input_cmd_payload_fragment_source      (system_fabric_exclusiveMonitor_output_connector_decoder_cmd_payload_fragment_source[1:0]    ), //i
    .io_input_cmd_payload_fragment_opcode      (system_fabric_exclusiveMonitor_output_connector_decoder_cmd_payload_fragment_opcode         ), //i
    .io_input_cmd_payload_fragment_address     (system_fabric_exclusiveMonitor_output_connector_decoder_cmd_payload_fragment_address[31:0]  ), //i
    .io_input_cmd_payload_fragment_length      (system_fabric_exclusiveMonitor_output_connector_decoder_cmd_payload_fragment_length[5:0]    ), //i
    .io_input_cmd_payload_fragment_data        (system_fabric_exclusiveMonitor_output_connector_decoder_cmd_payload_fragment_data[63:0]     ), //i
    .io_input_cmd_payload_fragment_mask        (system_fabric_exclusiveMonitor_output_connector_decoder_cmd_payload_fragment_mask[7:0]      ), //i
    .io_input_cmd_payload_fragment_context     (system_fabric_exclusiveMonitor_output_connector_decoder_cmd_payload_fragment_context[3:0]   ), //i
    .io_input_rsp_valid                        (system_fabric_invalidationMonitor_logic_io_input_rsp_valid                                  ), //o
    .io_input_rsp_ready                        (system_fabric_exclusiveMonitor_output_connector_decoder_rsp_ready                           ), //i
    .io_input_rsp_payload_last                 (system_fabric_invalidationMonitor_logic_io_input_rsp_payload_last                           ), //o
    .io_input_rsp_payload_fragment_source      (system_fabric_invalidationMonitor_logic_io_input_rsp_payload_fragment_source[1:0]           ), //o
    .io_input_rsp_payload_fragment_opcode      (system_fabric_invalidationMonitor_logic_io_input_rsp_payload_fragment_opcode                ), //o
    .io_input_rsp_payload_fragment_data        (system_fabric_invalidationMonitor_logic_io_input_rsp_payload_fragment_data[63:0]            ), //o
    .io_input_rsp_payload_fragment_context     (system_fabric_invalidationMonitor_logic_io_input_rsp_payload_fragment_context[3:0]          ), //o
    .io_input_inv_valid                        (system_fabric_invalidationMonitor_logic_io_input_inv_valid                                  ), //o
    .io_input_inv_ready                        (system_fabric_exclusiveMonitor_output_connector_decoder_inv_ready                           ), //i
    .io_input_inv_payload_all                  (system_fabric_invalidationMonitor_logic_io_input_inv_payload_all                            ), //o
    .io_input_inv_payload_address              (system_fabric_invalidationMonitor_logic_io_input_inv_payload_address[31:0]                  ), //o
    .io_input_inv_payload_length               (system_fabric_invalidationMonitor_logic_io_input_inv_payload_length[5:0]                    ), //o
    .io_input_inv_payload_source               (system_fabric_invalidationMonitor_logic_io_input_inv_payload_source[1:0]                    ), //o
    .io_input_ack_valid                        (system_fabric_exclusiveMonitor_output_connector_decoder_ack_valid                           ), //i
    .io_input_ack_ready                        (system_fabric_invalidationMonitor_logic_io_input_ack_ready                                  ), //o
    .io_input_sync_valid                       (system_fabric_invalidationMonitor_logic_io_input_sync_valid                                 ), //o
    .io_input_sync_ready                       (system_fabric_exclusiveMonitor_output_connector_decoder_sync_ready                          ), //i
    .io_input_sync_payload_source              (system_fabric_invalidationMonitor_logic_io_input_sync_payload_source[1:0]                   ), //o
    .io_output_cmd_valid                       (system_fabric_invalidationMonitor_logic_io_output_cmd_valid                                 ), //o
    .io_output_cmd_ready                       (_zz_410                                                                                     ), //i
    .io_output_cmd_payload_last                (system_fabric_invalidationMonitor_logic_io_output_cmd_payload_last                          ), //o
    .io_output_cmd_payload_fragment_source     (system_fabric_invalidationMonitor_logic_io_output_cmd_payload_fragment_source[1:0]          ), //o
    .io_output_cmd_payload_fragment_opcode     (system_fabric_invalidationMonitor_logic_io_output_cmd_payload_fragment_opcode               ), //o
    .io_output_cmd_payload_fragment_address    (system_fabric_invalidationMonitor_logic_io_output_cmd_payload_fragment_address[31:0]        ), //o
    .io_output_cmd_payload_fragment_length     (system_fabric_invalidationMonitor_logic_io_output_cmd_payload_fragment_length[5:0]          ), //o
    .io_output_cmd_payload_fragment_data       (system_fabric_invalidationMonitor_logic_io_output_cmd_payload_fragment_data[63:0]           ), //o
    .io_output_cmd_payload_fragment_mask       (system_fabric_invalidationMonitor_logic_io_output_cmd_payload_fragment_mask[7:0]            ), //o
    .io_output_cmd_payload_fragment_context    (system_fabric_invalidationMonitor_logic_io_output_cmd_payload_fragment_context[42:0]        ), //o
    .io_output_rsp_valid                       (_zz_73                                                                                      ), //i
    .io_output_rsp_ready                       (system_fabric_invalidationMonitor_logic_io_output_rsp_ready                                 ), //o
    .io_output_rsp_payload_last                (_zz_75                                                                                      ), //i
    .io_output_rsp_payload_fragment_source     (_zz_76[1:0]                                                                                 ), //i
    .io_output_rsp_payload_fragment_opcode     (_zz_77                                                                                      ), //i
    .io_output_rsp_payload_fragment_data       (_zz_78[63:0]                                                                                ), //i
    .io_output_rsp_payload_fragment_context    (_zz_79[42:0]                                                                                ), //i
    .CLKOUT0                                   (clocking_pll_CLKOUT0                                                                        ), //i
    .systemCd_logic_outputReset                (systemCd_logic_outputReset                                                                  )  //i
  );
  BmbExclusiveMonitor system_fabric_exclusiveMonitor_logic (
    .io_input_cmd_valid                         (_zz_103                                                                                    ), //i
    .io_input_cmd_ready                         (system_fabric_exclusiveMonitor_logic_io_input_cmd_ready                                    ), //o
    .io_input_cmd_payload_last                  (_zz_105                                                                                    ), //i
    .io_input_cmd_payload_fragment_source       (_zz_106[1:0]                                                                               ), //i
    .io_input_cmd_payload_fragment_opcode       (_zz_107                                                                                    ), //i
    .io_input_cmd_payload_fragment_exclusive    (_zz_108                                                                                    ), //i
    .io_input_cmd_payload_fragment_address      (_zz_109[31:0]                                                                              ), //i
    .io_input_cmd_payload_fragment_length       (_zz_110[5:0]                                                                               ), //i
    .io_input_cmd_payload_fragment_data         (_zz_111[63:0]                                                                              ), //i
    .io_input_cmd_payload_fragment_mask         (_zz_112[7:0]                                                                               ), //i
    .io_input_cmd_payload_fragment_context      (_zz_113[2:0]                                                                               ), //i
    .io_input_rsp_valid                         (system_fabric_exclusiveMonitor_logic_io_input_rsp_valid                                    ), //o
    .io_input_rsp_ready                         (_zz_91                                                                                     ), //i
    .io_input_rsp_payload_last                  (system_fabric_exclusiveMonitor_logic_io_input_rsp_payload_last                             ), //o
    .io_input_rsp_payload_fragment_source       (system_fabric_exclusiveMonitor_logic_io_input_rsp_payload_fragment_source[1:0]             ), //o
    .io_input_rsp_payload_fragment_opcode       (system_fabric_exclusiveMonitor_logic_io_input_rsp_payload_fragment_opcode                  ), //o
    .io_input_rsp_payload_fragment_exclusive    (system_fabric_exclusiveMonitor_logic_io_input_rsp_payload_fragment_exclusive               ), //o
    .io_input_rsp_payload_fragment_data         (system_fabric_exclusiveMonitor_logic_io_input_rsp_payload_fragment_data[63:0]              ), //o
    .io_input_rsp_payload_fragment_context      (system_fabric_exclusiveMonitor_logic_io_input_rsp_payload_fragment_context[2:0]            ), //o
    .io_input_inv_valid                         (system_fabric_exclusiveMonitor_logic_io_input_inv_valid                                    ), //o
    .io_input_inv_ready                         (system_fabric_dBusCoherent_bmb_connector_decoder_inv_ready                                 ), //i
    .io_input_inv_payload_all                   (system_fabric_exclusiveMonitor_logic_io_input_inv_payload_all                              ), //o
    .io_input_inv_payload_address               (system_fabric_exclusiveMonitor_logic_io_input_inv_payload_address[31:0]                    ), //o
    .io_input_inv_payload_length                (system_fabric_exclusiveMonitor_logic_io_input_inv_payload_length[5:0]                      ), //o
    .io_input_inv_payload_source                (system_fabric_exclusiveMonitor_logic_io_input_inv_payload_source[1:0]                      ), //o
    .io_input_ack_valid                         (system_fabric_dBusCoherent_bmb_connector_decoder_ack_valid                                 ), //i
    .io_input_ack_ready                         (system_fabric_exclusiveMonitor_logic_io_input_ack_ready                                    ), //o
    .io_input_sync_valid                        (system_fabric_exclusiveMonitor_logic_io_input_sync_valid                                   ), //o
    .io_input_sync_ready                        (system_fabric_dBusCoherent_bmb_connector_decoder_sync_ready                                ), //i
    .io_input_sync_payload_source               (system_fabric_exclusiveMonitor_logic_io_input_sync_payload_source[1:0]                     ), //o
    .io_output_cmd_valid                        (system_fabric_exclusiveMonitor_logic_io_output_cmd_valid                                   ), //o
    .io_output_cmd_ready                        (system_fabric_exclusiveMonitor_output_connector_decoder_cmd_ready                          ), //i
    .io_output_cmd_payload_last                 (system_fabric_exclusiveMonitor_logic_io_output_cmd_payload_last                            ), //o
    .io_output_cmd_payload_fragment_source      (system_fabric_exclusiveMonitor_logic_io_output_cmd_payload_fragment_source[1:0]            ), //o
    .io_output_cmd_payload_fragment_opcode      (system_fabric_exclusiveMonitor_logic_io_output_cmd_payload_fragment_opcode                 ), //o
    .io_output_cmd_payload_fragment_address     (system_fabric_exclusiveMonitor_logic_io_output_cmd_payload_fragment_address[31:0]          ), //o
    .io_output_cmd_payload_fragment_length      (system_fabric_exclusiveMonitor_logic_io_output_cmd_payload_fragment_length[5:0]            ), //o
    .io_output_cmd_payload_fragment_data        (system_fabric_exclusiveMonitor_logic_io_output_cmd_payload_fragment_data[63:0]             ), //o
    .io_output_cmd_payload_fragment_mask        (system_fabric_exclusiveMonitor_logic_io_output_cmd_payload_fragment_mask[7:0]              ), //o
    .io_output_cmd_payload_fragment_context     (system_fabric_exclusiveMonitor_logic_io_output_cmd_payload_fragment_context[3:0]           ), //o
    .io_output_rsp_valid                        (system_fabric_exclusiveMonitor_output_connector_decoder_rsp_valid                          ), //i
    .io_output_rsp_ready                        (system_fabric_exclusiveMonitor_logic_io_output_rsp_ready                                   ), //o
    .io_output_rsp_payload_last                 (system_fabric_exclusiveMonitor_output_connector_decoder_rsp_payload_last                   ), //i
    .io_output_rsp_payload_fragment_source      (system_fabric_exclusiveMonitor_output_connector_decoder_rsp_payload_fragment_source[1:0]   ), //i
    .io_output_rsp_payload_fragment_opcode      (system_fabric_exclusiveMonitor_output_connector_decoder_rsp_payload_fragment_opcode        ), //i
    .io_output_rsp_payload_fragment_data        (system_fabric_exclusiveMonitor_output_connector_decoder_rsp_payload_fragment_data[63:0]    ), //i
    .io_output_rsp_payload_fragment_context     (system_fabric_exclusiveMonitor_output_connector_decoder_rsp_payload_fragment_context[3:0]  ), //i
    .io_output_inv_valid                        (system_fabric_exclusiveMonitor_output_connector_decoder_inv_valid                          ), //i
    .io_output_inv_ready                        (system_fabric_exclusiveMonitor_logic_io_output_inv_ready                                   ), //o
    .io_output_inv_payload_all                  (system_fabric_exclusiveMonitor_output_connector_decoder_inv_payload_all                    ), //i
    .io_output_inv_payload_address              (system_fabric_exclusiveMonitor_output_connector_decoder_inv_payload_address[31:0]          ), //i
    .io_output_inv_payload_length               (system_fabric_exclusiveMonitor_output_connector_decoder_inv_payload_length[5:0]            ), //i
    .io_output_inv_payload_source               (system_fabric_exclusiveMonitor_output_connector_decoder_inv_payload_source[1:0]            ), //i
    .io_output_ack_valid                        (system_fabric_exclusiveMonitor_logic_io_output_ack_valid                                   ), //o
    .io_output_ack_ready                        (system_fabric_exclusiveMonitor_output_connector_decoder_ack_ready                          ), //i
    .io_output_sync_valid                       (system_fabric_exclusiveMonitor_output_connector_decoder_sync_valid                         ), //i
    .io_output_sync_ready                       (system_fabric_exclusiveMonitor_logic_io_output_sync_ready                                  ), //o
    .io_output_sync_payload_source              (system_fabric_exclusiveMonitor_output_connector_decoder_sync_payload_source[1:0]           ), //i
    .CLKOUT0                                    (clocking_pll_CLKOUT0                                                                       ), //i
    .systemCd_logic_outputReset                 (systemCd_logic_outputReset                                                                 )  //i
  );
  BmbArbiter system_fabric_dBusCoherent_bmb_arbiter (
    .io_inputs_0_cmd_valid                         (system_fabric_dBusCoherent_bmb_syncRemover_io_output_cmd_valid                           ), //i
    .io_inputs_0_cmd_ready                         (system_fabric_dBusCoherent_bmb_arbiter_io_inputs_0_cmd_ready                             ), //o
    .io_inputs_0_cmd_payload_last                  (system_fabric_dBusCoherent_bmb_syncRemover_io_output_cmd_payload_last                    ), //i
    .io_inputs_0_cmd_payload_fragment_opcode       (system_fabric_dBusCoherent_bmb_syncRemover_io_output_cmd_payload_fragment_opcode         ), //i
    .io_inputs_0_cmd_payload_fragment_address      (system_fabric_dBusCoherent_bmb_syncRemover_io_output_cmd_payload_fragment_address[31:0]  ), //i
    .io_inputs_0_cmd_payload_fragment_length       (system_fabric_dBusCoherent_bmb_syncRemover_io_output_cmd_payload_fragment_length[1:0]    ), //i
    .io_inputs_0_cmd_payload_fragment_data         (system_fabric_dBusCoherent_bmb_syncRemover_io_output_cmd_payload_fragment_data[63:0]     ), //i
    .io_inputs_0_cmd_payload_fragment_mask         (system_fabric_dBusCoherent_bmb_syncRemover_io_output_cmd_payload_fragment_mask[7:0]      ), //i
    .io_inputs_0_rsp_valid                         (system_fabric_dBusCoherent_bmb_arbiter_io_inputs_0_rsp_valid                             ), //o
    .io_inputs_0_rsp_ready                         (system_fabric_dBusCoherent_bmb_syncRemover_io_output_rsp_ready                           ), //i
    .io_inputs_0_rsp_payload_last                  (system_fabric_dBusCoherent_bmb_arbiter_io_inputs_0_rsp_payload_last                      ), //o
    .io_inputs_0_rsp_payload_fragment_opcode       (system_fabric_dBusCoherent_bmb_arbiter_io_inputs_0_rsp_payload_fragment_opcode           ), //o
    .io_inputs_0_rsp_payload_fragment_data         (system_fabric_dBusCoherent_bmb_arbiter_io_inputs_0_rsp_payload_fragment_data[63:0]       ), //o
    .io_inputs_0_sync_valid                        (system_fabric_dBusCoherent_bmb_arbiter_io_inputs_0_sync_valid                            ), //o
    .io_inputs_0_sync_ready                        (system_fabric_dBusCoherent_bmb_syncRemover_io_output_sync_ready                          ), //i
    .io_inputs_1_cmd_valid                         (system_cores_1_dBus_connector_decoder_cmd_valid                                          ), //i
    .io_inputs_1_cmd_ready                         (system_fabric_dBusCoherent_bmb_arbiter_io_inputs_1_cmd_ready                             ), //o
    .io_inputs_1_cmd_payload_last                  (system_cores_1_dBus_connector_decoder_cmd_payload_last                                   ), //i
    .io_inputs_1_cmd_payload_fragment_opcode       (system_cores_1_dBus_connector_decoder_cmd_payload_fragment_opcode                        ), //i
    .io_inputs_1_cmd_payload_fragment_exclusive    (system_cores_1_dBus_connector_decoder_cmd_payload_fragment_exclusive                     ), //i
    .io_inputs_1_cmd_payload_fragment_address      (system_cores_1_dBus_connector_decoder_cmd_payload_fragment_address[31:0]                 ), //i
    .io_inputs_1_cmd_payload_fragment_length       (system_cores_1_dBus_connector_decoder_cmd_payload_fragment_length[5:0]                   ), //i
    .io_inputs_1_cmd_payload_fragment_data         (system_cores_1_dBus_connector_decoder_cmd_payload_fragment_data[63:0]                    ), //i
    .io_inputs_1_cmd_payload_fragment_mask         (system_cores_1_dBus_connector_decoder_cmd_payload_fragment_mask[7:0]                     ), //i
    .io_inputs_1_cmd_payload_fragment_context      (system_cores_1_dBus_connector_decoder_cmd_payload_fragment_context[2:0]                  ), //i
    .io_inputs_1_rsp_valid                         (system_fabric_dBusCoherent_bmb_arbiter_io_inputs_1_rsp_valid                             ), //o
    .io_inputs_1_rsp_ready                         (system_cores_1_dBus_connector_decoder_rsp_ready                                          ), //i
    .io_inputs_1_rsp_payload_last                  (system_fabric_dBusCoherent_bmb_arbiter_io_inputs_1_rsp_payload_last                      ), //o
    .io_inputs_1_rsp_payload_fragment_opcode       (system_fabric_dBusCoherent_bmb_arbiter_io_inputs_1_rsp_payload_fragment_opcode           ), //o
    .io_inputs_1_rsp_payload_fragment_exclusive    (system_fabric_dBusCoherent_bmb_arbiter_io_inputs_1_rsp_payload_fragment_exclusive        ), //o
    .io_inputs_1_rsp_payload_fragment_data         (system_fabric_dBusCoherent_bmb_arbiter_io_inputs_1_rsp_payload_fragment_data[63:0]       ), //o
    .io_inputs_1_rsp_payload_fragment_context      (system_fabric_dBusCoherent_bmb_arbiter_io_inputs_1_rsp_payload_fragment_context[2:0]     ), //o
    .io_inputs_1_inv_valid                         (system_fabric_dBusCoherent_bmb_arbiter_io_inputs_1_inv_valid                             ), //o
    .io_inputs_1_inv_ready                         (system_cores_1_dBus_connector_decoder_inv_ready                                          ), //i
    .io_inputs_1_inv_payload_all                   (system_fabric_dBusCoherent_bmb_arbiter_io_inputs_1_inv_payload_all                       ), //o
    .io_inputs_1_inv_payload_address               (system_fabric_dBusCoherent_bmb_arbiter_io_inputs_1_inv_payload_address[31:0]             ), //o
    .io_inputs_1_inv_payload_length                (system_fabric_dBusCoherent_bmb_arbiter_io_inputs_1_inv_payload_length[5:0]               ), //o
    .io_inputs_1_ack_valid                         (system_cores_1_dBus_connector_decoder_ack_valid                                          ), //i
    .io_inputs_1_ack_ready                         (system_fabric_dBusCoherent_bmb_arbiter_io_inputs_1_ack_ready                             ), //o
    .io_inputs_1_sync_valid                        (system_fabric_dBusCoherent_bmb_arbiter_io_inputs_1_sync_valid                            ), //o
    .io_inputs_1_sync_ready                        (system_cores_1_dBus_connector_decoder_sync_ready                                         ), //i
    .io_inputs_2_cmd_valid                         (system_cores_0_dBus_connector_decoder_cmd_valid                                          ), //i
    .io_inputs_2_cmd_ready                         (system_fabric_dBusCoherent_bmb_arbiter_io_inputs_2_cmd_ready                             ), //o
    .io_inputs_2_cmd_payload_last                  (system_cores_0_dBus_connector_decoder_cmd_payload_last                                   ), //i
    .io_inputs_2_cmd_payload_fragment_opcode       (system_cores_0_dBus_connector_decoder_cmd_payload_fragment_opcode                        ), //i
    .io_inputs_2_cmd_payload_fragment_exclusive    (system_cores_0_dBus_connector_decoder_cmd_payload_fragment_exclusive                     ), //i
    .io_inputs_2_cmd_payload_fragment_address      (system_cores_0_dBus_connector_decoder_cmd_payload_fragment_address[31:0]                 ), //i
    .io_inputs_2_cmd_payload_fragment_length       (system_cores_0_dBus_connector_decoder_cmd_payload_fragment_length[5:0]                   ), //i
    .io_inputs_2_cmd_payload_fragment_data         (system_cores_0_dBus_connector_decoder_cmd_payload_fragment_data[63:0]                    ), //i
    .io_inputs_2_cmd_payload_fragment_mask         (system_cores_0_dBus_connector_decoder_cmd_payload_fragment_mask[7:0]                     ), //i
    .io_inputs_2_cmd_payload_fragment_context      (system_cores_0_dBus_connector_decoder_cmd_payload_fragment_context[2:0]                  ), //i
    .io_inputs_2_rsp_valid                         (system_fabric_dBusCoherent_bmb_arbiter_io_inputs_2_rsp_valid                             ), //o
    .io_inputs_2_rsp_ready                         (system_cores_0_dBus_connector_decoder_rsp_ready                                          ), //i
    .io_inputs_2_rsp_payload_last                  (system_fabric_dBusCoherent_bmb_arbiter_io_inputs_2_rsp_payload_last                      ), //o
    .io_inputs_2_rsp_payload_fragment_opcode       (system_fabric_dBusCoherent_bmb_arbiter_io_inputs_2_rsp_payload_fragment_opcode           ), //o
    .io_inputs_2_rsp_payload_fragment_exclusive    (system_fabric_dBusCoherent_bmb_arbiter_io_inputs_2_rsp_payload_fragment_exclusive        ), //o
    .io_inputs_2_rsp_payload_fragment_data         (system_fabric_dBusCoherent_bmb_arbiter_io_inputs_2_rsp_payload_fragment_data[63:0]       ), //o
    .io_inputs_2_rsp_payload_fragment_context      (system_fabric_dBusCoherent_bmb_arbiter_io_inputs_2_rsp_payload_fragment_context[2:0]     ), //o
    .io_inputs_2_inv_valid                         (system_fabric_dBusCoherent_bmb_arbiter_io_inputs_2_inv_valid                             ), //o
    .io_inputs_2_inv_ready                         (system_cores_0_dBus_connector_decoder_inv_ready                                          ), //i
    .io_inputs_2_inv_payload_all                   (system_fabric_dBusCoherent_bmb_arbiter_io_inputs_2_inv_payload_all                       ), //o
    .io_inputs_2_inv_payload_address               (system_fabric_dBusCoherent_bmb_arbiter_io_inputs_2_inv_payload_address[31:0]             ), //o
    .io_inputs_2_inv_payload_length                (system_fabric_dBusCoherent_bmb_arbiter_io_inputs_2_inv_payload_length[5:0]               ), //o
    .io_inputs_2_ack_valid                         (system_cores_0_dBus_connector_decoder_ack_valid                                          ), //i
    .io_inputs_2_ack_ready                         (system_fabric_dBusCoherent_bmb_arbiter_io_inputs_2_ack_ready                             ), //o
    .io_inputs_2_sync_valid                        (system_fabric_dBusCoherent_bmb_arbiter_io_inputs_2_sync_valid                            ), //o
    .io_inputs_2_sync_ready                        (system_cores_0_dBus_connector_decoder_sync_ready                                         ), //i
    .io_output_cmd_valid                           (system_fabric_dBusCoherent_bmb_arbiter_io_output_cmd_valid                               ), //o
    .io_output_cmd_ready                           (system_fabric_dBusCoherent_bmb_cmd_ready                                                 ), //i
    .io_output_cmd_payload_last                    (system_fabric_dBusCoherent_bmb_arbiter_io_output_cmd_payload_last                        ), //o
    .io_output_cmd_payload_fragment_source         (system_fabric_dBusCoherent_bmb_arbiter_io_output_cmd_payload_fragment_source[1:0]        ), //o
    .io_output_cmd_payload_fragment_opcode         (system_fabric_dBusCoherent_bmb_arbiter_io_output_cmd_payload_fragment_opcode             ), //o
    .io_output_cmd_payload_fragment_exclusive      (system_fabric_dBusCoherent_bmb_arbiter_io_output_cmd_payload_fragment_exclusive          ), //o
    .io_output_cmd_payload_fragment_address        (system_fabric_dBusCoherent_bmb_arbiter_io_output_cmd_payload_fragment_address[31:0]      ), //o
    .io_output_cmd_payload_fragment_length         (system_fabric_dBusCoherent_bmb_arbiter_io_output_cmd_payload_fragment_length[5:0]        ), //o
    .io_output_cmd_payload_fragment_data           (system_fabric_dBusCoherent_bmb_arbiter_io_output_cmd_payload_fragment_data[63:0]         ), //o
    .io_output_cmd_payload_fragment_mask           (system_fabric_dBusCoherent_bmb_arbiter_io_output_cmd_payload_fragment_mask[7:0]          ), //o
    .io_output_cmd_payload_fragment_context        (system_fabric_dBusCoherent_bmb_arbiter_io_output_cmd_payload_fragment_context[2:0]       ), //o
    .io_output_rsp_valid                           (system_fabric_dBusCoherent_bmb_rsp_valid                                                 ), //i
    .io_output_rsp_ready                           (system_fabric_dBusCoherent_bmb_arbiter_io_output_rsp_ready                               ), //o
    .io_output_rsp_payload_last                    (system_fabric_dBusCoherent_bmb_rsp_payload_last                                          ), //i
    .io_output_rsp_payload_fragment_source         (system_fabric_dBusCoherent_bmb_rsp_payload_fragment_source[1:0]                          ), //i
    .io_output_rsp_payload_fragment_opcode         (system_fabric_dBusCoherent_bmb_rsp_payload_fragment_opcode                               ), //i
    .io_output_rsp_payload_fragment_exclusive      (system_fabric_dBusCoherent_bmb_rsp_payload_fragment_exclusive                            ), //i
    .io_output_rsp_payload_fragment_data           (system_fabric_dBusCoherent_bmb_rsp_payload_fragment_data[63:0]                           ), //i
    .io_output_rsp_payload_fragment_context        (system_fabric_dBusCoherent_bmb_rsp_payload_fragment_context[2:0]                         ), //i
    .io_output_inv_valid                           (system_fabric_dBusCoherent_bmb_inv_valid                                                 ), //i
    .io_output_inv_ready                           (system_fabric_dBusCoherent_bmb_arbiter_io_output_inv_ready                               ), //o
    .io_output_inv_payload_all                     (system_fabric_dBusCoherent_bmb_inv_payload_all                                           ), //i
    .io_output_inv_payload_address                 (system_fabric_dBusCoherent_bmb_inv_payload_address[31:0]                                 ), //i
    .io_output_inv_payload_length                  (system_fabric_dBusCoherent_bmb_inv_payload_length[5:0]                                   ), //i
    .io_output_inv_payload_source                  (system_fabric_dBusCoherent_bmb_inv_payload_source[1:0]                                   ), //i
    .io_output_ack_valid                           (system_fabric_dBusCoherent_bmb_arbiter_io_output_ack_valid                               ), //o
    .io_output_ack_ready                           (system_fabric_dBusCoherent_bmb_ack_ready                                                 ), //i
    .io_output_sync_valid                          (system_fabric_dBusCoherent_bmb_sync_valid                                                ), //i
    .io_output_sync_ready                          (system_fabric_dBusCoherent_bmb_arbiter_io_output_sync_ready                              ), //o
    .io_output_sync_payload_source                 (system_fabric_dBusCoherent_bmb_sync_payload_source[1:0]                                  ), //i
    .CLKOUT0                                       (clocking_pll_CLKOUT0                                                                     ), //i
    .systemCd_logic_outputReset                    (systemCd_logic_outputReset                                                               )  //i
  );
  BmbClint system_clint_logic (
    .io_bus_cmd_valid                       (system_bmbPeripheral_bmb_decoder_io_outputs_1_cmd_valid                          ), //i
    .io_bus_cmd_ready                       (system_clint_logic_io_bus_cmd_ready                                              ), //o
    .io_bus_cmd_payload_last                (system_bmbPeripheral_bmb_decoder_io_outputs_1_cmd_payload_last                   ), //i
    .io_bus_cmd_payload_fragment_source     (system_bmbPeripheral_bmb_decoder_io_outputs_1_cmd_payload_fragment_source        ), //i
    .io_bus_cmd_payload_fragment_opcode     (system_bmbPeripheral_bmb_decoder_io_outputs_1_cmd_payload_fragment_opcode        ), //i
    .io_bus_cmd_payload_fragment_address    (_zz_411[15:0]                                                                    ), //i
    .io_bus_cmd_payload_fragment_length     (system_bmbPeripheral_bmb_decoder_io_outputs_1_cmd_payload_fragment_length[1:0]   ), //i
    .io_bus_cmd_payload_fragment_data       (system_bmbPeripheral_bmb_decoder_io_outputs_1_cmd_payload_fragment_data[31:0]    ), //i
    .io_bus_cmd_payload_fragment_mask       (system_bmbPeripheral_bmb_decoder_io_outputs_1_cmd_payload_fragment_mask[3:0]     ), //i
    .io_bus_cmd_payload_fragment_context    (system_bmbPeripheral_bmb_decoder_io_outputs_1_cmd_payload_fragment_context[6:0]  ), //i
    .io_bus_rsp_valid                       (system_clint_logic_io_bus_rsp_valid                                              ), //o
    .io_bus_rsp_ready                       (system_bmbPeripheral_bmb_decoder_io_outputs_1_rsp_ready                          ), //i
    .io_bus_rsp_payload_last                (system_clint_logic_io_bus_rsp_payload_last                                       ), //o
    .io_bus_rsp_payload_fragment_source     (system_clint_logic_io_bus_rsp_payload_fragment_source                            ), //o
    .io_bus_rsp_payload_fragment_opcode     (system_clint_logic_io_bus_rsp_payload_fragment_opcode                            ), //o
    .io_bus_rsp_payload_fragment_data       (system_clint_logic_io_bus_rsp_payload_fragment_data[31:0]                        ), //o
    .io_bus_rsp_payload_fragment_context    (system_clint_logic_io_bus_rsp_payload_fragment_context[6:0]                      ), //o
    .io_timerInterrupt                      (system_clint_logic_io_timerInterrupt[1:0]                                        ), //o
    .io_softwareInterrupt                   (system_clint_logic_io_softwareInterrupt[1:0]                                     ), //o
    .io_time                                (system_clint_logic_io_time[63:0]                                                 ), //o
    .CLKOUT0                                (clocking_pll_CLKOUT0                                                             ), //i
    .systemCd_logic_outputReset             (systemCd_logic_outputReset                                                       )  //i
  );
  BmbGpio2 system_gpioA_logic (
    .io_gpio_read                           (_zz_122[31:0]                                                                    ), //i
    .io_gpio_write                          (system_gpioA_logic_io_gpio_write[31:0]                                           ), //o
    .io_gpio_writeEnable                    (system_gpioA_logic_io_gpio_writeEnable[31:0]                                     ), //o
    .io_bus_cmd_valid                       (system_bmbPeripheral_bmb_decoder_io_outputs_2_cmd_valid                          ), //i
    .io_bus_cmd_ready                       (system_gpioA_logic_io_bus_cmd_ready                                              ), //o
    .io_bus_cmd_payload_last                (system_bmbPeripheral_bmb_decoder_io_outputs_2_cmd_payload_last                   ), //i
    .io_bus_cmd_payload_fragment_source     (system_bmbPeripheral_bmb_decoder_io_outputs_2_cmd_payload_fragment_source        ), //i
    .io_bus_cmd_payload_fragment_opcode     (system_bmbPeripheral_bmb_decoder_io_outputs_2_cmd_payload_fragment_opcode        ), //i
    .io_bus_cmd_payload_fragment_address    (_zz_412[7:0]                                                                     ), //i
    .io_bus_cmd_payload_fragment_length     (system_bmbPeripheral_bmb_decoder_io_outputs_2_cmd_payload_fragment_length[1:0]   ), //i
    .io_bus_cmd_payload_fragment_data       (system_bmbPeripheral_bmb_decoder_io_outputs_2_cmd_payload_fragment_data[31:0]    ), //i
    .io_bus_cmd_payload_fragment_mask       (system_bmbPeripheral_bmb_decoder_io_outputs_2_cmd_payload_fragment_mask[3:0]     ), //i
    .io_bus_cmd_payload_fragment_context    (system_bmbPeripheral_bmb_decoder_io_outputs_2_cmd_payload_fragment_context[6:0]  ), //i
    .io_bus_rsp_valid                       (system_gpioA_logic_io_bus_rsp_valid                                              ), //o
    .io_bus_rsp_ready                       (system_bmbPeripheral_bmb_decoder_io_outputs_2_rsp_ready                          ), //i
    .io_bus_rsp_payload_last                (system_gpioA_logic_io_bus_rsp_payload_last                                       ), //o
    .io_bus_rsp_payload_fragment_source     (system_gpioA_logic_io_bus_rsp_payload_fragment_source                            ), //o
    .io_bus_rsp_payload_fragment_opcode     (system_gpioA_logic_io_bus_rsp_payload_fragment_opcode                            ), //o
    .io_bus_rsp_payload_fragment_data       (system_gpioA_logic_io_bus_rsp_payload_fragment_data[31:0]                        ), //o
    .io_bus_rsp_payload_fragment_context    (system_gpioA_logic_io_bus_rsp_payload_fragment_context[6:0]                      ), //o
    .io_interrupt                           (system_gpioA_logic_io_interrupt[31:0]                                            ), //o
    .CLKOUT0                                (clocking_pll_CLKOUT0                                                             ), //i
    .systemCd_logic_outputReset             (systemCd_logic_outputReset                                                       )  //i
  );
  BmbUartCtrl system_uartA_logic (
    .io_bus_cmd_valid                       (system_bmbPeripheral_bmb_decoder_io_outputs_3_cmd_valid                          ), //i
    .io_bus_cmd_ready                       (system_uartA_logic_io_bus_cmd_ready                                              ), //o
    .io_bus_cmd_payload_last                (system_bmbPeripheral_bmb_decoder_io_outputs_3_cmd_payload_last                   ), //i
    .io_bus_cmd_payload_fragment_source     (system_bmbPeripheral_bmb_decoder_io_outputs_3_cmd_payload_fragment_source        ), //i
    .io_bus_cmd_payload_fragment_opcode     (system_bmbPeripheral_bmb_decoder_io_outputs_3_cmd_payload_fragment_opcode        ), //i
    .io_bus_cmd_payload_fragment_address    (_zz_413[5:0]                                                                     ), //i
    .io_bus_cmd_payload_fragment_length     (system_bmbPeripheral_bmb_decoder_io_outputs_3_cmd_payload_fragment_length[1:0]   ), //i
    .io_bus_cmd_payload_fragment_data       (system_bmbPeripheral_bmb_decoder_io_outputs_3_cmd_payload_fragment_data[31:0]    ), //i
    .io_bus_cmd_payload_fragment_mask       (system_bmbPeripheral_bmb_decoder_io_outputs_3_cmd_payload_fragment_mask[3:0]     ), //i
    .io_bus_cmd_payload_fragment_context    (system_bmbPeripheral_bmb_decoder_io_outputs_3_cmd_payload_fragment_context[6:0]  ), //i
    .io_bus_rsp_valid                       (system_uartA_logic_io_bus_rsp_valid                                              ), //o
    .io_bus_rsp_ready                       (system_bmbPeripheral_bmb_decoder_io_outputs_3_rsp_ready                          ), //i
    .io_bus_rsp_payload_last                (system_uartA_logic_io_bus_rsp_payload_last                                       ), //o
    .io_bus_rsp_payload_fragment_source     (system_uartA_logic_io_bus_rsp_payload_fragment_source                            ), //o
    .io_bus_rsp_payload_fragment_opcode     (system_uartA_logic_io_bus_rsp_payload_fragment_opcode                            ), //o
    .io_bus_rsp_payload_fragment_data       (system_uartA_logic_io_bus_rsp_payload_fragment_data[31:0]                        ), //o
    .io_bus_rsp_payload_fragment_context    (system_uartA_logic_io_bus_rsp_payload_fragment_context[6:0]                      ), //o
    .io_uart_txd                            (system_uartA_logic_io_uart_txd                                                   ), //o
    .io_uart_rxd                            (system_uartA_uart_rxd                                                            ), //i
    .io_interrupt                           (system_uartA_logic_io_interrupt                                                  ), //o
    .CLKOUT0                                (clocking_pll_CLKOUT0                                                             ), //i
    .systemCd_logic_outputReset             (systemCd_logic_outputReset                                                       )  //i
  );
  BmbSpiXdrMasterCtrl system_spiA_logic (
    .io_ctrl_cmd_valid                       (system_bmbPeripheral_bmb_decoder_io_outputs_4_cmd_valid                          ), //i
    .io_ctrl_cmd_ready                       (system_spiA_logic_io_ctrl_cmd_ready                                              ), //o
    .io_ctrl_cmd_payload_last                (system_bmbPeripheral_bmb_decoder_io_outputs_4_cmd_payload_last                   ), //i
    .io_ctrl_cmd_payload_fragment_source     (system_bmbPeripheral_bmb_decoder_io_outputs_4_cmd_payload_fragment_source        ), //i
    .io_ctrl_cmd_payload_fragment_opcode     (system_bmbPeripheral_bmb_decoder_io_outputs_4_cmd_payload_fragment_opcode        ), //i
    .io_ctrl_cmd_payload_fragment_address    (_zz_414[11:0]                                                                    ), //i
    .io_ctrl_cmd_payload_fragment_length     (system_bmbPeripheral_bmb_decoder_io_outputs_4_cmd_payload_fragment_length[1:0]   ), //i
    .io_ctrl_cmd_payload_fragment_data       (system_bmbPeripheral_bmb_decoder_io_outputs_4_cmd_payload_fragment_data[31:0]    ), //i
    .io_ctrl_cmd_payload_fragment_mask       (system_bmbPeripheral_bmb_decoder_io_outputs_4_cmd_payload_fragment_mask[3:0]     ), //i
    .io_ctrl_cmd_payload_fragment_context    (system_bmbPeripheral_bmb_decoder_io_outputs_4_cmd_payload_fragment_context[6:0]  ), //i
    .io_ctrl_rsp_valid                       (system_spiA_logic_io_ctrl_rsp_valid                                              ), //o
    .io_ctrl_rsp_ready                       (system_bmbPeripheral_bmb_decoder_io_outputs_4_rsp_ready                          ), //i
    .io_ctrl_rsp_payload_last                (system_spiA_logic_io_ctrl_rsp_payload_last                                       ), //o
    .io_ctrl_rsp_payload_fragment_source     (system_spiA_logic_io_ctrl_rsp_payload_fragment_source                            ), //o
    .io_ctrl_rsp_payload_fragment_opcode     (system_spiA_logic_io_ctrl_rsp_payload_fragment_opcode                            ), //o
    .io_ctrl_rsp_payload_fragment_data       (system_spiA_logic_io_ctrl_rsp_payload_fragment_data[31:0]                        ), //o
    .io_ctrl_rsp_payload_fragment_context    (system_spiA_logic_io_ctrl_rsp_payload_fragment_context[6:0]                      ), //o
    .io_spi_sclk_write                       (system_spiA_logic_io_spi_sclk_write                                              ), //o
    .io_spi_data_0_writeEnable               (system_spiA_logic_io_spi_data_0_writeEnable                                      ), //o
    .io_spi_data_0_read                      (_zz_415                                                                          ), //i
    .io_spi_data_0_write                     (system_spiA_logic_io_spi_data_0_write                                            ), //o
    .io_spi_data_1_writeEnable               (system_spiA_logic_io_spi_data_1_writeEnable                                      ), //o
    .io_spi_data_1_read                      (_zz_416                                                                          ), //i
    .io_spi_data_1_write                     (system_spiA_logic_io_spi_data_1_write                                            ), //o
    .io_spi_ss                               (system_spiA_logic_io_spi_ss[2:0]                                                 ), //o
    .io_interrupt                            (system_spiA_logic_io_interrupt                                                   ), //o
    .CLKOUT0                                 (clocking_pll_CLKOUT0                                                             ), //i
    .systemCd_logic_outputReset              (systemCd_logic_outputReset                                                       )  //i
  );
  BmbMacEth system_mac_logic (
    .io_bus_cmd_valid                       (system_bmbPeripheral_bmb_decoder_io_outputs_5_cmd_valid                          ), //i
    .io_bus_cmd_ready                       (system_mac_logic_io_bus_cmd_ready                                                ), //o
    .io_bus_cmd_payload_last                (system_bmbPeripheral_bmb_decoder_io_outputs_5_cmd_payload_last                   ), //i
    .io_bus_cmd_payload_fragment_source     (system_bmbPeripheral_bmb_decoder_io_outputs_5_cmd_payload_fragment_source        ), //i
    .io_bus_cmd_payload_fragment_opcode     (system_bmbPeripheral_bmb_decoder_io_outputs_5_cmd_payload_fragment_opcode        ), //i
    .io_bus_cmd_payload_fragment_address    (_zz_417[5:0]                                                                     ), //i
    .io_bus_cmd_payload_fragment_length     (system_bmbPeripheral_bmb_decoder_io_outputs_5_cmd_payload_fragment_length[1:0]   ), //i
    .io_bus_cmd_payload_fragment_data       (system_bmbPeripheral_bmb_decoder_io_outputs_5_cmd_payload_fragment_data[31:0]    ), //i
    .io_bus_cmd_payload_fragment_mask       (system_bmbPeripheral_bmb_decoder_io_outputs_5_cmd_payload_fragment_mask[3:0]     ), //i
    .io_bus_cmd_payload_fragment_context    (system_bmbPeripheral_bmb_decoder_io_outputs_5_cmd_payload_fragment_context[6:0]  ), //i
    .io_bus_rsp_valid                       (system_mac_logic_io_bus_rsp_valid                                                ), //o
    .io_bus_rsp_ready                       (system_bmbPeripheral_bmb_decoder_io_outputs_5_rsp_ready                          ), //i
    .io_bus_rsp_payload_last                (system_mac_logic_io_bus_rsp_payload_last                                         ), //o
    .io_bus_rsp_payload_fragment_source     (system_mac_logic_io_bus_rsp_payload_fragment_source                              ), //o
    .io_bus_rsp_payload_fragment_opcode     (system_mac_logic_io_bus_rsp_payload_fragment_opcode                              ), //o
    .io_bus_rsp_payload_fragment_data       (system_mac_logic_io_bus_rsp_payload_fragment_data[31:0]                          ), //o
    .io_bus_rsp_payload_fragment_context    (system_mac_logic_io_bus_rsp_payload_fragment_context[6:0]                        ), //o
    .io_phy_rx_valid                        (_zz_418                                                                          ), //i
    .io_phy_rx_ready                        (system_mac_logic_io_phy_rx_ready                                                 ), //o
    .io_phy_rx_payload_last                 (_zz_419                                                                          ), //i
    .io_phy_rx_payload_fragment_error       (_zz_179                                                                          ), //i
    .io_phy_rx_payload_fragment_data        (_zz_180[1:0]                                                                     ), //i
    .io_phy_tx_valid                        (system_mac_logic_io_phy_tx_valid                                                 ), //o
    .io_phy_tx_ready                        (macTxInterFrame_1_io_input_ready                                                 ), //i
    .io_phy_tx_payload_last                 (system_mac_logic_io_phy_tx_payload_last                                          ), //o
    .io_phy_tx_payload_fragment_data        (system_mac_logic_io_phy_tx_payload_fragment_data[1:0]                            ), //o
    .io_phy_colision                        (_zz_420                                                                          ), //i
    .io_phy_busy                            (_zz_421                                                                          ), //i
    .io_interrupt                           (system_mac_logic_io_interrupt                                                    ), //o
    .systemCd_logic_outputReset             (systemCd_logic_outputReset                                                       ), //i
    .txReset                                (system_mac_logic_txReset                                                         ), //o
    .CLKOUT0                                (clocking_pll_CLKOUT0                                                             ), //i
    .CLKOUT5                                (clocking_pll_CLKOUT5                                                             )  //i
  );
  MacTxInterFrame macTxInterFrame_1 (
    .io_input_valid                     (system_mac_logic_io_phy_tx_valid                        ), //i
    .io_input_ready                     (macTxInterFrame_1_io_input_ready                        ), //o
    .io_input_payload_last              (system_mac_logic_io_phy_tx_payload_last                 ), //i
    .io_input_payload_fragment_data     (system_mac_logic_io_phy_tx_payload_fragment_data[1:0]   ), //i
    .io_output_valid                    (macTxInterFrame_1_io_output_valid                       ), //o
    .io_output_payload_last             (macTxInterFrame_1_io_output_payload_last                ), //o
    .io_output_payload_fragment_data    (macTxInterFrame_1_io_output_payload_fragment_data[1:0]  ), //o
    .CLKOUT5                            (clocking_pll_CLKOUT5                                    ), //i
    .txReset                            (system_mac_logic_txReset                                )  //i
  );
  Core_1 system_dma_logic (
    .io_sgRead_cmd_valid                        (system_dma_logic_io_sgRead_cmd_valid                                             ), //o
    .io_sgRead_cmd_ready                        (system_dma_readSg_decoder_io_input_cmd_ready                                     ), //i
    .io_sgRead_cmd_payload_last                 (system_dma_logic_io_sgRead_cmd_payload_last                                      ), //o
    .io_sgRead_cmd_payload_fragment_opcode      (system_dma_logic_io_sgRead_cmd_payload_fragment_opcode                           ), //o
    .io_sgRead_cmd_payload_fragment_address     (system_dma_logic_io_sgRead_cmd_payload_fragment_address[31:0]                    ), //o
    .io_sgRead_cmd_payload_fragment_length      (system_dma_logic_io_sgRead_cmd_payload_fragment_length[4:0]                      ), //o
    .io_sgRead_rsp_valid                        (system_dma_readSg_decoder_io_input_rsp_valid                                     ), //i
    .io_sgRead_rsp_ready                        (system_dma_logic_io_sgRead_rsp_ready                                             ), //o
    .io_sgRead_rsp_payload_last                 (system_dma_readSg_decoder_io_input_rsp_payload_last                              ), //i
    .io_sgRead_rsp_payload_fragment_opcode      (system_dma_readSg_decoder_io_input_rsp_payload_fragment_opcode                   ), //i
    .io_sgRead_rsp_payload_fragment_data        (system_dma_readSg_decoder_io_input_rsp_payload_fragment_data[63:0]               ), //i
    .io_sgWrite_cmd_valid                       (system_dma_logic_io_sgWrite_cmd_valid                                            ), //o
    .io_sgWrite_cmd_ready                       (system_dma_writeSg_decoder_io_input_cmd_ready                                    ), //i
    .io_sgWrite_cmd_payload_last                (system_dma_logic_io_sgWrite_cmd_payload_last                                     ), //o
    .io_sgWrite_cmd_payload_fragment_opcode     (system_dma_logic_io_sgWrite_cmd_payload_fragment_opcode                          ), //o
    .io_sgWrite_cmd_payload_fragment_address    (system_dma_logic_io_sgWrite_cmd_payload_fragment_address[31:0]                   ), //o
    .io_sgWrite_cmd_payload_fragment_length     (system_dma_logic_io_sgWrite_cmd_payload_fragment_length[1:0]                     ), //o
    .io_sgWrite_cmd_payload_fragment_data       (system_dma_logic_io_sgWrite_cmd_payload_fragment_data[63:0]                      ), //o
    .io_sgWrite_cmd_payload_fragment_mask       (system_dma_logic_io_sgWrite_cmd_payload_fragment_mask[7:0]                       ), //o
    .io_sgWrite_rsp_valid                       (system_dma_writeSg_decoder_io_input_rsp_valid                                    ), //i
    .io_sgWrite_rsp_ready                       (system_dma_logic_io_sgWrite_rsp_ready                                            ), //o
    .io_sgWrite_rsp_payload_last                (system_dma_writeSg_decoder_io_input_rsp_payload_last                             ), //i
    .io_sgWrite_rsp_payload_fragment_opcode     (system_dma_writeSg_decoder_io_input_rsp_payload_fragment_opcode                  ), //i
    .io_read_cmd_valid                          (system_dma_logic_io_read_cmd_valid                                               ), //o
    .io_read_cmd_ready                          (system_dma_logic_io_read_cmd_halfPipe_regs_ready                                 ), //i
    .io_read_cmd_payload_last                   (system_dma_logic_io_read_cmd_payload_last                                        ), //o
    .io_read_cmd_payload_fragment_source        (system_dma_logic_io_read_cmd_payload_fragment_source                             ), //o
    .io_read_cmd_payload_fragment_opcode        (system_dma_logic_io_read_cmd_payload_fragment_opcode                             ), //o
    .io_read_cmd_payload_fragment_address       (system_dma_logic_io_read_cmd_payload_fragment_address[31:0]                      ), //o
    .io_read_cmd_payload_fragment_length        (system_dma_logic_io_read_cmd_payload_fragment_length[5:0]                        ), //o
    .io_read_cmd_payload_fragment_context       (system_dma_logic_io_read_cmd_payload_fragment_context[13:0]                      ), //o
    .io_read_rsp_valid                          (system_dma_read_decoder_io_input_rsp_valid                                       ), //i
    .io_read_rsp_ready                          (system_dma_logic_io_read_rsp_ready                                               ), //o
    .io_read_rsp_payload_last                   (system_dma_read_decoder_io_input_rsp_payload_last                                ), //i
    .io_read_rsp_payload_fragment_source        (system_dma_read_decoder_io_input_rsp_payload_fragment_source                     ), //i
    .io_read_rsp_payload_fragment_opcode        (system_dma_read_decoder_io_input_rsp_payload_fragment_opcode                     ), //i
    .io_read_rsp_payload_fragment_data          (system_dma_read_decoder_io_input_rsp_payload_fragment_data[63:0]                 ), //i
    .io_read_rsp_payload_fragment_context       (system_dma_read_decoder_io_input_rsp_payload_fragment_context[13:0]              ), //i
    .io_outputs_0_valid                         (system_dma_logic_io_outputs_0_valid                                              ), //o
    .io_outputs_0_ready                         (system_dma_logic_io_outputs_0_queue_io_push_ready                                ), //i
    .io_outputs_0_payload_data                  (system_dma_logic_io_outputs_0_payload_data[63:0]                                 ), //o
    .io_outputs_0_payload_mask                  (system_dma_logic_io_outputs_0_payload_mask[7:0]                                  ), //o
    .io_outputs_0_payload_last                  (system_dma_logic_io_outputs_0_payload_last                                       ), //o
    .io_outputs_1_valid                         (system_dma_logic_io_outputs_1_valid                                              ), //o
    .io_outputs_1_ready                         (system_audioOut_logic_io_input_ready                                             ), //i
    .io_outputs_1_payload_data                  (system_dma_logic_io_outputs_1_payload_data[31:0]                                 ), //o
    .io_outputs_1_payload_mask                  (system_dma_logic_io_outputs_1_payload_mask[3:0]                                  ), //o
    .io_outputs_1_payload_last                  (system_dma_logic_io_outputs_1_payload_last                                       ), //o
    .io_interrupts                              (system_dma_logic_io_interrupts[1:0]                                              ), //o
    .io_ctrl_cmd_valid                          (system_bmbPeripheral_bmb_decoder_io_outputs_6_cmd_valid                          ), //i
    .io_ctrl_cmd_ready                          (system_dma_logic_io_ctrl_cmd_ready                                               ), //o
    .io_ctrl_cmd_payload_last                   (system_bmbPeripheral_bmb_decoder_io_outputs_6_cmd_payload_last                   ), //i
    .io_ctrl_cmd_payload_fragment_source        (system_bmbPeripheral_bmb_decoder_io_outputs_6_cmd_payload_fragment_source        ), //i
    .io_ctrl_cmd_payload_fragment_opcode        (system_bmbPeripheral_bmb_decoder_io_outputs_6_cmd_payload_fragment_opcode        ), //i
    .io_ctrl_cmd_payload_fragment_address       (_zz_422[15:0]                                                                    ), //i
    .io_ctrl_cmd_payload_fragment_length        (system_bmbPeripheral_bmb_decoder_io_outputs_6_cmd_payload_fragment_length[1:0]   ), //i
    .io_ctrl_cmd_payload_fragment_data          (system_bmbPeripheral_bmb_decoder_io_outputs_6_cmd_payload_fragment_data[31:0]    ), //i
    .io_ctrl_cmd_payload_fragment_mask          (system_bmbPeripheral_bmb_decoder_io_outputs_6_cmd_payload_fragment_mask[3:0]     ), //i
    .io_ctrl_cmd_payload_fragment_context       (system_bmbPeripheral_bmb_decoder_io_outputs_6_cmd_payload_fragment_context[6:0]  ), //i
    .io_ctrl_rsp_valid                          (system_dma_logic_io_ctrl_rsp_valid                                               ), //o
    .io_ctrl_rsp_ready                          (system_bmbPeripheral_bmb_decoder_io_outputs_6_rsp_ready                          ), //i
    .io_ctrl_rsp_payload_last                   (system_dma_logic_io_ctrl_rsp_payload_last                                        ), //o
    .io_ctrl_rsp_payload_fragment_source        (system_dma_logic_io_ctrl_rsp_payload_fragment_source                             ), //o
    .io_ctrl_rsp_payload_fragment_opcode        (system_dma_logic_io_ctrl_rsp_payload_fragment_opcode                             ), //o
    .io_ctrl_rsp_payload_fragment_data          (system_dma_logic_io_ctrl_rsp_payload_fragment_data[31:0]                         ), //o
    .io_ctrl_rsp_payload_fragment_context       (system_dma_logic_io_ctrl_rsp_payload_fragment_context[6:0]                       ), //o
    .CLKOUT0                                    (clocking_pll_CLKOUT0                                                             ), //i
    .systemCd_logic_outputReset                 (systemCd_logic_outputReset                                                       )  //i
  );
  BmbVgaCtrl system_vga_logic (
    .io_input_valid                          (system_dma_logic_io_outputs_0_queue_io_pop_valid                                 ), //i
    .io_input_ready                          (system_vga_logic_io_input_ready                                                  ), //o
    .io_input_payload_data                   (system_dma_logic_io_outputs_0_queue_io_pop_payload_data[63:0]                    ), //i
    .io_input_payload_mask                   (system_dma_logic_io_outputs_0_queue_io_pop_payload_mask[7:0]                     ), //i
    .io_input_payload_last                   (system_dma_logic_io_outputs_0_queue_io_pop_payload_last                          ), //i
    .io_ctrl_cmd_valid                       (system_bmbPeripheral_bmb_decoder_io_outputs_7_cmd_valid                          ), //i
    .io_ctrl_cmd_ready                       (system_vga_logic_io_ctrl_cmd_ready                                               ), //o
    .io_ctrl_cmd_payload_last                (system_bmbPeripheral_bmb_decoder_io_outputs_7_cmd_payload_last                   ), //i
    .io_ctrl_cmd_payload_fragment_source     (system_bmbPeripheral_bmb_decoder_io_outputs_7_cmd_payload_fragment_source        ), //i
    .io_ctrl_cmd_payload_fragment_opcode     (system_bmbPeripheral_bmb_decoder_io_outputs_7_cmd_payload_fragment_opcode        ), //i
    .io_ctrl_cmd_payload_fragment_address    (_zz_423[7:0]                                                                     ), //i
    .io_ctrl_cmd_payload_fragment_length     (system_bmbPeripheral_bmb_decoder_io_outputs_7_cmd_payload_fragment_length[1:0]   ), //i
    .io_ctrl_cmd_payload_fragment_data       (system_bmbPeripheral_bmb_decoder_io_outputs_7_cmd_payload_fragment_data[31:0]    ), //i
    .io_ctrl_cmd_payload_fragment_mask       (system_bmbPeripheral_bmb_decoder_io_outputs_7_cmd_payload_fragment_mask[3:0]     ), //i
    .io_ctrl_cmd_payload_fragment_context    (system_bmbPeripheral_bmb_decoder_io_outputs_7_cmd_payload_fragment_context[6:0]  ), //i
    .io_ctrl_rsp_valid                       (system_vga_logic_io_ctrl_rsp_valid                                               ), //o
    .io_ctrl_rsp_ready                       (system_bmbPeripheral_bmb_decoder_io_outputs_7_rsp_ready                          ), //i
    .io_ctrl_rsp_payload_last                (system_vga_logic_io_ctrl_rsp_payload_last                                        ), //o
    .io_ctrl_rsp_payload_fragment_source     (system_vga_logic_io_ctrl_rsp_payload_fragment_source                             ), //o
    .io_ctrl_rsp_payload_fragment_opcode     (system_vga_logic_io_ctrl_rsp_payload_fragment_opcode                             ), //o
    .io_ctrl_rsp_payload_fragment_data       (system_vga_logic_io_ctrl_rsp_payload_fragment_data[31:0]                         ), //o
    .io_ctrl_rsp_payload_fragment_context    (system_vga_logic_io_ctrl_rsp_payload_fragment_context[6:0]                       ), //o
    .io_vga_vSync                            (system_vga_logic_io_vga_vSync                                                    ), //o
    .io_vga_hSync                            (system_vga_logic_io_vga_hSync                                                    ), //o
    .io_vga_colorEn                          (system_vga_logic_io_vga_colorEn                                                  ), //o
    .io_vga_color_r                          (system_vga_logic_io_vga_color_r[3:0]                                             ), //o
    .io_vga_color_g                          (system_vga_logic_io_vga_color_g[3:0]                                             ), //o
    .io_vga_color_b                          (system_vga_logic_io_vga_color_b[3:0]                                             ), //o
    .CLKOUT0                                 (clocking_pll_CLKOUT0                                                             ), //i
    .systemCd_logic_outputReset              (systemCd_logic_outputReset                                                       ), //i
    .CLKOUT6                                 (clocking_pll_CLKOUT6                                                             ), //i
    .vgaCd_logic_outputReset                 (vgaCd_logic_outputReset                                                          )  //i
  );
  StreamFifoCC_3 system_dma_logic_io_outputs_0_queue (
    .io_push_valid                 (system_dma_logic_io_outputs_0_valid                            ), //i
    .io_push_ready                 (system_dma_logic_io_outputs_0_queue_io_push_ready              ), //o
    .io_push_payload_data          (system_dma_logic_io_outputs_0_payload_data[63:0]               ), //i
    .io_push_payload_mask          (system_dma_logic_io_outputs_0_payload_mask[7:0]                ), //i
    .io_push_payload_last          (system_dma_logic_io_outputs_0_payload_last                     ), //i
    .io_pop_valid                  (system_dma_logic_io_outputs_0_queue_io_pop_valid               ), //o
    .io_pop_ready                  (system_vga_logic_io_input_ready                                ), //i
    .io_pop_payload_data           (system_dma_logic_io_outputs_0_queue_io_pop_payload_data[63:0]  ), //o
    .io_pop_payload_mask           (system_dma_logic_io_outputs_0_queue_io_pop_payload_mask[7:0]   ), //o
    .io_pop_payload_last           (system_dma_logic_io_outputs_0_queue_io_pop_payload_last        ), //o
    .io_pushOccupancy              (system_dma_logic_io_outputs_0_queue_io_pushOccupancy[7:0]      ), //o
    .io_popOccupancy               (system_dma_logic_io_outputs_0_queue_io_popOccupancy[7:0]       ), //o
    .CLKOUT0                       (clocking_pll_CLKOUT0                                           ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset                                     ), //i
    .CLKOUT6                       (clocking_pll_CLKOUT6                                           ), //i
    .vgaCd_logic_outputReset       (vgaCd_logic_outputReset                                        )  //i
  );
  BmbBsbToDeltaSigma system_audioOut_logic (
    .io_ctrl_cmd_valid                       (system_bmbPeripheral_bmb_decoder_io_outputs_8_cmd_valid                          ), //i
    .io_ctrl_cmd_ready                       (system_audioOut_logic_io_ctrl_cmd_ready                                          ), //o
    .io_ctrl_cmd_payload_last                (system_bmbPeripheral_bmb_decoder_io_outputs_8_cmd_payload_last                   ), //i
    .io_ctrl_cmd_payload_fragment_source     (system_bmbPeripheral_bmb_decoder_io_outputs_8_cmd_payload_fragment_source        ), //i
    .io_ctrl_cmd_payload_fragment_opcode     (system_bmbPeripheral_bmb_decoder_io_outputs_8_cmd_payload_fragment_opcode        ), //i
    .io_ctrl_cmd_payload_fragment_address    (_zz_424[11:0]                                                                    ), //i
    .io_ctrl_cmd_payload_fragment_length     (system_bmbPeripheral_bmb_decoder_io_outputs_8_cmd_payload_fragment_length[1:0]   ), //i
    .io_ctrl_cmd_payload_fragment_data       (system_bmbPeripheral_bmb_decoder_io_outputs_8_cmd_payload_fragment_data[31:0]    ), //i
    .io_ctrl_cmd_payload_fragment_mask       (system_bmbPeripheral_bmb_decoder_io_outputs_8_cmd_payload_fragment_mask[3:0]     ), //i
    .io_ctrl_cmd_payload_fragment_context    (system_bmbPeripheral_bmb_decoder_io_outputs_8_cmd_payload_fragment_context[6:0]  ), //i
    .io_ctrl_rsp_valid                       (system_audioOut_logic_io_ctrl_rsp_valid                                          ), //o
    .io_ctrl_rsp_ready                       (system_bmbPeripheral_bmb_decoder_io_outputs_8_rsp_ready                          ), //i
    .io_ctrl_rsp_payload_last                (system_audioOut_logic_io_ctrl_rsp_payload_last                                   ), //o
    .io_ctrl_rsp_payload_fragment_source     (system_audioOut_logic_io_ctrl_rsp_payload_fragment_source                        ), //o
    .io_ctrl_rsp_payload_fragment_opcode     (system_audioOut_logic_io_ctrl_rsp_payload_fragment_opcode                        ), //o
    .io_ctrl_rsp_payload_fragment_data       (system_audioOut_logic_io_ctrl_rsp_payload_fragment_data[31:0]                    ), //o
    .io_ctrl_rsp_payload_fragment_context    (system_audioOut_logic_io_ctrl_rsp_payload_fragment_context[6:0]                  ), //o
    .io_input_valid                          (system_dma_logic_io_outputs_1_valid                                              ), //i
    .io_input_ready                          (system_audioOut_logic_io_input_ready                                             ), //o
    .io_input_payload_data                   (system_dma_logic_io_outputs_1_payload_data[31:0]                                 ), //i
    .io_input_payload_mask                   (system_dma_logic_io_outputs_1_payload_mask[3:0]                                  ), //i
    .io_input_payload_last                   (system_dma_logic_io_outputs_1_payload_last                                       ), //i
    .io_outputs                              (system_audioOut_logic_io_outputs[1:0]                                            ), //o
    .CLKOUT0                                 (clocking_pll_CLKOUT0                                                             ), //i
    .systemCd_logic_outputReset              (systemCd_logic_outputReset                                                       )  //i
  );
  BmbOnChipRam system_ramA_logic (
    .io_bus_cmd_valid                       (system_bmbPeripheral_bmb_decoder_io_outputs_9_cmd_valid                          ), //i
    .io_bus_cmd_ready                       (system_ramA_logic_io_bus_cmd_ready                                               ), //o
    .io_bus_cmd_payload_last                (system_bmbPeripheral_bmb_decoder_io_outputs_9_cmd_payload_last                   ), //i
    .io_bus_cmd_payload_fragment_source     (system_bmbPeripheral_bmb_decoder_io_outputs_9_cmd_payload_fragment_source        ), //i
    .io_bus_cmd_payload_fragment_opcode     (system_bmbPeripheral_bmb_decoder_io_outputs_9_cmd_payload_fragment_opcode        ), //i
    .io_bus_cmd_payload_fragment_address    (_zz_425[12:0]                                                                    ), //i
    .io_bus_cmd_payload_fragment_length     (system_bmbPeripheral_bmb_decoder_io_outputs_9_cmd_payload_fragment_length[1:0]   ), //i
    .io_bus_cmd_payload_fragment_data       (system_bmbPeripheral_bmb_decoder_io_outputs_9_cmd_payload_fragment_data[31:0]    ), //i
    .io_bus_cmd_payload_fragment_mask       (system_bmbPeripheral_bmb_decoder_io_outputs_9_cmd_payload_fragment_mask[3:0]     ), //i
    .io_bus_cmd_payload_fragment_context    (system_bmbPeripheral_bmb_decoder_io_outputs_9_cmd_payload_fragment_context[6:0]  ), //i
    .io_bus_rsp_valid                       (system_ramA_logic_io_bus_rsp_valid                                               ), //o
    .io_bus_rsp_ready                       (system_bmbPeripheral_bmb_decoder_io_outputs_9_rsp_ready                          ), //i
    .io_bus_rsp_payload_last                (system_ramA_logic_io_bus_rsp_payload_last                                        ), //o
    .io_bus_rsp_payload_fragment_source     (system_ramA_logic_io_bus_rsp_payload_fragment_source                             ), //o
    .io_bus_rsp_payload_fragment_opcode     (system_ramA_logic_io_bus_rsp_payload_fragment_opcode                             ), //o
    .io_bus_rsp_payload_fragment_data       (system_ramA_logic_io_bus_rsp_payload_fragment_data[31:0]                         ), //o
    .io_bus_rsp_payload_fragment_context    (system_ramA_logic_io_bus_rsp_payload_fragment_context[6:0]                       ), //o
    .CLKOUT0                                (clocking_pll_CLKOUT0                                                             ), //i
    .systemCd_logic_outputReset             (systemCd_logic_outputReset                                                       )  //i
  );
  STARTUPE2 #(
    .PROG_USR("FALSE"),
    .SIM_CCLK_FREQ(0.0) 
  ) startupe2_1 (
    .CFGCLK       (startupe2_1_CFGCLK      ), //o
    .CFGMCLK      (startupe2_1_CFGMCLK     ), //o
    .EOS          (startupe2_1_EOS         ), //o
    .PREQ         (startupe2_1_PREQ        ), //o
    .CLK          (_zz_426                 ), //i
    .GSR          (_zz_427                 ), //i
    .GTS          (_zz_428                 ), //i
    .KEYCLEARB    (_zz_429                 ), //i
    .PACK         (_zz_430                 ), //i
    .USRCCLKO     (system_spiA_flash_sclk  ), //i
    .USRCCLKTS    (_zz_431                 ), //i
    .USRDONEO     (_zz_432                 ), //i
    .USRDONETS    (_zz_433                 )  //i
  );
  BmbDecoder_1 system_dma_writeSg_decoder (
    .io_input_cmd_valid                           (system_dma_logic_io_sgWrite_cmd_valid                                            ), //i
    .io_input_cmd_ready                           (system_dma_writeSg_decoder_io_input_cmd_ready                                    ), //o
    .io_input_cmd_payload_last                    (system_dma_logic_io_sgWrite_cmd_payload_last                                     ), //i
    .io_input_cmd_payload_fragment_opcode         (system_dma_logic_io_sgWrite_cmd_payload_fragment_opcode                          ), //i
    .io_input_cmd_payload_fragment_address        (system_dma_logic_io_sgWrite_cmd_payload_fragment_address[31:0]                   ), //i
    .io_input_cmd_payload_fragment_length         (system_dma_logic_io_sgWrite_cmd_payload_fragment_length[1:0]                     ), //i
    .io_input_cmd_payload_fragment_data           (system_dma_logic_io_sgWrite_cmd_payload_fragment_data[63:0]                      ), //i
    .io_input_cmd_payload_fragment_mask           (system_dma_logic_io_sgWrite_cmd_payload_fragment_mask[7:0]                       ), //i
    .io_input_rsp_valid                           (system_dma_writeSg_decoder_io_input_rsp_valid                                    ), //o
    .io_input_rsp_ready                           (system_dma_logic_io_sgWrite_rsp_ready                                            ), //i
    .io_input_rsp_payload_last                    (system_dma_writeSg_decoder_io_input_rsp_payload_last                             ), //o
    .io_input_rsp_payload_fragment_opcode         (system_dma_writeSg_decoder_io_input_rsp_payload_fragment_opcode                  ), //o
    .io_outputs_0_cmd_valid                       (system_dma_writeSg_decoder_io_outputs_0_cmd_valid                                ), //o
    .io_outputs_0_cmd_ready                       (system_fabric_dBusCoherent_bmb_syncRemover_io_input_cmd_ready                    ), //i
    .io_outputs_0_cmd_payload_last                (system_dma_writeSg_decoder_io_outputs_0_cmd_payload_last                         ), //o
    .io_outputs_0_cmd_payload_fragment_opcode     (system_dma_writeSg_decoder_io_outputs_0_cmd_payload_fragment_opcode              ), //o
    .io_outputs_0_cmd_payload_fragment_address    (system_dma_writeSg_decoder_io_outputs_0_cmd_payload_fragment_address[31:0]       ), //o
    .io_outputs_0_cmd_payload_fragment_length     (system_dma_writeSg_decoder_io_outputs_0_cmd_payload_fragment_length[1:0]         ), //o
    .io_outputs_0_cmd_payload_fragment_data       (system_dma_writeSg_decoder_io_outputs_0_cmd_payload_fragment_data[63:0]          ), //o
    .io_outputs_0_cmd_payload_fragment_mask       (system_dma_writeSg_decoder_io_outputs_0_cmd_payload_fragment_mask[7:0]           ), //o
    .io_outputs_0_rsp_valid                       (system_fabric_dBusCoherent_bmb_syncRemover_io_input_rsp_valid                    ), //i
    .io_outputs_0_rsp_ready                       (system_dma_writeSg_decoder_io_outputs_0_rsp_ready                                ), //o
    .io_outputs_0_rsp_payload_last                (system_fabric_dBusCoherent_bmb_syncRemover_io_input_rsp_payload_last             ), //i
    .io_outputs_0_rsp_payload_fragment_opcode     (system_fabric_dBusCoherent_bmb_syncRemover_io_input_rsp_payload_fragment_opcode  )  //i
  );
  BmbSyncRemover system_fabric_dBusCoherent_bmb_syncRemover (
    .io_input_cmd_valid                        (system_dma_writeSg_decoder_io_outputs_0_cmd_valid                                        ), //i
    .io_input_cmd_ready                        (system_fabric_dBusCoherent_bmb_syncRemover_io_input_cmd_ready                            ), //o
    .io_input_cmd_payload_last                 (system_dma_writeSg_decoder_io_outputs_0_cmd_payload_last                                 ), //i
    .io_input_cmd_payload_fragment_opcode      (system_dma_writeSg_decoder_io_outputs_0_cmd_payload_fragment_opcode                      ), //i
    .io_input_cmd_payload_fragment_address     (system_dma_writeSg_decoder_io_outputs_0_cmd_payload_fragment_address[31:0]               ), //i
    .io_input_cmd_payload_fragment_length      (system_dma_writeSg_decoder_io_outputs_0_cmd_payload_fragment_length[1:0]                 ), //i
    .io_input_cmd_payload_fragment_data        (system_dma_writeSg_decoder_io_outputs_0_cmd_payload_fragment_data[63:0]                  ), //i
    .io_input_cmd_payload_fragment_mask        (system_dma_writeSg_decoder_io_outputs_0_cmd_payload_fragment_mask[7:0]                   ), //i
    .io_input_rsp_valid                        (system_fabric_dBusCoherent_bmb_syncRemover_io_input_rsp_valid                            ), //o
    .io_input_rsp_ready                        (system_dma_writeSg_decoder_io_outputs_0_rsp_ready                                        ), //i
    .io_input_rsp_payload_last                 (system_fabric_dBusCoherent_bmb_syncRemover_io_input_rsp_payload_last                     ), //o
    .io_input_rsp_payload_fragment_opcode      (system_fabric_dBusCoherent_bmb_syncRemover_io_input_rsp_payload_fragment_opcode          ), //o
    .io_input_rsp_payload_fragment_data        (system_fabric_dBusCoherent_bmb_syncRemover_io_input_rsp_payload_fragment_data[63:0]      ), //o
    .io_output_cmd_valid                       (system_fabric_dBusCoherent_bmb_syncRemover_io_output_cmd_valid                           ), //o
    .io_output_cmd_ready                       (system_fabric_dBusCoherent_bmb_arbiter_io_inputs_0_cmd_ready                             ), //i
    .io_output_cmd_payload_last                (system_fabric_dBusCoherent_bmb_syncRemover_io_output_cmd_payload_last                    ), //o
    .io_output_cmd_payload_fragment_opcode     (system_fabric_dBusCoherent_bmb_syncRemover_io_output_cmd_payload_fragment_opcode         ), //o
    .io_output_cmd_payload_fragment_address    (system_fabric_dBusCoherent_bmb_syncRemover_io_output_cmd_payload_fragment_address[31:0]  ), //o
    .io_output_cmd_payload_fragment_length     (system_fabric_dBusCoherent_bmb_syncRemover_io_output_cmd_payload_fragment_length[1:0]    ), //o
    .io_output_cmd_payload_fragment_data       (system_fabric_dBusCoherent_bmb_syncRemover_io_output_cmd_payload_fragment_data[63:0]     ), //o
    .io_output_cmd_payload_fragment_mask       (system_fabric_dBusCoherent_bmb_syncRemover_io_output_cmd_payload_fragment_mask[7:0]      ), //o
    .io_output_rsp_valid                       (system_fabric_dBusCoherent_bmb_arbiter_io_inputs_0_rsp_valid                             ), //i
    .io_output_rsp_ready                       (system_fabric_dBusCoherent_bmb_syncRemover_io_output_rsp_ready                           ), //o
    .io_output_rsp_payload_last                (system_fabric_dBusCoherent_bmb_arbiter_io_inputs_0_rsp_payload_last                      ), //i
    .io_output_rsp_payload_fragment_opcode     (system_fabric_dBusCoherent_bmb_arbiter_io_inputs_0_rsp_payload_fragment_opcode           ), //i
    .io_output_rsp_payload_fragment_data       (system_fabric_dBusCoherent_bmb_arbiter_io_inputs_0_rsp_payload_fragment_data[63:0]       ), //i
    .io_output_sync_valid                      (system_fabric_dBusCoherent_bmb_arbiter_io_inputs_0_sync_valid                            ), //i
    .io_output_sync_ready                      (system_fabric_dBusCoherent_bmb_syncRemover_io_output_sync_ready                          ), //o
    .CLKOUT0                                   (clocking_pll_CLKOUT0                                                                     ), //i
    .systemCd_logic_outputReset                (systemCd_logic_outputReset                                                               )  //i
  );
  CtrlWithoutPhyBmb system_sdramA_logic (
    .io_bmb_0_cmd_valid                       (system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_m2sPipe_valid                           ), //i
    .io_bmb_0_cmd_ready                       (system_sdramA_logic_io_bmb_0_cmd_ready                                                   ), //o
    .io_bmb_0_cmd_payload_last                (system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_m2sPipe_payload_last                    ), //i
    .io_bmb_0_cmd_payload_fragment_source     (system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_m2sPipe_payload_fragment_source[4:0]    ), //i
    .io_bmb_0_cmd_payload_fragment_opcode     (system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_m2sPipe_payload_fragment_opcode         ), //i
    .io_bmb_0_cmd_payload_fragment_address    (system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_m2sPipe_payload_fragment_address[26:0]  ), //i
    .io_bmb_0_cmd_payload_fragment_length     (system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_m2sPipe_payload_fragment_length[5:0]    ), //i
    .io_bmb_0_cmd_payload_fragment_data       (system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_m2sPipe_payload_fragment_data[63:0]     ), //i
    .io_bmb_0_cmd_payload_fragment_mask       (system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_m2sPipe_payload_fragment_mask[7:0]      ), //i
    .io_bmb_0_rsp_valid                       (system_sdramA_logic_io_bmb_0_rsp_valid                                                   ), //o
    .io_bmb_0_rsp_ready                       (_zz_367                                                                                  ), //i
    .io_bmb_0_rsp_payload_last                (system_sdramA_logic_io_bmb_0_rsp_payload_last                                            ), //o
    .io_bmb_0_rsp_payload_fragment_source     (system_sdramA_logic_io_bmb_0_rsp_payload_fragment_source[4:0]                            ), //o
    .io_bmb_0_rsp_payload_fragment_opcode     (system_sdramA_logic_io_bmb_0_rsp_payload_fragment_opcode                                 ), //o
    .io_bmb_0_rsp_payload_fragment_data       (system_sdramA_logic_io_bmb_0_rsp_payload_fragment_data[63:0]                             ), //o
    .io_ctrl_cmd_valid                        (sdramDomain_bmbCc_bmb_decoder_io_outputs_1_cmd_valid                                     ), //i
    .io_ctrl_cmd_ready                        (system_sdramA_logic_io_ctrl_cmd_ready                                                    ), //o
    .io_ctrl_cmd_payload_last                 (sdramDomain_bmbCc_bmb_decoder_io_outputs_1_cmd_payload_last                              ), //i
    .io_ctrl_cmd_payload_fragment_source      (sdramDomain_bmbCc_bmb_decoder_io_outputs_1_cmd_payload_fragment_source                   ), //i
    .io_ctrl_cmd_payload_fragment_opcode      (sdramDomain_bmbCc_bmb_decoder_io_outputs_1_cmd_payload_fragment_opcode                   ), //i
    .io_ctrl_cmd_payload_fragment_address     (_zz_434[11:0]                                                                            ), //i
    .io_ctrl_cmd_payload_fragment_length      (sdramDomain_bmbCc_bmb_decoder_io_outputs_1_cmd_payload_fragment_length[1:0]              ), //i
    .io_ctrl_cmd_payload_fragment_data        (sdramDomain_bmbCc_bmb_decoder_io_outputs_1_cmd_payload_fragment_data[31:0]               ), //i
    .io_ctrl_cmd_payload_fragment_mask        (sdramDomain_bmbCc_bmb_decoder_io_outputs_1_cmd_payload_fragment_mask[3:0]                ), //i
    .io_ctrl_cmd_payload_fragment_context     (sdramDomain_bmbCc_bmb_decoder_io_outputs_1_cmd_payload_fragment_context[6:0]             ), //i
    .io_ctrl_rsp_valid                        (system_sdramA_logic_io_ctrl_rsp_valid                                                    ), //o
    .io_ctrl_rsp_ready                        (sdramDomain_bmbCc_bmb_decoder_io_outputs_1_rsp_ready                                     ), //i
    .io_ctrl_rsp_payload_last                 (system_sdramA_logic_io_ctrl_rsp_payload_last                                             ), //o
    .io_ctrl_rsp_payload_fragment_source      (system_sdramA_logic_io_ctrl_rsp_payload_fragment_source                                  ), //o
    .io_ctrl_rsp_payload_fragment_opcode      (system_sdramA_logic_io_ctrl_rsp_payload_fragment_opcode                                  ), //o
    .io_ctrl_rsp_payload_fragment_data        (system_sdramA_logic_io_ctrl_rsp_payload_fragment_data[31:0]                              ), //o
    .io_ctrl_rsp_payload_fragment_context     (system_sdramA_logic_io_ctrl_rsp_payload_fragment_context[6:0]                            ), //o
    .io_phy_phases_0_CASn                     (system_sdramA_logic_io_phy_phases_0_CASn                                                 ), //o
    .io_phy_phases_0_CKE                      (system_sdramA_logic_io_phy_phases_0_CKE                                                  ), //o
    .io_phy_phases_0_CSn                      (system_sdramA_logic_io_phy_phases_0_CSn                                                  ), //o
    .io_phy_phases_0_RASn                     (system_sdramA_logic_io_phy_phases_0_RASn                                                 ), //o
    .io_phy_phases_0_WEn                      (system_sdramA_logic_io_phy_phases_0_WEn                                                  ), //o
    .io_phy_phases_0_ODT                      (system_sdramA_logic_io_phy_phases_0_ODT                                                  ), //o
    .io_phy_phases_0_DM_0                     (system_sdramA_logic_io_phy_phases_0_DM_0[1:0]                                            ), //o
    .io_phy_phases_0_DM_1                     (system_sdramA_logic_io_phy_phases_0_DM_1[1:0]                                            ), //o
    .io_phy_phases_0_DQw_0                    (system_sdramA_logic_io_phy_phases_0_DQw_0[15:0]                                          ), //o
    .io_phy_phases_0_DQw_1                    (system_sdramA_logic_io_phy_phases_0_DQw_1[15:0]                                          ), //o
    .io_phy_phases_0_DQr_0                    (sdramDomain_phyA_logic_phy_io_ctrl_phases_0_DQr_0[15:0]                                  ), //i
    .io_phy_phases_0_DQr_1                    (sdramDomain_phyA_logic_phy_io_ctrl_phases_0_DQr_1[15:0]                                  ), //i
    .io_phy_phases_1_CASn                     (system_sdramA_logic_io_phy_phases_1_CASn                                                 ), //o
    .io_phy_phases_1_CKE                      (system_sdramA_logic_io_phy_phases_1_CKE                                                  ), //o
    .io_phy_phases_1_CSn                      (system_sdramA_logic_io_phy_phases_1_CSn                                                  ), //o
    .io_phy_phases_1_RASn                     (system_sdramA_logic_io_phy_phases_1_RASn                                                 ), //o
    .io_phy_phases_1_WEn                      (system_sdramA_logic_io_phy_phases_1_WEn                                                  ), //o
    .io_phy_phases_1_ODT                      (system_sdramA_logic_io_phy_phases_1_ODT                                                  ), //o
    .io_phy_phases_1_DM_0                     (system_sdramA_logic_io_phy_phases_1_DM_0[1:0]                                            ), //o
    .io_phy_phases_1_DM_1                     (system_sdramA_logic_io_phy_phases_1_DM_1[1:0]                                            ), //o
    .io_phy_phases_1_DQw_0                    (system_sdramA_logic_io_phy_phases_1_DQw_0[15:0]                                          ), //o
    .io_phy_phases_1_DQw_1                    (system_sdramA_logic_io_phy_phases_1_DQw_1[15:0]                                          ), //o
    .io_phy_phases_1_DQr_0                    (sdramDomain_phyA_logic_phy_io_ctrl_phases_1_DQr_0[15:0]                                  ), //i
    .io_phy_phases_1_DQr_1                    (sdramDomain_phyA_logic_phy_io_ctrl_phases_1_DQr_1[15:0]                                  ), //i
    .io_phy_ADDR                              (system_sdramA_logic_io_phy_ADDR[12:0]                                                    ), //o
    .io_phy_BA                                (system_sdramA_logic_io_phy_BA[2:0]                                                       ), //o
    .io_phy_DQS_preamble                      (system_sdramA_logic_io_phy_DQS_preamble                                                  ), //o
    .io_phy_DQS_active                        (system_sdramA_logic_io_phy_DQS_active                                                    ), //o
    .io_phy_DQS_postamble                     (system_sdramA_logic_io_phy_DQS_postamble                                                 ), //o
    .io_phy_writeEnable                       (system_sdramA_logic_io_phy_writeEnable                                                   ), //o
    .io_phy_readEnable                        (system_sdramA_logic_io_phy_readEnable                                                    ), //o
    .io_phy_readValid                         (sdramDomain_phyA_logic_phy_io_ctrl_readValid                                             ), //i
    .CLKOUT0                                  (clocking_pll_CLKOUT0                                                                     ), //i
    .systemCd_logic_outputReset               (systemCd_logic_outputReset                                                               ), //i
    .CLKOUT1                                  (clocking_pll_CLKOUT1                                                                     ), //i
    .sdramCd_logic_outputReset                (sdramCd_logic_outputReset                                                                )  //i
  );
  XilinxS7Phy sdramDomain_phyA_logic_phy (
    .io_ctrl_phases_0_CASn        (system_sdramA_logic_io_phy_phases_0_CASn                 ), //i
    .io_ctrl_phases_0_CKE         (system_sdramA_logic_io_phy_phases_0_CKE                  ), //i
    .io_ctrl_phases_0_CSn         (system_sdramA_logic_io_phy_phases_0_CSn                  ), //i
    .io_ctrl_phases_0_RASn        (system_sdramA_logic_io_phy_phases_0_RASn                 ), //i
    .io_ctrl_phases_0_WEn         (system_sdramA_logic_io_phy_phases_0_WEn                  ), //i
    .io_ctrl_phases_0_ODT         (system_sdramA_logic_io_phy_phases_0_ODT                  ), //i
    .io_ctrl_phases_0_DM_0        (system_sdramA_logic_io_phy_phases_0_DM_0[1:0]            ), //i
    .io_ctrl_phases_0_DM_1        (system_sdramA_logic_io_phy_phases_0_DM_1[1:0]            ), //i
    .io_ctrl_phases_0_DQw_0       (system_sdramA_logic_io_phy_phases_0_DQw_0[15:0]          ), //i
    .io_ctrl_phases_0_DQw_1       (system_sdramA_logic_io_phy_phases_0_DQw_1[15:0]          ), //i
    .io_ctrl_phases_0_DQr_0       (sdramDomain_phyA_logic_phy_io_ctrl_phases_0_DQr_0[15:0]  ), //o
    .io_ctrl_phases_0_DQr_1       (sdramDomain_phyA_logic_phy_io_ctrl_phases_0_DQr_1[15:0]  ), //o
    .io_ctrl_phases_1_CASn        (system_sdramA_logic_io_phy_phases_1_CASn                 ), //i
    .io_ctrl_phases_1_CKE         (system_sdramA_logic_io_phy_phases_1_CKE                  ), //i
    .io_ctrl_phases_1_CSn         (system_sdramA_logic_io_phy_phases_1_CSn                  ), //i
    .io_ctrl_phases_1_RASn        (system_sdramA_logic_io_phy_phases_1_RASn                 ), //i
    .io_ctrl_phases_1_WEn         (system_sdramA_logic_io_phy_phases_1_WEn                  ), //i
    .io_ctrl_phases_1_ODT         (system_sdramA_logic_io_phy_phases_1_ODT                  ), //i
    .io_ctrl_phases_1_DM_0        (system_sdramA_logic_io_phy_phases_1_DM_0[1:0]            ), //i
    .io_ctrl_phases_1_DM_1        (system_sdramA_logic_io_phy_phases_1_DM_1[1:0]            ), //i
    .io_ctrl_phases_1_DQw_0       (system_sdramA_logic_io_phy_phases_1_DQw_0[15:0]          ), //i
    .io_ctrl_phases_1_DQw_1       (system_sdramA_logic_io_phy_phases_1_DQw_1[15:0]          ), //i
    .io_ctrl_phases_1_DQr_0       (sdramDomain_phyA_logic_phy_io_ctrl_phases_1_DQr_0[15:0]  ), //o
    .io_ctrl_phases_1_DQr_1       (sdramDomain_phyA_logic_phy_io_ctrl_phases_1_DQr_1[15:0]  ), //o
    .io_ctrl_ADDR                 (system_sdramA_logic_io_phy_ADDR[12:0]                    ), //i
    .io_ctrl_BA                   (system_sdramA_logic_io_phy_BA[2:0]                       ), //i
    .io_ctrl_DQS_preamble         (system_sdramA_logic_io_phy_DQS_preamble                  ), //i
    .io_ctrl_DQS_active           (system_sdramA_logic_io_phy_DQS_active                    ), //i
    .io_ctrl_DQS_postamble        (system_sdramA_logic_io_phy_DQS_postamble                 ), //i
    .io_ctrl_writeEnable          (system_sdramA_logic_io_phy_writeEnable                   ), //i
    .io_ctrl_readEnable           (system_sdramA_logic_io_phy_readEnable                    ), //i
    .io_ctrl_readValid            (sdramDomain_phyA_logic_phy_io_ctrl_readValid             ), //o
    .io_sdram_ADDR                (sdramDomain_phyA_logic_phy_io_sdram_ADDR[12:0]           ), //o
    .io_sdram_BA                  (sdramDomain_phyA_logic_phy_io_sdram_BA[2:0]              ), //o
    .io_sdram_CASn                (sdramDomain_phyA_logic_phy_io_sdram_CASn                 ), //o
    .io_sdram_CKE                 (sdramDomain_phyA_logic_phy_io_sdram_CKE                  ), //o
    .io_sdram_CSn                 (sdramDomain_phyA_logic_phy_io_sdram_CSn                  ), //o
    .io_sdram_RASn                (sdramDomain_phyA_logic_phy_io_sdram_RASn                 ), //o
    .io_sdram_WEn                 (sdramDomain_phyA_logic_phy_io_sdram_WEn                  ), //o
    .io_sdram_CK                  (sdramDomain_phyA_logic_phy_io_sdram_CK                   ), //o
    .io_sdram_CKn                 (sdramDomain_phyA_logic_phy_io_sdram_CKn                  ), //o
    .io_sdram_ODT                 (sdramDomain_phyA_logic_phy_io_sdram_ODT                  ), //o
    .io_sdram_DM                  (sdramDomain_phyA_logic_phy_io_sdram_DM[1:0]              ), //o
    .io_sdram_DQ                  (sdramDomain_phyA_sdram_DQ[15:0]                          ), //~
    .io_sdram_DQS                 (sdramDomain_phyA_sdram_DQS[1:0]                          ), //~
    .io_sdram_DQSn                (sdramDomain_phyA_sdram_DQSn[1:0]                         ), //~
    .sdramCd_logic_outputReset    (sdramCd_logic_outputReset                                ), //i
    .CLKOUT4                      (clocking_pll_CLKOUT4                                     ), //i
    .CLKOUT2                      (clocking_pll_CLKOUT2                                     ), //i
    .CLKOUT3                      (clocking_pll_CLKOUT3                                     ), //i
    .CLKOUT1                      (clocking_pll_CLKOUT1                                     ), //i
    .idelayValueIn                (_zz_334[4:0]                                             ), //i
    .dq_0_idelayLoad              (_zz_335                                                  ), //i
    .dq_0_bitsleep                (_zz_351                                                  ), //i
    .dq_1_idelayLoad              (_zz_336                                                  ), //i
    .dq_1_bitsleep                (_zz_352                                                  ), //i
    .dq_2_idelayLoad              (_zz_337                                                  ), //i
    .dq_2_bitsleep                (_zz_353                                                  ), //i
    .dq_3_idelayLoad              (_zz_338                                                  ), //i
    .dq_3_bitsleep                (_zz_354                                                  ), //i
    .dq_4_idelayLoad              (_zz_339                                                  ), //i
    .dq_4_bitsleep                (_zz_355                                                  ), //i
    .dq_5_idelayLoad              (_zz_340                                                  ), //i
    .dq_5_bitsleep                (_zz_356                                                  ), //i
    .dq_6_idelayLoad              (_zz_341                                                  ), //i
    .dq_6_bitsleep                (_zz_357                                                  ), //i
    .dq_7_idelayLoad              (_zz_342                                                  ), //i
    .dq_7_bitsleep                (_zz_358                                                  ), //i
    .dq_8_idelayLoad              (_zz_343                                                  ), //i
    .dq_8_bitsleep                (_zz_359                                                  ), //i
    .dq_9_idelayLoad              (_zz_344                                                  ), //i
    .dq_9_bitsleep                (_zz_360                                                  ), //i
    .dq_10_idelayLoad             (_zz_345                                                  ), //i
    .dq_10_bitsleep               (_zz_361                                                  ), //i
    .dq_11_idelayLoad             (_zz_346                                                  ), //i
    .dq_11_bitsleep               (_zz_362                                                  ), //i
    .dq_12_idelayLoad             (_zz_347                                                  ), //i
    .dq_12_bitsleep               (_zz_363                                                  ), //i
    .dq_13_idelayLoad             (_zz_348                                                  ), //i
    .dq_13_bitsleep               (_zz_364                                                  ), //i
    .dq_14_idelayLoad             (_zz_349                                                  ), //i
    .dq_14_bitsleep               (_zz_365                                                  ), //i
    .dq_15_idelayLoad             (_zz_350                                                  ), //i
    .dq_15_bitsleep               (_zz_366                                                  )  //i
  );
  BmbArbiter_1 system_sdramA0_bmb_arbiter (
    .io_inputs_0_cmd_valid                       (system_fabric_dBus_bmb_decoder_io_outputs_0_cmd_valid                         ), //i
    .io_inputs_0_cmd_ready                       (system_sdramA0_bmb_arbiter_io_inputs_0_cmd_ready                              ), //o
    .io_inputs_0_cmd_payload_last                (system_fabric_dBus_bmb_decoder_io_outputs_0_cmd_payload_last                  ), //i
    .io_inputs_0_cmd_payload_fragment_source     (system_fabric_dBus_bmb_decoder_io_outputs_0_cmd_payload_fragment_source[3:0]  ), //i
    .io_inputs_0_cmd_payload_fragment_opcode     (system_fabric_dBus_bmb_decoder_io_outputs_0_cmd_payload_fragment_opcode       ), //i
    .io_inputs_0_cmd_payload_fragment_address    (_zz_435[26:0]                                                                 ), //i
    .io_inputs_0_cmd_payload_fragment_length     (system_fabric_dBus_bmb_decoder_io_outputs_0_cmd_payload_fragment_length[5:0]  ), //i
    .io_inputs_0_cmd_payload_fragment_data       (system_fabric_dBus_bmb_decoder_io_outputs_0_cmd_payload_fragment_data[63:0]   ), //i
    .io_inputs_0_cmd_payload_fragment_mask       (system_fabric_dBus_bmb_decoder_io_outputs_0_cmd_payload_fragment_mask[7:0]    ), //i
    .io_inputs_0_rsp_valid                       (system_sdramA0_bmb_arbiter_io_inputs_0_rsp_valid                              ), //o
    .io_inputs_0_rsp_ready                       (system_fabric_dBus_bmb_decoder_io_outputs_0_rsp_ready                         ), //i
    .io_inputs_0_rsp_payload_last                (system_sdramA0_bmb_arbiter_io_inputs_0_rsp_payload_last                       ), //o
    .io_inputs_0_rsp_payload_fragment_source     (system_sdramA0_bmb_arbiter_io_inputs_0_rsp_payload_fragment_source[3:0]       ), //o
    .io_inputs_0_rsp_payload_fragment_opcode     (system_sdramA0_bmb_arbiter_io_inputs_0_rsp_payload_fragment_opcode            ), //o
    .io_inputs_0_rsp_payload_fragment_data       (system_sdramA0_bmb_arbiter_io_inputs_0_rsp_payload_fragment_data[63:0]        ), //o
    .io_inputs_1_cmd_valid                       (system_fabric_iBus_bmb_decoder_io_outputs_0_cmd_valid                         ), //i
    .io_inputs_1_cmd_ready                       (system_sdramA0_bmb_arbiter_io_inputs_1_cmd_ready                              ), //o
    .io_inputs_1_cmd_payload_last                (system_fabric_iBus_bmb_decoder_io_outputs_0_cmd_payload_last                  ), //i
    .io_inputs_1_cmd_payload_fragment_source     (system_fabric_iBus_bmb_decoder_io_outputs_0_cmd_payload_fragment_source       ), //i
    .io_inputs_1_cmd_payload_fragment_opcode     (system_fabric_iBus_bmb_decoder_io_outputs_0_cmd_payload_fragment_opcode       ), //i
    .io_inputs_1_cmd_payload_fragment_address    (_zz_436[26:0]                                                                 ), //i
    .io_inputs_1_cmd_payload_fragment_length     (system_fabric_iBus_bmb_decoder_io_outputs_0_cmd_payload_fragment_length[5:0]  ), //i
    .io_inputs_1_cmd_payload_fragment_data       (_zz_437[63:0]                                                                 ), //i
    .io_inputs_1_cmd_payload_fragment_mask       (_zz_438[7:0]                                                                  ), //i
    .io_inputs_1_rsp_valid                       (system_sdramA0_bmb_arbiter_io_inputs_1_rsp_valid                              ), //o
    .io_inputs_1_rsp_ready                       (system_fabric_iBus_bmb_decoder_io_outputs_0_rsp_ready                         ), //i
    .io_inputs_1_rsp_payload_last                (system_sdramA0_bmb_arbiter_io_inputs_1_rsp_payload_last                       ), //o
    .io_inputs_1_rsp_payload_fragment_source     (system_sdramA0_bmb_arbiter_io_inputs_1_rsp_payload_fragment_source            ), //o
    .io_inputs_1_rsp_payload_fragment_opcode     (system_sdramA0_bmb_arbiter_io_inputs_1_rsp_payload_fragment_opcode            ), //o
    .io_inputs_1_rsp_payload_fragment_data       (system_sdramA0_bmb_arbiter_io_inputs_1_rsp_payload_fragment_data[63:0]        ), //o
    .io_output_cmd_valid                         (system_sdramA0_bmb_arbiter_io_output_cmd_valid                                ), //o
    .io_output_cmd_ready                         (_zz_439                                                                       ), //i
    .io_output_cmd_payload_last                  (system_sdramA0_bmb_arbiter_io_output_cmd_payload_last                         ), //o
    .io_output_cmd_payload_fragment_source       (system_sdramA0_bmb_arbiter_io_output_cmd_payload_fragment_source[4:0]         ), //o
    .io_output_cmd_payload_fragment_opcode       (system_sdramA0_bmb_arbiter_io_output_cmd_payload_fragment_opcode              ), //o
    .io_output_cmd_payload_fragment_address      (system_sdramA0_bmb_arbiter_io_output_cmd_payload_fragment_address[26:0]       ), //o
    .io_output_cmd_payload_fragment_length       (system_sdramA0_bmb_arbiter_io_output_cmd_payload_fragment_length[5:0]         ), //o
    .io_output_cmd_payload_fragment_data         (system_sdramA0_bmb_arbiter_io_output_cmd_payload_fragment_data[63:0]          ), //o
    .io_output_cmd_payload_fragment_mask         (system_sdramA0_bmb_arbiter_io_output_cmd_payload_fragment_mask[7:0]           ), //o
    .io_output_rsp_valid                         (_zz_368                                                                       ), //i
    .io_output_rsp_ready                         (system_sdramA0_bmb_arbiter_io_output_rsp_ready                                ), //o
    .io_output_rsp_payload_last                  (_zz_370                                                                       ), //i
    .io_output_rsp_payload_fragment_source       (_zz_371[4:0]                                                                  ), //i
    .io_output_rsp_payload_fragment_opcode       (_zz_372                                                                       ), //i
    .io_output_rsp_payload_fragment_data         (_zz_373[63:0]                                                                 ), //i
    .CLKOUT0                                     (clocking_pll_CLKOUT0                                                          ), //i
    .systemCd_logic_outputReset                  (systemCd_logic_outputReset                                                    )  //i
  );
  BmbDecoder_2 sdramDomain_bmbCc_bmb_decoder (
    .io_input_cmd_valid                           (sdramDomain_bmbCc_bmb_cmd_valid                                                ), //i
    .io_input_cmd_ready                           (sdramDomain_bmbCc_bmb_decoder_io_input_cmd_ready                               ), //o
    .io_input_cmd_payload_last                    (sdramDomain_bmbCc_bmb_cmd_payload_last                                         ), //i
    .io_input_cmd_payload_fragment_source         (sdramDomain_bmbCc_bmb_cmd_payload_fragment_source                              ), //i
    .io_input_cmd_payload_fragment_opcode         (sdramDomain_bmbCc_bmb_cmd_payload_fragment_opcode                              ), //i
    .io_input_cmd_payload_fragment_address        (sdramDomain_bmbCc_bmb_cmd_payload_fragment_address[12:0]                       ), //i
    .io_input_cmd_payload_fragment_length         (sdramDomain_bmbCc_bmb_cmd_payload_fragment_length[1:0]                         ), //i
    .io_input_cmd_payload_fragment_data           (sdramDomain_bmbCc_bmb_cmd_payload_fragment_data[31:0]                          ), //i
    .io_input_cmd_payload_fragment_mask           (sdramDomain_bmbCc_bmb_cmd_payload_fragment_mask[3:0]                           ), //i
    .io_input_cmd_payload_fragment_context        (sdramDomain_bmbCc_bmb_cmd_payload_fragment_context[6:0]                        ), //i
    .io_input_rsp_valid                           (sdramDomain_bmbCc_bmb_decoder_io_input_rsp_valid                               ), //o
    .io_input_rsp_ready                           (sdramDomain_bmbCc_bmb_rsp_ready                                                ), //i
    .io_input_rsp_payload_last                    (sdramDomain_bmbCc_bmb_decoder_io_input_rsp_payload_last                        ), //o
    .io_input_rsp_payload_fragment_source         (sdramDomain_bmbCc_bmb_decoder_io_input_rsp_payload_fragment_source             ), //o
    .io_input_rsp_payload_fragment_opcode         (sdramDomain_bmbCc_bmb_decoder_io_input_rsp_payload_fragment_opcode             ), //o
    .io_input_rsp_payload_fragment_data           (sdramDomain_bmbCc_bmb_decoder_io_input_rsp_payload_fragment_data[31:0]         ), //o
    .io_input_rsp_payload_fragment_context        (sdramDomain_bmbCc_bmb_decoder_io_input_rsp_payload_fragment_context[6:0]       ), //o
    .io_outputs_0_cmd_valid                       (sdramDomain_bmbCc_bmb_decoder_io_outputs_0_cmd_valid                           ), //o
    .io_outputs_0_cmd_ready                       (sdramDomain_phyA_logic_ctrl_cmd_ready                                          ), //i
    .io_outputs_0_cmd_payload_last                (sdramDomain_bmbCc_bmb_decoder_io_outputs_0_cmd_payload_last                    ), //o
    .io_outputs_0_cmd_payload_fragment_source     (sdramDomain_bmbCc_bmb_decoder_io_outputs_0_cmd_payload_fragment_source         ), //o
    .io_outputs_0_cmd_payload_fragment_opcode     (sdramDomain_bmbCc_bmb_decoder_io_outputs_0_cmd_payload_fragment_opcode         ), //o
    .io_outputs_0_cmd_payload_fragment_address    (sdramDomain_bmbCc_bmb_decoder_io_outputs_0_cmd_payload_fragment_address[12:0]  ), //o
    .io_outputs_0_cmd_payload_fragment_length     (sdramDomain_bmbCc_bmb_decoder_io_outputs_0_cmd_payload_fragment_length[1:0]    ), //o
    .io_outputs_0_cmd_payload_fragment_data       (sdramDomain_bmbCc_bmb_decoder_io_outputs_0_cmd_payload_fragment_data[31:0]     ), //o
    .io_outputs_0_cmd_payload_fragment_mask       (sdramDomain_bmbCc_bmb_decoder_io_outputs_0_cmd_payload_fragment_mask[3:0]      ), //o
    .io_outputs_0_cmd_payload_fragment_context    (sdramDomain_bmbCc_bmb_decoder_io_outputs_0_cmd_payload_fragment_context[6:0]   ), //o
    .io_outputs_0_rsp_valid                       (sdramDomain_phyA_logic_ctrl_rsp_valid                                          ), //i
    .io_outputs_0_rsp_ready                       (sdramDomain_bmbCc_bmb_decoder_io_outputs_0_rsp_ready                           ), //o
    .io_outputs_0_rsp_payload_last                (sdramDomain_phyA_logic_ctrl_rsp_payload_last                                   ), //i
    .io_outputs_0_rsp_payload_fragment_source     (sdramDomain_phyA_logic_ctrl_rsp_payload_fragment_source                        ), //i
    .io_outputs_0_rsp_payload_fragment_opcode     (sdramDomain_phyA_logic_ctrl_rsp_payload_fragment_opcode                        ), //i
    .io_outputs_0_rsp_payload_fragment_data       (sdramDomain_phyA_logic_ctrl_rsp_payload_fragment_data[31:0]                    ), //i
    .io_outputs_0_rsp_payload_fragment_context    (sdramDomain_phyA_logic_ctrl_rsp_payload_fragment_context[6:0]                  ), //i
    .io_outputs_1_cmd_valid                       (sdramDomain_bmbCc_bmb_decoder_io_outputs_1_cmd_valid                           ), //o
    .io_outputs_1_cmd_ready                       (system_sdramA_logic_io_ctrl_cmd_ready                                          ), //i
    .io_outputs_1_cmd_payload_last                (sdramDomain_bmbCc_bmb_decoder_io_outputs_1_cmd_payload_last                    ), //o
    .io_outputs_1_cmd_payload_fragment_source     (sdramDomain_bmbCc_bmb_decoder_io_outputs_1_cmd_payload_fragment_source         ), //o
    .io_outputs_1_cmd_payload_fragment_opcode     (sdramDomain_bmbCc_bmb_decoder_io_outputs_1_cmd_payload_fragment_opcode         ), //o
    .io_outputs_1_cmd_payload_fragment_address    (sdramDomain_bmbCc_bmb_decoder_io_outputs_1_cmd_payload_fragment_address[12:0]  ), //o
    .io_outputs_1_cmd_payload_fragment_length     (sdramDomain_bmbCc_bmb_decoder_io_outputs_1_cmd_payload_fragment_length[1:0]    ), //o
    .io_outputs_1_cmd_payload_fragment_data       (sdramDomain_bmbCc_bmb_decoder_io_outputs_1_cmd_payload_fragment_data[31:0]     ), //o
    .io_outputs_1_cmd_payload_fragment_mask       (sdramDomain_bmbCc_bmb_decoder_io_outputs_1_cmd_payload_fragment_mask[3:0]      ), //o
    .io_outputs_1_cmd_payload_fragment_context    (sdramDomain_bmbCc_bmb_decoder_io_outputs_1_cmd_payload_fragment_context[6:0]   ), //o
    .io_outputs_1_rsp_valid                       (system_sdramA_logic_io_ctrl_rsp_valid                                          ), //i
    .io_outputs_1_rsp_ready                       (sdramDomain_bmbCc_bmb_decoder_io_outputs_1_rsp_ready                           ), //o
    .io_outputs_1_rsp_payload_last                (system_sdramA_logic_io_ctrl_rsp_payload_last                                   ), //i
    .io_outputs_1_rsp_payload_fragment_source     (system_sdramA_logic_io_ctrl_rsp_payload_fragment_source                        ), //i
    .io_outputs_1_rsp_payload_fragment_opcode     (system_sdramA_logic_io_ctrl_rsp_payload_fragment_opcode                        ), //i
    .io_outputs_1_rsp_payload_fragment_data       (system_sdramA_logic_io_ctrl_rsp_payload_fragment_data[31:0]                    ), //i
    .io_outputs_1_rsp_payload_fragment_context    (system_sdramA_logic_io_ctrl_rsp_payload_fragment_context[6:0]                  ), //i
    .CLKOUT1                                      (clocking_pll_CLKOUT1                                                           ), //i
    .sdramCd_logic_outputReset                    (sdramCd_logic_outputReset                                                      )  //i
  );
  BmbDecoder_3 system_bmbPeripheral_bmb_decoder (
    .io_input_cmd_valid                            (system_bmbPeripheral_bmb_cmd_halfPipe_valid                                        ), //i
    .io_input_cmd_ready                            (system_bmbPeripheral_bmb_decoder_io_input_cmd_ready                                ), //o
    .io_input_cmd_payload_last                     (system_bmbPeripheral_bmb_cmd_halfPipe_payload_last                                 ), //i
    .io_input_cmd_payload_fragment_source          (system_bmbPeripheral_bmb_cmd_halfPipe_payload_fragment_source                      ), //i
    .io_input_cmd_payload_fragment_opcode          (system_bmbPeripheral_bmb_cmd_halfPipe_payload_fragment_opcode                      ), //i
    .io_input_cmd_payload_fragment_address         (system_bmbPeripheral_bmb_cmd_halfPipe_payload_fragment_address[23:0]               ), //i
    .io_input_cmd_payload_fragment_length          (system_bmbPeripheral_bmb_cmd_halfPipe_payload_fragment_length[1:0]                 ), //i
    .io_input_cmd_payload_fragment_data            (system_bmbPeripheral_bmb_cmd_halfPipe_payload_fragment_data[31:0]                  ), //i
    .io_input_cmd_payload_fragment_mask            (system_bmbPeripheral_bmb_cmd_halfPipe_payload_fragment_mask[3:0]                   ), //i
    .io_input_cmd_payload_fragment_context         (system_bmbPeripheral_bmb_cmd_halfPipe_payload_fragment_context[6:0]                ), //i
    .io_input_rsp_valid                            (system_bmbPeripheral_bmb_decoder_io_input_rsp_valid                                ), //o
    .io_input_rsp_ready                            (_zz_377                                                                            ), //i
    .io_input_rsp_payload_last                     (system_bmbPeripheral_bmb_decoder_io_input_rsp_payload_last                         ), //o
    .io_input_rsp_payload_fragment_source          (system_bmbPeripheral_bmb_decoder_io_input_rsp_payload_fragment_source              ), //o
    .io_input_rsp_payload_fragment_opcode          (system_bmbPeripheral_bmb_decoder_io_input_rsp_payload_fragment_opcode              ), //o
    .io_input_rsp_payload_fragment_data            (system_bmbPeripheral_bmb_decoder_io_input_rsp_payload_fragment_data[31:0]          ), //o
    .io_input_rsp_payload_fragment_context         (system_bmbPeripheral_bmb_decoder_io_input_rsp_payload_fragment_context[6:0]        ), //o
    .io_outputs_0_cmd_valid                        (system_bmbPeripheral_bmb_decoder_io_outputs_0_cmd_valid                            ), //o
    .io_outputs_0_cmd_ready                        (system_plic_logic_bmb_cmd_ready                                                    ), //i
    .io_outputs_0_cmd_payload_last                 (system_bmbPeripheral_bmb_decoder_io_outputs_0_cmd_payload_last                     ), //o
    .io_outputs_0_cmd_payload_fragment_source      (system_bmbPeripheral_bmb_decoder_io_outputs_0_cmd_payload_fragment_source          ), //o
    .io_outputs_0_cmd_payload_fragment_opcode      (system_bmbPeripheral_bmb_decoder_io_outputs_0_cmd_payload_fragment_opcode          ), //o
    .io_outputs_0_cmd_payload_fragment_address     (system_bmbPeripheral_bmb_decoder_io_outputs_0_cmd_payload_fragment_address[23:0]   ), //o
    .io_outputs_0_cmd_payload_fragment_length      (system_bmbPeripheral_bmb_decoder_io_outputs_0_cmd_payload_fragment_length[1:0]     ), //o
    .io_outputs_0_cmd_payload_fragment_data        (system_bmbPeripheral_bmb_decoder_io_outputs_0_cmd_payload_fragment_data[31:0]      ), //o
    .io_outputs_0_cmd_payload_fragment_mask        (system_bmbPeripheral_bmb_decoder_io_outputs_0_cmd_payload_fragment_mask[3:0]       ), //o
    .io_outputs_0_cmd_payload_fragment_context     (system_bmbPeripheral_bmb_decoder_io_outputs_0_cmd_payload_fragment_context[6:0]    ), //o
    .io_outputs_0_rsp_valid                        (system_plic_logic_bmb_rsp_valid                                                    ), //i
    .io_outputs_0_rsp_ready                        (system_bmbPeripheral_bmb_decoder_io_outputs_0_rsp_ready                            ), //o
    .io_outputs_0_rsp_payload_last                 (system_plic_logic_bmb_rsp_payload_last                                             ), //i
    .io_outputs_0_rsp_payload_fragment_source      (system_plic_logic_bmb_rsp_payload_fragment_source                                  ), //i
    .io_outputs_0_rsp_payload_fragment_opcode      (system_plic_logic_bmb_rsp_payload_fragment_opcode                                  ), //i
    .io_outputs_0_rsp_payload_fragment_data        (system_plic_logic_bmb_rsp_payload_fragment_data[31:0]                              ), //i
    .io_outputs_0_rsp_payload_fragment_context     (system_plic_logic_bmb_rsp_payload_fragment_context[6:0]                            ), //i
    .io_outputs_1_cmd_valid                        (system_bmbPeripheral_bmb_decoder_io_outputs_1_cmd_valid                            ), //o
    .io_outputs_1_cmd_ready                        (system_clint_logic_io_bus_cmd_ready                                                ), //i
    .io_outputs_1_cmd_payload_last                 (system_bmbPeripheral_bmb_decoder_io_outputs_1_cmd_payload_last                     ), //o
    .io_outputs_1_cmd_payload_fragment_source      (system_bmbPeripheral_bmb_decoder_io_outputs_1_cmd_payload_fragment_source          ), //o
    .io_outputs_1_cmd_payload_fragment_opcode      (system_bmbPeripheral_bmb_decoder_io_outputs_1_cmd_payload_fragment_opcode          ), //o
    .io_outputs_1_cmd_payload_fragment_address     (system_bmbPeripheral_bmb_decoder_io_outputs_1_cmd_payload_fragment_address[23:0]   ), //o
    .io_outputs_1_cmd_payload_fragment_length      (system_bmbPeripheral_bmb_decoder_io_outputs_1_cmd_payload_fragment_length[1:0]     ), //o
    .io_outputs_1_cmd_payload_fragment_data        (system_bmbPeripheral_bmb_decoder_io_outputs_1_cmd_payload_fragment_data[31:0]      ), //o
    .io_outputs_1_cmd_payload_fragment_mask        (system_bmbPeripheral_bmb_decoder_io_outputs_1_cmd_payload_fragment_mask[3:0]       ), //o
    .io_outputs_1_cmd_payload_fragment_context     (system_bmbPeripheral_bmb_decoder_io_outputs_1_cmd_payload_fragment_context[6:0]    ), //o
    .io_outputs_1_rsp_valid                        (system_clint_logic_io_bus_rsp_valid                                                ), //i
    .io_outputs_1_rsp_ready                        (system_bmbPeripheral_bmb_decoder_io_outputs_1_rsp_ready                            ), //o
    .io_outputs_1_rsp_payload_last                 (system_clint_logic_io_bus_rsp_payload_last                                         ), //i
    .io_outputs_1_rsp_payload_fragment_source      (system_clint_logic_io_bus_rsp_payload_fragment_source                              ), //i
    .io_outputs_1_rsp_payload_fragment_opcode      (system_clint_logic_io_bus_rsp_payload_fragment_opcode                              ), //i
    .io_outputs_1_rsp_payload_fragment_data        (system_clint_logic_io_bus_rsp_payload_fragment_data[31:0]                          ), //i
    .io_outputs_1_rsp_payload_fragment_context     (system_clint_logic_io_bus_rsp_payload_fragment_context[6:0]                        ), //i
    .io_outputs_2_cmd_valid                        (system_bmbPeripheral_bmb_decoder_io_outputs_2_cmd_valid                            ), //o
    .io_outputs_2_cmd_ready                        (system_gpioA_logic_io_bus_cmd_ready                                                ), //i
    .io_outputs_2_cmd_payload_last                 (system_bmbPeripheral_bmb_decoder_io_outputs_2_cmd_payload_last                     ), //o
    .io_outputs_2_cmd_payload_fragment_source      (system_bmbPeripheral_bmb_decoder_io_outputs_2_cmd_payload_fragment_source          ), //o
    .io_outputs_2_cmd_payload_fragment_opcode      (system_bmbPeripheral_bmb_decoder_io_outputs_2_cmd_payload_fragment_opcode          ), //o
    .io_outputs_2_cmd_payload_fragment_address     (system_bmbPeripheral_bmb_decoder_io_outputs_2_cmd_payload_fragment_address[23:0]   ), //o
    .io_outputs_2_cmd_payload_fragment_length      (system_bmbPeripheral_bmb_decoder_io_outputs_2_cmd_payload_fragment_length[1:0]     ), //o
    .io_outputs_2_cmd_payload_fragment_data        (system_bmbPeripheral_bmb_decoder_io_outputs_2_cmd_payload_fragment_data[31:0]      ), //o
    .io_outputs_2_cmd_payload_fragment_mask        (system_bmbPeripheral_bmb_decoder_io_outputs_2_cmd_payload_fragment_mask[3:0]       ), //o
    .io_outputs_2_cmd_payload_fragment_context     (system_bmbPeripheral_bmb_decoder_io_outputs_2_cmd_payload_fragment_context[6:0]    ), //o
    .io_outputs_2_rsp_valid                        (system_gpioA_logic_io_bus_rsp_valid                                                ), //i
    .io_outputs_2_rsp_ready                        (system_bmbPeripheral_bmb_decoder_io_outputs_2_rsp_ready                            ), //o
    .io_outputs_2_rsp_payload_last                 (system_gpioA_logic_io_bus_rsp_payload_last                                         ), //i
    .io_outputs_2_rsp_payload_fragment_source      (system_gpioA_logic_io_bus_rsp_payload_fragment_source                              ), //i
    .io_outputs_2_rsp_payload_fragment_opcode      (system_gpioA_logic_io_bus_rsp_payload_fragment_opcode                              ), //i
    .io_outputs_2_rsp_payload_fragment_data        (system_gpioA_logic_io_bus_rsp_payload_fragment_data[31:0]                          ), //i
    .io_outputs_2_rsp_payload_fragment_context     (system_gpioA_logic_io_bus_rsp_payload_fragment_context[6:0]                        ), //i
    .io_outputs_3_cmd_valid                        (system_bmbPeripheral_bmb_decoder_io_outputs_3_cmd_valid                            ), //o
    .io_outputs_3_cmd_ready                        (system_uartA_logic_io_bus_cmd_ready                                                ), //i
    .io_outputs_3_cmd_payload_last                 (system_bmbPeripheral_bmb_decoder_io_outputs_3_cmd_payload_last                     ), //o
    .io_outputs_3_cmd_payload_fragment_source      (system_bmbPeripheral_bmb_decoder_io_outputs_3_cmd_payload_fragment_source          ), //o
    .io_outputs_3_cmd_payload_fragment_opcode      (system_bmbPeripheral_bmb_decoder_io_outputs_3_cmd_payload_fragment_opcode          ), //o
    .io_outputs_3_cmd_payload_fragment_address     (system_bmbPeripheral_bmb_decoder_io_outputs_3_cmd_payload_fragment_address[23:0]   ), //o
    .io_outputs_3_cmd_payload_fragment_length      (system_bmbPeripheral_bmb_decoder_io_outputs_3_cmd_payload_fragment_length[1:0]     ), //o
    .io_outputs_3_cmd_payload_fragment_data        (system_bmbPeripheral_bmb_decoder_io_outputs_3_cmd_payload_fragment_data[31:0]      ), //o
    .io_outputs_3_cmd_payload_fragment_mask        (system_bmbPeripheral_bmb_decoder_io_outputs_3_cmd_payload_fragment_mask[3:0]       ), //o
    .io_outputs_3_cmd_payload_fragment_context     (system_bmbPeripheral_bmb_decoder_io_outputs_3_cmd_payload_fragment_context[6:0]    ), //o
    .io_outputs_3_rsp_valid                        (system_uartA_logic_io_bus_rsp_valid                                                ), //i
    .io_outputs_3_rsp_ready                        (system_bmbPeripheral_bmb_decoder_io_outputs_3_rsp_ready                            ), //o
    .io_outputs_3_rsp_payload_last                 (system_uartA_logic_io_bus_rsp_payload_last                                         ), //i
    .io_outputs_3_rsp_payload_fragment_source      (system_uartA_logic_io_bus_rsp_payload_fragment_source                              ), //i
    .io_outputs_3_rsp_payload_fragment_opcode      (system_uartA_logic_io_bus_rsp_payload_fragment_opcode                              ), //i
    .io_outputs_3_rsp_payload_fragment_data        (system_uartA_logic_io_bus_rsp_payload_fragment_data[31:0]                          ), //i
    .io_outputs_3_rsp_payload_fragment_context     (system_uartA_logic_io_bus_rsp_payload_fragment_context[6:0]                        ), //i
    .io_outputs_4_cmd_valid                        (system_bmbPeripheral_bmb_decoder_io_outputs_4_cmd_valid                            ), //o
    .io_outputs_4_cmd_ready                        (system_spiA_logic_io_ctrl_cmd_ready                                                ), //i
    .io_outputs_4_cmd_payload_last                 (system_bmbPeripheral_bmb_decoder_io_outputs_4_cmd_payload_last                     ), //o
    .io_outputs_4_cmd_payload_fragment_source      (system_bmbPeripheral_bmb_decoder_io_outputs_4_cmd_payload_fragment_source          ), //o
    .io_outputs_4_cmd_payload_fragment_opcode      (system_bmbPeripheral_bmb_decoder_io_outputs_4_cmd_payload_fragment_opcode          ), //o
    .io_outputs_4_cmd_payload_fragment_address     (system_bmbPeripheral_bmb_decoder_io_outputs_4_cmd_payload_fragment_address[23:0]   ), //o
    .io_outputs_4_cmd_payload_fragment_length      (system_bmbPeripheral_bmb_decoder_io_outputs_4_cmd_payload_fragment_length[1:0]     ), //o
    .io_outputs_4_cmd_payload_fragment_data        (system_bmbPeripheral_bmb_decoder_io_outputs_4_cmd_payload_fragment_data[31:0]      ), //o
    .io_outputs_4_cmd_payload_fragment_mask        (system_bmbPeripheral_bmb_decoder_io_outputs_4_cmd_payload_fragment_mask[3:0]       ), //o
    .io_outputs_4_cmd_payload_fragment_context     (system_bmbPeripheral_bmb_decoder_io_outputs_4_cmd_payload_fragment_context[6:0]    ), //o
    .io_outputs_4_rsp_valid                        (system_spiA_logic_io_ctrl_rsp_valid                                                ), //i
    .io_outputs_4_rsp_ready                        (system_bmbPeripheral_bmb_decoder_io_outputs_4_rsp_ready                            ), //o
    .io_outputs_4_rsp_payload_last                 (system_spiA_logic_io_ctrl_rsp_payload_last                                         ), //i
    .io_outputs_4_rsp_payload_fragment_source      (system_spiA_logic_io_ctrl_rsp_payload_fragment_source                              ), //i
    .io_outputs_4_rsp_payload_fragment_opcode      (system_spiA_logic_io_ctrl_rsp_payload_fragment_opcode                              ), //i
    .io_outputs_4_rsp_payload_fragment_data        (system_spiA_logic_io_ctrl_rsp_payload_fragment_data[31:0]                          ), //i
    .io_outputs_4_rsp_payload_fragment_context     (system_spiA_logic_io_ctrl_rsp_payload_fragment_context[6:0]                        ), //i
    .io_outputs_5_cmd_valid                        (system_bmbPeripheral_bmb_decoder_io_outputs_5_cmd_valid                            ), //o
    .io_outputs_5_cmd_ready                        (system_mac_logic_io_bus_cmd_ready                                                  ), //i
    .io_outputs_5_cmd_payload_last                 (system_bmbPeripheral_bmb_decoder_io_outputs_5_cmd_payload_last                     ), //o
    .io_outputs_5_cmd_payload_fragment_source      (system_bmbPeripheral_bmb_decoder_io_outputs_5_cmd_payload_fragment_source          ), //o
    .io_outputs_5_cmd_payload_fragment_opcode      (system_bmbPeripheral_bmb_decoder_io_outputs_5_cmd_payload_fragment_opcode          ), //o
    .io_outputs_5_cmd_payload_fragment_address     (system_bmbPeripheral_bmb_decoder_io_outputs_5_cmd_payload_fragment_address[23:0]   ), //o
    .io_outputs_5_cmd_payload_fragment_length      (system_bmbPeripheral_bmb_decoder_io_outputs_5_cmd_payload_fragment_length[1:0]     ), //o
    .io_outputs_5_cmd_payload_fragment_data        (system_bmbPeripheral_bmb_decoder_io_outputs_5_cmd_payload_fragment_data[31:0]      ), //o
    .io_outputs_5_cmd_payload_fragment_mask        (system_bmbPeripheral_bmb_decoder_io_outputs_5_cmd_payload_fragment_mask[3:0]       ), //o
    .io_outputs_5_cmd_payload_fragment_context     (system_bmbPeripheral_bmb_decoder_io_outputs_5_cmd_payload_fragment_context[6:0]    ), //o
    .io_outputs_5_rsp_valid                        (system_mac_logic_io_bus_rsp_valid                                                  ), //i
    .io_outputs_5_rsp_ready                        (system_bmbPeripheral_bmb_decoder_io_outputs_5_rsp_ready                            ), //o
    .io_outputs_5_rsp_payload_last                 (system_mac_logic_io_bus_rsp_payload_last                                           ), //i
    .io_outputs_5_rsp_payload_fragment_source      (system_mac_logic_io_bus_rsp_payload_fragment_source                                ), //i
    .io_outputs_5_rsp_payload_fragment_opcode      (system_mac_logic_io_bus_rsp_payload_fragment_opcode                                ), //i
    .io_outputs_5_rsp_payload_fragment_data        (system_mac_logic_io_bus_rsp_payload_fragment_data[31:0]                            ), //i
    .io_outputs_5_rsp_payload_fragment_context     (system_mac_logic_io_bus_rsp_payload_fragment_context[6:0]                          ), //i
    .io_outputs_6_cmd_valid                        (system_bmbPeripheral_bmb_decoder_io_outputs_6_cmd_valid                            ), //o
    .io_outputs_6_cmd_ready                        (system_dma_logic_io_ctrl_cmd_ready                                                 ), //i
    .io_outputs_6_cmd_payload_last                 (system_bmbPeripheral_bmb_decoder_io_outputs_6_cmd_payload_last                     ), //o
    .io_outputs_6_cmd_payload_fragment_source      (system_bmbPeripheral_bmb_decoder_io_outputs_6_cmd_payload_fragment_source          ), //o
    .io_outputs_6_cmd_payload_fragment_opcode      (system_bmbPeripheral_bmb_decoder_io_outputs_6_cmd_payload_fragment_opcode          ), //o
    .io_outputs_6_cmd_payload_fragment_address     (system_bmbPeripheral_bmb_decoder_io_outputs_6_cmd_payload_fragment_address[23:0]   ), //o
    .io_outputs_6_cmd_payload_fragment_length      (system_bmbPeripheral_bmb_decoder_io_outputs_6_cmd_payload_fragment_length[1:0]     ), //o
    .io_outputs_6_cmd_payload_fragment_data        (system_bmbPeripheral_bmb_decoder_io_outputs_6_cmd_payload_fragment_data[31:0]      ), //o
    .io_outputs_6_cmd_payload_fragment_mask        (system_bmbPeripheral_bmb_decoder_io_outputs_6_cmd_payload_fragment_mask[3:0]       ), //o
    .io_outputs_6_cmd_payload_fragment_context     (system_bmbPeripheral_bmb_decoder_io_outputs_6_cmd_payload_fragment_context[6:0]    ), //o
    .io_outputs_6_rsp_valid                        (system_dma_logic_io_ctrl_rsp_valid                                                 ), //i
    .io_outputs_6_rsp_ready                        (system_bmbPeripheral_bmb_decoder_io_outputs_6_rsp_ready                            ), //o
    .io_outputs_6_rsp_payload_last                 (system_dma_logic_io_ctrl_rsp_payload_last                                          ), //i
    .io_outputs_6_rsp_payload_fragment_source      (system_dma_logic_io_ctrl_rsp_payload_fragment_source                               ), //i
    .io_outputs_6_rsp_payload_fragment_opcode      (system_dma_logic_io_ctrl_rsp_payload_fragment_opcode                               ), //i
    .io_outputs_6_rsp_payload_fragment_data        (system_dma_logic_io_ctrl_rsp_payload_fragment_data[31:0]                           ), //i
    .io_outputs_6_rsp_payload_fragment_context     (system_dma_logic_io_ctrl_rsp_payload_fragment_context[6:0]                         ), //i
    .io_outputs_7_cmd_valid                        (system_bmbPeripheral_bmb_decoder_io_outputs_7_cmd_valid                            ), //o
    .io_outputs_7_cmd_ready                        (system_vga_logic_io_ctrl_cmd_ready                                                 ), //i
    .io_outputs_7_cmd_payload_last                 (system_bmbPeripheral_bmb_decoder_io_outputs_7_cmd_payload_last                     ), //o
    .io_outputs_7_cmd_payload_fragment_source      (system_bmbPeripheral_bmb_decoder_io_outputs_7_cmd_payload_fragment_source          ), //o
    .io_outputs_7_cmd_payload_fragment_opcode      (system_bmbPeripheral_bmb_decoder_io_outputs_7_cmd_payload_fragment_opcode          ), //o
    .io_outputs_7_cmd_payload_fragment_address     (system_bmbPeripheral_bmb_decoder_io_outputs_7_cmd_payload_fragment_address[23:0]   ), //o
    .io_outputs_7_cmd_payload_fragment_length      (system_bmbPeripheral_bmb_decoder_io_outputs_7_cmd_payload_fragment_length[1:0]     ), //o
    .io_outputs_7_cmd_payload_fragment_data        (system_bmbPeripheral_bmb_decoder_io_outputs_7_cmd_payload_fragment_data[31:0]      ), //o
    .io_outputs_7_cmd_payload_fragment_mask        (system_bmbPeripheral_bmb_decoder_io_outputs_7_cmd_payload_fragment_mask[3:0]       ), //o
    .io_outputs_7_cmd_payload_fragment_context     (system_bmbPeripheral_bmb_decoder_io_outputs_7_cmd_payload_fragment_context[6:0]    ), //o
    .io_outputs_7_rsp_valid                        (system_vga_logic_io_ctrl_rsp_valid                                                 ), //i
    .io_outputs_7_rsp_ready                        (system_bmbPeripheral_bmb_decoder_io_outputs_7_rsp_ready                            ), //o
    .io_outputs_7_rsp_payload_last                 (system_vga_logic_io_ctrl_rsp_payload_last                                          ), //i
    .io_outputs_7_rsp_payload_fragment_source      (system_vga_logic_io_ctrl_rsp_payload_fragment_source                               ), //i
    .io_outputs_7_rsp_payload_fragment_opcode      (system_vga_logic_io_ctrl_rsp_payload_fragment_opcode                               ), //i
    .io_outputs_7_rsp_payload_fragment_data        (system_vga_logic_io_ctrl_rsp_payload_fragment_data[31:0]                           ), //i
    .io_outputs_7_rsp_payload_fragment_context     (system_vga_logic_io_ctrl_rsp_payload_fragment_context[6:0]                         ), //i
    .io_outputs_8_cmd_valid                        (system_bmbPeripheral_bmb_decoder_io_outputs_8_cmd_valid                            ), //o
    .io_outputs_8_cmd_ready                        (system_audioOut_logic_io_ctrl_cmd_ready                                            ), //i
    .io_outputs_8_cmd_payload_last                 (system_bmbPeripheral_bmb_decoder_io_outputs_8_cmd_payload_last                     ), //o
    .io_outputs_8_cmd_payload_fragment_source      (system_bmbPeripheral_bmb_decoder_io_outputs_8_cmd_payload_fragment_source          ), //o
    .io_outputs_8_cmd_payload_fragment_opcode      (system_bmbPeripheral_bmb_decoder_io_outputs_8_cmd_payload_fragment_opcode          ), //o
    .io_outputs_8_cmd_payload_fragment_address     (system_bmbPeripheral_bmb_decoder_io_outputs_8_cmd_payload_fragment_address[23:0]   ), //o
    .io_outputs_8_cmd_payload_fragment_length      (system_bmbPeripheral_bmb_decoder_io_outputs_8_cmd_payload_fragment_length[1:0]     ), //o
    .io_outputs_8_cmd_payload_fragment_data        (system_bmbPeripheral_bmb_decoder_io_outputs_8_cmd_payload_fragment_data[31:0]      ), //o
    .io_outputs_8_cmd_payload_fragment_mask        (system_bmbPeripheral_bmb_decoder_io_outputs_8_cmd_payload_fragment_mask[3:0]       ), //o
    .io_outputs_8_cmd_payload_fragment_context     (system_bmbPeripheral_bmb_decoder_io_outputs_8_cmd_payload_fragment_context[6:0]    ), //o
    .io_outputs_8_rsp_valid                        (system_audioOut_logic_io_ctrl_rsp_valid                                            ), //i
    .io_outputs_8_rsp_ready                        (system_bmbPeripheral_bmb_decoder_io_outputs_8_rsp_ready                            ), //o
    .io_outputs_8_rsp_payload_last                 (system_audioOut_logic_io_ctrl_rsp_payload_last                                     ), //i
    .io_outputs_8_rsp_payload_fragment_source      (system_audioOut_logic_io_ctrl_rsp_payload_fragment_source                          ), //i
    .io_outputs_8_rsp_payload_fragment_opcode      (system_audioOut_logic_io_ctrl_rsp_payload_fragment_opcode                          ), //i
    .io_outputs_8_rsp_payload_fragment_data        (system_audioOut_logic_io_ctrl_rsp_payload_fragment_data[31:0]                      ), //i
    .io_outputs_8_rsp_payload_fragment_context     (system_audioOut_logic_io_ctrl_rsp_payload_fragment_context[6:0]                    ), //i
    .io_outputs_9_cmd_valid                        (system_bmbPeripheral_bmb_decoder_io_outputs_9_cmd_valid                            ), //o
    .io_outputs_9_cmd_ready                        (system_ramA_logic_io_bus_cmd_ready                                                 ), //i
    .io_outputs_9_cmd_payload_last                 (system_bmbPeripheral_bmb_decoder_io_outputs_9_cmd_payload_last                     ), //o
    .io_outputs_9_cmd_payload_fragment_source      (system_bmbPeripheral_bmb_decoder_io_outputs_9_cmd_payload_fragment_source          ), //o
    .io_outputs_9_cmd_payload_fragment_opcode      (system_bmbPeripheral_bmb_decoder_io_outputs_9_cmd_payload_fragment_opcode          ), //o
    .io_outputs_9_cmd_payload_fragment_address     (system_bmbPeripheral_bmb_decoder_io_outputs_9_cmd_payload_fragment_address[23:0]   ), //o
    .io_outputs_9_cmd_payload_fragment_length      (system_bmbPeripheral_bmb_decoder_io_outputs_9_cmd_payload_fragment_length[1:0]     ), //o
    .io_outputs_9_cmd_payload_fragment_data        (system_bmbPeripheral_bmb_decoder_io_outputs_9_cmd_payload_fragment_data[31:0]      ), //o
    .io_outputs_9_cmd_payload_fragment_mask        (system_bmbPeripheral_bmb_decoder_io_outputs_9_cmd_payload_fragment_mask[3:0]       ), //o
    .io_outputs_9_cmd_payload_fragment_context     (system_bmbPeripheral_bmb_decoder_io_outputs_9_cmd_payload_fragment_context[6:0]    ), //o
    .io_outputs_9_rsp_valid                        (system_ramA_logic_io_bus_rsp_valid                                                 ), //i
    .io_outputs_9_rsp_ready                        (system_bmbPeripheral_bmb_decoder_io_outputs_9_rsp_ready                            ), //o
    .io_outputs_9_rsp_payload_last                 (system_ramA_logic_io_bus_rsp_payload_last                                          ), //i
    .io_outputs_9_rsp_payload_fragment_source      (system_ramA_logic_io_bus_rsp_payload_fragment_source                               ), //i
    .io_outputs_9_rsp_payload_fragment_opcode      (system_ramA_logic_io_bus_rsp_payload_fragment_opcode                               ), //i
    .io_outputs_9_rsp_payload_fragment_data        (system_ramA_logic_io_bus_rsp_payload_fragment_data[31:0]                           ), //i
    .io_outputs_9_rsp_payload_fragment_context     (system_ramA_logic_io_bus_rsp_payload_fragment_context[6:0]                         ), //i
    .io_outputs_10_cmd_valid                       (system_bmbPeripheral_bmb_decoder_io_outputs_10_cmd_valid                           ), //o
    .io_outputs_10_cmd_ready                       (system_bmbPeripheral_bmb_crossClock_io_input_cmd_ready                             ), //i
    .io_outputs_10_cmd_payload_last                (system_bmbPeripheral_bmb_decoder_io_outputs_10_cmd_payload_last                    ), //o
    .io_outputs_10_cmd_payload_fragment_source     (system_bmbPeripheral_bmb_decoder_io_outputs_10_cmd_payload_fragment_source         ), //o
    .io_outputs_10_cmd_payload_fragment_opcode     (system_bmbPeripheral_bmb_decoder_io_outputs_10_cmd_payload_fragment_opcode         ), //o
    .io_outputs_10_cmd_payload_fragment_address    (system_bmbPeripheral_bmb_decoder_io_outputs_10_cmd_payload_fragment_address[23:0]  ), //o
    .io_outputs_10_cmd_payload_fragment_length     (system_bmbPeripheral_bmb_decoder_io_outputs_10_cmd_payload_fragment_length[1:0]    ), //o
    .io_outputs_10_cmd_payload_fragment_data       (system_bmbPeripheral_bmb_decoder_io_outputs_10_cmd_payload_fragment_data[31:0]     ), //o
    .io_outputs_10_cmd_payload_fragment_mask       (system_bmbPeripheral_bmb_decoder_io_outputs_10_cmd_payload_fragment_mask[3:0]      ), //o
    .io_outputs_10_cmd_payload_fragment_context    (system_bmbPeripheral_bmb_decoder_io_outputs_10_cmd_payload_fragment_context[6:0]   ), //o
    .io_outputs_10_rsp_valid                       (system_bmbPeripheral_bmb_crossClock_io_input_rsp_valid                             ), //i
    .io_outputs_10_rsp_ready                       (system_bmbPeripheral_bmb_decoder_io_outputs_10_rsp_ready                           ), //o
    .io_outputs_10_rsp_payload_last                (system_bmbPeripheral_bmb_crossClock_io_input_rsp_payload_last                      ), //i
    .io_outputs_10_rsp_payload_fragment_source     (system_bmbPeripheral_bmb_crossClock_io_input_rsp_payload_fragment_source           ), //i
    .io_outputs_10_rsp_payload_fragment_opcode     (system_bmbPeripheral_bmb_crossClock_io_input_rsp_payload_fragment_opcode           ), //i
    .io_outputs_10_rsp_payload_fragment_data       (system_bmbPeripheral_bmb_crossClock_io_input_rsp_payload_fragment_data[31:0]       ), //i
    .io_outputs_10_rsp_payload_fragment_context    (system_bmbPeripheral_bmb_crossClock_io_input_rsp_payload_fragment_context[6:0]     ), //i
    .CLKOUT0                                       (clocking_pll_CLKOUT0                                                               ), //i
    .systemCd_logic_outputReset                    (systemCd_logic_outputReset                                                         )  //i
  );
  BmbCcToggle system_bmbPeripheral_bmb_crossClock (
    .io_input_cmd_valid                        (system_bmbPeripheral_bmb_decoder_io_outputs_10_cmd_valid                           ), //i
    .io_input_cmd_ready                        (system_bmbPeripheral_bmb_crossClock_io_input_cmd_ready                             ), //o
    .io_input_cmd_payload_last                 (system_bmbPeripheral_bmb_decoder_io_outputs_10_cmd_payload_last                    ), //i
    .io_input_cmd_payload_fragment_source      (system_bmbPeripheral_bmb_decoder_io_outputs_10_cmd_payload_fragment_source         ), //i
    .io_input_cmd_payload_fragment_opcode      (system_bmbPeripheral_bmb_decoder_io_outputs_10_cmd_payload_fragment_opcode         ), //i
    .io_input_cmd_payload_fragment_address     (system_bmbPeripheral_bmb_decoder_io_outputs_10_cmd_payload_fragment_address[23:0]  ), //i
    .io_input_cmd_payload_fragment_length      (system_bmbPeripheral_bmb_decoder_io_outputs_10_cmd_payload_fragment_length[1:0]    ), //i
    .io_input_cmd_payload_fragment_data        (system_bmbPeripheral_bmb_decoder_io_outputs_10_cmd_payload_fragment_data[31:0]     ), //i
    .io_input_cmd_payload_fragment_mask        (system_bmbPeripheral_bmb_decoder_io_outputs_10_cmd_payload_fragment_mask[3:0]      ), //i
    .io_input_cmd_payload_fragment_context     (system_bmbPeripheral_bmb_decoder_io_outputs_10_cmd_payload_fragment_context[6:0]   ), //i
    .io_input_rsp_valid                        (system_bmbPeripheral_bmb_crossClock_io_input_rsp_valid                             ), //o
    .io_input_rsp_ready                        (system_bmbPeripheral_bmb_decoder_io_outputs_10_rsp_ready                           ), //i
    .io_input_rsp_payload_last                 (system_bmbPeripheral_bmb_crossClock_io_input_rsp_payload_last                      ), //o
    .io_input_rsp_payload_fragment_source      (system_bmbPeripheral_bmb_crossClock_io_input_rsp_payload_fragment_source           ), //o
    .io_input_rsp_payload_fragment_opcode      (system_bmbPeripheral_bmb_crossClock_io_input_rsp_payload_fragment_opcode           ), //o
    .io_input_rsp_payload_fragment_data        (system_bmbPeripheral_bmb_crossClock_io_input_rsp_payload_fragment_data[31:0]       ), //o
    .io_input_rsp_payload_fragment_context     (system_bmbPeripheral_bmb_crossClock_io_input_rsp_payload_fragment_context[6:0]     ), //o
    .io_output_cmd_valid                       (system_bmbPeripheral_bmb_crossClock_io_output_cmd_valid                            ), //o
    .io_output_cmd_ready                       (sdramDomain_bmbCc_bmb_cmd_ready                                                    ), //i
    .io_output_cmd_payload_last                (system_bmbPeripheral_bmb_crossClock_io_output_cmd_payload_last                     ), //o
    .io_output_cmd_payload_fragment_source     (system_bmbPeripheral_bmb_crossClock_io_output_cmd_payload_fragment_source          ), //o
    .io_output_cmd_payload_fragment_opcode     (system_bmbPeripheral_bmb_crossClock_io_output_cmd_payload_fragment_opcode          ), //o
    .io_output_cmd_payload_fragment_address    (system_bmbPeripheral_bmb_crossClock_io_output_cmd_payload_fragment_address[23:0]   ), //o
    .io_output_cmd_payload_fragment_length     (system_bmbPeripheral_bmb_crossClock_io_output_cmd_payload_fragment_length[1:0]     ), //o
    .io_output_cmd_payload_fragment_data       (system_bmbPeripheral_bmb_crossClock_io_output_cmd_payload_fragment_data[31:0]      ), //o
    .io_output_cmd_payload_fragment_mask       (system_bmbPeripheral_bmb_crossClock_io_output_cmd_payload_fragment_mask[3:0]       ), //o
    .io_output_cmd_payload_fragment_context    (system_bmbPeripheral_bmb_crossClock_io_output_cmd_payload_fragment_context[6:0]    ), //o
    .io_output_rsp_valid                       (sdramDomain_bmbCc_bmb_rsp_valid                                                    ), //i
    .io_output_rsp_ready                       (system_bmbPeripheral_bmb_crossClock_io_output_rsp_ready                            ), //o
    .io_output_rsp_payload_last                (sdramDomain_bmbCc_bmb_rsp_payload_last                                             ), //i
    .io_output_rsp_payload_fragment_source     (sdramDomain_bmbCc_bmb_rsp_payload_fragment_source                                  ), //i
    .io_output_rsp_payload_fragment_opcode     (sdramDomain_bmbCc_bmb_rsp_payload_fragment_opcode                                  ), //i
    .io_output_rsp_payload_fragment_data       (sdramDomain_bmbCc_bmb_rsp_payload_fragment_data[31:0]                              ), //i
    .io_output_rsp_payload_fragment_context    (sdramDomain_bmbCc_bmb_rsp_payload_fragment_context[6:0]                            ), //i
    .CLKOUT0                                   (clocking_pll_CLKOUT0                                                               ), //i
    .systemCd_logic_outputReset                (systemCd_logic_outputReset                                                         ), //i
    .CLKOUT1                                   (clocking_pll_CLKOUT1                                                               ), //i
    .sdramCd_logic_outputReset                 (sdramCd_logic_outputReset                                                          )  //i
  );
  BmbArbiter_2 system_bmbPeripheral_bmb_arbiter (
    .io_inputs_0_cmd_valid                       (system_fabric_dBus_bmb_unburstify_io_output_cmd_valid                           ), //i
    .io_inputs_0_cmd_ready                       (system_bmbPeripheral_bmb_arbiter_io_inputs_0_cmd_ready                          ), //o
    .io_inputs_0_cmd_payload_last                (system_fabric_dBus_bmb_unburstify_io_output_cmd_payload_last                    ), //i
    .io_inputs_0_cmd_payload_fragment_opcode     (system_fabric_dBus_bmb_unburstify_io_output_cmd_payload_fragment_opcode         ), //i
    .io_inputs_0_cmd_payload_fragment_address    (_zz_440[23:0]                                                                   ), //i
    .io_inputs_0_cmd_payload_fragment_length     (system_fabric_dBus_bmb_unburstify_io_output_cmd_payload_fragment_length[1:0]    ), //i
    .io_inputs_0_cmd_payload_fragment_data       (system_fabric_dBus_bmb_unburstify_io_output_cmd_payload_fragment_data[31:0]     ), //i
    .io_inputs_0_cmd_payload_fragment_mask       (system_fabric_dBus_bmb_unburstify_io_output_cmd_payload_fragment_mask[3:0]      ), //i
    .io_inputs_0_cmd_payload_fragment_context    (system_fabric_dBus_bmb_unburstify_io_output_cmd_payload_fragment_context[6:0]   ), //i
    .io_inputs_0_rsp_valid                       (system_bmbPeripheral_bmb_arbiter_io_inputs_0_rsp_valid                          ), //o
    .io_inputs_0_rsp_ready                       (system_fabric_dBus_bmb_unburstify_io_output_rsp_ready                           ), //i
    .io_inputs_0_rsp_payload_last                (system_bmbPeripheral_bmb_arbiter_io_inputs_0_rsp_payload_last                   ), //o
    .io_inputs_0_rsp_payload_fragment_opcode     (system_bmbPeripheral_bmb_arbiter_io_inputs_0_rsp_payload_fragment_opcode        ), //o
    .io_inputs_0_rsp_payload_fragment_data       (system_bmbPeripheral_bmb_arbiter_io_inputs_0_rsp_payload_fragment_data[31:0]    ), //o
    .io_inputs_0_rsp_payload_fragment_context    (system_bmbPeripheral_bmb_arbiter_io_inputs_0_rsp_payload_fragment_context[6:0]  ), //o
    .io_inputs_1_cmd_valid                       (system_fabric_iBus_bmb_unburstify_io_output_cmd_valid                           ), //i
    .io_inputs_1_cmd_ready                       (system_bmbPeripheral_bmb_arbiter_io_inputs_1_cmd_ready                          ), //o
    .io_inputs_1_cmd_payload_last                (system_fabric_iBus_bmb_unburstify_io_output_cmd_payload_last                    ), //i
    .io_inputs_1_cmd_payload_fragment_opcode     (system_fabric_iBus_bmb_unburstify_io_output_cmd_payload_fragment_opcode         ), //i
    .io_inputs_1_cmd_payload_fragment_address    (_zz_441[23:0]                                                                   ), //i
    .io_inputs_1_cmd_payload_fragment_length     (system_fabric_iBus_bmb_unburstify_io_output_cmd_payload_fragment_length[1:0]    ), //i
    .io_inputs_1_cmd_payload_fragment_data       (_zz_442[31:0]                                                                   ), //i
    .io_inputs_1_cmd_payload_fragment_mask       (_zz_443[3:0]                                                                    ), //i
    .io_inputs_1_cmd_payload_fragment_context    (system_fabric_iBus_bmb_unburstify_io_output_cmd_payload_fragment_context[3:0]   ), //i
    .io_inputs_1_rsp_valid                       (system_bmbPeripheral_bmb_arbiter_io_inputs_1_rsp_valid                          ), //o
    .io_inputs_1_rsp_ready                       (system_fabric_iBus_bmb_unburstify_io_output_rsp_ready                           ), //i
    .io_inputs_1_rsp_payload_last                (system_bmbPeripheral_bmb_arbiter_io_inputs_1_rsp_payload_last                   ), //o
    .io_inputs_1_rsp_payload_fragment_opcode     (system_bmbPeripheral_bmb_arbiter_io_inputs_1_rsp_payload_fragment_opcode        ), //o
    .io_inputs_1_rsp_payload_fragment_data       (system_bmbPeripheral_bmb_arbiter_io_inputs_1_rsp_payload_fragment_data[31:0]    ), //o
    .io_inputs_1_rsp_payload_fragment_context    (system_bmbPeripheral_bmb_arbiter_io_inputs_1_rsp_payload_fragment_context[3:0]  ), //o
    .io_output_cmd_valid                         (system_bmbPeripheral_bmb_arbiter_io_output_cmd_valid                            ), //o
    .io_output_cmd_ready                         (system_bmbPeripheral_bmb_cmd_ready                                              ), //i
    .io_output_cmd_payload_last                  (system_bmbPeripheral_bmb_arbiter_io_output_cmd_payload_last                     ), //o
    .io_output_cmd_payload_fragment_source       (system_bmbPeripheral_bmb_arbiter_io_output_cmd_payload_fragment_source          ), //o
    .io_output_cmd_payload_fragment_opcode       (system_bmbPeripheral_bmb_arbiter_io_output_cmd_payload_fragment_opcode          ), //o
    .io_output_cmd_payload_fragment_address      (system_bmbPeripheral_bmb_arbiter_io_output_cmd_payload_fragment_address[23:0]   ), //o
    .io_output_cmd_payload_fragment_length       (system_bmbPeripheral_bmb_arbiter_io_output_cmd_payload_fragment_length[1:0]     ), //o
    .io_output_cmd_payload_fragment_data         (system_bmbPeripheral_bmb_arbiter_io_output_cmd_payload_fragment_data[31:0]      ), //o
    .io_output_cmd_payload_fragment_mask         (system_bmbPeripheral_bmb_arbiter_io_output_cmd_payload_fragment_mask[3:0]       ), //o
    .io_output_cmd_payload_fragment_context      (system_bmbPeripheral_bmb_arbiter_io_output_cmd_payload_fragment_context[6:0]    ), //o
    .io_output_rsp_valid                         (system_bmbPeripheral_bmb_rsp_valid                                              ), //i
    .io_output_rsp_ready                         (system_bmbPeripheral_bmb_arbiter_io_output_rsp_ready                            ), //o
    .io_output_rsp_payload_last                  (system_bmbPeripheral_bmb_rsp_payload_last                                       ), //i
    .io_output_rsp_payload_fragment_source       (system_bmbPeripheral_bmb_rsp_payload_fragment_source                            ), //i
    .io_output_rsp_payload_fragment_opcode       (system_bmbPeripheral_bmb_rsp_payload_fragment_opcode                            ), //i
    .io_output_rsp_payload_fragment_data         (system_bmbPeripheral_bmb_rsp_payload_fragment_data[31:0]                        ), //i
    .io_output_rsp_payload_fragment_context      (system_bmbPeripheral_bmb_rsp_payload_fragment_context[6:0]                      ), //i
    .CLKOUT0                                     (clocking_pll_CLKOUT0                                                            ), //i
    .systemCd_logic_outputReset                  (systemCd_logic_outputReset                                                      )  //i
  );
  BmbDecoder_4 system_fabric_iBus_bmb_decoder (
    .io_input_cmd_valid                           (system_fabric_iBus_bmb_cmd_m2sPipe_valid                                        ), //i
    .io_input_cmd_ready                           (system_fabric_iBus_bmb_decoder_io_input_cmd_ready                               ), //o
    .io_input_cmd_payload_last                    (system_fabric_iBus_bmb_cmd_m2sPipe_payload_last                                 ), //i
    .io_input_cmd_payload_fragment_source         (system_fabric_iBus_bmb_cmd_m2sPipe_payload_fragment_source                      ), //i
    .io_input_cmd_payload_fragment_opcode         (system_fabric_iBus_bmb_cmd_m2sPipe_payload_fragment_opcode                      ), //i
    .io_input_cmd_payload_fragment_address        (system_fabric_iBus_bmb_cmd_m2sPipe_payload_fragment_address[31:0]               ), //i
    .io_input_cmd_payload_fragment_length         (system_fabric_iBus_bmb_cmd_m2sPipe_payload_fragment_length[5:0]                 ), //i
    .io_input_rsp_valid                           (system_fabric_iBus_bmb_decoder_io_input_rsp_valid                               ), //o
    .io_input_rsp_ready                           (system_fabric_iBus_bmb_rsp_ready                                                ), //i
    .io_input_rsp_payload_last                    (system_fabric_iBus_bmb_decoder_io_input_rsp_payload_last                        ), //o
    .io_input_rsp_payload_fragment_source         (system_fabric_iBus_bmb_decoder_io_input_rsp_payload_fragment_source             ), //o
    .io_input_rsp_payload_fragment_opcode         (system_fabric_iBus_bmb_decoder_io_input_rsp_payload_fragment_opcode             ), //o
    .io_input_rsp_payload_fragment_data           (system_fabric_iBus_bmb_decoder_io_input_rsp_payload_fragment_data[63:0]         ), //o
    .io_outputs_0_cmd_valid                       (system_fabric_iBus_bmb_decoder_io_outputs_0_cmd_valid                           ), //o
    .io_outputs_0_cmd_ready                       (system_sdramA0_bmb_arbiter_io_inputs_1_cmd_ready                                ), //i
    .io_outputs_0_cmd_payload_last                (system_fabric_iBus_bmb_decoder_io_outputs_0_cmd_payload_last                    ), //o
    .io_outputs_0_cmd_payload_fragment_source     (system_fabric_iBus_bmb_decoder_io_outputs_0_cmd_payload_fragment_source         ), //o
    .io_outputs_0_cmd_payload_fragment_opcode     (system_fabric_iBus_bmb_decoder_io_outputs_0_cmd_payload_fragment_opcode         ), //o
    .io_outputs_0_cmd_payload_fragment_address    (system_fabric_iBus_bmb_decoder_io_outputs_0_cmd_payload_fragment_address[31:0]  ), //o
    .io_outputs_0_cmd_payload_fragment_length     (system_fabric_iBus_bmb_decoder_io_outputs_0_cmd_payload_fragment_length[5:0]    ), //o
    .io_outputs_0_rsp_valid                       (system_sdramA0_bmb_arbiter_io_inputs_1_rsp_valid                                ), //i
    .io_outputs_0_rsp_ready                       (system_fabric_iBus_bmb_decoder_io_outputs_0_rsp_ready                           ), //o
    .io_outputs_0_rsp_payload_last                (system_sdramA0_bmb_arbiter_io_inputs_1_rsp_payload_last                         ), //i
    .io_outputs_0_rsp_payload_fragment_source     (system_sdramA0_bmb_arbiter_io_inputs_1_rsp_payload_fragment_source              ), //i
    .io_outputs_0_rsp_payload_fragment_opcode     (system_sdramA0_bmb_arbiter_io_inputs_1_rsp_payload_fragment_opcode              ), //i
    .io_outputs_0_rsp_payload_fragment_data       (system_sdramA0_bmb_arbiter_io_inputs_1_rsp_payload_fragment_data[63:0]          ), //i
    .io_outputs_1_cmd_valid                       (system_fabric_iBus_bmb_decoder_io_outputs_1_cmd_valid                           ), //o
    .io_outputs_1_cmd_ready                       (system_fabric_iBus_bmb_downSizer_io_input_cmd_ready                             ), //i
    .io_outputs_1_cmd_payload_last                (system_fabric_iBus_bmb_decoder_io_outputs_1_cmd_payload_last                    ), //o
    .io_outputs_1_cmd_payload_fragment_source     (system_fabric_iBus_bmb_decoder_io_outputs_1_cmd_payload_fragment_source         ), //o
    .io_outputs_1_cmd_payload_fragment_opcode     (system_fabric_iBus_bmb_decoder_io_outputs_1_cmd_payload_fragment_opcode         ), //o
    .io_outputs_1_cmd_payload_fragment_address    (system_fabric_iBus_bmb_decoder_io_outputs_1_cmd_payload_fragment_address[31:0]  ), //o
    .io_outputs_1_cmd_payload_fragment_length     (system_fabric_iBus_bmb_decoder_io_outputs_1_cmd_payload_fragment_length[5:0]    ), //o
    .io_outputs_1_rsp_valid                       (system_fabric_iBus_bmb_downSizer_io_input_rsp_valid                             ), //i
    .io_outputs_1_rsp_ready                       (system_fabric_iBus_bmb_decoder_io_outputs_1_rsp_ready                           ), //o
    .io_outputs_1_rsp_payload_last                (system_fabric_iBus_bmb_downSizer_io_input_rsp_payload_last                      ), //i
    .io_outputs_1_rsp_payload_fragment_source     (system_fabric_iBus_bmb_downSizer_io_input_rsp_payload_fragment_source           ), //i
    .io_outputs_1_rsp_payload_fragment_opcode     (system_fabric_iBus_bmb_downSizer_io_input_rsp_payload_fragment_opcode           ), //i
    .io_outputs_1_rsp_payload_fragment_data       (system_fabric_iBus_bmb_downSizer_io_input_rsp_payload_fragment_data[63:0]       ), //i
    .CLKOUT0                                      (clocking_pll_CLKOUT0                                                            ), //i
    .systemCd_logic_outputReset                   (systemCd_logic_outputReset                                                      )  //i
  );
  BmbDecoderOutOfOrder system_fabric_dBus_bmb_decoder (
    .io_input_cmd_valid                           (system_fabric_dBus_bmb_cmd_valid                                                ), //i
    .io_input_cmd_ready                           (system_fabric_dBus_bmb_decoder_io_input_cmd_ready                               ), //o
    .io_input_cmd_payload_last                    (system_fabric_dBus_bmb_cmd_payload_last                                         ), //i
    .io_input_cmd_payload_fragment_source         (system_fabric_dBus_bmb_cmd_payload_fragment_source[3:0]                         ), //i
    .io_input_cmd_payload_fragment_opcode         (system_fabric_dBus_bmb_cmd_payload_fragment_opcode                              ), //i
    .io_input_cmd_payload_fragment_address        (system_fabric_dBus_bmb_cmd_payload_fragment_address[31:0]                       ), //i
    .io_input_cmd_payload_fragment_length         (system_fabric_dBus_bmb_cmd_payload_fragment_length[5:0]                         ), //i
    .io_input_cmd_payload_fragment_data           (system_fabric_dBus_bmb_cmd_payload_fragment_data[63:0]                          ), //i
    .io_input_cmd_payload_fragment_mask           (system_fabric_dBus_bmb_cmd_payload_fragment_mask[7:0]                           ), //i
    .io_input_cmd_payload_fragment_context        (system_fabric_dBus_bmb_cmd_payload_fragment_context[42:0]                       ), //i
    .io_input_rsp_valid                           (system_fabric_dBus_bmb_decoder_io_input_rsp_valid                               ), //o
    .io_input_rsp_ready                           (system_fabric_dBus_bmb_rsp_ready                                                ), //i
    .io_input_rsp_payload_last                    (system_fabric_dBus_bmb_decoder_io_input_rsp_payload_last                        ), //o
    .io_input_rsp_payload_fragment_source         (system_fabric_dBus_bmb_decoder_io_input_rsp_payload_fragment_source[3:0]        ), //o
    .io_input_rsp_payload_fragment_opcode         (system_fabric_dBus_bmb_decoder_io_input_rsp_payload_fragment_opcode             ), //o
    .io_input_rsp_payload_fragment_data           (system_fabric_dBus_bmb_decoder_io_input_rsp_payload_fragment_data[63:0]         ), //o
    .io_input_rsp_payload_fragment_context        (system_fabric_dBus_bmb_decoder_io_input_rsp_payload_fragment_context[42:0]      ), //o
    .io_outputs_0_cmd_valid                       (system_fabric_dBus_bmb_decoder_io_outputs_0_cmd_valid                           ), //o
    .io_outputs_0_cmd_ready                       (system_sdramA0_bmb_arbiter_io_inputs_0_cmd_ready                                ), //i
    .io_outputs_0_cmd_payload_last                (system_fabric_dBus_bmb_decoder_io_outputs_0_cmd_payload_last                    ), //o
    .io_outputs_0_cmd_payload_fragment_source     (system_fabric_dBus_bmb_decoder_io_outputs_0_cmd_payload_fragment_source[3:0]    ), //o
    .io_outputs_0_cmd_payload_fragment_opcode     (system_fabric_dBus_bmb_decoder_io_outputs_0_cmd_payload_fragment_opcode         ), //o
    .io_outputs_0_cmd_payload_fragment_address    (system_fabric_dBus_bmb_decoder_io_outputs_0_cmd_payload_fragment_address[31:0]  ), //o
    .io_outputs_0_cmd_payload_fragment_length     (system_fabric_dBus_bmb_decoder_io_outputs_0_cmd_payload_fragment_length[5:0]    ), //o
    .io_outputs_0_cmd_payload_fragment_data       (system_fabric_dBus_bmb_decoder_io_outputs_0_cmd_payload_fragment_data[63:0]     ), //o
    .io_outputs_0_cmd_payload_fragment_mask       (system_fabric_dBus_bmb_decoder_io_outputs_0_cmd_payload_fragment_mask[7:0]      ), //o
    .io_outputs_0_rsp_valid                       (system_sdramA0_bmb_arbiter_io_inputs_0_rsp_valid                                ), //i
    .io_outputs_0_rsp_ready                       (system_fabric_dBus_bmb_decoder_io_outputs_0_rsp_ready                           ), //o
    .io_outputs_0_rsp_payload_last                (system_sdramA0_bmb_arbiter_io_inputs_0_rsp_payload_last                         ), //i
    .io_outputs_0_rsp_payload_fragment_source     (system_sdramA0_bmb_arbiter_io_inputs_0_rsp_payload_fragment_source[3:0]         ), //i
    .io_outputs_0_rsp_payload_fragment_opcode     (system_sdramA0_bmb_arbiter_io_inputs_0_rsp_payload_fragment_opcode              ), //i
    .io_outputs_0_rsp_payload_fragment_data       (system_sdramA0_bmb_arbiter_io_inputs_0_rsp_payload_fragment_data[63:0]          ), //i
    .io_outputs_1_cmd_valid                       (system_fabric_dBus_bmb_decoder_io_outputs_1_cmd_valid                           ), //o
    .io_outputs_1_cmd_ready                       (system_fabric_dBus_bmb_downSizer_io_input_cmd_ready                             ), //i
    .io_outputs_1_cmd_payload_last                (system_fabric_dBus_bmb_decoder_io_outputs_1_cmd_payload_last                    ), //o
    .io_outputs_1_cmd_payload_fragment_source     (system_fabric_dBus_bmb_decoder_io_outputs_1_cmd_payload_fragment_source[3:0]    ), //o
    .io_outputs_1_cmd_payload_fragment_opcode     (system_fabric_dBus_bmb_decoder_io_outputs_1_cmd_payload_fragment_opcode         ), //o
    .io_outputs_1_cmd_payload_fragment_address    (system_fabric_dBus_bmb_decoder_io_outputs_1_cmd_payload_fragment_address[31:0]  ), //o
    .io_outputs_1_cmd_payload_fragment_length     (system_fabric_dBus_bmb_decoder_io_outputs_1_cmd_payload_fragment_length[5:0]    ), //o
    .io_outputs_1_cmd_payload_fragment_data       (system_fabric_dBus_bmb_decoder_io_outputs_1_cmd_payload_fragment_data[63:0]     ), //o
    .io_outputs_1_cmd_payload_fragment_mask       (system_fabric_dBus_bmb_decoder_io_outputs_1_cmd_payload_fragment_mask[7:0]      ), //o
    .io_outputs_1_rsp_valid                       (system_fabric_dBus_bmb_downSizer_io_input_rsp_valid                             ), //i
    .io_outputs_1_rsp_ready                       (system_fabric_dBus_bmb_decoder_io_outputs_1_rsp_ready                           ), //o
    .io_outputs_1_rsp_payload_last                (system_fabric_dBus_bmb_downSizer_io_input_rsp_payload_last                      ), //i
    .io_outputs_1_rsp_payload_fragment_source     (system_fabric_dBus_bmb_downSizer_io_input_rsp_payload_fragment_source[3:0]      ), //i
    .io_outputs_1_rsp_payload_fragment_opcode     (system_fabric_dBus_bmb_downSizer_io_input_rsp_payload_fragment_opcode           ), //i
    .io_outputs_1_rsp_payload_fragment_data       (system_fabric_dBus_bmb_downSizer_io_input_rsp_payload_fragment_data[63:0]       ), //i
    .CLKOUT0                                      (clocking_pll_CLKOUT0                                                            ), //i
    .systemCd_logic_outputReset                   (systemCd_logic_outputReset                                                      )  //i
  );
  BmbDownSizerBridge system_fabric_iBus_bmb_downSizer (
    .io_input_cmd_valid                        (system_fabric_iBus_bmb_decoder_io_outputs_1_cmd_valid                           ), //i
    .io_input_cmd_ready                        (system_fabric_iBus_bmb_downSizer_io_input_cmd_ready                             ), //o
    .io_input_cmd_payload_last                 (system_fabric_iBus_bmb_decoder_io_outputs_1_cmd_payload_last                    ), //i
    .io_input_cmd_payload_fragment_source      (system_fabric_iBus_bmb_decoder_io_outputs_1_cmd_payload_fragment_source         ), //i
    .io_input_cmd_payload_fragment_opcode      (system_fabric_iBus_bmb_decoder_io_outputs_1_cmd_payload_fragment_opcode         ), //i
    .io_input_cmd_payload_fragment_address     (system_fabric_iBus_bmb_decoder_io_outputs_1_cmd_payload_fragment_address[31:0]  ), //i
    .io_input_cmd_payload_fragment_length      (system_fabric_iBus_bmb_decoder_io_outputs_1_cmd_payload_fragment_length[5:0]    ), //i
    .io_input_rsp_valid                        (system_fabric_iBus_bmb_downSizer_io_input_rsp_valid                             ), //o
    .io_input_rsp_ready                        (system_fabric_iBus_bmb_decoder_io_outputs_1_rsp_ready                           ), //i
    .io_input_rsp_payload_last                 (system_fabric_iBus_bmb_downSizer_io_input_rsp_payload_last                      ), //o
    .io_input_rsp_payload_fragment_source      (system_fabric_iBus_bmb_downSizer_io_input_rsp_payload_fragment_source           ), //o
    .io_input_rsp_payload_fragment_opcode      (system_fabric_iBus_bmb_downSizer_io_input_rsp_payload_fragment_opcode           ), //o
    .io_input_rsp_payload_fragment_data        (system_fabric_iBus_bmb_downSizer_io_input_rsp_payload_fragment_data[63:0]       ), //o
    .io_output_cmd_valid                       (system_fabric_iBus_bmb_downSizer_io_output_cmd_valid                            ), //o
    .io_output_cmd_ready                       (system_fabric_iBus_bmb_unburstify_io_input_cmd_ready                            ), //i
    .io_output_cmd_payload_last                (system_fabric_iBus_bmb_downSizer_io_output_cmd_payload_last                     ), //o
    .io_output_cmd_payload_fragment_source     (system_fabric_iBus_bmb_downSizer_io_output_cmd_payload_fragment_source          ), //o
    .io_output_cmd_payload_fragment_opcode     (system_fabric_iBus_bmb_downSizer_io_output_cmd_payload_fragment_opcode          ), //o
    .io_output_cmd_payload_fragment_address    (system_fabric_iBus_bmb_downSizer_io_output_cmd_payload_fragment_address[31:0]   ), //o
    .io_output_cmd_payload_fragment_length     (system_fabric_iBus_bmb_downSizer_io_output_cmd_payload_fragment_length[5:0]     ), //o
    .io_output_cmd_payload_fragment_context    (system_fabric_iBus_bmb_downSizer_io_output_cmd_payload_fragment_context         ), //o
    .io_output_rsp_valid                       (system_fabric_iBus_bmb_unburstify_io_input_rsp_valid                            ), //i
    .io_output_rsp_ready                       (system_fabric_iBus_bmb_downSizer_io_output_rsp_ready                            ), //o
    .io_output_rsp_payload_last                (system_fabric_iBus_bmb_unburstify_io_input_rsp_payload_last                     ), //i
    .io_output_rsp_payload_fragment_source     (system_fabric_iBus_bmb_unburstify_io_input_rsp_payload_fragment_source          ), //i
    .io_output_rsp_payload_fragment_opcode     (system_fabric_iBus_bmb_unburstify_io_input_rsp_payload_fragment_opcode          ), //i
    .io_output_rsp_payload_fragment_data       (system_fabric_iBus_bmb_unburstify_io_input_rsp_payload_fragment_data[31:0]      ), //i
    .io_output_rsp_payload_fragment_context    (system_fabric_iBus_bmb_unburstify_io_input_rsp_payload_fragment_context         ), //i
    .CLKOUT0                                   (clocking_pll_CLKOUT0                                                            ), //i
    .systemCd_logic_outputReset                (systemCd_logic_outputReset                                                      )  //i
  );
  BmbUnburstify system_fabric_iBus_bmb_unburstify (
    .io_input_cmd_valid                        (system_fabric_iBus_bmb_downSizer_io_output_cmd_valid                            ), //i
    .io_input_cmd_ready                        (system_fabric_iBus_bmb_unburstify_io_input_cmd_ready                            ), //o
    .io_input_cmd_payload_last                 (system_fabric_iBus_bmb_downSizer_io_output_cmd_payload_last                     ), //i
    .io_input_cmd_payload_fragment_source      (system_fabric_iBus_bmb_downSizer_io_output_cmd_payload_fragment_source          ), //i
    .io_input_cmd_payload_fragment_opcode      (system_fabric_iBus_bmb_downSizer_io_output_cmd_payload_fragment_opcode          ), //i
    .io_input_cmd_payload_fragment_address     (system_fabric_iBus_bmb_downSizer_io_output_cmd_payload_fragment_address[31:0]   ), //i
    .io_input_cmd_payload_fragment_length      (system_fabric_iBus_bmb_downSizer_io_output_cmd_payload_fragment_length[5:0]     ), //i
    .io_input_cmd_payload_fragment_context     (system_fabric_iBus_bmb_downSizer_io_output_cmd_payload_fragment_context         ), //i
    .io_input_rsp_valid                        (system_fabric_iBus_bmb_unburstify_io_input_rsp_valid                            ), //o
    .io_input_rsp_ready                        (system_fabric_iBus_bmb_downSizer_io_output_rsp_ready                            ), //i
    .io_input_rsp_payload_last                 (system_fabric_iBus_bmb_unburstify_io_input_rsp_payload_last                     ), //o
    .io_input_rsp_payload_fragment_source      (system_fabric_iBus_bmb_unburstify_io_input_rsp_payload_fragment_source          ), //o
    .io_input_rsp_payload_fragment_opcode      (system_fabric_iBus_bmb_unburstify_io_input_rsp_payload_fragment_opcode          ), //o
    .io_input_rsp_payload_fragment_data        (system_fabric_iBus_bmb_unburstify_io_input_rsp_payload_fragment_data[31:0]      ), //o
    .io_input_rsp_payload_fragment_context     (system_fabric_iBus_bmb_unburstify_io_input_rsp_payload_fragment_context         ), //o
    .io_output_cmd_valid                       (system_fabric_iBus_bmb_unburstify_io_output_cmd_valid                           ), //o
    .io_output_cmd_ready                       (system_bmbPeripheral_bmb_arbiter_io_inputs_1_cmd_ready                          ), //i
    .io_output_cmd_payload_last                (system_fabric_iBus_bmb_unburstify_io_output_cmd_payload_last                    ), //o
    .io_output_cmd_payload_fragment_opcode     (system_fabric_iBus_bmb_unburstify_io_output_cmd_payload_fragment_opcode         ), //o
    .io_output_cmd_payload_fragment_address    (system_fabric_iBus_bmb_unburstify_io_output_cmd_payload_fragment_address[31:0]  ), //o
    .io_output_cmd_payload_fragment_length     (system_fabric_iBus_bmb_unburstify_io_output_cmd_payload_fragment_length[1:0]    ), //o
    .io_output_cmd_payload_fragment_context    (system_fabric_iBus_bmb_unburstify_io_output_cmd_payload_fragment_context[3:0]   ), //o
    .io_output_rsp_valid                       (system_bmbPeripheral_bmb_arbiter_io_inputs_1_rsp_valid                          ), //i
    .io_output_rsp_ready                       (system_fabric_iBus_bmb_unburstify_io_output_rsp_ready                           ), //o
    .io_output_rsp_payload_last                (system_bmbPeripheral_bmb_arbiter_io_inputs_1_rsp_payload_last                   ), //i
    .io_output_rsp_payload_fragment_opcode     (system_bmbPeripheral_bmb_arbiter_io_inputs_1_rsp_payload_fragment_opcode        ), //i
    .io_output_rsp_payload_fragment_data       (system_bmbPeripheral_bmb_arbiter_io_inputs_1_rsp_payload_fragment_data[31:0]    ), //i
    .io_output_rsp_payload_fragment_context    (system_bmbPeripheral_bmb_arbiter_io_inputs_1_rsp_payload_fragment_context[3:0]  ), //i
    .CLKOUT0                                   (clocking_pll_CLKOUT0                                                            ), //i
    .systemCd_logic_outputReset                (systemCd_logic_outputReset                                                      )  //i
  );
  BmbDownSizerBridge_1 system_fabric_dBus_bmb_downSizer (
    .io_input_cmd_valid                        (system_fabric_dBus_bmb_decoder_io_outputs_1_cmd_valid                           ), //i
    .io_input_cmd_ready                        (system_fabric_dBus_bmb_downSizer_io_input_cmd_ready                             ), //o
    .io_input_cmd_payload_last                 (system_fabric_dBus_bmb_decoder_io_outputs_1_cmd_payload_last                    ), //i
    .io_input_cmd_payload_fragment_source      (system_fabric_dBus_bmb_decoder_io_outputs_1_cmd_payload_fragment_source[3:0]    ), //i
    .io_input_cmd_payload_fragment_opcode      (system_fabric_dBus_bmb_decoder_io_outputs_1_cmd_payload_fragment_opcode         ), //i
    .io_input_cmd_payload_fragment_address     (system_fabric_dBus_bmb_decoder_io_outputs_1_cmd_payload_fragment_address[31:0]  ), //i
    .io_input_cmd_payload_fragment_length      (system_fabric_dBus_bmb_decoder_io_outputs_1_cmd_payload_fragment_length[5:0]    ), //i
    .io_input_cmd_payload_fragment_data        (system_fabric_dBus_bmb_decoder_io_outputs_1_cmd_payload_fragment_data[63:0]     ), //i
    .io_input_cmd_payload_fragment_mask        (system_fabric_dBus_bmb_decoder_io_outputs_1_cmd_payload_fragment_mask[7:0]      ), //i
    .io_input_rsp_valid                        (system_fabric_dBus_bmb_downSizer_io_input_rsp_valid                             ), //o
    .io_input_rsp_ready                        (system_fabric_dBus_bmb_decoder_io_outputs_1_rsp_ready                           ), //i
    .io_input_rsp_payload_last                 (system_fabric_dBus_bmb_downSizer_io_input_rsp_payload_last                      ), //o
    .io_input_rsp_payload_fragment_source      (system_fabric_dBus_bmb_downSizer_io_input_rsp_payload_fragment_source[3:0]      ), //o
    .io_input_rsp_payload_fragment_opcode      (system_fabric_dBus_bmb_downSizer_io_input_rsp_payload_fragment_opcode           ), //o
    .io_input_rsp_payload_fragment_data        (system_fabric_dBus_bmb_downSizer_io_input_rsp_payload_fragment_data[63:0]       ), //o
    .io_output_cmd_valid                       (system_fabric_dBus_bmb_downSizer_io_output_cmd_valid                            ), //o
    .io_output_cmd_ready                       (system_fabric_dBus_bmb_unburstify_io_input_cmd_ready                            ), //i
    .io_output_cmd_payload_last                (system_fabric_dBus_bmb_downSizer_io_output_cmd_payload_last                     ), //o
    .io_output_cmd_payload_fragment_source     (system_fabric_dBus_bmb_downSizer_io_output_cmd_payload_fragment_source[3:0]     ), //o
    .io_output_cmd_payload_fragment_opcode     (system_fabric_dBus_bmb_downSizer_io_output_cmd_payload_fragment_opcode          ), //o
    .io_output_cmd_payload_fragment_address    (system_fabric_dBus_bmb_downSizer_io_output_cmd_payload_fragment_address[31:0]   ), //o
    .io_output_cmd_payload_fragment_length     (system_fabric_dBus_bmb_downSizer_io_output_cmd_payload_fragment_length[5:0]     ), //o
    .io_output_cmd_payload_fragment_data       (system_fabric_dBus_bmb_downSizer_io_output_cmd_payload_fragment_data[31:0]      ), //o
    .io_output_cmd_payload_fragment_mask       (system_fabric_dBus_bmb_downSizer_io_output_cmd_payload_fragment_mask[3:0]       ), //o
    .io_output_cmd_payload_fragment_context    (system_fabric_dBus_bmb_downSizer_io_output_cmd_payload_fragment_context         ), //o
    .io_output_rsp_valid                       (system_fabric_dBus_bmb_unburstify_io_input_rsp_valid                            ), //i
    .io_output_rsp_ready                       (system_fabric_dBus_bmb_downSizer_io_output_rsp_ready                            ), //o
    .io_output_rsp_payload_last                (system_fabric_dBus_bmb_unburstify_io_input_rsp_payload_last                     ), //i
    .io_output_rsp_payload_fragment_source     (system_fabric_dBus_bmb_unburstify_io_input_rsp_payload_fragment_source[3:0]     ), //i
    .io_output_rsp_payload_fragment_opcode     (system_fabric_dBus_bmb_unburstify_io_input_rsp_payload_fragment_opcode          ), //i
    .io_output_rsp_payload_fragment_data       (system_fabric_dBus_bmb_unburstify_io_input_rsp_payload_fragment_data[31:0]      ), //i
    .io_output_rsp_payload_fragment_context    (system_fabric_dBus_bmb_unburstify_io_input_rsp_payload_fragment_context         ), //i
    .CLKOUT0                                   (clocking_pll_CLKOUT0                                                            ), //i
    .systemCd_logic_outputReset                (systemCd_logic_outputReset                                                      )  //i
  );
  BmbUnburstify_1 system_fabric_dBus_bmb_unburstify (
    .io_input_cmd_valid                        (system_fabric_dBus_bmb_downSizer_io_output_cmd_valid                            ), //i
    .io_input_cmd_ready                        (system_fabric_dBus_bmb_unburstify_io_input_cmd_ready                            ), //o
    .io_input_cmd_payload_last                 (system_fabric_dBus_bmb_downSizer_io_output_cmd_payload_last                     ), //i
    .io_input_cmd_payload_fragment_source      (system_fabric_dBus_bmb_downSizer_io_output_cmd_payload_fragment_source[3:0]     ), //i
    .io_input_cmd_payload_fragment_opcode      (system_fabric_dBus_bmb_downSizer_io_output_cmd_payload_fragment_opcode          ), //i
    .io_input_cmd_payload_fragment_address     (system_fabric_dBus_bmb_downSizer_io_output_cmd_payload_fragment_address[31:0]   ), //i
    .io_input_cmd_payload_fragment_length      (system_fabric_dBus_bmb_downSizer_io_output_cmd_payload_fragment_length[5:0]     ), //i
    .io_input_cmd_payload_fragment_data        (system_fabric_dBus_bmb_downSizer_io_output_cmd_payload_fragment_data[31:0]      ), //i
    .io_input_cmd_payload_fragment_mask        (system_fabric_dBus_bmb_downSizer_io_output_cmd_payload_fragment_mask[3:0]       ), //i
    .io_input_cmd_payload_fragment_context     (system_fabric_dBus_bmb_downSizer_io_output_cmd_payload_fragment_context         ), //i
    .io_input_rsp_valid                        (system_fabric_dBus_bmb_unburstify_io_input_rsp_valid                            ), //o
    .io_input_rsp_ready                        (system_fabric_dBus_bmb_downSizer_io_output_rsp_ready                            ), //i
    .io_input_rsp_payload_last                 (system_fabric_dBus_bmb_unburstify_io_input_rsp_payload_last                     ), //o
    .io_input_rsp_payload_fragment_source      (system_fabric_dBus_bmb_unburstify_io_input_rsp_payload_fragment_source[3:0]     ), //o
    .io_input_rsp_payload_fragment_opcode      (system_fabric_dBus_bmb_unburstify_io_input_rsp_payload_fragment_opcode          ), //o
    .io_input_rsp_payload_fragment_data        (system_fabric_dBus_bmb_unburstify_io_input_rsp_payload_fragment_data[31:0]      ), //o
    .io_input_rsp_payload_fragment_context     (system_fabric_dBus_bmb_unburstify_io_input_rsp_payload_fragment_context         ), //o
    .io_output_cmd_valid                       (system_fabric_dBus_bmb_unburstify_io_output_cmd_valid                           ), //o
    .io_output_cmd_ready                       (system_bmbPeripheral_bmb_arbiter_io_inputs_0_cmd_ready                          ), //i
    .io_output_cmd_payload_last                (system_fabric_dBus_bmb_unburstify_io_output_cmd_payload_last                    ), //o
    .io_output_cmd_payload_fragment_opcode     (system_fabric_dBus_bmb_unburstify_io_output_cmd_payload_fragment_opcode         ), //o
    .io_output_cmd_payload_fragment_address    (system_fabric_dBus_bmb_unburstify_io_output_cmd_payload_fragment_address[31:0]  ), //o
    .io_output_cmd_payload_fragment_length     (system_fabric_dBus_bmb_unburstify_io_output_cmd_payload_fragment_length[1:0]    ), //o
    .io_output_cmd_payload_fragment_data       (system_fabric_dBus_bmb_unburstify_io_output_cmd_payload_fragment_data[31:0]     ), //o
    .io_output_cmd_payload_fragment_mask       (system_fabric_dBus_bmb_unburstify_io_output_cmd_payload_fragment_mask[3:0]      ), //o
    .io_output_cmd_payload_fragment_context    (system_fabric_dBus_bmb_unburstify_io_output_cmd_payload_fragment_context[6:0]   ), //o
    .io_output_rsp_valid                       (system_bmbPeripheral_bmb_arbiter_io_inputs_0_rsp_valid                          ), //i
    .io_output_rsp_ready                       (system_fabric_dBus_bmb_unburstify_io_output_rsp_ready                           ), //o
    .io_output_rsp_payload_last                (system_bmbPeripheral_bmb_arbiter_io_inputs_0_rsp_payload_last                   ), //i
    .io_output_rsp_payload_fragment_opcode     (system_bmbPeripheral_bmb_arbiter_io_inputs_0_rsp_payload_fragment_opcode        ), //i
    .io_output_rsp_payload_fragment_data       (system_bmbPeripheral_bmb_arbiter_io_inputs_0_rsp_payload_fragment_data[31:0]    ), //i
    .io_output_rsp_payload_fragment_context    (system_bmbPeripheral_bmb_arbiter_io_inputs_0_rsp_payload_fragment_context[6:0]  ), //i
    .CLKOUT0                                   (clocking_pll_CLKOUT0                                                            ), //i
    .systemCd_logic_outputReset                (systemCd_logic_outputReset                                                      )  //i
  );
  BmbArbiter_3 system_fabric_iBus_bmb_arbiter (
    .io_inputs_0_cmd_valid                       (system_cores_1_iBus_connector_decoder_cmd_valid                              ), //i
    .io_inputs_0_cmd_ready                       (system_fabric_iBus_bmb_arbiter_io_inputs_0_cmd_ready                         ), //o
    .io_inputs_0_cmd_payload_last                (system_cores_1_iBus_connector_decoder_cmd_payload_last                       ), //i
    .io_inputs_0_cmd_payload_fragment_opcode     (system_cores_1_iBus_connector_decoder_cmd_payload_fragment_opcode            ), //i
    .io_inputs_0_cmd_payload_fragment_address    (system_cores_1_iBus_connector_decoder_cmd_payload_fragment_address[31:0]     ), //i
    .io_inputs_0_cmd_payload_fragment_length     (system_cores_1_iBus_connector_decoder_cmd_payload_fragment_length[5:0]       ), //i
    .io_inputs_0_rsp_valid                       (system_fabric_iBus_bmb_arbiter_io_inputs_0_rsp_valid                         ), //o
    .io_inputs_0_rsp_ready                       (system_cores_1_iBus_connector_decoder_rsp_ready                              ), //i
    .io_inputs_0_rsp_payload_last                (system_fabric_iBus_bmb_arbiter_io_inputs_0_rsp_payload_last                  ), //o
    .io_inputs_0_rsp_payload_fragment_opcode     (system_fabric_iBus_bmb_arbiter_io_inputs_0_rsp_payload_fragment_opcode       ), //o
    .io_inputs_0_rsp_payload_fragment_data       (system_fabric_iBus_bmb_arbiter_io_inputs_0_rsp_payload_fragment_data[63:0]   ), //o
    .io_inputs_1_cmd_valid                       (system_cores_0_iBus_connector_decoder_cmd_valid                              ), //i
    .io_inputs_1_cmd_ready                       (system_fabric_iBus_bmb_arbiter_io_inputs_1_cmd_ready                         ), //o
    .io_inputs_1_cmd_payload_last                (system_cores_0_iBus_connector_decoder_cmd_payload_last                       ), //i
    .io_inputs_1_cmd_payload_fragment_opcode     (system_cores_0_iBus_connector_decoder_cmd_payload_fragment_opcode            ), //i
    .io_inputs_1_cmd_payload_fragment_address    (system_cores_0_iBus_connector_decoder_cmd_payload_fragment_address[31:0]     ), //i
    .io_inputs_1_cmd_payload_fragment_length     (system_cores_0_iBus_connector_decoder_cmd_payload_fragment_length[5:0]       ), //i
    .io_inputs_1_rsp_valid                       (system_fabric_iBus_bmb_arbiter_io_inputs_1_rsp_valid                         ), //o
    .io_inputs_1_rsp_ready                       (system_cores_0_iBus_connector_decoder_rsp_ready                              ), //i
    .io_inputs_1_rsp_payload_last                (system_fabric_iBus_bmb_arbiter_io_inputs_1_rsp_payload_last                  ), //o
    .io_inputs_1_rsp_payload_fragment_opcode     (system_fabric_iBus_bmb_arbiter_io_inputs_1_rsp_payload_fragment_opcode       ), //o
    .io_inputs_1_rsp_payload_fragment_data       (system_fabric_iBus_bmb_arbiter_io_inputs_1_rsp_payload_fragment_data[63:0]   ), //o
    .io_output_cmd_valid                         (system_fabric_iBus_bmb_arbiter_io_output_cmd_valid                           ), //o
    .io_output_cmd_ready                         (system_fabric_iBus_bmb_cmd_ready                                             ), //i
    .io_output_cmd_payload_last                  (system_fabric_iBus_bmb_arbiter_io_output_cmd_payload_last                    ), //o
    .io_output_cmd_payload_fragment_source       (system_fabric_iBus_bmb_arbiter_io_output_cmd_payload_fragment_source         ), //o
    .io_output_cmd_payload_fragment_opcode       (system_fabric_iBus_bmb_arbiter_io_output_cmd_payload_fragment_opcode         ), //o
    .io_output_cmd_payload_fragment_address      (system_fabric_iBus_bmb_arbiter_io_output_cmd_payload_fragment_address[31:0]  ), //o
    .io_output_cmd_payload_fragment_length       (system_fabric_iBus_bmb_arbiter_io_output_cmd_payload_fragment_length[5:0]    ), //o
    .io_output_rsp_valid                         (system_fabric_iBus_bmb_rsp_valid                                             ), //i
    .io_output_rsp_ready                         (system_fabric_iBus_bmb_arbiter_io_output_rsp_ready                           ), //o
    .io_output_rsp_payload_last                  (system_fabric_iBus_bmb_rsp_payload_last                                      ), //i
    .io_output_rsp_payload_fragment_source       (system_fabric_iBus_bmb_rsp_payload_fragment_source                           ), //i
    .io_output_rsp_payload_fragment_opcode       (system_fabric_iBus_bmb_rsp_payload_fragment_opcode                           ), //i
    .io_output_rsp_payload_fragment_data         (system_fabric_iBus_bmb_rsp_payload_fragment_data[63:0]                       ), //i
    .CLKOUT0                                     (clocking_pll_CLKOUT0                                                         ), //i
    .systemCd_logic_outputReset                  (systemCd_logic_outputReset                                                   )  //i
  );
  BmbArbiter_4 system_fabric_dBus_bmb_arbiter (
    .io_inputs_0_cmd_valid                       (system_dma_readSg_decoder_io_outputs_0_cmd_valid                                               ), //i
    .io_inputs_0_cmd_ready                       (system_fabric_dBus_bmb_arbiter_io_inputs_0_cmd_ready                                           ), //o
    .io_inputs_0_cmd_payload_last                (system_dma_readSg_decoder_io_outputs_0_cmd_payload_last                                        ), //i
    .io_inputs_0_cmd_payload_fragment_opcode     (system_dma_readSg_decoder_io_outputs_0_cmd_payload_fragment_opcode                             ), //i
    .io_inputs_0_cmd_payload_fragment_address    (system_dma_readSg_decoder_io_outputs_0_cmd_payload_fragment_address[31:0]                      ), //i
    .io_inputs_0_cmd_payload_fragment_length     (system_dma_readSg_decoder_io_outputs_0_cmd_payload_fragment_length[4:0]                        ), //i
    .io_inputs_0_cmd_payload_fragment_data       (_zz_444[63:0]                                                                                  ), //i
    .io_inputs_0_cmd_payload_fragment_mask       (_zz_445[7:0]                                                                                   ), //i
    .io_inputs_0_rsp_valid                       (system_fabric_dBus_bmb_arbiter_io_inputs_0_rsp_valid                                           ), //o
    .io_inputs_0_rsp_ready                       (system_dma_readSg_decoder_io_outputs_0_rsp_ready                                               ), //i
    .io_inputs_0_rsp_payload_last                (system_fabric_dBus_bmb_arbiter_io_inputs_0_rsp_payload_last                                    ), //o
    .io_inputs_0_rsp_payload_fragment_opcode     (system_fabric_dBus_bmb_arbiter_io_inputs_0_rsp_payload_fragment_opcode                         ), //o
    .io_inputs_0_rsp_payload_fragment_data       (system_fabric_dBus_bmb_arbiter_io_inputs_0_rsp_payload_fragment_data[63:0]                     ), //o
    .io_inputs_1_cmd_valid                       (system_dma_read_decoder_io_outputs_0_cmd_valid                                                 ), //i
    .io_inputs_1_cmd_ready                       (system_fabric_dBus_bmb_arbiter_io_inputs_1_cmd_ready                                           ), //o
    .io_inputs_1_cmd_payload_last                (system_dma_read_decoder_io_outputs_0_cmd_payload_last                                          ), //i
    .io_inputs_1_cmd_payload_fragment_source     (system_dma_read_decoder_io_outputs_0_cmd_payload_fragment_source                               ), //i
    .io_inputs_1_cmd_payload_fragment_opcode     (system_dma_read_decoder_io_outputs_0_cmd_payload_fragment_opcode                               ), //i
    .io_inputs_1_cmd_payload_fragment_address    (system_dma_read_decoder_io_outputs_0_cmd_payload_fragment_address[31:0]                        ), //i
    .io_inputs_1_cmd_payload_fragment_length     (system_dma_read_decoder_io_outputs_0_cmd_payload_fragment_length[5:0]                          ), //i
    .io_inputs_1_cmd_payload_fragment_data       (_zz_446[63:0]                                                                                  ), //i
    .io_inputs_1_cmd_payload_fragment_mask       (_zz_447[7:0]                                                                                   ), //i
    .io_inputs_1_cmd_payload_fragment_context    (system_dma_read_decoder_io_outputs_0_cmd_payload_fragment_context[13:0]                        ), //i
    .io_inputs_1_rsp_valid                       (system_fabric_dBus_bmb_arbiter_io_inputs_1_rsp_valid                                           ), //o
    .io_inputs_1_rsp_ready                       (system_dma_read_decoder_io_outputs_0_rsp_ready                                                 ), //i
    .io_inputs_1_rsp_payload_last                (system_fabric_dBus_bmb_arbiter_io_inputs_1_rsp_payload_last                                    ), //o
    .io_inputs_1_rsp_payload_fragment_source     (system_fabric_dBus_bmb_arbiter_io_inputs_1_rsp_payload_fragment_source                         ), //o
    .io_inputs_1_rsp_payload_fragment_opcode     (system_fabric_dBus_bmb_arbiter_io_inputs_1_rsp_payload_fragment_opcode                         ), //o
    .io_inputs_1_rsp_payload_fragment_data       (system_fabric_dBus_bmb_arbiter_io_inputs_1_rsp_payload_fragment_data[63:0]                     ), //o
    .io_inputs_1_rsp_payload_fragment_context    (system_fabric_dBus_bmb_arbiter_io_inputs_1_rsp_payload_fragment_context[13:0]                  ), //o
    .io_inputs_2_cmd_valid                       (system_fabric_invalidationMonitor_output_connector_decoder_cmd_valid                           ), //i
    .io_inputs_2_cmd_ready                       (system_fabric_dBus_bmb_arbiter_io_inputs_2_cmd_ready                                           ), //o
    .io_inputs_2_cmd_payload_last                (system_fabric_invalidationMonitor_output_connector_decoder_cmd_payload_last                    ), //i
    .io_inputs_2_cmd_payload_fragment_source     (system_fabric_invalidationMonitor_output_connector_decoder_cmd_payload_fragment_source[1:0]    ), //i
    .io_inputs_2_cmd_payload_fragment_opcode     (system_fabric_invalidationMonitor_output_connector_decoder_cmd_payload_fragment_opcode         ), //i
    .io_inputs_2_cmd_payload_fragment_address    (system_fabric_invalidationMonitor_output_connector_decoder_cmd_payload_fragment_address[31:0]  ), //i
    .io_inputs_2_cmd_payload_fragment_length     (system_fabric_invalidationMonitor_output_connector_decoder_cmd_payload_fragment_length[5:0]    ), //i
    .io_inputs_2_cmd_payload_fragment_data       (system_fabric_invalidationMonitor_output_connector_decoder_cmd_payload_fragment_data[63:0]     ), //i
    .io_inputs_2_cmd_payload_fragment_mask       (system_fabric_invalidationMonitor_output_connector_decoder_cmd_payload_fragment_mask[7:0]      ), //i
    .io_inputs_2_cmd_payload_fragment_context    (system_fabric_invalidationMonitor_output_connector_decoder_cmd_payload_fragment_context[42:0]  ), //i
    .io_inputs_2_rsp_valid                       (system_fabric_dBus_bmb_arbiter_io_inputs_2_rsp_valid                                           ), //o
    .io_inputs_2_rsp_ready                       (system_fabric_invalidationMonitor_output_connector_decoder_rsp_ready                           ), //i
    .io_inputs_2_rsp_payload_last                (system_fabric_dBus_bmb_arbiter_io_inputs_2_rsp_payload_last                                    ), //o
    .io_inputs_2_rsp_payload_fragment_source     (system_fabric_dBus_bmb_arbiter_io_inputs_2_rsp_payload_fragment_source[1:0]                    ), //o
    .io_inputs_2_rsp_payload_fragment_opcode     (system_fabric_dBus_bmb_arbiter_io_inputs_2_rsp_payload_fragment_opcode                         ), //o
    .io_inputs_2_rsp_payload_fragment_data       (system_fabric_dBus_bmb_arbiter_io_inputs_2_rsp_payload_fragment_data[63:0]                     ), //o
    .io_inputs_2_rsp_payload_fragment_context    (system_fabric_dBus_bmb_arbiter_io_inputs_2_rsp_payload_fragment_context[42:0]                  ), //o
    .io_output_cmd_valid                         (system_fabric_dBus_bmb_arbiter_io_output_cmd_valid                                             ), //o
    .io_output_cmd_ready                         (system_fabric_dBus_bmb_cmd_ready                                                               ), //i
    .io_output_cmd_payload_last                  (system_fabric_dBus_bmb_arbiter_io_output_cmd_payload_last                                      ), //o
    .io_output_cmd_payload_fragment_source       (system_fabric_dBus_bmb_arbiter_io_output_cmd_payload_fragment_source[3:0]                      ), //o
    .io_output_cmd_payload_fragment_opcode       (system_fabric_dBus_bmb_arbiter_io_output_cmd_payload_fragment_opcode                           ), //o
    .io_output_cmd_payload_fragment_address      (system_fabric_dBus_bmb_arbiter_io_output_cmd_payload_fragment_address[31:0]                    ), //o
    .io_output_cmd_payload_fragment_length       (system_fabric_dBus_bmb_arbiter_io_output_cmd_payload_fragment_length[5:0]                      ), //o
    .io_output_cmd_payload_fragment_data         (system_fabric_dBus_bmb_arbiter_io_output_cmd_payload_fragment_data[63:0]                       ), //o
    .io_output_cmd_payload_fragment_mask         (system_fabric_dBus_bmb_arbiter_io_output_cmd_payload_fragment_mask[7:0]                        ), //o
    .io_output_cmd_payload_fragment_context      (system_fabric_dBus_bmb_arbiter_io_output_cmd_payload_fragment_context[42:0]                    ), //o
    .io_output_rsp_valid                         (system_fabric_dBus_bmb_rsp_valid                                                               ), //i
    .io_output_rsp_ready                         (system_fabric_dBus_bmb_arbiter_io_output_rsp_ready                                             ), //o
    .io_output_rsp_payload_last                  (system_fabric_dBus_bmb_rsp_payload_last                                                        ), //i
    .io_output_rsp_payload_fragment_source       (system_fabric_dBus_bmb_rsp_payload_fragment_source[3:0]                                        ), //i
    .io_output_rsp_payload_fragment_opcode       (system_fabric_dBus_bmb_rsp_payload_fragment_opcode                                             ), //i
    .io_output_rsp_payload_fragment_data         (system_fabric_dBus_bmb_rsp_payload_fragment_data[63:0]                                         ), //i
    .io_output_rsp_payload_fragment_context      (system_fabric_dBus_bmb_rsp_payload_fragment_context[42:0]                                      ), //i
    .CLKOUT0                                     (clocking_pll_CLKOUT0                                                                           ), //i
    .systemCd_logic_outputReset                  (systemCd_logic_outputReset                                                                     )  //i
  );
  BmbDecoder_5 system_dma_read_decoder (
    .io_input_cmd_valid                           (system_dma_logic_io_read_cmd_halfPipe_valid                                    ), //i
    .io_input_cmd_ready                           (system_dma_read_decoder_io_input_cmd_ready                                     ), //o
    .io_input_cmd_payload_last                    (system_dma_logic_io_read_cmd_halfPipe_payload_last                             ), //i
    .io_input_cmd_payload_fragment_source         (system_dma_logic_io_read_cmd_halfPipe_payload_fragment_source                  ), //i
    .io_input_cmd_payload_fragment_opcode         (system_dma_logic_io_read_cmd_halfPipe_payload_fragment_opcode                  ), //i
    .io_input_cmd_payload_fragment_address        (system_dma_logic_io_read_cmd_halfPipe_payload_fragment_address[31:0]           ), //i
    .io_input_cmd_payload_fragment_length         (system_dma_logic_io_read_cmd_halfPipe_payload_fragment_length[5:0]             ), //i
    .io_input_cmd_payload_fragment_context        (system_dma_logic_io_read_cmd_halfPipe_payload_fragment_context[13:0]           ), //i
    .io_input_rsp_valid                           (system_dma_read_decoder_io_input_rsp_valid                                     ), //o
    .io_input_rsp_ready                           (system_dma_logic_io_read_rsp_ready                                             ), //i
    .io_input_rsp_payload_last                    (system_dma_read_decoder_io_input_rsp_payload_last                              ), //o
    .io_input_rsp_payload_fragment_source         (system_dma_read_decoder_io_input_rsp_payload_fragment_source                   ), //o
    .io_input_rsp_payload_fragment_opcode         (system_dma_read_decoder_io_input_rsp_payload_fragment_opcode                   ), //o
    .io_input_rsp_payload_fragment_data           (system_dma_read_decoder_io_input_rsp_payload_fragment_data[63:0]               ), //o
    .io_input_rsp_payload_fragment_context        (system_dma_read_decoder_io_input_rsp_payload_fragment_context[13:0]            ), //o
    .io_outputs_0_cmd_valid                       (system_dma_read_decoder_io_outputs_0_cmd_valid                                 ), //o
    .io_outputs_0_cmd_ready                       (system_fabric_dBus_bmb_arbiter_io_inputs_1_cmd_ready                           ), //i
    .io_outputs_0_cmd_payload_last                (system_dma_read_decoder_io_outputs_0_cmd_payload_last                          ), //o
    .io_outputs_0_cmd_payload_fragment_source     (system_dma_read_decoder_io_outputs_0_cmd_payload_fragment_source               ), //o
    .io_outputs_0_cmd_payload_fragment_opcode     (system_dma_read_decoder_io_outputs_0_cmd_payload_fragment_opcode               ), //o
    .io_outputs_0_cmd_payload_fragment_address    (system_dma_read_decoder_io_outputs_0_cmd_payload_fragment_address[31:0]        ), //o
    .io_outputs_0_cmd_payload_fragment_length     (system_dma_read_decoder_io_outputs_0_cmd_payload_fragment_length[5:0]          ), //o
    .io_outputs_0_cmd_payload_fragment_context    (system_dma_read_decoder_io_outputs_0_cmd_payload_fragment_context[13:0]        ), //o
    .io_outputs_0_rsp_valid                       (system_fabric_dBus_bmb_arbiter_io_inputs_1_rsp_valid                           ), //i
    .io_outputs_0_rsp_ready                       (system_dma_read_decoder_io_outputs_0_rsp_ready                                 ), //o
    .io_outputs_0_rsp_payload_last                (system_fabric_dBus_bmb_arbiter_io_inputs_1_rsp_payload_last                    ), //i
    .io_outputs_0_rsp_payload_fragment_source     (system_fabric_dBus_bmb_arbiter_io_inputs_1_rsp_payload_fragment_source         ), //i
    .io_outputs_0_rsp_payload_fragment_opcode     (system_fabric_dBus_bmb_arbiter_io_inputs_1_rsp_payload_fragment_opcode         ), //i
    .io_outputs_0_rsp_payload_fragment_data       (system_fabric_dBus_bmb_arbiter_io_inputs_1_rsp_payload_fragment_data[63:0]     ), //i
    .io_outputs_0_rsp_payload_fragment_context    (system_fabric_dBus_bmb_arbiter_io_inputs_1_rsp_payload_fragment_context[13:0]  )  //i
  );
  BmbDecoder_6 system_dma_readSg_decoder (
    .io_input_cmd_valid                           (system_dma_logic_io_sgRead_cmd_valid                                        ), //i
    .io_input_cmd_ready                           (system_dma_readSg_decoder_io_input_cmd_ready                                ), //o
    .io_input_cmd_payload_last                    (system_dma_logic_io_sgRead_cmd_payload_last                                 ), //i
    .io_input_cmd_payload_fragment_opcode         (system_dma_logic_io_sgRead_cmd_payload_fragment_opcode                      ), //i
    .io_input_cmd_payload_fragment_address        (system_dma_logic_io_sgRead_cmd_payload_fragment_address[31:0]               ), //i
    .io_input_cmd_payload_fragment_length         (system_dma_logic_io_sgRead_cmd_payload_fragment_length[4:0]                 ), //i
    .io_input_rsp_valid                           (system_dma_readSg_decoder_io_input_rsp_valid                                ), //o
    .io_input_rsp_ready                           (system_dma_logic_io_sgRead_rsp_ready                                        ), //i
    .io_input_rsp_payload_last                    (system_dma_readSg_decoder_io_input_rsp_payload_last                         ), //o
    .io_input_rsp_payload_fragment_opcode         (system_dma_readSg_decoder_io_input_rsp_payload_fragment_opcode              ), //o
    .io_input_rsp_payload_fragment_data           (system_dma_readSg_decoder_io_input_rsp_payload_fragment_data[63:0]          ), //o
    .io_outputs_0_cmd_valid                       (system_dma_readSg_decoder_io_outputs_0_cmd_valid                            ), //o
    .io_outputs_0_cmd_ready                       (system_fabric_dBus_bmb_arbiter_io_inputs_0_cmd_ready                        ), //i
    .io_outputs_0_cmd_payload_last                (system_dma_readSg_decoder_io_outputs_0_cmd_payload_last                     ), //o
    .io_outputs_0_cmd_payload_fragment_opcode     (system_dma_readSg_decoder_io_outputs_0_cmd_payload_fragment_opcode          ), //o
    .io_outputs_0_cmd_payload_fragment_address    (system_dma_readSg_decoder_io_outputs_0_cmd_payload_fragment_address[31:0]   ), //o
    .io_outputs_0_cmd_payload_fragment_length     (system_dma_readSg_decoder_io_outputs_0_cmd_payload_fragment_length[4:0]     ), //o
    .io_outputs_0_rsp_valid                       (system_fabric_dBus_bmb_arbiter_io_inputs_0_rsp_valid                        ), //i
    .io_outputs_0_rsp_ready                       (system_dma_readSg_decoder_io_outputs_0_rsp_ready                            ), //o
    .io_outputs_0_rsp_payload_last                (system_fabric_dBus_bmb_arbiter_io_inputs_0_rsp_payload_last                 ), //i
    .io_outputs_0_rsp_payload_fragment_opcode     (system_fabric_dBus_bmb_arbiter_io_inputs_0_rsp_payload_fragment_opcode      ), //i
    .io_outputs_0_rsp_payload_fragment_data       (system_fabric_dBus_bmb_arbiter_io_inputs_0_rsp_payload_fragment_data[63:0]  )  //i
  );
  assign system_gpioA_gpio[0] = _zz_39 ? _zz_123[0] : 1'bz;
  assign system_gpioA_gpio[1] = _zz_38 ? _zz_123[1] : 1'bz;
  assign system_gpioA_gpio[2] = _zz_37 ? _zz_123[2] : 1'bz;
  assign system_gpioA_gpio[3] = _zz_36 ? _zz_123[3] : 1'bz;
  assign system_gpioA_gpio[4] = _zz_35 ? _zz_123[4] : 1'bz;
  assign system_gpioA_gpio[5] = _zz_34 ? _zz_123[5] : 1'bz;
  assign system_gpioA_gpio[6] = _zz_33 ? _zz_123[6] : 1'bz;
  assign system_gpioA_gpio[7] = _zz_32 ? _zz_123[7] : 1'bz;
  assign system_gpioA_gpio[8] = _zz_31 ? _zz_123[8] : 1'bz;
  assign system_gpioA_gpio[9] = _zz_30 ? _zz_123[9] : 1'bz;
  assign system_gpioA_gpio[10] = _zz_29 ? _zz_123[10] : 1'bz;
  assign system_gpioA_gpio[11] = _zz_28 ? _zz_123[11] : 1'bz;
  assign system_gpioA_gpio[12] = _zz_27 ? _zz_123[12] : 1'bz;
  assign system_gpioA_gpio[13] = _zz_26 ? _zz_123[13] : 1'bz;
  assign system_gpioA_gpio[14] = _zz_25 ? _zz_123[14] : 1'bz;
  assign system_gpioA_gpio[15] = _zz_24 ? _zz_123[15] : 1'bz;
  assign system_gpioA_gpio[16] = _zz_23 ? _zz_123[16] : 1'bz;
  assign system_gpioA_gpio[17] = _zz_22 ? _zz_123[17] : 1'bz;
  assign system_gpioA_gpio[18] = _zz_21 ? _zz_123[18] : 1'bz;
  assign system_gpioA_gpio[19] = _zz_20 ? _zz_123[19] : 1'bz;
  assign system_gpioA_gpio[20] = _zz_19 ? _zz_123[20] : 1'bz;
  assign system_gpioA_gpio[21] = _zz_18 ? _zz_123[21] : 1'bz;
  assign system_gpioA_gpio[22] = _zz_17 ? _zz_123[22] : 1'bz;
  assign system_gpioA_gpio[23] = _zz_16 ? _zz_123[23] : 1'bz;
  assign system_gpioA_gpio[24] = _zz_15 ? _zz_123[24] : 1'bz;
  assign system_gpioA_gpio[25] = _zz_14 ? _zz_123[25] : 1'bz;
  assign system_gpioA_gpio[26] = _zz_13 ? _zz_123[26] : 1'bz;
  assign system_gpioA_gpio[27] = _zz_12 ? _zz_123[27] : 1'bz;
  assign system_gpioA_gpio[28] = _zz_11 ? _zz_123[28] : 1'bz;
  assign system_gpioA_gpio[29] = _zz_10 ? _zz_123[29] : 1'bz;
  assign system_gpioA_gpio[30] = _zz_9 ? _zz_123[30] : 1'bz;
  assign system_gpioA_gpio[31] = _zz_8 ? _zz_123[31] : 1'bz;
  assign system_spiA_user_data[0] = _zz_7 ? _zz_137[0] : 1'bz;
  assign system_spiA_user_data[1] = _zz_6 ? _zz_137[1] : 1'bz;
  assign system_spiA_flash_data[0] = _zz_5 ? _zz_147[0] : 1'bz;
  assign system_spiA_flash_data[1] = _zz_4 ? _zz_147[1] : 1'bz;
  assign system_spiA_sdcard_data[0] = _zz_3 ? _zz_157[0] : 1'bz;
  assign system_spiA_sdcard_data[1] = _zz_2 ? _zz_157[1] : 1'bz;
  assign system_spiA_md_IO = _zz_1 ? _zz_167 : 1'bz;
  always @ (*) begin
    _zz_1 = 1'b0;
    if(_zz_168)begin
      _zz_1 = 1'b1;
    end
  end

  always @ (*) begin
    _zz_2 = 1'b0;
    if(_zz_158[1])begin
      _zz_2 = 1'b1;
    end
  end

  always @ (*) begin
    _zz_3 = 1'b0;
    if(_zz_158[0])begin
      _zz_3 = 1'b1;
    end
  end

  always @ (*) begin
    _zz_4 = 1'b0;
    if(_zz_148[1])begin
      _zz_4 = 1'b1;
    end
  end

  always @ (*) begin
    _zz_5 = 1'b0;
    if(_zz_148[0])begin
      _zz_5 = 1'b1;
    end
  end

  always @ (*) begin
    _zz_6 = 1'b0;
    if(_zz_138[1])begin
      _zz_6 = 1'b1;
    end
  end

  always @ (*) begin
    _zz_7 = 1'b0;
    if(_zz_138[0])begin
      _zz_7 = 1'b1;
    end
  end

  always @ (*) begin
    _zz_8 = 1'b0;
    if(_zz_124[31])begin
      _zz_8 = 1'b1;
    end
  end

  always @ (*) begin
    _zz_9 = 1'b0;
    if(_zz_124[30])begin
      _zz_9 = 1'b1;
    end
  end

  always @ (*) begin
    _zz_10 = 1'b0;
    if(_zz_124[29])begin
      _zz_10 = 1'b1;
    end
  end

  always @ (*) begin
    _zz_11 = 1'b0;
    if(_zz_124[28])begin
      _zz_11 = 1'b1;
    end
  end

  always @ (*) begin
    _zz_12 = 1'b0;
    if(_zz_124[27])begin
      _zz_12 = 1'b1;
    end
  end

  always @ (*) begin
    _zz_13 = 1'b0;
    if(_zz_124[26])begin
      _zz_13 = 1'b1;
    end
  end

  always @ (*) begin
    _zz_14 = 1'b0;
    if(_zz_124[25])begin
      _zz_14 = 1'b1;
    end
  end

  always @ (*) begin
    _zz_15 = 1'b0;
    if(_zz_124[24])begin
      _zz_15 = 1'b1;
    end
  end

  always @ (*) begin
    _zz_16 = 1'b0;
    if(_zz_124[23])begin
      _zz_16 = 1'b1;
    end
  end

  always @ (*) begin
    _zz_17 = 1'b0;
    if(_zz_124[22])begin
      _zz_17 = 1'b1;
    end
  end

  always @ (*) begin
    _zz_18 = 1'b0;
    if(_zz_124[21])begin
      _zz_18 = 1'b1;
    end
  end

  always @ (*) begin
    _zz_19 = 1'b0;
    if(_zz_124[20])begin
      _zz_19 = 1'b1;
    end
  end

  always @ (*) begin
    _zz_20 = 1'b0;
    if(_zz_124[19])begin
      _zz_20 = 1'b1;
    end
  end

  always @ (*) begin
    _zz_21 = 1'b0;
    if(_zz_124[18])begin
      _zz_21 = 1'b1;
    end
  end

  always @ (*) begin
    _zz_22 = 1'b0;
    if(_zz_124[17])begin
      _zz_22 = 1'b1;
    end
  end

  always @ (*) begin
    _zz_23 = 1'b0;
    if(_zz_124[16])begin
      _zz_23 = 1'b1;
    end
  end

  always @ (*) begin
    _zz_24 = 1'b0;
    if(_zz_124[15])begin
      _zz_24 = 1'b1;
    end
  end

  always @ (*) begin
    _zz_25 = 1'b0;
    if(_zz_124[14])begin
      _zz_25 = 1'b1;
    end
  end

  always @ (*) begin
    _zz_26 = 1'b0;
    if(_zz_124[13])begin
      _zz_26 = 1'b1;
    end
  end

  always @ (*) begin
    _zz_27 = 1'b0;
    if(_zz_124[12])begin
      _zz_27 = 1'b1;
    end
  end

  always @ (*) begin
    _zz_28 = 1'b0;
    if(_zz_124[11])begin
      _zz_28 = 1'b1;
    end
  end

  always @ (*) begin
    _zz_29 = 1'b0;
    if(_zz_124[10])begin
      _zz_29 = 1'b1;
    end
  end

  always @ (*) begin
    _zz_30 = 1'b0;
    if(_zz_124[9])begin
      _zz_30 = 1'b1;
    end
  end

  always @ (*) begin
    _zz_31 = 1'b0;
    if(_zz_124[8])begin
      _zz_31 = 1'b1;
    end
  end

  always @ (*) begin
    _zz_32 = 1'b0;
    if(_zz_124[7])begin
      _zz_32 = 1'b1;
    end
  end

  always @ (*) begin
    _zz_33 = 1'b0;
    if(_zz_124[6])begin
      _zz_33 = 1'b1;
    end
  end

  always @ (*) begin
    _zz_34 = 1'b0;
    if(_zz_124[5])begin
      _zz_34 = 1'b1;
    end
  end

  always @ (*) begin
    _zz_35 = 1'b0;
    if(_zz_124[4])begin
      _zz_35 = 1'b1;
    end
  end

  always @ (*) begin
    _zz_36 = 1'b0;
    if(_zz_124[3])begin
      _zz_36 = 1'b1;
    end
  end

  always @ (*) begin
    _zz_37 = 1'b0;
    if(_zz_124[2])begin
      _zz_37 = 1'b1;
    end
  end

  always @ (*) begin
    _zz_38 = 1'b0;
    if(_zz_124[1])begin
      _zz_38 = 1'b1;
    end
  end

  always @ (*) begin
    _zz_39 = 1'b0;
    if(_zz_124[0])begin
      _zz_39 = 1'b1;
    end
  end

  assign clocking_clk50 = clocking_pll_CLKOUT5;
  assign audioOut_sd = 1'b1;
  assign debugCd_logic_inputResetTrigger = 1'b0;
  always @ (*) begin
    debugCd_logic_outputResetUnbuffered = 1'b0;
    if(_zz_448)begin
      debugCd_logic_outputResetUnbuffered = 1'b1;
    end
  end

  always @ (*) begin
    vgaCd_logic_inputResetTrigger = 1'b0;
    if(bufferCC_33_io_dataOut)begin
      vgaCd_logic_inputResetTrigger = 1'b1;
    end
  end

  always @ (*) begin
    vgaCd_logic_outputResetUnbuffered = 1'b0;
    if(_zz_449)begin
      vgaCd_logic_outputResetUnbuffered = 1'b1;
    end
  end

  always @ (*) begin
    sdramCd_logic_inputResetTrigger = 1'b0;
    if(bufferCC_34_io_dataOut)begin
      sdramCd_logic_inputResetTrigger = 1'b1;
    end
    if(resetGenerator_stuff_syncTrigger)begin
      sdramCd_logic_inputResetTrigger = 1'b1;
    end
    if(resetGenerator_stuff_syncTrigger_1)begin
      sdramCd_logic_inputResetTrigger = 1'b1;
    end
  end

  always @ (*) begin
    sdramCd_logic_outputResetUnbuffered = 1'b0;
    if(_zz_450)begin
      sdramCd_logic_outputResetUnbuffered = 1'b1;
    end
  end

  always @ (*) begin
    systemCd_logic_inputResetTrigger = 1'b0;
    if(bufferCC_35_io_dataOut)begin
      systemCd_logic_inputResetTrigger = 1'b1;
    end
  end

  always @ (*) begin
    systemCd_logic_outputResetUnbuffered = 1'b0;
    if(_zz_451)begin
      systemCd_logic_outputResetUnbuffered = 1'b1;
    end
  end

  assign _zz_385 = 1'b0;
  assign _zz_386 = 1'b0;
  assign _zz_387 = 1'b0;
  assign debug_bmb_connector_decoder_cmd_valid = debug_logic_io_bmb_cmd_valid;
  assign debug_bmb_connector_decoder_rsp_ready = debug_logic_io_bmb_rsp_ready;
  assign debug_bmb_connector_decoder_cmd_payload_last = debug_logic_io_bmb_cmd_payload_last;
  assign debug_bmb_connector_decoder_cmd_payload_fragment_opcode = debug_logic_io_bmb_cmd_payload_fragment_opcode;
  assign debug_bmb_connector_decoder_cmd_payload_fragment_address = debug_logic_io_bmb_cmd_payload_fragment_address;
  assign debug_bmb_connector_decoder_cmd_payload_fragment_length = debug_logic_io_bmb_cmd_payload_fragment_length;
  assign debug_bmb_connector_decoder_cmd_payload_fragment_data = debug_logic_io_bmb_cmd_payload_fragment_data;
  assign debug_bmb_connector_decoder_cmd_payload_fragment_mask = debug_logic_io_bmb_cmd_payload_fragment_mask;
  assign system_cores_0_iBus_cmd_valid = system_cores_0_logic_cpu_iBus_cmd_valid;
  assign system_cores_0_iBus_cmd_payload_fragment_opcode = 1'b0;
  assign system_cores_0_iBus_cmd_payload_fragment_address = system_cores_0_logic_cpu_iBus_cmd_payload_address;
  assign system_cores_0_iBus_cmd_payload_fragment_length = 6'h3f;
  assign system_cores_0_iBus_cmd_payload_last = 1'b1;
  assign _zz_395 = (system_cores_0_iBus_rsp_payload_fragment_opcode == 1'b1);
  assign system_cores_0_iBus_rsp_ready = 1'b1;
  assign _zz_40 = ((1'b1 && (! dBus_Bridge_withWriteBuffer_buffer_stream_valid)) || dBus_Bridge_withWriteBuffer_buffer_stream_ready);
  assign dBus_Bridge_withWriteBuffer_buffer_stream_valid = _zz_41;
  assign dBus_Bridge_withWriteBuffer_aggregationCounterFull = (dBus_Bridge_withWriteBuffer_aggregationCounter == 3'b111);
  assign dBus_Bridge_withWriteBuffer_timerFull = dBus_Bridge_withWriteBuffer_timer[4];
  assign dBus_Bridge_withWriteBuffer_hit = (system_cores_0_logic_cpu_dBus_cmd_payload_address[31 : 3] == dBus_Bridge_withWriteBuffer_buffer_address[31 : 3]);
  assign dBus_Bridge_withWriteBuffer_canAggregate = ((((((system_cores_0_logic_cpu_dBus_cmd_valid && system_cores_0_logic_cpu_dBus_cmd_payload_wr) && (! system_cores_0_logic_cpu_dBus_cmd_payload_uncached)) && (! system_cores_0_logic_cpu_dBus_cmd_payload_exclusive)) && (! dBus_Bridge_withWriteBuffer_timerFull)) && (! dBus_Bridge_withWriteBuffer_aggregationCounterFull)) && ((! dBus_Bridge_withWriteBuffer_buffer_stream_valid) || (dBus_Bridge_withWriteBuffer_aggregationEnabled && dBus_Bridge_withWriteBuffer_hit)));
  assign dBus_Bridge_withWriteBuffer_doFlush = ((((system_cores_0_logic_cpu_dBus_cmd_valid && (! dBus_Bridge_withWriteBuffer_canAggregate)) || dBus_Bridge_withWriteBuffer_timerFull) || dBus_Bridge_withWriteBuffer_aggregationCounterFull) || (! dBus_Bridge_withWriteBuffer_aggregationEnabled));
  always @ (*) begin
    dBus_Bridge_withWriteBuffer_halt = 1'b0;
    if((! dBus_Bridge_withWriteBuffer_syncLogic_cmdCtx_ready))begin
      dBus_Bridge_withWriteBuffer_halt = 1'b1;
    end
  end

  assign dBus_Bridge_withWriteBuffer_buffer_stream_ready = (((dBus_Bridge_bus_cmd_ready && dBus_Bridge_withWriteBuffer_doFlush) || dBus_Bridge_withWriteBuffer_canAggregate) && (! dBus_Bridge_withWriteBuffer_halt));
  assign dBus_Bridge_bus_cmd_valid = ((dBus_Bridge_withWriteBuffer_buffer_stream_valid && dBus_Bridge_withWriteBuffer_doFlush) && (! dBus_Bridge_withWriteBuffer_halt));
  assign dBus_Bridge_bus_cmd_payload_last = 1'b1;
  assign dBus_Bridge_bus_cmd_payload_fragment_opcode = (dBus_Bridge_withWriteBuffer_buffer_write ? 1'b1 : 1'b0);
  assign dBus_Bridge_bus_cmd_payload_fragment_address = dBus_Bridge_withWriteBuffer_buffer_address;
  assign dBus_Bridge_bus_cmd_payload_fragment_length = dBus_Bridge_withWriteBuffer_buffer_length;
  assign dBus_Bridge_bus_cmd_payload_fragment_data = dBus_Bridge_withWriteBuffer_buffer_data;
  assign dBus_Bridge_bus_cmd_payload_fragment_mask = dBus_Bridge_withWriteBuffer_buffer_mask;
  assign dBus_Bridge_bus_cmd_payload_fragment_exclusive = dBus_Bridge_withWriteBuffer_buffer_exclusive;
  assign dBus_Bridge_bus_cmd_payload_fragment_context = dBus_Bridge_withWriteBuffer_busCmdContext_rspCount;
  assign dBus_Bridge_withWriteBuffer_busCmdContext_rspCount = dBus_Bridge_withWriteBuffer_aggregationCounter;
  assign dBus_Bridge_withWriteBuffer_aggregationSel = system_cores_0_logic_cpu_dBus_cmd_payload_address[2 : 2];
  assign _zz_42 = system_cores_0_logic_cpu_dBus_cmd_payload_data[7 : 0];
  assign _zz_43 = system_cores_0_logic_cpu_dBus_cmd_payload_data[15 : 8];
  assign _zz_44 = system_cores_0_logic_cpu_dBus_cmd_payload_data[23 : 16];
  assign _zz_45 = system_cores_0_logic_cpu_dBus_cmd_payload_data[31 : 24];
  assign dBus_Bridge_withWriteBuffer_rspCtx_rspCount = dBus_Bridge_bus_rsp_payload_fragment_context[2 : 0];
  assign dBus_Bridge_withWriteBuffer_syncLogic_cmdCtx_valid = ((dBus_Bridge_bus_cmd_valid && dBus_Bridge_bus_cmd_ready) && (dBus_Bridge_bus_cmd_payload_fragment_opcode == 1'b1));
  assign dBus_Bridge_withWriteBuffer_syncLogic_cmdCtx_payload = dBus_Bridge_withWriteBuffer_aggregationCounter;
  assign dBus_Bridge_withWriteBuffer_syncLogic_cmdCtx_ready = dBus_Bridge_withWriteBuffer_syncLogic_cmdCtx_fifo_io_push_ready;
  assign _zz_396 = (dBus_Bridge_bus_sync_valid && dBus_Bridge_bus_sync_ready);
  assign dBus_Bridge_bus_sync_ready = system_cores_0_logic_cpu_dBus_sync_ready;
  assign _zz_388 = (dBus_Bridge_bus_rsp_payload_fragment_opcode == 1'b1);
  assign dBus_Bridge_bus_rsp_ready = 1'b1;
  assign _zz_390 = (dBus_Bridge_bus_inv_payload_address + _zz_481);
  assign _zz_389 = 1'b1;
  assign dBus_Bridge_bus_inv_ready = (_zz_389 && system_cores_0_logic_cpu_dBus_inv_ready);
  always @ (*) begin
    system_cores_0_logic_cpu_dBus_ack_thrown_valid = system_cores_0_logic_cpu_dBus_ack_valid;
    if(_zz_452)begin
      system_cores_0_logic_cpu_dBus_ack_thrown_valid = 1'b0;
    end
  end

  always @ (*) begin
    _zz_391 = system_cores_0_logic_cpu_dBus_ack_thrown_ready;
    if(_zz_452)begin
      _zz_391 = 1'b1;
    end
  end

  assign system_cores_0_logic_cpu_dBus_ack_thrown_payload_last = system_cores_0_logic_cpu_dBus_ack_payload_last;
  assign system_cores_0_logic_cpu_dBus_ack_thrown_payload_fragment_hit = system_cores_0_logic_cpu_dBus_ack_payload_fragment_hit;
  assign dBus_Bridge_bus_ack_valid = system_cores_0_logic_cpu_dBus_ack_thrown_valid;
  assign system_cores_0_logic_cpu_dBus_ack_thrown_ready = dBus_Bridge_bus_ack_ready;
  assign _zz_394 = (system_cores_0_debugBmb_cmd_payload_fragment_opcode == 1'b1);
  assign system_cores_0_debugBmb_cmd_ready = system_cores_0_logic_cpu_debug_bus_cmd_ready;
  assign system_cores_0_debugBmb_rsp_valid = _zz_46;
  assign system_cores_0_debugBmb_rsp_payload_last = 1'b1;
  assign system_cores_0_debugBmb_rsp_payload_fragment_opcode = 1'b0;
  assign system_cores_0_debugBmb_rsp_payload_fragment_data = system_cores_0_logic_cpu_debug_bus_rsp_data;
  assign system_cores_1_iBus_cmd_valid = system_cores_1_logic_cpu_iBus_cmd_valid;
  assign system_cores_1_iBus_cmd_payload_fragment_opcode = 1'b0;
  assign system_cores_1_iBus_cmd_payload_fragment_address = system_cores_1_logic_cpu_iBus_cmd_payload_address;
  assign system_cores_1_iBus_cmd_payload_fragment_length = 6'h3f;
  assign system_cores_1_iBus_cmd_payload_last = 1'b1;
  assign _zz_405 = (system_cores_1_iBus_rsp_payload_fragment_opcode == 1'b1);
  assign system_cores_1_iBus_rsp_ready = 1'b1;
  assign _zz_47 = ((1'b1 && (! dBus_Bridge_withWriteBuffer_buffer_stream_valid_1)) || dBus_Bridge_withWriteBuffer_buffer_stream_ready_1);
  assign dBus_Bridge_withWriteBuffer_buffer_stream_valid_1 = _zz_48;
  assign dBus_Bridge_withWriteBuffer_aggregationCounterFull_1 = (dBus_Bridge_withWriteBuffer_aggregationCounter_1 == 3'b111);
  assign dBus_Bridge_withWriteBuffer_timerFull_1 = dBus_Bridge_withWriteBuffer_timer_1[4];
  assign dBus_Bridge_withWriteBuffer_hit_1 = (system_cores_1_logic_cpu_dBus_cmd_payload_address[31 : 3] == dBus_Bridge_withWriteBuffer_buffer_address_1[31 : 3]);
  assign dBus_Bridge_withWriteBuffer_canAggregate_1 = ((((((system_cores_1_logic_cpu_dBus_cmd_valid && system_cores_1_logic_cpu_dBus_cmd_payload_wr) && (! system_cores_1_logic_cpu_dBus_cmd_payload_uncached)) && (! system_cores_1_logic_cpu_dBus_cmd_payload_exclusive)) && (! dBus_Bridge_withWriteBuffer_timerFull_1)) && (! dBus_Bridge_withWriteBuffer_aggregationCounterFull_1)) && ((! dBus_Bridge_withWriteBuffer_buffer_stream_valid_1) || (dBus_Bridge_withWriteBuffer_aggregationEnabled_1 && dBus_Bridge_withWriteBuffer_hit_1)));
  assign dBus_Bridge_withWriteBuffer_doFlush_1 = ((((system_cores_1_logic_cpu_dBus_cmd_valid && (! dBus_Bridge_withWriteBuffer_canAggregate_1)) || dBus_Bridge_withWriteBuffer_timerFull_1) || dBus_Bridge_withWriteBuffer_aggregationCounterFull_1) || (! dBus_Bridge_withWriteBuffer_aggregationEnabled_1));
  always @ (*) begin
    dBus_Bridge_withWriteBuffer_halt_1 = 1'b0;
    if((! dBus_Bridge_withWriteBuffer_syncLogic_cmdCtx_ready_1))begin
      dBus_Bridge_withWriteBuffer_halt_1 = 1'b1;
    end
  end

  assign dBus_Bridge_withWriteBuffer_buffer_stream_ready_1 = (((dBus_Bridge_bus_cmd_ready_1 && dBus_Bridge_withWriteBuffer_doFlush_1) || dBus_Bridge_withWriteBuffer_canAggregate_1) && (! dBus_Bridge_withWriteBuffer_halt_1));
  assign dBus_Bridge_bus_cmd_valid_1 = ((dBus_Bridge_withWriteBuffer_buffer_stream_valid_1 && dBus_Bridge_withWriteBuffer_doFlush_1) && (! dBus_Bridge_withWriteBuffer_halt_1));
  assign dBus_Bridge_bus_cmd_payload_last_1 = 1'b1;
  assign dBus_Bridge_bus_cmd_payload_fragment_opcode_1 = (dBus_Bridge_withWriteBuffer_buffer_write_1 ? 1'b1 : 1'b0);
  assign dBus_Bridge_bus_cmd_payload_fragment_address_1 = dBus_Bridge_withWriteBuffer_buffer_address_1;
  assign dBus_Bridge_bus_cmd_payload_fragment_length_1 = dBus_Bridge_withWriteBuffer_buffer_length_1;
  assign dBus_Bridge_bus_cmd_payload_fragment_data_1 = dBus_Bridge_withWriteBuffer_buffer_data_1;
  assign dBus_Bridge_bus_cmd_payload_fragment_mask_1 = dBus_Bridge_withWriteBuffer_buffer_mask_1;
  assign dBus_Bridge_bus_cmd_payload_fragment_exclusive_1 = dBus_Bridge_withWriteBuffer_buffer_exclusive_1;
  assign dBus_Bridge_bus_cmd_payload_fragment_context_1 = dBus_Bridge_withWriteBuffer_busCmdContext_rspCount_1;
  assign dBus_Bridge_withWriteBuffer_busCmdContext_rspCount_1 = dBus_Bridge_withWriteBuffer_aggregationCounter_1;
  assign dBus_Bridge_withWriteBuffer_aggregationSel_1 = system_cores_1_logic_cpu_dBus_cmd_payload_address[2 : 2];
  assign _zz_49 = system_cores_1_logic_cpu_dBus_cmd_payload_data[7 : 0];
  assign _zz_50 = system_cores_1_logic_cpu_dBus_cmd_payload_data[15 : 8];
  assign _zz_51 = system_cores_1_logic_cpu_dBus_cmd_payload_data[23 : 16];
  assign _zz_52 = system_cores_1_logic_cpu_dBus_cmd_payload_data[31 : 24];
  assign dBus_Bridge_withWriteBuffer_rspCtx_rspCount_1 = dBus_Bridge_bus_rsp_payload_fragment_context_1[2 : 0];
  assign dBus_Bridge_withWriteBuffer_syncLogic_cmdCtx_valid_1 = ((dBus_Bridge_bus_cmd_valid_1 && dBus_Bridge_bus_cmd_ready_1) && (dBus_Bridge_bus_cmd_payload_fragment_opcode_1 == 1'b1));
  assign dBus_Bridge_withWriteBuffer_syncLogic_cmdCtx_payload_1 = dBus_Bridge_withWriteBuffer_aggregationCounter_1;
  assign dBus_Bridge_withWriteBuffer_syncLogic_cmdCtx_ready_1 = dBus_Bridge_withWriteBuffer_syncLogic_cmdCtx_fifo_1_io_push_ready;
  assign _zz_406 = (dBus_Bridge_bus_sync_valid_1 && dBus_Bridge_bus_sync_ready_1);
  assign dBus_Bridge_bus_sync_ready_1 = system_cores_1_logic_cpu_dBus_sync_ready;
  assign _zz_398 = (dBus_Bridge_bus_rsp_payload_fragment_opcode_1 == 1'b1);
  assign dBus_Bridge_bus_rsp_ready_1 = 1'b1;
  assign _zz_400 = (dBus_Bridge_bus_inv_payload_address_1 + _zz_484);
  assign _zz_399 = 1'b1;
  assign dBus_Bridge_bus_inv_ready_1 = (_zz_399 && system_cores_1_logic_cpu_dBus_inv_ready);
  always @ (*) begin
    system_cores_1_logic_cpu_dBus_ack_thrown_valid = system_cores_1_logic_cpu_dBus_ack_valid;
    if(_zz_453)begin
      system_cores_1_logic_cpu_dBus_ack_thrown_valid = 1'b0;
    end
  end

  always @ (*) begin
    _zz_401 = system_cores_1_logic_cpu_dBus_ack_thrown_ready;
    if(_zz_453)begin
      _zz_401 = 1'b1;
    end
  end

  assign system_cores_1_logic_cpu_dBus_ack_thrown_payload_last = system_cores_1_logic_cpu_dBus_ack_payload_last;
  assign system_cores_1_logic_cpu_dBus_ack_thrown_payload_fragment_hit = system_cores_1_logic_cpu_dBus_ack_payload_fragment_hit;
  assign dBus_Bridge_bus_ack_valid_1 = system_cores_1_logic_cpu_dBus_ack_thrown_valid;
  assign system_cores_1_logic_cpu_dBus_ack_thrown_ready = dBus_Bridge_bus_ack_ready_1;
  assign _zz_404 = (system_cores_1_debugBmb_cmd_payload_fragment_opcode == 1'b1);
  assign system_cores_1_debugBmb_cmd_ready = system_cores_1_logic_cpu_debug_bus_cmd_ready;
  assign system_cores_1_debugBmb_rsp_valid = _zz_53;
  assign system_cores_1_debugBmb_rsp_payload_last = 1'b1;
  assign system_cores_1_debugBmb_rsp_payload_fragment_opcode = 1'b0;
  assign system_cores_1_debugBmb_rsp_payload_fragment_data = system_cores_1_logic_cpu_debug_bus_rsp_data;
  assign system_cores_0_debugBmb_cmd_valid = bmbDecoder_7_io_outputs_0_cmd_valid;
  assign system_cores_0_debugBmb_rsp_ready = bmbDecoder_7_io_outputs_0_rsp_ready;
  assign system_cores_0_debugBmb_cmd_payload_last = bmbDecoder_7_io_outputs_0_cmd_payload_last;
  assign system_cores_0_debugBmb_cmd_payload_fragment_opcode = bmbDecoder_7_io_outputs_0_cmd_payload_fragment_opcode;
  assign system_cores_0_debugBmb_cmd_payload_fragment_address = bmbDecoder_7_io_outputs_0_cmd_payload_fragment_address[7:0];
  assign system_cores_0_debugBmb_cmd_payload_fragment_length = bmbDecoder_7_io_outputs_0_cmd_payload_fragment_length;
  assign system_cores_0_debugBmb_cmd_payload_fragment_data = bmbDecoder_7_io_outputs_0_cmd_payload_fragment_data;
  assign system_cores_0_debugBmb_cmd_payload_fragment_mask = bmbDecoder_7_io_outputs_0_cmd_payload_fragment_mask;
  assign system_cores_1_debugBmb_cmd_valid = bmbDecoder_7_io_outputs_1_cmd_valid;
  assign system_cores_1_debugBmb_rsp_ready = bmbDecoder_7_io_outputs_1_rsp_ready;
  assign system_cores_1_debugBmb_cmd_payload_last = bmbDecoder_7_io_outputs_1_cmd_payload_last;
  assign system_cores_1_debugBmb_cmd_payload_fragment_opcode = bmbDecoder_7_io_outputs_1_cmd_payload_fragment_opcode;
  assign system_cores_1_debugBmb_cmd_payload_fragment_address = bmbDecoder_7_io_outputs_1_cmd_payload_fragment_address[7:0];
  assign system_cores_1_debugBmb_cmd_payload_fragment_length = bmbDecoder_7_io_outputs_1_cmd_payload_fragment_length;
  assign system_cores_1_debugBmb_cmd_payload_fragment_data = bmbDecoder_7_io_outputs_1_cmd_payload_fragment_data;
  assign system_cores_1_debugBmb_cmd_payload_fragment_mask = bmbDecoder_7_io_outputs_1_cmd_payload_fragment_mask;
  assign system_cores_0_iBus_connector_decoder_cmd_valid = system_cores_0_iBus_cmd_valid;
  assign system_cores_0_iBus_cmd_ready = system_cores_0_iBus_connector_decoder_cmd_ready;
  assign system_cores_0_iBus_rsp_valid = system_cores_0_iBus_connector_decoder_rsp_valid;
  assign system_cores_0_iBus_connector_decoder_rsp_ready = system_cores_0_iBus_rsp_ready;
  assign system_cores_0_iBus_connector_decoder_cmd_payload_last = system_cores_0_iBus_cmd_payload_last;
  assign system_cores_0_iBus_rsp_payload_last = system_cores_0_iBus_connector_decoder_rsp_payload_last;
  assign system_cores_0_iBus_connector_decoder_cmd_payload_fragment_opcode = system_cores_0_iBus_cmd_payload_fragment_opcode;
  assign system_cores_0_iBus_connector_decoder_cmd_payload_fragment_address = system_cores_0_iBus_cmd_payload_fragment_address;
  assign system_cores_0_iBus_connector_decoder_cmd_payload_fragment_length = system_cores_0_iBus_cmd_payload_fragment_length;
  assign system_cores_0_iBus_rsp_payload_fragment_opcode = system_cores_0_iBus_connector_decoder_rsp_payload_fragment_opcode;
  assign system_cores_0_iBus_rsp_payload_fragment_data = system_cores_0_iBus_connector_decoder_rsp_payload_fragment_data;
  assign dBus_Bridge_bus_cmd_ready = ((1'b1 && (! dBus_Bridge_bus_cmd_m2sPipe_valid)) || dBus_Bridge_bus_cmd_m2sPipe_ready);
  assign dBus_Bridge_bus_cmd_m2sPipe_valid = dBus_Bridge_bus_cmd_m2sPipe_rValid;
  assign dBus_Bridge_bus_cmd_m2sPipe_payload_last = dBus_Bridge_bus_cmd_m2sPipe_rData_last;
  assign dBus_Bridge_bus_cmd_m2sPipe_payload_fragment_opcode = dBus_Bridge_bus_cmd_m2sPipe_rData_fragment_opcode;
  assign dBus_Bridge_bus_cmd_m2sPipe_payload_fragment_exclusive = dBus_Bridge_bus_cmd_m2sPipe_rData_fragment_exclusive;
  assign dBus_Bridge_bus_cmd_m2sPipe_payload_fragment_address = dBus_Bridge_bus_cmd_m2sPipe_rData_fragment_address;
  assign dBus_Bridge_bus_cmd_m2sPipe_payload_fragment_length = dBus_Bridge_bus_cmd_m2sPipe_rData_fragment_length;
  assign dBus_Bridge_bus_cmd_m2sPipe_payload_fragment_data = dBus_Bridge_bus_cmd_m2sPipe_rData_fragment_data;
  assign dBus_Bridge_bus_cmd_m2sPipe_payload_fragment_mask = dBus_Bridge_bus_cmd_m2sPipe_rData_fragment_mask;
  assign dBus_Bridge_bus_cmd_m2sPipe_payload_fragment_context = dBus_Bridge_bus_cmd_m2sPipe_rData_fragment_context;
  assign dBus_Bridge_bus_cmd_m2sPipe_ready = system_cores_0_dBus_connector_decoder_cmd_ready;
  assign dBus_Bridge_bus_rsp_valid = system_cores_0_dBus_connector_decoder_rsp_valid;
  assign dBus_Bridge_bus_rsp_payload_last = system_cores_0_dBus_connector_decoder_rsp_payload_last;
  assign dBus_Bridge_bus_rsp_payload_fragment_opcode = system_cores_0_dBus_connector_decoder_rsp_payload_fragment_opcode;
  assign dBus_Bridge_bus_rsp_payload_fragment_exclusive = system_cores_0_dBus_connector_decoder_rsp_payload_fragment_exclusive;
  assign dBus_Bridge_bus_rsp_payload_fragment_data = system_cores_0_dBus_connector_decoder_rsp_payload_fragment_data;
  assign dBus_Bridge_bus_rsp_payload_fragment_context = system_cores_0_dBus_connector_decoder_rsp_payload_fragment_context;
  assign _zz_54 = ((1'b1 && (! _zz_56)) || dBus_Bridge_bus_inv_ready);
  assign _zz_56 = _zz_57;
  assign dBus_Bridge_bus_inv_valid = _zz_56;
  assign dBus_Bridge_bus_inv_payload_all = _zz_58;
  assign dBus_Bridge_bus_inv_payload_address = _zz_59;
  assign dBus_Bridge_bus_inv_payload_length = _zz_60;
  assign dBus_Bridge_bus_ack_ready = ((1'b1 && (! dBus_Bridge_bus_ack_m2sPipe_valid)) || dBus_Bridge_bus_ack_m2sPipe_ready);
  assign dBus_Bridge_bus_ack_m2sPipe_valid = dBus_Bridge_bus_ack_m2sPipe_rValid;
  assign dBus_Bridge_bus_ack_m2sPipe_ready = system_cores_0_dBus_connector_decoder_ack_ready;
  assign _zz_55 = ((1'b1 && (! _zz_61)) || dBus_Bridge_bus_sync_ready);
  assign _zz_61 = _zz_62;
  assign dBus_Bridge_bus_sync_valid = _zz_61;
  assign system_cores_0_dBus_connector_decoder_cmd_valid = dBus_Bridge_bus_cmd_m2sPipe_valid;
  assign system_cores_0_dBus_connector_decoder_rsp_ready = dBus_Bridge_bus_rsp_ready;
  assign system_cores_0_dBus_connector_decoder_cmd_payload_last = dBus_Bridge_bus_cmd_m2sPipe_payload_last;
  assign system_cores_0_dBus_connector_decoder_cmd_payload_fragment_opcode = dBus_Bridge_bus_cmd_m2sPipe_payload_fragment_opcode;
  assign system_cores_0_dBus_connector_decoder_cmd_payload_fragment_address = dBus_Bridge_bus_cmd_m2sPipe_payload_fragment_address;
  assign system_cores_0_dBus_connector_decoder_cmd_payload_fragment_length = dBus_Bridge_bus_cmd_m2sPipe_payload_fragment_length;
  assign system_cores_0_dBus_connector_decoder_cmd_payload_fragment_data = dBus_Bridge_bus_cmd_m2sPipe_payload_fragment_data;
  assign system_cores_0_dBus_connector_decoder_cmd_payload_fragment_mask = dBus_Bridge_bus_cmd_m2sPipe_payload_fragment_mask;
  assign system_cores_0_dBus_connector_decoder_cmd_payload_fragment_context = dBus_Bridge_bus_cmd_m2sPipe_payload_fragment_context;
  assign system_cores_0_dBus_connector_decoder_cmd_payload_fragment_exclusive = dBus_Bridge_bus_cmd_m2sPipe_payload_fragment_exclusive;
  assign system_cores_0_dBus_connector_decoder_inv_ready = _zz_54;
  assign system_cores_0_dBus_connector_decoder_ack_valid = dBus_Bridge_bus_ack_m2sPipe_valid;
  assign system_cores_0_dBus_connector_decoder_sync_ready = _zz_55;
  assign system_cores_1_iBus_connector_decoder_cmd_valid = system_cores_1_iBus_cmd_valid;
  assign system_cores_1_iBus_cmd_ready = system_cores_1_iBus_connector_decoder_cmd_ready;
  assign system_cores_1_iBus_rsp_valid = system_cores_1_iBus_connector_decoder_rsp_valid;
  assign system_cores_1_iBus_connector_decoder_rsp_ready = system_cores_1_iBus_rsp_ready;
  assign system_cores_1_iBus_connector_decoder_cmd_payload_last = system_cores_1_iBus_cmd_payload_last;
  assign system_cores_1_iBus_rsp_payload_last = system_cores_1_iBus_connector_decoder_rsp_payload_last;
  assign system_cores_1_iBus_connector_decoder_cmd_payload_fragment_opcode = system_cores_1_iBus_cmd_payload_fragment_opcode;
  assign system_cores_1_iBus_connector_decoder_cmd_payload_fragment_address = system_cores_1_iBus_cmd_payload_fragment_address;
  assign system_cores_1_iBus_connector_decoder_cmd_payload_fragment_length = system_cores_1_iBus_cmd_payload_fragment_length;
  assign system_cores_1_iBus_rsp_payload_fragment_opcode = system_cores_1_iBus_connector_decoder_rsp_payload_fragment_opcode;
  assign system_cores_1_iBus_rsp_payload_fragment_data = system_cores_1_iBus_connector_decoder_rsp_payload_fragment_data;
  assign dBus_Bridge_bus_cmd_ready_1 = ((1'b1 && (! dBus_Bridge_bus_cmd_m2sPipe_valid_1)) || dBus_Bridge_bus_cmd_m2sPipe_ready_1);
  assign dBus_Bridge_bus_cmd_m2sPipe_valid_1 = dBus_Bridge_bus_cmd_m2sPipe_rValid_1;
  assign dBus_Bridge_bus_cmd_m2sPipe_payload_last_1 = dBus_Bridge_bus_cmd_m2sPipe_rData_last_1;
  assign dBus_Bridge_bus_cmd_m2sPipe_payload_fragment_opcode_1 = dBus_Bridge_bus_cmd_m2sPipe_rData_fragment_opcode_1;
  assign dBus_Bridge_bus_cmd_m2sPipe_payload_fragment_exclusive_1 = dBus_Bridge_bus_cmd_m2sPipe_rData_fragment_exclusive_1;
  assign dBus_Bridge_bus_cmd_m2sPipe_payload_fragment_address_1 = dBus_Bridge_bus_cmd_m2sPipe_rData_fragment_address_1;
  assign dBus_Bridge_bus_cmd_m2sPipe_payload_fragment_length_1 = dBus_Bridge_bus_cmd_m2sPipe_rData_fragment_length_1;
  assign dBus_Bridge_bus_cmd_m2sPipe_payload_fragment_data_1 = dBus_Bridge_bus_cmd_m2sPipe_rData_fragment_data_1;
  assign dBus_Bridge_bus_cmd_m2sPipe_payload_fragment_mask_1 = dBus_Bridge_bus_cmd_m2sPipe_rData_fragment_mask_1;
  assign dBus_Bridge_bus_cmd_m2sPipe_payload_fragment_context_1 = dBus_Bridge_bus_cmd_m2sPipe_rData_fragment_context_1;
  assign dBus_Bridge_bus_cmd_m2sPipe_ready_1 = system_cores_1_dBus_connector_decoder_cmd_ready;
  assign dBus_Bridge_bus_rsp_valid_1 = system_cores_1_dBus_connector_decoder_rsp_valid;
  assign dBus_Bridge_bus_rsp_payload_last_1 = system_cores_1_dBus_connector_decoder_rsp_payload_last;
  assign dBus_Bridge_bus_rsp_payload_fragment_opcode_1 = system_cores_1_dBus_connector_decoder_rsp_payload_fragment_opcode;
  assign dBus_Bridge_bus_rsp_payload_fragment_exclusive_1 = system_cores_1_dBus_connector_decoder_rsp_payload_fragment_exclusive;
  assign dBus_Bridge_bus_rsp_payload_fragment_data_1 = system_cores_1_dBus_connector_decoder_rsp_payload_fragment_data;
  assign dBus_Bridge_bus_rsp_payload_fragment_context_1 = system_cores_1_dBus_connector_decoder_rsp_payload_fragment_context;
  assign _zz_63 = ((1'b1 && (! _zz_65)) || dBus_Bridge_bus_inv_ready_1);
  assign _zz_65 = _zz_66;
  assign dBus_Bridge_bus_inv_valid_1 = _zz_65;
  assign dBus_Bridge_bus_inv_payload_all_1 = _zz_67;
  assign dBus_Bridge_bus_inv_payload_address_1 = _zz_68;
  assign dBus_Bridge_bus_inv_payload_length_1 = _zz_69;
  assign dBus_Bridge_bus_ack_ready_1 = ((1'b1 && (! dBus_Bridge_bus_ack_m2sPipe_valid_1)) || dBus_Bridge_bus_ack_m2sPipe_ready_1);
  assign dBus_Bridge_bus_ack_m2sPipe_valid_1 = dBus_Bridge_bus_ack_m2sPipe_rValid_1;
  assign dBus_Bridge_bus_ack_m2sPipe_ready_1 = system_cores_1_dBus_connector_decoder_ack_ready;
  assign _zz_64 = ((1'b1 && (! _zz_70)) || dBus_Bridge_bus_sync_ready_1);
  assign _zz_70 = _zz_71;
  assign dBus_Bridge_bus_sync_valid_1 = _zz_70;
  assign system_cores_1_dBus_connector_decoder_cmd_valid = dBus_Bridge_bus_cmd_m2sPipe_valid_1;
  assign system_cores_1_dBus_connector_decoder_rsp_ready = dBus_Bridge_bus_rsp_ready_1;
  assign system_cores_1_dBus_connector_decoder_cmd_payload_last = dBus_Bridge_bus_cmd_m2sPipe_payload_last_1;
  assign system_cores_1_dBus_connector_decoder_cmd_payload_fragment_opcode = dBus_Bridge_bus_cmd_m2sPipe_payload_fragment_opcode_1;
  assign system_cores_1_dBus_connector_decoder_cmd_payload_fragment_address = dBus_Bridge_bus_cmd_m2sPipe_payload_fragment_address_1;
  assign system_cores_1_dBus_connector_decoder_cmd_payload_fragment_length = dBus_Bridge_bus_cmd_m2sPipe_payload_fragment_length_1;
  assign system_cores_1_dBus_connector_decoder_cmd_payload_fragment_data = dBus_Bridge_bus_cmd_m2sPipe_payload_fragment_data_1;
  assign system_cores_1_dBus_connector_decoder_cmd_payload_fragment_mask = dBus_Bridge_bus_cmd_m2sPipe_payload_fragment_mask_1;
  assign system_cores_1_dBus_connector_decoder_cmd_payload_fragment_context = dBus_Bridge_bus_cmd_m2sPipe_payload_fragment_context_1;
  assign system_cores_1_dBus_connector_decoder_cmd_payload_fragment_exclusive = dBus_Bridge_bus_cmd_m2sPipe_payload_fragment_exclusive_1;
  assign system_cores_1_dBus_connector_decoder_inv_ready = _zz_63;
  assign system_cores_1_dBus_connector_decoder_ack_valid = dBus_Bridge_bus_ack_m2sPipe_valid_1;
  assign system_cores_1_dBus_connector_decoder_sync_ready = _zz_64;
  assign _zz_408 = 1'b0;
  assign resetGenerator_stuff_syncTrigger = bufferCC_36_io_dataOut;
  assign _zz_409 = 1'b0;
  assign resetGenerator_stuff_syncTrigger_1 = bufferCC_37_io_dataOut;
  assign debug_bmb_connector_decoder_cmd_ready = bmbDecoder_7_io_input_cmd_ready;
  assign debug_bmb_connector_decoder_rsp_valid = bmbDecoder_7_io_input_rsp_valid;
  assign debug_bmb_connector_decoder_rsp_payload_last = bmbDecoder_7_io_input_rsp_payload_last;
  assign debug_bmb_connector_decoder_rsp_payload_fragment_opcode = bmbDecoder_7_io_input_rsp_payload_fragment_opcode;
  assign debug_bmb_connector_decoder_rsp_payload_fragment_data = bmbDecoder_7_io_input_rsp_payload_fragment_data;
  assign system_fabric_exclusiveMonitor_output_connector_decoder_cmd_valid = system_fabric_exclusiveMonitor_logic_io_output_cmd_valid;
  assign system_fabric_exclusiveMonitor_output_connector_decoder_rsp_ready = system_fabric_exclusiveMonitor_logic_io_output_rsp_ready;
  assign system_fabric_exclusiveMonitor_output_connector_decoder_cmd_payload_last = system_fabric_exclusiveMonitor_logic_io_output_cmd_payload_last;
  assign system_fabric_exclusiveMonitor_output_connector_decoder_cmd_payload_fragment_source = system_fabric_exclusiveMonitor_logic_io_output_cmd_payload_fragment_source;
  assign system_fabric_exclusiveMonitor_output_connector_decoder_cmd_payload_fragment_opcode = system_fabric_exclusiveMonitor_logic_io_output_cmd_payload_fragment_opcode;
  assign system_fabric_exclusiveMonitor_output_connector_decoder_cmd_payload_fragment_address = system_fabric_exclusiveMonitor_logic_io_output_cmd_payload_fragment_address;
  assign system_fabric_exclusiveMonitor_output_connector_decoder_cmd_payload_fragment_length = system_fabric_exclusiveMonitor_logic_io_output_cmd_payload_fragment_length;
  assign system_fabric_exclusiveMonitor_output_connector_decoder_cmd_payload_fragment_data = system_fabric_exclusiveMonitor_logic_io_output_cmd_payload_fragment_data;
  assign system_fabric_exclusiveMonitor_output_connector_decoder_cmd_payload_fragment_mask = system_fabric_exclusiveMonitor_logic_io_output_cmd_payload_fragment_mask;
  assign system_fabric_exclusiveMonitor_output_connector_decoder_cmd_payload_fragment_context = system_fabric_exclusiveMonitor_logic_io_output_cmd_payload_fragment_context;
  assign system_fabric_exclusiveMonitor_output_connector_decoder_inv_ready = system_fabric_exclusiveMonitor_logic_io_output_inv_ready;
  assign system_fabric_exclusiveMonitor_output_connector_decoder_ack_valid = system_fabric_exclusiveMonitor_logic_io_output_ack_valid;
  assign system_fabric_exclusiveMonitor_output_connector_decoder_sync_ready = system_fabric_exclusiveMonitor_logic_io_output_sync_ready;
  assign system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_valid = (system_fabric_invalidationMonitor_logic_io_output_cmd_valid || system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_rValid);
  assign _zz_410 = (! system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_rValid);
  assign system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_payload_last = (system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_rValid ? system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_rData_last : system_fabric_invalidationMonitor_logic_io_output_cmd_payload_last);
  assign system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_payload_fragment_source = (system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_rValid ? system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_rData_fragment_source : system_fabric_invalidationMonitor_logic_io_output_cmd_payload_fragment_source);
  assign system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_payload_fragment_opcode = (system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_rValid ? system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_rData_fragment_opcode : system_fabric_invalidationMonitor_logic_io_output_cmd_payload_fragment_opcode);
  assign system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_payload_fragment_address = (system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_rValid ? system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_rData_fragment_address : system_fabric_invalidationMonitor_logic_io_output_cmd_payload_fragment_address);
  assign system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_payload_fragment_length = (system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_rValid ? system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_rData_fragment_length : system_fabric_invalidationMonitor_logic_io_output_cmd_payload_fragment_length);
  assign system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_payload_fragment_data = (system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_rValid ? system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_rData_fragment_data : system_fabric_invalidationMonitor_logic_io_output_cmd_payload_fragment_data);
  assign system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_payload_fragment_mask = (system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_rValid ? system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_rData_fragment_mask : system_fabric_invalidationMonitor_logic_io_output_cmd_payload_fragment_mask);
  assign system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_payload_fragment_context = (system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_rValid ? system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_rData_fragment_context : system_fabric_invalidationMonitor_logic_io_output_cmd_payload_fragment_context);
  assign system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_ready = ((1'b1 && (! system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_valid)) || system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_ready);
  assign system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_valid = system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_rValid;
  assign system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_payload_last = system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_rData_last;
  assign system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_payload_fragment_source = system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_rData_fragment_source;
  assign system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_payload_fragment_opcode = system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_rData_fragment_opcode;
  assign system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_payload_fragment_address = system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_rData_fragment_address;
  assign system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_payload_fragment_length = system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_rData_fragment_length;
  assign system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_payload_fragment_data = system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_rData_fragment_data;
  assign system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_payload_fragment_mask = system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_rData_fragment_mask;
  assign system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_payload_fragment_context = system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_rData_fragment_context;
  assign system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_ready = system_fabric_invalidationMonitor_output_connector_decoder_cmd_ready;
  assign _zz_72 = ((1'b1 && (! _zz_73)) || system_fabric_invalidationMonitor_logic_io_output_rsp_ready);
  assign _zz_73 = _zz_74;
  assign system_fabric_invalidationMonitor_output_connector_decoder_cmd_valid = system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_valid;
  assign system_fabric_invalidationMonitor_output_connector_decoder_rsp_ready = _zz_72;
  assign system_fabric_invalidationMonitor_output_connector_decoder_cmd_payload_last = system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_payload_last;
  assign system_fabric_invalidationMonitor_output_connector_decoder_cmd_payload_fragment_source = system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_payload_fragment_source;
  assign system_fabric_invalidationMonitor_output_connector_decoder_cmd_payload_fragment_opcode = system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_payload_fragment_opcode;
  assign system_fabric_invalidationMonitor_output_connector_decoder_cmd_payload_fragment_address = system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_payload_fragment_address;
  assign system_fabric_invalidationMonitor_output_connector_decoder_cmd_payload_fragment_length = system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_payload_fragment_length;
  assign system_fabric_invalidationMonitor_output_connector_decoder_cmd_payload_fragment_data = system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_payload_fragment_data;
  assign system_fabric_invalidationMonitor_output_connector_decoder_cmd_payload_fragment_mask = system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_payload_fragment_mask;
  assign system_fabric_invalidationMonitor_output_connector_decoder_cmd_payload_fragment_context = system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_payload_fragment_context;
  assign system_fabric_exclusiveMonitor_output_connector_decoder_cmd_ready = system_fabric_invalidationMonitor_logic_io_input_cmd_ready;
  assign system_fabric_exclusiveMonitor_output_connector_decoder_rsp_valid = system_fabric_invalidationMonitor_logic_io_input_rsp_valid;
  assign system_fabric_exclusiveMonitor_output_connector_decoder_rsp_payload_last = system_fabric_invalidationMonitor_logic_io_input_rsp_payload_last;
  assign system_fabric_exclusiveMonitor_output_connector_decoder_rsp_payload_fragment_source = system_fabric_invalidationMonitor_logic_io_input_rsp_payload_fragment_source;
  assign system_fabric_exclusiveMonitor_output_connector_decoder_rsp_payload_fragment_opcode = system_fabric_invalidationMonitor_logic_io_input_rsp_payload_fragment_opcode;
  assign system_fabric_exclusiveMonitor_output_connector_decoder_rsp_payload_fragment_data = system_fabric_invalidationMonitor_logic_io_input_rsp_payload_fragment_data;
  assign system_fabric_exclusiveMonitor_output_connector_decoder_rsp_payload_fragment_context = system_fabric_invalidationMonitor_logic_io_input_rsp_payload_fragment_context;
  assign system_fabric_exclusiveMonitor_output_connector_decoder_inv_valid = system_fabric_invalidationMonitor_logic_io_input_inv_valid;
  assign system_fabric_exclusiveMonitor_output_connector_decoder_ack_ready = system_fabric_invalidationMonitor_logic_io_input_ack_ready;
  assign system_fabric_exclusiveMonitor_output_connector_decoder_inv_payload_source = system_fabric_invalidationMonitor_logic_io_input_inv_payload_source;
  assign system_fabric_exclusiveMonitor_output_connector_decoder_inv_payload_address = system_fabric_invalidationMonitor_logic_io_input_inv_payload_address;
  assign system_fabric_exclusiveMonitor_output_connector_decoder_inv_payload_length = system_fabric_invalidationMonitor_logic_io_input_inv_payload_length;
  assign system_fabric_exclusiveMonitor_output_connector_decoder_inv_payload_all = system_fabric_invalidationMonitor_logic_io_input_inv_payload_all;
  assign system_fabric_exclusiveMonitor_output_connector_decoder_sync_valid = system_fabric_invalidationMonitor_logic_io_input_sync_valid;
  assign system_fabric_exclusiveMonitor_output_connector_decoder_sync_payload_source = system_fabric_invalidationMonitor_logic_io_input_sync_payload_source;
  assign _zz_81 = (! _zz_93);
  assign _zz_92 = ((1'b1 && (! _zz_103)) || system_fabric_exclusiveMonitor_logic_io_input_cmd_ready);
  assign _zz_103 = _zz_104;
  assign _zz_91 = ((1'b1 && (! _zz_114)) || system_fabric_dBusCoherent_bmb_connector_decoder_rsp_ready);
  assign _zz_114 = _zz_115;
  assign system_fabric_dBusCoherent_bmb_connector_decoder_cmd_valid = system_fabric_dBusCoherent_bmb_cmd_valid;
  assign system_fabric_dBusCoherent_bmb_cmd_ready = system_fabric_dBusCoherent_bmb_connector_decoder_cmd_ready;
  assign system_fabric_dBusCoherent_bmb_rsp_valid = system_fabric_dBusCoherent_bmb_connector_decoder_rsp_valid;
  assign system_fabric_dBusCoherent_bmb_connector_decoder_rsp_ready = system_fabric_dBusCoherent_bmb_rsp_ready;
  assign system_fabric_dBusCoherent_bmb_connector_decoder_cmd_payload_last = system_fabric_dBusCoherent_bmb_cmd_payload_last;
  assign system_fabric_dBusCoherent_bmb_rsp_payload_last = system_fabric_dBusCoherent_bmb_connector_decoder_rsp_payload_last;
  assign system_fabric_dBusCoherent_bmb_connector_decoder_cmd_payload_fragment_source = system_fabric_dBusCoherent_bmb_cmd_payload_fragment_source;
  assign system_fabric_dBusCoherent_bmb_connector_decoder_cmd_payload_fragment_opcode = system_fabric_dBusCoherent_bmb_cmd_payload_fragment_opcode;
  assign system_fabric_dBusCoherent_bmb_connector_decoder_cmd_payload_fragment_address = system_fabric_dBusCoherent_bmb_cmd_payload_fragment_address;
  assign system_fabric_dBusCoherent_bmb_connector_decoder_cmd_payload_fragment_length = system_fabric_dBusCoherent_bmb_cmd_payload_fragment_length;
  assign system_fabric_dBusCoherent_bmb_connector_decoder_cmd_payload_fragment_data = system_fabric_dBusCoherent_bmb_cmd_payload_fragment_data;
  assign system_fabric_dBusCoherent_bmb_connector_decoder_cmd_payload_fragment_mask = system_fabric_dBusCoherent_bmb_cmd_payload_fragment_mask;
  assign system_fabric_dBusCoherent_bmb_connector_decoder_cmd_payload_fragment_context = system_fabric_dBusCoherent_bmb_cmd_payload_fragment_context;
  assign system_fabric_dBusCoherent_bmb_connector_decoder_cmd_payload_fragment_exclusive = system_fabric_dBusCoherent_bmb_cmd_payload_fragment_exclusive;
  assign system_fabric_dBusCoherent_bmb_rsp_payload_fragment_source = system_fabric_dBusCoherent_bmb_connector_decoder_rsp_payload_fragment_source;
  assign system_fabric_dBusCoherent_bmb_rsp_payload_fragment_opcode = system_fabric_dBusCoherent_bmb_connector_decoder_rsp_payload_fragment_opcode;
  assign system_fabric_dBusCoherent_bmb_rsp_payload_fragment_data = system_fabric_dBusCoherent_bmb_connector_decoder_rsp_payload_fragment_data;
  assign system_fabric_dBusCoherent_bmb_rsp_payload_fragment_context = system_fabric_dBusCoherent_bmb_connector_decoder_rsp_payload_fragment_context;
  assign system_fabric_dBusCoherent_bmb_rsp_payload_fragment_exclusive = system_fabric_dBusCoherent_bmb_connector_decoder_rsp_payload_fragment_exclusive;
  assign system_fabric_dBusCoherent_bmb_inv_valid = system_fabric_dBusCoherent_bmb_connector_decoder_inv_valid;
  assign system_fabric_dBusCoherent_bmb_connector_decoder_inv_ready = system_fabric_dBusCoherent_bmb_inv_ready;
  assign system_fabric_dBusCoherent_bmb_connector_decoder_ack_valid = system_fabric_dBusCoherent_bmb_ack_valid;
  assign system_fabric_dBusCoherent_bmb_ack_ready = system_fabric_dBusCoherent_bmb_connector_decoder_ack_ready;
  assign system_fabric_dBusCoherent_bmb_inv_payload_source = system_fabric_dBusCoherent_bmb_connector_decoder_inv_payload_source;
  assign system_fabric_dBusCoherent_bmb_inv_payload_address = system_fabric_dBusCoherent_bmb_connector_decoder_inv_payload_address;
  assign system_fabric_dBusCoherent_bmb_inv_payload_length = system_fabric_dBusCoherent_bmb_connector_decoder_inv_payload_length;
  assign system_fabric_dBusCoherent_bmb_inv_payload_all = system_fabric_dBusCoherent_bmb_connector_decoder_inv_payload_all;
  assign system_fabric_dBusCoherent_bmb_sync_valid = system_fabric_dBusCoherent_bmb_connector_decoder_sync_valid;
  assign system_fabric_dBusCoherent_bmb_connector_decoder_sync_ready = system_fabric_dBusCoherent_bmb_sync_ready;
  assign system_fabric_dBusCoherent_bmb_sync_payload_source = system_fabric_dBusCoherent_bmb_connector_decoder_sync_payload_source;
  assign _zz_80 = system_fabric_dBusCoherent_bmb_connector_decoder_cmd_valid;
  assign system_fabric_dBusCoherent_bmb_connector_decoder_cmd_ready = _zz_81;
  assign system_fabric_dBusCoherent_bmb_connector_decoder_rsp_valid = _zz_114;
  assign _zz_82 = system_fabric_dBusCoherent_bmb_connector_decoder_cmd_payload_last;
  assign system_fabric_dBusCoherent_bmb_connector_decoder_rsp_payload_last = _zz_116;
  assign _zz_83 = system_fabric_dBusCoherent_bmb_connector_decoder_cmd_payload_fragment_source;
  assign _zz_84 = system_fabric_dBusCoherent_bmb_connector_decoder_cmd_payload_fragment_opcode;
  assign _zz_86 = system_fabric_dBusCoherent_bmb_connector_decoder_cmd_payload_fragment_address;
  assign _zz_87 = system_fabric_dBusCoherent_bmb_connector_decoder_cmd_payload_fragment_length;
  assign _zz_88 = system_fabric_dBusCoherent_bmb_connector_decoder_cmd_payload_fragment_data;
  assign _zz_89 = system_fabric_dBusCoherent_bmb_connector_decoder_cmd_payload_fragment_mask;
  assign _zz_90 = system_fabric_dBusCoherent_bmb_connector_decoder_cmd_payload_fragment_context;
  assign _zz_85 = system_fabric_dBusCoherent_bmb_connector_decoder_cmd_payload_fragment_exclusive;
  assign system_fabric_dBusCoherent_bmb_connector_decoder_rsp_payload_fragment_source = _zz_117;
  assign system_fabric_dBusCoherent_bmb_connector_decoder_rsp_payload_fragment_opcode = _zz_118;
  assign system_fabric_dBusCoherent_bmb_connector_decoder_rsp_payload_fragment_data = _zz_120;
  assign system_fabric_dBusCoherent_bmb_connector_decoder_rsp_payload_fragment_context = _zz_121;
  assign system_fabric_dBusCoherent_bmb_connector_decoder_rsp_payload_fragment_exclusive = _zz_119;
  assign system_fabric_dBusCoherent_bmb_connector_decoder_inv_valid = system_fabric_exclusiveMonitor_logic_io_input_inv_valid;
  assign system_fabric_dBusCoherent_bmb_connector_decoder_ack_ready = system_fabric_exclusiveMonitor_logic_io_input_ack_ready;
  assign system_fabric_dBusCoherent_bmb_connector_decoder_inv_payload_source = system_fabric_exclusiveMonitor_logic_io_input_inv_payload_source;
  assign system_fabric_dBusCoherent_bmb_connector_decoder_inv_payload_address = system_fabric_exclusiveMonitor_logic_io_input_inv_payload_address;
  assign system_fabric_dBusCoherent_bmb_connector_decoder_inv_payload_length = system_fabric_exclusiveMonitor_logic_io_input_inv_payload_length;
  assign system_fabric_dBusCoherent_bmb_connector_decoder_inv_payload_all = system_fabric_exclusiveMonitor_logic_io_input_inv_payload_all;
  assign system_fabric_dBusCoherent_bmb_connector_decoder_sync_valid = system_fabric_exclusiveMonitor_logic_io_input_sync_valid;
  assign system_fabric_dBusCoherent_bmb_connector_decoder_sync_payload_source = system_fabric_exclusiveMonitor_logic_io_input_sync_payload_source;
  assign system_fabric_dBusCoherent_bmb_cmd_valid = system_fabric_dBusCoherent_bmb_arbiter_io_output_cmd_valid;
  assign system_fabric_dBusCoherent_bmb_rsp_ready = system_fabric_dBusCoherent_bmb_arbiter_io_output_rsp_ready;
  assign system_fabric_dBusCoherent_bmb_cmd_payload_last = system_fabric_dBusCoherent_bmb_arbiter_io_output_cmd_payload_last;
  assign system_fabric_dBusCoherent_bmb_cmd_payload_fragment_source = system_fabric_dBusCoherent_bmb_arbiter_io_output_cmd_payload_fragment_source;
  assign system_fabric_dBusCoherent_bmb_cmd_payload_fragment_opcode = system_fabric_dBusCoherent_bmb_arbiter_io_output_cmd_payload_fragment_opcode;
  assign system_fabric_dBusCoherent_bmb_cmd_payload_fragment_address = system_fabric_dBusCoherent_bmb_arbiter_io_output_cmd_payload_fragment_address;
  assign system_fabric_dBusCoherent_bmb_cmd_payload_fragment_length = system_fabric_dBusCoherent_bmb_arbiter_io_output_cmd_payload_fragment_length;
  assign system_fabric_dBusCoherent_bmb_cmd_payload_fragment_data = system_fabric_dBusCoherent_bmb_arbiter_io_output_cmd_payload_fragment_data;
  assign system_fabric_dBusCoherent_bmb_cmd_payload_fragment_mask = system_fabric_dBusCoherent_bmb_arbiter_io_output_cmd_payload_fragment_mask;
  assign system_fabric_dBusCoherent_bmb_cmd_payload_fragment_context = system_fabric_dBusCoherent_bmb_arbiter_io_output_cmd_payload_fragment_context;
  assign system_fabric_dBusCoherent_bmb_cmd_payload_fragment_exclusive = system_fabric_dBusCoherent_bmb_arbiter_io_output_cmd_payload_fragment_exclusive;
  assign system_fabric_dBusCoherent_bmb_inv_ready = system_fabric_dBusCoherent_bmb_arbiter_io_output_inv_ready;
  assign system_fabric_dBusCoherent_bmb_ack_valid = system_fabric_dBusCoherent_bmb_arbiter_io_output_ack_valid;
  assign system_fabric_dBusCoherent_bmb_sync_ready = system_fabric_dBusCoherent_bmb_arbiter_io_output_sync_ready;
  assign system_cores_0_dBus_connector_decoder_cmd_ready = system_fabric_dBusCoherent_bmb_arbiter_io_inputs_2_cmd_ready;
  assign system_cores_0_dBus_connector_decoder_rsp_valid = system_fabric_dBusCoherent_bmb_arbiter_io_inputs_2_rsp_valid;
  assign system_cores_0_dBus_connector_decoder_rsp_payload_last = system_fabric_dBusCoherent_bmb_arbiter_io_inputs_2_rsp_payload_last;
  assign system_cores_0_dBus_connector_decoder_rsp_payload_fragment_opcode = system_fabric_dBusCoherent_bmb_arbiter_io_inputs_2_rsp_payload_fragment_opcode;
  assign system_cores_0_dBus_connector_decoder_rsp_payload_fragment_data = system_fabric_dBusCoherent_bmb_arbiter_io_inputs_2_rsp_payload_fragment_data;
  assign system_cores_0_dBus_connector_decoder_rsp_payload_fragment_context = system_fabric_dBusCoherent_bmb_arbiter_io_inputs_2_rsp_payload_fragment_context;
  assign system_cores_0_dBus_connector_decoder_rsp_payload_fragment_exclusive = system_fabric_dBusCoherent_bmb_arbiter_io_inputs_2_rsp_payload_fragment_exclusive;
  assign system_cores_0_dBus_connector_decoder_inv_valid = system_fabric_dBusCoherent_bmb_arbiter_io_inputs_2_inv_valid;
  assign system_cores_0_dBus_connector_decoder_ack_ready = system_fabric_dBusCoherent_bmb_arbiter_io_inputs_2_ack_ready;
  assign system_cores_0_dBus_connector_decoder_inv_payload_address = system_fabric_dBusCoherent_bmb_arbiter_io_inputs_2_inv_payload_address;
  assign system_cores_0_dBus_connector_decoder_inv_payload_length = system_fabric_dBusCoherent_bmb_arbiter_io_inputs_2_inv_payload_length;
  assign system_cores_0_dBus_connector_decoder_inv_payload_all = system_fabric_dBusCoherent_bmb_arbiter_io_inputs_2_inv_payload_all;
  assign system_cores_0_dBus_connector_decoder_sync_valid = system_fabric_dBusCoherent_bmb_arbiter_io_inputs_2_sync_valid;
  assign system_cores_1_dBus_connector_decoder_cmd_ready = system_fabric_dBusCoherent_bmb_arbiter_io_inputs_1_cmd_ready;
  assign system_cores_1_dBus_connector_decoder_rsp_valid = system_fabric_dBusCoherent_bmb_arbiter_io_inputs_1_rsp_valid;
  assign system_cores_1_dBus_connector_decoder_rsp_payload_last = system_fabric_dBusCoherent_bmb_arbiter_io_inputs_1_rsp_payload_last;
  assign system_cores_1_dBus_connector_decoder_rsp_payload_fragment_opcode = system_fabric_dBusCoherent_bmb_arbiter_io_inputs_1_rsp_payload_fragment_opcode;
  assign system_cores_1_dBus_connector_decoder_rsp_payload_fragment_data = system_fabric_dBusCoherent_bmb_arbiter_io_inputs_1_rsp_payload_fragment_data;
  assign system_cores_1_dBus_connector_decoder_rsp_payload_fragment_context = system_fabric_dBusCoherent_bmb_arbiter_io_inputs_1_rsp_payload_fragment_context;
  assign system_cores_1_dBus_connector_decoder_rsp_payload_fragment_exclusive = system_fabric_dBusCoherent_bmb_arbiter_io_inputs_1_rsp_payload_fragment_exclusive;
  assign system_cores_1_dBus_connector_decoder_inv_valid = system_fabric_dBusCoherent_bmb_arbiter_io_inputs_1_inv_valid;
  assign system_cores_1_dBus_connector_decoder_ack_ready = system_fabric_dBusCoherent_bmb_arbiter_io_inputs_1_ack_ready;
  assign system_cores_1_dBus_connector_decoder_inv_payload_address = system_fabric_dBusCoherent_bmb_arbiter_io_inputs_1_inv_payload_address;
  assign system_cores_1_dBus_connector_decoder_inv_payload_length = system_fabric_dBusCoherent_bmb_arbiter_io_inputs_1_inv_payload_length;
  assign system_cores_1_dBus_connector_decoder_inv_payload_all = system_fabric_dBusCoherent_bmb_arbiter_io_inputs_1_inv_payload_all;
  assign system_cores_1_dBus_connector_decoder_sync_valid = system_fabric_dBusCoherent_bmb_arbiter_io_inputs_1_sync_valid;
  assign _zz_392 = system_clint_logic_io_timerInterrupt[0];
  assign _zz_393 = system_clint_logic_io_softwareInterrupt[0];
  assign _zz_402 = system_clint_logic_io_timerInterrupt[1];
  assign _zz_403 = system_clint_logic_io_softwareInterrupt[1];
  assign _zz_123 = system_gpioA_logic_io_gpio_write;
  assign _zz_124 = system_gpioA_logic_io_gpio_writeEnable;
  assign system_uartA_uart_txd = system_uartA_logic_io_uart_txd;
  always @ (*) begin
    _zz_415 = 1'bx;
    if(system_spiA_decoder_logic_ports_0_selected)begin
      _zz_415 = _zz_125;
    end
    if(system_spiA_decoder_logic_ports_1_selected)begin
      _zz_415 = _zz_127;
    end
    if(system_spiA_decoder_logic_ports_2_selected)begin
      _zz_415 = _zz_130;
    end
    if(system_spiA_decoder_logic_ports_3_selected)begin
      _zz_415 = _zz_133;
    end
  end

  always @ (*) begin
    _zz_416 = 1'bx;
    if(system_spiA_decoder_logic_ports_0_selected)begin
      _zz_416 = _zz_126;
    end
    if(system_spiA_decoder_logic_ports_1_selected)begin
      _zz_416 = _zz_128;
    end
    if(system_spiA_decoder_logic_ports_2_selected)begin
      _zz_416 = _zz_131;
    end
    if(system_spiA_decoder_logic_ports_3_selected)begin
      _zz_416 = _zz_134;
    end
  end

  assign system_spiA_decoder_logic_ports_0_selected = ((system_spiA_logic_io_spi_ss & 3'b111) == 3'b111);
  assign system_spiA_decoder_logic_ports_1_selected = ((system_spiA_logic_io_spi_ss & 3'b001) == 3'b000);
  assign _zz_129[0] = (! system_spiA_decoder_logic_ports_1_selected);
  assign system_spiA_decoder_logic_ports_2_selected = ((system_spiA_logic_io_spi_ss & 3'b010) == 3'b000);
  assign _zz_132[0] = (! system_spiA_decoder_logic_ports_2_selected);
  assign system_spiA_decoder_logic_ports_3_selected = ((system_spiA_logic_io_spi_ss & 3'b100) == 3'b000);
  assign _zz_135[0] = (! system_spiA_decoder_logic_ports_3_selected);
  assign system_spiA_user_sclk = _zz_139;
  always @ (*) begin
    _zz_137[0] = _zz_140;
    _zz_137[1] = _zz_143;
  end

  always @ (*) begin
    _zz_138[0] = _zz_141;
    _zz_138[1] = _zz_144;
  end

  assign _zz_125[0] = _zz_142;
  assign _zz_126[0] = _zz_145;
  assign system_spiA_flash_sclk = _zz_149;
  assign system_spiA_flash_ss = _zz_129_regNext;
  always @ (*) begin
    _zz_147[0] = _zz_150;
    _zz_147[1] = _zz_153;
  end

  always @ (*) begin
    _zz_148[0] = _zz_151;
    _zz_148[1] = _zz_154;
  end

  assign _zz_127[0] = _zz_152;
  assign _zz_128[0] = _zz_155;
  assign system_spiA_sdcard_sclk = _zz_159;
  assign system_spiA_sdcard_ss = _zz_132_regNext;
  always @ (*) begin
    _zz_157[0] = _zz_160;
    _zz_157[1] = _zz_163;
  end

  always @ (*) begin
    _zz_158[0] = _zz_161;
    _zz_158[1] = _zz_164;
  end

  assign _zz_130[0] = _zz_162;
  assign _zz_131[0] = _zz_165;
  assign system_spiA_md_C = _zz_169;
  assign _zz_167 = _zz_170;
  assign _zz_168 = _zz_171;
  assign _zz_133[0] = _zz_166_regNext;
  assign _zz_134[0] = 1'b0;
  assign system_eth_mii_TX_EN = macTxInterFrame_1_io_output_valid_regNext;
  always @ (*) begin
    system_eth_mii_TX_D[0] = _zz_172[0];
    system_eth_mii_TX_D[1] = _zz_172[1];
  end

  assign _zz_172 = macTxInterFrame_1_io_output_payload_fragment_data_regNext;
  always @ (*) begin
    _zz_173[0] = system_eth_mii_RX_D[0];
    _zz_173[1] = system_eth_mii_RX_D[1];
  end

  assign _zz_174 = _zz_181;
  assign _zz_418 = (_zz_175 || _zz_178);
  assign _zz_419 = (((! _zz_174) && (! _zz_175)) && _zz_178);
  assign system_dma_interrupt = (system_dma_logic_io_interrupts != 2'b00);
  assign system_dma_vga_channel_interrupt = system_dma_logic_io_interrupts[0];
  assign system_dma_audioOut_channel_interrupt = system_dma_logic_io_interrupts[1];
  assign system_audioOut_outputs = system_audioOut_logic_io_outputs;
  assign _zz_426 = 1'b0;
  assign _zz_427 = 1'b0;
  assign _zz_428 = 1'b0;
  assign _zz_429 = 1'b1;
  assign _zz_430 = 1'b0;
  assign _zz_431 = 1'b0;
  assign _zz_432 = 1'b1;
  assign _zz_433 = 1'b0;
  assign system_gpioA_interrupts_0 = system_gpioA_logic_io_interrupt[0];
  assign system_gpioA_interrupts_1 = system_gpioA_logic_io_interrupt[1];
  assign system_gpioA_interrupts_2 = system_gpioA_logic_io_interrupt[2];
  assign system_gpioA_interrupts_3 = system_gpioA_logic_io_interrupt[3];
  assign system_gpioA_interrupts_4 = system_gpioA_logic_io_interrupt[4];
  assign system_gpioA_interrupts_5 = system_gpioA_logic_io_interrupt[5];
  assign system_gpioA_interrupts_6 = system_gpioA_logic_io_interrupt[6];
  assign system_gpioA_interrupts_7 = system_gpioA_logic_io_interrupt[7];
  assign system_gpioA_interrupts_8 = system_gpioA_logic_io_interrupt[8];
  assign system_gpioA_interrupts_9 = system_gpioA_logic_io_interrupt[9];
  assign system_gpioA_interrupts_10 = system_gpioA_logic_io_interrupt[10];
  assign system_gpioA_interrupts_11 = system_gpioA_logic_io_interrupt[11];
  assign system_gpioA_interrupts_12 = system_gpioA_logic_io_interrupt[12];
  assign system_gpioA_interrupts_13 = system_gpioA_logic_io_interrupt[13];
  assign system_gpioA_interrupts_14 = system_gpioA_logic_io_interrupt[14];
  assign system_gpioA_interrupts_15 = system_gpioA_logic_io_interrupt[15];
  assign system_gpioA_interrupts_16 = system_gpioA_logic_io_interrupt[16];
  assign system_gpioA_interrupts_17 = system_gpioA_logic_io_interrupt[17];
  assign system_gpioA_interrupts_18 = system_gpioA_logic_io_interrupt[18];
  assign system_gpioA_interrupts_19 = system_gpioA_logic_io_interrupt[19];
  assign system_gpioA_interrupts_20 = system_gpioA_logic_io_interrupt[20];
  assign system_gpioA_interrupts_21 = system_gpioA_logic_io_interrupt[21];
  assign system_gpioA_interrupts_22 = system_gpioA_logic_io_interrupt[22];
  assign system_gpioA_interrupts_23 = system_gpioA_logic_io_interrupt[23];
  assign system_gpioA_interrupts_24 = system_gpioA_logic_io_interrupt[24];
  assign system_gpioA_interrupts_25 = system_gpioA_logic_io_interrupt[25];
  assign system_gpioA_interrupts_26 = system_gpioA_logic_io_interrupt[26];
  assign system_gpioA_interrupts_27 = system_gpioA_logic_io_interrupt[27];
  assign system_gpioA_interrupts_28 = system_gpioA_logic_io_interrupt[28];
  assign system_gpioA_interrupts_29 = system_gpioA_logic_io_interrupt[29];
  assign system_gpioA_interrupts_30 = system_gpioA_logic_io_interrupt[30];
  assign system_gpioA_interrupts_31 = system_gpioA_logic_io_interrupt[31];
  assign _zz_411 = system_bmbPeripheral_bmb_decoder_io_outputs_1_cmd_payload_fragment_address[15:0];
  assign _zz_412 = system_bmbPeripheral_bmb_decoder_io_outputs_2_cmd_payload_fragment_address[7:0];
  assign _zz_413 = system_bmbPeripheral_bmb_decoder_io_outputs_3_cmd_payload_fragment_address[5:0];
  assign _zz_414 = system_bmbPeripheral_bmb_decoder_io_outputs_4_cmd_payload_fragment_address[11:0];
  assign _zz_417 = system_bmbPeripheral_bmb_decoder_io_outputs_5_cmd_payload_fragment_address[5:0];
  assign _zz_422 = system_bmbPeripheral_bmb_decoder_io_outputs_6_cmd_payload_fragment_address[15:0];
  assign _zz_423 = system_bmbPeripheral_bmb_decoder_io_outputs_7_cmd_payload_fragment_address[7:0];
  assign _zz_424 = system_bmbPeripheral_bmb_decoder_io_outputs_8_cmd_payload_fragment_address[11:0];
  assign _zz_425 = system_bmbPeripheral_bmb_decoder_io_outputs_9_cmd_payload_fragment_address[12:0];
  always @ (*) begin
    system_plic_logic_bus_readHaltTrigger = 1'b0;
    if(_zz_454)begin
      system_plic_logic_bus_readHaltTrigger = 1'b1;
    end
  end

  assign system_plic_logic_bus_writeHaltTrigger = 1'b0;
  assign _zz_183 = (! (system_plic_logic_bus_readHaltTrigger || system_plic_logic_bus_writeHaltTrigger));
  assign system_plic_logic_bus_rsp_ready = (_zz_184 && _zz_183);
  assign _zz_184 = ((1'b1 && (! _zz_185)) || system_plic_logic_bmb_rsp_ready);
  assign _zz_185 = _zz_186;
  assign system_plic_logic_bmb_rsp_valid = _zz_185;
  assign system_plic_logic_bmb_rsp_payload_last = _zz_187;
  assign system_plic_logic_bmb_rsp_payload_fragment_source = _zz_188;
  assign system_plic_logic_bmb_rsp_payload_fragment_opcode = _zz_189;
  assign system_plic_logic_bmb_rsp_payload_fragment_data = _zz_190;
  assign system_plic_logic_bmb_rsp_payload_fragment_context = _zz_191;
  assign system_plic_logic_bus_askWrite = (system_plic_logic_bmb_cmd_valid && (system_plic_logic_bmb_cmd_payload_fragment_opcode == 1'b1));
  assign system_plic_logic_bus_askRead = (system_plic_logic_bmb_cmd_valid && (system_plic_logic_bmb_cmd_payload_fragment_opcode == 1'b0));
  assign system_plic_logic_bus_doWrite = ((system_plic_logic_bmb_cmd_valid && system_plic_logic_bmb_cmd_ready) && (system_plic_logic_bmb_cmd_payload_fragment_opcode == 1'b1));
  assign system_plic_logic_bus_doRead = ((system_plic_logic_bmb_cmd_valid && system_plic_logic_bmb_cmd_ready) && (system_plic_logic_bmb_cmd_payload_fragment_opcode == 1'b0));
  assign system_plic_logic_bus_rsp_valid = system_plic_logic_bmb_cmd_valid;
  assign system_plic_logic_bmb_cmd_ready = system_plic_logic_bus_rsp_ready;
  assign system_plic_logic_bus_rsp_payload_last = 1'b1;
  assign system_plic_logic_bus_rsp_payload_fragment_opcode = 1'b0;
  always @ (*) begin
    system_plic_logic_bus_rsp_payload_fragment_data = 32'h0;
    case(system_plic_logic_bmb_cmd_payload_fragment_address)
      22'h000004 : begin
        system_plic_logic_bus_rsp_payload_fragment_data[1 : 0] = system_uartA_interrupt_plic_gateway_priority;
      end
      22'h001004 : begin
        system_plic_logic_bus_rsp_payload_fragment_data[0 : 0] = system_uartA_interrupt_plic_gateway_ip;
      end
      22'h00000c : begin
        system_plic_logic_bus_rsp_payload_fragment_data[1 : 0] = system_mac_interrupt_plic_gateway_priority;
      end
      22'h00100c : begin
        system_plic_logic_bus_rsp_payload_fragment_data[0 : 0] = system_mac_interrupt_plic_gateway_ip;
      end
      22'h000030 : begin
        system_plic_logic_bus_rsp_payload_fragment_data[1 : 0] = system_dma_vga_channel_interrupt_plic_gateway_priority;
      end
      22'h001030 : begin
        system_plic_logic_bus_rsp_payload_fragment_data[0 : 0] = system_dma_vga_channel_interrupt_plic_gateway_ip;
      end
      22'h000034 : begin
        system_plic_logic_bus_rsp_payload_fragment_data[1 : 0] = system_dma_audioOut_channel_interrupt_plic_gateway_priority;
      end
      22'h001034 : begin
        system_plic_logic_bus_rsp_payload_fragment_data[0 : 0] = system_dma_audioOut_channel_interrupt_plic_gateway_ip;
      end
      22'h000010 : begin
        system_plic_logic_bus_rsp_payload_fragment_data[1 : 0] = system_gpioA_interrupts_24_plic_gateway_priority;
      end
      22'h001010 : begin
        system_plic_logic_bus_rsp_payload_fragment_data[0 : 0] = system_gpioA_interrupts_24_plic_gateway_ip;
      end
      22'h000014 : begin
        system_plic_logic_bus_rsp_payload_fragment_data[1 : 0] = system_gpioA_interrupts_25_plic_gateway_priority;
      end
      22'h001014 : begin
        system_plic_logic_bus_rsp_payload_fragment_data[0 : 0] = system_gpioA_interrupts_25_plic_gateway_ip;
      end
      22'h000018 : begin
        system_plic_logic_bus_rsp_payload_fragment_data[1 : 0] = system_gpioA_interrupts_26_plic_gateway_priority;
      end
      22'h001018 : begin
        system_plic_logic_bus_rsp_payload_fragment_data[0 : 0] = system_gpioA_interrupts_26_plic_gateway_ip;
      end
      22'h00001c : begin
        system_plic_logic_bus_rsp_payload_fragment_data[1 : 0] = system_gpioA_interrupts_27_plic_gateway_priority;
      end
      22'h00101c : begin
        system_plic_logic_bus_rsp_payload_fragment_data[0 : 0] = system_gpioA_interrupts_27_plic_gateway_ip;
      end
      22'h200000 : begin
        system_plic_logic_bus_rsp_payload_fragment_data[1 : 0] = system_cores_0_externalInterrupt_plic_target_threshold;
      end
      22'h200004 : begin
        system_plic_logic_bus_rsp_payload_fragment_data[3 : 0] = system_cores_0_externalInterrupt_plic_target_claim;
      end
      22'h002000 : begin
        system_plic_logic_bus_rsp_payload_fragment_data[1 : 1] = system_cores_0_externalInterrupt_plic_target_ie_0;
        system_plic_logic_bus_rsp_payload_fragment_data[3 : 3] = system_cores_0_externalInterrupt_plic_target_ie_1;
        system_plic_logic_bus_rsp_payload_fragment_data[12 : 12] = system_cores_0_externalInterrupt_plic_target_ie_2;
        system_plic_logic_bus_rsp_payload_fragment_data[13 : 13] = system_cores_0_externalInterrupt_plic_target_ie_3;
        system_plic_logic_bus_rsp_payload_fragment_data[4 : 4] = system_cores_0_externalInterrupt_plic_target_ie_4;
        system_plic_logic_bus_rsp_payload_fragment_data[5 : 5] = system_cores_0_externalInterrupt_plic_target_ie_5;
        system_plic_logic_bus_rsp_payload_fragment_data[6 : 6] = system_cores_0_externalInterrupt_plic_target_ie_6;
        system_plic_logic_bus_rsp_payload_fragment_data[7 : 7] = system_cores_0_externalInterrupt_plic_target_ie_7;
      end
      22'h201000 : begin
        system_plic_logic_bus_rsp_payload_fragment_data[1 : 0] = system_cores_0_externalSupervisorInterrupt_plic_target_threshold;
      end
      22'h201004 : begin
        system_plic_logic_bus_rsp_payload_fragment_data[3 : 0] = system_cores_0_externalSupervisorInterrupt_plic_target_claim;
      end
      22'h002080 : begin
        system_plic_logic_bus_rsp_payload_fragment_data[1 : 1] = system_cores_0_externalSupervisorInterrupt_plic_target_ie_0;
        system_plic_logic_bus_rsp_payload_fragment_data[3 : 3] = system_cores_0_externalSupervisorInterrupt_plic_target_ie_1;
        system_plic_logic_bus_rsp_payload_fragment_data[12 : 12] = system_cores_0_externalSupervisorInterrupt_plic_target_ie_2;
        system_plic_logic_bus_rsp_payload_fragment_data[13 : 13] = system_cores_0_externalSupervisorInterrupt_plic_target_ie_3;
        system_plic_logic_bus_rsp_payload_fragment_data[4 : 4] = system_cores_0_externalSupervisorInterrupt_plic_target_ie_4;
        system_plic_logic_bus_rsp_payload_fragment_data[5 : 5] = system_cores_0_externalSupervisorInterrupt_plic_target_ie_5;
        system_plic_logic_bus_rsp_payload_fragment_data[6 : 6] = system_cores_0_externalSupervisorInterrupt_plic_target_ie_6;
        system_plic_logic_bus_rsp_payload_fragment_data[7 : 7] = system_cores_0_externalSupervisorInterrupt_plic_target_ie_7;
      end
      22'h202000 : begin
        system_plic_logic_bus_rsp_payload_fragment_data[1 : 0] = system_cores_1_externalInterrupt_plic_target_threshold;
      end
      22'h202004 : begin
        system_plic_logic_bus_rsp_payload_fragment_data[3 : 0] = system_cores_1_externalInterrupt_plic_target_claim;
      end
      22'h002100 : begin
        system_plic_logic_bus_rsp_payload_fragment_data[1 : 1] = system_cores_1_externalInterrupt_plic_target_ie_0;
        system_plic_logic_bus_rsp_payload_fragment_data[3 : 3] = system_cores_1_externalInterrupt_plic_target_ie_1;
        system_plic_logic_bus_rsp_payload_fragment_data[12 : 12] = system_cores_1_externalInterrupt_plic_target_ie_2;
        system_plic_logic_bus_rsp_payload_fragment_data[13 : 13] = system_cores_1_externalInterrupt_plic_target_ie_3;
        system_plic_logic_bus_rsp_payload_fragment_data[4 : 4] = system_cores_1_externalInterrupt_plic_target_ie_4;
        system_plic_logic_bus_rsp_payload_fragment_data[5 : 5] = system_cores_1_externalInterrupt_plic_target_ie_5;
        system_plic_logic_bus_rsp_payload_fragment_data[6 : 6] = system_cores_1_externalInterrupt_plic_target_ie_6;
        system_plic_logic_bus_rsp_payload_fragment_data[7 : 7] = system_cores_1_externalInterrupt_plic_target_ie_7;
      end
      22'h203000 : begin
        system_plic_logic_bus_rsp_payload_fragment_data[1 : 0] = system_cores_1_externalSupervisorInterrupt_plic_target_threshold;
      end
      22'h203004 : begin
        system_plic_logic_bus_rsp_payload_fragment_data[3 : 0] = system_cores_1_externalSupervisorInterrupt_plic_target_claim;
      end
      22'h002180 : begin
        system_plic_logic_bus_rsp_payload_fragment_data[1 : 1] = system_cores_1_externalSupervisorInterrupt_plic_target_ie_0;
        system_plic_logic_bus_rsp_payload_fragment_data[3 : 3] = system_cores_1_externalSupervisorInterrupt_plic_target_ie_1;
        system_plic_logic_bus_rsp_payload_fragment_data[12 : 12] = system_cores_1_externalSupervisorInterrupt_plic_target_ie_2;
        system_plic_logic_bus_rsp_payload_fragment_data[13 : 13] = system_cores_1_externalSupervisorInterrupt_plic_target_ie_3;
        system_plic_logic_bus_rsp_payload_fragment_data[4 : 4] = system_cores_1_externalSupervisorInterrupt_plic_target_ie_4;
        system_plic_logic_bus_rsp_payload_fragment_data[5 : 5] = system_cores_1_externalSupervisorInterrupt_plic_target_ie_5;
        system_plic_logic_bus_rsp_payload_fragment_data[6 : 6] = system_cores_1_externalSupervisorInterrupt_plic_target_ie_6;
        system_plic_logic_bus_rsp_payload_fragment_data[7 : 7] = system_cores_1_externalSupervisorInterrupt_plic_target_ie_7;
      end
      default : begin
      end
    endcase
  end

  assign system_plic_logic_bus_rsp_payload_fragment_context = system_plic_logic_bmb_cmd_payload_fragment_context;
  assign system_plic_logic_bus_rsp_payload_fragment_source = system_plic_logic_bmb_cmd_payload_fragment_source;
  assign system_cores_0_externalInterrupt_plic_target_requests_0_priority = 2'b00;
  assign system_cores_0_externalInterrupt_plic_target_requests_0_id = 4'b0000;
  assign system_cores_0_externalInterrupt_plic_target_requests_0_valid = 1'b1;
  assign system_cores_0_externalInterrupt_plic_target_requests_1_priority = system_uartA_interrupt_plic_gateway_priority;
  assign system_cores_0_externalInterrupt_plic_target_requests_1_id = 4'b0001;
  assign system_cores_0_externalInterrupt_plic_target_requests_1_valid = (system_uartA_interrupt_plic_gateway_ip && system_cores_0_externalInterrupt_plic_target_ie_0);
  assign system_cores_0_externalInterrupt_plic_target_requests_2_priority = system_mac_interrupt_plic_gateway_priority;
  assign system_cores_0_externalInterrupt_plic_target_requests_2_id = 4'b0011;
  assign system_cores_0_externalInterrupt_plic_target_requests_2_valid = (system_mac_interrupt_plic_gateway_ip && system_cores_0_externalInterrupt_plic_target_ie_1);
  assign system_cores_0_externalInterrupt_plic_target_requests_3_priority = system_gpioA_interrupts_24_plic_gateway_priority;
  assign system_cores_0_externalInterrupt_plic_target_requests_3_id = 4'b0100;
  assign system_cores_0_externalInterrupt_plic_target_requests_3_valid = (system_gpioA_interrupts_24_plic_gateway_ip && system_cores_0_externalInterrupt_plic_target_ie_4);
  assign system_cores_0_externalInterrupt_plic_target_requests_4_priority = system_gpioA_interrupts_25_plic_gateway_priority;
  assign system_cores_0_externalInterrupt_plic_target_requests_4_id = 4'b0101;
  assign system_cores_0_externalInterrupt_plic_target_requests_4_valid = (system_gpioA_interrupts_25_plic_gateway_ip && system_cores_0_externalInterrupt_plic_target_ie_5);
  assign system_cores_0_externalInterrupt_plic_target_requests_5_priority = system_gpioA_interrupts_26_plic_gateway_priority;
  assign system_cores_0_externalInterrupt_plic_target_requests_5_id = 4'b0110;
  assign system_cores_0_externalInterrupt_plic_target_requests_5_valid = (system_gpioA_interrupts_26_plic_gateway_ip && system_cores_0_externalInterrupt_plic_target_ie_6);
  assign system_cores_0_externalInterrupt_plic_target_requests_6_priority = system_gpioA_interrupts_27_plic_gateway_priority;
  assign system_cores_0_externalInterrupt_plic_target_requests_6_id = 4'b0111;
  assign system_cores_0_externalInterrupt_plic_target_requests_6_valid = (system_gpioA_interrupts_27_plic_gateway_ip && system_cores_0_externalInterrupt_plic_target_ie_7);
  assign system_cores_0_externalInterrupt_plic_target_requests_7_priority = system_dma_vga_channel_interrupt_plic_gateway_priority;
  assign system_cores_0_externalInterrupt_plic_target_requests_7_id = 4'b1100;
  assign system_cores_0_externalInterrupt_plic_target_requests_7_valid = (system_dma_vga_channel_interrupt_plic_gateway_ip && system_cores_0_externalInterrupt_plic_target_ie_2);
  assign system_cores_0_externalInterrupt_plic_target_requests_8_priority = system_dma_audioOut_channel_interrupt_plic_gateway_priority;
  assign system_cores_0_externalInterrupt_plic_target_requests_8_id = 4'b1101;
  assign system_cores_0_externalInterrupt_plic_target_requests_8_valid = (system_dma_audioOut_channel_interrupt_plic_gateway_ip && system_cores_0_externalInterrupt_plic_target_ie_3);
  assign _zz_192 = ((! system_cores_0_externalInterrupt_plic_target_requests_1_valid) || (system_cores_0_externalInterrupt_plic_target_requests_0_valid && (system_cores_0_externalInterrupt_plic_target_requests_1_priority <= system_cores_0_externalInterrupt_plic_target_requests_0_priority)));
  assign _zz_193 = (_zz_192 ? system_cores_0_externalInterrupt_plic_target_requests_0_priority : system_cores_0_externalInterrupt_plic_target_requests_1_priority);
  assign _zz_194 = (_zz_192 ? system_cores_0_externalInterrupt_plic_target_requests_0_valid : system_cores_0_externalInterrupt_plic_target_requests_1_valid);
  assign _zz_195 = ((! system_cores_0_externalInterrupt_plic_target_requests_3_valid) || (system_cores_0_externalInterrupt_plic_target_requests_2_valid && (system_cores_0_externalInterrupt_plic_target_requests_3_priority <= system_cores_0_externalInterrupt_plic_target_requests_2_priority)));
  assign _zz_196 = (_zz_195 ? system_cores_0_externalInterrupt_plic_target_requests_2_priority : system_cores_0_externalInterrupt_plic_target_requests_3_priority);
  assign _zz_197 = (_zz_195 ? system_cores_0_externalInterrupt_plic_target_requests_2_valid : system_cores_0_externalInterrupt_plic_target_requests_3_valid);
  assign _zz_198 = ((! system_cores_0_externalInterrupt_plic_target_requests_5_valid) || (system_cores_0_externalInterrupt_plic_target_requests_4_valid && (system_cores_0_externalInterrupt_plic_target_requests_5_priority <= system_cores_0_externalInterrupt_plic_target_requests_4_priority)));
  assign _zz_199 = (_zz_198 ? system_cores_0_externalInterrupt_plic_target_requests_4_priority : system_cores_0_externalInterrupt_plic_target_requests_5_priority);
  assign _zz_200 = (_zz_198 ? system_cores_0_externalInterrupt_plic_target_requests_4_valid : system_cores_0_externalInterrupt_plic_target_requests_5_valid);
  assign _zz_201 = ((! system_cores_0_externalInterrupt_plic_target_requests_7_valid) || (system_cores_0_externalInterrupt_plic_target_requests_6_valid && (system_cores_0_externalInterrupt_plic_target_requests_7_priority <= system_cores_0_externalInterrupt_plic_target_requests_6_priority)));
  assign _zz_202 = (_zz_201 ? system_cores_0_externalInterrupt_plic_target_requests_6_priority : system_cores_0_externalInterrupt_plic_target_requests_7_priority);
  assign _zz_203 = (_zz_201 ? system_cores_0_externalInterrupt_plic_target_requests_6_valid : system_cores_0_externalInterrupt_plic_target_requests_7_valid);
  assign _zz_204 = ((! _zz_197) || (_zz_194 && (_zz_196 <= _zz_193)));
  assign _zz_205 = (_zz_204 ? _zz_193 : _zz_196);
  assign _zz_206 = (_zz_204 ? _zz_194 : _zz_197);
  assign _zz_207 = ((! _zz_203) || (_zz_200 && (_zz_202 <= _zz_199)));
  assign _zz_208 = (_zz_207 ? _zz_199 : _zz_202);
  assign _zz_209 = (_zz_207 ? _zz_200 : _zz_203);
  assign _zz_210 = ((! _zz_209) || (_zz_206 && (_zz_208 <= _zz_205)));
  assign _zz_211 = (_zz_210 ? _zz_205 : _zz_208);
  assign _zz_212 = (_zz_210 ? _zz_206 : _zz_209);
  assign _zz_213 = ((! system_cores_0_externalInterrupt_plic_target_requests_8_valid) || (_zz_212 && (system_cores_0_externalInterrupt_plic_target_requests_8_priority <= _zz_211)));
  assign system_cores_0_externalInterrupt_plic_target_iep = (system_cores_0_externalInterrupt_plic_target_threshold < system_cores_0_externalInterrupt_plic_target_bestRequest_priority);
  assign system_cores_0_externalInterrupt_plic_target_claim = (system_cores_0_externalInterrupt_plic_target_iep ? system_cores_0_externalInterrupt_plic_target_bestRequest_id : 4'b0000);
  assign system_cores_0_externalSupervisorInterrupt_plic_target_requests_0_priority = 2'b00;
  assign system_cores_0_externalSupervisorInterrupt_plic_target_requests_0_id = 4'b0000;
  assign system_cores_0_externalSupervisorInterrupt_plic_target_requests_0_valid = 1'b1;
  assign system_cores_0_externalSupervisorInterrupt_plic_target_requests_1_priority = system_uartA_interrupt_plic_gateway_priority;
  assign system_cores_0_externalSupervisorInterrupt_plic_target_requests_1_id = 4'b0001;
  assign system_cores_0_externalSupervisorInterrupt_plic_target_requests_1_valid = (system_uartA_interrupt_plic_gateway_ip && system_cores_0_externalSupervisorInterrupt_plic_target_ie_0);
  assign system_cores_0_externalSupervisorInterrupt_plic_target_requests_2_priority = system_mac_interrupt_plic_gateway_priority;
  assign system_cores_0_externalSupervisorInterrupt_plic_target_requests_2_id = 4'b0011;
  assign system_cores_0_externalSupervisorInterrupt_plic_target_requests_2_valid = (system_mac_interrupt_plic_gateway_ip && system_cores_0_externalSupervisorInterrupt_plic_target_ie_1);
  assign system_cores_0_externalSupervisorInterrupt_plic_target_requests_3_priority = system_gpioA_interrupts_24_plic_gateway_priority;
  assign system_cores_0_externalSupervisorInterrupt_plic_target_requests_3_id = 4'b0100;
  assign system_cores_0_externalSupervisorInterrupt_plic_target_requests_3_valid = (system_gpioA_interrupts_24_plic_gateway_ip && system_cores_0_externalSupervisorInterrupt_plic_target_ie_4);
  assign system_cores_0_externalSupervisorInterrupt_plic_target_requests_4_priority = system_gpioA_interrupts_25_plic_gateway_priority;
  assign system_cores_0_externalSupervisorInterrupt_plic_target_requests_4_id = 4'b0101;
  assign system_cores_0_externalSupervisorInterrupt_plic_target_requests_4_valid = (system_gpioA_interrupts_25_plic_gateway_ip && system_cores_0_externalSupervisorInterrupt_plic_target_ie_5);
  assign system_cores_0_externalSupervisorInterrupt_plic_target_requests_5_priority = system_gpioA_interrupts_26_plic_gateway_priority;
  assign system_cores_0_externalSupervisorInterrupt_plic_target_requests_5_id = 4'b0110;
  assign system_cores_0_externalSupervisorInterrupt_plic_target_requests_5_valid = (system_gpioA_interrupts_26_plic_gateway_ip && system_cores_0_externalSupervisorInterrupt_plic_target_ie_6);
  assign system_cores_0_externalSupervisorInterrupt_plic_target_requests_6_priority = system_gpioA_interrupts_27_plic_gateway_priority;
  assign system_cores_0_externalSupervisorInterrupt_plic_target_requests_6_id = 4'b0111;
  assign system_cores_0_externalSupervisorInterrupt_plic_target_requests_6_valid = (system_gpioA_interrupts_27_plic_gateway_ip && system_cores_0_externalSupervisorInterrupt_plic_target_ie_7);
  assign system_cores_0_externalSupervisorInterrupt_plic_target_requests_7_priority = system_dma_vga_channel_interrupt_plic_gateway_priority;
  assign system_cores_0_externalSupervisorInterrupt_plic_target_requests_7_id = 4'b1100;
  assign system_cores_0_externalSupervisorInterrupt_plic_target_requests_7_valid = (system_dma_vga_channel_interrupt_plic_gateway_ip && system_cores_0_externalSupervisorInterrupt_plic_target_ie_2);
  assign system_cores_0_externalSupervisorInterrupt_plic_target_requests_8_priority = system_dma_audioOut_channel_interrupt_plic_gateway_priority;
  assign system_cores_0_externalSupervisorInterrupt_plic_target_requests_8_id = 4'b1101;
  assign system_cores_0_externalSupervisorInterrupt_plic_target_requests_8_valid = (system_dma_audioOut_channel_interrupt_plic_gateway_ip && system_cores_0_externalSupervisorInterrupt_plic_target_ie_3);
  assign _zz_214 = ((! system_cores_0_externalSupervisorInterrupt_plic_target_requests_1_valid) || (system_cores_0_externalSupervisorInterrupt_plic_target_requests_0_valid && (system_cores_0_externalSupervisorInterrupt_plic_target_requests_1_priority <= system_cores_0_externalSupervisorInterrupt_plic_target_requests_0_priority)));
  assign _zz_215 = (_zz_214 ? system_cores_0_externalSupervisorInterrupt_plic_target_requests_0_priority : system_cores_0_externalSupervisorInterrupt_plic_target_requests_1_priority);
  assign _zz_216 = (_zz_214 ? system_cores_0_externalSupervisorInterrupt_plic_target_requests_0_valid : system_cores_0_externalSupervisorInterrupt_plic_target_requests_1_valid);
  assign _zz_217 = ((! system_cores_0_externalSupervisorInterrupt_plic_target_requests_3_valid) || (system_cores_0_externalSupervisorInterrupt_plic_target_requests_2_valid && (system_cores_0_externalSupervisorInterrupt_plic_target_requests_3_priority <= system_cores_0_externalSupervisorInterrupt_plic_target_requests_2_priority)));
  assign _zz_218 = (_zz_217 ? system_cores_0_externalSupervisorInterrupt_plic_target_requests_2_priority : system_cores_0_externalSupervisorInterrupt_plic_target_requests_3_priority);
  assign _zz_219 = (_zz_217 ? system_cores_0_externalSupervisorInterrupt_plic_target_requests_2_valid : system_cores_0_externalSupervisorInterrupt_plic_target_requests_3_valid);
  assign _zz_220 = ((! system_cores_0_externalSupervisorInterrupt_plic_target_requests_5_valid) || (system_cores_0_externalSupervisorInterrupt_plic_target_requests_4_valid && (system_cores_0_externalSupervisorInterrupt_plic_target_requests_5_priority <= system_cores_0_externalSupervisorInterrupt_plic_target_requests_4_priority)));
  assign _zz_221 = (_zz_220 ? system_cores_0_externalSupervisorInterrupt_plic_target_requests_4_priority : system_cores_0_externalSupervisorInterrupt_plic_target_requests_5_priority);
  assign _zz_222 = (_zz_220 ? system_cores_0_externalSupervisorInterrupt_plic_target_requests_4_valid : system_cores_0_externalSupervisorInterrupt_plic_target_requests_5_valid);
  assign _zz_223 = ((! system_cores_0_externalSupervisorInterrupt_plic_target_requests_7_valid) || (system_cores_0_externalSupervisorInterrupt_plic_target_requests_6_valid && (system_cores_0_externalSupervisorInterrupt_plic_target_requests_7_priority <= system_cores_0_externalSupervisorInterrupt_plic_target_requests_6_priority)));
  assign _zz_224 = (_zz_223 ? system_cores_0_externalSupervisorInterrupt_plic_target_requests_6_priority : system_cores_0_externalSupervisorInterrupt_plic_target_requests_7_priority);
  assign _zz_225 = (_zz_223 ? system_cores_0_externalSupervisorInterrupt_plic_target_requests_6_valid : system_cores_0_externalSupervisorInterrupt_plic_target_requests_7_valid);
  assign _zz_226 = ((! _zz_219) || (_zz_216 && (_zz_218 <= _zz_215)));
  assign _zz_227 = (_zz_226 ? _zz_215 : _zz_218);
  assign _zz_228 = (_zz_226 ? _zz_216 : _zz_219);
  assign _zz_229 = ((! _zz_225) || (_zz_222 && (_zz_224 <= _zz_221)));
  assign _zz_230 = (_zz_229 ? _zz_221 : _zz_224);
  assign _zz_231 = (_zz_229 ? _zz_222 : _zz_225);
  assign _zz_232 = ((! _zz_231) || (_zz_228 && (_zz_230 <= _zz_227)));
  assign _zz_233 = (_zz_232 ? _zz_227 : _zz_230);
  assign _zz_234 = (_zz_232 ? _zz_228 : _zz_231);
  assign _zz_235 = ((! system_cores_0_externalSupervisorInterrupt_plic_target_requests_8_valid) || (_zz_234 && (system_cores_0_externalSupervisorInterrupt_plic_target_requests_8_priority <= _zz_233)));
  assign system_cores_0_externalSupervisorInterrupt_plic_target_iep = (system_cores_0_externalSupervisorInterrupt_plic_target_threshold < system_cores_0_externalSupervisorInterrupt_plic_target_bestRequest_priority);
  assign system_cores_0_externalSupervisorInterrupt_plic_target_claim = (system_cores_0_externalSupervisorInterrupt_plic_target_iep ? system_cores_0_externalSupervisorInterrupt_plic_target_bestRequest_id : 4'b0000);
  assign system_cores_1_externalInterrupt_plic_target_requests_0_priority = 2'b00;
  assign system_cores_1_externalInterrupt_plic_target_requests_0_id = 4'b0000;
  assign system_cores_1_externalInterrupt_plic_target_requests_0_valid = 1'b1;
  assign system_cores_1_externalInterrupt_plic_target_requests_1_priority = system_uartA_interrupt_plic_gateway_priority;
  assign system_cores_1_externalInterrupt_plic_target_requests_1_id = 4'b0001;
  assign system_cores_1_externalInterrupt_plic_target_requests_1_valid = (system_uartA_interrupt_plic_gateway_ip && system_cores_1_externalInterrupt_plic_target_ie_0);
  assign system_cores_1_externalInterrupt_plic_target_requests_2_priority = system_mac_interrupt_plic_gateway_priority;
  assign system_cores_1_externalInterrupt_plic_target_requests_2_id = 4'b0011;
  assign system_cores_1_externalInterrupt_plic_target_requests_2_valid = (system_mac_interrupt_plic_gateway_ip && system_cores_1_externalInterrupt_plic_target_ie_1);
  assign system_cores_1_externalInterrupt_plic_target_requests_3_priority = system_gpioA_interrupts_24_plic_gateway_priority;
  assign system_cores_1_externalInterrupt_plic_target_requests_3_id = 4'b0100;
  assign system_cores_1_externalInterrupt_plic_target_requests_3_valid = (system_gpioA_interrupts_24_plic_gateway_ip && system_cores_1_externalInterrupt_plic_target_ie_4);
  assign system_cores_1_externalInterrupt_plic_target_requests_4_priority = system_gpioA_interrupts_25_plic_gateway_priority;
  assign system_cores_1_externalInterrupt_plic_target_requests_4_id = 4'b0101;
  assign system_cores_1_externalInterrupt_plic_target_requests_4_valid = (system_gpioA_interrupts_25_plic_gateway_ip && system_cores_1_externalInterrupt_plic_target_ie_5);
  assign system_cores_1_externalInterrupt_plic_target_requests_5_priority = system_gpioA_interrupts_26_plic_gateway_priority;
  assign system_cores_1_externalInterrupt_plic_target_requests_5_id = 4'b0110;
  assign system_cores_1_externalInterrupt_plic_target_requests_5_valid = (system_gpioA_interrupts_26_plic_gateway_ip && system_cores_1_externalInterrupt_plic_target_ie_6);
  assign system_cores_1_externalInterrupt_plic_target_requests_6_priority = system_gpioA_interrupts_27_plic_gateway_priority;
  assign system_cores_1_externalInterrupt_plic_target_requests_6_id = 4'b0111;
  assign system_cores_1_externalInterrupt_plic_target_requests_6_valid = (system_gpioA_interrupts_27_plic_gateway_ip && system_cores_1_externalInterrupt_plic_target_ie_7);
  assign system_cores_1_externalInterrupt_plic_target_requests_7_priority = system_dma_vga_channel_interrupt_plic_gateway_priority;
  assign system_cores_1_externalInterrupt_plic_target_requests_7_id = 4'b1100;
  assign system_cores_1_externalInterrupt_plic_target_requests_7_valid = (system_dma_vga_channel_interrupt_plic_gateway_ip && system_cores_1_externalInterrupt_plic_target_ie_2);
  assign system_cores_1_externalInterrupt_plic_target_requests_8_priority = system_dma_audioOut_channel_interrupt_plic_gateway_priority;
  assign system_cores_1_externalInterrupt_plic_target_requests_8_id = 4'b1101;
  assign system_cores_1_externalInterrupt_plic_target_requests_8_valid = (system_dma_audioOut_channel_interrupt_plic_gateway_ip && system_cores_1_externalInterrupt_plic_target_ie_3);
  assign _zz_236 = ((! system_cores_1_externalInterrupt_plic_target_requests_1_valid) || (system_cores_1_externalInterrupt_plic_target_requests_0_valid && (system_cores_1_externalInterrupt_plic_target_requests_1_priority <= system_cores_1_externalInterrupt_plic_target_requests_0_priority)));
  assign _zz_237 = (_zz_236 ? system_cores_1_externalInterrupt_plic_target_requests_0_priority : system_cores_1_externalInterrupt_plic_target_requests_1_priority);
  assign _zz_238 = (_zz_236 ? system_cores_1_externalInterrupt_plic_target_requests_0_valid : system_cores_1_externalInterrupt_plic_target_requests_1_valid);
  assign _zz_239 = ((! system_cores_1_externalInterrupt_plic_target_requests_3_valid) || (system_cores_1_externalInterrupt_plic_target_requests_2_valid && (system_cores_1_externalInterrupt_plic_target_requests_3_priority <= system_cores_1_externalInterrupt_plic_target_requests_2_priority)));
  assign _zz_240 = (_zz_239 ? system_cores_1_externalInterrupt_plic_target_requests_2_priority : system_cores_1_externalInterrupt_plic_target_requests_3_priority);
  assign _zz_241 = (_zz_239 ? system_cores_1_externalInterrupt_plic_target_requests_2_valid : system_cores_1_externalInterrupt_plic_target_requests_3_valid);
  assign _zz_242 = ((! system_cores_1_externalInterrupt_plic_target_requests_5_valid) || (system_cores_1_externalInterrupt_plic_target_requests_4_valid && (system_cores_1_externalInterrupt_plic_target_requests_5_priority <= system_cores_1_externalInterrupt_plic_target_requests_4_priority)));
  assign _zz_243 = (_zz_242 ? system_cores_1_externalInterrupt_plic_target_requests_4_priority : system_cores_1_externalInterrupt_plic_target_requests_5_priority);
  assign _zz_244 = (_zz_242 ? system_cores_1_externalInterrupt_plic_target_requests_4_valid : system_cores_1_externalInterrupt_plic_target_requests_5_valid);
  assign _zz_245 = ((! system_cores_1_externalInterrupt_plic_target_requests_7_valid) || (system_cores_1_externalInterrupt_plic_target_requests_6_valid && (system_cores_1_externalInterrupt_plic_target_requests_7_priority <= system_cores_1_externalInterrupt_plic_target_requests_6_priority)));
  assign _zz_246 = (_zz_245 ? system_cores_1_externalInterrupt_plic_target_requests_6_priority : system_cores_1_externalInterrupt_plic_target_requests_7_priority);
  assign _zz_247 = (_zz_245 ? system_cores_1_externalInterrupt_plic_target_requests_6_valid : system_cores_1_externalInterrupt_plic_target_requests_7_valid);
  assign _zz_248 = ((! _zz_241) || (_zz_238 && (_zz_240 <= _zz_237)));
  assign _zz_249 = (_zz_248 ? _zz_237 : _zz_240);
  assign _zz_250 = (_zz_248 ? _zz_238 : _zz_241);
  assign _zz_251 = ((! _zz_247) || (_zz_244 && (_zz_246 <= _zz_243)));
  assign _zz_252 = (_zz_251 ? _zz_243 : _zz_246);
  assign _zz_253 = (_zz_251 ? _zz_244 : _zz_247);
  assign _zz_254 = ((! _zz_253) || (_zz_250 && (_zz_252 <= _zz_249)));
  assign _zz_255 = (_zz_254 ? _zz_249 : _zz_252);
  assign _zz_256 = (_zz_254 ? _zz_250 : _zz_253);
  assign _zz_257 = ((! system_cores_1_externalInterrupt_plic_target_requests_8_valid) || (_zz_256 && (system_cores_1_externalInterrupt_plic_target_requests_8_priority <= _zz_255)));
  assign system_cores_1_externalInterrupt_plic_target_iep = (system_cores_1_externalInterrupt_plic_target_threshold < system_cores_1_externalInterrupt_plic_target_bestRequest_priority);
  assign system_cores_1_externalInterrupt_plic_target_claim = (system_cores_1_externalInterrupt_plic_target_iep ? system_cores_1_externalInterrupt_plic_target_bestRequest_id : 4'b0000);
  assign system_cores_1_externalSupervisorInterrupt_plic_target_requests_0_priority = 2'b00;
  assign system_cores_1_externalSupervisorInterrupt_plic_target_requests_0_id = 4'b0000;
  assign system_cores_1_externalSupervisorInterrupt_plic_target_requests_0_valid = 1'b1;
  assign system_cores_1_externalSupervisorInterrupt_plic_target_requests_1_priority = system_uartA_interrupt_plic_gateway_priority;
  assign system_cores_1_externalSupervisorInterrupt_plic_target_requests_1_id = 4'b0001;
  assign system_cores_1_externalSupervisorInterrupt_plic_target_requests_1_valid = (system_uartA_interrupt_plic_gateway_ip && system_cores_1_externalSupervisorInterrupt_plic_target_ie_0);
  assign system_cores_1_externalSupervisorInterrupt_plic_target_requests_2_priority = system_mac_interrupt_plic_gateway_priority;
  assign system_cores_1_externalSupervisorInterrupt_plic_target_requests_2_id = 4'b0011;
  assign system_cores_1_externalSupervisorInterrupt_plic_target_requests_2_valid = (system_mac_interrupt_plic_gateway_ip && system_cores_1_externalSupervisorInterrupt_plic_target_ie_1);
  assign system_cores_1_externalSupervisorInterrupt_plic_target_requests_3_priority = system_gpioA_interrupts_24_plic_gateway_priority;
  assign system_cores_1_externalSupervisorInterrupt_plic_target_requests_3_id = 4'b0100;
  assign system_cores_1_externalSupervisorInterrupt_plic_target_requests_3_valid = (system_gpioA_interrupts_24_plic_gateway_ip && system_cores_1_externalSupervisorInterrupt_plic_target_ie_4);
  assign system_cores_1_externalSupervisorInterrupt_plic_target_requests_4_priority = system_gpioA_interrupts_25_plic_gateway_priority;
  assign system_cores_1_externalSupervisorInterrupt_plic_target_requests_4_id = 4'b0101;
  assign system_cores_1_externalSupervisorInterrupt_plic_target_requests_4_valid = (system_gpioA_interrupts_25_plic_gateway_ip && system_cores_1_externalSupervisorInterrupt_plic_target_ie_5);
  assign system_cores_1_externalSupervisorInterrupt_plic_target_requests_5_priority = system_gpioA_interrupts_26_plic_gateway_priority;
  assign system_cores_1_externalSupervisorInterrupt_plic_target_requests_5_id = 4'b0110;
  assign system_cores_1_externalSupervisorInterrupt_plic_target_requests_5_valid = (system_gpioA_interrupts_26_plic_gateway_ip && system_cores_1_externalSupervisorInterrupt_plic_target_ie_6);
  assign system_cores_1_externalSupervisorInterrupt_plic_target_requests_6_priority = system_gpioA_interrupts_27_plic_gateway_priority;
  assign system_cores_1_externalSupervisorInterrupt_plic_target_requests_6_id = 4'b0111;
  assign system_cores_1_externalSupervisorInterrupt_plic_target_requests_6_valid = (system_gpioA_interrupts_27_plic_gateway_ip && system_cores_1_externalSupervisorInterrupt_plic_target_ie_7);
  assign system_cores_1_externalSupervisorInterrupt_plic_target_requests_7_priority = system_dma_vga_channel_interrupt_plic_gateway_priority;
  assign system_cores_1_externalSupervisorInterrupt_plic_target_requests_7_id = 4'b1100;
  assign system_cores_1_externalSupervisorInterrupt_plic_target_requests_7_valid = (system_dma_vga_channel_interrupt_plic_gateway_ip && system_cores_1_externalSupervisorInterrupt_plic_target_ie_2);
  assign system_cores_1_externalSupervisorInterrupt_plic_target_requests_8_priority = system_dma_audioOut_channel_interrupt_plic_gateway_priority;
  assign system_cores_1_externalSupervisorInterrupt_plic_target_requests_8_id = 4'b1101;
  assign system_cores_1_externalSupervisorInterrupt_plic_target_requests_8_valid = (system_dma_audioOut_channel_interrupt_plic_gateway_ip && system_cores_1_externalSupervisorInterrupt_plic_target_ie_3);
  assign _zz_258 = ((! system_cores_1_externalSupervisorInterrupt_plic_target_requests_1_valid) || (system_cores_1_externalSupervisorInterrupt_plic_target_requests_0_valid && (system_cores_1_externalSupervisorInterrupt_plic_target_requests_1_priority <= system_cores_1_externalSupervisorInterrupt_plic_target_requests_0_priority)));
  assign _zz_259 = (_zz_258 ? system_cores_1_externalSupervisorInterrupt_plic_target_requests_0_priority : system_cores_1_externalSupervisorInterrupt_plic_target_requests_1_priority);
  assign _zz_260 = (_zz_258 ? system_cores_1_externalSupervisorInterrupt_plic_target_requests_0_valid : system_cores_1_externalSupervisorInterrupt_plic_target_requests_1_valid);
  assign _zz_261 = ((! system_cores_1_externalSupervisorInterrupt_plic_target_requests_3_valid) || (system_cores_1_externalSupervisorInterrupt_plic_target_requests_2_valid && (system_cores_1_externalSupervisorInterrupt_plic_target_requests_3_priority <= system_cores_1_externalSupervisorInterrupt_plic_target_requests_2_priority)));
  assign _zz_262 = (_zz_261 ? system_cores_1_externalSupervisorInterrupt_plic_target_requests_2_priority : system_cores_1_externalSupervisorInterrupt_plic_target_requests_3_priority);
  assign _zz_263 = (_zz_261 ? system_cores_1_externalSupervisorInterrupt_plic_target_requests_2_valid : system_cores_1_externalSupervisorInterrupt_plic_target_requests_3_valid);
  assign _zz_264 = ((! system_cores_1_externalSupervisorInterrupt_plic_target_requests_5_valid) || (system_cores_1_externalSupervisorInterrupt_plic_target_requests_4_valid && (system_cores_1_externalSupervisorInterrupt_plic_target_requests_5_priority <= system_cores_1_externalSupervisorInterrupt_plic_target_requests_4_priority)));
  assign _zz_265 = (_zz_264 ? system_cores_1_externalSupervisorInterrupt_plic_target_requests_4_priority : system_cores_1_externalSupervisorInterrupt_plic_target_requests_5_priority);
  assign _zz_266 = (_zz_264 ? system_cores_1_externalSupervisorInterrupt_plic_target_requests_4_valid : system_cores_1_externalSupervisorInterrupt_plic_target_requests_5_valid);
  assign _zz_267 = ((! system_cores_1_externalSupervisorInterrupt_plic_target_requests_7_valid) || (system_cores_1_externalSupervisorInterrupt_plic_target_requests_6_valid && (system_cores_1_externalSupervisorInterrupt_plic_target_requests_7_priority <= system_cores_1_externalSupervisorInterrupt_plic_target_requests_6_priority)));
  assign _zz_268 = (_zz_267 ? system_cores_1_externalSupervisorInterrupt_plic_target_requests_6_priority : system_cores_1_externalSupervisorInterrupt_plic_target_requests_7_priority);
  assign _zz_269 = (_zz_267 ? system_cores_1_externalSupervisorInterrupt_plic_target_requests_6_valid : system_cores_1_externalSupervisorInterrupt_plic_target_requests_7_valid);
  assign _zz_270 = ((! _zz_263) || (_zz_260 && (_zz_262 <= _zz_259)));
  assign _zz_271 = (_zz_270 ? _zz_259 : _zz_262);
  assign _zz_272 = (_zz_270 ? _zz_260 : _zz_263);
  assign _zz_273 = ((! _zz_269) || (_zz_266 && (_zz_268 <= _zz_265)));
  assign _zz_274 = (_zz_273 ? _zz_265 : _zz_268);
  assign _zz_275 = (_zz_273 ? _zz_266 : _zz_269);
  assign _zz_276 = ((! _zz_275) || (_zz_272 && (_zz_274 <= _zz_271)));
  assign _zz_277 = (_zz_276 ? _zz_271 : _zz_274);
  assign _zz_278 = (_zz_276 ? _zz_272 : _zz_275);
  assign _zz_279 = ((! system_cores_1_externalSupervisorInterrupt_plic_target_requests_8_valid) || (_zz_278 && (system_cores_1_externalSupervisorInterrupt_plic_target_requests_8_priority <= _zz_277)));
  assign system_cores_1_externalSupervisorInterrupt_plic_target_iep = (system_cores_1_externalSupervisorInterrupt_plic_target_threshold < system_cores_1_externalSupervisorInterrupt_plic_target_bestRequest_priority);
  assign system_cores_1_externalSupervisorInterrupt_plic_target_claim = (system_cores_1_externalSupervisorInterrupt_plic_target_iep ? system_cores_1_externalSupervisorInterrupt_plic_target_bestRequest_id : 4'b0000);
  assign system_uartA_interrupt_plic_gateway_priority = _zz_280;
  assign system_mac_interrupt_plic_gateway_priority = _zz_281;
  assign system_dma_vga_channel_interrupt_plic_gateway_priority = _zz_282;
  assign system_dma_audioOut_channel_interrupt_plic_gateway_priority = _zz_283;
  assign system_gpioA_interrupts_24_plic_gateway_priority = _zz_284;
  assign system_gpioA_interrupts_25_plic_gateway_priority = _zz_285;
  assign system_gpioA_interrupts_26_plic_gateway_priority = _zz_286;
  assign system_gpioA_interrupts_27_plic_gateway_priority = _zz_287;
  always @ (*) begin
    system_plic_logic_bridge_claim_valid = 1'b0;
    case(system_plic_logic_bmb_cmd_payload_fragment_address)
      22'h200004 : begin
        if(system_plic_logic_bus_doRead)begin
          system_plic_logic_bridge_claim_valid = 1'b1;
        end
      end
      22'h201004 : begin
        if(system_plic_logic_bus_doRead)begin
          system_plic_logic_bridge_claim_valid = 1'b1;
        end
      end
      22'h202004 : begin
        if(system_plic_logic_bus_doRead)begin
          system_plic_logic_bridge_claim_valid = 1'b1;
        end
      end
      22'h203004 : begin
        if(system_plic_logic_bus_doRead)begin
          system_plic_logic_bridge_claim_valid = 1'b1;
        end
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    system_plic_logic_bridge_claim_payload = 4'bxxxx;
    case(system_plic_logic_bmb_cmd_payload_fragment_address)
      22'h200004 : begin
        if(system_plic_logic_bus_doRead)begin
          system_plic_logic_bridge_claim_payload = system_cores_0_externalInterrupt_plic_target_claim;
        end
      end
      22'h201004 : begin
        if(system_plic_logic_bus_doRead)begin
          system_plic_logic_bridge_claim_payload = system_cores_0_externalSupervisorInterrupt_plic_target_claim;
        end
      end
      22'h202004 : begin
        if(system_plic_logic_bus_doRead)begin
          system_plic_logic_bridge_claim_payload = system_cores_1_externalInterrupt_plic_target_claim;
        end
      end
      22'h203004 : begin
        if(system_plic_logic_bus_doRead)begin
          system_plic_logic_bridge_claim_payload = system_cores_1_externalSupervisorInterrupt_plic_target_claim;
        end
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    system_plic_logic_bridge_completion_valid = 1'b0;
    if(system_plic_logic_bridge_targetMapping_0_targetCompletion_valid)begin
      system_plic_logic_bridge_completion_valid = 1'b1;
    end
    if(system_plic_logic_bridge_targetMapping_1_targetCompletion_valid)begin
      system_plic_logic_bridge_completion_valid = 1'b1;
    end
    if(system_plic_logic_bridge_targetMapping_2_targetCompletion_valid)begin
      system_plic_logic_bridge_completion_valid = 1'b1;
    end
    if(system_plic_logic_bridge_targetMapping_3_targetCompletion_valid)begin
      system_plic_logic_bridge_completion_valid = 1'b1;
    end
  end

  always @ (*) begin
    system_plic_logic_bridge_completion_payload = 4'bxxxx;
    if(system_plic_logic_bridge_targetMapping_0_targetCompletion_valid)begin
      system_plic_logic_bridge_completion_payload = system_plic_logic_bridge_targetMapping_0_targetCompletion_payload;
    end
    if(system_plic_logic_bridge_targetMapping_1_targetCompletion_valid)begin
      system_plic_logic_bridge_completion_payload = system_plic_logic_bridge_targetMapping_1_targetCompletion_payload;
    end
    if(system_plic_logic_bridge_targetMapping_2_targetCompletion_valid)begin
      system_plic_logic_bridge_completion_payload = system_plic_logic_bridge_targetMapping_2_targetCompletion_payload;
    end
    if(system_plic_logic_bridge_targetMapping_3_targetCompletion_valid)begin
      system_plic_logic_bridge_completion_payload = system_plic_logic_bridge_targetMapping_3_targetCompletion_payload;
    end
  end

  always @ (*) begin
    system_plic_logic_bridge_coherencyStall_willIncrement = 1'b0;
    if(_zz_454)begin
      system_plic_logic_bridge_coherencyStall_willIncrement = 1'b1;
    end
    if(1'b1)begin
      if(system_plic_logic_bus_askWrite)begin
        system_plic_logic_bridge_coherencyStall_willIncrement = 1'b1;
      end
      if(system_plic_logic_bus_askRead)begin
        system_plic_logic_bridge_coherencyStall_willIncrement = 1'b1;
      end
    end
  end

  assign system_plic_logic_bridge_coherencyStall_willClear = 1'b0;
  assign system_plic_logic_bridge_coherencyStall_willOverflowIfInc = (system_plic_logic_bridge_coherencyStall_value == 1'b1);
  assign system_plic_logic_bridge_coherencyStall_willOverflow = (system_plic_logic_bridge_coherencyStall_willOverflowIfInc && system_plic_logic_bridge_coherencyStall_willIncrement);
  always @ (*) begin
    system_plic_logic_bridge_coherencyStall_valueNext = (system_plic_logic_bridge_coherencyStall_value + system_plic_logic_bridge_coherencyStall_willIncrement);
    if(system_plic_logic_bridge_coherencyStall_willClear)begin
      system_plic_logic_bridge_coherencyStall_valueNext = 1'b0;
    end
  end

  assign system_cores_0_externalInterrupt_plic_target_threshold = _zz_288;
  always @ (*) begin
    system_plic_logic_bridge_targetMapping_0_targetCompletion_valid = 1'b0;
    case(system_plic_logic_bmb_cmd_payload_fragment_address)
      22'h200004 : begin
        if(system_plic_logic_bus_doWrite)begin
          system_plic_logic_bridge_targetMapping_0_targetCompletion_valid = 1'b1;
        end
      end
      default : begin
      end
    endcase
  end

  assign system_cores_0_externalInterrupt_plic_target_ie_0 = _zz_289;
  assign system_cores_0_externalInterrupt_plic_target_ie_1 = _zz_290;
  assign system_cores_0_externalInterrupt_plic_target_ie_2 = _zz_291;
  assign system_cores_0_externalInterrupt_plic_target_ie_3 = _zz_292;
  assign system_cores_0_externalInterrupt_plic_target_ie_4 = _zz_293;
  assign system_cores_0_externalInterrupt_plic_target_ie_5 = _zz_294;
  assign system_cores_0_externalInterrupt_plic_target_ie_6 = _zz_295;
  assign system_cores_0_externalInterrupt_plic_target_ie_7 = _zz_296;
  assign system_cores_0_externalSupervisorInterrupt_plic_target_threshold = _zz_297;
  always @ (*) begin
    system_plic_logic_bridge_targetMapping_1_targetCompletion_valid = 1'b0;
    case(system_plic_logic_bmb_cmd_payload_fragment_address)
      22'h201004 : begin
        if(system_plic_logic_bus_doWrite)begin
          system_plic_logic_bridge_targetMapping_1_targetCompletion_valid = 1'b1;
        end
      end
      default : begin
      end
    endcase
  end

  assign system_cores_0_externalSupervisorInterrupt_plic_target_ie_0 = _zz_298;
  assign system_cores_0_externalSupervisorInterrupt_plic_target_ie_1 = _zz_299;
  assign system_cores_0_externalSupervisorInterrupt_plic_target_ie_2 = _zz_300;
  assign system_cores_0_externalSupervisorInterrupt_plic_target_ie_3 = _zz_301;
  assign system_cores_0_externalSupervisorInterrupt_plic_target_ie_4 = _zz_302;
  assign system_cores_0_externalSupervisorInterrupt_plic_target_ie_5 = _zz_303;
  assign system_cores_0_externalSupervisorInterrupt_plic_target_ie_6 = _zz_304;
  assign system_cores_0_externalSupervisorInterrupt_plic_target_ie_7 = _zz_305;
  assign system_cores_1_externalInterrupt_plic_target_threshold = _zz_306;
  always @ (*) begin
    system_plic_logic_bridge_targetMapping_2_targetCompletion_valid = 1'b0;
    case(system_plic_logic_bmb_cmd_payload_fragment_address)
      22'h202004 : begin
        if(system_plic_logic_bus_doWrite)begin
          system_plic_logic_bridge_targetMapping_2_targetCompletion_valid = 1'b1;
        end
      end
      default : begin
      end
    endcase
  end

  assign system_cores_1_externalInterrupt_plic_target_ie_0 = _zz_307;
  assign system_cores_1_externalInterrupt_plic_target_ie_1 = _zz_308;
  assign system_cores_1_externalInterrupt_plic_target_ie_2 = _zz_309;
  assign system_cores_1_externalInterrupt_plic_target_ie_3 = _zz_310;
  assign system_cores_1_externalInterrupt_plic_target_ie_4 = _zz_311;
  assign system_cores_1_externalInterrupt_plic_target_ie_5 = _zz_312;
  assign system_cores_1_externalInterrupt_plic_target_ie_6 = _zz_313;
  assign system_cores_1_externalInterrupt_plic_target_ie_7 = _zz_314;
  assign system_cores_1_externalSupervisorInterrupt_plic_target_threshold = _zz_315;
  always @ (*) begin
    system_plic_logic_bridge_targetMapping_3_targetCompletion_valid = 1'b0;
    case(system_plic_logic_bmb_cmd_payload_fragment_address)
      22'h203004 : begin
        if(system_plic_logic_bus_doWrite)begin
          system_plic_logic_bridge_targetMapping_3_targetCompletion_valid = 1'b1;
        end
      end
      default : begin
      end
    endcase
  end

  assign system_cores_1_externalSupervisorInterrupt_plic_target_ie_0 = _zz_316;
  assign system_cores_1_externalSupervisorInterrupt_plic_target_ie_1 = _zz_317;
  assign system_cores_1_externalSupervisorInterrupt_plic_target_ie_2 = _zz_318;
  assign system_cores_1_externalSupervisorInterrupt_plic_target_ie_3 = _zz_319;
  assign system_cores_1_externalSupervisorInterrupt_plic_target_ie_4 = _zz_320;
  assign system_cores_1_externalSupervisorInterrupt_plic_target_ie_5 = _zz_321;
  assign system_cores_1_externalSupervisorInterrupt_plic_target_ie_6 = _zz_322;
  assign system_cores_1_externalSupervisorInterrupt_plic_target_ie_7 = _zz_323;
  assign system_plic_logic_bmb_cmd_valid = system_bmbPeripheral_bmb_decoder_io_outputs_0_cmd_valid;
  assign system_plic_logic_bmb_rsp_ready = system_bmbPeripheral_bmb_decoder_io_outputs_0_rsp_ready;
  assign system_plic_logic_bmb_cmd_payload_last = system_bmbPeripheral_bmb_decoder_io_outputs_0_cmd_payload_last;
  assign system_plic_logic_bmb_cmd_payload_fragment_source = system_bmbPeripheral_bmb_decoder_io_outputs_0_cmd_payload_fragment_source;
  assign system_plic_logic_bmb_cmd_payload_fragment_opcode = system_bmbPeripheral_bmb_decoder_io_outputs_0_cmd_payload_fragment_opcode;
  assign system_plic_logic_bmb_cmd_payload_fragment_address = system_bmbPeripheral_bmb_decoder_io_outputs_0_cmd_payload_fragment_address[21:0];
  assign system_plic_logic_bmb_cmd_payload_fragment_length = system_bmbPeripheral_bmb_decoder_io_outputs_0_cmd_payload_fragment_length;
  assign system_plic_logic_bmb_cmd_payload_fragment_data = system_bmbPeripheral_bmb_decoder_io_outputs_0_cmd_payload_fragment_data;
  assign system_plic_logic_bmb_cmd_payload_fragment_mask = system_bmbPeripheral_bmb_decoder_io_outputs_0_cmd_payload_fragment_mask;
  assign system_plic_logic_bmb_cmd_payload_fragment_context = system_bmbPeripheral_bmb_decoder_io_outputs_0_cmd_payload_fragment_context;
  assign _zz_324 = (! (1'b0 || 1'b0));
  assign _zz_325 = ((1'b1 && (! _zz_326)) || sdramDomain_phyA_logic_ctrl_rsp_ready);
  assign _zz_326 = _zz_327;
  assign sdramDomain_phyA_logic_ctrl_rsp_valid = _zz_326;
  assign sdramDomain_phyA_logic_ctrl_rsp_payload_last = _zz_328;
  assign sdramDomain_phyA_logic_ctrl_rsp_payload_fragment_source = _zz_329;
  assign sdramDomain_phyA_logic_ctrl_rsp_payload_fragment_opcode = _zz_330;
  assign sdramDomain_phyA_logic_ctrl_rsp_payload_fragment_data = _zz_331;
  assign sdramDomain_phyA_logic_ctrl_rsp_payload_fragment_context = _zz_332;
  assign _zz_333 = ((sdramDomain_phyA_logic_ctrl_cmd_valid && sdramDomain_phyA_logic_ctrl_cmd_ready) && (sdramDomain_phyA_logic_ctrl_cmd_payload_fragment_opcode == 1'b1));
  assign sdramDomain_phyA_logic_ctrl_cmd_ready = (_zz_325 && _zz_324);
  assign sdramDomain_phyA_sdram_ADDR = sdramDomain_phyA_logic_phy_io_sdram_ADDR;
  assign sdramDomain_phyA_sdram_BA = sdramDomain_phyA_logic_phy_io_sdram_BA;
  assign sdramDomain_phyA_sdram_CASn = sdramDomain_phyA_logic_phy_io_sdram_CASn;
  assign sdramDomain_phyA_sdram_CKE = sdramDomain_phyA_logic_phy_io_sdram_CKE;
  assign sdramDomain_phyA_sdram_CSn = sdramDomain_phyA_logic_phy_io_sdram_CSn;
  assign sdramDomain_phyA_sdram_RASn = sdramDomain_phyA_logic_phy_io_sdram_RASn;
  assign sdramDomain_phyA_sdram_WEn = sdramDomain_phyA_logic_phy_io_sdram_WEn;
  assign sdramDomain_phyA_sdram_CK = sdramDomain_phyA_logic_phy_io_sdram_CK;
  assign sdramDomain_phyA_sdram_CKn = sdramDomain_phyA_logic_phy_io_sdram_CKn;
  assign sdramDomain_phyA_sdram_ODT = sdramDomain_phyA_logic_phy_io_sdram_ODT;
  assign sdramDomain_phyA_sdram_DM = sdramDomain_phyA_logic_phy_io_sdram_DM;
  assign system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_valid = (system_sdramA0_bmb_arbiter_io_output_cmd_valid || system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_rValid);
  assign _zz_439 = (! system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_rValid);
  assign system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_payload_last = (system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_rValid ? system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_rData_last : system_sdramA0_bmb_arbiter_io_output_cmd_payload_last);
  assign system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_payload_fragment_source = (system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_rValid ? system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_rData_fragment_source : system_sdramA0_bmb_arbiter_io_output_cmd_payload_fragment_source);
  assign system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_payload_fragment_opcode = (system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_rValid ? system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_rData_fragment_opcode : system_sdramA0_bmb_arbiter_io_output_cmd_payload_fragment_opcode);
  assign system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_payload_fragment_address = (system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_rValid ? system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_rData_fragment_address : system_sdramA0_bmb_arbiter_io_output_cmd_payload_fragment_address);
  assign system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_payload_fragment_length = (system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_rValid ? system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_rData_fragment_length : system_sdramA0_bmb_arbiter_io_output_cmd_payload_fragment_length);
  assign system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_payload_fragment_data = (system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_rValid ? system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_rData_fragment_data : system_sdramA0_bmb_arbiter_io_output_cmd_payload_fragment_data);
  assign system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_payload_fragment_mask = (system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_rValid ? system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_rData_fragment_mask : system_sdramA0_bmb_arbiter_io_output_cmd_payload_fragment_mask);
  assign system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_ready = ((1'b1 && (! system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_m2sPipe_valid)) || system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_m2sPipe_ready);
  assign system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_m2sPipe_valid = system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_m2sPipe_rValid;
  assign system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_m2sPipe_payload_last = system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_m2sPipe_rData_last;
  assign system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_m2sPipe_payload_fragment_source = system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_m2sPipe_rData_fragment_source;
  assign system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_m2sPipe_payload_fragment_opcode = system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_m2sPipe_rData_fragment_opcode;
  assign system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_m2sPipe_payload_fragment_address = system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_m2sPipe_rData_fragment_address;
  assign system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_m2sPipe_payload_fragment_length = system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_m2sPipe_rData_fragment_length;
  assign system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_m2sPipe_payload_fragment_data = system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_m2sPipe_rData_fragment_data;
  assign system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_m2sPipe_payload_fragment_mask = system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_m2sPipe_rData_fragment_mask;
  assign system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_m2sPipe_ready = system_sdramA_logic_io_bmb_0_cmd_ready;
  assign _zz_367 = ((1'b1 && (! _zz_368)) || system_sdramA0_bmb_arbiter_io_output_rsp_ready);
  assign _zz_368 = _zz_369;
  assign sdramDomain_phyA_logic_ctrl_cmd_valid = sdramDomain_bmbCc_bmb_decoder_io_outputs_0_cmd_valid;
  assign sdramDomain_phyA_logic_ctrl_rsp_ready = sdramDomain_bmbCc_bmb_decoder_io_outputs_0_rsp_ready;
  assign sdramDomain_phyA_logic_ctrl_cmd_payload_last = sdramDomain_bmbCc_bmb_decoder_io_outputs_0_cmd_payload_last;
  assign sdramDomain_phyA_logic_ctrl_cmd_payload_fragment_source = sdramDomain_bmbCc_bmb_decoder_io_outputs_0_cmd_payload_fragment_source;
  assign sdramDomain_phyA_logic_ctrl_cmd_payload_fragment_opcode = sdramDomain_bmbCc_bmb_decoder_io_outputs_0_cmd_payload_fragment_opcode;
  assign sdramDomain_phyA_logic_ctrl_cmd_payload_fragment_address = sdramDomain_bmbCc_bmb_decoder_io_outputs_0_cmd_payload_fragment_address[11:0];
  assign sdramDomain_phyA_logic_ctrl_cmd_payload_fragment_length = sdramDomain_bmbCc_bmb_decoder_io_outputs_0_cmd_payload_fragment_length;
  assign sdramDomain_phyA_logic_ctrl_cmd_payload_fragment_data = sdramDomain_bmbCc_bmb_decoder_io_outputs_0_cmd_payload_fragment_data;
  assign sdramDomain_phyA_logic_ctrl_cmd_payload_fragment_mask = sdramDomain_bmbCc_bmb_decoder_io_outputs_0_cmd_payload_fragment_mask;
  assign sdramDomain_phyA_logic_ctrl_cmd_payload_fragment_context = sdramDomain_bmbCc_bmb_decoder_io_outputs_0_cmd_payload_fragment_context;
  assign _zz_434 = sdramDomain_bmbCc_bmb_decoder_io_outputs_1_cmd_payload_fragment_address[11:0];
  assign sdramDomain_bmbCc_bmb_cmd_ready = sdramDomain_bmbCc_bmb_decoder_io_input_cmd_ready;
  assign sdramDomain_bmbCc_bmb_rsp_valid = sdramDomain_bmbCc_bmb_decoder_io_input_rsp_valid;
  assign sdramDomain_bmbCc_bmb_rsp_payload_last = sdramDomain_bmbCc_bmb_decoder_io_input_rsp_payload_last;
  assign sdramDomain_bmbCc_bmb_rsp_payload_fragment_source = sdramDomain_bmbCc_bmb_decoder_io_input_rsp_payload_fragment_source;
  assign sdramDomain_bmbCc_bmb_rsp_payload_fragment_opcode = sdramDomain_bmbCc_bmb_decoder_io_input_rsp_payload_fragment_opcode;
  assign sdramDomain_bmbCc_bmb_rsp_payload_fragment_data = sdramDomain_bmbCc_bmb_decoder_io_input_rsp_payload_fragment_data;
  assign sdramDomain_bmbCc_bmb_rsp_payload_fragment_context = sdramDomain_bmbCc_bmb_decoder_io_input_rsp_payload_fragment_context;
  assign sdramDomain_bmbCc_bmb_cmd_valid = system_bmbPeripheral_bmb_crossClock_io_output_cmd_valid;
  assign sdramDomain_bmbCc_bmb_rsp_ready = system_bmbPeripheral_bmb_crossClock_io_output_rsp_ready;
  assign sdramDomain_bmbCc_bmb_cmd_payload_last = system_bmbPeripheral_bmb_crossClock_io_output_cmd_payload_last;
  assign sdramDomain_bmbCc_bmb_cmd_payload_fragment_source = system_bmbPeripheral_bmb_crossClock_io_output_cmd_payload_fragment_source;
  assign sdramDomain_bmbCc_bmb_cmd_payload_fragment_opcode = system_bmbPeripheral_bmb_crossClock_io_output_cmd_payload_fragment_opcode;
  assign sdramDomain_bmbCc_bmb_cmd_payload_fragment_address = system_bmbPeripheral_bmb_crossClock_io_output_cmd_payload_fragment_address[12:0];
  assign sdramDomain_bmbCc_bmb_cmd_payload_fragment_length = system_bmbPeripheral_bmb_crossClock_io_output_cmd_payload_fragment_length;
  assign sdramDomain_bmbCc_bmb_cmd_payload_fragment_data = system_bmbPeripheral_bmb_crossClock_io_output_cmd_payload_fragment_data;
  assign sdramDomain_bmbCc_bmb_cmd_payload_fragment_mask = system_bmbPeripheral_bmb_crossClock_io_output_cmd_payload_fragment_mask;
  assign sdramDomain_bmbCc_bmb_cmd_payload_fragment_context = system_bmbPeripheral_bmb_crossClock_io_output_cmd_payload_fragment_context;
  assign system_bmbPeripheral_bmb_cmd_halfPipe_valid = system_bmbPeripheral_bmb_cmd_halfPipe_regs_valid;
  assign system_bmbPeripheral_bmb_cmd_halfPipe_payload_last = system_bmbPeripheral_bmb_cmd_halfPipe_regs_payload_last;
  assign system_bmbPeripheral_bmb_cmd_halfPipe_payload_fragment_source = system_bmbPeripheral_bmb_cmd_halfPipe_regs_payload_fragment_source;
  assign system_bmbPeripheral_bmb_cmd_halfPipe_payload_fragment_opcode = system_bmbPeripheral_bmb_cmd_halfPipe_regs_payload_fragment_opcode;
  assign system_bmbPeripheral_bmb_cmd_halfPipe_payload_fragment_address = system_bmbPeripheral_bmb_cmd_halfPipe_regs_payload_fragment_address;
  assign system_bmbPeripheral_bmb_cmd_halfPipe_payload_fragment_length = system_bmbPeripheral_bmb_cmd_halfPipe_regs_payload_fragment_length;
  assign system_bmbPeripheral_bmb_cmd_halfPipe_payload_fragment_data = system_bmbPeripheral_bmb_cmd_halfPipe_regs_payload_fragment_data;
  assign system_bmbPeripheral_bmb_cmd_halfPipe_payload_fragment_mask = system_bmbPeripheral_bmb_cmd_halfPipe_regs_payload_fragment_mask;
  assign system_bmbPeripheral_bmb_cmd_halfPipe_payload_fragment_context = system_bmbPeripheral_bmb_cmd_halfPipe_regs_payload_fragment_context;
  assign system_bmbPeripheral_bmb_cmd_ready = system_bmbPeripheral_bmb_cmd_halfPipe_regs_ready;
  assign system_bmbPeripheral_bmb_cmd_halfPipe_ready = system_bmbPeripheral_bmb_decoder_io_input_cmd_ready;
  assign _zz_375 = system_bmbPeripheral_bmb_rsp_ready;
  assign system_bmbPeripheral_bmb_rsp_valid = _zz_376;
  assign system_bmbPeripheral_bmb_rsp_payload_last = _zz_378;
  assign system_bmbPeripheral_bmb_rsp_payload_fragment_source = _zz_379;
  assign system_bmbPeripheral_bmb_rsp_payload_fragment_opcode = _zz_380;
  assign system_bmbPeripheral_bmb_rsp_payload_fragment_data = _zz_381;
  assign system_bmbPeripheral_bmb_rsp_payload_fragment_context = _zz_382;
  assign _zz_374 = system_bmbPeripheral_bmb_decoder_io_input_rsp_valid;
  assign system_bmbPeripheral_bmb_cmd_valid = system_bmbPeripheral_bmb_arbiter_io_output_cmd_valid;
  assign system_bmbPeripheral_bmb_rsp_ready = system_bmbPeripheral_bmb_arbiter_io_output_rsp_ready;
  assign system_bmbPeripheral_bmb_cmd_payload_last = system_bmbPeripheral_bmb_arbiter_io_output_cmd_payload_last;
  assign system_bmbPeripheral_bmb_cmd_payload_fragment_source = system_bmbPeripheral_bmb_arbiter_io_output_cmd_payload_fragment_source;
  assign system_bmbPeripheral_bmb_cmd_payload_fragment_opcode = system_bmbPeripheral_bmb_arbiter_io_output_cmd_payload_fragment_opcode;
  assign system_bmbPeripheral_bmb_cmd_payload_fragment_address = system_bmbPeripheral_bmb_arbiter_io_output_cmd_payload_fragment_address;
  assign system_bmbPeripheral_bmb_cmd_payload_fragment_length = system_bmbPeripheral_bmb_arbiter_io_output_cmd_payload_fragment_length;
  assign system_bmbPeripheral_bmb_cmd_payload_fragment_data = system_bmbPeripheral_bmb_arbiter_io_output_cmd_payload_fragment_data;
  assign system_bmbPeripheral_bmb_cmd_payload_fragment_mask = system_bmbPeripheral_bmb_arbiter_io_output_cmd_payload_fragment_mask;
  assign system_bmbPeripheral_bmb_cmd_payload_fragment_context = system_bmbPeripheral_bmb_arbiter_io_output_cmd_payload_fragment_context;
  assign system_fabric_iBus_bmb_cmd_ready = ((1'b1 && (! system_fabric_iBus_bmb_cmd_m2sPipe_valid)) || system_fabric_iBus_bmb_cmd_m2sPipe_ready);
  assign system_fabric_iBus_bmb_cmd_m2sPipe_valid = system_fabric_iBus_bmb_cmd_m2sPipe_rValid;
  assign system_fabric_iBus_bmb_cmd_m2sPipe_payload_last = system_fabric_iBus_bmb_cmd_m2sPipe_rData_last;
  assign system_fabric_iBus_bmb_cmd_m2sPipe_payload_fragment_source = system_fabric_iBus_bmb_cmd_m2sPipe_rData_fragment_source;
  assign system_fabric_iBus_bmb_cmd_m2sPipe_payload_fragment_opcode = system_fabric_iBus_bmb_cmd_m2sPipe_rData_fragment_opcode;
  assign system_fabric_iBus_bmb_cmd_m2sPipe_payload_fragment_address = system_fabric_iBus_bmb_cmd_m2sPipe_rData_fragment_address;
  assign system_fabric_iBus_bmb_cmd_m2sPipe_payload_fragment_length = system_fabric_iBus_bmb_cmd_m2sPipe_rData_fragment_length;
  assign system_fabric_iBus_bmb_cmd_m2sPipe_ready = system_fabric_iBus_bmb_decoder_io_input_cmd_ready;
  assign system_fabric_iBus_bmb_rsp_valid = system_fabric_iBus_bmb_decoder_io_input_rsp_valid;
  assign system_fabric_iBus_bmb_rsp_payload_last = system_fabric_iBus_bmb_decoder_io_input_rsp_payload_last;
  assign system_fabric_iBus_bmb_rsp_payload_fragment_source = system_fabric_iBus_bmb_decoder_io_input_rsp_payload_fragment_source;
  assign system_fabric_iBus_bmb_rsp_payload_fragment_opcode = system_fabric_iBus_bmb_decoder_io_input_rsp_payload_fragment_opcode;
  assign system_fabric_iBus_bmb_rsp_payload_fragment_data = system_fabric_iBus_bmb_decoder_io_input_rsp_payload_fragment_data;
  assign system_fabric_dBus_bmb_cmd_ready = system_fabric_dBus_bmb_decoder_io_input_cmd_ready;
  assign system_fabric_dBus_bmb_rsp_valid = system_fabric_dBus_bmb_decoder_io_input_rsp_valid;
  assign system_fabric_dBus_bmb_rsp_payload_last = system_fabric_dBus_bmb_decoder_io_input_rsp_payload_last;
  assign system_fabric_dBus_bmb_rsp_payload_fragment_source = system_fabric_dBus_bmb_decoder_io_input_rsp_payload_fragment_source;
  assign system_fabric_dBus_bmb_rsp_payload_fragment_opcode = system_fabric_dBus_bmb_decoder_io_input_rsp_payload_fragment_opcode;
  assign system_fabric_dBus_bmb_rsp_payload_fragment_data = system_fabric_dBus_bmb_decoder_io_input_rsp_payload_fragment_data;
  assign system_fabric_dBus_bmb_rsp_payload_fragment_context = system_fabric_dBus_bmb_decoder_io_input_rsp_payload_fragment_context;
  assign _zz_436 = system_fabric_iBus_bmb_decoder_io_outputs_0_cmd_payload_fragment_address[26:0];
  assign _zz_437 = 64'h0;
  assign _zz_438 = 8'h0;
  assign _zz_441 = system_fabric_iBus_bmb_unburstify_io_output_cmd_payload_fragment_address[23:0];
  assign _zz_442 = 32'h0;
  assign _zz_443 = 4'bxxxx;
  assign _zz_435 = system_fabric_dBus_bmb_decoder_io_outputs_0_cmd_payload_fragment_address[26:0];
  assign _zz_440 = system_fabric_dBus_bmb_unburstify_io_output_cmd_payload_fragment_address[23:0];
  assign system_fabric_iBus_bmb_cmd_valid = system_fabric_iBus_bmb_arbiter_io_output_cmd_valid;
  assign system_fabric_iBus_bmb_rsp_ready = system_fabric_iBus_bmb_arbiter_io_output_rsp_ready;
  assign system_fabric_iBus_bmb_cmd_payload_last = system_fabric_iBus_bmb_arbiter_io_output_cmd_payload_last;
  assign system_fabric_iBus_bmb_cmd_payload_fragment_source = system_fabric_iBus_bmb_arbiter_io_output_cmd_payload_fragment_source;
  assign system_fabric_iBus_bmb_cmd_payload_fragment_opcode = system_fabric_iBus_bmb_arbiter_io_output_cmd_payload_fragment_opcode;
  assign system_fabric_iBus_bmb_cmd_payload_fragment_address = system_fabric_iBus_bmb_arbiter_io_output_cmd_payload_fragment_address;
  assign system_fabric_iBus_bmb_cmd_payload_fragment_length = system_fabric_iBus_bmb_arbiter_io_output_cmd_payload_fragment_length;
  assign system_fabric_dBus_bmb_cmd_valid = system_fabric_dBus_bmb_arbiter_io_output_cmd_valid;
  assign system_fabric_dBus_bmb_rsp_ready = system_fabric_dBus_bmb_arbiter_io_output_rsp_ready;
  assign system_fabric_dBus_bmb_cmd_payload_last = system_fabric_dBus_bmb_arbiter_io_output_cmd_payload_last;
  assign system_fabric_dBus_bmb_cmd_payload_fragment_source = system_fabric_dBus_bmb_arbiter_io_output_cmd_payload_fragment_source;
  assign system_fabric_dBus_bmb_cmd_payload_fragment_opcode = system_fabric_dBus_bmb_arbiter_io_output_cmd_payload_fragment_opcode;
  assign system_fabric_dBus_bmb_cmd_payload_fragment_address = system_fabric_dBus_bmb_arbiter_io_output_cmd_payload_fragment_address;
  assign system_fabric_dBus_bmb_cmd_payload_fragment_length = system_fabric_dBus_bmb_arbiter_io_output_cmd_payload_fragment_length;
  assign system_fabric_dBus_bmb_cmd_payload_fragment_data = system_fabric_dBus_bmb_arbiter_io_output_cmd_payload_fragment_data;
  assign system_fabric_dBus_bmb_cmd_payload_fragment_mask = system_fabric_dBus_bmb_arbiter_io_output_cmd_payload_fragment_mask;
  assign system_fabric_dBus_bmb_cmd_payload_fragment_context = system_fabric_dBus_bmb_arbiter_io_output_cmd_payload_fragment_context;
  assign system_dma_logic_io_read_cmd_halfPipe_valid = system_dma_logic_io_read_cmd_halfPipe_regs_valid;
  assign system_dma_logic_io_read_cmd_halfPipe_payload_last = system_dma_logic_io_read_cmd_halfPipe_regs_payload_last;
  assign system_dma_logic_io_read_cmd_halfPipe_payload_fragment_source = system_dma_logic_io_read_cmd_halfPipe_regs_payload_fragment_source;
  assign system_dma_logic_io_read_cmd_halfPipe_payload_fragment_opcode = system_dma_logic_io_read_cmd_halfPipe_regs_payload_fragment_opcode;
  assign system_dma_logic_io_read_cmd_halfPipe_payload_fragment_address = system_dma_logic_io_read_cmd_halfPipe_regs_payload_fragment_address;
  assign system_dma_logic_io_read_cmd_halfPipe_payload_fragment_length = system_dma_logic_io_read_cmd_halfPipe_regs_payload_fragment_length;
  assign system_dma_logic_io_read_cmd_halfPipe_payload_fragment_context = system_dma_logic_io_read_cmd_halfPipe_regs_payload_fragment_context;
  assign system_dma_logic_io_read_cmd_halfPipe_ready = system_dma_read_decoder_io_input_cmd_ready;
  assign system_fabric_invalidationMonitor_output_connector_decoder_cmd_ready = system_fabric_dBus_bmb_arbiter_io_inputs_2_cmd_ready;
  assign system_fabric_invalidationMonitor_output_connector_decoder_rsp_valid = system_fabric_dBus_bmb_arbiter_io_inputs_2_rsp_valid;
  assign system_fabric_invalidationMonitor_output_connector_decoder_rsp_payload_last = system_fabric_dBus_bmb_arbiter_io_inputs_2_rsp_payload_last;
  assign system_fabric_invalidationMonitor_output_connector_decoder_rsp_payload_fragment_source = system_fabric_dBus_bmb_arbiter_io_inputs_2_rsp_payload_fragment_source;
  assign system_fabric_invalidationMonitor_output_connector_decoder_rsp_payload_fragment_opcode = system_fabric_dBus_bmb_arbiter_io_inputs_2_rsp_payload_fragment_opcode;
  assign system_fabric_invalidationMonitor_output_connector_decoder_rsp_payload_fragment_data = system_fabric_dBus_bmb_arbiter_io_inputs_2_rsp_payload_fragment_data;
  assign system_fabric_invalidationMonitor_output_connector_decoder_rsp_payload_fragment_context = system_fabric_dBus_bmb_arbiter_io_inputs_2_rsp_payload_fragment_context;
  assign system_cores_0_iBus_connector_decoder_cmd_ready = system_fabric_iBus_bmb_arbiter_io_inputs_1_cmd_ready;
  assign system_cores_0_iBus_connector_decoder_rsp_valid = system_fabric_iBus_bmb_arbiter_io_inputs_1_rsp_valid;
  assign system_cores_0_iBus_connector_decoder_rsp_payload_last = system_fabric_iBus_bmb_arbiter_io_inputs_1_rsp_payload_last;
  assign system_cores_0_iBus_connector_decoder_rsp_payload_fragment_opcode = system_fabric_iBus_bmb_arbiter_io_inputs_1_rsp_payload_fragment_opcode;
  assign system_cores_0_iBus_connector_decoder_rsp_payload_fragment_data = system_fabric_iBus_bmb_arbiter_io_inputs_1_rsp_payload_fragment_data;
  assign system_cores_1_iBus_connector_decoder_cmd_ready = system_fabric_iBus_bmb_arbiter_io_inputs_0_cmd_ready;
  assign system_cores_1_iBus_connector_decoder_rsp_valid = system_fabric_iBus_bmb_arbiter_io_inputs_0_rsp_valid;
  assign system_cores_1_iBus_connector_decoder_rsp_payload_last = system_fabric_iBus_bmb_arbiter_io_inputs_0_rsp_payload_last;
  assign system_cores_1_iBus_connector_decoder_rsp_payload_fragment_opcode = system_fabric_iBus_bmb_arbiter_io_inputs_0_rsp_payload_fragment_opcode;
  assign system_cores_1_iBus_connector_decoder_rsp_payload_fragment_data = system_fabric_iBus_bmb_arbiter_io_inputs_0_rsp_payload_fragment_data;
  assign _zz_446 = 64'h0;
  assign _zz_447 = 8'h0;
  assign _zz_444 = 64'h0;
  assign _zz_445 = 8'h0;
  assign system_plic_logic_bridge_targetMapping_0_targetCompletion_payload = system_plic_logic_bmb_cmd_payload_fragment_data[3 : 0];
  assign system_plic_logic_bridge_targetMapping_1_targetCompletion_payload = system_plic_logic_bmb_cmd_payload_fragment_data[3 : 0];
  assign system_plic_logic_bridge_targetMapping_2_targetCompletion_payload = system_plic_logic_bmb_cmd_payload_fragment_data[3 : 0];
  assign system_plic_logic_bridge_targetMapping_3_targetCompletion_payload = system_plic_logic_bmb_cmd_payload_fragment_data[3 : 0];
  assign _zz_383 = _zz_517;
  assign _zz_384 = _zz_534;
  assign _zz_122 = system_gpioA_gpio;
  assign _zz_136 = system_spiA_user_data;
  assign _zz_146 = system_spiA_flash_data;
  assign _zz_156 = system_spiA_sdcard_data;
  assign _zz_166 = system_spiA_md_IO;
  assign _zz_397 = 1'b0;
  assign _zz_407 = 1'b0;
  always @ (posedge clocking_pll_CLKOUT0) begin
    if(_zz_448)begin
      debugCd_logic_holdingLogic_resetCounter <= (debugCd_logic_holdingLogic_resetCounter + 12'h001);
    end
    if(debugCd_logic_inputResetTrigger)begin
      debugCd_logic_holdingLogic_resetCounter <= 12'h0;
    end
    debugCd_logic_outputReset <= debugCd_logic_outputResetUnbuffered;
  end

  always @ (posedge clocking_pll_CLKOUT6) begin
    if(_zz_449)begin
      vgaCd_logic_holdingLogic_resetCounter <= (vgaCd_logic_holdingLogic_resetCounter + 6'h01);
    end
    if(vgaCd_logic_inputResetTrigger)begin
      vgaCd_logic_holdingLogic_resetCounter <= 6'h0;
    end
    vgaCd_logic_outputReset <= vgaCd_logic_outputResetUnbuffered;
  end

  always @ (posedge clocking_pll_CLKOUT1) begin
    if(_zz_450)begin
      sdramCd_logic_holdingLogic_resetCounter <= (sdramCd_logic_holdingLogic_resetCounter + 6'h01);
    end
    if(sdramCd_logic_inputResetTrigger)begin
      sdramCd_logic_holdingLogic_resetCounter <= 6'h0;
    end
    sdramCd_logic_outputReset <= sdramCd_logic_outputResetUnbuffered;
  end

  always @ (posedge clocking_pll_CLKOUT0) begin
    if(_zz_451)begin
      systemCd_logic_holdingLogic_resetCounter <= (systemCd_logic_holdingLogic_resetCounter + 6'h01);
    end
    if(systemCd_logic_inputResetTrigger)begin
      systemCd_logic_holdingLogic_resetCounter <= 6'h0;
    end
    systemCd_logic_outputReset <= systemCd_logic_outputResetUnbuffered;
  end

  always @ (posedge clocking_pll_CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      _zz_41 <= 1'b0;
      dBus_Bridge_withWriteBuffer_buffer_mask <= 8'h0;
      dBus_Bridge_withWriteBuffer_aggregationCounter <= 3'b000;
      dBus_Bridge_withWriteBuffer_timer <= 5'h0;
      _zz_48 <= 1'b0;
      dBus_Bridge_withWriteBuffer_buffer_mask_1 <= 8'h0;
      dBus_Bridge_withWriteBuffer_aggregationCounter_1 <= 3'b000;
      dBus_Bridge_withWriteBuffer_timer_1 <= 5'h0;
      dBus_Bridge_bus_cmd_m2sPipe_rValid <= 1'b0;
      _zz_57 <= 1'b0;
      dBus_Bridge_bus_ack_m2sPipe_rValid <= 1'b0;
      _zz_62 <= 1'b0;
      dBus_Bridge_bus_cmd_m2sPipe_rValid_1 <= 1'b0;
      _zz_66 <= 1'b0;
      dBus_Bridge_bus_ack_m2sPipe_rValid_1 <= 1'b0;
      _zz_71 <= 1'b0;
      system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_rValid <= 1'b0;
      system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_rValid <= 1'b0;
      _zz_74 <= 1'b0;
      _zz_93 <= 1'b0;
      _zz_104 <= 1'b0;
      _zz_115 <= 1'b0;
      system_uartA_interrupt_plic_gateway_ip <= 1'b0;
      system_uartA_interrupt_plic_gateway_waitCompletion <= 1'b0;
      system_mac_interrupt_plic_gateway_ip <= 1'b0;
      system_mac_interrupt_plic_gateway_waitCompletion <= 1'b0;
      system_dma_vga_channel_interrupt_plic_gateway_ip <= 1'b0;
      system_dma_vga_channel_interrupt_plic_gateway_waitCompletion <= 1'b0;
      system_dma_audioOut_channel_interrupt_plic_gateway_ip <= 1'b0;
      system_dma_audioOut_channel_interrupt_plic_gateway_waitCompletion <= 1'b0;
      system_gpioA_interrupts_24_plic_gateway_ip <= 1'b0;
      system_gpioA_interrupts_24_plic_gateway_waitCompletion <= 1'b0;
      system_gpioA_interrupts_25_plic_gateway_ip <= 1'b0;
      system_gpioA_interrupts_25_plic_gateway_waitCompletion <= 1'b0;
      system_gpioA_interrupts_26_plic_gateway_ip <= 1'b0;
      system_gpioA_interrupts_26_plic_gateway_waitCompletion <= 1'b0;
      system_gpioA_interrupts_27_plic_gateway_ip <= 1'b0;
      system_gpioA_interrupts_27_plic_gateway_waitCompletion <= 1'b0;
      _zz_186 <= 1'b0;
      _zz_280 <= 2'b00;
      _zz_281 <= 2'b00;
      _zz_282 <= 2'b00;
      _zz_283 <= 2'b00;
      _zz_284 <= 2'b00;
      _zz_285 <= 2'b00;
      _zz_286 <= 2'b00;
      _zz_287 <= 2'b00;
      system_plic_logic_bridge_coherencyStall_value <= 1'b0;
      _zz_288 <= 2'b00;
      _zz_289 <= 1'b0;
      _zz_290 <= 1'b0;
      _zz_291 <= 1'b0;
      _zz_292 <= 1'b0;
      _zz_293 <= 1'b0;
      _zz_294 <= 1'b0;
      _zz_295 <= 1'b0;
      _zz_296 <= 1'b0;
      _zz_297 <= 2'b00;
      _zz_298 <= 1'b0;
      _zz_299 <= 1'b0;
      _zz_300 <= 1'b0;
      _zz_301 <= 1'b0;
      _zz_302 <= 1'b0;
      _zz_303 <= 1'b0;
      _zz_304 <= 1'b0;
      _zz_305 <= 1'b0;
      _zz_306 <= 2'b00;
      _zz_307 <= 1'b0;
      _zz_308 <= 1'b0;
      _zz_309 <= 1'b0;
      _zz_310 <= 1'b0;
      _zz_311 <= 1'b0;
      _zz_312 <= 1'b0;
      _zz_313 <= 1'b0;
      _zz_314 <= 1'b0;
      _zz_315 <= 2'b00;
      _zz_316 <= 1'b0;
      _zz_317 <= 1'b0;
      _zz_318 <= 1'b0;
      _zz_319 <= 1'b0;
      _zz_320 <= 1'b0;
      _zz_321 <= 1'b0;
      _zz_322 <= 1'b0;
      _zz_323 <= 1'b0;
      system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_rValid <= 1'b0;
      system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_m2sPipe_rValid <= 1'b0;
      _zz_369 <= 1'b0;
      system_bmbPeripheral_bmb_cmd_halfPipe_regs_valid <= 1'b0;
      system_bmbPeripheral_bmb_cmd_halfPipe_regs_ready <= 1'b1;
      _zz_376 <= 1'b0;
      _zz_377 <= 1'b1;
      system_fabric_iBus_bmb_cmd_m2sPipe_rValid <= 1'b0;
      system_dma_logic_io_read_cmd_halfPipe_regs_valid <= 1'b0;
      system_dma_logic_io_read_cmd_halfPipe_regs_ready <= 1'b1;
    end else begin
      if(_zz_40)begin
        _zz_41 <= system_cores_0_logic_cpu_dBus_cmd_valid;
      end
      if((system_cores_0_logic_cpu_dBus_cmd_valid && _zz_40))begin
        dBus_Bridge_withWriteBuffer_aggregationCounter <= (dBus_Bridge_withWriteBuffer_aggregationCounter + 3'b001);
      end
      if((dBus_Bridge_withWriteBuffer_buffer_stream_valid && (! dBus_Bridge_withWriteBuffer_timerFull)))begin
        dBus_Bridge_withWriteBuffer_timer <= (dBus_Bridge_withWriteBuffer_timer + 5'h01);
      end
      if(((dBus_Bridge_bus_cmd_valid && dBus_Bridge_bus_cmd_ready) || (! dBus_Bridge_withWriteBuffer_buffer_stream_valid)))begin
        dBus_Bridge_withWriteBuffer_buffer_mask <= 8'h0;
        dBus_Bridge_withWriteBuffer_aggregationCounter <= 3'b000;
        dBus_Bridge_withWriteBuffer_timer <= 5'h0;
      end
      if(_zz_455)begin
        if(_zz_456)begin
          dBus_Bridge_withWriteBuffer_buffer_mask[0] <= 1'b1;
        end
        if(_zz_457)begin
          dBus_Bridge_withWriteBuffer_buffer_mask[1] <= 1'b1;
        end
        if(_zz_458)begin
          dBus_Bridge_withWriteBuffer_buffer_mask[2] <= 1'b1;
        end
        if(_zz_459)begin
          dBus_Bridge_withWriteBuffer_buffer_mask[3] <= 1'b1;
        end
        if(_zz_460)begin
          dBus_Bridge_withWriteBuffer_buffer_mask[4] <= 1'b1;
        end
        if(_zz_461)begin
          dBus_Bridge_withWriteBuffer_buffer_mask[5] <= 1'b1;
        end
        if(_zz_462)begin
          dBus_Bridge_withWriteBuffer_buffer_mask[6] <= 1'b1;
        end
        if(_zz_463)begin
          dBus_Bridge_withWriteBuffer_buffer_mask[7] <= 1'b1;
        end
      end
      if(_zz_47)begin
        _zz_48 <= system_cores_1_logic_cpu_dBus_cmd_valid;
      end
      if((system_cores_1_logic_cpu_dBus_cmd_valid && _zz_47))begin
        dBus_Bridge_withWriteBuffer_aggregationCounter_1 <= (dBus_Bridge_withWriteBuffer_aggregationCounter_1 + 3'b001);
      end
      if((dBus_Bridge_withWriteBuffer_buffer_stream_valid_1 && (! dBus_Bridge_withWriteBuffer_timerFull_1)))begin
        dBus_Bridge_withWriteBuffer_timer_1 <= (dBus_Bridge_withWriteBuffer_timer_1 + 5'h01);
      end
      if(((dBus_Bridge_bus_cmd_valid_1 && dBus_Bridge_bus_cmd_ready_1) || (! dBus_Bridge_withWriteBuffer_buffer_stream_valid_1)))begin
        dBus_Bridge_withWriteBuffer_buffer_mask_1 <= 8'h0;
        dBus_Bridge_withWriteBuffer_aggregationCounter_1 <= 3'b000;
        dBus_Bridge_withWriteBuffer_timer_1 <= 5'h0;
      end
      if(_zz_464)begin
        if(_zz_465)begin
          dBus_Bridge_withWriteBuffer_buffer_mask_1[0] <= 1'b1;
        end
        if(_zz_466)begin
          dBus_Bridge_withWriteBuffer_buffer_mask_1[1] <= 1'b1;
        end
        if(_zz_467)begin
          dBus_Bridge_withWriteBuffer_buffer_mask_1[2] <= 1'b1;
        end
        if(_zz_468)begin
          dBus_Bridge_withWriteBuffer_buffer_mask_1[3] <= 1'b1;
        end
        if(_zz_469)begin
          dBus_Bridge_withWriteBuffer_buffer_mask_1[4] <= 1'b1;
        end
        if(_zz_470)begin
          dBus_Bridge_withWriteBuffer_buffer_mask_1[5] <= 1'b1;
        end
        if(_zz_471)begin
          dBus_Bridge_withWriteBuffer_buffer_mask_1[6] <= 1'b1;
        end
        if(_zz_472)begin
          dBus_Bridge_withWriteBuffer_buffer_mask_1[7] <= 1'b1;
        end
      end
      if(dBus_Bridge_bus_cmd_ready)begin
        dBus_Bridge_bus_cmd_m2sPipe_rValid <= dBus_Bridge_bus_cmd_valid;
      end
      if(_zz_54)begin
        _zz_57 <= system_cores_0_dBus_connector_decoder_inv_valid;
      end
      if(dBus_Bridge_bus_ack_ready)begin
        dBus_Bridge_bus_ack_m2sPipe_rValid <= dBus_Bridge_bus_ack_valid;
      end
      if(_zz_55)begin
        _zz_62 <= system_cores_0_dBus_connector_decoder_sync_valid;
      end
      if(dBus_Bridge_bus_cmd_ready_1)begin
        dBus_Bridge_bus_cmd_m2sPipe_rValid_1 <= dBus_Bridge_bus_cmd_valid_1;
      end
      if(_zz_63)begin
        _zz_66 <= system_cores_1_dBus_connector_decoder_inv_valid;
      end
      if(dBus_Bridge_bus_ack_ready_1)begin
        dBus_Bridge_bus_ack_m2sPipe_rValid_1 <= dBus_Bridge_bus_ack_valid_1;
      end
      if(_zz_64)begin
        _zz_71 <= system_cores_1_dBus_connector_decoder_sync_valid;
      end
      if(system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_ready)begin
        system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_rValid <= 1'b0;
      end
      if(_zz_473)begin
        system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_rValid <= system_fabric_invalidationMonitor_logic_io_output_cmd_valid;
      end
      if(system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_ready)begin
        system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_rValid <= system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_valid;
      end
      if(_zz_72)begin
        _zz_74 <= system_fabric_invalidationMonitor_output_connector_decoder_rsp_valid;
      end
      if(_zz_92)begin
        _zz_93 <= 1'b0;
      end
      if(_zz_474)begin
        _zz_93 <= _zz_80;
      end
      if(_zz_92)begin
        _zz_104 <= (_zz_80 || _zz_93);
      end
      if(_zz_91)begin
        _zz_115 <= system_fabric_exclusiveMonitor_logic_io_input_rsp_valid;
      end
      if((! system_uartA_interrupt_plic_gateway_waitCompletion))begin
        system_uartA_interrupt_plic_gateway_ip <= system_uartA_logic_io_interrupt;
        system_uartA_interrupt_plic_gateway_waitCompletion <= system_uartA_logic_io_interrupt;
      end
      if((! system_mac_interrupt_plic_gateway_waitCompletion))begin
        system_mac_interrupt_plic_gateway_ip <= system_mac_logic_io_interrupt;
        system_mac_interrupt_plic_gateway_waitCompletion <= system_mac_logic_io_interrupt;
      end
      if((! system_dma_vga_channel_interrupt_plic_gateway_waitCompletion))begin
        system_dma_vga_channel_interrupt_plic_gateway_ip <= system_dma_vga_channel_interrupt;
        system_dma_vga_channel_interrupt_plic_gateway_waitCompletion <= system_dma_vga_channel_interrupt;
      end
      if((! system_dma_audioOut_channel_interrupt_plic_gateway_waitCompletion))begin
        system_dma_audioOut_channel_interrupt_plic_gateway_ip <= system_dma_audioOut_channel_interrupt;
        system_dma_audioOut_channel_interrupt_plic_gateway_waitCompletion <= system_dma_audioOut_channel_interrupt;
      end
      if((! system_gpioA_interrupts_24_plic_gateway_waitCompletion))begin
        system_gpioA_interrupts_24_plic_gateway_ip <= system_gpioA_interrupts_24;
        system_gpioA_interrupts_24_plic_gateway_waitCompletion <= system_gpioA_interrupts_24;
      end
      if((! system_gpioA_interrupts_25_plic_gateway_waitCompletion))begin
        system_gpioA_interrupts_25_plic_gateway_ip <= system_gpioA_interrupts_25;
        system_gpioA_interrupts_25_plic_gateway_waitCompletion <= system_gpioA_interrupts_25;
      end
      if((! system_gpioA_interrupts_26_plic_gateway_waitCompletion))begin
        system_gpioA_interrupts_26_plic_gateway_ip <= system_gpioA_interrupts_26;
        system_gpioA_interrupts_26_plic_gateway_waitCompletion <= system_gpioA_interrupts_26;
      end
      if((! system_gpioA_interrupts_27_plic_gateway_waitCompletion))begin
        system_gpioA_interrupts_27_plic_gateway_ip <= system_gpioA_interrupts_27;
        system_gpioA_interrupts_27_plic_gateway_waitCompletion <= system_gpioA_interrupts_27;
      end
      if(_zz_184)begin
        _zz_186 <= (system_plic_logic_bus_rsp_valid && _zz_183);
      end
      if(system_plic_logic_bridge_claim_valid)begin
        case(system_plic_logic_bridge_claim_payload)
          4'b0001 : begin
            system_uartA_interrupt_plic_gateway_ip <= 1'b0;
          end
          4'b0011 : begin
            system_mac_interrupt_plic_gateway_ip <= 1'b0;
          end
          4'b1100 : begin
            system_dma_vga_channel_interrupt_plic_gateway_ip <= 1'b0;
          end
          4'b1101 : begin
            system_dma_audioOut_channel_interrupt_plic_gateway_ip <= 1'b0;
          end
          4'b0100 : begin
            system_gpioA_interrupts_24_plic_gateway_ip <= 1'b0;
          end
          4'b0101 : begin
            system_gpioA_interrupts_25_plic_gateway_ip <= 1'b0;
          end
          4'b0110 : begin
            system_gpioA_interrupts_26_plic_gateway_ip <= 1'b0;
          end
          4'b0111 : begin
            system_gpioA_interrupts_27_plic_gateway_ip <= 1'b0;
          end
          default : begin
          end
        endcase
      end
      if(system_plic_logic_bridge_completion_valid)begin
        case(system_plic_logic_bridge_completion_payload)
          4'b0001 : begin
            system_uartA_interrupt_plic_gateway_waitCompletion <= 1'b0;
          end
          4'b0011 : begin
            system_mac_interrupt_plic_gateway_waitCompletion <= 1'b0;
          end
          4'b1100 : begin
            system_dma_vga_channel_interrupt_plic_gateway_waitCompletion <= 1'b0;
          end
          4'b1101 : begin
            system_dma_audioOut_channel_interrupt_plic_gateway_waitCompletion <= 1'b0;
          end
          4'b0100 : begin
            system_gpioA_interrupts_24_plic_gateway_waitCompletion <= 1'b0;
          end
          4'b0101 : begin
            system_gpioA_interrupts_25_plic_gateway_waitCompletion <= 1'b0;
          end
          4'b0110 : begin
            system_gpioA_interrupts_26_plic_gateway_waitCompletion <= 1'b0;
          end
          4'b0111 : begin
            system_gpioA_interrupts_27_plic_gateway_waitCompletion <= 1'b0;
          end
          default : begin
          end
        endcase
      end
      system_plic_logic_bridge_coherencyStall_value <= system_plic_logic_bridge_coherencyStall_valueNext;
      if(system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_ready)begin
        system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_rValid <= 1'b0;
      end
      if(_zz_475)begin
        system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_rValid <= system_sdramA0_bmb_arbiter_io_output_cmd_valid;
      end
      if(system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_ready)begin
        system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_m2sPipe_rValid <= system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_valid;
      end
      if(_zz_367)begin
        _zz_369 <= system_sdramA_logic_io_bmb_0_rsp_valid;
      end
      if(_zz_476)begin
        system_bmbPeripheral_bmb_cmd_halfPipe_regs_valid <= system_bmbPeripheral_bmb_cmd_valid;
        system_bmbPeripheral_bmb_cmd_halfPipe_regs_ready <= (! system_bmbPeripheral_bmb_cmd_valid);
      end else begin
        system_bmbPeripheral_bmb_cmd_halfPipe_regs_valid <= (! system_bmbPeripheral_bmb_cmd_halfPipe_ready);
        system_bmbPeripheral_bmb_cmd_halfPipe_regs_ready <= system_bmbPeripheral_bmb_cmd_halfPipe_ready;
      end
      if(_zz_477)begin
        _zz_376 <= _zz_374;
        _zz_377 <= (! _zz_374);
      end else begin
        _zz_376 <= (! _zz_375);
        _zz_377 <= _zz_375;
      end
      if(system_fabric_iBus_bmb_cmd_ready)begin
        system_fabric_iBus_bmb_cmd_m2sPipe_rValid <= system_fabric_iBus_bmb_cmd_valid;
      end
      if(_zz_478)begin
        system_dma_logic_io_read_cmd_halfPipe_regs_valid <= system_dma_logic_io_read_cmd_valid;
        system_dma_logic_io_read_cmd_halfPipe_regs_ready <= (! system_dma_logic_io_read_cmd_valid);
      end else begin
        system_dma_logic_io_read_cmd_halfPipe_regs_valid <= (! system_dma_logic_io_read_cmd_halfPipe_ready);
        system_dma_logic_io_read_cmd_halfPipe_regs_ready <= system_dma_logic_io_read_cmd_halfPipe_ready;
      end
      case(system_plic_logic_bmb_cmd_payload_fragment_address)
        22'h000004 : begin
          if(system_plic_logic_bus_doWrite)begin
            _zz_280 <= system_plic_logic_bmb_cmd_payload_fragment_data[1 : 0];
          end
        end
        22'h00000c : begin
          if(system_plic_logic_bus_doWrite)begin
            _zz_281 <= system_plic_logic_bmb_cmd_payload_fragment_data[1 : 0];
          end
        end
        22'h000030 : begin
          if(system_plic_logic_bus_doWrite)begin
            _zz_282 <= system_plic_logic_bmb_cmd_payload_fragment_data[1 : 0];
          end
        end
        22'h000034 : begin
          if(system_plic_logic_bus_doWrite)begin
            _zz_283 <= system_plic_logic_bmb_cmd_payload_fragment_data[1 : 0];
          end
        end
        22'h000010 : begin
          if(system_plic_logic_bus_doWrite)begin
            _zz_284 <= system_plic_logic_bmb_cmd_payload_fragment_data[1 : 0];
          end
        end
        22'h000014 : begin
          if(system_plic_logic_bus_doWrite)begin
            _zz_285 <= system_plic_logic_bmb_cmd_payload_fragment_data[1 : 0];
          end
        end
        22'h000018 : begin
          if(system_plic_logic_bus_doWrite)begin
            _zz_286 <= system_plic_logic_bmb_cmd_payload_fragment_data[1 : 0];
          end
        end
        22'h00001c : begin
          if(system_plic_logic_bus_doWrite)begin
            _zz_287 <= system_plic_logic_bmb_cmd_payload_fragment_data[1 : 0];
          end
        end
        22'h200000 : begin
          if(system_plic_logic_bus_doWrite)begin
            _zz_288 <= system_plic_logic_bmb_cmd_payload_fragment_data[1 : 0];
          end
        end
        22'h002000 : begin
          if(system_plic_logic_bus_doWrite)begin
            _zz_289 <= _zz_485[0];
            _zz_290 <= _zz_486[0];
            _zz_291 <= _zz_487[0];
            _zz_292 <= _zz_488[0];
            _zz_293 <= _zz_489[0];
            _zz_294 <= _zz_490[0];
            _zz_295 <= _zz_491[0];
            _zz_296 <= _zz_492[0];
          end
        end
        22'h201000 : begin
          if(system_plic_logic_bus_doWrite)begin
            _zz_297 <= system_plic_logic_bmb_cmd_payload_fragment_data[1 : 0];
          end
        end
        22'h002080 : begin
          if(system_plic_logic_bus_doWrite)begin
            _zz_298 <= _zz_493[0];
            _zz_299 <= _zz_494[0];
            _zz_300 <= _zz_495[0];
            _zz_301 <= _zz_496[0];
            _zz_302 <= _zz_497[0];
            _zz_303 <= _zz_498[0];
            _zz_304 <= _zz_499[0];
            _zz_305 <= _zz_500[0];
          end
        end
        22'h202000 : begin
          if(system_plic_logic_bus_doWrite)begin
            _zz_306 <= system_plic_logic_bmb_cmd_payload_fragment_data[1 : 0];
          end
        end
        22'h002100 : begin
          if(system_plic_logic_bus_doWrite)begin
            _zz_307 <= _zz_501[0];
            _zz_308 <= _zz_502[0];
            _zz_309 <= _zz_503[0];
            _zz_310 <= _zz_504[0];
            _zz_311 <= _zz_505[0];
            _zz_312 <= _zz_506[0];
            _zz_313 <= _zz_507[0];
            _zz_314 <= _zz_508[0];
          end
        end
        22'h203000 : begin
          if(system_plic_logic_bus_doWrite)begin
            _zz_315 <= system_plic_logic_bmb_cmd_payload_fragment_data[1 : 0];
          end
        end
        22'h002180 : begin
          if(system_plic_logic_bus_doWrite)begin
            _zz_316 <= _zz_509[0];
            _zz_317 <= _zz_510[0];
            _zz_318 <= _zz_511[0];
            _zz_319 <= _zz_512[0];
            _zz_320 <= _zz_513[0];
            _zz_321 <= _zz_514[0];
            _zz_322 <= _zz_515[0];
            _zz_323 <= _zz_516[0];
          end
        end
        default : begin
        end
      endcase
    end
  end

  always @ (posedge clocking_pll_CLKOUT0) begin
    if(_zz_455)begin
      if(_zz_456)begin
        dBus_Bridge_withWriteBuffer_buffer_data[7 : 0] <= _zz_42;
      end
      if(_zz_457)begin
        dBus_Bridge_withWriteBuffer_buffer_data[15 : 8] <= _zz_43;
      end
      if(_zz_458)begin
        dBus_Bridge_withWriteBuffer_buffer_data[23 : 16] <= _zz_44;
      end
      if(_zz_459)begin
        dBus_Bridge_withWriteBuffer_buffer_data[31 : 24] <= _zz_45;
      end
      if(_zz_460)begin
        dBus_Bridge_withWriteBuffer_buffer_data[39 : 32] <= _zz_42;
      end
      if(_zz_461)begin
        dBus_Bridge_withWriteBuffer_buffer_data[47 : 40] <= _zz_43;
      end
      if(_zz_462)begin
        dBus_Bridge_withWriteBuffer_buffer_data[55 : 48] <= _zz_44;
      end
      if(_zz_463)begin
        dBus_Bridge_withWriteBuffer_buffer_data[63 : 56] <= _zz_45;
      end
    end
    if((system_cores_0_logic_cpu_dBus_cmd_valid && _zz_40))begin
      dBus_Bridge_withWriteBuffer_buffer_write <= system_cores_0_logic_cpu_dBus_cmd_payload_wr;
      dBus_Bridge_withWriteBuffer_buffer_address <= system_cores_0_logic_cpu_dBus_cmd_payload_address;
      dBus_Bridge_withWriteBuffer_buffer_length <= (_zz_479 | 6'h03);
      dBus_Bridge_withWriteBuffer_buffer_exclusive <= system_cores_0_logic_cpu_dBus_cmd_payload_exclusive;
      if(((system_cores_0_logic_cpu_dBus_cmd_payload_wr && (! system_cores_0_logic_cpu_dBus_cmd_payload_uncached)) && (! system_cores_0_logic_cpu_dBus_cmd_payload_exclusive)))begin
        dBus_Bridge_withWriteBuffer_aggregationEnabled <= 1'b1;
        dBus_Bridge_withWriteBuffer_buffer_address[2 : 0] <= 3'b000;
        dBus_Bridge_withWriteBuffer_buffer_length <= 6'h07;
      end else begin
        dBus_Bridge_withWriteBuffer_aggregationEnabled <= 1'b0;
      end
    end
    if(_zz_464)begin
      if(_zz_465)begin
        dBus_Bridge_withWriteBuffer_buffer_data_1[7 : 0] <= _zz_49;
      end
      if(_zz_466)begin
        dBus_Bridge_withWriteBuffer_buffer_data_1[15 : 8] <= _zz_50;
      end
      if(_zz_467)begin
        dBus_Bridge_withWriteBuffer_buffer_data_1[23 : 16] <= _zz_51;
      end
      if(_zz_468)begin
        dBus_Bridge_withWriteBuffer_buffer_data_1[31 : 24] <= _zz_52;
      end
      if(_zz_469)begin
        dBus_Bridge_withWriteBuffer_buffer_data_1[39 : 32] <= _zz_49;
      end
      if(_zz_470)begin
        dBus_Bridge_withWriteBuffer_buffer_data_1[47 : 40] <= _zz_50;
      end
      if(_zz_471)begin
        dBus_Bridge_withWriteBuffer_buffer_data_1[55 : 48] <= _zz_51;
      end
      if(_zz_472)begin
        dBus_Bridge_withWriteBuffer_buffer_data_1[63 : 56] <= _zz_52;
      end
    end
    if((system_cores_1_logic_cpu_dBus_cmd_valid && _zz_47))begin
      dBus_Bridge_withWriteBuffer_buffer_write_1 <= system_cores_1_logic_cpu_dBus_cmd_payload_wr;
      dBus_Bridge_withWriteBuffer_buffer_address_1 <= system_cores_1_logic_cpu_dBus_cmd_payload_address;
      dBus_Bridge_withWriteBuffer_buffer_length_1 <= (_zz_482 | 6'h03);
      dBus_Bridge_withWriteBuffer_buffer_exclusive_1 <= system_cores_1_logic_cpu_dBus_cmd_payload_exclusive;
      if(((system_cores_1_logic_cpu_dBus_cmd_payload_wr && (! system_cores_1_logic_cpu_dBus_cmd_payload_uncached)) && (! system_cores_1_logic_cpu_dBus_cmd_payload_exclusive)))begin
        dBus_Bridge_withWriteBuffer_aggregationEnabled_1 <= 1'b1;
        dBus_Bridge_withWriteBuffer_buffer_address_1[2 : 0] <= 3'b000;
        dBus_Bridge_withWriteBuffer_buffer_length_1 <= 6'h07;
      end else begin
        dBus_Bridge_withWriteBuffer_aggregationEnabled_1 <= 1'b0;
      end
    end
    if(dBus_Bridge_bus_cmd_ready)begin
      dBus_Bridge_bus_cmd_m2sPipe_rData_last <= dBus_Bridge_bus_cmd_payload_last;
      dBus_Bridge_bus_cmd_m2sPipe_rData_fragment_opcode <= dBus_Bridge_bus_cmd_payload_fragment_opcode;
      dBus_Bridge_bus_cmd_m2sPipe_rData_fragment_exclusive <= dBus_Bridge_bus_cmd_payload_fragment_exclusive;
      dBus_Bridge_bus_cmd_m2sPipe_rData_fragment_address <= dBus_Bridge_bus_cmd_payload_fragment_address;
      dBus_Bridge_bus_cmd_m2sPipe_rData_fragment_length <= dBus_Bridge_bus_cmd_payload_fragment_length;
      dBus_Bridge_bus_cmd_m2sPipe_rData_fragment_data <= dBus_Bridge_bus_cmd_payload_fragment_data;
      dBus_Bridge_bus_cmd_m2sPipe_rData_fragment_mask <= dBus_Bridge_bus_cmd_payload_fragment_mask;
      dBus_Bridge_bus_cmd_m2sPipe_rData_fragment_context <= dBus_Bridge_bus_cmd_payload_fragment_context;
    end
    if(_zz_54)begin
      _zz_58 <= system_cores_0_dBus_connector_decoder_inv_payload_all;
      _zz_59 <= system_cores_0_dBus_connector_decoder_inv_payload_address;
      _zz_60 <= system_cores_0_dBus_connector_decoder_inv_payload_length;
    end
    if(dBus_Bridge_bus_cmd_ready_1)begin
      dBus_Bridge_bus_cmd_m2sPipe_rData_last_1 <= dBus_Bridge_bus_cmd_payload_last_1;
      dBus_Bridge_bus_cmd_m2sPipe_rData_fragment_opcode_1 <= dBus_Bridge_bus_cmd_payload_fragment_opcode_1;
      dBus_Bridge_bus_cmd_m2sPipe_rData_fragment_exclusive_1 <= dBus_Bridge_bus_cmd_payload_fragment_exclusive_1;
      dBus_Bridge_bus_cmd_m2sPipe_rData_fragment_address_1 <= dBus_Bridge_bus_cmd_payload_fragment_address_1;
      dBus_Bridge_bus_cmd_m2sPipe_rData_fragment_length_1 <= dBus_Bridge_bus_cmd_payload_fragment_length_1;
      dBus_Bridge_bus_cmd_m2sPipe_rData_fragment_data_1 <= dBus_Bridge_bus_cmd_payload_fragment_data_1;
      dBus_Bridge_bus_cmd_m2sPipe_rData_fragment_mask_1 <= dBus_Bridge_bus_cmd_payload_fragment_mask_1;
      dBus_Bridge_bus_cmd_m2sPipe_rData_fragment_context_1 <= dBus_Bridge_bus_cmd_payload_fragment_context_1;
    end
    if(_zz_63)begin
      _zz_67 <= system_cores_1_dBus_connector_decoder_inv_payload_all;
      _zz_68 <= system_cores_1_dBus_connector_decoder_inv_payload_address;
      _zz_69 <= system_cores_1_dBus_connector_decoder_inv_payload_length;
    end
    if(_zz_473)begin
      system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_rData_last <= system_fabric_invalidationMonitor_logic_io_output_cmd_payload_last;
      system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_rData_fragment_source <= system_fabric_invalidationMonitor_logic_io_output_cmd_payload_fragment_source;
      system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_rData_fragment_opcode <= system_fabric_invalidationMonitor_logic_io_output_cmd_payload_fragment_opcode;
      system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_rData_fragment_address <= system_fabric_invalidationMonitor_logic_io_output_cmd_payload_fragment_address;
      system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_rData_fragment_length <= system_fabric_invalidationMonitor_logic_io_output_cmd_payload_fragment_length;
      system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_rData_fragment_data <= system_fabric_invalidationMonitor_logic_io_output_cmd_payload_fragment_data;
      system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_rData_fragment_mask <= system_fabric_invalidationMonitor_logic_io_output_cmd_payload_fragment_mask;
      system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_rData_fragment_context <= system_fabric_invalidationMonitor_logic_io_output_cmd_payload_fragment_context;
    end
    if(system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_ready)begin
      system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_rData_last <= system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_payload_last;
      system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_rData_fragment_source <= system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_payload_fragment_source;
      system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_rData_fragment_opcode <= system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_payload_fragment_opcode;
      system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_rData_fragment_address <= system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_payload_fragment_address;
      system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_rData_fragment_length <= system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_payload_fragment_length;
      system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_rData_fragment_data <= system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_payload_fragment_data;
      system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_rData_fragment_mask <= system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_payload_fragment_mask;
      system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_m2sPipe_rData_fragment_context <= system_fabric_invalidationMonitor_logic_io_output_cmd_s2mPipe_payload_fragment_context;
    end
    if(_zz_72)begin
      _zz_75 <= system_fabric_invalidationMonitor_output_connector_decoder_rsp_payload_last;
      _zz_76 <= system_fabric_invalidationMonitor_output_connector_decoder_rsp_payload_fragment_source;
      _zz_77 <= system_fabric_invalidationMonitor_output_connector_decoder_rsp_payload_fragment_opcode;
      _zz_78 <= system_fabric_invalidationMonitor_output_connector_decoder_rsp_payload_fragment_data;
      _zz_79 <= system_fabric_invalidationMonitor_output_connector_decoder_rsp_payload_fragment_context;
    end
    if(_zz_474)begin
      _zz_94 <= _zz_82;
      _zz_95 <= _zz_83;
      _zz_96 <= _zz_84;
      _zz_97 <= _zz_85;
      _zz_98 <= _zz_86;
      _zz_99 <= _zz_87;
      _zz_100 <= _zz_88;
      _zz_101 <= _zz_89;
      _zz_102 <= _zz_90;
    end
    if(_zz_92)begin
      _zz_105 <= (_zz_93 ? _zz_94 : _zz_82);
      _zz_106 <= (_zz_93 ? _zz_95 : _zz_83);
      _zz_107 <= (_zz_93 ? _zz_96 : _zz_84);
      _zz_108 <= (_zz_93 ? _zz_97 : _zz_85);
      _zz_109 <= (_zz_93 ? _zz_98 : _zz_86);
      _zz_110 <= (_zz_93 ? _zz_99 : _zz_87);
      _zz_111 <= (_zz_93 ? _zz_100 : _zz_88);
      _zz_112 <= (_zz_93 ? _zz_101 : _zz_89);
      _zz_113 <= (_zz_93 ? _zz_102 : _zz_90);
    end
    if(_zz_91)begin
      _zz_116 <= system_fabric_exclusiveMonitor_logic_io_input_rsp_payload_last;
      _zz_117 <= system_fabric_exclusiveMonitor_logic_io_input_rsp_payload_fragment_source;
      _zz_118 <= system_fabric_exclusiveMonitor_logic_io_input_rsp_payload_fragment_opcode;
      _zz_119 <= system_fabric_exclusiveMonitor_logic_io_input_rsp_payload_fragment_exclusive;
      _zz_120 <= system_fabric_exclusiveMonitor_logic_io_input_rsp_payload_fragment_data;
      _zz_121 <= system_fabric_exclusiveMonitor_logic_io_input_rsp_payload_fragment_context;
    end
    _zz_139 <= system_spiA_logic_io_spi_sclk_write[0];
    _zz_140 <= system_spiA_logic_io_spi_data_0_write[0];
    _zz_141 <= system_spiA_logic_io_spi_data_0_writeEnable;
    _zz_142 <= _zz_136[0];
    _zz_143 <= system_spiA_logic_io_spi_data_1_write[0];
    _zz_144 <= system_spiA_logic_io_spi_data_1_writeEnable;
    _zz_145 <= _zz_136[1];
    _zz_149 <= system_spiA_logic_io_spi_sclk_write[0];
    _zz_129_regNext <= _zz_129;
    _zz_150 <= system_spiA_logic_io_spi_data_0_write[0];
    _zz_151 <= system_spiA_logic_io_spi_data_0_writeEnable;
    _zz_152 <= _zz_146[0];
    _zz_153 <= system_spiA_logic_io_spi_data_1_write[0];
    _zz_154 <= system_spiA_logic_io_spi_data_1_writeEnable;
    _zz_155 <= _zz_146[1];
    _zz_159 <= system_spiA_logic_io_spi_sclk_write[0];
    _zz_132_regNext <= _zz_132;
    _zz_160 <= system_spiA_logic_io_spi_data_0_write[0];
    _zz_161 <= system_spiA_logic_io_spi_data_0_writeEnable;
    _zz_162 <= _zz_156[0];
    _zz_163 <= system_spiA_logic_io_spi_data_1_write[0];
    _zz_164 <= system_spiA_logic_io_spi_data_1_writeEnable;
    _zz_165 <= _zz_156[1];
    _zz_169 <= (system_spiA_logic_io_spi_sclk_write[0] && (! _zz_135[0]));
    _zz_170 <= system_spiA_logic_io_spi_data_0_write[0];
    _zz_171 <= (system_spiA_logic_io_spi_data_0_writeEnable && (! _zz_135[0]));
    _zz_166_regNext <= _zz_166;
    if(_zz_184)begin
      _zz_187 <= system_plic_logic_bus_rsp_payload_last;
      _zz_188 <= system_plic_logic_bus_rsp_payload_fragment_source;
      _zz_189 <= system_plic_logic_bus_rsp_payload_fragment_opcode;
      _zz_190 <= system_plic_logic_bus_rsp_payload_fragment_data;
      _zz_191 <= system_plic_logic_bus_rsp_payload_fragment_context;
    end
    system_cores_0_externalInterrupt_plic_target_bestRequest_priority <= (_zz_213 ? _zz_211 : system_cores_0_externalInterrupt_plic_target_requests_8_priority);
    system_cores_0_externalInterrupt_plic_target_bestRequest_id <= (_zz_213 ? (_zz_210 ? (_zz_204 ? (_zz_192 ? system_cores_0_externalInterrupt_plic_target_requests_0_id : system_cores_0_externalInterrupt_plic_target_requests_1_id) : (_zz_195 ? system_cores_0_externalInterrupt_plic_target_requests_2_id : system_cores_0_externalInterrupt_plic_target_requests_3_id)) : (_zz_207 ? (_zz_198 ? system_cores_0_externalInterrupt_plic_target_requests_4_id : system_cores_0_externalInterrupt_plic_target_requests_5_id) : (_zz_201 ? system_cores_0_externalInterrupt_plic_target_requests_6_id : system_cores_0_externalInterrupt_plic_target_requests_7_id))) : system_cores_0_externalInterrupt_plic_target_requests_8_id);
    system_cores_0_externalInterrupt_plic_target_bestRequest_valid <= (_zz_213 ? _zz_212 : system_cores_0_externalInterrupt_plic_target_requests_8_valid);
    system_cores_0_externalSupervisorInterrupt_plic_target_bestRequest_priority <= (_zz_235 ? _zz_233 : system_cores_0_externalSupervisorInterrupt_plic_target_requests_8_priority);
    system_cores_0_externalSupervisorInterrupt_plic_target_bestRequest_id <= (_zz_235 ? (_zz_232 ? (_zz_226 ? (_zz_214 ? system_cores_0_externalSupervisorInterrupt_plic_target_requests_0_id : system_cores_0_externalSupervisorInterrupt_plic_target_requests_1_id) : (_zz_217 ? system_cores_0_externalSupervisorInterrupt_plic_target_requests_2_id : system_cores_0_externalSupervisorInterrupt_plic_target_requests_3_id)) : (_zz_229 ? (_zz_220 ? system_cores_0_externalSupervisorInterrupt_plic_target_requests_4_id : system_cores_0_externalSupervisorInterrupt_plic_target_requests_5_id) : (_zz_223 ? system_cores_0_externalSupervisorInterrupt_plic_target_requests_6_id : system_cores_0_externalSupervisorInterrupt_plic_target_requests_7_id))) : system_cores_0_externalSupervisorInterrupt_plic_target_requests_8_id);
    system_cores_0_externalSupervisorInterrupt_plic_target_bestRequest_valid <= (_zz_235 ? _zz_234 : system_cores_0_externalSupervisorInterrupt_plic_target_requests_8_valid);
    system_cores_1_externalInterrupt_plic_target_bestRequest_priority <= (_zz_257 ? _zz_255 : system_cores_1_externalInterrupt_plic_target_requests_8_priority);
    system_cores_1_externalInterrupt_plic_target_bestRequest_id <= (_zz_257 ? (_zz_254 ? (_zz_248 ? (_zz_236 ? system_cores_1_externalInterrupt_plic_target_requests_0_id : system_cores_1_externalInterrupt_plic_target_requests_1_id) : (_zz_239 ? system_cores_1_externalInterrupt_plic_target_requests_2_id : system_cores_1_externalInterrupt_plic_target_requests_3_id)) : (_zz_251 ? (_zz_242 ? system_cores_1_externalInterrupt_plic_target_requests_4_id : system_cores_1_externalInterrupt_plic_target_requests_5_id) : (_zz_245 ? system_cores_1_externalInterrupt_plic_target_requests_6_id : system_cores_1_externalInterrupt_plic_target_requests_7_id))) : system_cores_1_externalInterrupt_plic_target_requests_8_id);
    system_cores_1_externalInterrupt_plic_target_bestRequest_valid <= (_zz_257 ? _zz_256 : system_cores_1_externalInterrupt_plic_target_requests_8_valid);
    system_cores_1_externalSupervisorInterrupt_plic_target_bestRequest_priority <= (_zz_279 ? _zz_277 : system_cores_1_externalSupervisorInterrupt_plic_target_requests_8_priority);
    system_cores_1_externalSupervisorInterrupt_plic_target_bestRequest_id <= (_zz_279 ? (_zz_276 ? (_zz_270 ? (_zz_258 ? system_cores_1_externalSupervisorInterrupt_plic_target_requests_0_id : system_cores_1_externalSupervisorInterrupt_plic_target_requests_1_id) : (_zz_261 ? system_cores_1_externalSupervisorInterrupt_plic_target_requests_2_id : system_cores_1_externalSupervisorInterrupt_plic_target_requests_3_id)) : (_zz_273 ? (_zz_264 ? system_cores_1_externalSupervisorInterrupt_plic_target_requests_4_id : system_cores_1_externalSupervisorInterrupt_plic_target_requests_5_id) : (_zz_267 ? system_cores_1_externalSupervisorInterrupt_plic_target_requests_6_id : system_cores_1_externalSupervisorInterrupt_plic_target_requests_7_id))) : system_cores_1_externalSupervisorInterrupt_plic_target_requests_8_id);
    system_cores_1_externalSupervisorInterrupt_plic_target_bestRequest_valid <= (_zz_279 ? _zz_278 : system_cores_1_externalSupervisorInterrupt_plic_target_requests_8_valid);
    if(_zz_475)begin
      system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_rData_last <= system_sdramA0_bmb_arbiter_io_output_cmd_payload_last;
      system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_rData_fragment_source <= system_sdramA0_bmb_arbiter_io_output_cmd_payload_fragment_source;
      system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_rData_fragment_opcode <= system_sdramA0_bmb_arbiter_io_output_cmd_payload_fragment_opcode;
      system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_rData_fragment_address <= system_sdramA0_bmb_arbiter_io_output_cmd_payload_fragment_address;
      system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_rData_fragment_length <= system_sdramA0_bmb_arbiter_io_output_cmd_payload_fragment_length;
      system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_rData_fragment_data <= system_sdramA0_bmb_arbiter_io_output_cmd_payload_fragment_data;
      system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_rData_fragment_mask <= system_sdramA0_bmb_arbiter_io_output_cmd_payload_fragment_mask;
    end
    if(system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_ready)begin
      system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_m2sPipe_rData_last <= system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_payload_last;
      system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_m2sPipe_rData_fragment_source <= system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_payload_fragment_source;
      system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_m2sPipe_rData_fragment_opcode <= system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_payload_fragment_opcode;
      system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_m2sPipe_rData_fragment_address <= system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_payload_fragment_address;
      system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_m2sPipe_rData_fragment_length <= system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_payload_fragment_length;
      system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_m2sPipe_rData_fragment_data <= system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_payload_fragment_data;
      system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_m2sPipe_rData_fragment_mask <= system_sdramA0_bmb_arbiter_io_output_cmd_s2mPipe_payload_fragment_mask;
    end
    if(_zz_367)begin
      _zz_370 <= system_sdramA_logic_io_bmb_0_rsp_payload_last;
      _zz_371 <= system_sdramA_logic_io_bmb_0_rsp_payload_fragment_source;
      _zz_372 <= system_sdramA_logic_io_bmb_0_rsp_payload_fragment_opcode;
      _zz_373 <= system_sdramA_logic_io_bmb_0_rsp_payload_fragment_data;
    end
    if(_zz_476)begin
      system_bmbPeripheral_bmb_cmd_halfPipe_regs_payload_last <= system_bmbPeripheral_bmb_cmd_payload_last;
      system_bmbPeripheral_bmb_cmd_halfPipe_regs_payload_fragment_source <= system_bmbPeripheral_bmb_cmd_payload_fragment_source;
      system_bmbPeripheral_bmb_cmd_halfPipe_regs_payload_fragment_opcode <= system_bmbPeripheral_bmb_cmd_payload_fragment_opcode;
      system_bmbPeripheral_bmb_cmd_halfPipe_regs_payload_fragment_address <= system_bmbPeripheral_bmb_cmd_payload_fragment_address;
      system_bmbPeripheral_bmb_cmd_halfPipe_regs_payload_fragment_length <= system_bmbPeripheral_bmb_cmd_payload_fragment_length;
      system_bmbPeripheral_bmb_cmd_halfPipe_regs_payload_fragment_data <= system_bmbPeripheral_bmb_cmd_payload_fragment_data;
      system_bmbPeripheral_bmb_cmd_halfPipe_regs_payload_fragment_mask <= system_bmbPeripheral_bmb_cmd_payload_fragment_mask;
      system_bmbPeripheral_bmb_cmd_halfPipe_regs_payload_fragment_context <= system_bmbPeripheral_bmb_cmd_payload_fragment_context;
    end
    if(_zz_477)begin
      _zz_378 <= system_bmbPeripheral_bmb_decoder_io_input_rsp_payload_last;
      _zz_379 <= system_bmbPeripheral_bmb_decoder_io_input_rsp_payload_fragment_source;
      _zz_380 <= system_bmbPeripheral_bmb_decoder_io_input_rsp_payload_fragment_opcode;
      _zz_381 <= system_bmbPeripheral_bmb_decoder_io_input_rsp_payload_fragment_data;
      _zz_382 <= system_bmbPeripheral_bmb_decoder_io_input_rsp_payload_fragment_context;
    end
    if(system_fabric_iBus_bmb_cmd_ready)begin
      system_fabric_iBus_bmb_cmd_m2sPipe_rData_last <= system_fabric_iBus_bmb_cmd_payload_last;
      system_fabric_iBus_bmb_cmd_m2sPipe_rData_fragment_source <= system_fabric_iBus_bmb_cmd_payload_fragment_source;
      system_fabric_iBus_bmb_cmd_m2sPipe_rData_fragment_opcode <= system_fabric_iBus_bmb_cmd_payload_fragment_opcode;
      system_fabric_iBus_bmb_cmd_m2sPipe_rData_fragment_address <= system_fabric_iBus_bmb_cmd_payload_fragment_address;
      system_fabric_iBus_bmb_cmd_m2sPipe_rData_fragment_length <= system_fabric_iBus_bmb_cmd_payload_fragment_length;
    end
    if(_zz_478)begin
      system_dma_logic_io_read_cmd_halfPipe_regs_payload_last <= system_dma_logic_io_read_cmd_payload_last;
      system_dma_logic_io_read_cmd_halfPipe_regs_payload_fragment_source <= system_dma_logic_io_read_cmd_payload_fragment_source;
      system_dma_logic_io_read_cmd_halfPipe_regs_payload_fragment_opcode <= system_dma_logic_io_read_cmd_payload_fragment_opcode;
      system_dma_logic_io_read_cmd_halfPipe_regs_payload_fragment_address <= system_dma_logic_io_read_cmd_payload_fragment_address;
      system_dma_logic_io_read_cmd_halfPipe_regs_payload_fragment_length <= system_dma_logic_io_read_cmd_payload_fragment_length;
      system_dma_logic_io_read_cmd_halfPipe_regs_payload_fragment_context <= system_dma_logic_io_read_cmd_payload_fragment_context;
    end
  end

  always @ (posedge clocking_pll_CLKOUT0) begin
    system_cores_0_debugReset <= system_cores_0_logic_cpu_debug_resetOut;
    system_cores_1_debugReset <= system_cores_1_logic_cpu_debug_resetOut;
  end

  always @ (posedge clocking_pll_CLKOUT0) begin
    if(debugCd_logic_outputReset) begin
      _zz_46 <= 1'b0;
      _zz_53 <= 1'b0;
    end else begin
      _zz_46 <= (system_cores_0_debugBmb_cmd_valid && system_cores_0_logic_cpu_debug_bus_cmd_ready);
      _zz_53 <= (system_cores_1_debugBmb_cmd_valid && system_cores_1_logic_cpu_debug_bus_cmd_ready);
    end
  end

  always @ (posedge clocking_pll_CLKOUT5) begin
    macTxInterFrame_1_io_output_payload_fragment_data_regNext <= macTxInterFrame_1_io_output_payload_fragment_data;
    macTxInterFrame_1_io_output_valid_regNext <= macTxInterFrame_1_io_output_valid;
  end

  always @ (posedge clocking_pll_CLKOUT5) begin
    _zz_175 <= _zz_174;
    _zz_176 <= _zz_182;
    _zz_177 <= _zz_173_regNext;
    _zz_178 <= _zz_175;
    _zz_179 <= _zz_176;
    _zz_180 <= _zz_177;
    _zz_173_regNext <= _zz_173;
    _zz_181 <= system_eth_mii_RX_CRS_DV;
    _zz_182 <= system_eth_mii_RX_ER;
  end

  always @ (posedge clocking_pll_CLKOUT6) begin
    system_vgaPhy_vSync <= system_vga_logic_io_vga_vSync;
    system_vgaPhy_hSync <= system_vga_logic_io_vga_hSync;
    system_vgaPhy_color_r <= system_vga_logic_io_vga_color_r;
    system_vgaPhy_color_g <= system_vga_logic_io_vga_color_g;
    system_vgaPhy_color_b <= system_vga_logic_io_vga_color_b;
    if((! system_vga_logic_io_vga_colorEn))begin
      system_vgaPhy_color_r <= 4'b0000;
      system_vgaPhy_color_g <= 4'b0000;
      system_vgaPhy_color_b <= 4'b0000;
    end
  end

  always @ (posedge clocking_pll_CLKOUT1) begin
    if(sdramCd_logic_outputReset) begin
      _zz_327 <= 1'b0;
    end else begin
      if(_zz_325)begin
        _zz_327 <= (sdramDomain_phyA_logic_ctrl_cmd_valid && _zz_324);
      end
    end
  end

  always @ (posedge clocking_pll_CLKOUT1) begin
    if(_zz_325)begin
      _zz_328 <= 1'b1;
      _zz_329 <= sdramDomain_phyA_logic_ctrl_cmd_payload_fragment_source;
      _zz_330 <= 1'b0;
      _zz_331 <= 32'h0;
      _zz_332 <= sdramDomain_phyA_logic_ctrl_cmd_payload_fragment_context;
    end
    _zz_351 <= 1'b0;
    _zz_352 <= 1'b0;
    _zz_353 <= 1'b0;
    _zz_354 <= 1'b0;
    _zz_355 <= 1'b0;
    _zz_356 <= 1'b0;
    _zz_357 <= 1'b0;
    _zz_358 <= 1'b0;
    _zz_359 <= 1'b0;
    _zz_360 <= 1'b0;
    _zz_361 <= 1'b0;
    _zz_362 <= 1'b0;
    _zz_363 <= 1'b0;
    _zz_364 <= 1'b0;
    _zz_365 <= 1'b0;
    _zz_366 <= 1'b0;
    case(sdramDomain_phyA_logic_ctrl_cmd_payload_fragment_address)
      12'h0 : begin
        if(_zz_333)begin
          _zz_334 <= sdramDomain_phyA_logic_ctrl_cmd_payload_fragment_data[4 : 0];
        end
      end
      12'h020 : begin
        if(_zz_333)begin
          _zz_335 <= _zz_518[0];
          _zz_336 <= _zz_519[0];
          _zz_337 <= _zz_520[0];
          _zz_338 <= _zz_521[0];
          _zz_339 <= _zz_522[0];
          _zz_340 <= _zz_523[0];
          _zz_341 <= _zz_524[0];
          _zz_342 <= _zz_525[0];
          _zz_343 <= _zz_526[0];
          _zz_344 <= _zz_527[0];
          _zz_345 <= _zz_528[0];
          _zz_346 <= _zz_529[0];
          _zz_347 <= _zz_530[0];
          _zz_348 <= _zz_531[0];
          _zz_349 <= _zz_532[0];
          _zz_350 <= _zz_533[0];
        end
      end
      12'h040 : begin
        if(_zz_333)begin
          _zz_351 <= _zz_535[0];
          _zz_352 <= _zz_536[0];
          _zz_353 <= _zz_537[0];
          _zz_354 <= _zz_538[0];
          _zz_355 <= _zz_539[0];
          _zz_356 <= _zz_540[0];
          _zz_357 <= _zz_541[0];
          _zz_358 <= _zz_542[0];
          _zz_359 <= _zz_543[0];
          _zz_360 <= _zz_544[0];
          _zz_361 <= _zz_545[0];
          _zz_362 <= _zz_546[0];
          _zz_363 <= _zz_547[0];
          _zz_364 <= _zz_548[0];
          _zz_365 <= _zz_549[0];
          _zz_366 <= _zz_550[0];
        end
      end
      default : begin
      end
    endcase
  end


endmodule

module BmbDecoder_6 (
  input               io_input_cmd_valid,
  output              io_input_cmd_ready,
  input               io_input_cmd_payload_last,
  input      [0:0]    io_input_cmd_payload_fragment_opcode,
  input      [31:0]   io_input_cmd_payload_fragment_address,
  input      [4:0]    io_input_cmd_payload_fragment_length,
  output              io_input_rsp_valid,
  input               io_input_rsp_ready,
  output              io_input_rsp_payload_last,
  output     [0:0]    io_input_rsp_payload_fragment_opcode,
  output     [63:0]   io_input_rsp_payload_fragment_data,
  output              io_outputs_0_cmd_valid,
  input               io_outputs_0_cmd_ready,
  output              io_outputs_0_cmd_payload_last,
  output     [0:0]    io_outputs_0_cmd_payload_fragment_opcode,
  output     [31:0]   io_outputs_0_cmd_payload_fragment_address,
  output     [4:0]    io_outputs_0_cmd_payload_fragment_length,
  input               io_outputs_0_rsp_valid,
  output              io_outputs_0_rsp_ready,
  input               io_outputs_0_rsp_payload_last,
  input      [0:0]    io_outputs_0_rsp_payload_fragment_opcode,
  input      [63:0]   io_outputs_0_rsp_payload_fragment_data
);

  assign io_outputs_0_cmd_valid = io_input_cmd_valid;
  assign io_input_cmd_ready = io_outputs_0_cmd_ready;
  assign io_input_rsp_valid = io_outputs_0_rsp_valid;
  assign io_outputs_0_rsp_ready = io_input_rsp_ready;
  assign io_outputs_0_cmd_payload_last = io_input_cmd_payload_last;
  assign io_input_rsp_payload_last = io_outputs_0_rsp_payload_last;
  assign io_outputs_0_cmd_payload_fragment_opcode = io_input_cmd_payload_fragment_opcode;
  assign io_outputs_0_cmd_payload_fragment_address = io_input_cmd_payload_fragment_address;
  assign io_outputs_0_cmd_payload_fragment_length = io_input_cmd_payload_fragment_length;
  assign io_input_rsp_payload_fragment_opcode = io_outputs_0_rsp_payload_fragment_opcode;
  assign io_input_rsp_payload_fragment_data = io_outputs_0_rsp_payload_fragment_data;

endmodule

module BmbDecoder_5 (
  input               io_input_cmd_valid,
  output              io_input_cmd_ready,
  input               io_input_cmd_payload_last,
  input      [0:0]    io_input_cmd_payload_fragment_source,
  input      [0:0]    io_input_cmd_payload_fragment_opcode,
  input      [31:0]   io_input_cmd_payload_fragment_address,
  input      [5:0]    io_input_cmd_payload_fragment_length,
  input      [13:0]   io_input_cmd_payload_fragment_context,
  output              io_input_rsp_valid,
  input               io_input_rsp_ready,
  output              io_input_rsp_payload_last,
  output     [0:0]    io_input_rsp_payload_fragment_source,
  output     [0:0]    io_input_rsp_payload_fragment_opcode,
  output     [63:0]   io_input_rsp_payload_fragment_data,
  output     [13:0]   io_input_rsp_payload_fragment_context,
  output              io_outputs_0_cmd_valid,
  input               io_outputs_0_cmd_ready,
  output              io_outputs_0_cmd_payload_last,
  output     [0:0]    io_outputs_0_cmd_payload_fragment_source,
  output     [0:0]    io_outputs_0_cmd_payload_fragment_opcode,
  output     [31:0]   io_outputs_0_cmd_payload_fragment_address,
  output     [5:0]    io_outputs_0_cmd_payload_fragment_length,
  output     [13:0]   io_outputs_0_cmd_payload_fragment_context,
  input               io_outputs_0_rsp_valid,
  output              io_outputs_0_rsp_ready,
  input               io_outputs_0_rsp_payload_last,
  input      [0:0]    io_outputs_0_rsp_payload_fragment_source,
  input      [0:0]    io_outputs_0_rsp_payload_fragment_opcode,
  input      [63:0]   io_outputs_0_rsp_payload_fragment_data,
  input      [13:0]   io_outputs_0_rsp_payload_fragment_context
);

  assign io_outputs_0_cmd_valid = io_input_cmd_valid;
  assign io_input_cmd_ready = io_outputs_0_cmd_ready;
  assign io_input_rsp_valid = io_outputs_0_rsp_valid;
  assign io_outputs_0_rsp_ready = io_input_rsp_ready;
  assign io_outputs_0_cmd_payload_last = io_input_cmd_payload_last;
  assign io_input_rsp_payload_last = io_outputs_0_rsp_payload_last;
  assign io_outputs_0_cmd_payload_fragment_source = io_input_cmd_payload_fragment_source;
  assign io_outputs_0_cmd_payload_fragment_opcode = io_input_cmd_payload_fragment_opcode;
  assign io_outputs_0_cmd_payload_fragment_address = io_input_cmd_payload_fragment_address;
  assign io_outputs_0_cmd_payload_fragment_length = io_input_cmd_payload_fragment_length;
  assign io_outputs_0_cmd_payload_fragment_context = io_input_cmd_payload_fragment_context;
  assign io_input_rsp_payload_fragment_source = io_outputs_0_rsp_payload_fragment_source;
  assign io_input_rsp_payload_fragment_opcode = io_outputs_0_rsp_payload_fragment_opcode;
  assign io_input_rsp_payload_fragment_data = io_outputs_0_rsp_payload_fragment_data;
  assign io_input_rsp_payload_fragment_context = io_outputs_0_rsp_payload_fragment_context;

endmodule

module BmbArbiter_4 (
  input               io_inputs_0_cmd_valid,
  output              io_inputs_0_cmd_ready,
  input               io_inputs_0_cmd_payload_last,
  input      [0:0]    io_inputs_0_cmd_payload_fragment_opcode,
  input      [31:0]   io_inputs_0_cmd_payload_fragment_address,
  input      [4:0]    io_inputs_0_cmd_payload_fragment_length,
  input      [63:0]   io_inputs_0_cmd_payload_fragment_data,
  input      [7:0]    io_inputs_0_cmd_payload_fragment_mask,
  output              io_inputs_0_rsp_valid,
  input               io_inputs_0_rsp_ready,
  output              io_inputs_0_rsp_payload_last,
  output     [0:0]    io_inputs_0_rsp_payload_fragment_opcode,
  output     [63:0]   io_inputs_0_rsp_payload_fragment_data,
  input               io_inputs_1_cmd_valid,
  output              io_inputs_1_cmd_ready,
  input               io_inputs_1_cmd_payload_last,
  input      [0:0]    io_inputs_1_cmd_payload_fragment_source,
  input      [0:0]    io_inputs_1_cmd_payload_fragment_opcode,
  input      [31:0]   io_inputs_1_cmd_payload_fragment_address,
  input      [5:0]    io_inputs_1_cmd_payload_fragment_length,
  input      [63:0]   io_inputs_1_cmd_payload_fragment_data,
  input      [7:0]    io_inputs_1_cmd_payload_fragment_mask,
  input      [13:0]   io_inputs_1_cmd_payload_fragment_context,
  output              io_inputs_1_rsp_valid,
  input               io_inputs_1_rsp_ready,
  output              io_inputs_1_rsp_payload_last,
  output     [0:0]    io_inputs_1_rsp_payload_fragment_source,
  output     [0:0]    io_inputs_1_rsp_payload_fragment_opcode,
  output     [63:0]   io_inputs_1_rsp_payload_fragment_data,
  output     [13:0]   io_inputs_1_rsp_payload_fragment_context,
  input               io_inputs_2_cmd_valid,
  output              io_inputs_2_cmd_ready,
  input               io_inputs_2_cmd_payload_last,
  input      [1:0]    io_inputs_2_cmd_payload_fragment_source,
  input      [0:0]    io_inputs_2_cmd_payload_fragment_opcode,
  input      [31:0]   io_inputs_2_cmd_payload_fragment_address,
  input      [5:0]    io_inputs_2_cmd_payload_fragment_length,
  input      [63:0]   io_inputs_2_cmd_payload_fragment_data,
  input      [7:0]    io_inputs_2_cmd_payload_fragment_mask,
  input      [42:0]   io_inputs_2_cmd_payload_fragment_context,
  output              io_inputs_2_rsp_valid,
  input               io_inputs_2_rsp_ready,
  output              io_inputs_2_rsp_payload_last,
  output     [1:0]    io_inputs_2_rsp_payload_fragment_source,
  output     [0:0]    io_inputs_2_rsp_payload_fragment_opcode,
  output     [63:0]   io_inputs_2_rsp_payload_fragment_data,
  output     [42:0]   io_inputs_2_rsp_payload_fragment_context,
  output              io_output_cmd_valid,
  input               io_output_cmd_ready,
  output              io_output_cmd_payload_last,
  output     [3:0]    io_output_cmd_payload_fragment_source,
  output     [0:0]    io_output_cmd_payload_fragment_opcode,
  output     [31:0]   io_output_cmd_payload_fragment_address,
  output     [5:0]    io_output_cmd_payload_fragment_length,
  output     [63:0]   io_output_cmd_payload_fragment_data,
  output     [7:0]    io_output_cmd_payload_fragment_mask,
  output     [42:0]   io_output_cmd_payload_fragment_context,
  input               io_output_rsp_valid,
  output              io_output_rsp_ready,
  input               io_output_rsp_payload_last,
  input      [3:0]    io_output_rsp_payload_fragment_source,
  input      [0:0]    io_output_rsp_payload_fragment_opcode,
  input      [63:0]   io_output_rsp_payload_fragment_data,
  input      [42:0]   io_output_rsp_payload_fragment_context,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  wire       [3:0]    _zz_1;
  wire       [5:0]    _zz_2;
  wire       [42:0]   _zz_3;
  wire       [3:0]    _zz_4;
  wire       [42:0]   _zz_5;
  wire       [3:0]    _zz_6;
  reg                 _zz_7;
  wire                memory_arbiter_io_inputs_0_ready;
  wire                memory_arbiter_io_inputs_1_ready;
  wire                memory_arbiter_io_inputs_2_ready;
  wire                memory_arbiter_io_output_valid;
  wire                memory_arbiter_io_output_payload_last;
  wire       [3:0]    memory_arbiter_io_output_payload_fragment_source;
  wire       [0:0]    memory_arbiter_io_output_payload_fragment_opcode;
  wire       [31:0]   memory_arbiter_io_output_payload_fragment_address;
  wire       [5:0]    memory_arbiter_io_output_payload_fragment_length;
  wire       [63:0]   memory_arbiter_io_output_payload_fragment_data;
  wire       [7:0]    memory_arbiter_io_output_payload_fragment_mask;
  wire       [42:0]   memory_arbiter_io_output_payload_fragment_context;
  wire       [1:0]    memory_arbiter_io_chosen;
  wire       [2:0]    memory_arbiter_io_chosenOH;
  wire       [5:0]    _zz_8;
  wire       [1:0]    _zz_9;
  wire       [1:0]    memory_rspSel;

  assign _zz_8 = {memory_arbiter_io_output_payload_fragment_source,memory_arbiter_io_chosen};
  assign _zz_9 = (io_output_rsp_payload_fragment_source >>> 2);
  StreamArbiter_7 memory_arbiter (
    .io_inputs_0_valid                       (io_inputs_0_cmd_valid                                    ), //i
    .io_inputs_0_ready                       (memory_arbiter_io_inputs_0_ready                         ), //o
    .io_inputs_0_payload_last                (io_inputs_0_cmd_payload_last                             ), //i
    .io_inputs_0_payload_fragment_source     (_zz_1[3:0]                                               ), //i
    .io_inputs_0_payload_fragment_opcode     (io_inputs_0_cmd_payload_fragment_opcode                  ), //i
    .io_inputs_0_payload_fragment_address    (io_inputs_0_cmd_payload_fragment_address[31:0]           ), //i
    .io_inputs_0_payload_fragment_length     (_zz_2[5:0]                                               ), //i
    .io_inputs_0_payload_fragment_data       (io_inputs_0_cmd_payload_fragment_data[63:0]              ), //i
    .io_inputs_0_payload_fragment_mask       (io_inputs_0_cmd_payload_fragment_mask[7:0]               ), //i
    .io_inputs_0_payload_fragment_context    (_zz_3[42:0]                                              ), //i
    .io_inputs_1_valid                       (io_inputs_1_cmd_valid                                    ), //i
    .io_inputs_1_ready                       (memory_arbiter_io_inputs_1_ready                         ), //o
    .io_inputs_1_payload_last                (io_inputs_1_cmd_payload_last                             ), //i
    .io_inputs_1_payload_fragment_source     (_zz_4[3:0]                                               ), //i
    .io_inputs_1_payload_fragment_opcode     (io_inputs_1_cmd_payload_fragment_opcode                  ), //i
    .io_inputs_1_payload_fragment_address    (io_inputs_1_cmd_payload_fragment_address[31:0]           ), //i
    .io_inputs_1_payload_fragment_length     (io_inputs_1_cmd_payload_fragment_length[5:0]             ), //i
    .io_inputs_1_payload_fragment_data       (io_inputs_1_cmd_payload_fragment_data[63:0]              ), //i
    .io_inputs_1_payload_fragment_mask       (io_inputs_1_cmd_payload_fragment_mask[7:0]               ), //i
    .io_inputs_1_payload_fragment_context    (_zz_5[42:0]                                              ), //i
    .io_inputs_2_valid                       (io_inputs_2_cmd_valid                                    ), //i
    .io_inputs_2_ready                       (memory_arbiter_io_inputs_2_ready                         ), //o
    .io_inputs_2_payload_last                (io_inputs_2_cmd_payload_last                             ), //i
    .io_inputs_2_payload_fragment_source     (_zz_6[3:0]                                               ), //i
    .io_inputs_2_payload_fragment_opcode     (io_inputs_2_cmd_payload_fragment_opcode                  ), //i
    .io_inputs_2_payload_fragment_address    (io_inputs_2_cmd_payload_fragment_address[31:0]           ), //i
    .io_inputs_2_payload_fragment_length     (io_inputs_2_cmd_payload_fragment_length[5:0]             ), //i
    .io_inputs_2_payload_fragment_data       (io_inputs_2_cmd_payload_fragment_data[63:0]              ), //i
    .io_inputs_2_payload_fragment_mask       (io_inputs_2_cmd_payload_fragment_mask[7:0]               ), //i
    .io_inputs_2_payload_fragment_context    (io_inputs_2_cmd_payload_fragment_context[42:0]           ), //i
    .io_output_valid                         (memory_arbiter_io_output_valid                           ), //o
    .io_output_ready                         (io_output_cmd_ready                                      ), //i
    .io_output_payload_last                  (memory_arbiter_io_output_payload_last                    ), //o
    .io_output_payload_fragment_source       (memory_arbiter_io_output_payload_fragment_source[3:0]    ), //o
    .io_output_payload_fragment_opcode       (memory_arbiter_io_output_payload_fragment_opcode         ), //o
    .io_output_payload_fragment_address      (memory_arbiter_io_output_payload_fragment_address[31:0]  ), //o
    .io_output_payload_fragment_length       (memory_arbiter_io_output_payload_fragment_length[5:0]    ), //o
    .io_output_payload_fragment_data         (memory_arbiter_io_output_payload_fragment_data[63:0]     ), //o
    .io_output_payload_fragment_mask         (memory_arbiter_io_output_payload_fragment_mask[7:0]      ), //o
    .io_output_payload_fragment_context      (memory_arbiter_io_output_payload_fragment_context[42:0]  ), //o
    .io_chosen                               (memory_arbiter_io_chosen[1:0]                            ), //o
    .io_chosenOH                             (memory_arbiter_io_chosenOH[2:0]                          ), //o
    .CLKOUT0                                 (CLKOUT0                                                  ), //i
    .systemCd_logic_outputReset              (systemCd_logic_outputReset                               )  //i
  );
  always @(*) begin
    case(memory_rspSel)
      2'b00 : begin
        _zz_7 = io_inputs_0_rsp_ready;
      end
      2'b01 : begin
        _zz_7 = io_inputs_1_rsp_ready;
      end
      default : begin
        _zz_7 = io_inputs_2_rsp_ready;
      end
    endcase
  end

  assign io_inputs_0_cmd_ready = memory_arbiter_io_inputs_0_ready;
  assign _zz_1 = 4'b0000;
  assign _zz_2 = {1'd0, io_inputs_0_cmd_payload_fragment_length};
  assign _zz_3 = 43'h0;
  assign io_inputs_1_cmd_ready = memory_arbiter_io_inputs_1_ready;
  assign _zz_4 = {3'd0, io_inputs_1_cmd_payload_fragment_source};
  assign _zz_5 = {29'd0, io_inputs_1_cmd_payload_fragment_context};
  assign io_inputs_2_cmd_ready = memory_arbiter_io_inputs_2_ready;
  assign _zz_6 = {2'd0, io_inputs_2_cmd_payload_fragment_source};
  assign io_output_cmd_valid = memory_arbiter_io_output_valid;
  assign io_output_cmd_payload_last = memory_arbiter_io_output_payload_last;
  assign io_output_cmd_payload_fragment_opcode = memory_arbiter_io_output_payload_fragment_opcode;
  assign io_output_cmd_payload_fragment_address = memory_arbiter_io_output_payload_fragment_address;
  assign io_output_cmd_payload_fragment_length = memory_arbiter_io_output_payload_fragment_length;
  assign io_output_cmd_payload_fragment_data = memory_arbiter_io_output_payload_fragment_data;
  assign io_output_cmd_payload_fragment_mask = memory_arbiter_io_output_payload_fragment_mask;
  assign io_output_cmd_payload_fragment_context = memory_arbiter_io_output_payload_fragment_context;
  assign io_output_cmd_payload_fragment_source = _zz_8[3:0];
  assign memory_rspSel = io_output_rsp_payload_fragment_source[1 : 0];
  assign io_inputs_0_rsp_valid = (io_output_rsp_valid && (memory_rspSel == 2'b00));
  assign io_inputs_0_rsp_payload_last = io_output_rsp_payload_last;
  assign io_inputs_0_rsp_payload_fragment_opcode = io_output_rsp_payload_fragment_opcode;
  assign io_inputs_0_rsp_payload_fragment_data = io_output_rsp_payload_fragment_data;
  assign io_inputs_1_rsp_valid = (io_output_rsp_valid && (memory_rspSel == 2'b01));
  assign io_inputs_1_rsp_payload_last = io_output_rsp_payload_last;
  assign io_inputs_1_rsp_payload_fragment_opcode = io_output_rsp_payload_fragment_opcode;
  assign io_inputs_1_rsp_payload_fragment_data = io_output_rsp_payload_fragment_data;
  assign io_inputs_1_rsp_payload_fragment_context = io_output_rsp_payload_fragment_context[13:0];
  assign io_inputs_1_rsp_payload_fragment_source = _zz_9[0:0];
  assign io_inputs_2_rsp_valid = (io_output_rsp_valid && (memory_rspSel == 2'b10));
  assign io_inputs_2_rsp_payload_last = io_output_rsp_payload_last;
  assign io_inputs_2_rsp_payload_fragment_opcode = io_output_rsp_payload_fragment_opcode;
  assign io_inputs_2_rsp_payload_fragment_data = io_output_rsp_payload_fragment_data;
  assign io_inputs_2_rsp_payload_fragment_context = io_output_rsp_payload_fragment_context;
  assign io_inputs_2_rsp_payload_fragment_source = (io_output_rsp_payload_fragment_source >>> 2);
  assign io_output_rsp_ready = _zz_7;

endmodule

module BmbArbiter_3 (
  input               io_inputs_0_cmd_valid,
  output              io_inputs_0_cmd_ready,
  input               io_inputs_0_cmd_payload_last,
  input      [0:0]    io_inputs_0_cmd_payload_fragment_opcode,
  input      [31:0]   io_inputs_0_cmd_payload_fragment_address,
  input      [5:0]    io_inputs_0_cmd_payload_fragment_length,
  output              io_inputs_0_rsp_valid,
  input               io_inputs_0_rsp_ready,
  output              io_inputs_0_rsp_payload_last,
  output     [0:0]    io_inputs_0_rsp_payload_fragment_opcode,
  output     [63:0]   io_inputs_0_rsp_payload_fragment_data,
  input               io_inputs_1_cmd_valid,
  output              io_inputs_1_cmd_ready,
  input               io_inputs_1_cmd_payload_last,
  input      [0:0]    io_inputs_1_cmd_payload_fragment_opcode,
  input      [31:0]   io_inputs_1_cmd_payload_fragment_address,
  input      [5:0]    io_inputs_1_cmd_payload_fragment_length,
  output              io_inputs_1_rsp_valid,
  input               io_inputs_1_rsp_ready,
  output              io_inputs_1_rsp_payload_last,
  output     [0:0]    io_inputs_1_rsp_payload_fragment_opcode,
  output     [63:0]   io_inputs_1_rsp_payload_fragment_data,
  output              io_output_cmd_valid,
  input               io_output_cmd_ready,
  output              io_output_cmd_payload_last,
  output     [0:0]    io_output_cmd_payload_fragment_source,
  output     [0:0]    io_output_cmd_payload_fragment_opcode,
  output     [31:0]   io_output_cmd_payload_fragment_address,
  output     [5:0]    io_output_cmd_payload_fragment_length,
  input               io_output_rsp_valid,
  output              io_output_rsp_ready,
  input               io_output_rsp_payload_last,
  input      [0:0]    io_output_rsp_payload_fragment_source,
  input      [0:0]    io_output_rsp_payload_fragment_opcode,
  input      [63:0]   io_output_rsp_payload_fragment_data,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  wire       [0:0]    _zz_1;
  wire       [0:0]    _zz_2;
  reg                 _zz_3;
  wire                memory_arbiter_io_inputs_0_ready;
  wire                memory_arbiter_io_inputs_1_ready;
  wire                memory_arbiter_io_output_valid;
  wire                memory_arbiter_io_output_payload_last;
  wire       [0:0]    memory_arbiter_io_output_payload_fragment_source;
  wire       [0:0]    memory_arbiter_io_output_payload_fragment_opcode;
  wire       [31:0]   memory_arbiter_io_output_payload_fragment_address;
  wire       [5:0]    memory_arbiter_io_output_payload_fragment_length;
  wire       [0:0]    memory_arbiter_io_chosen;
  wire       [1:0]    memory_arbiter_io_chosenOH;
  wire       [1:0]    _zz_4;
  wire       [0:0]    memory_rspSel;

  assign _zz_4 = {memory_arbiter_io_output_payload_fragment_source,memory_arbiter_io_chosen};
  StreamArbiter_6 memory_arbiter (
    .io_inputs_0_valid                       (io_inputs_0_cmd_valid                                    ), //i
    .io_inputs_0_ready                       (memory_arbiter_io_inputs_0_ready                         ), //o
    .io_inputs_0_payload_last                (io_inputs_0_cmd_payload_last                             ), //i
    .io_inputs_0_payload_fragment_source     (_zz_1                                                    ), //i
    .io_inputs_0_payload_fragment_opcode     (io_inputs_0_cmd_payload_fragment_opcode                  ), //i
    .io_inputs_0_payload_fragment_address    (io_inputs_0_cmd_payload_fragment_address[31:0]           ), //i
    .io_inputs_0_payload_fragment_length     (io_inputs_0_cmd_payload_fragment_length[5:0]             ), //i
    .io_inputs_1_valid                       (io_inputs_1_cmd_valid                                    ), //i
    .io_inputs_1_ready                       (memory_arbiter_io_inputs_1_ready                         ), //o
    .io_inputs_1_payload_last                (io_inputs_1_cmd_payload_last                             ), //i
    .io_inputs_1_payload_fragment_source     (_zz_2                                                    ), //i
    .io_inputs_1_payload_fragment_opcode     (io_inputs_1_cmd_payload_fragment_opcode                  ), //i
    .io_inputs_1_payload_fragment_address    (io_inputs_1_cmd_payload_fragment_address[31:0]           ), //i
    .io_inputs_1_payload_fragment_length     (io_inputs_1_cmd_payload_fragment_length[5:0]             ), //i
    .io_output_valid                         (memory_arbiter_io_output_valid                           ), //o
    .io_output_ready                         (io_output_cmd_ready                                      ), //i
    .io_output_payload_last                  (memory_arbiter_io_output_payload_last                    ), //o
    .io_output_payload_fragment_source       (memory_arbiter_io_output_payload_fragment_source         ), //o
    .io_output_payload_fragment_opcode       (memory_arbiter_io_output_payload_fragment_opcode         ), //o
    .io_output_payload_fragment_address      (memory_arbiter_io_output_payload_fragment_address[31:0]  ), //o
    .io_output_payload_fragment_length       (memory_arbiter_io_output_payload_fragment_length[5:0]    ), //o
    .io_chosen                               (memory_arbiter_io_chosen                                 ), //o
    .io_chosenOH                             (memory_arbiter_io_chosenOH[1:0]                          ), //o
    .CLKOUT0                                 (CLKOUT0                                                  ), //i
    .systemCd_logic_outputReset              (systemCd_logic_outputReset                               )  //i
  );
  always @(*) begin
    case(memory_rspSel)
      1'b0 : begin
        _zz_3 = io_inputs_0_rsp_ready;
      end
      default : begin
        _zz_3 = io_inputs_1_rsp_ready;
      end
    endcase
  end

  assign io_inputs_0_cmd_ready = memory_arbiter_io_inputs_0_ready;
  assign _zz_1 = 1'b0;
  assign io_inputs_1_cmd_ready = memory_arbiter_io_inputs_1_ready;
  assign _zz_2 = 1'b0;
  assign io_output_cmd_valid = memory_arbiter_io_output_valid;
  assign io_output_cmd_payload_last = memory_arbiter_io_output_payload_last;
  assign io_output_cmd_payload_fragment_opcode = memory_arbiter_io_output_payload_fragment_opcode;
  assign io_output_cmd_payload_fragment_address = memory_arbiter_io_output_payload_fragment_address;
  assign io_output_cmd_payload_fragment_length = memory_arbiter_io_output_payload_fragment_length;
  assign io_output_cmd_payload_fragment_source = _zz_4[0:0];
  assign memory_rspSel = io_output_rsp_payload_fragment_source[0 : 0];
  assign io_inputs_0_rsp_valid = (io_output_rsp_valid && (memory_rspSel == 1'b0));
  assign io_inputs_0_rsp_payload_last = io_output_rsp_payload_last;
  assign io_inputs_0_rsp_payload_fragment_opcode = io_output_rsp_payload_fragment_opcode;
  assign io_inputs_0_rsp_payload_fragment_data = io_output_rsp_payload_fragment_data;
  assign io_inputs_1_rsp_valid = (io_output_rsp_valid && (memory_rspSel == 1'b1));
  assign io_inputs_1_rsp_payload_last = io_output_rsp_payload_last;
  assign io_inputs_1_rsp_payload_fragment_opcode = io_output_rsp_payload_fragment_opcode;
  assign io_inputs_1_rsp_payload_fragment_data = io_output_rsp_payload_fragment_data;
  assign io_output_rsp_ready = _zz_3;

endmodule

module BmbUnburstify_1 (
  input               io_input_cmd_valid,
  output reg          io_input_cmd_ready,
  input               io_input_cmd_payload_last,
  input      [3:0]    io_input_cmd_payload_fragment_source,
  input      [0:0]    io_input_cmd_payload_fragment_opcode,
  input      [31:0]   io_input_cmd_payload_fragment_address,
  input      [5:0]    io_input_cmd_payload_fragment_length,
  input      [31:0]   io_input_cmd_payload_fragment_data,
  input      [3:0]    io_input_cmd_payload_fragment_mask,
  input      [0:0]    io_input_cmd_payload_fragment_context,
  output              io_input_rsp_valid,
  input               io_input_rsp_ready,
  output              io_input_rsp_payload_last,
  output     [3:0]    io_input_rsp_payload_fragment_source,
  output     [0:0]    io_input_rsp_payload_fragment_opcode,
  output     [31:0]   io_input_rsp_payload_fragment_data,
  output     [0:0]    io_input_rsp_payload_fragment_context,
  output reg          io_output_cmd_valid,
  input               io_output_cmd_ready,
  output              io_output_cmd_payload_last,
  output reg [0:0]    io_output_cmd_payload_fragment_opcode,
  output reg [31:0]   io_output_cmd_payload_fragment_address,
  output reg [1:0]    io_output_cmd_payload_fragment_length,
  output     [31:0]   io_output_cmd_payload_fragment_data,
  output     [3:0]    io_output_cmd_payload_fragment_mask,
  output     [6:0]    io_output_cmd_payload_fragment_context,
  input               io_output_rsp_valid,
  output reg          io_output_rsp_ready,
  input               io_output_rsp_payload_last,
  input      [0:0]    io_output_rsp_payload_fragment_opcode,
  input      [31:0]   io_output_rsp_payload_fragment_data,
  input      [6:0]    io_output_rsp_payload_fragment_context,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  wire                _zz_2;
  wire                _zz_3;
  wire       [11:0]   _zz_4;
  wire       [11:0]   _zz_5;
  wire       [11:0]   _zz_6;
  wire       [6:0]    _zz_7;
  wire       [1:0]    _zz_8;
  wire       [6:0]    _zz_9;
  wire       [0:0]    _zz_10;
  wire       [0:0]    _zz_11;
  wire                doResult;
  reg                 buffer_valid;
  reg        [0:0]    buffer_opcode;
  reg        [3:0]    buffer_source;
  reg        [31:0]   buffer_address;
  reg        [0:0]    buffer_context;
  reg        [4:0]    buffer_beat;
  wire                buffer_last;
  wire       [31:0]   buffer_addressIncr;
  wire                buffer_isWrite;
  wire       [4:0]    cmdTransferBeatCount;
  wire                requireBuffer;
  reg                 cmdContext_drop;
  reg                 cmdContext_last;
  reg        [3:0]    cmdContext_source;
  reg        [0:0]    cmdContext_context;
  wire                rspContext_drop;
  wire                rspContext_last;
  wire       [3:0]    rspContext_source;
  wire       [0:0]    rspContext_context;
  wire       [6:0]    _zz_1;
  reg                 io_output_rsp_thrown_valid;
  wire                io_output_rsp_thrown_ready;
  wire                io_output_rsp_thrown_payload_last;
  wire       [0:0]    io_output_rsp_thrown_payload_fragment_opcode;
  wire       [31:0]   io_output_rsp_thrown_payload_fragment_data;
  wire       [6:0]    io_output_rsp_thrown_payload_fragment_context;

  assign _zz_2 = (! (rspContext_last || (! rspContext_drop)));
  assign _zz_3 = (io_output_cmd_valid && io_output_cmd_ready);
  assign _zz_4 = (_zz_6 + 12'h004);
  assign _zz_5 = buffer_address[11 : 0];
  assign _zz_6 = _zz_5;
  assign _zz_7 = ({1'b0,io_input_cmd_payload_fragment_length} + _zz_9);
  assign _zz_8 = io_input_cmd_payload_fragment_address[1 : 0];
  assign _zz_9 = {5'd0, _zz_8};
  assign _zz_10 = _zz_1[0 : 0];
  assign _zz_11 = _zz_1[1 : 1];
  assign buffer_last = (buffer_beat == 5'h01);
  assign buffer_addressIncr = {buffer_address[31 : 12],(_zz_4 & (~ 12'h003))};
  assign buffer_isWrite = (buffer_opcode == 1'b1);
  assign cmdTransferBeatCount = _zz_7[6 : 2];
  assign requireBuffer = (cmdTransferBeatCount != 5'h0);
  assign io_output_cmd_payload_fragment_data = io_input_cmd_payload_fragment_data;
  assign io_output_cmd_payload_fragment_mask = io_input_cmd_payload_fragment_mask;
  assign io_output_cmd_payload_last = 1'b1;
  assign io_output_cmd_payload_fragment_context = {cmdContext_context,{cmdContext_source,{cmdContext_last,cmdContext_drop}}};
  always @ (*) begin
    if(buffer_valid)begin
      io_output_cmd_payload_fragment_address = buffer_addressIncr;
    end else begin
      io_output_cmd_payload_fragment_address = io_input_cmd_payload_fragment_address;
      if(requireBuffer)begin
        io_output_cmd_payload_fragment_address[1 : 0] = 2'b00;
      end
    end
  end

  always @ (*) begin
    if(buffer_valid)begin
      io_output_cmd_payload_fragment_opcode = buffer_opcode;
    end else begin
      io_output_cmd_payload_fragment_opcode = io_input_cmd_payload_fragment_opcode;
    end
  end

  always @ (*) begin
    if(buffer_valid)begin
      io_output_cmd_payload_fragment_length = 2'b11;
    end else begin
      if(requireBuffer)begin
        io_output_cmd_payload_fragment_length = 2'b11;
      end else begin
        io_output_cmd_payload_fragment_length = io_input_cmd_payload_fragment_length[1:0];
      end
    end
  end

  always @ (*) begin
    if(buffer_valid)begin
      cmdContext_context = buffer_context;
    end else begin
      cmdContext_context = io_input_cmd_payload_fragment_context;
    end
  end

  always @ (*) begin
    if(buffer_valid)begin
      cmdContext_source = buffer_source;
    end else begin
      cmdContext_source = io_input_cmd_payload_fragment_source;
    end
  end

  always @ (*) begin
    io_input_cmd_ready = 1'b0;
    if(buffer_valid)begin
      io_input_cmd_ready = (buffer_isWrite && io_output_cmd_ready);
    end else begin
      io_input_cmd_ready = io_output_cmd_ready;
    end
  end

  always @ (*) begin
    if(buffer_valid)begin
      io_output_cmd_valid = (! (buffer_isWrite && (! io_input_cmd_valid)));
    end else begin
      io_output_cmd_valid = io_input_cmd_valid;
    end
  end

  always @ (*) begin
    if(buffer_valid)begin
      cmdContext_last = buffer_last;
    end else begin
      cmdContext_last = (! requireBuffer);
    end
  end

  always @ (*) begin
    if(buffer_valid)begin
      cmdContext_drop = buffer_isWrite;
    end else begin
      cmdContext_drop = (io_input_cmd_payload_fragment_opcode == 1'b1);
    end
  end

  assign _zz_1 = io_output_rsp_payload_fragment_context;
  assign rspContext_drop = _zz_10[0];
  assign rspContext_last = _zz_11[0];
  assign rspContext_source = _zz_1[5 : 2];
  assign rspContext_context = _zz_1[6 : 6];
  always @ (*) begin
    io_output_rsp_thrown_valid = io_output_rsp_valid;
    if(_zz_2)begin
      io_output_rsp_thrown_valid = 1'b0;
    end
  end

  always @ (*) begin
    io_output_rsp_ready = io_output_rsp_thrown_ready;
    if(_zz_2)begin
      io_output_rsp_ready = 1'b1;
    end
  end

  assign io_output_rsp_thrown_payload_last = io_output_rsp_payload_last;
  assign io_output_rsp_thrown_payload_fragment_opcode = io_output_rsp_payload_fragment_opcode;
  assign io_output_rsp_thrown_payload_fragment_data = io_output_rsp_payload_fragment_data;
  assign io_output_rsp_thrown_payload_fragment_context = io_output_rsp_payload_fragment_context;
  assign io_input_rsp_valid = io_output_rsp_thrown_valid;
  assign io_output_rsp_thrown_ready = io_input_rsp_ready;
  assign io_input_rsp_payload_last = rspContext_last;
  assign io_input_rsp_payload_fragment_source = rspContext_source;
  assign io_input_rsp_payload_fragment_opcode = io_output_rsp_payload_fragment_opcode;
  assign io_input_rsp_payload_fragment_data = io_output_rsp_payload_fragment_data;
  assign io_input_rsp_payload_fragment_context = rspContext_context;
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      buffer_valid <= 1'b0;
    end else begin
      if(_zz_3)begin
        if(buffer_last)begin
          buffer_valid <= 1'b0;
        end
      end
      if(! buffer_valid) begin
        buffer_valid <= (requireBuffer && (io_output_cmd_valid && io_output_cmd_ready));
      end
    end
  end

  always @ (posedge CLKOUT0) begin
    if(_zz_3)begin
      buffer_beat <= (buffer_beat - 5'h01);
      buffer_address[11 : 0] <= buffer_addressIncr[11 : 0];
    end
    if(! buffer_valid) begin
      buffer_opcode <= io_input_cmd_payload_fragment_opcode;
      buffer_source <= io_input_cmd_payload_fragment_source;
      buffer_address <= io_input_cmd_payload_fragment_address;
      buffer_context <= io_input_cmd_payload_fragment_context;
      buffer_beat <= cmdTransferBeatCount;
    end
  end


endmodule

module BmbDownSizerBridge_1 (
  input               io_input_cmd_valid,
  output              io_input_cmd_ready,
  input               io_input_cmd_payload_last,
  input      [3:0]    io_input_cmd_payload_fragment_source,
  input      [0:0]    io_input_cmd_payload_fragment_opcode,
  input      [31:0]   io_input_cmd_payload_fragment_address,
  input      [5:0]    io_input_cmd_payload_fragment_length,
  input      [63:0]   io_input_cmd_payload_fragment_data,
  input      [7:0]    io_input_cmd_payload_fragment_mask,
  output              io_input_rsp_valid,
  input               io_input_rsp_ready,
  output              io_input_rsp_payload_last,
  output     [3:0]    io_input_rsp_payload_fragment_source,
  output     [0:0]    io_input_rsp_payload_fragment_opcode,
  output     [63:0]   io_input_rsp_payload_fragment_data,
  output              io_output_cmd_valid,
  input               io_output_cmd_ready,
  output              io_output_cmd_payload_last,
  output     [3:0]    io_output_cmd_payload_fragment_source,
  output     [0:0]    io_output_cmd_payload_fragment_opcode,
  output     [31:0]   io_output_cmd_payload_fragment_address,
  output     [5:0]    io_output_cmd_payload_fragment_length,
  output     [31:0]   io_output_cmd_payload_fragment_data,
  output     [3:0]    io_output_cmd_payload_fragment_mask,
  output     [0:0]    io_output_cmd_payload_fragment_context,
  input               io_output_rsp_valid,
  output              io_output_rsp_ready,
  input               io_output_rsp_payload_last,
  input      [3:0]    io_output_rsp_payload_fragment_source,
  input      [0:0]    io_output_rsp_payload_fragment_opcode,
  input      [31:0]   io_output_rsp_payload_fragment_data,
  input      [0:0]    io_output_rsp_payload_fragment_context,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  reg        [31:0]   _zz_1;
  reg        [3:0]    _zz_2;
  wire       [31:0]   _zz_3;
  wire       [31:0]   _zz_4;
  wire       [0:0]    cmdArea_context_sel;
  reg                 cmdArea_writeLogic_locked;
  reg        [0:0]    cmdArea_writeLogic_counter;
  wire       [0:0]    cmdArea_writeLogic_sel;
  wire       [0:0]    rspArea_context_sel;
  reg                 rspArea_readLogic_locked;
  reg        [0:0]    rspArea_readLogic_counter;
  wire       [0:0]    rspArea_readLogic_sel;
  reg        [31:0]   rspArea_readLogic_buffers_0;
  reg        [31:0]   rspArea_readLogic_words_0;
  wire       [31:0]   rspArea_readLogic_words_1;

  assign _zz_3 = (io_input_cmd_payload_fragment_address + _zz_4);
  assign _zz_4 = {26'd0, io_input_cmd_payload_fragment_length};
  always @(*) begin
    case(cmdArea_writeLogic_sel)
      1'b0 : begin
        _zz_1 = io_input_cmd_payload_fragment_data[31 : 0];
        _zz_2 = io_input_cmd_payload_fragment_mask[3 : 0];
      end
      default : begin
        _zz_1 = io_input_cmd_payload_fragment_data[63 : 32];
        _zz_2 = io_input_cmd_payload_fragment_mask[7 : 4];
      end
    endcase
  end

  assign cmdArea_context_sel = io_input_cmd_payload_fragment_address[2 : 2];
  assign io_output_cmd_valid = io_input_cmd_valid;
  assign io_output_cmd_payload_fragment_opcode = io_input_cmd_payload_fragment_opcode;
  assign io_output_cmd_payload_fragment_address = io_input_cmd_payload_fragment_address;
  assign io_output_cmd_payload_fragment_length = io_input_cmd_payload_fragment_length;
  assign io_output_cmd_payload_fragment_source = io_input_cmd_payload_fragment_source;
  assign io_output_cmd_payload_fragment_context = cmdArea_context_sel;
  assign cmdArea_writeLogic_sel = (cmdArea_writeLogic_locked ? cmdArea_writeLogic_counter : io_input_cmd_payload_fragment_address[2 : 2]);
  assign io_output_cmd_payload_fragment_data = _zz_1;
  assign io_output_cmd_payload_fragment_mask = _zz_2;
  assign io_output_cmd_payload_last = (io_input_cmd_payload_last && ((io_input_cmd_payload_fragment_opcode == 1'b0) || (cmdArea_writeLogic_sel == _zz_3[2 : 2])));
  assign io_input_cmd_ready = (io_output_cmd_ready && ((cmdArea_writeLogic_sel == 1'b1) || io_output_cmd_payload_last));
  assign rspArea_context_sel = io_output_rsp_payload_fragment_context[0 : 0];
  assign io_input_rsp_payload_last = io_output_rsp_payload_last;
  assign io_input_rsp_payload_fragment_opcode = io_output_rsp_payload_fragment_opcode;
  assign io_input_rsp_payload_fragment_source = io_output_rsp_payload_fragment_source;
  assign io_output_rsp_ready = io_input_rsp_ready;
  assign rspArea_readLogic_sel = (rspArea_readLogic_locked ? rspArea_readLogic_counter : rspArea_context_sel);
  always @ (*) begin
    rspArea_readLogic_words_0 = rspArea_readLogic_buffers_0;
    if((io_input_rsp_payload_last && (rspArea_readLogic_sel == 1'b0)))begin
      rspArea_readLogic_words_0 = io_output_rsp_payload_fragment_data;
    end
  end

  assign rspArea_readLogic_words_1 = io_output_rsp_payload_fragment_data;
  assign io_input_rsp_valid = (io_output_rsp_valid && (io_output_rsp_payload_last || (rspArea_readLogic_sel == 1'b1)));
  assign io_input_rsp_payload_fragment_data = {rspArea_readLogic_words_1,rspArea_readLogic_words_0};
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      cmdArea_writeLogic_locked <= 1'b0;
      rspArea_readLogic_locked <= 1'b0;
    end else begin
      if((io_output_cmd_valid && io_output_cmd_ready))begin
        cmdArea_writeLogic_locked <= (! io_output_cmd_payload_last);
      end
      if((io_output_rsp_valid && io_output_rsp_ready))begin
        rspArea_readLogic_locked <= (! io_output_rsp_payload_last);
      end
    end
  end

  always @ (posedge CLKOUT0) begin
    if((io_output_cmd_valid && io_output_cmd_ready))begin
      cmdArea_writeLogic_counter <= (cmdArea_writeLogic_sel + 1'b1);
    end
    if((io_output_rsp_valid && io_output_rsp_ready))begin
      rspArea_readLogic_counter <= (rspArea_readLogic_sel + 1'b1);
      if((rspArea_readLogic_sel == 1'b0))begin
        rspArea_readLogic_buffers_0 <= io_output_rsp_payload_fragment_data;
      end
    end
  end


endmodule

module BmbUnburstify (
  input               io_input_cmd_valid,
  output reg          io_input_cmd_ready,
  input               io_input_cmd_payload_last,
  input      [0:0]    io_input_cmd_payload_fragment_source,
  input      [0:0]    io_input_cmd_payload_fragment_opcode,
  input      [31:0]   io_input_cmd_payload_fragment_address,
  input      [5:0]    io_input_cmd_payload_fragment_length,
  input      [0:0]    io_input_cmd_payload_fragment_context,
  output              io_input_rsp_valid,
  input               io_input_rsp_ready,
  output              io_input_rsp_payload_last,
  output     [0:0]    io_input_rsp_payload_fragment_source,
  output     [0:0]    io_input_rsp_payload_fragment_opcode,
  output     [31:0]   io_input_rsp_payload_fragment_data,
  output     [0:0]    io_input_rsp_payload_fragment_context,
  output reg          io_output_cmd_valid,
  input               io_output_cmd_ready,
  output              io_output_cmd_payload_last,
  output reg [0:0]    io_output_cmd_payload_fragment_opcode,
  output reg [31:0]   io_output_cmd_payload_fragment_address,
  output reg [1:0]    io_output_cmd_payload_fragment_length,
  output     [3:0]    io_output_cmd_payload_fragment_context,
  input               io_output_rsp_valid,
  output reg          io_output_rsp_ready,
  input               io_output_rsp_payload_last,
  input      [0:0]    io_output_rsp_payload_fragment_opcode,
  input      [31:0]   io_output_rsp_payload_fragment_data,
  input      [3:0]    io_output_rsp_payload_fragment_context,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  wire                _zz_2;
  wire                _zz_3;
  wire       [11:0]   _zz_4;
  wire       [11:0]   _zz_5;
  wire       [11:0]   _zz_6;
  wire       [0:0]    _zz_7;
  wire       [0:0]    _zz_8;
  wire                doResult;
  reg                 buffer_valid;
  reg        [0:0]    buffer_opcode;
  reg        [0:0]    buffer_source;
  reg        [31:0]   buffer_address;
  reg        [0:0]    buffer_context;
  reg        [3:0]    buffer_beat;
  wire                buffer_last;
  wire       [31:0]   buffer_addressIncr;
  wire                buffer_isWrite;
  wire       [3:0]    cmdTransferBeatCount;
  wire                requireBuffer;
  reg                 cmdContext_drop;
  reg                 cmdContext_last;
  reg        [0:0]    cmdContext_source;
  reg        [0:0]    cmdContext_context;
  wire                rspContext_drop;
  wire                rspContext_last;
  wire       [0:0]    rspContext_source;
  wire       [0:0]    rspContext_context;
  wire       [3:0]    _zz_1;
  reg                 io_output_rsp_thrown_valid;
  wire                io_output_rsp_thrown_ready;
  wire                io_output_rsp_thrown_payload_last;
  wire       [0:0]    io_output_rsp_thrown_payload_fragment_opcode;
  wire       [31:0]   io_output_rsp_thrown_payload_fragment_data;
  wire       [3:0]    io_output_rsp_thrown_payload_fragment_context;

  assign _zz_2 = (! (rspContext_last || (! rspContext_drop)));
  assign _zz_3 = (io_output_cmd_valid && io_output_cmd_ready);
  assign _zz_4 = (_zz_6 + 12'h004);
  assign _zz_5 = buffer_address[11 : 0];
  assign _zz_6 = _zz_5;
  assign _zz_7 = _zz_1[0 : 0];
  assign _zz_8 = _zz_1[1 : 1];
  assign buffer_last = (buffer_beat == 4'b0001);
  assign buffer_addressIncr = {buffer_address[31 : 12],(_zz_4 & (~ 12'h003))};
  assign buffer_isWrite = (buffer_opcode == 1'b1);
  assign cmdTransferBeatCount = io_input_cmd_payload_fragment_length[5 : 2];
  assign requireBuffer = (cmdTransferBeatCount != 4'b0000);
  assign io_output_cmd_payload_last = 1'b1;
  assign io_output_cmd_payload_fragment_context = {cmdContext_context,{cmdContext_source,{cmdContext_last,cmdContext_drop}}};
  always @ (*) begin
    if(buffer_valid)begin
      io_output_cmd_payload_fragment_address = buffer_addressIncr;
    end else begin
      io_output_cmd_payload_fragment_address = io_input_cmd_payload_fragment_address;
      if(requireBuffer)begin
        io_output_cmd_payload_fragment_address[1 : 0] = 2'b00;
      end
    end
  end

  always @ (*) begin
    if(buffer_valid)begin
      io_output_cmd_payload_fragment_opcode = buffer_opcode;
    end else begin
      io_output_cmd_payload_fragment_opcode = io_input_cmd_payload_fragment_opcode;
    end
  end

  always @ (*) begin
    if(buffer_valid)begin
      io_output_cmd_payload_fragment_length = 2'b11;
    end else begin
      if(requireBuffer)begin
        io_output_cmd_payload_fragment_length = 2'b11;
      end else begin
        io_output_cmd_payload_fragment_length = io_input_cmd_payload_fragment_length[1:0];
      end
    end
  end

  always @ (*) begin
    if(buffer_valid)begin
      cmdContext_context = buffer_context;
    end else begin
      cmdContext_context = io_input_cmd_payload_fragment_context;
    end
  end

  always @ (*) begin
    if(buffer_valid)begin
      cmdContext_source = buffer_source;
    end else begin
      cmdContext_source = io_input_cmd_payload_fragment_source;
    end
  end

  always @ (*) begin
    io_input_cmd_ready = 1'b0;
    if(buffer_valid)begin
      io_input_cmd_ready = (buffer_isWrite && io_output_cmd_ready);
    end else begin
      io_input_cmd_ready = io_output_cmd_ready;
    end
  end

  always @ (*) begin
    if(buffer_valid)begin
      io_output_cmd_valid = (! (buffer_isWrite && (! io_input_cmd_valid)));
    end else begin
      io_output_cmd_valid = io_input_cmd_valid;
    end
  end

  always @ (*) begin
    if(buffer_valid)begin
      cmdContext_last = buffer_last;
    end else begin
      cmdContext_last = (! requireBuffer);
    end
  end

  always @ (*) begin
    if(buffer_valid)begin
      cmdContext_drop = buffer_isWrite;
    end else begin
      cmdContext_drop = (io_input_cmd_payload_fragment_opcode == 1'b1);
    end
  end

  assign _zz_1 = io_output_rsp_payload_fragment_context;
  assign rspContext_drop = _zz_7[0];
  assign rspContext_last = _zz_8[0];
  assign rspContext_source = _zz_1[2 : 2];
  assign rspContext_context = _zz_1[3 : 3];
  always @ (*) begin
    io_output_rsp_thrown_valid = io_output_rsp_valid;
    if(_zz_2)begin
      io_output_rsp_thrown_valid = 1'b0;
    end
  end

  always @ (*) begin
    io_output_rsp_ready = io_output_rsp_thrown_ready;
    if(_zz_2)begin
      io_output_rsp_ready = 1'b1;
    end
  end

  assign io_output_rsp_thrown_payload_last = io_output_rsp_payload_last;
  assign io_output_rsp_thrown_payload_fragment_opcode = io_output_rsp_payload_fragment_opcode;
  assign io_output_rsp_thrown_payload_fragment_data = io_output_rsp_payload_fragment_data;
  assign io_output_rsp_thrown_payload_fragment_context = io_output_rsp_payload_fragment_context;
  assign io_input_rsp_valid = io_output_rsp_thrown_valid;
  assign io_output_rsp_thrown_ready = io_input_rsp_ready;
  assign io_input_rsp_payload_last = rspContext_last;
  assign io_input_rsp_payload_fragment_source = rspContext_source;
  assign io_input_rsp_payload_fragment_opcode = io_output_rsp_payload_fragment_opcode;
  assign io_input_rsp_payload_fragment_data = io_output_rsp_payload_fragment_data;
  assign io_input_rsp_payload_fragment_context = rspContext_context;
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      buffer_valid <= 1'b0;
    end else begin
      if(_zz_3)begin
        if(buffer_last)begin
          buffer_valid <= 1'b0;
        end
      end
      if(! buffer_valid) begin
        buffer_valid <= (requireBuffer && (io_output_cmd_valid && io_output_cmd_ready));
      end
    end
  end

  always @ (posedge CLKOUT0) begin
    if(_zz_3)begin
      buffer_beat <= (buffer_beat - 4'b0001);
      buffer_address[11 : 0] <= buffer_addressIncr[11 : 0];
    end
    if(! buffer_valid) begin
      buffer_opcode <= io_input_cmd_payload_fragment_opcode;
      buffer_source <= io_input_cmd_payload_fragment_source;
      buffer_address <= io_input_cmd_payload_fragment_address;
      buffer_context <= io_input_cmd_payload_fragment_context;
      buffer_beat <= cmdTransferBeatCount;
    end
  end


endmodule

module BmbDownSizerBridge (
  input               io_input_cmd_valid,
  output              io_input_cmd_ready,
  input               io_input_cmd_payload_last,
  input      [0:0]    io_input_cmd_payload_fragment_source,
  input      [0:0]    io_input_cmd_payload_fragment_opcode,
  input      [31:0]   io_input_cmd_payload_fragment_address,
  input      [5:0]    io_input_cmd_payload_fragment_length,
  output              io_input_rsp_valid,
  input               io_input_rsp_ready,
  output              io_input_rsp_payload_last,
  output     [0:0]    io_input_rsp_payload_fragment_source,
  output     [0:0]    io_input_rsp_payload_fragment_opcode,
  output     [63:0]   io_input_rsp_payload_fragment_data,
  output              io_output_cmd_valid,
  input               io_output_cmd_ready,
  output              io_output_cmd_payload_last,
  output     [0:0]    io_output_cmd_payload_fragment_source,
  output     [0:0]    io_output_cmd_payload_fragment_opcode,
  output     [31:0]   io_output_cmd_payload_fragment_address,
  output     [5:0]    io_output_cmd_payload_fragment_length,
  output     [0:0]    io_output_cmd_payload_fragment_context,
  input               io_output_rsp_valid,
  output              io_output_rsp_ready,
  input               io_output_rsp_payload_last,
  input      [0:0]    io_output_rsp_payload_fragment_source,
  input      [0:0]    io_output_rsp_payload_fragment_opcode,
  input      [31:0]   io_output_rsp_payload_fragment_data,
  input      [0:0]    io_output_rsp_payload_fragment_context,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  wire       [0:0]    cmdArea_context_sel;
  wire       [0:0]    rspArea_context_sel;
  reg                 rspArea_readLogic_locked;
  reg        [0:0]    rspArea_readLogic_counter;
  wire       [0:0]    rspArea_readLogic_sel;
  reg        [31:0]   rspArea_readLogic_buffers_0;
  reg        [31:0]   rspArea_readLogic_words_0;
  wire       [31:0]   rspArea_readLogic_words_1;

  assign cmdArea_context_sel = io_input_cmd_payload_fragment_address[2 : 2];
  assign io_output_cmd_valid = io_input_cmd_valid;
  assign io_output_cmd_payload_fragment_opcode = io_input_cmd_payload_fragment_opcode;
  assign io_output_cmd_payload_fragment_address = io_input_cmd_payload_fragment_address;
  assign io_output_cmd_payload_fragment_length = io_input_cmd_payload_fragment_length;
  assign io_output_cmd_payload_fragment_source = io_input_cmd_payload_fragment_source;
  assign io_output_cmd_payload_fragment_context = cmdArea_context_sel;
  assign io_output_cmd_payload_last = io_input_cmd_payload_last;
  assign io_input_cmd_ready = io_output_cmd_ready;
  assign rspArea_context_sel = io_output_rsp_payload_fragment_context[0 : 0];
  assign io_input_rsp_payload_last = io_output_rsp_payload_last;
  assign io_input_rsp_payload_fragment_opcode = io_output_rsp_payload_fragment_opcode;
  assign io_input_rsp_payload_fragment_source = io_output_rsp_payload_fragment_source;
  assign io_output_rsp_ready = io_input_rsp_ready;
  assign rspArea_readLogic_sel = (rspArea_readLogic_locked ? rspArea_readLogic_counter : rspArea_context_sel);
  always @ (*) begin
    rspArea_readLogic_words_0 = rspArea_readLogic_buffers_0;
    if((io_input_rsp_payload_last && (rspArea_readLogic_sel == 1'b0)))begin
      rspArea_readLogic_words_0 = io_output_rsp_payload_fragment_data;
    end
  end

  assign rspArea_readLogic_words_1 = io_output_rsp_payload_fragment_data;
  assign io_input_rsp_valid = (io_output_rsp_valid && (io_output_rsp_payload_last || (rspArea_readLogic_sel == 1'b1)));
  assign io_input_rsp_payload_fragment_data = {rspArea_readLogic_words_1,rspArea_readLogic_words_0};
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      rspArea_readLogic_locked <= 1'b0;
    end else begin
      if((io_output_rsp_valid && io_output_rsp_ready))begin
        rspArea_readLogic_locked <= (! io_output_rsp_payload_last);
      end
    end
  end

  always @ (posedge CLKOUT0) begin
    if((io_output_rsp_valid && io_output_rsp_ready))begin
      rspArea_readLogic_counter <= (rspArea_readLogic_sel + 1'b1);
      if((rspArea_readLogic_sel == 1'b0))begin
        rspArea_readLogic_buffers_0 <= io_output_rsp_payload_fragment_data;
      end
    end
  end


endmodule

module BmbDecoderOutOfOrder (
  input               io_input_cmd_valid,
  output              io_input_cmd_ready,
  input               io_input_cmd_payload_last,
  input      [3:0]    io_input_cmd_payload_fragment_source,
  input      [0:0]    io_input_cmd_payload_fragment_opcode,
  input      [31:0]   io_input_cmd_payload_fragment_address,
  input      [5:0]    io_input_cmd_payload_fragment_length,
  input      [63:0]   io_input_cmd_payload_fragment_data,
  input      [7:0]    io_input_cmd_payload_fragment_mask,
  input      [42:0]   io_input_cmd_payload_fragment_context,
  output reg          io_input_rsp_valid,
  input               io_input_rsp_ready,
  output              io_input_rsp_payload_last,
  output     [3:0]    io_input_rsp_payload_fragment_source,
  output reg [0:0]    io_input_rsp_payload_fragment_opcode,
  output     [63:0]   io_input_rsp_payload_fragment_data,
  output     [42:0]   io_input_rsp_payload_fragment_context,
  output              io_outputs_0_cmd_valid,
  input               io_outputs_0_cmd_ready,
  output              io_outputs_0_cmd_payload_last,
  output     [3:0]    io_outputs_0_cmd_payload_fragment_source,
  output     [0:0]    io_outputs_0_cmd_payload_fragment_opcode,
  output     [31:0]   io_outputs_0_cmd_payload_fragment_address,
  output     [5:0]    io_outputs_0_cmd_payload_fragment_length,
  output     [63:0]   io_outputs_0_cmd_payload_fragment_data,
  output     [7:0]    io_outputs_0_cmd_payload_fragment_mask,
  input               io_outputs_0_rsp_valid,
  output              io_outputs_0_rsp_ready,
  input               io_outputs_0_rsp_payload_last,
  input      [3:0]    io_outputs_0_rsp_payload_fragment_source,
  input      [0:0]    io_outputs_0_rsp_payload_fragment_opcode,
  input      [63:0]   io_outputs_0_rsp_payload_fragment_data,
  output              io_outputs_1_cmd_valid,
  input               io_outputs_1_cmd_ready,
  output              io_outputs_1_cmd_payload_last,
  output     [3:0]    io_outputs_1_cmd_payload_fragment_source,
  output     [0:0]    io_outputs_1_cmd_payload_fragment_opcode,
  output     [31:0]   io_outputs_1_cmd_payload_fragment_address,
  output     [5:0]    io_outputs_1_cmd_payload_fragment_length,
  output     [63:0]   io_outputs_1_cmd_payload_fragment_data,
  output     [7:0]    io_outputs_1_cmd_payload_fragment_mask,
  input               io_outputs_1_rsp_valid,
  output              io_outputs_1_rsp_ready,
  input               io_outputs_1_rsp_payload_last,
  input      [3:0]    io_outputs_1_rsp_payload_fragment_source,
  input      [0:0]    io_outputs_1_rsp_payload_fragment_opcode,
  input      [63:0]   io_outputs_1_rsp_payload_fragment_data,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  wire       [1:0]    _zz_23;
  wire                _zz_24;
  wire                _zz_25;
  wire                _zz_26;
  reg                 _zz_27;
  wire                _zz_28;
  reg        [42:0]   _zz_29;
  wire                sourceOrderingFifo_io_push_stream_ready;
  wire                sourceOrderingFifo_io_push_full;
  wire                sourceOrderingFifo_io_pop_stream_valid;
  wire       [1:0]    sourceOrderingFifo_io_pop_stream_payload_hits;
  wire       [3:0]    sourceOrderingFifo_io_pop_stream_payload_beatCount;
  wire       [42:0]   sourceOrderingFifo_io_pop_stream_payload_context;
  wire       [5:0]    sourceOrderingFifo_io_pop_empty;
  wire       [5:0]    sourceOrderingFifo_io_availability;
  wire                portsLogic_0_rspFifo_io_push_stream_ready;
  wire                portsLogic_0_rspFifo_io_push_full;
  wire                portsLogic_0_rspFifo_io_pop_stream_valid;
  wire                portsLogic_0_rspFifo_io_pop_stream_payload_last;
  wire       [3:0]    portsLogic_0_rspFifo_io_pop_stream_payload_fragment_source;
  wire       [0:0]    portsLogic_0_rspFifo_io_pop_stream_payload_fragment_opcode;
  wire       [63:0]   portsLogic_0_rspFifo_io_pop_stream_payload_fragment_data;
  wire       [5:0]    portsLogic_0_rspFifo_io_pop_empty;
  wire       [5:0]    portsLogic_0_rspFifo_io_availability;
  wire                portsLogic_1_rspFifo_io_push_stream_ready;
  wire                portsLogic_1_rspFifo_io_push_full;
  wire                portsLogic_1_rspFifo_io_pop_stream_valid;
  wire                portsLogic_1_rspFifo_io_pop_stream_payload_last;
  wire       [3:0]    portsLogic_1_rspFifo_io_pop_stream_payload_fragment_source;
  wire       [0:0]    portsLogic_1_rspFifo_io_pop_stream_payload_fragment_opcode;
  wire       [63:0]   portsLogic_1_rspFifo_io_pop_stream_payload_fragment_data;
  wire       [5:0]    portsLogic_1_rspFifo_io_pop_empty;
  wire       [5:0]    portsLogic_1_rspFifo_io_availability;
  wire                io_input_cmd_fork_io_input_ready;
  wire                io_input_cmd_fork_io_outputs_0_valid;
  wire                io_input_cmd_fork_io_outputs_0_payload_last;
  wire       [3:0]    io_input_cmd_fork_io_outputs_0_payload_fragment_source;
  wire       [0:0]    io_input_cmd_fork_io_outputs_0_payload_fragment_opcode;
  wire       [31:0]   io_input_cmd_fork_io_outputs_0_payload_fragment_address;
  wire       [5:0]    io_input_cmd_fork_io_outputs_0_payload_fragment_length;
  wire       [63:0]   io_input_cmd_fork_io_outputs_0_payload_fragment_data;
  wire       [7:0]    io_input_cmd_fork_io_outputs_0_payload_fragment_mask;
  wire       [42:0]   io_input_cmd_fork_io_outputs_0_payload_fragment_context;
  wire                io_input_cmd_fork_io_outputs_1_valid;
  wire                io_input_cmd_fork_io_outputs_1_payload_last;
  wire       [3:0]    io_input_cmd_fork_io_outputs_1_payload_fragment_source;
  wire       [0:0]    io_input_cmd_fork_io_outputs_1_payload_fragment_opcode;
  wire       [31:0]   io_input_cmd_fork_io_outputs_1_payload_fragment_address;
  wire       [5:0]    io_input_cmd_fork_io_outputs_1_payload_fragment_length;
  wire       [63:0]   io_input_cmd_fork_io_outputs_1_payload_fragment_data;
  wire       [7:0]    io_input_cmd_fork_io_outputs_1_payload_fragment_mask;
  wire       [42:0]   io_input_cmd_fork_io_outputs_1_payload_fragment_context;
  wire                _zz_30;
  wire                _zz_31;
  wire                _zz_32;
  wire                _zz_33;
  wire                _zz_34;
  wire                _zz_35;
  wire                _zz_36;
  wire                _zz_37;
  wire                _zz_38;
  wire                _zz_39;
  wire       [5:0]    _zz_40;
  wire       [6:0]    _zz_41;
  wire       [2:0]    _zz_42;
  wire       [6:0]    _zz_43;
  wire       [5:0]    _zz_44;
  wire       [4:0]    _zz_45;
  wire       [5:0]    _zz_46;
  wire       [5:0]    _zz_47;
  wire       [0:0]    _zz_48;
  wire       [5:0]    _zz_49;
  wire       [5:0]    _zz_50;
  wire       [4:0]    _zz_51;
  wire       [5:0]    _zz_52;
  wire       [5:0]    _zz_53;
  wire       [0:0]    _zz_54;
  wire       [5:0]    _zz_55;
  wire       [6:0]    _zz_56;
  wire       [2:0]    _zz_57;
  wire       [6:0]    _zz_58;
  wire       [1:0]    _zz_59;
  wire       [1:0]    _zz_60;
  wire       [5:0]    _zz_61;
  wire       [2:0]    _zz_62;
  wire                io_pop_toStreams_bufferIn_0_valid;
  wire                io_pop_toStreams_bufferIn_0_ready;
  wire       [1:0]    io_pop_toStreams_bufferIn_0_payload_hits;
  wire       [3:0]    io_pop_toStreams_bufferIn_0_payload_beatCount;
  wire       [42:0]   io_pop_toStreams_bufferIn_0_payload_context;
  wire                io_pop_toStreams_bufferIn_1_valid;
  wire                io_pop_toStreams_bufferIn_1_ready;
  wire       [1:0]    io_pop_toStreams_bufferIn_1_payload_hits;
  wire       [3:0]    io_pop_toStreams_bufferIn_1_payload_beatCount;
  wire       [42:0]   io_pop_toStreams_bufferIn_1_payload_context;
  wire                io_pop_toStreams_bufferIn_2_valid;
  wire                io_pop_toStreams_bufferIn_2_ready;
  wire       [1:0]    io_pop_toStreams_bufferIn_2_payload_hits;
  wire       [3:0]    io_pop_toStreams_bufferIn_2_payload_beatCount;
  wire       [42:0]   io_pop_toStreams_bufferIn_2_payload_context;
  wire                io_pop_toStreams_bufferIn_3_valid;
  wire                io_pop_toStreams_bufferIn_3_ready;
  wire       [1:0]    io_pop_toStreams_bufferIn_3_payload_hits;
  wire       [3:0]    io_pop_toStreams_bufferIn_3_payload_beatCount;
  wire       [42:0]   io_pop_toStreams_bufferIn_3_payload_context;
  wire                io_pop_toStreams_bufferIn_4_valid;
  wire                io_pop_toStreams_bufferIn_4_ready;
  wire       [1:0]    io_pop_toStreams_bufferIn_4_payload_hits;
  wire       [3:0]    io_pop_toStreams_bufferIn_4_payload_beatCount;
  wire       [42:0]   io_pop_toStreams_bufferIn_4_payload_context;
  wire                io_pop_toStreams_bufferIn_5_valid;
  wire                io_pop_toStreams_bufferIn_5_ready;
  wire       [1:0]    io_pop_toStreams_bufferIn_5_payload_hits;
  wire       [3:0]    io_pop_toStreams_bufferIn_5_payload_beatCount;
  wire       [42:0]   io_pop_toStreams_bufferIn_5_payload_context;
  wire                sourceOrderingUnbuffered_0_valid;
  wire                sourceOrderingUnbuffered_0_ready;
  wire       [1:0]    sourceOrderingUnbuffered_0_payload_hits;
  wire       [3:0]    sourceOrderingUnbuffered_0_payload_beatCount;
  wire       [42:0]   sourceOrderingUnbuffered_0_payload_context;
  wire                sourceOrderingUnbuffered_1_valid;
  wire                sourceOrderingUnbuffered_1_ready;
  wire       [1:0]    sourceOrderingUnbuffered_1_payload_hits;
  wire       [3:0]    sourceOrderingUnbuffered_1_payload_beatCount;
  wire       [42:0]   sourceOrderingUnbuffered_1_payload_context;
  wire                sourceOrderingUnbuffered_2_valid;
  wire                sourceOrderingUnbuffered_2_ready;
  wire       [1:0]    sourceOrderingUnbuffered_2_payload_hits;
  wire       [3:0]    sourceOrderingUnbuffered_2_payload_beatCount;
  wire       [42:0]   sourceOrderingUnbuffered_2_payload_context;
  wire                sourceOrderingUnbuffered_3_valid;
  wire                sourceOrderingUnbuffered_3_ready;
  wire       [1:0]    sourceOrderingUnbuffered_3_payload_hits;
  wire       [3:0]    sourceOrderingUnbuffered_3_payload_beatCount;
  wire       [42:0]   sourceOrderingUnbuffered_3_payload_context;
  wire                sourceOrderingUnbuffered_4_valid;
  wire                sourceOrderingUnbuffered_4_ready;
  wire       [1:0]    sourceOrderingUnbuffered_4_payload_hits;
  wire       [3:0]    sourceOrderingUnbuffered_4_payload_beatCount;
  wire       [42:0]   sourceOrderingUnbuffered_4_payload_context;
  wire                sourceOrderingUnbuffered_5_valid;
  wire                sourceOrderingUnbuffered_5_ready;
  wire       [1:0]    sourceOrderingUnbuffered_5_payload_hits;
  wire       [3:0]    sourceOrderingUnbuffered_5_payload_beatCount;
  wire       [42:0]   sourceOrderingUnbuffered_5_payload_context;
  wire                io_pop_toStreams_bufferIn_0_s2mPipe_valid;
  wire                io_pop_toStreams_bufferIn_0_s2mPipe_ready;
  wire       [1:0]    io_pop_toStreams_bufferIn_0_s2mPipe_payload_hits;
  wire       [3:0]    io_pop_toStreams_bufferIn_0_s2mPipe_payload_beatCount;
  wire       [42:0]   io_pop_toStreams_bufferIn_0_s2mPipe_payload_context;
  reg                 io_pop_toStreams_bufferIn_0_s2mPipe_rValid;
  reg        [1:0]    io_pop_toStreams_bufferIn_0_s2mPipe_rData_hits;
  reg        [3:0]    io_pop_toStreams_bufferIn_0_s2mPipe_rData_beatCount;
  reg        [42:0]   io_pop_toStreams_bufferIn_0_s2mPipe_rData_context;
  wire                io_pop_toStreams_bufferIn_1_s2mPipe_valid;
  wire                io_pop_toStreams_bufferIn_1_s2mPipe_ready;
  wire       [1:0]    io_pop_toStreams_bufferIn_1_s2mPipe_payload_hits;
  wire       [3:0]    io_pop_toStreams_bufferIn_1_s2mPipe_payload_beatCount;
  wire       [42:0]   io_pop_toStreams_bufferIn_1_s2mPipe_payload_context;
  reg                 io_pop_toStreams_bufferIn_1_s2mPipe_rValid;
  reg        [1:0]    io_pop_toStreams_bufferIn_1_s2mPipe_rData_hits;
  reg        [3:0]    io_pop_toStreams_bufferIn_1_s2mPipe_rData_beatCount;
  reg        [42:0]   io_pop_toStreams_bufferIn_1_s2mPipe_rData_context;
  wire                io_pop_toStreams_bufferIn_2_s2mPipe_valid;
  wire                io_pop_toStreams_bufferIn_2_s2mPipe_ready;
  wire       [1:0]    io_pop_toStreams_bufferIn_2_s2mPipe_payload_hits;
  wire       [3:0]    io_pop_toStreams_bufferIn_2_s2mPipe_payload_beatCount;
  wire       [42:0]   io_pop_toStreams_bufferIn_2_s2mPipe_payload_context;
  reg                 io_pop_toStreams_bufferIn_2_s2mPipe_rValid;
  reg        [1:0]    io_pop_toStreams_bufferIn_2_s2mPipe_rData_hits;
  reg        [3:0]    io_pop_toStreams_bufferIn_2_s2mPipe_rData_beatCount;
  reg        [42:0]   io_pop_toStreams_bufferIn_2_s2mPipe_rData_context;
  wire                io_pop_toStreams_bufferIn_3_s2mPipe_valid;
  wire                io_pop_toStreams_bufferIn_3_s2mPipe_ready;
  wire       [1:0]    io_pop_toStreams_bufferIn_3_s2mPipe_payload_hits;
  wire       [3:0]    io_pop_toStreams_bufferIn_3_s2mPipe_payload_beatCount;
  wire       [42:0]   io_pop_toStreams_bufferIn_3_s2mPipe_payload_context;
  reg                 io_pop_toStreams_bufferIn_3_s2mPipe_rValid;
  reg        [1:0]    io_pop_toStreams_bufferIn_3_s2mPipe_rData_hits;
  reg        [3:0]    io_pop_toStreams_bufferIn_3_s2mPipe_rData_beatCount;
  reg        [42:0]   io_pop_toStreams_bufferIn_3_s2mPipe_rData_context;
  wire                io_pop_toStreams_bufferIn_4_s2mPipe_valid;
  wire                io_pop_toStreams_bufferIn_4_s2mPipe_ready;
  wire       [1:0]    io_pop_toStreams_bufferIn_4_s2mPipe_payload_hits;
  wire       [3:0]    io_pop_toStreams_bufferIn_4_s2mPipe_payload_beatCount;
  wire       [42:0]   io_pop_toStreams_bufferIn_4_s2mPipe_payload_context;
  reg                 io_pop_toStreams_bufferIn_4_s2mPipe_rValid;
  reg        [1:0]    io_pop_toStreams_bufferIn_4_s2mPipe_rData_hits;
  reg        [3:0]    io_pop_toStreams_bufferIn_4_s2mPipe_rData_beatCount;
  reg        [42:0]   io_pop_toStreams_bufferIn_4_s2mPipe_rData_context;
  wire                io_pop_toStreams_bufferIn_5_s2mPipe_valid;
  wire                io_pop_toStreams_bufferIn_5_s2mPipe_ready;
  wire       [1:0]    io_pop_toStreams_bufferIn_5_s2mPipe_payload_hits;
  wire       [3:0]    io_pop_toStreams_bufferIn_5_s2mPipe_payload_beatCount;
  wire       [42:0]   io_pop_toStreams_bufferIn_5_s2mPipe_payload_context;
  reg                 io_pop_toStreams_bufferIn_5_s2mPipe_rValid;
  reg        [1:0]    io_pop_toStreams_bufferIn_5_s2mPipe_rData_hits;
  reg        [3:0]    io_pop_toStreams_bufferIn_5_s2mPipe_rData_beatCount;
  reg        [42:0]   io_pop_toStreams_bufferIn_5_s2mPipe_rData_context;
  reg        [5:0]    io_pop_toStreams_needRefill;
  wire       [5:0]    _zz_1;
  wire       [5:0]    io_pop_toStreams_selOh;
  wire                io_pop_toStreams_nonEmpty;
  reg        [5:0]    _zz_2;
  wire                sourceOrdering_0_valid;
  wire                sourceOrdering_0_ready;
  wire       [1:0]    sourceOrdering_0_payload_hits;
  wire       [3:0]    sourceOrdering_0_payload_beatCount;
  wire       [42:0]   sourceOrdering_0_payload_context;
  reg                 sourceOrderingUnbuffered_0_m2sPipe_rValid;
  reg        [1:0]    sourceOrderingUnbuffered_0_m2sPipe_rData_hits;
  reg        [3:0]    sourceOrderingUnbuffered_0_m2sPipe_rData_beatCount;
  reg        [42:0]   sourceOrderingUnbuffered_0_m2sPipe_rData_context;
  wire                sourceOrdering_1_valid;
  wire                sourceOrdering_1_ready;
  wire       [1:0]    sourceOrdering_1_payload_hits;
  wire       [3:0]    sourceOrdering_1_payload_beatCount;
  wire       [42:0]   sourceOrdering_1_payload_context;
  reg                 sourceOrderingUnbuffered_1_m2sPipe_rValid;
  reg        [1:0]    sourceOrderingUnbuffered_1_m2sPipe_rData_hits;
  reg        [3:0]    sourceOrderingUnbuffered_1_m2sPipe_rData_beatCount;
  reg        [42:0]   sourceOrderingUnbuffered_1_m2sPipe_rData_context;
  wire                sourceOrdering_2_valid;
  wire                sourceOrdering_2_ready;
  wire       [1:0]    sourceOrdering_2_payload_hits;
  wire       [3:0]    sourceOrdering_2_payload_beatCount;
  wire       [42:0]   sourceOrdering_2_payload_context;
  reg                 sourceOrderingUnbuffered_2_m2sPipe_rValid;
  reg        [1:0]    sourceOrderingUnbuffered_2_m2sPipe_rData_hits;
  reg        [3:0]    sourceOrderingUnbuffered_2_m2sPipe_rData_beatCount;
  reg        [42:0]   sourceOrderingUnbuffered_2_m2sPipe_rData_context;
  wire                sourceOrdering_3_valid;
  wire                sourceOrdering_3_ready;
  wire       [1:0]    sourceOrdering_3_payload_hits;
  wire       [3:0]    sourceOrdering_3_payload_beatCount;
  wire       [42:0]   sourceOrdering_3_payload_context;
  reg                 sourceOrderingUnbuffered_3_m2sPipe_rValid;
  reg        [1:0]    sourceOrderingUnbuffered_3_m2sPipe_rData_hits;
  reg        [3:0]    sourceOrderingUnbuffered_3_m2sPipe_rData_beatCount;
  reg        [42:0]   sourceOrderingUnbuffered_3_m2sPipe_rData_context;
  wire                sourceOrdering_4_valid;
  wire                sourceOrdering_4_ready;
  wire       [1:0]    sourceOrdering_4_payload_hits;
  wire       [3:0]    sourceOrdering_4_payload_beatCount;
  wire       [42:0]   sourceOrdering_4_payload_context;
  reg                 sourceOrderingUnbuffered_4_m2sPipe_rValid;
  reg        [1:0]    sourceOrderingUnbuffered_4_m2sPipe_rData_hits;
  reg        [3:0]    sourceOrderingUnbuffered_4_m2sPipe_rData_beatCount;
  reg        [42:0]   sourceOrderingUnbuffered_4_m2sPipe_rData_context;
  wire                sourceOrdering_5_valid;
  wire                sourceOrdering_5_ready;
  wire       [1:0]    sourceOrdering_5_payload_hits;
  wire       [3:0]    sourceOrdering_5_payload_beatCount;
  wire       [42:0]   sourceOrdering_5_payload_context;
  reg                 sourceOrderingUnbuffered_5_m2sPipe_rValid;
  reg        [1:0]    sourceOrderingUnbuffered_5_m2sPipe_rData_hits;
  reg        [3:0]    sourceOrderingUnbuffered_5_m2sPipe_rData_beatCount;
  reg        [42:0]   sourceOrderingUnbuffered_5_m2sPipe_rData_context;
  wire       [3:0]    cmdToRspCountMinusOne;
  reg        [5:0]    _zz_3;
  reg        [5:0]    portsLogic_0_sourceHits;
  wire                portsLogic_0_sourceHit;
  wire       [5:0]    _zz_4;
  wire       [5:0]    portsLogic_0_sourceArbiter;
  reg                 portsLogic_0_lockValid;
  reg        [5:0]    portsLogic_0_lockSel;
  wire       [5:0]    portsLogic_0_sourceSel;
  reg        [5:0]    portsLogic_0_incomingRspCount;
  wire       [4:0]    portsLogic_0_incomingRspAdd;
  reg        [5:0]    portsLogic_0_rspFifo_io_availability_regNext;
  wire                portsLogic_0_rspFifoFull;
  reg        [5:0]    _zz_5;
  reg        [5:0]    portsLogic_1_sourceHits;
  wire                portsLogic_1_sourceHit;
  wire       [5:0]    _zz_6;
  wire       [5:0]    portsLogic_1_sourceArbiter;
  reg                 portsLogic_1_lockValid;
  reg        [5:0]    portsLogic_1_lockSel;
  wire       [5:0]    portsLogic_1_sourceSel;
  reg        [5:0]    portsLogic_1_incomingRspCount;
  wire       [4:0]    portsLogic_1_incomingRspAdd;
  reg        [5:0]    portsLogic_1_rspFifo_io_availability_regNext;
  wire                portsLogic_1_rspFifoFull;
  wire       [3:0]    cmdLogic_rspCount;
  reg                 cmdLogic_halt;
  reg                 cmdLogic_lock;
  wire                cmdLogic_hits_0;
  wire                cmdLogic_hits_1;
  wire                _zz_7;
  wire                _zz_8;
  reg        [5:0]    _zz_9;
  reg                 io_input_cmd_fork_io_outputs_0_payload_first;
  reg                 io_input_cmd_fork_io_outputs_0_thrown_valid;
  wire                io_input_cmd_fork_io_outputs_0_thrown_ready;
  wire                io_input_cmd_fork_io_outputs_0_thrown_payload_last;
  wire       [3:0]    io_input_cmd_fork_io_outputs_0_thrown_payload_fragment_source;
  wire       [0:0]    io_input_cmd_fork_io_outputs_0_thrown_payload_fragment_opcode;
  wire       [31:0]   io_input_cmd_fork_io_outputs_0_thrown_payload_fragment_address;
  wire       [5:0]    io_input_cmd_fork_io_outputs_0_thrown_payload_fragment_length;
  wire       [63:0]   io_input_cmd_fork_io_outputs_0_thrown_payload_fragment_data;
  wire       [7:0]    io_input_cmd_fork_io_outputs_0_thrown_payload_fragment_mask;
  wire       [42:0]   io_input_cmd_fork_io_outputs_0_thrown_payload_fragment_context;
  reg                 rspLogic_lockValid;
  reg        [1:0]    rspLogic_lockSel;
  wire       [1:0]    _zz_10;
  reg        [1:0]    rspLogic_arbiterSel;
  wire       [1:0]    rspLogic_portSel;
  reg        [5:0]    rspLogic_error_hits;
  reg                 rspLogic_error_valid;
  reg        [5:0]    rspLogic_error_sourceSel;
  wire       [5:0]    _zz_11;
  reg        [3:0]    rspLogic_beatCounter;
  wire                _zz_12;
  reg        [5:0]    rspLogic_sourceSel;
  reg        [5:0]    rspLogic_lasts;
  wire                rspLogic_last;
  reg        [1:0]    _zz_13;
  wire                _zz_14;
  wire                _zz_15;
  wire                _zz_16;
  wire                _zz_17;
  wire                _zz_18;
  wire                _zz_19;
  wire                _zz_20;
  wire                _zz_21;
  reg        [3:0]    _zz_22;

  assign _zz_30 = (! (io_input_cmd_fork_io_outputs_0_valid && io_input_cmd_fork_io_outputs_0_payload_first));
  assign _zz_31 = (! rspLogic_error_valid);
  assign _zz_32 = ((rspLogic_portSel == 2'b00) && rspLogic_error_valid);
  assign _zz_33 = (io_pop_toStreams_bufferIn_0_ready && (! io_pop_toStreams_bufferIn_0_s2mPipe_ready));
  assign _zz_34 = (io_pop_toStreams_bufferIn_1_ready && (! io_pop_toStreams_bufferIn_1_s2mPipe_ready));
  assign _zz_35 = (io_pop_toStreams_bufferIn_2_ready && (! io_pop_toStreams_bufferIn_2_s2mPipe_ready));
  assign _zz_36 = (io_pop_toStreams_bufferIn_3_ready && (! io_pop_toStreams_bufferIn_3_s2mPipe_ready));
  assign _zz_37 = (io_pop_toStreams_bufferIn_4_ready && (! io_pop_toStreams_bufferIn_4_s2mPipe_ready));
  assign _zz_38 = (io_pop_toStreams_bufferIn_5_ready && (! io_pop_toStreams_bufferIn_5_s2mPipe_ready));
  assign _zz_39 = (rspLogic_error_hits != 6'h0);
  assign _zz_40 = (_zz_1 - 6'h01);
  assign _zz_41 = ({1'b0,io_input_cmd_payload_fragment_length} + _zz_43);
  assign _zz_42 = io_input_cmd_payload_fragment_address[2 : 0];
  assign _zz_43 = {4'd0, _zz_42};
  assign _zz_44 = (_zz_4 - 6'h01);
  assign _zz_45 = ({1'b0,cmdToRspCountMinusOne} + 5'h01);
  assign _zz_46 = (portsLogic_0_incomingRspCount + _zz_47);
  assign _zz_47 = {1'd0, portsLogic_0_incomingRspAdd};
  assign _zz_48 = (io_outputs_0_rsp_valid && io_outputs_0_rsp_ready);
  assign _zz_49 = {5'd0, _zz_48};
  assign _zz_50 = (_zz_6 - 6'h01);
  assign _zz_51 = ({1'b0,cmdToRspCountMinusOne} + 5'h01);
  assign _zz_52 = (portsLogic_1_incomingRspCount + _zz_53);
  assign _zz_53 = {1'd0, portsLogic_1_incomingRspAdd};
  assign _zz_54 = (io_outputs_1_rsp_valid && io_outputs_1_rsp_ready);
  assign _zz_55 = {5'd0, _zz_54};
  assign _zz_56 = ({1'b0,io_input_cmd_payload_fragment_length} + _zz_58);
  assign _zz_57 = io_input_cmd_payload_fragment_address[2 : 0];
  assign _zz_58 = {4'd0, _zz_57};
  assign _zz_59 = (_zz_10 & (~ _zz_60));
  assign _zz_60 = (_zz_10 - 2'b01);
  assign _zz_61 = (_zz_11 - 6'h01);
  assign _zz_62 = {_zz_21,{_zz_20,_zz_19}};
  StreamFifoMultiChannel sourceOrderingFifo (
    .io_push_channel                     (_zz_9[5:0]                                               ), //i
    .io_push_full                        (sourceOrderingFifo_io_push_full                          ), //o
    .io_push_stream_valid                (io_input_cmd_fork_io_outputs_0_thrown_valid              ), //i
    .io_push_stream_ready                (sourceOrderingFifo_io_push_stream_ready                  ), //o
    .io_push_stream_payload_hits         (_zz_23[1:0]                                              ), //i
    .io_push_stream_payload_beatCount    (cmdToRspCountMinusOne[3:0]                               ), //i
    .io_push_stream_payload_context      (io_input_cmd_payload_fragment_context[42:0]              ), //i
    .io_pop_channel                      (io_pop_toStreams_selOh[5:0]                              ), //i
    .io_pop_empty                        (sourceOrderingFifo_io_pop_empty[5:0]                     ), //o
    .io_pop_stream_valid                 (sourceOrderingFifo_io_pop_stream_valid                   ), //o
    .io_pop_stream_ready                 (_zz_24                                                   ), //i
    .io_pop_stream_payload_hits          (sourceOrderingFifo_io_pop_stream_payload_hits[1:0]       ), //o
    .io_pop_stream_payload_beatCount     (sourceOrderingFifo_io_pop_stream_payload_beatCount[3:0]  ), //o
    .io_pop_stream_payload_context       (sourceOrderingFifo_io_pop_stream_payload_context[42:0]   ), //o
    .io_availability                     (sourceOrderingFifo_io_availability[5:0]                  ), //o
    .CLKOUT0                             (CLKOUT0                                                  ), //i
    .systemCd_logic_outputReset          (systemCd_logic_outputReset                               )  //i
  );
  StreamFifoMultiChannel_1 portsLogic_0_rspFifo (
    .io_push_channel                           (_zz_3[5:0]                                                       ), //i
    .io_push_full                              (portsLogic_0_rspFifo_io_push_full                                ), //o
    .io_push_stream_valid                      (io_outputs_0_rsp_valid                                           ), //i
    .io_push_stream_ready                      (portsLogic_0_rspFifo_io_push_stream_ready                        ), //o
    .io_push_stream_payload_last               (io_outputs_0_rsp_payload_last                                    ), //i
    .io_push_stream_payload_fragment_source    (io_outputs_0_rsp_payload_fragment_source[3:0]                    ), //i
    .io_push_stream_payload_fragment_opcode    (io_outputs_0_rsp_payload_fragment_opcode                         ), //i
    .io_push_stream_payload_fragment_data      (io_outputs_0_rsp_payload_fragment_data[63:0]                     ), //i
    .io_pop_channel                            (portsLogic_0_sourceSel[5:0]                                      ), //i
    .io_pop_empty                              (portsLogic_0_rspFifo_io_pop_empty[5:0]                           ), //o
    .io_pop_stream_valid                       (portsLogic_0_rspFifo_io_pop_stream_valid                         ), //o
    .io_pop_stream_ready                       (_zz_25                                                           ), //i
    .io_pop_stream_payload_last                (portsLogic_0_rspFifo_io_pop_stream_payload_last                  ), //o
    .io_pop_stream_payload_fragment_source     (portsLogic_0_rspFifo_io_pop_stream_payload_fragment_source[3:0]  ), //o
    .io_pop_stream_payload_fragment_opcode     (portsLogic_0_rspFifo_io_pop_stream_payload_fragment_opcode       ), //o
    .io_pop_stream_payload_fragment_data       (portsLogic_0_rspFifo_io_pop_stream_payload_fragment_data[63:0]   ), //o
    .io_availability                           (portsLogic_0_rspFifo_io_availability[5:0]                        ), //o
    .CLKOUT0                                   (CLKOUT0                                                          ), //i
    .systemCd_logic_outputReset                (systemCd_logic_outputReset                                       )  //i
  );
  StreamFifoMultiChannel_1 portsLogic_1_rspFifo (
    .io_push_channel                           (_zz_5[5:0]                                                       ), //i
    .io_push_full                              (portsLogic_1_rspFifo_io_push_full                                ), //o
    .io_push_stream_valid                      (io_outputs_1_rsp_valid                                           ), //i
    .io_push_stream_ready                      (portsLogic_1_rspFifo_io_push_stream_ready                        ), //o
    .io_push_stream_payload_last               (io_outputs_1_rsp_payload_last                                    ), //i
    .io_push_stream_payload_fragment_source    (io_outputs_1_rsp_payload_fragment_source[3:0]                    ), //i
    .io_push_stream_payload_fragment_opcode    (io_outputs_1_rsp_payload_fragment_opcode                         ), //i
    .io_push_stream_payload_fragment_data      (io_outputs_1_rsp_payload_fragment_data[63:0]                     ), //i
    .io_pop_channel                            (portsLogic_1_sourceSel[5:0]                                      ), //i
    .io_pop_empty                              (portsLogic_1_rspFifo_io_pop_empty[5:0]                           ), //o
    .io_pop_stream_valid                       (portsLogic_1_rspFifo_io_pop_stream_valid                         ), //o
    .io_pop_stream_ready                       (_zz_26                                                           ), //i
    .io_pop_stream_payload_last                (portsLogic_1_rspFifo_io_pop_stream_payload_last                  ), //o
    .io_pop_stream_payload_fragment_source     (portsLogic_1_rspFifo_io_pop_stream_payload_fragment_source[3:0]  ), //o
    .io_pop_stream_payload_fragment_opcode     (portsLogic_1_rspFifo_io_pop_stream_payload_fragment_opcode       ), //o
    .io_pop_stream_payload_fragment_data       (portsLogic_1_rspFifo_io_pop_stream_payload_fragment_data[63:0]   ), //o
    .io_availability                           (portsLogic_1_rspFifo_io_availability[5:0]                        ), //o
    .CLKOUT0                                   (CLKOUT0                                                          ), //i
    .systemCd_logic_outputReset                (systemCd_logic_outputReset                                       )  //i
  );
  StreamFork_3 io_input_cmd_fork (
    .io_input_valid                           (io_input_cmd_valid                                             ), //i
    .io_input_ready                           (io_input_cmd_fork_io_input_ready                               ), //o
    .io_input_payload_last                    (io_input_cmd_payload_last                                      ), //i
    .io_input_payload_fragment_source         (io_input_cmd_payload_fragment_source[3:0]                      ), //i
    .io_input_payload_fragment_opcode         (io_input_cmd_payload_fragment_opcode                           ), //i
    .io_input_payload_fragment_address        (io_input_cmd_payload_fragment_address[31:0]                    ), //i
    .io_input_payload_fragment_length         (io_input_cmd_payload_fragment_length[5:0]                      ), //i
    .io_input_payload_fragment_data           (io_input_cmd_payload_fragment_data[63:0]                       ), //i
    .io_input_payload_fragment_mask           (io_input_cmd_payload_fragment_mask[7:0]                        ), //i
    .io_input_payload_fragment_context        (io_input_cmd_payload_fragment_context[42:0]                    ), //i
    .io_outputs_0_valid                       (io_input_cmd_fork_io_outputs_0_valid                           ), //o
    .io_outputs_0_ready                       (_zz_27                                                         ), //i
    .io_outputs_0_payload_last                (io_input_cmd_fork_io_outputs_0_payload_last                    ), //o
    .io_outputs_0_payload_fragment_source     (io_input_cmd_fork_io_outputs_0_payload_fragment_source[3:0]    ), //o
    .io_outputs_0_payload_fragment_opcode     (io_input_cmd_fork_io_outputs_0_payload_fragment_opcode         ), //o
    .io_outputs_0_payload_fragment_address    (io_input_cmd_fork_io_outputs_0_payload_fragment_address[31:0]  ), //o
    .io_outputs_0_payload_fragment_length     (io_input_cmd_fork_io_outputs_0_payload_fragment_length[5:0]    ), //o
    .io_outputs_0_payload_fragment_data       (io_input_cmd_fork_io_outputs_0_payload_fragment_data[63:0]     ), //o
    .io_outputs_0_payload_fragment_mask       (io_input_cmd_fork_io_outputs_0_payload_fragment_mask[7:0]      ), //o
    .io_outputs_0_payload_fragment_context    (io_input_cmd_fork_io_outputs_0_payload_fragment_context[42:0]  ), //o
    .io_outputs_1_valid                       (io_input_cmd_fork_io_outputs_1_valid                           ), //o
    .io_outputs_1_ready                       (_zz_28                                                         ), //i
    .io_outputs_1_payload_last                (io_input_cmd_fork_io_outputs_1_payload_last                    ), //o
    .io_outputs_1_payload_fragment_source     (io_input_cmd_fork_io_outputs_1_payload_fragment_source[3:0]    ), //o
    .io_outputs_1_payload_fragment_opcode     (io_input_cmd_fork_io_outputs_1_payload_fragment_opcode         ), //o
    .io_outputs_1_payload_fragment_address    (io_input_cmd_fork_io_outputs_1_payload_fragment_address[31:0]  ), //o
    .io_outputs_1_payload_fragment_length     (io_input_cmd_fork_io_outputs_1_payload_fragment_length[5:0]    ), //o
    .io_outputs_1_payload_fragment_data       (io_input_cmd_fork_io_outputs_1_payload_fragment_data[63:0]     ), //o
    .io_outputs_1_payload_fragment_mask       (io_input_cmd_fork_io_outputs_1_payload_fragment_mask[7:0]      ), //o
    .io_outputs_1_payload_fragment_context    (io_input_cmd_fork_io_outputs_1_payload_fragment_context[42:0]  ), //o
    .CLKOUT0                                  (CLKOUT0                                                        ), //i
    .systemCd_logic_outputReset               (systemCd_logic_outputReset                                     )  //i
  );
  always @(*) begin
    case(_zz_62)
      3'b000 : begin
        _zz_29 = sourceOrdering_0_payload_context;
      end
      3'b001 : begin
        _zz_29 = sourceOrdering_1_payload_context;
      end
      3'b010 : begin
        _zz_29 = sourceOrdering_2_payload_context;
      end
      3'b011 : begin
        _zz_29 = sourceOrdering_3_payload_context;
      end
      3'b100 : begin
        _zz_29 = sourceOrdering_4_payload_context;
      end
      default : begin
        _zz_29 = sourceOrdering_5_payload_context;
      end
    endcase
  end

  assign io_pop_toStreams_bufferIn_0_s2mPipe_valid = (io_pop_toStreams_bufferIn_0_valid || io_pop_toStreams_bufferIn_0_s2mPipe_rValid);
  assign io_pop_toStreams_bufferIn_0_ready = (! io_pop_toStreams_bufferIn_0_s2mPipe_rValid);
  assign io_pop_toStreams_bufferIn_0_s2mPipe_payload_hits = (io_pop_toStreams_bufferIn_0_s2mPipe_rValid ? io_pop_toStreams_bufferIn_0_s2mPipe_rData_hits : io_pop_toStreams_bufferIn_0_payload_hits);
  assign io_pop_toStreams_bufferIn_0_s2mPipe_payload_beatCount = (io_pop_toStreams_bufferIn_0_s2mPipe_rValid ? io_pop_toStreams_bufferIn_0_s2mPipe_rData_beatCount : io_pop_toStreams_bufferIn_0_payload_beatCount);
  assign io_pop_toStreams_bufferIn_0_s2mPipe_payload_context = (io_pop_toStreams_bufferIn_0_s2mPipe_rValid ? io_pop_toStreams_bufferIn_0_s2mPipe_rData_context : io_pop_toStreams_bufferIn_0_payload_context);
  assign sourceOrderingUnbuffered_0_valid = io_pop_toStreams_bufferIn_0_s2mPipe_valid;
  assign io_pop_toStreams_bufferIn_0_s2mPipe_ready = sourceOrderingUnbuffered_0_ready;
  assign sourceOrderingUnbuffered_0_payload_hits = io_pop_toStreams_bufferIn_0_s2mPipe_payload_hits;
  assign sourceOrderingUnbuffered_0_payload_beatCount = io_pop_toStreams_bufferIn_0_s2mPipe_payload_beatCount;
  assign sourceOrderingUnbuffered_0_payload_context = io_pop_toStreams_bufferIn_0_s2mPipe_payload_context;
  assign io_pop_toStreams_bufferIn_1_s2mPipe_valid = (io_pop_toStreams_bufferIn_1_valid || io_pop_toStreams_bufferIn_1_s2mPipe_rValid);
  assign io_pop_toStreams_bufferIn_1_ready = (! io_pop_toStreams_bufferIn_1_s2mPipe_rValid);
  assign io_pop_toStreams_bufferIn_1_s2mPipe_payload_hits = (io_pop_toStreams_bufferIn_1_s2mPipe_rValid ? io_pop_toStreams_bufferIn_1_s2mPipe_rData_hits : io_pop_toStreams_bufferIn_1_payload_hits);
  assign io_pop_toStreams_bufferIn_1_s2mPipe_payload_beatCount = (io_pop_toStreams_bufferIn_1_s2mPipe_rValid ? io_pop_toStreams_bufferIn_1_s2mPipe_rData_beatCount : io_pop_toStreams_bufferIn_1_payload_beatCount);
  assign io_pop_toStreams_bufferIn_1_s2mPipe_payload_context = (io_pop_toStreams_bufferIn_1_s2mPipe_rValid ? io_pop_toStreams_bufferIn_1_s2mPipe_rData_context : io_pop_toStreams_bufferIn_1_payload_context);
  assign sourceOrderingUnbuffered_1_valid = io_pop_toStreams_bufferIn_1_s2mPipe_valid;
  assign io_pop_toStreams_bufferIn_1_s2mPipe_ready = sourceOrderingUnbuffered_1_ready;
  assign sourceOrderingUnbuffered_1_payload_hits = io_pop_toStreams_bufferIn_1_s2mPipe_payload_hits;
  assign sourceOrderingUnbuffered_1_payload_beatCount = io_pop_toStreams_bufferIn_1_s2mPipe_payload_beatCount;
  assign sourceOrderingUnbuffered_1_payload_context = io_pop_toStreams_bufferIn_1_s2mPipe_payload_context;
  assign io_pop_toStreams_bufferIn_2_s2mPipe_valid = (io_pop_toStreams_bufferIn_2_valid || io_pop_toStreams_bufferIn_2_s2mPipe_rValid);
  assign io_pop_toStreams_bufferIn_2_ready = (! io_pop_toStreams_bufferIn_2_s2mPipe_rValid);
  assign io_pop_toStreams_bufferIn_2_s2mPipe_payload_hits = (io_pop_toStreams_bufferIn_2_s2mPipe_rValid ? io_pop_toStreams_bufferIn_2_s2mPipe_rData_hits : io_pop_toStreams_bufferIn_2_payload_hits);
  assign io_pop_toStreams_bufferIn_2_s2mPipe_payload_beatCount = (io_pop_toStreams_bufferIn_2_s2mPipe_rValid ? io_pop_toStreams_bufferIn_2_s2mPipe_rData_beatCount : io_pop_toStreams_bufferIn_2_payload_beatCount);
  assign io_pop_toStreams_bufferIn_2_s2mPipe_payload_context = (io_pop_toStreams_bufferIn_2_s2mPipe_rValid ? io_pop_toStreams_bufferIn_2_s2mPipe_rData_context : io_pop_toStreams_bufferIn_2_payload_context);
  assign sourceOrderingUnbuffered_2_valid = io_pop_toStreams_bufferIn_2_s2mPipe_valid;
  assign io_pop_toStreams_bufferIn_2_s2mPipe_ready = sourceOrderingUnbuffered_2_ready;
  assign sourceOrderingUnbuffered_2_payload_hits = io_pop_toStreams_bufferIn_2_s2mPipe_payload_hits;
  assign sourceOrderingUnbuffered_2_payload_beatCount = io_pop_toStreams_bufferIn_2_s2mPipe_payload_beatCount;
  assign sourceOrderingUnbuffered_2_payload_context = io_pop_toStreams_bufferIn_2_s2mPipe_payload_context;
  assign io_pop_toStreams_bufferIn_3_s2mPipe_valid = (io_pop_toStreams_bufferIn_3_valid || io_pop_toStreams_bufferIn_3_s2mPipe_rValid);
  assign io_pop_toStreams_bufferIn_3_ready = (! io_pop_toStreams_bufferIn_3_s2mPipe_rValid);
  assign io_pop_toStreams_bufferIn_3_s2mPipe_payload_hits = (io_pop_toStreams_bufferIn_3_s2mPipe_rValid ? io_pop_toStreams_bufferIn_3_s2mPipe_rData_hits : io_pop_toStreams_bufferIn_3_payload_hits);
  assign io_pop_toStreams_bufferIn_3_s2mPipe_payload_beatCount = (io_pop_toStreams_bufferIn_3_s2mPipe_rValid ? io_pop_toStreams_bufferIn_3_s2mPipe_rData_beatCount : io_pop_toStreams_bufferIn_3_payload_beatCount);
  assign io_pop_toStreams_bufferIn_3_s2mPipe_payload_context = (io_pop_toStreams_bufferIn_3_s2mPipe_rValid ? io_pop_toStreams_bufferIn_3_s2mPipe_rData_context : io_pop_toStreams_bufferIn_3_payload_context);
  assign sourceOrderingUnbuffered_3_valid = io_pop_toStreams_bufferIn_3_s2mPipe_valid;
  assign io_pop_toStreams_bufferIn_3_s2mPipe_ready = sourceOrderingUnbuffered_3_ready;
  assign sourceOrderingUnbuffered_3_payload_hits = io_pop_toStreams_bufferIn_3_s2mPipe_payload_hits;
  assign sourceOrderingUnbuffered_3_payload_beatCount = io_pop_toStreams_bufferIn_3_s2mPipe_payload_beatCount;
  assign sourceOrderingUnbuffered_3_payload_context = io_pop_toStreams_bufferIn_3_s2mPipe_payload_context;
  assign io_pop_toStreams_bufferIn_4_s2mPipe_valid = (io_pop_toStreams_bufferIn_4_valid || io_pop_toStreams_bufferIn_4_s2mPipe_rValid);
  assign io_pop_toStreams_bufferIn_4_ready = (! io_pop_toStreams_bufferIn_4_s2mPipe_rValid);
  assign io_pop_toStreams_bufferIn_4_s2mPipe_payload_hits = (io_pop_toStreams_bufferIn_4_s2mPipe_rValid ? io_pop_toStreams_bufferIn_4_s2mPipe_rData_hits : io_pop_toStreams_bufferIn_4_payload_hits);
  assign io_pop_toStreams_bufferIn_4_s2mPipe_payload_beatCount = (io_pop_toStreams_bufferIn_4_s2mPipe_rValid ? io_pop_toStreams_bufferIn_4_s2mPipe_rData_beatCount : io_pop_toStreams_bufferIn_4_payload_beatCount);
  assign io_pop_toStreams_bufferIn_4_s2mPipe_payload_context = (io_pop_toStreams_bufferIn_4_s2mPipe_rValid ? io_pop_toStreams_bufferIn_4_s2mPipe_rData_context : io_pop_toStreams_bufferIn_4_payload_context);
  assign sourceOrderingUnbuffered_4_valid = io_pop_toStreams_bufferIn_4_s2mPipe_valid;
  assign io_pop_toStreams_bufferIn_4_s2mPipe_ready = sourceOrderingUnbuffered_4_ready;
  assign sourceOrderingUnbuffered_4_payload_hits = io_pop_toStreams_bufferIn_4_s2mPipe_payload_hits;
  assign sourceOrderingUnbuffered_4_payload_beatCount = io_pop_toStreams_bufferIn_4_s2mPipe_payload_beatCount;
  assign sourceOrderingUnbuffered_4_payload_context = io_pop_toStreams_bufferIn_4_s2mPipe_payload_context;
  assign io_pop_toStreams_bufferIn_5_s2mPipe_valid = (io_pop_toStreams_bufferIn_5_valid || io_pop_toStreams_bufferIn_5_s2mPipe_rValid);
  assign io_pop_toStreams_bufferIn_5_ready = (! io_pop_toStreams_bufferIn_5_s2mPipe_rValid);
  assign io_pop_toStreams_bufferIn_5_s2mPipe_payload_hits = (io_pop_toStreams_bufferIn_5_s2mPipe_rValid ? io_pop_toStreams_bufferIn_5_s2mPipe_rData_hits : io_pop_toStreams_bufferIn_5_payload_hits);
  assign io_pop_toStreams_bufferIn_5_s2mPipe_payload_beatCount = (io_pop_toStreams_bufferIn_5_s2mPipe_rValid ? io_pop_toStreams_bufferIn_5_s2mPipe_rData_beatCount : io_pop_toStreams_bufferIn_5_payload_beatCount);
  assign io_pop_toStreams_bufferIn_5_s2mPipe_payload_context = (io_pop_toStreams_bufferIn_5_s2mPipe_rValid ? io_pop_toStreams_bufferIn_5_s2mPipe_rData_context : io_pop_toStreams_bufferIn_5_payload_context);
  assign sourceOrderingUnbuffered_5_valid = io_pop_toStreams_bufferIn_5_s2mPipe_valid;
  assign io_pop_toStreams_bufferIn_5_s2mPipe_ready = sourceOrderingUnbuffered_5_ready;
  assign sourceOrderingUnbuffered_5_payload_hits = io_pop_toStreams_bufferIn_5_s2mPipe_payload_hits;
  assign sourceOrderingUnbuffered_5_payload_beatCount = io_pop_toStreams_bufferIn_5_s2mPipe_payload_beatCount;
  assign sourceOrderingUnbuffered_5_payload_context = io_pop_toStreams_bufferIn_5_s2mPipe_payload_context;
  always @ (*) begin
    io_pop_toStreams_needRefill[0] = io_pop_toStreams_bufferIn_0_ready;
    io_pop_toStreams_needRefill[1] = io_pop_toStreams_bufferIn_1_ready;
    io_pop_toStreams_needRefill[2] = io_pop_toStreams_bufferIn_2_ready;
    io_pop_toStreams_needRefill[3] = io_pop_toStreams_bufferIn_3_ready;
    io_pop_toStreams_needRefill[4] = io_pop_toStreams_bufferIn_4_ready;
    io_pop_toStreams_needRefill[5] = io_pop_toStreams_bufferIn_5_ready;
  end

  assign _zz_1 = (io_pop_toStreams_needRefill & (~ sourceOrderingFifo_io_pop_empty));
  assign io_pop_toStreams_selOh = (_zz_1 & (~ _zz_40));
  assign io_pop_toStreams_nonEmpty = ((~ sourceOrderingFifo_io_pop_empty) != 6'h0);
  assign io_pop_toStreams_bufferIn_0_valid = (io_pop_toStreams_selOh[0] && io_pop_toStreams_nonEmpty);
  assign io_pop_toStreams_bufferIn_0_payload_hits = sourceOrderingFifo_io_pop_stream_payload_hits;
  assign io_pop_toStreams_bufferIn_0_payload_beatCount = sourceOrderingFifo_io_pop_stream_payload_beatCount;
  assign io_pop_toStreams_bufferIn_0_payload_context = sourceOrderingFifo_io_pop_stream_payload_context;
  assign io_pop_toStreams_bufferIn_1_valid = (io_pop_toStreams_selOh[1] && io_pop_toStreams_nonEmpty);
  assign io_pop_toStreams_bufferIn_1_payload_hits = sourceOrderingFifo_io_pop_stream_payload_hits;
  assign io_pop_toStreams_bufferIn_1_payload_beatCount = sourceOrderingFifo_io_pop_stream_payload_beatCount;
  assign io_pop_toStreams_bufferIn_1_payload_context = sourceOrderingFifo_io_pop_stream_payload_context;
  assign io_pop_toStreams_bufferIn_2_valid = (io_pop_toStreams_selOh[2] && io_pop_toStreams_nonEmpty);
  assign io_pop_toStreams_bufferIn_2_payload_hits = sourceOrderingFifo_io_pop_stream_payload_hits;
  assign io_pop_toStreams_bufferIn_2_payload_beatCount = sourceOrderingFifo_io_pop_stream_payload_beatCount;
  assign io_pop_toStreams_bufferIn_2_payload_context = sourceOrderingFifo_io_pop_stream_payload_context;
  assign io_pop_toStreams_bufferIn_3_valid = (io_pop_toStreams_selOh[3] && io_pop_toStreams_nonEmpty);
  assign io_pop_toStreams_bufferIn_3_payload_hits = sourceOrderingFifo_io_pop_stream_payload_hits;
  assign io_pop_toStreams_bufferIn_3_payload_beatCount = sourceOrderingFifo_io_pop_stream_payload_beatCount;
  assign io_pop_toStreams_bufferIn_3_payload_context = sourceOrderingFifo_io_pop_stream_payload_context;
  assign io_pop_toStreams_bufferIn_4_valid = (io_pop_toStreams_selOh[4] && io_pop_toStreams_nonEmpty);
  assign io_pop_toStreams_bufferIn_4_payload_hits = sourceOrderingFifo_io_pop_stream_payload_hits;
  assign io_pop_toStreams_bufferIn_4_payload_beatCount = sourceOrderingFifo_io_pop_stream_payload_beatCount;
  assign io_pop_toStreams_bufferIn_4_payload_context = sourceOrderingFifo_io_pop_stream_payload_context;
  assign io_pop_toStreams_bufferIn_5_valid = (io_pop_toStreams_selOh[5] && io_pop_toStreams_nonEmpty);
  assign io_pop_toStreams_bufferIn_5_payload_hits = sourceOrderingFifo_io_pop_stream_payload_hits;
  assign io_pop_toStreams_bufferIn_5_payload_beatCount = sourceOrderingFifo_io_pop_stream_payload_beatCount;
  assign io_pop_toStreams_bufferIn_5_payload_context = sourceOrderingFifo_io_pop_stream_payload_context;
  always @ (*) begin
    _zz_2[0] = io_pop_toStreams_bufferIn_0_ready;
    _zz_2[1] = io_pop_toStreams_bufferIn_1_ready;
    _zz_2[2] = io_pop_toStreams_bufferIn_2_ready;
    _zz_2[3] = io_pop_toStreams_bufferIn_3_ready;
    _zz_2[4] = io_pop_toStreams_bufferIn_4_ready;
    _zz_2[5] = io_pop_toStreams_bufferIn_5_ready;
  end

  assign _zz_24 = ((io_pop_toStreams_selOh & _zz_2) != 6'h0);
  assign sourceOrderingUnbuffered_0_ready = ((1'b1 && (! sourceOrdering_0_valid)) || sourceOrdering_0_ready);
  assign sourceOrdering_0_valid = sourceOrderingUnbuffered_0_m2sPipe_rValid;
  assign sourceOrdering_0_payload_hits = sourceOrderingUnbuffered_0_m2sPipe_rData_hits;
  assign sourceOrdering_0_payload_beatCount = sourceOrderingUnbuffered_0_m2sPipe_rData_beatCount;
  assign sourceOrdering_0_payload_context = sourceOrderingUnbuffered_0_m2sPipe_rData_context;
  assign sourceOrderingUnbuffered_1_ready = ((1'b1 && (! sourceOrdering_1_valid)) || sourceOrdering_1_ready);
  assign sourceOrdering_1_valid = sourceOrderingUnbuffered_1_m2sPipe_rValid;
  assign sourceOrdering_1_payload_hits = sourceOrderingUnbuffered_1_m2sPipe_rData_hits;
  assign sourceOrdering_1_payload_beatCount = sourceOrderingUnbuffered_1_m2sPipe_rData_beatCount;
  assign sourceOrdering_1_payload_context = sourceOrderingUnbuffered_1_m2sPipe_rData_context;
  assign sourceOrderingUnbuffered_2_ready = ((1'b1 && (! sourceOrdering_2_valid)) || sourceOrdering_2_ready);
  assign sourceOrdering_2_valid = sourceOrderingUnbuffered_2_m2sPipe_rValid;
  assign sourceOrdering_2_payload_hits = sourceOrderingUnbuffered_2_m2sPipe_rData_hits;
  assign sourceOrdering_2_payload_beatCount = sourceOrderingUnbuffered_2_m2sPipe_rData_beatCount;
  assign sourceOrdering_2_payload_context = sourceOrderingUnbuffered_2_m2sPipe_rData_context;
  assign sourceOrderingUnbuffered_3_ready = ((1'b1 && (! sourceOrdering_3_valid)) || sourceOrdering_3_ready);
  assign sourceOrdering_3_valid = sourceOrderingUnbuffered_3_m2sPipe_rValid;
  assign sourceOrdering_3_payload_hits = sourceOrderingUnbuffered_3_m2sPipe_rData_hits;
  assign sourceOrdering_3_payload_beatCount = sourceOrderingUnbuffered_3_m2sPipe_rData_beatCount;
  assign sourceOrdering_3_payload_context = sourceOrderingUnbuffered_3_m2sPipe_rData_context;
  assign sourceOrderingUnbuffered_4_ready = ((1'b1 && (! sourceOrdering_4_valid)) || sourceOrdering_4_ready);
  assign sourceOrdering_4_valid = sourceOrderingUnbuffered_4_m2sPipe_rValid;
  assign sourceOrdering_4_payload_hits = sourceOrderingUnbuffered_4_m2sPipe_rData_hits;
  assign sourceOrdering_4_payload_beatCount = sourceOrderingUnbuffered_4_m2sPipe_rData_beatCount;
  assign sourceOrdering_4_payload_context = sourceOrderingUnbuffered_4_m2sPipe_rData_context;
  assign sourceOrderingUnbuffered_5_ready = ((1'b1 && (! sourceOrdering_5_valid)) || sourceOrdering_5_ready);
  assign sourceOrdering_5_valid = sourceOrderingUnbuffered_5_m2sPipe_rValid;
  assign sourceOrdering_5_payload_hits = sourceOrderingUnbuffered_5_m2sPipe_rData_hits;
  assign sourceOrdering_5_payload_beatCount = sourceOrderingUnbuffered_5_m2sPipe_rData_beatCount;
  assign sourceOrdering_5_payload_context = sourceOrderingUnbuffered_5_m2sPipe_rData_context;
  assign cmdToRspCountMinusOne = ((io_input_cmd_payload_fragment_opcode == 1'b0) ? _zz_41[6 : 3] : 4'b0000);
  always @ (*) begin
    _zz_3[0] = (io_outputs_0_rsp_payload_fragment_source == 4'b0000);
    _zz_3[1] = (io_outputs_0_rsp_payload_fragment_source == 4'b0001);
    _zz_3[2] = (io_outputs_0_rsp_payload_fragment_source == 4'b0101);
    _zz_3[3] = (io_outputs_0_rsp_payload_fragment_source == 4'b0010);
    _zz_3[4] = (io_outputs_0_rsp_payload_fragment_source == 4'b0110);
    _zz_3[5] = (io_outputs_0_rsp_payload_fragment_source == 4'b1010);
  end

  assign io_outputs_0_rsp_ready = 1'b1;
  always @ (*) begin
    portsLogic_0_sourceHits[0] = (((! portsLogic_0_rspFifo_io_pop_empty[0]) && sourceOrdering_0_valid) && sourceOrdering_0_payload_hits[0]);
    portsLogic_0_sourceHits[1] = (((! portsLogic_0_rspFifo_io_pop_empty[1]) && sourceOrdering_1_valid) && sourceOrdering_1_payload_hits[0]);
    portsLogic_0_sourceHits[2] = (((! portsLogic_0_rspFifo_io_pop_empty[2]) && sourceOrdering_2_valid) && sourceOrdering_2_payload_hits[0]);
    portsLogic_0_sourceHits[3] = (((! portsLogic_0_rspFifo_io_pop_empty[3]) && sourceOrdering_3_valid) && sourceOrdering_3_payload_hits[0]);
    portsLogic_0_sourceHits[4] = (((! portsLogic_0_rspFifo_io_pop_empty[4]) && sourceOrdering_4_valid) && sourceOrdering_4_payload_hits[0]);
    portsLogic_0_sourceHits[5] = (((! portsLogic_0_rspFifo_io_pop_empty[5]) && sourceOrdering_5_valid) && sourceOrdering_5_payload_hits[0]);
  end

  assign portsLogic_0_sourceHit = (portsLogic_0_sourceHits != 6'h0);
  assign _zz_4 = portsLogic_0_sourceHits;
  assign portsLogic_0_sourceArbiter = (_zz_4 & (~ _zz_44));
  assign portsLogic_0_sourceSel = (portsLogic_0_lockValid ? portsLogic_0_lockSel : portsLogic_0_sourceArbiter);
  assign portsLogic_0_incomingRspAdd = (((io_outputs_0_cmd_valid && io_outputs_0_cmd_ready) && io_outputs_0_cmd_payload_last) ? _zz_45 : 5'h0);
  assign portsLogic_0_rspFifoFull = (portsLogic_0_rspFifo_io_availability_regNext <= portsLogic_0_incomingRspCount);
  always @ (*) begin
    _zz_5[0] = (io_outputs_1_rsp_payload_fragment_source == 4'b0000);
    _zz_5[1] = (io_outputs_1_rsp_payload_fragment_source == 4'b0001);
    _zz_5[2] = (io_outputs_1_rsp_payload_fragment_source == 4'b0101);
    _zz_5[3] = (io_outputs_1_rsp_payload_fragment_source == 4'b0010);
    _zz_5[4] = (io_outputs_1_rsp_payload_fragment_source == 4'b0110);
    _zz_5[5] = (io_outputs_1_rsp_payload_fragment_source == 4'b1010);
  end

  assign io_outputs_1_rsp_ready = 1'b1;
  always @ (*) begin
    portsLogic_1_sourceHits[0] = (((! portsLogic_1_rspFifo_io_pop_empty[0]) && sourceOrdering_0_valid) && sourceOrdering_0_payload_hits[1]);
    portsLogic_1_sourceHits[1] = (((! portsLogic_1_rspFifo_io_pop_empty[1]) && sourceOrdering_1_valid) && sourceOrdering_1_payload_hits[1]);
    portsLogic_1_sourceHits[2] = (((! portsLogic_1_rspFifo_io_pop_empty[2]) && sourceOrdering_2_valid) && sourceOrdering_2_payload_hits[1]);
    portsLogic_1_sourceHits[3] = (((! portsLogic_1_rspFifo_io_pop_empty[3]) && sourceOrdering_3_valid) && sourceOrdering_3_payload_hits[1]);
    portsLogic_1_sourceHits[4] = (((! portsLogic_1_rspFifo_io_pop_empty[4]) && sourceOrdering_4_valid) && sourceOrdering_4_payload_hits[1]);
    portsLogic_1_sourceHits[5] = (((! portsLogic_1_rspFifo_io_pop_empty[5]) && sourceOrdering_5_valid) && sourceOrdering_5_payload_hits[1]);
  end

  assign portsLogic_1_sourceHit = (portsLogic_1_sourceHits != 6'h0);
  assign _zz_6 = portsLogic_1_sourceHits;
  assign portsLogic_1_sourceArbiter = (_zz_6 & (~ _zz_50));
  assign portsLogic_1_sourceSel = (portsLogic_1_lockValid ? portsLogic_1_lockSel : portsLogic_1_sourceArbiter);
  assign portsLogic_1_incomingRspAdd = (((io_outputs_1_cmd_valid && io_outputs_1_cmd_ready) && io_outputs_1_cmd_payload_last) ? _zz_51 : 5'h0);
  assign portsLogic_1_rspFifoFull = (portsLogic_1_rspFifo_io_availability_regNext <= portsLogic_1_incomingRspCount);
  assign cmdLogic_rspCount = (_zz_56[6 : 3] + 4'b0001);
  assign io_input_cmd_ready = io_input_cmd_fork_io_input_ready;
  always @ (*) begin
    cmdLogic_halt = 1'b0;
    if((cmdLogic_hits_0 && portsLogic_0_rspFifoFull))begin
      cmdLogic_halt = 1'b1;
    end
    if((cmdLogic_hits_1 && portsLogic_1_rspFifoFull))begin
      cmdLogic_halt = 1'b1;
    end
    if(cmdLogic_lock)begin
      cmdLogic_halt = 1'b0;
    end
  end

  assign cmdLogic_hits_0 = ((io_input_cmd_payload_fragment_address & (~ 32'h07ffffff)) == 32'h80000000);
  assign io_outputs_0_cmd_valid = ((io_input_cmd_fork_io_outputs_1_valid && cmdLogic_hits_0) && ((! portsLogic_0_rspFifoFull) || cmdLogic_lock));
  assign _zz_7 = io_input_cmd_fork_io_outputs_1_payload_last;
  assign io_outputs_0_cmd_payload_last = _zz_7;
  assign io_outputs_0_cmd_payload_fragment_source = io_input_cmd_fork_io_outputs_1_payload_fragment_source;
  assign io_outputs_0_cmd_payload_fragment_opcode = io_input_cmd_fork_io_outputs_1_payload_fragment_opcode;
  assign io_outputs_0_cmd_payload_fragment_address = io_input_cmd_fork_io_outputs_1_payload_fragment_address;
  assign io_outputs_0_cmd_payload_fragment_length = io_input_cmd_fork_io_outputs_1_payload_fragment_length;
  assign io_outputs_0_cmd_payload_fragment_data = io_input_cmd_fork_io_outputs_1_payload_fragment_data;
  assign io_outputs_0_cmd_payload_fragment_mask = io_input_cmd_fork_io_outputs_1_payload_fragment_mask;
  assign cmdLogic_hits_1 = ((io_input_cmd_payload_fragment_address & (~ 32'h00ffffff)) == 32'h10000000);
  assign io_outputs_1_cmd_valid = ((io_input_cmd_fork_io_outputs_1_valid && cmdLogic_hits_1) && ((! portsLogic_1_rspFifoFull) || cmdLogic_lock));
  assign _zz_8 = io_input_cmd_fork_io_outputs_1_payload_last;
  assign io_outputs_1_cmd_payload_last = _zz_8;
  assign io_outputs_1_cmd_payload_fragment_source = io_input_cmd_fork_io_outputs_1_payload_fragment_source;
  assign io_outputs_1_cmd_payload_fragment_opcode = io_input_cmd_fork_io_outputs_1_payload_fragment_opcode;
  assign io_outputs_1_cmd_payload_fragment_address = io_input_cmd_fork_io_outputs_1_payload_fragment_address;
  assign io_outputs_1_cmd_payload_fragment_length = io_input_cmd_fork_io_outputs_1_payload_fragment_length;
  assign io_outputs_1_cmd_payload_fragment_data = io_input_cmd_fork_io_outputs_1_payload_fragment_data;
  assign io_outputs_1_cmd_payload_fragment_mask = io_input_cmd_fork_io_outputs_1_payload_fragment_mask;
  assign _zz_28 = ((({(cmdLogic_hits_1 && io_outputs_1_cmd_ready),(cmdLogic_hits_0 && io_outputs_0_cmd_ready)} != 2'b00) || ({cmdLogic_hits_1,cmdLogic_hits_0} == 2'b00)) && (! cmdLogic_halt));
  always @ (*) begin
    _zz_9[0] = (io_input_cmd_payload_fragment_source == 4'b0000);
    _zz_9[1] = (io_input_cmd_payload_fragment_source == 4'b0001);
    _zz_9[2] = (io_input_cmd_payload_fragment_source == 4'b0101);
    _zz_9[3] = (io_input_cmd_payload_fragment_source == 4'b0010);
    _zz_9[4] = (io_input_cmd_payload_fragment_source == 4'b0110);
    _zz_9[5] = (io_input_cmd_payload_fragment_source == 4'b1010);
  end

  always @ (*) begin
    io_input_cmd_fork_io_outputs_0_thrown_valid = io_input_cmd_fork_io_outputs_0_valid;
    if(_zz_30)begin
      io_input_cmd_fork_io_outputs_0_thrown_valid = 1'b0;
    end
  end

  always @ (*) begin
    _zz_27 = io_input_cmd_fork_io_outputs_0_thrown_ready;
    if(_zz_30)begin
      _zz_27 = 1'b1;
    end
  end

  assign io_input_cmd_fork_io_outputs_0_thrown_payload_last = io_input_cmd_fork_io_outputs_0_payload_last;
  assign io_input_cmd_fork_io_outputs_0_thrown_payload_fragment_source = io_input_cmd_fork_io_outputs_0_payload_fragment_source;
  assign io_input_cmd_fork_io_outputs_0_thrown_payload_fragment_opcode = io_input_cmd_fork_io_outputs_0_payload_fragment_opcode;
  assign io_input_cmd_fork_io_outputs_0_thrown_payload_fragment_address = io_input_cmd_fork_io_outputs_0_payload_fragment_address;
  assign io_input_cmd_fork_io_outputs_0_thrown_payload_fragment_length = io_input_cmd_fork_io_outputs_0_payload_fragment_length;
  assign io_input_cmd_fork_io_outputs_0_thrown_payload_fragment_data = io_input_cmd_fork_io_outputs_0_payload_fragment_data;
  assign io_input_cmd_fork_io_outputs_0_thrown_payload_fragment_mask = io_input_cmd_fork_io_outputs_0_payload_fragment_mask;
  assign io_input_cmd_fork_io_outputs_0_thrown_payload_fragment_context = io_input_cmd_fork_io_outputs_0_payload_fragment_context;
  assign io_input_cmd_fork_io_outputs_0_thrown_ready = sourceOrderingFifo_io_push_stream_ready;
  assign _zz_23 = {cmdLogic_hits_1,cmdLogic_hits_0};
  assign _zz_10 = {portsLogic_1_sourceHit,portsLogic_0_sourceHit};
  always @ (*) begin
    rspLogic_arbiterSel = {_zz_59[1],portsLogic_0_sourceHit};
    if(! _zz_31) begin
      rspLogic_arbiterSel = 2'b00;
    end
  end

  assign rspLogic_portSel = (rspLogic_lockValid ? rspLogic_lockSel : rspLogic_arbiterSel);
  always @ (*) begin
    rspLogic_error_hits[0] = (sourceOrdering_0_valid && (sourceOrdering_0_payload_hits == 2'b00));
    rspLogic_error_hits[1] = (sourceOrdering_1_valid && (sourceOrdering_1_payload_hits == 2'b00));
    rspLogic_error_hits[2] = (sourceOrdering_2_valid && (sourceOrdering_2_payload_hits == 2'b00));
    rspLogic_error_hits[3] = (sourceOrdering_3_valid && (sourceOrdering_3_payload_hits == 2'b00));
    rspLogic_error_hits[4] = (sourceOrdering_4_valid && (sourceOrdering_4_payload_hits == 2'b00));
    rspLogic_error_hits[5] = (sourceOrdering_5_valid && (sourceOrdering_5_payload_hits == 2'b00));
  end

  assign _zz_11 = rspLogic_error_hits;
  assign _zz_12 = rspLogic_portSel[0];
  assign _zz_25 = (_zz_12 && io_input_rsp_ready);
  assign _zz_26 = (rspLogic_portSel[1] && io_input_rsp_ready);
  always @ (*) begin
    rspLogic_sourceSel = (_zz_12 ? portsLogic_0_sourceSel : portsLogic_1_sourceSel);
    if(_zz_32)begin
      rspLogic_sourceSel = rspLogic_error_sourceSel;
    end
  end

  always @ (*) begin
    rspLogic_lasts[0] = (sourceOrdering_0_payload_beatCount == rspLogic_beatCounter);
    rspLogic_lasts[1] = (sourceOrdering_1_payload_beatCount == rspLogic_beatCounter);
    rspLogic_lasts[2] = (sourceOrdering_2_payload_beatCount == rspLogic_beatCounter);
    rspLogic_lasts[3] = (sourceOrdering_3_payload_beatCount == rspLogic_beatCounter);
    rspLogic_lasts[4] = (sourceOrdering_4_payload_beatCount == rspLogic_beatCounter);
    rspLogic_lasts[5] = (sourceOrdering_5_payload_beatCount == rspLogic_beatCounter);
  end

  assign rspLogic_last = ((rspLogic_lasts & rspLogic_sourceSel) != 6'h0);
  always @ (*) begin
    _zz_13[0] = portsLogic_0_rspFifo_io_pop_stream_valid;
    _zz_13[1] = portsLogic_1_rspFifo_io_pop_stream_valid;
  end

  always @ (*) begin
    io_input_rsp_valid = ((_zz_13 & rspLogic_portSel) != 2'b00);
    if(_zz_32)begin
      io_input_rsp_valid = 1'b1;
    end
  end

  always @ (*) begin
    io_input_rsp_payload_fragment_opcode = (_zz_12 ? portsLogic_0_rspFifo_io_pop_stream_payload_fragment_opcode : portsLogic_1_rspFifo_io_pop_stream_payload_fragment_opcode);
    if(_zz_32)begin
      io_input_rsp_payload_fragment_opcode = 1'b1;
    end
  end

  assign io_input_rsp_payload_fragment_data = (_zz_12 ? portsLogic_0_rspFifo_io_pop_stream_payload_fragment_data : portsLogic_1_rspFifo_io_pop_stream_payload_fragment_data);
  assign io_input_rsp_payload_last = rspLogic_last;
  assign _zz_14 = rspLogic_sourceSel[1];
  assign _zz_15 = rspLogic_sourceSel[2];
  assign _zz_16 = rspLogic_sourceSel[3];
  assign _zz_17 = rspLogic_sourceSel[4];
  assign _zz_18 = rspLogic_sourceSel[5];
  assign _zz_19 = ((_zz_14 || _zz_16) || _zz_18);
  assign _zz_20 = (_zz_15 || _zz_16);
  assign _zz_21 = (_zz_17 || _zz_18);
  assign io_input_rsp_payload_fragment_context = _zz_29;
  always @ (*) begin
    _zz_22[0] = ({_zz_15,_zz_14} != 2'b00);
    _zz_22[1] = ({_zz_18,{_zz_17,_zz_16}} != 3'b000);
    _zz_22[2] = ({_zz_17,_zz_15} != 2'b00);
    _zz_22[3] = (_zz_18 != 1'b0);
  end

  assign io_input_rsp_payload_fragment_source = _zz_22;
  assign sourceOrdering_0_ready = ((rspLogic_sourceSel[0] && (io_input_rsp_valid && io_input_rsp_ready)) && io_input_rsp_payload_last);
  assign sourceOrdering_1_ready = ((rspLogic_sourceSel[1] && (io_input_rsp_valid && io_input_rsp_ready)) && io_input_rsp_payload_last);
  assign sourceOrdering_2_ready = ((rspLogic_sourceSel[2] && (io_input_rsp_valid && io_input_rsp_ready)) && io_input_rsp_payload_last);
  assign sourceOrdering_3_ready = ((rspLogic_sourceSel[3] && (io_input_rsp_valid && io_input_rsp_ready)) && io_input_rsp_payload_last);
  assign sourceOrdering_4_ready = ((rspLogic_sourceSel[4] && (io_input_rsp_valid && io_input_rsp_ready)) && io_input_rsp_payload_last);
  assign sourceOrdering_5_ready = ((rspLogic_sourceSel[5] && (io_input_rsp_valid && io_input_rsp_ready)) && io_input_rsp_payload_last);
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      io_pop_toStreams_bufferIn_0_s2mPipe_rValid <= 1'b0;
      io_pop_toStreams_bufferIn_1_s2mPipe_rValid <= 1'b0;
      io_pop_toStreams_bufferIn_2_s2mPipe_rValid <= 1'b0;
      io_pop_toStreams_bufferIn_3_s2mPipe_rValid <= 1'b0;
      io_pop_toStreams_bufferIn_4_s2mPipe_rValid <= 1'b0;
      io_pop_toStreams_bufferIn_5_s2mPipe_rValid <= 1'b0;
      sourceOrderingUnbuffered_0_m2sPipe_rValid <= 1'b0;
      sourceOrderingUnbuffered_1_m2sPipe_rValid <= 1'b0;
      sourceOrderingUnbuffered_2_m2sPipe_rValid <= 1'b0;
      sourceOrderingUnbuffered_3_m2sPipe_rValid <= 1'b0;
      sourceOrderingUnbuffered_4_m2sPipe_rValid <= 1'b0;
      sourceOrderingUnbuffered_5_m2sPipe_rValid <= 1'b0;
      portsLogic_0_lockValid <= 1'b0;
      portsLogic_0_incomingRspCount <= 6'h0b;
      portsLogic_1_lockValid <= 1'b0;
      portsLogic_1_incomingRspCount <= 6'h0b;
      cmdLogic_lock <= 1'b0;
      io_input_cmd_fork_io_outputs_0_payload_first <= 1'b1;
      rspLogic_lockValid <= 1'b0;
      rspLogic_error_valid <= 1'b0;
      rspLogic_beatCounter <= 4'b0000;
    end else begin
      if(io_pop_toStreams_bufferIn_0_s2mPipe_ready)begin
        io_pop_toStreams_bufferIn_0_s2mPipe_rValid <= 1'b0;
      end
      if(_zz_33)begin
        io_pop_toStreams_bufferIn_0_s2mPipe_rValid <= io_pop_toStreams_bufferIn_0_valid;
      end
      if(io_pop_toStreams_bufferIn_1_s2mPipe_ready)begin
        io_pop_toStreams_bufferIn_1_s2mPipe_rValid <= 1'b0;
      end
      if(_zz_34)begin
        io_pop_toStreams_bufferIn_1_s2mPipe_rValid <= io_pop_toStreams_bufferIn_1_valid;
      end
      if(io_pop_toStreams_bufferIn_2_s2mPipe_ready)begin
        io_pop_toStreams_bufferIn_2_s2mPipe_rValid <= 1'b0;
      end
      if(_zz_35)begin
        io_pop_toStreams_bufferIn_2_s2mPipe_rValid <= io_pop_toStreams_bufferIn_2_valid;
      end
      if(io_pop_toStreams_bufferIn_3_s2mPipe_ready)begin
        io_pop_toStreams_bufferIn_3_s2mPipe_rValid <= 1'b0;
      end
      if(_zz_36)begin
        io_pop_toStreams_bufferIn_3_s2mPipe_rValid <= io_pop_toStreams_bufferIn_3_valid;
      end
      if(io_pop_toStreams_bufferIn_4_s2mPipe_ready)begin
        io_pop_toStreams_bufferIn_4_s2mPipe_rValid <= 1'b0;
      end
      if(_zz_37)begin
        io_pop_toStreams_bufferIn_4_s2mPipe_rValid <= io_pop_toStreams_bufferIn_4_valid;
      end
      if(io_pop_toStreams_bufferIn_5_s2mPipe_ready)begin
        io_pop_toStreams_bufferIn_5_s2mPipe_rValid <= 1'b0;
      end
      if(_zz_38)begin
        io_pop_toStreams_bufferIn_5_s2mPipe_rValid <= io_pop_toStreams_bufferIn_5_valid;
      end
      if(sourceOrderingUnbuffered_0_ready)begin
        sourceOrderingUnbuffered_0_m2sPipe_rValid <= sourceOrderingUnbuffered_0_valid;
      end
      if(sourceOrderingUnbuffered_1_ready)begin
        sourceOrderingUnbuffered_1_m2sPipe_rValid <= sourceOrderingUnbuffered_1_valid;
      end
      if(sourceOrderingUnbuffered_2_ready)begin
        sourceOrderingUnbuffered_2_m2sPipe_rValid <= sourceOrderingUnbuffered_2_valid;
      end
      if(sourceOrderingUnbuffered_3_ready)begin
        sourceOrderingUnbuffered_3_m2sPipe_rValid <= sourceOrderingUnbuffered_3_valid;
      end
      if(sourceOrderingUnbuffered_4_ready)begin
        sourceOrderingUnbuffered_4_m2sPipe_rValid <= sourceOrderingUnbuffered_4_valid;
      end
      if(sourceOrderingUnbuffered_5_ready)begin
        sourceOrderingUnbuffered_5_m2sPipe_rValid <= sourceOrderingUnbuffered_5_valid;
      end
      `ifndef SYNTHESIS
        `ifdef FORMAL
          assert((! (io_outputs_0_rsp_valid && (! portsLogic_0_rspFifo_io_push_stream_ready))))
        `else
          if(!(! (io_outputs_0_rsp_valid && (! portsLogic_0_rspFifo_io_push_stream_ready)))) begin
            $display("FAILURE ");
            $finish;
          end
        `endif
      `endif
      if(io_input_rsp_valid)begin
        portsLogic_0_lockValid <= 1'b1;
        if((io_input_rsp_ready && io_input_rsp_payload_last))begin
          portsLogic_0_lockValid <= 1'b0;
        end
      end
      portsLogic_0_incomingRspCount <= (_zz_46 - _zz_49);
      `ifndef SYNTHESIS
        `ifdef FORMAL
          assert((! (io_outputs_1_rsp_valid && (! portsLogic_1_rspFifo_io_push_stream_ready))))
        `else
          if(!(! (io_outputs_1_rsp_valid && (! portsLogic_1_rspFifo_io_push_stream_ready)))) begin
            $display("FAILURE ");
            $finish;
          end
        `endif
      `endif
      if(io_input_rsp_valid)begin
        portsLogic_1_lockValid <= 1'b1;
        if((io_input_rsp_ready && io_input_rsp_payload_last))begin
          portsLogic_1_lockValid <= 1'b0;
        end
      end
      portsLogic_1_incomingRspCount <= (_zz_52 - _zz_55);
      if((io_input_cmd_valid && (! cmdLogic_halt)))begin
        cmdLogic_lock <= 1'b1;
      end
      if(io_input_cmd_ready)begin
        cmdLogic_lock <= 1'b0;
      end
      if((io_input_cmd_fork_io_outputs_0_valid && _zz_27))begin
        io_input_cmd_fork_io_outputs_0_payload_first <= io_input_cmd_fork_io_outputs_0_payload_last;
      end
      if(_zz_31)begin
        if(_zz_39)begin
          rspLogic_error_valid <= 1'b1;
        end
      end else begin
        if((((io_input_rsp_valid && io_input_rsp_ready) && io_input_rsp_payload_last) && (rspLogic_portSel == 2'b00)))begin
          rspLogic_error_valid <= 1'b0;
        end
      end
      if(io_input_rsp_valid)begin
        rspLogic_lockValid <= 1'b1;
        if(io_input_rsp_ready)begin
          rspLogic_beatCounter <= (rspLogic_beatCounter + 4'b0001);
          if(io_input_rsp_payload_last)begin
            rspLogic_lockValid <= 1'b0;
            rspLogic_beatCounter <= 4'b0000;
          end
        end
      end
    end
  end

  always @ (posedge CLKOUT0) begin
    if(_zz_33)begin
      io_pop_toStreams_bufferIn_0_s2mPipe_rData_hits <= io_pop_toStreams_bufferIn_0_payload_hits;
      io_pop_toStreams_bufferIn_0_s2mPipe_rData_beatCount <= io_pop_toStreams_bufferIn_0_payload_beatCount;
      io_pop_toStreams_bufferIn_0_s2mPipe_rData_context <= io_pop_toStreams_bufferIn_0_payload_context;
    end
    if(_zz_34)begin
      io_pop_toStreams_bufferIn_1_s2mPipe_rData_hits <= io_pop_toStreams_bufferIn_1_payload_hits;
      io_pop_toStreams_bufferIn_1_s2mPipe_rData_beatCount <= io_pop_toStreams_bufferIn_1_payload_beatCount;
      io_pop_toStreams_bufferIn_1_s2mPipe_rData_context <= io_pop_toStreams_bufferIn_1_payload_context;
    end
    if(_zz_35)begin
      io_pop_toStreams_bufferIn_2_s2mPipe_rData_hits <= io_pop_toStreams_bufferIn_2_payload_hits;
      io_pop_toStreams_bufferIn_2_s2mPipe_rData_beatCount <= io_pop_toStreams_bufferIn_2_payload_beatCount;
      io_pop_toStreams_bufferIn_2_s2mPipe_rData_context <= io_pop_toStreams_bufferIn_2_payload_context;
    end
    if(_zz_36)begin
      io_pop_toStreams_bufferIn_3_s2mPipe_rData_hits <= io_pop_toStreams_bufferIn_3_payload_hits;
      io_pop_toStreams_bufferIn_3_s2mPipe_rData_beatCount <= io_pop_toStreams_bufferIn_3_payload_beatCount;
      io_pop_toStreams_bufferIn_3_s2mPipe_rData_context <= io_pop_toStreams_bufferIn_3_payload_context;
    end
    if(_zz_37)begin
      io_pop_toStreams_bufferIn_4_s2mPipe_rData_hits <= io_pop_toStreams_bufferIn_4_payload_hits;
      io_pop_toStreams_bufferIn_4_s2mPipe_rData_beatCount <= io_pop_toStreams_bufferIn_4_payload_beatCount;
      io_pop_toStreams_bufferIn_4_s2mPipe_rData_context <= io_pop_toStreams_bufferIn_4_payload_context;
    end
    if(_zz_38)begin
      io_pop_toStreams_bufferIn_5_s2mPipe_rData_hits <= io_pop_toStreams_bufferIn_5_payload_hits;
      io_pop_toStreams_bufferIn_5_s2mPipe_rData_beatCount <= io_pop_toStreams_bufferIn_5_payload_beatCount;
      io_pop_toStreams_bufferIn_5_s2mPipe_rData_context <= io_pop_toStreams_bufferIn_5_payload_context;
    end
    if(sourceOrderingUnbuffered_0_ready)begin
      sourceOrderingUnbuffered_0_m2sPipe_rData_hits <= sourceOrderingUnbuffered_0_payload_hits;
      sourceOrderingUnbuffered_0_m2sPipe_rData_beatCount <= sourceOrderingUnbuffered_0_payload_beatCount;
      sourceOrderingUnbuffered_0_m2sPipe_rData_context <= sourceOrderingUnbuffered_0_payload_context;
    end
    if(sourceOrderingUnbuffered_1_ready)begin
      sourceOrderingUnbuffered_1_m2sPipe_rData_hits <= sourceOrderingUnbuffered_1_payload_hits;
      sourceOrderingUnbuffered_1_m2sPipe_rData_beatCount <= sourceOrderingUnbuffered_1_payload_beatCount;
      sourceOrderingUnbuffered_1_m2sPipe_rData_context <= sourceOrderingUnbuffered_1_payload_context;
    end
    if(sourceOrderingUnbuffered_2_ready)begin
      sourceOrderingUnbuffered_2_m2sPipe_rData_hits <= sourceOrderingUnbuffered_2_payload_hits;
      sourceOrderingUnbuffered_2_m2sPipe_rData_beatCount <= sourceOrderingUnbuffered_2_payload_beatCount;
      sourceOrderingUnbuffered_2_m2sPipe_rData_context <= sourceOrderingUnbuffered_2_payload_context;
    end
    if(sourceOrderingUnbuffered_3_ready)begin
      sourceOrderingUnbuffered_3_m2sPipe_rData_hits <= sourceOrderingUnbuffered_3_payload_hits;
      sourceOrderingUnbuffered_3_m2sPipe_rData_beatCount <= sourceOrderingUnbuffered_3_payload_beatCount;
      sourceOrderingUnbuffered_3_m2sPipe_rData_context <= sourceOrderingUnbuffered_3_payload_context;
    end
    if(sourceOrderingUnbuffered_4_ready)begin
      sourceOrderingUnbuffered_4_m2sPipe_rData_hits <= sourceOrderingUnbuffered_4_payload_hits;
      sourceOrderingUnbuffered_4_m2sPipe_rData_beatCount <= sourceOrderingUnbuffered_4_payload_beatCount;
      sourceOrderingUnbuffered_4_m2sPipe_rData_context <= sourceOrderingUnbuffered_4_payload_context;
    end
    if(sourceOrderingUnbuffered_5_ready)begin
      sourceOrderingUnbuffered_5_m2sPipe_rData_hits <= sourceOrderingUnbuffered_5_payload_hits;
      sourceOrderingUnbuffered_5_m2sPipe_rData_beatCount <= sourceOrderingUnbuffered_5_payload_beatCount;
      sourceOrderingUnbuffered_5_m2sPipe_rData_context <= sourceOrderingUnbuffered_5_payload_context;
    end
    if(io_input_rsp_valid)begin
      portsLogic_0_lockSel <= portsLogic_0_sourceSel;
    end
    portsLogic_0_rspFifo_io_availability_regNext <= portsLogic_0_rspFifo_io_availability;
    if(io_input_rsp_valid)begin
      portsLogic_1_lockSel <= portsLogic_1_sourceSel;
    end
    portsLogic_1_rspFifo_io_availability_regNext <= portsLogic_1_rspFifo_io_availability;
    if(_zz_31)begin
      if(_zz_39)begin
        rspLogic_error_sourceSel <= (_zz_11 & (~ _zz_61));
      end
    end
    if(io_input_rsp_valid)begin
      rspLogic_lockSel <= rspLogic_portSel;
    end
  end


endmodule

module BmbDecoder_4 (
  input               io_input_cmd_valid,
  output reg          io_input_cmd_ready,
  input               io_input_cmd_payload_last,
  input      [0:0]    io_input_cmd_payload_fragment_source,
  input      [0:0]    io_input_cmd_payload_fragment_opcode,
  input      [31:0]   io_input_cmd_payload_fragment_address,
  input      [5:0]    io_input_cmd_payload_fragment_length,
  output reg          io_input_rsp_valid,
  input               io_input_rsp_ready,
  output reg          io_input_rsp_payload_last,
  output reg [0:0]    io_input_rsp_payload_fragment_source,
  output reg [0:0]    io_input_rsp_payload_fragment_opcode,
  output     [63:0]   io_input_rsp_payload_fragment_data,
  output reg          io_outputs_0_cmd_valid,
  input               io_outputs_0_cmd_ready,
  output              io_outputs_0_cmd_payload_last,
  output     [0:0]    io_outputs_0_cmd_payload_fragment_source,
  output     [0:0]    io_outputs_0_cmd_payload_fragment_opcode,
  output     [31:0]   io_outputs_0_cmd_payload_fragment_address,
  output     [5:0]    io_outputs_0_cmd_payload_fragment_length,
  input               io_outputs_0_rsp_valid,
  output              io_outputs_0_rsp_ready,
  input               io_outputs_0_rsp_payload_last,
  input      [0:0]    io_outputs_0_rsp_payload_fragment_source,
  input      [0:0]    io_outputs_0_rsp_payload_fragment_opcode,
  input      [63:0]   io_outputs_0_rsp_payload_fragment_data,
  output reg          io_outputs_1_cmd_valid,
  input               io_outputs_1_cmd_ready,
  output              io_outputs_1_cmd_payload_last,
  output     [0:0]    io_outputs_1_cmd_payload_fragment_source,
  output     [0:0]    io_outputs_1_cmd_payload_fragment_opcode,
  output     [31:0]   io_outputs_1_cmd_payload_fragment_address,
  output     [5:0]    io_outputs_1_cmd_payload_fragment_length,
  input               io_outputs_1_rsp_valid,
  output              io_outputs_1_rsp_ready,
  input               io_outputs_1_rsp_payload_last,
  input      [0:0]    io_outputs_1_rsp_payload_fragment_source,
  input      [0:0]    io_outputs_1_rsp_payload_fragment_opcode,
  input      [63:0]   io_outputs_1_rsp_payload_fragment_data,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  reg                 _zz_4;
  reg        [0:0]    _zz_5;
  reg        [0:0]    _zz_6;
  reg        [63:0]   _zz_7;
  wire       [3:0]    _zz_8;
  wire       [0:0]    _zz_9;
  wire       [3:0]    _zz_10;
  wire       [0:0]    _zz_11;
  wire       [3:0]    _zz_12;
  wire                logic_hits_0;
  wire                logic_hits_1;
  wire                _zz_1;
  wire                _zz_2;
  wire                logic_noHit;
  reg        [3:0]    logic_rspPendingCounter;
  wire                logic_cmdWait;
  reg                 logic_rspHits_0;
  reg                 logic_rspHits_1;
  wire                logic_rspPending;
  wire                logic_rspNoHitValid;
  reg                 logic_rspNoHit_doIt;
  reg                 logic_rspNoHit_singleBeatRsp;
  reg        [0:0]    logic_rspNoHit_source;
  reg        [2:0]    logic_rspNoHit_counter;
  wire       [0:0]    _zz_3;

  assign _zz_8 = (logic_rspPendingCounter + _zz_10);
  assign _zz_9 = ((io_input_cmd_valid && io_input_cmd_ready) && io_input_cmd_payload_last);
  assign _zz_10 = {3'd0, _zz_9};
  assign _zz_11 = ((io_input_rsp_valid && io_input_rsp_ready) && io_input_rsp_payload_last);
  assign _zz_12 = {3'd0, _zz_11};
  always @(*) begin
    case(_zz_3)
      1'b0 : begin
        _zz_4 = io_outputs_0_rsp_payload_last;
        _zz_5 = io_outputs_0_rsp_payload_fragment_source;
        _zz_6 = io_outputs_0_rsp_payload_fragment_opcode;
        _zz_7 = io_outputs_0_rsp_payload_fragment_data;
      end
      default : begin
        _zz_4 = io_outputs_1_rsp_payload_last;
        _zz_5 = io_outputs_1_rsp_payload_fragment_source;
        _zz_6 = io_outputs_1_rsp_payload_fragment_opcode;
        _zz_7 = io_outputs_1_rsp_payload_fragment_data;
      end
    endcase
  end

  assign logic_hits_0 = ((io_input_cmd_payload_fragment_address & (~ 32'h07ffffff)) == 32'h80000000);
  always @ (*) begin
    io_outputs_0_cmd_valid = (io_input_cmd_valid && logic_hits_0);
    if(logic_cmdWait)begin
      io_outputs_0_cmd_valid = 1'b0;
    end
  end

  assign _zz_1 = io_input_cmd_payload_last;
  assign io_outputs_0_cmd_payload_last = _zz_1;
  assign io_outputs_0_cmd_payload_fragment_source = io_input_cmd_payload_fragment_source;
  assign io_outputs_0_cmd_payload_fragment_opcode = io_input_cmd_payload_fragment_opcode;
  assign io_outputs_0_cmd_payload_fragment_address = io_input_cmd_payload_fragment_address;
  assign io_outputs_0_cmd_payload_fragment_length = io_input_cmd_payload_fragment_length;
  assign logic_hits_1 = ((io_input_cmd_payload_fragment_address & (~ 32'h00ffffff)) == 32'h10000000);
  always @ (*) begin
    io_outputs_1_cmd_valid = (io_input_cmd_valid && logic_hits_1);
    if(logic_cmdWait)begin
      io_outputs_1_cmd_valid = 1'b0;
    end
  end

  assign _zz_2 = io_input_cmd_payload_last;
  assign io_outputs_1_cmd_payload_last = _zz_2;
  assign io_outputs_1_cmd_payload_fragment_source = io_input_cmd_payload_fragment_source;
  assign io_outputs_1_cmd_payload_fragment_opcode = io_input_cmd_payload_fragment_opcode;
  assign io_outputs_1_cmd_payload_fragment_address = io_input_cmd_payload_fragment_address;
  assign io_outputs_1_cmd_payload_fragment_length = io_input_cmd_payload_fragment_length;
  assign logic_noHit = (! ({logic_hits_1,logic_hits_0} != 2'b00));
  always @ (*) begin
    io_input_cmd_ready = (({(logic_hits_1 && io_outputs_1_cmd_ready),(logic_hits_0 && io_outputs_0_cmd_ready)} != 2'b00) || logic_noHit);
    if(logic_cmdWait)begin
      io_input_cmd_ready = 1'b0;
    end
  end

  assign logic_rspPending = (logic_rspPendingCounter != 4'b0000);
  assign logic_rspNoHitValid = (! ({logic_rspHits_1,logic_rspHits_0} != 2'b00));
  always @ (*) begin
    io_input_rsp_valid = (({io_outputs_1_rsp_valid,io_outputs_0_rsp_valid} != 2'b00) || (logic_rspPending && logic_rspNoHitValid));
    if(logic_rspNoHit_doIt)begin
      io_input_rsp_valid = 1'b1;
    end
  end

  assign _zz_3 = logic_rspHits_1;
  always @ (*) begin
    io_input_rsp_payload_last = _zz_4;
    if(logic_rspNoHit_doIt)begin
      io_input_rsp_payload_last = 1'b0;
      if((logic_rspNoHit_counter == 3'b000))begin
        io_input_rsp_payload_last = 1'b1;
      end
    end
  end

  always @ (*) begin
    io_input_rsp_payload_fragment_source = _zz_5;
    if(logic_rspNoHit_doIt)begin
      io_input_rsp_payload_fragment_source = logic_rspNoHit_source;
    end
  end

  always @ (*) begin
    io_input_rsp_payload_fragment_opcode = _zz_6;
    if(logic_rspNoHit_doIt)begin
      io_input_rsp_payload_fragment_opcode = 1'b1;
    end
  end

  assign io_input_rsp_payload_fragment_data = _zz_7;
  assign io_outputs_0_rsp_ready = io_input_rsp_ready;
  assign io_outputs_1_rsp_ready = io_input_rsp_ready;
  assign logic_cmdWait = ((logic_rspPending && (((logic_hits_0 != logic_rspHits_0) || (logic_hits_1 != logic_rspHits_1)) || logic_rspNoHitValid)) || (logic_rspPendingCounter == 4'b1111));
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      logic_rspPendingCounter <= 4'b0000;
      logic_rspNoHit_doIt <= 1'b0;
    end else begin
      logic_rspPendingCounter <= (_zz_8 - _zz_12);
      if(((io_input_rsp_valid && io_input_rsp_ready) && io_input_rsp_payload_last))begin
        logic_rspNoHit_doIt <= 1'b0;
      end
      if((((io_input_cmd_valid && io_input_cmd_ready) && logic_noHit) && io_input_cmd_payload_last))begin
        logic_rspNoHit_doIt <= 1'b1;
      end
    end
  end

  always @ (posedge CLKOUT0) begin
    if((io_input_cmd_valid && (! logic_cmdWait)))begin
      logic_rspHits_0 <= logic_hits_0;
      logic_rspHits_1 <= logic_hits_1;
    end
    if((io_input_cmd_valid && io_input_cmd_ready))begin
      logic_rspNoHit_singleBeatRsp <= (io_input_cmd_payload_fragment_opcode == 1'b1);
    end
    if((io_input_cmd_valid && io_input_cmd_ready))begin
      logic_rspNoHit_source <= io_input_cmd_payload_fragment_source;
    end
    if((io_input_cmd_valid && io_input_cmd_ready))begin
      logic_rspNoHit_counter <= io_input_cmd_payload_fragment_length[5 : 3];
    end
    if(logic_rspNoHit_doIt)begin
      if((io_input_rsp_valid && io_input_rsp_ready))begin
        logic_rspNoHit_counter <= (logic_rspNoHit_counter - 3'b001);
      end
    end
  end


endmodule

module BmbArbiter_2 (
  input               io_inputs_0_cmd_valid,
  output              io_inputs_0_cmd_ready,
  input               io_inputs_0_cmd_payload_last,
  input      [0:0]    io_inputs_0_cmd_payload_fragment_opcode,
  input      [23:0]   io_inputs_0_cmd_payload_fragment_address,
  input      [1:0]    io_inputs_0_cmd_payload_fragment_length,
  input      [31:0]   io_inputs_0_cmd_payload_fragment_data,
  input      [3:0]    io_inputs_0_cmd_payload_fragment_mask,
  input      [6:0]    io_inputs_0_cmd_payload_fragment_context,
  output              io_inputs_0_rsp_valid,
  input               io_inputs_0_rsp_ready,
  output              io_inputs_0_rsp_payload_last,
  output     [0:0]    io_inputs_0_rsp_payload_fragment_opcode,
  output     [31:0]   io_inputs_0_rsp_payload_fragment_data,
  output     [6:0]    io_inputs_0_rsp_payload_fragment_context,
  input               io_inputs_1_cmd_valid,
  output              io_inputs_1_cmd_ready,
  input               io_inputs_1_cmd_payload_last,
  input      [0:0]    io_inputs_1_cmd_payload_fragment_opcode,
  input      [23:0]   io_inputs_1_cmd_payload_fragment_address,
  input      [1:0]    io_inputs_1_cmd_payload_fragment_length,
  input      [31:0]   io_inputs_1_cmd_payload_fragment_data,
  input      [3:0]    io_inputs_1_cmd_payload_fragment_mask,
  input      [3:0]    io_inputs_1_cmd_payload_fragment_context,
  output              io_inputs_1_rsp_valid,
  input               io_inputs_1_rsp_ready,
  output              io_inputs_1_rsp_payload_last,
  output     [0:0]    io_inputs_1_rsp_payload_fragment_opcode,
  output     [31:0]   io_inputs_1_rsp_payload_fragment_data,
  output     [3:0]    io_inputs_1_rsp_payload_fragment_context,
  output              io_output_cmd_valid,
  input               io_output_cmd_ready,
  output              io_output_cmd_payload_last,
  output     [0:0]    io_output_cmd_payload_fragment_source,
  output     [0:0]    io_output_cmd_payload_fragment_opcode,
  output     [23:0]   io_output_cmd_payload_fragment_address,
  output     [1:0]    io_output_cmd_payload_fragment_length,
  output     [31:0]   io_output_cmd_payload_fragment_data,
  output     [3:0]    io_output_cmd_payload_fragment_mask,
  output     [6:0]    io_output_cmd_payload_fragment_context,
  input               io_output_rsp_valid,
  output              io_output_rsp_ready,
  input               io_output_rsp_payload_last,
  input      [0:0]    io_output_rsp_payload_fragment_source,
  input      [0:0]    io_output_rsp_payload_fragment_opcode,
  input      [31:0]   io_output_rsp_payload_fragment_data,
  input      [6:0]    io_output_rsp_payload_fragment_context,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  wire       [0:0]    _zz_1;
  wire       [0:0]    _zz_2;
  wire       [6:0]    _zz_3;
  reg                 _zz_4;
  wire                memory_arbiter_io_inputs_0_ready;
  wire                memory_arbiter_io_inputs_1_ready;
  wire                memory_arbiter_io_output_valid;
  wire                memory_arbiter_io_output_payload_last;
  wire       [0:0]    memory_arbiter_io_output_payload_fragment_source;
  wire       [0:0]    memory_arbiter_io_output_payload_fragment_opcode;
  wire       [23:0]   memory_arbiter_io_output_payload_fragment_address;
  wire       [1:0]    memory_arbiter_io_output_payload_fragment_length;
  wire       [31:0]   memory_arbiter_io_output_payload_fragment_data;
  wire       [3:0]    memory_arbiter_io_output_payload_fragment_mask;
  wire       [6:0]    memory_arbiter_io_output_payload_fragment_context;
  wire       [0:0]    memory_arbiter_io_chosen;
  wire       [1:0]    memory_arbiter_io_chosenOH;
  wire       [1:0]    _zz_5;
  wire       [0:0]    memory_rspSel;

  assign _zz_5 = {memory_arbiter_io_output_payload_fragment_source,memory_arbiter_io_chosen};
  StreamArbiter_5 memory_arbiter (
    .io_inputs_0_valid                       (io_inputs_0_cmd_valid                                    ), //i
    .io_inputs_0_ready                       (memory_arbiter_io_inputs_0_ready                         ), //o
    .io_inputs_0_payload_last                (io_inputs_0_cmd_payload_last                             ), //i
    .io_inputs_0_payload_fragment_source     (_zz_1                                                    ), //i
    .io_inputs_0_payload_fragment_opcode     (io_inputs_0_cmd_payload_fragment_opcode                  ), //i
    .io_inputs_0_payload_fragment_address    (io_inputs_0_cmd_payload_fragment_address[23:0]           ), //i
    .io_inputs_0_payload_fragment_length     (io_inputs_0_cmd_payload_fragment_length[1:0]             ), //i
    .io_inputs_0_payload_fragment_data       (io_inputs_0_cmd_payload_fragment_data[31:0]              ), //i
    .io_inputs_0_payload_fragment_mask       (io_inputs_0_cmd_payload_fragment_mask[3:0]               ), //i
    .io_inputs_0_payload_fragment_context    (io_inputs_0_cmd_payload_fragment_context[6:0]            ), //i
    .io_inputs_1_valid                       (io_inputs_1_cmd_valid                                    ), //i
    .io_inputs_1_ready                       (memory_arbiter_io_inputs_1_ready                         ), //o
    .io_inputs_1_payload_last                (io_inputs_1_cmd_payload_last                             ), //i
    .io_inputs_1_payload_fragment_source     (_zz_2                                                    ), //i
    .io_inputs_1_payload_fragment_opcode     (io_inputs_1_cmd_payload_fragment_opcode                  ), //i
    .io_inputs_1_payload_fragment_address    (io_inputs_1_cmd_payload_fragment_address[23:0]           ), //i
    .io_inputs_1_payload_fragment_length     (io_inputs_1_cmd_payload_fragment_length[1:0]             ), //i
    .io_inputs_1_payload_fragment_data       (io_inputs_1_cmd_payload_fragment_data[31:0]              ), //i
    .io_inputs_1_payload_fragment_mask       (io_inputs_1_cmd_payload_fragment_mask[3:0]               ), //i
    .io_inputs_1_payload_fragment_context    (_zz_3[6:0]                                               ), //i
    .io_output_valid                         (memory_arbiter_io_output_valid                           ), //o
    .io_output_ready                         (io_output_cmd_ready                                      ), //i
    .io_output_payload_last                  (memory_arbiter_io_output_payload_last                    ), //o
    .io_output_payload_fragment_source       (memory_arbiter_io_output_payload_fragment_source         ), //o
    .io_output_payload_fragment_opcode       (memory_arbiter_io_output_payload_fragment_opcode         ), //o
    .io_output_payload_fragment_address      (memory_arbiter_io_output_payload_fragment_address[23:0]  ), //o
    .io_output_payload_fragment_length       (memory_arbiter_io_output_payload_fragment_length[1:0]    ), //o
    .io_output_payload_fragment_data         (memory_arbiter_io_output_payload_fragment_data[31:0]     ), //o
    .io_output_payload_fragment_mask         (memory_arbiter_io_output_payload_fragment_mask[3:0]      ), //o
    .io_output_payload_fragment_context      (memory_arbiter_io_output_payload_fragment_context[6:0]   ), //o
    .io_chosen                               (memory_arbiter_io_chosen                                 ), //o
    .io_chosenOH                             (memory_arbiter_io_chosenOH[1:0]                          ), //o
    .CLKOUT0                                 (CLKOUT0                                                  ), //i
    .systemCd_logic_outputReset              (systemCd_logic_outputReset                               )  //i
  );
  always @(*) begin
    case(memory_rspSel)
      1'b0 : begin
        _zz_4 = io_inputs_0_rsp_ready;
      end
      default : begin
        _zz_4 = io_inputs_1_rsp_ready;
      end
    endcase
  end

  assign io_inputs_0_cmd_ready = memory_arbiter_io_inputs_0_ready;
  assign _zz_1 = 1'b0;
  assign io_inputs_1_cmd_ready = memory_arbiter_io_inputs_1_ready;
  assign _zz_2 = 1'b0;
  assign _zz_3 = {3'd0, io_inputs_1_cmd_payload_fragment_context};
  assign io_output_cmd_valid = memory_arbiter_io_output_valid;
  assign io_output_cmd_payload_last = memory_arbiter_io_output_payload_last;
  assign io_output_cmd_payload_fragment_opcode = memory_arbiter_io_output_payload_fragment_opcode;
  assign io_output_cmd_payload_fragment_address = memory_arbiter_io_output_payload_fragment_address;
  assign io_output_cmd_payload_fragment_length = memory_arbiter_io_output_payload_fragment_length;
  assign io_output_cmd_payload_fragment_data = memory_arbiter_io_output_payload_fragment_data;
  assign io_output_cmd_payload_fragment_mask = memory_arbiter_io_output_payload_fragment_mask;
  assign io_output_cmd_payload_fragment_context = memory_arbiter_io_output_payload_fragment_context;
  assign io_output_cmd_payload_fragment_source = _zz_5[0:0];
  assign memory_rspSel = io_output_rsp_payload_fragment_source[0 : 0];
  assign io_inputs_0_rsp_valid = (io_output_rsp_valid && (memory_rspSel == 1'b0));
  assign io_inputs_0_rsp_payload_last = io_output_rsp_payload_last;
  assign io_inputs_0_rsp_payload_fragment_opcode = io_output_rsp_payload_fragment_opcode;
  assign io_inputs_0_rsp_payload_fragment_data = io_output_rsp_payload_fragment_data;
  assign io_inputs_0_rsp_payload_fragment_context = io_output_rsp_payload_fragment_context;
  assign io_inputs_1_rsp_valid = (io_output_rsp_valid && (memory_rspSel == 1'b1));
  assign io_inputs_1_rsp_payload_last = io_output_rsp_payload_last;
  assign io_inputs_1_rsp_payload_fragment_opcode = io_output_rsp_payload_fragment_opcode;
  assign io_inputs_1_rsp_payload_fragment_data = io_output_rsp_payload_fragment_data;
  assign io_inputs_1_rsp_payload_fragment_context = io_output_rsp_payload_fragment_context[3:0];
  assign io_output_rsp_ready = _zz_4;

endmodule

module BmbCcToggle (
  input               io_input_cmd_valid,
  output              io_input_cmd_ready,
  input               io_input_cmd_payload_last,
  input      [0:0]    io_input_cmd_payload_fragment_source,
  input      [0:0]    io_input_cmd_payload_fragment_opcode,
  input      [23:0]   io_input_cmd_payload_fragment_address,
  input      [1:0]    io_input_cmd_payload_fragment_length,
  input      [31:0]   io_input_cmd_payload_fragment_data,
  input      [3:0]    io_input_cmd_payload_fragment_mask,
  input      [6:0]    io_input_cmd_payload_fragment_context,
  output              io_input_rsp_valid,
  input               io_input_rsp_ready,
  output              io_input_rsp_payload_last,
  output     [0:0]    io_input_rsp_payload_fragment_source,
  output     [0:0]    io_input_rsp_payload_fragment_opcode,
  output     [31:0]   io_input_rsp_payload_fragment_data,
  output     [6:0]    io_input_rsp_payload_fragment_context,
  output              io_output_cmd_valid,
  input               io_output_cmd_ready,
  output              io_output_cmd_payload_last,
  output     [0:0]    io_output_cmd_payload_fragment_source,
  output     [0:0]    io_output_cmd_payload_fragment_opcode,
  output     [23:0]   io_output_cmd_payload_fragment_address,
  output     [1:0]    io_output_cmd_payload_fragment_length,
  output     [31:0]   io_output_cmd_payload_fragment_data,
  output     [3:0]    io_output_cmd_payload_fragment_mask,
  output     [6:0]    io_output_cmd_payload_fragment_context,
  input               io_output_rsp_valid,
  output              io_output_rsp_ready,
  input               io_output_rsp_payload_last,
  input      [0:0]    io_output_rsp_payload_fragment_source,
  input      [0:0]    io_output_rsp_payload_fragment_opcode,
  input      [31:0]   io_output_rsp_payload_fragment_data,
  input      [6:0]    io_output_rsp_payload_fragment_context,
  input               CLKOUT0,
  input               systemCd_logic_outputReset,
  input               CLKOUT1,
  input               sdramCd_logic_outputReset
);
  wire                io_input_cmd_ccToggle_io_input_ready;
  wire                io_input_cmd_ccToggle_io_output_valid;
  wire                io_input_cmd_ccToggle_io_output_payload_last;
  wire       [0:0]    io_input_cmd_ccToggle_io_output_payload_fragment_source;
  wire       [0:0]    io_input_cmd_ccToggle_io_output_payload_fragment_opcode;
  wire       [23:0]   io_input_cmd_ccToggle_io_output_payload_fragment_address;
  wire       [1:0]    io_input_cmd_ccToggle_io_output_payload_fragment_length;
  wire       [31:0]   io_input_cmd_ccToggle_io_output_payload_fragment_data;
  wire       [3:0]    io_input_cmd_ccToggle_io_output_payload_fragment_mask;
  wire       [6:0]    io_input_cmd_ccToggle_io_output_payload_fragment_context;
  wire                io_output_rsp_ccToggle_io_input_ready;
  wire                io_output_rsp_ccToggle_io_output_valid;
  wire                io_output_rsp_ccToggle_io_output_payload_last;
  wire       [0:0]    io_output_rsp_ccToggle_io_output_payload_fragment_source;
  wire       [0:0]    io_output_rsp_ccToggle_io_output_payload_fragment_opcode;
  wire       [31:0]   io_output_rsp_ccToggle_io_output_payload_fragment_data;
  wire       [6:0]    io_output_rsp_ccToggle_io_output_payload_fragment_context;

  StreamCCByToggle io_input_cmd_ccToggle (
    .io_input_valid                        (io_input_cmd_valid                                              ), //i
    .io_input_ready                        (io_input_cmd_ccToggle_io_input_ready                            ), //o
    .io_input_payload_last                 (io_input_cmd_payload_last                                       ), //i
    .io_input_payload_fragment_source      (io_input_cmd_payload_fragment_source                            ), //i
    .io_input_payload_fragment_opcode      (io_input_cmd_payload_fragment_opcode                            ), //i
    .io_input_payload_fragment_address     (io_input_cmd_payload_fragment_address[23:0]                     ), //i
    .io_input_payload_fragment_length      (io_input_cmd_payload_fragment_length[1:0]                       ), //i
    .io_input_payload_fragment_data        (io_input_cmd_payload_fragment_data[31:0]                        ), //i
    .io_input_payload_fragment_mask        (io_input_cmd_payload_fragment_mask[3:0]                         ), //i
    .io_input_payload_fragment_context     (io_input_cmd_payload_fragment_context[6:0]                      ), //i
    .io_output_valid                       (io_input_cmd_ccToggle_io_output_valid                           ), //o
    .io_output_ready                       (io_output_cmd_ready                                             ), //i
    .io_output_payload_last                (io_input_cmd_ccToggle_io_output_payload_last                    ), //o
    .io_output_payload_fragment_source     (io_input_cmd_ccToggle_io_output_payload_fragment_source         ), //o
    .io_output_payload_fragment_opcode     (io_input_cmd_ccToggle_io_output_payload_fragment_opcode         ), //o
    .io_output_payload_fragment_address    (io_input_cmd_ccToggle_io_output_payload_fragment_address[23:0]  ), //o
    .io_output_payload_fragment_length     (io_input_cmd_ccToggle_io_output_payload_fragment_length[1:0]    ), //o
    .io_output_payload_fragment_data       (io_input_cmd_ccToggle_io_output_payload_fragment_data[31:0]     ), //o
    .io_output_payload_fragment_mask       (io_input_cmd_ccToggle_io_output_payload_fragment_mask[3:0]      ), //o
    .io_output_payload_fragment_context    (io_input_cmd_ccToggle_io_output_payload_fragment_context[6:0]   ), //o
    .CLKOUT0                               (CLKOUT0                                                         ), //i
    .systemCd_logic_outputReset            (systemCd_logic_outputReset                                      ), //i
    .CLKOUT1                               (CLKOUT1                                                         ), //i
    .sdramCd_logic_outputReset             (sdramCd_logic_outputReset                                       )  //i
  );
  StreamCCByToggle_1 io_output_rsp_ccToggle (
    .io_input_valid                        (io_output_rsp_valid                                             ), //i
    .io_input_ready                        (io_output_rsp_ccToggle_io_input_ready                           ), //o
    .io_input_payload_last                 (io_output_rsp_payload_last                                      ), //i
    .io_input_payload_fragment_source      (io_output_rsp_payload_fragment_source                           ), //i
    .io_input_payload_fragment_opcode      (io_output_rsp_payload_fragment_opcode                           ), //i
    .io_input_payload_fragment_data        (io_output_rsp_payload_fragment_data[31:0]                       ), //i
    .io_input_payload_fragment_context     (io_output_rsp_payload_fragment_context[6:0]                     ), //i
    .io_output_valid                       (io_output_rsp_ccToggle_io_output_valid                          ), //o
    .io_output_ready                       (io_input_rsp_ready                                              ), //i
    .io_output_payload_last                (io_output_rsp_ccToggle_io_output_payload_last                   ), //o
    .io_output_payload_fragment_source     (io_output_rsp_ccToggle_io_output_payload_fragment_source        ), //o
    .io_output_payload_fragment_opcode     (io_output_rsp_ccToggle_io_output_payload_fragment_opcode        ), //o
    .io_output_payload_fragment_data       (io_output_rsp_ccToggle_io_output_payload_fragment_data[31:0]    ), //o
    .io_output_payload_fragment_context    (io_output_rsp_ccToggle_io_output_payload_fragment_context[6:0]  ), //o
    .CLKOUT1                               (CLKOUT1                                                         ), //i
    .sdramCd_logic_outputReset             (sdramCd_logic_outputReset                                       ), //i
    .CLKOUT0                               (CLKOUT0                                                         ), //i
    .systemCd_logic_outputReset            (systemCd_logic_outputReset                                      )  //i
  );
  assign io_input_cmd_ready = io_input_cmd_ccToggle_io_input_ready;
  assign io_output_cmd_valid = io_input_cmd_ccToggle_io_output_valid;
  assign io_output_cmd_payload_last = io_input_cmd_ccToggle_io_output_payload_last;
  assign io_output_cmd_payload_fragment_source = io_input_cmd_ccToggle_io_output_payload_fragment_source;
  assign io_output_cmd_payload_fragment_opcode = io_input_cmd_ccToggle_io_output_payload_fragment_opcode;
  assign io_output_cmd_payload_fragment_address = io_input_cmd_ccToggle_io_output_payload_fragment_address;
  assign io_output_cmd_payload_fragment_length = io_input_cmd_ccToggle_io_output_payload_fragment_length;
  assign io_output_cmd_payload_fragment_data = io_input_cmd_ccToggle_io_output_payload_fragment_data;
  assign io_output_cmd_payload_fragment_mask = io_input_cmd_ccToggle_io_output_payload_fragment_mask;
  assign io_output_cmd_payload_fragment_context = io_input_cmd_ccToggle_io_output_payload_fragment_context;
  assign io_output_rsp_ready = io_output_rsp_ccToggle_io_input_ready;
  assign io_input_rsp_valid = io_output_rsp_ccToggle_io_output_valid;
  assign io_input_rsp_payload_last = io_output_rsp_ccToggle_io_output_payload_last;
  assign io_input_rsp_payload_fragment_source = io_output_rsp_ccToggle_io_output_payload_fragment_source;
  assign io_input_rsp_payload_fragment_opcode = io_output_rsp_ccToggle_io_output_payload_fragment_opcode;
  assign io_input_rsp_payload_fragment_data = io_output_rsp_ccToggle_io_output_payload_fragment_data;
  assign io_input_rsp_payload_fragment_context = io_output_rsp_ccToggle_io_output_payload_fragment_context;

endmodule

module BmbDecoder_3 (
  input               io_input_cmd_valid,
  output reg          io_input_cmd_ready,
  input               io_input_cmd_payload_last,
  input      [0:0]    io_input_cmd_payload_fragment_source,
  input      [0:0]    io_input_cmd_payload_fragment_opcode,
  input      [23:0]   io_input_cmd_payload_fragment_address,
  input      [1:0]    io_input_cmd_payload_fragment_length,
  input      [31:0]   io_input_cmd_payload_fragment_data,
  input      [3:0]    io_input_cmd_payload_fragment_mask,
  input      [6:0]    io_input_cmd_payload_fragment_context,
  output reg          io_input_rsp_valid,
  input               io_input_rsp_ready,
  output reg          io_input_rsp_payload_last,
  output reg [0:0]    io_input_rsp_payload_fragment_source,
  output reg [0:0]    io_input_rsp_payload_fragment_opcode,
  output     [31:0]   io_input_rsp_payload_fragment_data,
  output reg [6:0]    io_input_rsp_payload_fragment_context,
  output reg          io_outputs_0_cmd_valid,
  input               io_outputs_0_cmd_ready,
  output              io_outputs_0_cmd_payload_last,
  output     [0:0]    io_outputs_0_cmd_payload_fragment_source,
  output     [0:0]    io_outputs_0_cmd_payload_fragment_opcode,
  output     [23:0]   io_outputs_0_cmd_payload_fragment_address,
  output     [1:0]    io_outputs_0_cmd_payload_fragment_length,
  output     [31:0]   io_outputs_0_cmd_payload_fragment_data,
  output     [3:0]    io_outputs_0_cmd_payload_fragment_mask,
  output     [6:0]    io_outputs_0_cmd_payload_fragment_context,
  input               io_outputs_0_rsp_valid,
  output              io_outputs_0_rsp_ready,
  input               io_outputs_0_rsp_payload_last,
  input      [0:0]    io_outputs_0_rsp_payload_fragment_source,
  input      [0:0]    io_outputs_0_rsp_payload_fragment_opcode,
  input      [31:0]   io_outputs_0_rsp_payload_fragment_data,
  input      [6:0]    io_outputs_0_rsp_payload_fragment_context,
  output reg          io_outputs_1_cmd_valid,
  input               io_outputs_1_cmd_ready,
  output              io_outputs_1_cmd_payload_last,
  output     [0:0]    io_outputs_1_cmd_payload_fragment_source,
  output     [0:0]    io_outputs_1_cmd_payload_fragment_opcode,
  output     [23:0]   io_outputs_1_cmd_payload_fragment_address,
  output     [1:0]    io_outputs_1_cmd_payload_fragment_length,
  output     [31:0]   io_outputs_1_cmd_payload_fragment_data,
  output     [3:0]    io_outputs_1_cmd_payload_fragment_mask,
  output     [6:0]    io_outputs_1_cmd_payload_fragment_context,
  input               io_outputs_1_rsp_valid,
  output              io_outputs_1_rsp_ready,
  input               io_outputs_1_rsp_payload_last,
  input      [0:0]    io_outputs_1_rsp_payload_fragment_source,
  input      [0:0]    io_outputs_1_rsp_payload_fragment_opcode,
  input      [31:0]   io_outputs_1_rsp_payload_fragment_data,
  input      [6:0]    io_outputs_1_rsp_payload_fragment_context,
  output reg          io_outputs_2_cmd_valid,
  input               io_outputs_2_cmd_ready,
  output              io_outputs_2_cmd_payload_last,
  output     [0:0]    io_outputs_2_cmd_payload_fragment_source,
  output     [0:0]    io_outputs_2_cmd_payload_fragment_opcode,
  output     [23:0]   io_outputs_2_cmd_payload_fragment_address,
  output     [1:0]    io_outputs_2_cmd_payload_fragment_length,
  output     [31:0]   io_outputs_2_cmd_payload_fragment_data,
  output     [3:0]    io_outputs_2_cmd_payload_fragment_mask,
  output     [6:0]    io_outputs_2_cmd_payload_fragment_context,
  input               io_outputs_2_rsp_valid,
  output              io_outputs_2_rsp_ready,
  input               io_outputs_2_rsp_payload_last,
  input      [0:0]    io_outputs_2_rsp_payload_fragment_source,
  input      [0:0]    io_outputs_2_rsp_payload_fragment_opcode,
  input      [31:0]   io_outputs_2_rsp_payload_fragment_data,
  input      [6:0]    io_outputs_2_rsp_payload_fragment_context,
  output reg          io_outputs_3_cmd_valid,
  input               io_outputs_3_cmd_ready,
  output              io_outputs_3_cmd_payload_last,
  output     [0:0]    io_outputs_3_cmd_payload_fragment_source,
  output     [0:0]    io_outputs_3_cmd_payload_fragment_opcode,
  output     [23:0]   io_outputs_3_cmd_payload_fragment_address,
  output     [1:0]    io_outputs_3_cmd_payload_fragment_length,
  output     [31:0]   io_outputs_3_cmd_payload_fragment_data,
  output     [3:0]    io_outputs_3_cmd_payload_fragment_mask,
  output     [6:0]    io_outputs_3_cmd_payload_fragment_context,
  input               io_outputs_3_rsp_valid,
  output              io_outputs_3_rsp_ready,
  input               io_outputs_3_rsp_payload_last,
  input      [0:0]    io_outputs_3_rsp_payload_fragment_source,
  input      [0:0]    io_outputs_3_rsp_payload_fragment_opcode,
  input      [31:0]   io_outputs_3_rsp_payload_fragment_data,
  input      [6:0]    io_outputs_3_rsp_payload_fragment_context,
  output reg          io_outputs_4_cmd_valid,
  input               io_outputs_4_cmd_ready,
  output              io_outputs_4_cmd_payload_last,
  output     [0:0]    io_outputs_4_cmd_payload_fragment_source,
  output     [0:0]    io_outputs_4_cmd_payload_fragment_opcode,
  output     [23:0]   io_outputs_4_cmd_payload_fragment_address,
  output     [1:0]    io_outputs_4_cmd_payload_fragment_length,
  output     [31:0]   io_outputs_4_cmd_payload_fragment_data,
  output     [3:0]    io_outputs_4_cmd_payload_fragment_mask,
  output     [6:0]    io_outputs_4_cmd_payload_fragment_context,
  input               io_outputs_4_rsp_valid,
  output              io_outputs_4_rsp_ready,
  input               io_outputs_4_rsp_payload_last,
  input      [0:0]    io_outputs_4_rsp_payload_fragment_source,
  input      [0:0]    io_outputs_4_rsp_payload_fragment_opcode,
  input      [31:0]   io_outputs_4_rsp_payload_fragment_data,
  input      [6:0]    io_outputs_4_rsp_payload_fragment_context,
  output reg          io_outputs_5_cmd_valid,
  input               io_outputs_5_cmd_ready,
  output              io_outputs_5_cmd_payload_last,
  output     [0:0]    io_outputs_5_cmd_payload_fragment_source,
  output     [0:0]    io_outputs_5_cmd_payload_fragment_opcode,
  output     [23:0]   io_outputs_5_cmd_payload_fragment_address,
  output     [1:0]    io_outputs_5_cmd_payload_fragment_length,
  output     [31:0]   io_outputs_5_cmd_payload_fragment_data,
  output     [3:0]    io_outputs_5_cmd_payload_fragment_mask,
  output     [6:0]    io_outputs_5_cmd_payload_fragment_context,
  input               io_outputs_5_rsp_valid,
  output              io_outputs_5_rsp_ready,
  input               io_outputs_5_rsp_payload_last,
  input      [0:0]    io_outputs_5_rsp_payload_fragment_source,
  input      [0:0]    io_outputs_5_rsp_payload_fragment_opcode,
  input      [31:0]   io_outputs_5_rsp_payload_fragment_data,
  input      [6:0]    io_outputs_5_rsp_payload_fragment_context,
  output reg          io_outputs_6_cmd_valid,
  input               io_outputs_6_cmd_ready,
  output              io_outputs_6_cmd_payload_last,
  output     [0:0]    io_outputs_6_cmd_payload_fragment_source,
  output     [0:0]    io_outputs_6_cmd_payload_fragment_opcode,
  output     [23:0]   io_outputs_6_cmd_payload_fragment_address,
  output     [1:0]    io_outputs_6_cmd_payload_fragment_length,
  output     [31:0]   io_outputs_6_cmd_payload_fragment_data,
  output     [3:0]    io_outputs_6_cmd_payload_fragment_mask,
  output     [6:0]    io_outputs_6_cmd_payload_fragment_context,
  input               io_outputs_6_rsp_valid,
  output              io_outputs_6_rsp_ready,
  input               io_outputs_6_rsp_payload_last,
  input      [0:0]    io_outputs_6_rsp_payload_fragment_source,
  input      [0:0]    io_outputs_6_rsp_payload_fragment_opcode,
  input      [31:0]   io_outputs_6_rsp_payload_fragment_data,
  input      [6:0]    io_outputs_6_rsp_payload_fragment_context,
  output reg          io_outputs_7_cmd_valid,
  input               io_outputs_7_cmd_ready,
  output              io_outputs_7_cmd_payload_last,
  output     [0:0]    io_outputs_7_cmd_payload_fragment_source,
  output     [0:0]    io_outputs_7_cmd_payload_fragment_opcode,
  output     [23:0]   io_outputs_7_cmd_payload_fragment_address,
  output     [1:0]    io_outputs_7_cmd_payload_fragment_length,
  output     [31:0]   io_outputs_7_cmd_payload_fragment_data,
  output     [3:0]    io_outputs_7_cmd_payload_fragment_mask,
  output     [6:0]    io_outputs_7_cmd_payload_fragment_context,
  input               io_outputs_7_rsp_valid,
  output              io_outputs_7_rsp_ready,
  input               io_outputs_7_rsp_payload_last,
  input      [0:0]    io_outputs_7_rsp_payload_fragment_source,
  input      [0:0]    io_outputs_7_rsp_payload_fragment_opcode,
  input      [31:0]   io_outputs_7_rsp_payload_fragment_data,
  input      [6:0]    io_outputs_7_rsp_payload_fragment_context,
  output reg          io_outputs_8_cmd_valid,
  input               io_outputs_8_cmd_ready,
  output              io_outputs_8_cmd_payload_last,
  output     [0:0]    io_outputs_8_cmd_payload_fragment_source,
  output     [0:0]    io_outputs_8_cmd_payload_fragment_opcode,
  output     [23:0]   io_outputs_8_cmd_payload_fragment_address,
  output     [1:0]    io_outputs_8_cmd_payload_fragment_length,
  output     [31:0]   io_outputs_8_cmd_payload_fragment_data,
  output     [3:0]    io_outputs_8_cmd_payload_fragment_mask,
  output     [6:0]    io_outputs_8_cmd_payload_fragment_context,
  input               io_outputs_8_rsp_valid,
  output              io_outputs_8_rsp_ready,
  input               io_outputs_8_rsp_payload_last,
  input      [0:0]    io_outputs_8_rsp_payload_fragment_source,
  input      [0:0]    io_outputs_8_rsp_payload_fragment_opcode,
  input      [31:0]   io_outputs_8_rsp_payload_fragment_data,
  input      [6:0]    io_outputs_8_rsp_payload_fragment_context,
  output reg          io_outputs_9_cmd_valid,
  input               io_outputs_9_cmd_ready,
  output              io_outputs_9_cmd_payload_last,
  output     [0:0]    io_outputs_9_cmd_payload_fragment_source,
  output     [0:0]    io_outputs_9_cmd_payload_fragment_opcode,
  output     [23:0]   io_outputs_9_cmd_payload_fragment_address,
  output     [1:0]    io_outputs_9_cmd_payload_fragment_length,
  output     [31:0]   io_outputs_9_cmd_payload_fragment_data,
  output     [3:0]    io_outputs_9_cmd_payload_fragment_mask,
  output     [6:0]    io_outputs_9_cmd_payload_fragment_context,
  input               io_outputs_9_rsp_valid,
  output              io_outputs_9_rsp_ready,
  input               io_outputs_9_rsp_payload_last,
  input      [0:0]    io_outputs_9_rsp_payload_fragment_source,
  input      [0:0]    io_outputs_9_rsp_payload_fragment_opcode,
  input      [31:0]   io_outputs_9_rsp_payload_fragment_data,
  input      [6:0]    io_outputs_9_rsp_payload_fragment_context,
  output reg          io_outputs_10_cmd_valid,
  input               io_outputs_10_cmd_ready,
  output              io_outputs_10_cmd_payload_last,
  output     [0:0]    io_outputs_10_cmd_payload_fragment_source,
  output     [0:0]    io_outputs_10_cmd_payload_fragment_opcode,
  output     [23:0]   io_outputs_10_cmd_payload_fragment_address,
  output     [1:0]    io_outputs_10_cmd_payload_fragment_length,
  output     [31:0]   io_outputs_10_cmd_payload_fragment_data,
  output     [3:0]    io_outputs_10_cmd_payload_fragment_mask,
  output     [6:0]    io_outputs_10_cmd_payload_fragment_context,
  input               io_outputs_10_rsp_valid,
  output              io_outputs_10_rsp_ready,
  input               io_outputs_10_rsp_payload_last,
  input      [0:0]    io_outputs_10_rsp_payload_fragment_source,
  input      [0:0]    io_outputs_10_rsp_payload_fragment_opcode,
  input      [31:0]   io_outputs_10_rsp_payload_fragment_data,
  input      [6:0]    io_outputs_10_rsp_payload_fragment_context,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  reg                 _zz_17;
  reg        [0:0]    _zz_18;
  reg        [0:0]    _zz_19;
  reg        [31:0]   _zz_20;
  reg        [6:0]    _zz_21;
  wire       [3:0]    _zz_22;
  wire       [0:0]    _zz_23;
  wire       [3:0]    _zz_24;
  wire       [0:0]    _zz_25;
  wire       [3:0]    _zz_26;
  wire       [2:0]    _zz_27;
  wire       [1:0]    _zz_28;
  wire       [2:0]    _zz_29;
  wire       [0:0]    _zz_30;
  wire       [0:0]    _zz_31;
  wire                _zz_32;
  wire       [0:0]    _zz_33;
  wire       [3:0]    _zz_34;
  wire       [0:0]    _zz_35;
  wire       [0:0]    _zz_36;
  wire       [0:0]    _zz_37;
  wire       [1:0]    _zz_38;
  wire                _zz_39;
  wire                _zz_40;
  wire                logic_hits_0;
  wire                logic_hits_1;
  wire                logic_hits_2;
  wire                logic_hits_3;
  wire                logic_hits_4;
  wire                logic_hits_5;
  wire                logic_hits_6;
  wire                logic_hits_7;
  wire                logic_hits_8;
  wire                logic_hits_9;
  wire                logic_hits_10;
  wire                _zz_1;
  wire                _zz_2;
  wire                _zz_3;
  wire                _zz_4;
  wire                _zz_5;
  wire                _zz_6;
  wire                _zz_7;
  wire                _zz_8;
  wire                _zz_9;
  wire                _zz_10;
  wire                _zz_11;
  wire                logic_noHit;
  reg        [3:0]    logic_rspPendingCounter;
  wire                logic_cmdWait;
  reg                 logic_rspHits_0;
  reg                 logic_rspHits_1;
  reg                 logic_rspHits_2;
  reg                 logic_rspHits_3;
  reg                 logic_rspHits_4;
  reg                 logic_rspHits_5;
  reg                 logic_rspHits_6;
  reg                 logic_rspHits_7;
  reg                 logic_rspHits_8;
  reg                 logic_rspHits_9;
  reg                 logic_rspHits_10;
  wire                logic_rspPending;
  wire                logic_rspNoHitValid;
  reg                 logic_rspNoHit_doIt;
  reg                 logic_rspNoHit_singleBeatRsp;
  reg        [0:0]    logic_rspNoHit_source;
  reg        [6:0]    logic_rspNoHit_context;
  reg        [0:0]    logic_rspNoHit_counter;
  wire                _zz_12;
  wire                _zz_13;
  wire                _zz_14;
  wire                _zz_15;
  wire       [3:0]    _zz_16;

  assign _zz_22 = (logic_rspPendingCounter + _zz_24);
  assign _zz_23 = ((io_input_cmd_valid && io_input_cmd_ready) && io_input_cmd_payload_last);
  assign _zz_24 = {3'd0, _zz_23};
  assign _zz_25 = ((io_input_rsp_valid && io_input_rsp_ready) && io_input_rsp_payload_last);
  assign _zz_26 = {3'd0, _zz_25};
  assign _zz_27 = ({1'b0,io_input_cmd_payload_fragment_length} + _zz_29);
  assign _zz_28 = io_input_cmd_payload_fragment_address[1 : 0];
  assign _zz_29 = {1'd0, _zz_28};
  assign _zz_30 = logic_hits_1;
  assign _zz_31 = logic_hits_0;
  assign _zz_32 = (logic_hits_5 && io_outputs_5_cmd_ready);
  assign _zz_33 = (logic_hits_4 && io_outputs_4_cmd_ready);
  assign _zz_34 = {(logic_hits_3 && io_outputs_3_cmd_ready),{(logic_hits_2 && io_outputs_2_cmd_ready),{(logic_hits_1 && io_outputs_1_cmd_ready),(logic_hits_0 && io_outputs_0_cmd_ready)}}};
  assign _zz_35 = logic_rspHits_1;
  assign _zz_36 = logic_rspHits_0;
  assign _zz_37 = io_outputs_2_rsp_valid;
  assign _zz_38 = {io_outputs_1_rsp_valid,io_outputs_0_rsp_valid};
  assign _zz_39 = ((((logic_hits_0 != logic_rspHits_0) || (logic_hits_1 != logic_rspHits_1)) || (logic_hits_2 != logic_rspHits_2)) || (logic_hits_3 != logic_rspHits_3));
  assign _zz_40 = (logic_hits_4 != logic_rspHits_4);
  always @(*) begin
    case(_zz_16)
      4'b0000 : begin
        _zz_17 = io_outputs_0_rsp_payload_last;
        _zz_18 = io_outputs_0_rsp_payload_fragment_source;
        _zz_19 = io_outputs_0_rsp_payload_fragment_opcode;
        _zz_20 = io_outputs_0_rsp_payload_fragment_data;
        _zz_21 = io_outputs_0_rsp_payload_fragment_context;
      end
      4'b0001 : begin
        _zz_17 = io_outputs_1_rsp_payload_last;
        _zz_18 = io_outputs_1_rsp_payload_fragment_source;
        _zz_19 = io_outputs_1_rsp_payload_fragment_opcode;
        _zz_20 = io_outputs_1_rsp_payload_fragment_data;
        _zz_21 = io_outputs_1_rsp_payload_fragment_context;
      end
      4'b0010 : begin
        _zz_17 = io_outputs_2_rsp_payload_last;
        _zz_18 = io_outputs_2_rsp_payload_fragment_source;
        _zz_19 = io_outputs_2_rsp_payload_fragment_opcode;
        _zz_20 = io_outputs_2_rsp_payload_fragment_data;
        _zz_21 = io_outputs_2_rsp_payload_fragment_context;
      end
      4'b0011 : begin
        _zz_17 = io_outputs_3_rsp_payload_last;
        _zz_18 = io_outputs_3_rsp_payload_fragment_source;
        _zz_19 = io_outputs_3_rsp_payload_fragment_opcode;
        _zz_20 = io_outputs_3_rsp_payload_fragment_data;
        _zz_21 = io_outputs_3_rsp_payload_fragment_context;
      end
      4'b0100 : begin
        _zz_17 = io_outputs_4_rsp_payload_last;
        _zz_18 = io_outputs_4_rsp_payload_fragment_source;
        _zz_19 = io_outputs_4_rsp_payload_fragment_opcode;
        _zz_20 = io_outputs_4_rsp_payload_fragment_data;
        _zz_21 = io_outputs_4_rsp_payload_fragment_context;
      end
      4'b0101 : begin
        _zz_17 = io_outputs_5_rsp_payload_last;
        _zz_18 = io_outputs_5_rsp_payload_fragment_source;
        _zz_19 = io_outputs_5_rsp_payload_fragment_opcode;
        _zz_20 = io_outputs_5_rsp_payload_fragment_data;
        _zz_21 = io_outputs_5_rsp_payload_fragment_context;
      end
      4'b0110 : begin
        _zz_17 = io_outputs_6_rsp_payload_last;
        _zz_18 = io_outputs_6_rsp_payload_fragment_source;
        _zz_19 = io_outputs_6_rsp_payload_fragment_opcode;
        _zz_20 = io_outputs_6_rsp_payload_fragment_data;
        _zz_21 = io_outputs_6_rsp_payload_fragment_context;
      end
      4'b0111 : begin
        _zz_17 = io_outputs_7_rsp_payload_last;
        _zz_18 = io_outputs_7_rsp_payload_fragment_source;
        _zz_19 = io_outputs_7_rsp_payload_fragment_opcode;
        _zz_20 = io_outputs_7_rsp_payload_fragment_data;
        _zz_21 = io_outputs_7_rsp_payload_fragment_context;
      end
      4'b1000 : begin
        _zz_17 = io_outputs_8_rsp_payload_last;
        _zz_18 = io_outputs_8_rsp_payload_fragment_source;
        _zz_19 = io_outputs_8_rsp_payload_fragment_opcode;
        _zz_20 = io_outputs_8_rsp_payload_fragment_data;
        _zz_21 = io_outputs_8_rsp_payload_fragment_context;
      end
      4'b1001 : begin
        _zz_17 = io_outputs_9_rsp_payload_last;
        _zz_18 = io_outputs_9_rsp_payload_fragment_source;
        _zz_19 = io_outputs_9_rsp_payload_fragment_opcode;
        _zz_20 = io_outputs_9_rsp_payload_fragment_data;
        _zz_21 = io_outputs_9_rsp_payload_fragment_context;
      end
      default : begin
        _zz_17 = io_outputs_10_rsp_payload_last;
        _zz_18 = io_outputs_10_rsp_payload_fragment_source;
        _zz_19 = io_outputs_10_rsp_payload_fragment_opcode;
        _zz_20 = io_outputs_10_rsp_payload_fragment_data;
        _zz_21 = io_outputs_10_rsp_payload_fragment_context;
      end
    endcase
  end

  assign logic_hits_0 = ((io_input_cmd_payload_fragment_address & (~ 24'h3fffff)) == 24'hc00000);
  always @ (*) begin
    io_outputs_0_cmd_valid = (io_input_cmd_valid && logic_hits_0);
    if(logic_cmdWait)begin
      io_outputs_0_cmd_valid = 1'b0;
    end
  end

  assign _zz_1 = io_input_cmd_payload_last;
  assign io_outputs_0_cmd_payload_last = _zz_1;
  assign io_outputs_0_cmd_payload_fragment_source = io_input_cmd_payload_fragment_source;
  assign io_outputs_0_cmd_payload_fragment_opcode = io_input_cmd_payload_fragment_opcode;
  assign io_outputs_0_cmd_payload_fragment_address = io_input_cmd_payload_fragment_address;
  assign io_outputs_0_cmd_payload_fragment_length = io_input_cmd_payload_fragment_length;
  assign io_outputs_0_cmd_payload_fragment_data = io_input_cmd_payload_fragment_data;
  assign io_outputs_0_cmd_payload_fragment_mask = io_input_cmd_payload_fragment_mask;
  assign io_outputs_0_cmd_payload_fragment_context = io_input_cmd_payload_fragment_context;
  assign logic_hits_1 = ((io_input_cmd_payload_fragment_address & (~ 24'h00ffff)) == 24'hb00000);
  always @ (*) begin
    io_outputs_1_cmd_valid = (io_input_cmd_valid && logic_hits_1);
    if(logic_cmdWait)begin
      io_outputs_1_cmd_valid = 1'b0;
    end
  end

  assign _zz_2 = io_input_cmd_payload_last;
  assign io_outputs_1_cmd_payload_last = _zz_2;
  assign io_outputs_1_cmd_payload_fragment_source = io_input_cmd_payload_fragment_source;
  assign io_outputs_1_cmd_payload_fragment_opcode = io_input_cmd_payload_fragment_opcode;
  assign io_outputs_1_cmd_payload_fragment_address = io_input_cmd_payload_fragment_address;
  assign io_outputs_1_cmd_payload_fragment_length = io_input_cmd_payload_fragment_length;
  assign io_outputs_1_cmd_payload_fragment_data = io_input_cmd_payload_fragment_data;
  assign io_outputs_1_cmd_payload_fragment_mask = io_input_cmd_payload_fragment_mask;
  assign io_outputs_1_cmd_payload_fragment_context = io_input_cmd_payload_fragment_context;
  assign logic_hits_2 = ((io_input_cmd_payload_fragment_address & (~ 24'h0000ff)) == 24'h0);
  always @ (*) begin
    io_outputs_2_cmd_valid = (io_input_cmd_valid && logic_hits_2);
    if(logic_cmdWait)begin
      io_outputs_2_cmd_valid = 1'b0;
    end
  end

  assign _zz_3 = io_input_cmd_payload_last;
  assign io_outputs_2_cmd_payload_last = _zz_3;
  assign io_outputs_2_cmd_payload_fragment_source = io_input_cmd_payload_fragment_source;
  assign io_outputs_2_cmd_payload_fragment_opcode = io_input_cmd_payload_fragment_opcode;
  assign io_outputs_2_cmd_payload_fragment_address = io_input_cmd_payload_fragment_address;
  assign io_outputs_2_cmd_payload_fragment_length = io_input_cmd_payload_fragment_length;
  assign io_outputs_2_cmd_payload_fragment_data = io_input_cmd_payload_fragment_data;
  assign io_outputs_2_cmd_payload_fragment_mask = io_input_cmd_payload_fragment_mask;
  assign io_outputs_2_cmd_payload_fragment_context = io_input_cmd_payload_fragment_context;
  assign logic_hits_3 = ((io_input_cmd_payload_fragment_address & (~ 24'h00003f)) == 24'h010000);
  always @ (*) begin
    io_outputs_3_cmd_valid = (io_input_cmd_valid && logic_hits_3);
    if(logic_cmdWait)begin
      io_outputs_3_cmd_valid = 1'b0;
    end
  end

  assign _zz_4 = io_input_cmd_payload_last;
  assign io_outputs_3_cmd_payload_last = _zz_4;
  assign io_outputs_3_cmd_payload_fragment_source = io_input_cmd_payload_fragment_source;
  assign io_outputs_3_cmd_payload_fragment_opcode = io_input_cmd_payload_fragment_opcode;
  assign io_outputs_3_cmd_payload_fragment_address = io_input_cmd_payload_fragment_address;
  assign io_outputs_3_cmd_payload_fragment_length = io_input_cmd_payload_fragment_length;
  assign io_outputs_3_cmd_payload_fragment_data = io_input_cmd_payload_fragment_data;
  assign io_outputs_3_cmd_payload_fragment_mask = io_input_cmd_payload_fragment_mask;
  assign io_outputs_3_cmd_payload_fragment_context = io_input_cmd_payload_fragment_context;
  assign logic_hits_4 = ((io_input_cmd_payload_fragment_address & (~ 24'h000fff)) == 24'h020000);
  always @ (*) begin
    io_outputs_4_cmd_valid = (io_input_cmd_valid && logic_hits_4);
    if(logic_cmdWait)begin
      io_outputs_4_cmd_valid = 1'b0;
    end
  end

  assign _zz_5 = io_input_cmd_payload_last;
  assign io_outputs_4_cmd_payload_last = _zz_5;
  assign io_outputs_4_cmd_payload_fragment_source = io_input_cmd_payload_fragment_source;
  assign io_outputs_4_cmd_payload_fragment_opcode = io_input_cmd_payload_fragment_opcode;
  assign io_outputs_4_cmd_payload_fragment_address = io_input_cmd_payload_fragment_address;
  assign io_outputs_4_cmd_payload_fragment_length = io_input_cmd_payload_fragment_length;
  assign io_outputs_4_cmd_payload_fragment_data = io_input_cmd_payload_fragment_data;
  assign io_outputs_4_cmd_payload_fragment_mask = io_input_cmd_payload_fragment_mask;
  assign io_outputs_4_cmd_payload_fragment_context = io_input_cmd_payload_fragment_context;
  assign logic_hits_5 = ((io_input_cmd_payload_fragment_address & (~ 24'h00003f)) == 24'h040000);
  always @ (*) begin
    io_outputs_5_cmd_valid = (io_input_cmd_valid && logic_hits_5);
    if(logic_cmdWait)begin
      io_outputs_5_cmd_valid = 1'b0;
    end
  end

  assign _zz_6 = io_input_cmd_payload_last;
  assign io_outputs_5_cmd_payload_last = _zz_6;
  assign io_outputs_5_cmd_payload_fragment_source = io_input_cmd_payload_fragment_source;
  assign io_outputs_5_cmd_payload_fragment_opcode = io_input_cmd_payload_fragment_opcode;
  assign io_outputs_5_cmd_payload_fragment_address = io_input_cmd_payload_fragment_address;
  assign io_outputs_5_cmd_payload_fragment_length = io_input_cmd_payload_fragment_length;
  assign io_outputs_5_cmd_payload_fragment_data = io_input_cmd_payload_fragment_data;
  assign io_outputs_5_cmd_payload_fragment_mask = io_input_cmd_payload_fragment_mask;
  assign io_outputs_5_cmd_payload_fragment_context = io_input_cmd_payload_fragment_context;
  assign logic_hits_6 = ((io_input_cmd_payload_fragment_address & (~ 24'h00ffff)) == 24'h080000);
  always @ (*) begin
    io_outputs_6_cmd_valid = (io_input_cmd_valid && logic_hits_6);
    if(logic_cmdWait)begin
      io_outputs_6_cmd_valid = 1'b0;
    end
  end

  assign _zz_7 = io_input_cmd_payload_last;
  assign io_outputs_6_cmd_payload_last = _zz_7;
  assign io_outputs_6_cmd_payload_fragment_source = io_input_cmd_payload_fragment_source;
  assign io_outputs_6_cmd_payload_fragment_opcode = io_input_cmd_payload_fragment_opcode;
  assign io_outputs_6_cmd_payload_fragment_address = io_input_cmd_payload_fragment_address;
  assign io_outputs_6_cmd_payload_fragment_length = io_input_cmd_payload_fragment_length;
  assign io_outputs_6_cmd_payload_fragment_data = io_input_cmd_payload_fragment_data;
  assign io_outputs_6_cmd_payload_fragment_mask = io_input_cmd_payload_fragment_mask;
  assign io_outputs_6_cmd_payload_fragment_context = io_input_cmd_payload_fragment_context;
  assign logic_hits_7 = ((io_input_cmd_payload_fragment_address & (~ 24'h0000ff)) == 24'h090000);
  always @ (*) begin
    io_outputs_7_cmd_valid = (io_input_cmd_valid && logic_hits_7);
    if(logic_cmdWait)begin
      io_outputs_7_cmd_valid = 1'b0;
    end
  end

  assign _zz_8 = io_input_cmd_payload_last;
  assign io_outputs_7_cmd_payload_last = _zz_8;
  assign io_outputs_7_cmd_payload_fragment_source = io_input_cmd_payload_fragment_source;
  assign io_outputs_7_cmd_payload_fragment_opcode = io_input_cmd_payload_fragment_opcode;
  assign io_outputs_7_cmd_payload_fragment_address = io_input_cmd_payload_fragment_address;
  assign io_outputs_7_cmd_payload_fragment_length = io_input_cmd_payload_fragment_length;
  assign io_outputs_7_cmd_payload_fragment_data = io_input_cmd_payload_fragment_data;
  assign io_outputs_7_cmd_payload_fragment_mask = io_input_cmd_payload_fragment_mask;
  assign io_outputs_7_cmd_payload_fragment_context = io_input_cmd_payload_fragment_context;
  assign logic_hits_8 = ((io_input_cmd_payload_fragment_address & (~ 24'h000fff)) == 24'h094000);
  always @ (*) begin
    io_outputs_8_cmd_valid = (io_input_cmd_valid && logic_hits_8);
    if(logic_cmdWait)begin
      io_outputs_8_cmd_valid = 1'b0;
    end
  end

  assign _zz_9 = io_input_cmd_payload_last;
  assign io_outputs_8_cmd_payload_last = _zz_9;
  assign io_outputs_8_cmd_payload_fragment_source = io_input_cmd_payload_fragment_source;
  assign io_outputs_8_cmd_payload_fragment_opcode = io_input_cmd_payload_fragment_opcode;
  assign io_outputs_8_cmd_payload_fragment_address = io_input_cmd_payload_fragment_address;
  assign io_outputs_8_cmd_payload_fragment_length = io_input_cmd_payload_fragment_length;
  assign io_outputs_8_cmd_payload_fragment_data = io_input_cmd_payload_fragment_data;
  assign io_outputs_8_cmd_payload_fragment_mask = io_input_cmd_payload_fragment_mask;
  assign io_outputs_8_cmd_payload_fragment_context = io_input_cmd_payload_fragment_context;
  assign logic_hits_9 = ((io_input_cmd_payload_fragment_address & (~ 24'h001fff)) == 24'ha00000);
  always @ (*) begin
    io_outputs_9_cmd_valid = (io_input_cmd_valid && logic_hits_9);
    if(logic_cmdWait)begin
      io_outputs_9_cmd_valid = 1'b0;
    end
  end

  assign _zz_10 = io_input_cmd_payload_last;
  assign io_outputs_9_cmd_payload_last = _zz_10;
  assign io_outputs_9_cmd_payload_fragment_source = io_input_cmd_payload_fragment_source;
  assign io_outputs_9_cmd_payload_fragment_opcode = io_input_cmd_payload_fragment_opcode;
  assign io_outputs_9_cmd_payload_fragment_address = io_input_cmd_payload_fragment_address;
  assign io_outputs_9_cmd_payload_fragment_length = io_input_cmd_payload_fragment_length;
  assign io_outputs_9_cmd_payload_fragment_data = io_input_cmd_payload_fragment_data;
  assign io_outputs_9_cmd_payload_fragment_mask = io_input_cmd_payload_fragment_mask;
  assign io_outputs_9_cmd_payload_fragment_context = io_input_cmd_payload_fragment_context;
  assign logic_hits_10 = ((io_input_cmd_payload_fragment_address & (~ 24'h001fff)) == 24'h100000);
  always @ (*) begin
    io_outputs_10_cmd_valid = (io_input_cmd_valid && logic_hits_10);
    if(logic_cmdWait)begin
      io_outputs_10_cmd_valid = 1'b0;
    end
  end

  assign _zz_11 = io_input_cmd_payload_last;
  assign io_outputs_10_cmd_payload_last = _zz_11;
  assign io_outputs_10_cmd_payload_fragment_source = io_input_cmd_payload_fragment_source;
  assign io_outputs_10_cmd_payload_fragment_opcode = io_input_cmd_payload_fragment_opcode;
  assign io_outputs_10_cmd_payload_fragment_address = io_input_cmd_payload_fragment_address;
  assign io_outputs_10_cmd_payload_fragment_length = io_input_cmd_payload_fragment_length;
  assign io_outputs_10_cmd_payload_fragment_data = io_input_cmd_payload_fragment_data;
  assign io_outputs_10_cmd_payload_fragment_mask = io_input_cmd_payload_fragment_mask;
  assign io_outputs_10_cmd_payload_fragment_context = io_input_cmd_payload_fragment_context;
  assign logic_noHit = (! ({logic_hits_10,{logic_hits_9,{logic_hits_8,{logic_hits_7,{logic_hits_6,{logic_hits_5,{logic_hits_4,{logic_hits_3,{logic_hits_2,{_zz_30,_zz_31}}}}}}}}}} != 11'h0));
  always @ (*) begin
    io_input_cmd_ready = (({(logic_hits_10 && io_outputs_10_cmd_ready),{(logic_hits_9 && io_outputs_9_cmd_ready),{(logic_hits_8 && io_outputs_8_cmd_ready),{(logic_hits_7 && io_outputs_7_cmd_ready),{(logic_hits_6 && io_outputs_6_cmd_ready),{_zz_32,{_zz_33,_zz_34}}}}}}} != 11'h0) || logic_noHit);
    if(logic_cmdWait)begin
      io_input_cmd_ready = 1'b0;
    end
  end

  assign logic_rspPending = (logic_rspPendingCounter != 4'b0000);
  assign logic_rspNoHitValid = (! ({logic_rspHits_10,{logic_rspHits_9,{logic_rspHits_8,{logic_rspHits_7,{logic_rspHits_6,{logic_rspHits_5,{logic_rspHits_4,{logic_rspHits_3,{logic_rspHits_2,{_zz_35,_zz_36}}}}}}}}}} != 11'h0));
  always @ (*) begin
    io_input_rsp_valid = (({io_outputs_10_rsp_valid,{io_outputs_9_rsp_valid,{io_outputs_8_rsp_valid,{io_outputs_7_rsp_valid,{io_outputs_6_rsp_valid,{io_outputs_5_rsp_valid,{io_outputs_4_rsp_valid,{io_outputs_3_rsp_valid,{_zz_37,_zz_38}}}}}}}}} != 11'h0) || (logic_rspPending && logic_rspNoHitValid));
    if(logic_rspNoHit_doIt)begin
      io_input_rsp_valid = 1'b1;
    end
  end

  assign _zz_12 = ((((logic_rspHits_1 || logic_rspHits_3) || logic_rspHits_5) || logic_rspHits_7) || logic_rspHits_9);
  assign _zz_13 = ((((logic_rspHits_2 || logic_rspHits_3) || logic_rspHits_6) || logic_rspHits_7) || logic_rspHits_10);
  assign _zz_14 = (((logic_rspHits_4 || logic_rspHits_5) || logic_rspHits_6) || logic_rspHits_7);
  assign _zz_15 = ((logic_rspHits_8 || logic_rspHits_9) || logic_rspHits_10);
  assign _zz_16 = {_zz_15,{_zz_14,{_zz_13,_zz_12}}};
  always @ (*) begin
    io_input_rsp_payload_last = _zz_17;
    if(logic_rspNoHit_doIt)begin
      io_input_rsp_payload_last = 1'b0;
      if((logic_rspNoHit_counter == 1'b0))begin
        io_input_rsp_payload_last = 1'b1;
      end
      if(logic_rspNoHit_singleBeatRsp)begin
        io_input_rsp_payload_last = 1'b1;
      end
    end
  end

  always @ (*) begin
    io_input_rsp_payload_fragment_source = _zz_18;
    if(logic_rspNoHit_doIt)begin
      io_input_rsp_payload_fragment_source = logic_rspNoHit_source;
    end
  end

  always @ (*) begin
    io_input_rsp_payload_fragment_opcode = _zz_19;
    if(logic_rspNoHit_doIt)begin
      io_input_rsp_payload_fragment_opcode = 1'b1;
    end
  end

  assign io_input_rsp_payload_fragment_data = _zz_20;
  always @ (*) begin
    io_input_rsp_payload_fragment_context = _zz_21;
    if(logic_rspNoHit_doIt)begin
      io_input_rsp_payload_fragment_context = logic_rspNoHit_context;
    end
  end

  assign io_outputs_0_rsp_ready = io_input_rsp_ready;
  assign io_outputs_1_rsp_ready = io_input_rsp_ready;
  assign io_outputs_2_rsp_ready = io_input_rsp_ready;
  assign io_outputs_3_rsp_ready = io_input_rsp_ready;
  assign io_outputs_4_rsp_ready = io_input_rsp_ready;
  assign io_outputs_5_rsp_ready = io_input_rsp_ready;
  assign io_outputs_6_rsp_ready = io_input_rsp_ready;
  assign io_outputs_7_rsp_ready = io_input_rsp_ready;
  assign io_outputs_8_rsp_ready = io_input_rsp_ready;
  assign io_outputs_9_rsp_ready = io_input_rsp_ready;
  assign io_outputs_10_rsp_ready = io_input_rsp_ready;
  assign logic_cmdWait = ((logic_rspPending && ((((((((_zz_39 || _zz_40) || (logic_hits_5 != logic_rspHits_5)) || (logic_hits_6 != logic_rspHits_6)) || (logic_hits_7 != logic_rspHits_7)) || (logic_hits_8 != logic_rspHits_8)) || (logic_hits_9 != logic_rspHits_9)) || (logic_hits_10 != logic_rspHits_10)) || logic_rspNoHitValid)) || (logic_rspPendingCounter == 4'b1111));
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      logic_rspPendingCounter <= 4'b0000;
      logic_rspNoHit_doIt <= 1'b0;
    end else begin
      logic_rspPendingCounter <= (_zz_22 - _zz_26);
      if(((io_input_rsp_valid && io_input_rsp_ready) && io_input_rsp_payload_last))begin
        logic_rspNoHit_doIt <= 1'b0;
      end
      if((((io_input_cmd_valid && io_input_cmd_ready) && logic_noHit) && io_input_cmd_payload_last))begin
        logic_rspNoHit_doIt <= 1'b1;
      end
    end
  end

  always @ (posedge CLKOUT0) begin
    if((io_input_cmd_valid && (! logic_cmdWait)))begin
      logic_rspHits_0 <= logic_hits_0;
      logic_rspHits_1 <= logic_hits_1;
      logic_rspHits_2 <= logic_hits_2;
      logic_rspHits_3 <= logic_hits_3;
      logic_rspHits_4 <= logic_hits_4;
      logic_rspHits_5 <= logic_hits_5;
      logic_rspHits_6 <= logic_hits_6;
      logic_rspHits_7 <= logic_hits_7;
      logic_rspHits_8 <= logic_hits_8;
      logic_rspHits_9 <= logic_hits_9;
      logic_rspHits_10 <= logic_hits_10;
    end
    if((io_input_cmd_valid && io_input_cmd_ready))begin
      logic_rspNoHit_singleBeatRsp <= (io_input_cmd_payload_fragment_opcode == 1'b1);
    end
    if((io_input_cmd_valid && io_input_cmd_ready))begin
      logic_rspNoHit_source <= io_input_cmd_payload_fragment_source;
    end
    if((io_input_cmd_valid && io_input_cmd_ready))begin
      logic_rspNoHit_context <= io_input_cmd_payload_fragment_context;
    end
    if((io_input_cmd_valid && io_input_cmd_ready))begin
      logic_rspNoHit_counter <= _zz_27[2 : 2];
    end
    if(logic_rspNoHit_doIt)begin
      if((io_input_rsp_valid && io_input_rsp_ready))begin
        logic_rspNoHit_counter <= (logic_rspNoHit_counter - 1'b1);
      end
    end
  end


endmodule

module BmbDecoder_2 (
  input               io_input_cmd_valid,
  output reg          io_input_cmd_ready,
  input               io_input_cmd_payload_last,
  input      [0:0]    io_input_cmd_payload_fragment_source,
  input      [0:0]    io_input_cmd_payload_fragment_opcode,
  input      [12:0]   io_input_cmd_payload_fragment_address,
  input      [1:0]    io_input_cmd_payload_fragment_length,
  input      [31:0]   io_input_cmd_payload_fragment_data,
  input      [3:0]    io_input_cmd_payload_fragment_mask,
  input      [6:0]    io_input_cmd_payload_fragment_context,
  output reg          io_input_rsp_valid,
  input               io_input_rsp_ready,
  output reg          io_input_rsp_payload_last,
  output reg [0:0]    io_input_rsp_payload_fragment_source,
  output reg [0:0]    io_input_rsp_payload_fragment_opcode,
  output     [31:0]   io_input_rsp_payload_fragment_data,
  output reg [6:0]    io_input_rsp_payload_fragment_context,
  output reg          io_outputs_0_cmd_valid,
  input               io_outputs_0_cmd_ready,
  output              io_outputs_0_cmd_payload_last,
  output     [0:0]    io_outputs_0_cmd_payload_fragment_source,
  output     [0:0]    io_outputs_0_cmd_payload_fragment_opcode,
  output     [12:0]   io_outputs_0_cmd_payload_fragment_address,
  output     [1:0]    io_outputs_0_cmd_payload_fragment_length,
  output     [31:0]   io_outputs_0_cmd_payload_fragment_data,
  output     [3:0]    io_outputs_0_cmd_payload_fragment_mask,
  output     [6:0]    io_outputs_0_cmd_payload_fragment_context,
  input               io_outputs_0_rsp_valid,
  output              io_outputs_0_rsp_ready,
  input               io_outputs_0_rsp_payload_last,
  input      [0:0]    io_outputs_0_rsp_payload_fragment_source,
  input      [0:0]    io_outputs_0_rsp_payload_fragment_opcode,
  input      [31:0]   io_outputs_0_rsp_payload_fragment_data,
  input      [6:0]    io_outputs_0_rsp_payload_fragment_context,
  output reg          io_outputs_1_cmd_valid,
  input               io_outputs_1_cmd_ready,
  output              io_outputs_1_cmd_payload_last,
  output     [0:0]    io_outputs_1_cmd_payload_fragment_source,
  output     [0:0]    io_outputs_1_cmd_payload_fragment_opcode,
  output     [12:0]   io_outputs_1_cmd_payload_fragment_address,
  output     [1:0]    io_outputs_1_cmd_payload_fragment_length,
  output     [31:0]   io_outputs_1_cmd_payload_fragment_data,
  output     [3:0]    io_outputs_1_cmd_payload_fragment_mask,
  output     [6:0]    io_outputs_1_cmd_payload_fragment_context,
  input               io_outputs_1_rsp_valid,
  output              io_outputs_1_rsp_ready,
  input               io_outputs_1_rsp_payload_last,
  input      [0:0]    io_outputs_1_rsp_payload_fragment_source,
  input      [0:0]    io_outputs_1_rsp_payload_fragment_opcode,
  input      [31:0]   io_outputs_1_rsp_payload_fragment_data,
  input      [6:0]    io_outputs_1_rsp_payload_fragment_context,
  input               CLKOUT1,
  input               sdramCd_logic_outputReset
);
  reg                 _zz_4;
  reg        [0:0]    _zz_5;
  reg        [0:0]    _zz_6;
  reg        [31:0]   _zz_7;
  reg        [6:0]    _zz_8;
  wire       [3:0]    _zz_9;
  wire       [0:0]    _zz_10;
  wire       [3:0]    _zz_11;
  wire       [0:0]    _zz_12;
  wire       [3:0]    _zz_13;
  wire       [2:0]    _zz_14;
  wire       [1:0]    _zz_15;
  wire       [2:0]    _zz_16;
  wire                logic_hits_0;
  wire                logic_hits_1;
  wire                _zz_1;
  wire                _zz_2;
  wire                logic_noHit;
  reg        [3:0]    logic_rspPendingCounter;
  wire                logic_cmdWait;
  reg                 logic_rspHits_0;
  reg                 logic_rspHits_1;
  wire                logic_rspPending;
  wire                logic_rspNoHitValid;
  reg                 logic_rspNoHit_doIt;
  reg                 logic_rspNoHit_singleBeatRsp;
  reg        [0:0]    logic_rspNoHit_source;
  reg        [6:0]    logic_rspNoHit_context;
  reg        [0:0]    logic_rspNoHit_counter;
  wire       [0:0]    _zz_3;

  assign _zz_9 = (logic_rspPendingCounter + _zz_11);
  assign _zz_10 = ((io_input_cmd_valid && io_input_cmd_ready) && io_input_cmd_payload_last);
  assign _zz_11 = {3'd0, _zz_10};
  assign _zz_12 = ((io_input_rsp_valid && io_input_rsp_ready) && io_input_rsp_payload_last);
  assign _zz_13 = {3'd0, _zz_12};
  assign _zz_14 = ({1'b0,io_input_cmd_payload_fragment_length} + _zz_16);
  assign _zz_15 = io_input_cmd_payload_fragment_address[1 : 0];
  assign _zz_16 = {1'd0, _zz_15};
  always @(*) begin
    case(_zz_3)
      1'b0 : begin
        _zz_4 = io_outputs_0_rsp_payload_last;
        _zz_5 = io_outputs_0_rsp_payload_fragment_source;
        _zz_6 = io_outputs_0_rsp_payload_fragment_opcode;
        _zz_7 = io_outputs_0_rsp_payload_fragment_data;
        _zz_8 = io_outputs_0_rsp_payload_fragment_context;
      end
      default : begin
        _zz_4 = io_outputs_1_rsp_payload_last;
        _zz_5 = io_outputs_1_rsp_payload_fragment_source;
        _zz_6 = io_outputs_1_rsp_payload_fragment_opcode;
        _zz_7 = io_outputs_1_rsp_payload_fragment_data;
        _zz_8 = io_outputs_1_rsp_payload_fragment_context;
      end
    endcase
  end

  assign logic_hits_0 = ((io_input_cmd_payload_fragment_address & (~ 13'h0fff)) == 13'h1000);
  always @ (*) begin
    io_outputs_0_cmd_valid = (io_input_cmd_valid && logic_hits_0);
    if(logic_cmdWait)begin
      io_outputs_0_cmd_valid = 1'b0;
    end
  end

  assign _zz_1 = io_input_cmd_payload_last;
  assign io_outputs_0_cmd_payload_last = _zz_1;
  assign io_outputs_0_cmd_payload_fragment_source = io_input_cmd_payload_fragment_source;
  assign io_outputs_0_cmd_payload_fragment_opcode = io_input_cmd_payload_fragment_opcode;
  assign io_outputs_0_cmd_payload_fragment_address = io_input_cmd_payload_fragment_address;
  assign io_outputs_0_cmd_payload_fragment_length = io_input_cmd_payload_fragment_length;
  assign io_outputs_0_cmd_payload_fragment_data = io_input_cmd_payload_fragment_data;
  assign io_outputs_0_cmd_payload_fragment_mask = io_input_cmd_payload_fragment_mask;
  assign io_outputs_0_cmd_payload_fragment_context = io_input_cmd_payload_fragment_context;
  assign logic_hits_1 = ((io_input_cmd_payload_fragment_address & (~ 13'h0fff)) == 13'h0);
  always @ (*) begin
    io_outputs_1_cmd_valid = (io_input_cmd_valid && logic_hits_1);
    if(logic_cmdWait)begin
      io_outputs_1_cmd_valid = 1'b0;
    end
  end

  assign _zz_2 = io_input_cmd_payload_last;
  assign io_outputs_1_cmd_payload_last = _zz_2;
  assign io_outputs_1_cmd_payload_fragment_source = io_input_cmd_payload_fragment_source;
  assign io_outputs_1_cmd_payload_fragment_opcode = io_input_cmd_payload_fragment_opcode;
  assign io_outputs_1_cmd_payload_fragment_address = io_input_cmd_payload_fragment_address;
  assign io_outputs_1_cmd_payload_fragment_length = io_input_cmd_payload_fragment_length;
  assign io_outputs_1_cmd_payload_fragment_data = io_input_cmd_payload_fragment_data;
  assign io_outputs_1_cmd_payload_fragment_mask = io_input_cmd_payload_fragment_mask;
  assign io_outputs_1_cmd_payload_fragment_context = io_input_cmd_payload_fragment_context;
  assign logic_noHit = (! ({logic_hits_1,logic_hits_0} != 2'b00));
  always @ (*) begin
    io_input_cmd_ready = (({(logic_hits_1 && io_outputs_1_cmd_ready),(logic_hits_0 && io_outputs_0_cmd_ready)} != 2'b00) || logic_noHit);
    if(logic_cmdWait)begin
      io_input_cmd_ready = 1'b0;
    end
  end

  assign logic_rspPending = (logic_rspPendingCounter != 4'b0000);
  assign logic_rspNoHitValid = (! ({logic_rspHits_1,logic_rspHits_0} != 2'b00));
  always @ (*) begin
    io_input_rsp_valid = (({io_outputs_1_rsp_valid,io_outputs_0_rsp_valid} != 2'b00) || (logic_rspPending && logic_rspNoHitValid));
    if(logic_rspNoHit_doIt)begin
      io_input_rsp_valid = 1'b1;
    end
  end

  assign _zz_3 = logic_rspHits_1;
  always @ (*) begin
    io_input_rsp_payload_last = _zz_4;
    if(logic_rspNoHit_doIt)begin
      io_input_rsp_payload_last = 1'b0;
      if((logic_rspNoHit_counter == 1'b0))begin
        io_input_rsp_payload_last = 1'b1;
      end
      if(logic_rspNoHit_singleBeatRsp)begin
        io_input_rsp_payload_last = 1'b1;
      end
    end
  end

  always @ (*) begin
    io_input_rsp_payload_fragment_source = _zz_5;
    if(logic_rspNoHit_doIt)begin
      io_input_rsp_payload_fragment_source = logic_rspNoHit_source;
    end
  end

  always @ (*) begin
    io_input_rsp_payload_fragment_opcode = _zz_6;
    if(logic_rspNoHit_doIt)begin
      io_input_rsp_payload_fragment_opcode = 1'b1;
    end
  end

  assign io_input_rsp_payload_fragment_data = _zz_7;
  always @ (*) begin
    io_input_rsp_payload_fragment_context = _zz_8;
    if(logic_rspNoHit_doIt)begin
      io_input_rsp_payload_fragment_context = logic_rspNoHit_context;
    end
  end

  assign io_outputs_0_rsp_ready = io_input_rsp_ready;
  assign io_outputs_1_rsp_ready = io_input_rsp_ready;
  assign logic_cmdWait = ((logic_rspPending && (((logic_hits_0 != logic_rspHits_0) || (logic_hits_1 != logic_rspHits_1)) || logic_rspNoHitValid)) || (logic_rspPendingCounter == 4'b1111));
  always @ (posedge CLKOUT1) begin
    if(sdramCd_logic_outputReset) begin
      logic_rspPendingCounter <= 4'b0000;
      logic_rspNoHit_doIt <= 1'b0;
    end else begin
      logic_rspPendingCounter <= (_zz_9 - _zz_13);
      if(((io_input_rsp_valid && io_input_rsp_ready) && io_input_rsp_payload_last))begin
        logic_rspNoHit_doIt <= 1'b0;
      end
      if((((io_input_cmd_valid && io_input_cmd_ready) && logic_noHit) && io_input_cmd_payload_last))begin
        logic_rspNoHit_doIt <= 1'b1;
      end
    end
  end

  always @ (posedge CLKOUT1) begin
    if((io_input_cmd_valid && (! logic_cmdWait)))begin
      logic_rspHits_0 <= logic_hits_0;
      logic_rspHits_1 <= logic_hits_1;
    end
    if((io_input_cmd_valid && io_input_cmd_ready))begin
      logic_rspNoHit_singleBeatRsp <= (io_input_cmd_payload_fragment_opcode == 1'b1);
    end
    if((io_input_cmd_valid && io_input_cmd_ready))begin
      logic_rspNoHit_source <= io_input_cmd_payload_fragment_source;
    end
    if((io_input_cmd_valid && io_input_cmd_ready))begin
      logic_rspNoHit_context <= io_input_cmd_payload_fragment_context;
    end
    if((io_input_cmd_valid && io_input_cmd_ready))begin
      logic_rspNoHit_counter <= _zz_14[2 : 2];
    end
    if(logic_rspNoHit_doIt)begin
      if((io_input_rsp_valid && io_input_rsp_ready))begin
        logic_rspNoHit_counter <= (logic_rspNoHit_counter - 1'b1);
      end
    end
  end


endmodule

module BmbArbiter_1 (
  input               io_inputs_0_cmd_valid,
  output              io_inputs_0_cmd_ready,
  input               io_inputs_0_cmd_payload_last,
  input      [3:0]    io_inputs_0_cmd_payload_fragment_source,
  input      [0:0]    io_inputs_0_cmd_payload_fragment_opcode,
  input      [26:0]   io_inputs_0_cmd_payload_fragment_address,
  input      [5:0]    io_inputs_0_cmd_payload_fragment_length,
  input      [63:0]   io_inputs_0_cmd_payload_fragment_data,
  input      [7:0]    io_inputs_0_cmd_payload_fragment_mask,
  output              io_inputs_0_rsp_valid,
  input               io_inputs_0_rsp_ready,
  output              io_inputs_0_rsp_payload_last,
  output     [3:0]    io_inputs_0_rsp_payload_fragment_source,
  output     [0:0]    io_inputs_0_rsp_payload_fragment_opcode,
  output     [63:0]   io_inputs_0_rsp_payload_fragment_data,
  input               io_inputs_1_cmd_valid,
  output              io_inputs_1_cmd_ready,
  input               io_inputs_1_cmd_payload_last,
  input      [0:0]    io_inputs_1_cmd_payload_fragment_source,
  input      [0:0]    io_inputs_1_cmd_payload_fragment_opcode,
  input      [26:0]   io_inputs_1_cmd_payload_fragment_address,
  input      [5:0]    io_inputs_1_cmd_payload_fragment_length,
  input      [63:0]   io_inputs_1_cmd_payload_fragment_data,
  input      [7:0]    io_inputs_1_cmd_payload_fragment_mask,
  output              io_inputs_1_rsp_valid,
  input               io_inputs_1_rsp_ready,
  output              io_inputs_1_rsp_payload_last,
  output     [0:0]    io_inputs_1_rsp_payload_fragment_source,
  output     [0:0]    io_inputs_1_rsp_payload_fragment_opcode,
  output     [63:0]   io_inputs_1_rsp_payload_fragment_data,
  output              io_output_cmd_valid,
  input               io_output_cmd_ready,
  output              io_output_cmd_payload_last,
  output     [4:0]    io_output_cmd_payload_fragment_source,
  output     [0:0]    io_output_cmd_payload_fragment_opcode,
  output     [26:0]   io_output_cmd_payload_fragment_address,
  output     [5:0]    io_output_cmd_payload_fragment_length,
  output     [63:0]   io_output_cmd_payload_fragment_data,
  output     [7:0]    io_output_cmd_payload_fragment_mask,
  input               io_output_rsp_valid,
  output              io_output_rsp_ready,
  input               io_output_rsp_payload_last,
  input      [4:0]    io_output_rsp_payload_fragment_source,
  input      [0:0]    io_output_rsp_payload_fragment_opcode,
  input      [63:0]   io_output_rsp_payload_fragment_data,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  wire       [4:0]    _zz_1;
  wire       [4:0]    _zz_2;
  reg                 _zz_3;
  wire                memory_arbiter_io_inputs_0_ready;
  wire                memory_arbiter_io_inputs_1_ready;
  wire                memory_arbiter_io_output_valid;
  wire                memory_arbiter_io_output_payload_last;
  wire       [4:0]    memory_arbiter_io_output_payload_fragment_source;
  wire       [0:0]    memory_arbiter_io_output_payload_fragment_opcode;
  wire       [26:0]   memory_arbiter_io_output_payload_fragment_address;
  wire       [5:0]    memory_arbiter_io_output_payload_fragment_length;
  wire       [63:0]   memory_arbiter_io_output_payload_fragment_data;
  wire       [7:0]    memory_arbiter_io_output_payload_fragment_mask;
  wire       [0:0]    memory_arbiter_io_chosen;
  wire       [1:0]    memory_arbiter_io_chosenOH;
  wire       [5:0]    _zz_4;
  wire       [3:0]    _zz_5;
  wire       [0:0]    memory_rspSel;

  assign _zz_4 = {memory_arbiter_io_output_payload_fragment_source,memory_arbiter_io_chosen};
  assign _zz_5 = (io_output_rsp_payload_fragment_source >>> 1);
  StreamArbiter_4 memory_arbiter (
    .io_inputs_0_valid                       (io_inputs_0_cmd_valid                                    ), //i
    .io_inputs_0_ready                       (memory_arbiter_io_inputs_0_ready                         ), //o
    .io_inputs_0_payload_last                (io_inputs_0_cmd_payload_last                             ), //i
    .io_inputs_0_payload_fragment_source     (_zz_1[4:0]                                               ), //i
    .io_inputs_0_payload_fragment_opcode     (io_inputs_0_cmd_payload_fragment_opcode                  ), //i
    .io_inputs_0_payload_fragment_address    (io_inputs_0_cmd_payload_fragment_address[26:0]           ), //i
    .io_inputs_0_payload_fragment_length     (io_inputs_0_cmd_payload_fragment_length[5:0]             ), //i
    .io_inputs_0_payload_fragment_data       (io_inputs_0_cmd_payload_fragment_data[63:0]              ), //i
    .io_inputs_0_payload_fragment_mask       (io_inputs_0_cmd_payload_fragment_mask[7:0]               ), //i
    .io_inputs_1_valid                       (io_inputs_1_cmd_valid                                    ), //i
    .io_inputs_1_ready                       (memory_arbiter_io_inputs_1_ready                         ), //o
    .io_inputs_1_payload_last                (io_inputs_1_cmd_payload_last                             ), //i
    .io_inputs_1_payload_fragment_source     (_zz_2[4:0]                                               ), //i
    .io_inputs_1_payload_fragment_opcode     (io_inputs_1_cmd_payload_fragment_opcode                  ), //i
    .io_inputs_1_payload_fragment_address    (io_inputs_1_cmd_payload_fragment_address[26:0]           ), //i
    .io_inputs_1_payload_fragment_length     (io_inputs_1_cmd_payload_fragment_length[5:0]             ), //i
    .io_inputs_1_payload_fragment_data       (io_inputs_1_cmd_payload_fragment_data[63:0]              ), //i
    .io_inputs_1_payload_fragment_mask       (io_inputs_1_cmd_payload_fragment_mask[7:0]               ), //i
    .io_output_valid                         (memory_arbiter_io_output_valid                           ), //o
    .io_output_ready                         (io_output_cmd_ready                                      ), //i
    .io_output_payload_last                  (memory_arbiter_io_output_payload_last                    ), //o
    .io_output_payload_fragment_source       (memory_arbiter_io_output_payload_fragment_source[4:0]    ), //o
    .io_output_payload_fragment_opcode       (memory_arbiter_io_output_payload_fragment_opcode         ), //o
    .io_output_payload_fragment_address      (memory_arbiter_io_output_payload_fragment_address[26:0]  ), //o
    .io_output_payload_fragment_length       (memory_arbiter_io_output_payload_fragment_length[5:0]    ), //o
    .io_output_payload_fragment_data         (memory_arbiter_io_output_payload_fragment_data[63:0]     ), //o
    .io_output_payload_fragment_mask         (memory_arbiter_io_output_payload_fragment_mask[7:0]      ), //o
    .io_chosen                               (memory_arbiter_io_chosen                                 ), //o
    .io_chosenOH                             (memory_arbiter_io_chosenOH[1:0]                          ), //o
    .CLKOUT0                                 (CLKOUT0                                                  ), //i
    .systemCd_logic_outputReset              (systemCd_logic_outputReset                               )  //i
  );
  always @(*) begin
    case(memory_rspSel)
      1'b0 : begin
        _zz_3 = io_inputs_0_rsp_ready;
      end
      default : begin
        _zz_3 = io_inputs_1_rsp_ready;
      end
    endcase
  end

  assign io_inputs_0_cmd_ready = memory_arbiter_io_inputs_0_ready;
  assign _zz_1 = {1'd0, io_inputs_0_cmd_payload_fragment_source};
  assign io_inputs_1_cmd_ready = memory_arbiter_io_inputs_1_ready;
  assign _zz_2 = {4'd0, io_inputs_1_cmd_payload_fragment_source};
  assign io_output_cmd_valid = memory_arbiter_io_output_valid;
  assign io_output_cmd_payload_last = memory_arbiter_io_output_payload_last;
  assign io_output_cmd_payload_fragment_opcode = memory_arbiter_io_output_payload_fragment_opcode;
  assign io_output_cmd_payload_fragment_address = memory_arbiter_io_output_payload_fragment_address;
  assign io_output_cmd_payload_fragment_length = memory_arbiter_io_output_payload_fragment_length;
  assign io_output_cmd_payload_fragment_data = memory_arbiter_io_output_payload_fragment_data;
  assign io_output_cmd_payload_fragment_mask = memory_arbiter_io_output_payload_fragment_mask;
  assign io_output_cmd_payload_fragment_source = _zz_4[4:0];
  assign memory_rspSel = io_output_rsp_payload_fragment_source[0 : 0];
  assign io_inputs_0_rsp_valid = (io_output_rsp_valid && (memory_rspSel == 1'b0));
  assign io_inputs_0_rsp_payload_last = io_output_rsp_payload_last;
  assign io_inputs_0_rsp_payload_fragment_opcode = io_output_rsp_payload_fragment_opcode;
  assign io_inputs_0_rsp_payload_fragment_data = io_output_rsp_payload_fragment_data;
  assign io_inputs_0_rsp_payload_fragment_source = (io_output_rsp_payload_fragment_source >>> 1);
  assign io_inputs_1_rsp_valid = (io_output_rsp_valid && (memory_rspSel == 1'b1));
  assign io_inputs_1_rsp_payload_last = io_output_rsp_payload_last;
  assign io_inputs_1_rsp_payload_fragment_opcode = io_output_rsp_payload_fragment_opcode;
  assign io_inputs_1_rsp_payload_fragment_data = io_output_rsp_payload_fragment_data;
  assign io_inputs_1_rsp_payload_fragment_source = _zz_5[0:0];
  assign io_output_rsp_ready = _zz_3;

endmodule

module XilinxS7Phy (
  input               io_ctrl_phases_0_CASn,
  input               io_ctrl_phases_0_CKE,
  input               io_ctrl_phases_0_CSn,
  input               io_ctrl_phases_0_RASn,
  input               io_ctrl_phases_0_WEn,
  input               io_ctrl_phases_0_ODT,
  input      [1:0]    io_ctrl_phases_0_DM_0,
  input      [1:0]    io_ctrl_phases_0_DM_1,
  input      [15:0]   io_ctrl_phases_0_DQw_0,
  input      [15:0]   io_ctrl_phases_0_DQw_1,
  output reg [15:0]   io_ctrl_phases_0_DQr_0,
  output reg [15:0]   io_ctrl_phases_0_DQr_1,
  input               io_ctrl_phases_1_CASn,
  input               io_ctrl_phases_1_CKE,
  input               io_ctrl_phases_1_CSn,
  input               io_ctrl_phases_1_RASn,
  input               io_ctrl_phases_1_WEn,
  input               io_ctrl_phases_1_ODT,
  input      [1:0]    io_ctrl_phases_1_DM_0,
  input      [1:0]    io_ctrl_phases_1_DM_1,
  input      [15:0]   io_ctrl_phases_1_DQw_0,
  input      [15:0]   io_ctrl_phases_1_DQw_1,
  output reg [15:0]   io_ctrl_phases_1_DQr_0,
  output reg [15:0]   io_ctrl_phases_1_DQr_1,
  input      [12:0]   io_ctrl_ADDR,
  input      [2:0]    io_ctrl_BA,
  input               io_ctrl_DQS_preamble,
  input               io_ctrl_DQS_active,
  input               io_ctrl_DQS_postamble,
  input               io_ctrl_writeEnable,
  input               io_ctrl_readEnable,
  output              io_ctrl_readValid,
  output reg [12:0]   io_sdram_ADDR,
  output reg [2:0]    io_sdram_BA,
  output              io_sdram_CASn,
  output              io_sdram_CKE,
  output              io_sdram_CSn,
  output              io_sdram_RASn,
  output              io_sdram_WEn,
  output              io_sdram_CK,
  output              io_sdram_CKn,
  output              io_sdram_ODT,
  output reg [1:0]    io_sdram_DM,
   inout     [15:0]   io_sdram_DQ,
   inout     [1:0]    io_sdram_DQS,
   inout     [1:0]    io_sdram_DQSn,
  input               sdramCd_logic_outputReset,
  input               CLKOUT4,
  input               CLKOUT2,
  input               CLKOUT3,
  input               CLKOUT1,
  input      [4:0]    idelayValueIn,
  input               dq_0_idelayLoad,
  input               dq_0_bitsleep,
  input               dq_1_idelayLoad,
  input               dq_1_bitsleep,
  input               dq_2_idelayLoad,
  input               dq_2_bitsleep,
  input               dq_3_idelayLoad,
  input               dq_3_bitsleep,
  input               dq_4_idelayLoad,
  input               dq_4_bitsleep,
  input               dq_5_idelayLoad,
  input               dq_5_bitsleep,
  input               dq_6_idelayLoad,
  input               dq_6_bitsleep,
  input               dq_7_idelayLoad,
  input               dq_7_bitsleep,
  input               dq_8_idelayLoad,
  input               dq_8_bitsleep,
  input               dq_9_idelayLoad,
  input               dq_9_bitsleep,
  input               dq_10_idelayLoad,
  input               dq_10_bitsleep,
  input               dq_11_idelayLoad,
  input               dq_11_bitsleep,
  input               dq_12_idelayLoad,
  input               dq_12_bitsleep,
  input               dq_13_idelayLoad,
  input               dq_13_bitsleep,
  input               dq_14_idelayLoad,
  input               dq_14_bitsleep,
  input               dq_15_idelayLoad,
  input               dq_15_bitsleep
);
  wire                _zz_18;
  wire                _zz_19;
  wire                _zz_20;
  wire                _zz_21;
  wire                _zz_22;
  wire                _zz_23;
  wire                _zz_24;
  wire                _zz_25;
  wire                _zz_26;
  wire                _zz_27;
  wire                _zz_28;
  wire                _zz_29;
  wire                _zz_30;
  wire                _zz_31;
  wire                _zz_32;
  wire                _zz_33;
  wire                _zz_34;
  wire                _zz_35;
  wire                _zz_36;
  wire                _zz_37;
  wire                _zz_38;
  wire                _zz_39;
  wire                _zz_40;
  wire                _zz_41;
  wire                _zz_42;
  wire                _zz_43;
  wire                _zz_44;
  wire                _zz_45;
  wire                _zz_46;
  wire                _zz_47;
  wire                _zz_48;
  wire                _zz_49;
  wire                _zz_50;
  wire                _zz_51;
  wire                _zz_52;
  wire                _zz_53;
  wire                _zz_54;
  wire                _zz_55;
  wire                _zz_56;
  wire                _zz_57;
  wire                _zz_58;
  wire                _zz_59;
  wire                _zz_60;
  wire                _zz_61;
  wire                _zz_62;
  wire                _zz_63;
  wire                _zz_64;
  wire                _zz_65;
  wire                _zz_66;
  wire                _zz_67;
  wire                _zz_68;
  wire                _zz_69;
  wire                _zz_70;
  wire                _zz_71;
  wire                _zz_72;
  wire                _zz_73;
  wire                _zz_74;
  wire                _zz_75;
  wire                _zz_76;
  wire                _zz_77;
  wire                _zz_78;
  wire                _zz_79;
  wire                _zz_80;
  wire                _zz_81;
  wire                _zz_82;
  wire                _zz_83;
  wire                _zz_84;
  wire                _zz_85;
  wire                _zz_86;
  wire                _zz_87;
  wire                _zz_88;
  wire                _zz_89;
  wire                _zz_90;
  wire                _zz_91;
  wire                _zz_92;
  wire                _zz_93;
  wire                _zz_94;
  wire                _zz_95;
  wire                _zz_96;
  wire                _zz_97;
  wire                _zz_98;
  wire                _zz_99;
  wire                _zz_100;
  wire                _zz_101;
  wire                _zz_102;
  wire                _zz_103;
  wire                _zz_104;
  wire                _zz_105;
  wire                _zz_106;
  wire                _zz_107;
  wire                _zz_108;
  wire                _zz_109;
  wire                _zz_110;
  wire                _zz_111;
  wire                _zz_112;
  wire                _zz_113;
  wire                _zz_114;
  wire                _zz_115;
  wire                _zz_116;
  wire                _zz_117;
  wire                _zz_118;
  wire                _zz_119;
  wire                _zz_120;
  wire                _zz_121;
  wire                _zz_122;
  wire                _zz_123;
  wire                _zz_124;
  wire                _zz_125;
  wire                _zz_126;
  wire                _zz_127;
  wire                _zz_128;
  wire                _zz_129;
  wire                _zz_130;
  wire                _zz_131;
  wire                _zz_132;
  wire                _zz_133;
  wire                _zz_134;
  wire                _zz_135;
  wire                _zz_136;
  wire                _zz_137;
  wire                _zz_138;
  wire                _zz_139;
  wire                _zz_140;
  wire                _zz_141;
  wire                _zz_142;
  wire                _zz_143;
  wire                _zz_144;
  wire                _zz_145;
  wire                _zz_146;
  wire                _zz_147;
  wire                _zz_148;
  wire                _zz_149;
  wire                _zz_150;
  wire                _zz_151;
  wire                _zz_152;
  wire                _zz_153;
  wire                _zz_154;
  wire                _zz_155;
  wire                _zz_156;
  wire                _zz_157;
  wire                _zz_158;
  wire                _zz_159;
  wire                _zz_160;
  wire                _zz_161;
  wire                _zz_162;
  wire                _zz_163;
  wire                _zz_164;
  wire                _zz_165;
  wire                _zz_166;
  wire                _zz_167;
  wire                _zz_168;
  wire                _zz_169;
  wire                _zz_170;
  wire                _zz_171;
  wire                _zz_172;
  wire                _zz_173;
  wire                _zz_174;
  wire                _zz_175;
  wire                _zz_176;
  wire                _zz_177;
  wire                _zz_178;
  wire                _zz_179;
  wire                _zz_180;
  wire                _zz_181;
  wire                _zz_182;
  wire                _zz_183;
  wire                _zz_184;
  wire                _zz_185;
  wire                _zz_186;
  wire                _zz_187;
  wire                _zz_188;
  wire                _zz_189;
  wire                _zz_190;
  wire                _zz_191;
  wire                _zz_192;
  wire                _zz_193;
  wire                _zz_194;
  wire                _zz_195;
  wire                _zz_196;
  wire                _zz_197;
  wire                _zz_198;
  wire                _zz_199;
  wire                _zz_200;
  wire                _zz_201;
  wire                _zz_202;
  wire                _zz_203;
  wire                _zz_204;
  wire                _zz_205;
  wire                _zz_206;
  wire                _zz_207;
  wire                _zz_208;
  wire                _zz_209;
  wire                _zz_210;
  wire                _zz_211;
  wire                _zz_212;
  wire                _zz_213;
  wire                _zz_214;
  wire                _zz_215;
  wire                _zz_216;
  wire                _zz_217;
  wire                _zz_218;
  wire                _zz_219;
  wire                _zz_220;
  wire                _zz_221;
  wire                _zz_222;
  wire                _zz_223;
  wire                _zz_224;
  wire                _zz_225;
  wire                _zz_226;
  wire                _zz_227;
  wire                _zz_228;
  wire                _zz_229;
  wire                _zz_230;
  wire                _zz_231;
  wire                _zz_232;
  wire                _zz_233;
  wire                _zz_234;
  wire                _zz_235;
  wire                _zz_236;
  wire                _zz_237;
  wire                _zz_238;
  wire                _zz_239;
  wire                _zz_240;
  wire                _zz_241;
  wire                _zz_242;
  wire                _zz_243;
  wire                _zz_244;
  wire                _zz_245;
  wire                _zz_246;
  wire                _zz_247;
  wire                _zz_248;
  wire                _zz_249;
  wire                _zz_250;
  wire                _zz_251;
  wire                _zz_252;
  wire                _zz_253;
  wire                _zz_254;
  wire                _zz_255;
  wire                _zz_256;
  wire                _zz_257;
  wire                _zz_258;
  wire                _zz_259;
  wire                _zz_260;
  wire                _zz_261;
  wire                _zz_262;
  wire                _zz_263;
  wire                _zz_264;
  wire                _zz_265;
  wire                _zz_266;
  wire                _zz_267;
  wire                _zz_268;
  wire                _zz_269;
  wire                _zz_270;
  wire                _zz_271;
  wire                _zz_272;
  wire                _zz_273;
  wire                _zz_274;
  wire                _zz_275;
  wire                _zz_276;
  wire                _zz_277;
  wire                _zz_278;
  wire                _zz_279;
  wire                _zz_280;
  wire                _zz_281;
  wire                _zz_282;
  wire                _zz_283;
  wire                _zz_284;
  wire                _zz_285;
  wire                _zz_286;
  wire                _zz_287;
  wire                _zz_288;
  wire                _zz_289;
  wire                _zz_290;
  wire                _zz_291;
  wire                _zz_292;
  wire                _zz_293;
  wire                _zz_294;
  wire                _zz_295;
  wire                _zz_296;
  wire                _zz_297;
  wire                _zz_298;
  wire                _zz_299;
  wire                _zz_300;
  wire                _zz_301;
  wire                _zz_302;
  wire                _zz_303;
  wire                _zz_304;
  wire                _zz_305;
  wire                _zz_306;
  wire                _zz_307;
  wire                _zz_308;
  wire                _zz_309;
  wire                _zz_310;
  wire                _zz_311;
  wire                _zz_312;
  wire                _zz_313;
  wire                _zz_314;
  wire                _zz_315;
  wire                _zz_316;
  wire                _zz_317;
  wire                _zz_318;
  wire                _zz_319;
  wire                _zz_320;
  wire                _zz_321;
  wire                _zz_322;
  wire                _zz_323;
  wire                _zz_324;
  wire                _zz_325;
  wire                _zz_326;
  wire                _zz_327;
  wire                _zz_328;
  wire                _zz_329;
  wire                _zz_330;
  wire                _zz_331;
  wire                _zz_332;
  wire                _zz_333;
  wire                _zz_334;
  wire                _zz_335;
  wire                _zz_336;
  wire                _zz_337;
  wire                _zz_338;
  wire                _zz_339;
  wire                _zz_340;
  wire                _zz_341;
  wire                _zz_342;
  wire                _zz_343;
  wire                _zz_344;
  wire                _zz_345;
  wire                _zz_346;
  wire                _zz_347;
  wire                _zz_348;
  wire                _zz_349;
  wire                _zz_350;
  wire                _zz_351;
  wire                _zz_352;
  wire                _zz_353;
  wire                _zz_354;
  wire                _zz_355;
  wire                _zz_356;
  wire                _zz_357;
  wire                _zz_358;
  wire                _zz_359;
  wire                _zz_360;
  wire                _zz_361;
  wire                _zz_362;
  wire                _zz_363;
  wire                _zz_364;
  wire                _zz_365;
  wire                _zz_366;
  wire                _zz_367;
  wire                _zz_368;
  wire                _zz_369;
  wire                _zz_370;
  wire                _zz_371;
  wire                _zz_372;
  wire                _zz_373;
  wire                _zz_374;
  wire                _zz_375;
  wire                _zz_376;
  wire                _zz_377;
  wire                _zz_378;
  wire                _zz_379;
  wire                _zz_380;
  wire                _zz_381;
  wire                _zz_382;
  wire                _zz_383;
  wire                _zz_384;
  wire                _zz_385;
  wire                _zz_386;
  wire                _zz_387;
  wire                _zz_388;
  wire                _zz_389;
  wire                _zz_390;
  wire                _zz_391;
  wire                _zz_392;
  wire                _zz_393;
  wire                _zz_394;
  wire                _zz_395;
  wire                _zz_396;
  wire                _zz_397;
  wire                _zz_398;
  wire                _zz_399;
  wire                _zz_400;
  wire                _zz_401;
  wire                _zz_402;
  wire                _zz_403;
  wire                _zz_404;
  wire                _zz_405;
  wire                _zz_406;
  wire                _zz_407;
  wire                _zz_408;
  wire                _zz_409;
  wire                _zz_410;
  wire                _zz_411;
  wire                _zz_412;
  wire                _zz_413;
  wire                _zz_414;
  wire                _zz_415;
  wire                _zz_416;
  wire                _zz_417;
  wire                _zz_418;
  wire                _zz_419;
  wire                _zz_420;
  wire                _zz_421;
  wire                _zz_422;
  wire                _zz_423;
  wire                _zz_424;
  wire                _zz_425;
  wire                _zz_426;
  wire                _zz_427;
  wire                _zz_428;
  wire                _zz_429;
  wire                _zz_430;
  wire                _zz_431;
  wire                _zz_432;
  wire                _zz_433;
  wire                _zz_434;
  wire                _zz_435;
  wire                _zz_436;
  wire                _zz_437;
  wire                _zz_438;
  wire                _zz_439;
  wire                _zz_440;
  wire                _zz_441;
  wire                _zz_442;
  wire                _zz_443;
  wire                _zz_444;
  wire                _zz_445;
  wire                _zz_446;
  wire                _zz_447;
  wire                _zz_448;
  wire                _zz_449;
  wire                _zz_450;
  wire                _zz_451;
  wire                _zz_452;
  wire                _zz_453;
  wire                _zz_454;
  wire                _zz_455;
  wire                _zz_456;
  wire                _zz_457;
  wire                _zz_458;
  wire                _zz_459;
  wire                _zz_460;
  wire                _zz_461;
  wire                _zz_462;
  wire                _zz_463;
  wire                _zz_464;
  wire                _zz_465;
  wire                _zz_466;
  wire                _zz_467;
  wire                _zz_468;
  wire                _zz_469;
  wire                _zz_470;
  wire                _zz_471;
  wire                _zz_472;
  wire                _zz_473;
  wire                _zz_474;
  wire                _zz_475;
  wire                _zz_476;
  wire                _zz_477;
  wire                _zz_478;
  wire                _zz_479;
  wire                _zz_480;
  wire                _zz_481;
  wire                _zz_482;
  wire                _zz_483;
  wire                _zz_484;
  wire                _zz_485;
  wire                _zz_486;
  wire                _zz_487;
  wire                _zz_488;
  wire                _zz_489;
  wire                _zz_490;
  wire                _zz_491;
  wire                _zz_492;
  wire                _zz_493;
  wire                _zz_494;
  wire                _zz_495;
  wire                _zz_496;
  wire                _zz_497;
  wire                _zz_498;
  wire                _zz_499;
  wire                _zz_500;
  wire                _zz_501;
  wire                _zz_502;
  wire                _zz_503;
  wire                _zz_504;
  wire                _zz_505;
  wire                _zz_506;
  wire                _zz_507;
  wire                _zz_508;
  wire                _zz_509;
  wire                _zz_510;
  wire                _zz_511;
  wire                _zz_512;
  wire                _zz_513;
  wire                _zz_514;
  wire                _zz_515;
  wire                _zz_516;
  wire                _zz_517;
  wire                _zz_518;
  wire                _zz_519;
  wire                _zz_520;
  wire                _zz_521;
  wire                _zz_522;
  wire                _zz_523;
  wire                _zz_524;
  wire                _zz_525;
  wire                _zz_526;
  wire                _zz_527;
  wire                _zz_528;
  wire                _zz_529;
  wire                _zz_530;
  wire                _zz_531;
  wire                _zz_532;
  wire                _zz_533;
  wire                _zz_534;
  wire                _zz_535;
  wire                _zz_536;
  wire                _zz_537;
  wire                _zz_538;
  wire                _zz_539;
  wire                _zz_540;
  wire                _zz_541;
  wire                _zz_542;
  wire                _zz_543;
  wire                _zz_544;
  wire                _zz_545;
  wire                _zz_546;
  wire                _zz_547;
  wire                _zz_548;
  wire                _zz_549;
  wire                _zz_550;
  wire                _zz_551;
  wire                _zz_552;
  wire                _zz_553;
  wire                _zz_554;
  wire                _zz_555;
  wire                _zz_556;
  wire                _zz_557;
  wire                _zz_558;
  wire                _zz_559;
  wire                _zz_560;
  wire                _zz_561;
  wire                _zz_562;
  wire                _zz_563;
  wire                _zz_564;
  wire                _zz_565;
  wire                _zz_566;
  wire                _zz_567;
  wire                _zz_568;
  wire                _zz_569;
  wire                _zz_570;
  wire                _zz_571;
  wire                _zz_572;
  wire                _zz_573;
  wire                _zz_574;
  wire                _zz_575;
  wire                _zz_576;
  wire                _zz_577;
  wire                _zz_578;
  wire                _zz_579;
  wire                _zz_580;
  wire                _zz_581;
  wire                _zz_582;
  wire                _zz_583;
  wire                _zz_584;
  wire                _zz_585;
  wire                _zz_586;
  wire                _zz_587;
  wire                _zz_588;
  wire                _zz_589;
  wire                _zz_590;
  wire                _zz_591;
  wire                _zz_592;
  wire                _zz_593;
  wire                _zz_594;
  wire                _zz_595;
  wire                _zz_596;
  wire                _zz_597;
  wire                _zz_598;
  wire                _zz_599;
  wire                _zz_600;
  wire                _zz_601;
  wire                _zz_602;
  wire                _zz_603;
  wire                _zz_604;
  wire                _zz_605;
  wire                _zz_606;
  wire                _zz_607;
  wire                _zz_608;
  wire                _zz_609;
  wire                _zz_610;
  wire                _zz_611;
  wire                _zz_612;
  wire                _zz_613;
  wire                _zz_614;
  wire                _zz_615;
  wire                _zz_616;
  wire                _zz_617;
  wire                _zz_618;
  wire                _zz_619;
  wire                _zz_620;
  wire                _zz_621;
  wire                _zz_622;
  wire                _zz_623;
  wire                _zz_624;
  wire                _zz_625;
  wire                _zz_626;
  wire                _zz_627;
  wire                _zz_628;
  wire                _zz_629;
  wire                _zz_630;
  wire                _zz_631;
  wire                _zz_632;
  wire                _zz_633;
  wire                _zz_634;
  wire                _zz_635;
  wire                _zz_636;
  wire                _zz_637;
  wire                _zz_638;
  wire                _zz_639;
  wire                _zz_640;
  wire                _zz_641;
  wire                _zz_642;
  wire                _zz_643;
  wire                _zz_644;
  wire                _zz_645;
  wire                _zz_646;
  wire                _zz_647;
  wire                _zz_648;
  wire                _zz_649;
  wire                _zz_650;
  wire                _zz_651;
  wire                _zz_652;
  wire                _zz_653;
  wire                _zz_654;
  wire                _zz_655;
  wire                _zz_656;
  wire                _zz_657;
  wire                _zz_658;
  wire                _zz_659;
  wire                _zz_660;
  wire                _zz_661;
  wire                _zz_662;
  wire                _zz_663;
  wire                _zz_664;
  wire                _zz_665;
  wire                _zz_666;
  wire                _zz_667;
  wire                _zz_668;
  wire                _zz_669;
  wire                _zz_670;
  wire                _zz_671;
  wire                _zz_672;
  wire                _zz_673;
  wire                _zz_674;
  wire                _zz_675;
  wire                _zz_676;
  wire                _zz_677;
  wire                _zz_678;
  wire                _zz_679;
  wire                _zz_680;
  wire                _zz_681;
  wire                _zz_682;
  wire                _zz_683;
  wire                _zz_684;
  wire                _zz_685;
  wire                _zz_686;
  wire                _zz_687;
  wire                _zz_688;
  wire                _zz_689;
  wire                _zz_690;
  wire                _zz_691;
  wire                _zz_692;
  wire                _zz_693;
  wire                _zz_694;
  wire                _zz_695;
  wire                _zz_696;
  wire                _zz_697;
  wire                _zz_698;
  wire                _zz_699;
  wire                _zz_700;
  wire                _zz_701;
  wire                _zz_702;
  wire                _zz_703;
  wire                _zz_704;
  wire                _zz_705;
  wire                _zz_706;
  wire                _zz_707;
  wire                _zz_708;
  wire                _zz_709;
  wire                _zz_710;
  wire                _zz_711;
  wire                _zz_712;
  wire                _zz_713;
  wire                _zz_714;
  wire                _zz_715;
  wire                _zz_716;
  wire                _zz_717;
  wire                _zz_718;
  wire                _zz_719;
  wire                _zz_720;
  wire                _zz_721;
  wire                _zz_722;
  wire                _zz_723;
  wire                _zz_724;
  wire                _zz_725;
  wire                _zz_726;
  wire                _zz_727;
  wire                _zz_728;
  wire                _zz_729;
  wire                _zz_730;
  wire                _zz_731;
  wire                _zz_732;
  wire                _zz_733;
  wire                _zz_734;
  wire                _zz_735;
  wire                _zz_736;
  wire                _zz_737;
  wire                _zz_738;
  wire                _zz_739;
  wire                _zz_740;
  wire                _zz_741;
  wire                _zz_742;
  wire                _zz_743;
  wire                _zz_744;
  wire                _zz_745;
  wire                _zz_746;
  wire                _zz_747;
  wire                _zz_748;
  wire                _zz_749;
  wire                _zz_750;
  wire                _zz_751;
  wire                _zz_752;
  wire                _zz_753;
  wire                _zz_754;
  wire                _zz_755;
  wire                _zz_756;
  wire                _zz_757;
  wire                _zz_758;
  wire                _zz_759;
  wire                _zz_760;
  wire                _zz_761;
  wire                _zz_762;
  wire                _zz_763;
  wire                _zz_764;
  wire                _zz_765;
  wire                _zz_766;
  wire                _zz_767;
  wire                _zz_768;
  wire                _zz_769;
  wire                _zz_770;
  wire                _zz_771;
  wire                _zz_772;
  wire                _zz_773;
  wire                _zz_774;
  wire                _zz_775;
  wire                _zz_776;
  wire                _zz_777;
  wire                _zz_778;
  wire                _zz_779;
  wire                _zz_780;
  wire                _zz_781;
  wire                _zz_782;
  wire                _zz_783;
  wire                _zz_784;
  wire                _zz_785;
  wire                _zz_786;
  wire                _zz_787;
  wire                _zz_788;
  wire                _zz_789;
  wire                _zz_790;
  wire                _zz_791;
  wire                _zz_792;
  wire                _zz_793;
  wire                _zz_794;
  wire                _zz_795;
  wire                _zz_796;
  wire                _zz_797;
  wire                _zz_798;
  wire                _zz_799;
  wire                _zz_800;
  wire                _zz_801;
  wire                _zz_802;
  wire                _zz_803;
  wire                _zz_804;
  wire                _zz_805;
  wire                _zz_806;
  wire                _zz_807;
  wire                _zz_808;
  wire                _zz_809;
  wire                _zz_810;
  wire                _zz_811;
  wire                _zz_812;
  wire                _zz_813;
  wire                _zz_814;
  wire                _zz_815;
  wire                _zz_816;
  wire                _zz_817;
  wire                _zz_818;
  wire                _zz_819;
  wire                _zz_820;
  wire                _zz_821;
  wire                _zz_822;
  wire                _zz_823;
  wire                _zz_824;
  wire                _zz_825;
  wire                _zz_826;
  wire                _zz_827;
  wire                _zz_828;
  wire                _zz_829;
  wire                _zz_830;
  wire                _zz_831;
  wire                _zz_832;
  wire                _zz_833;
  wire                _zz_834;
  wire                _zz_835;
  wire                _zz_836;
  wire                _zz_837;
  wire                _zz_838;
  wire                _zz_839;
  wire                _zz_840;
  wire                _zz_841;
  wire                _zz_842;
  wire                _zz_843;
  wire                _zz_844;
  wire                _zz_845;
  wire                _zz_846;
  wire                _zz_847;
  wire                _zz_848;
  wire                _zz_849;
  wire                _zz_850;
  wire                _zz_851;
  wire                _zz_852;
  wire                _zz_853;
  wire                _zz_854;
  wire                _zz_855;
  wire                _zz_856;
  wire                _zz_857;
  wire                _zz_858;
  wire                _zz_859;
  wire                _zz_860;
  wire                _zz_861;
  wire                _zz_862;
  wire                _zz_863;
  wire                _zz_864;
  wire                _zz_865;
  wire                _zz_866;
  wire                _zz_867;
  wire                _zz_868;
  wire                _zz_869;
  wire                _zz_870;
  wire                _zz_871;
  wire                _zz_872;
  wire                _zz_873;
  wire                _zz_874;
  wire                _zz_875;
  wire                _zz_876;
  wire                _zz_877;
  wire                _zz_878;
  wire                _zz_879;
  wire                _zz_880;
  wire                _zz_881;
  wire                _zz_882;
  wire                _zz_883;
  wire                _zz_884;
  wire                _zz_885;
  wire                _zz_886;
  wire                _zz_887;
  wire                _zz_888;
  wire                _zz_889;
  wire                _zz_890;
  wire                _zz_891;
  wire                _zz_892;
  wire                _zz_893;
  wire                _zz_894;
  wire                _zz_895;
  wire                _zz_896;
  wire                _zz_897;
  wire                _zz_898;
  wire                _zz_899;
  wire                _zz_900;
  wire                _zz_901;
  wire                _zz_902;
  wire                _zz_903;
  wire                _zz_904;
  wire                _zz_905;
  wire                _zz_906;
  wire                _zz_907;
  wire                _zz_908;
  wire                _zz_909;
  wire                _zz_910;
  wire                _zz_911;
  wire                _zz_912;
  wire                _zz_913;
  wire                _zz_914;
  wire                _zz_915;
  wire                _zz_916;
  wire                _zz_917;
  wire                _zz_918;
  wire                _zz_919;
  wire                _zz_920;
  wire                _zz_921;
  wire                _zz_922;
  wire                _zz_923;
  wire                _zz_924;
  wire                _zz_925;
  wire                _zz_926;
  wire                _zz_927;
  wire                _zz_928;
  wire                _zz_929;
  wire                _zz_930;
  wire                _zz_931;
  wire                _zz_932;
  wire                _zz_933;
  wire                _zz_934;
  wire                _zz_935;
  wire                _zz_936;
  wire                _zz_937;
  wire                _zz_938;
  wire                _zz_939;
  wire                _zz_940;
  wire                _zz_941;
  wire                _zz_942;
  wire                _zz_943;
  wire                _zz_944;
  wire                _zz_945;
  wire                _zz_946;
  wire                _zz_947;
  wire                _zz_948;
  wire                _zz_949;
  wire                _zz_950;
  wire                bufferCC_33_io_dataOut;
  wire                bufferCC_34_io_dataOut;
  wire                idelayctrl_1_RDY;
  wire                clkBuf_O;
  wire                clkBuf_OB;
  wire                CK_OSERDESE2_OQ;
  wire                CK_OSERDESE2_OFB;
  wire                CK_OSERDESE2_TQ;
  wire                CK_OSERDESE2_TFB;
  wire                CK_OSERDESE2_TBYTEOUT;
  wire                CK_OSERDESE2_SHIFTOUT1;
  wire                CK_OSERDESE2_SHIFTOUT2;
  wire                ADDR_OSERDESE2_OQ;
  wire                ADDR_OSERDESE2_OFB;
  wire                ADDR_OSERDESE2_TQ;
  wire                ADDR_OSERDESE2_TFB;
  wire                ADDR_OSERDESE2_TBYTEOUT;
  wire                ADDR_OSERDESE2_SHIFTOUT1;
  wire                ADDR_OSERDESE2_SHIFTOUT2;
  wire                ADDR_OSERDESE2_1_OQ;
  wire                ADDR_OSERDESE2_1_OFB;
  wire                ADDR_OSERDESE2_1_TQ;
  wire                ADDR_OSERDESE2_1_TFB;
  wire                ADDR_OSERDESE2_1_TBYTEOUT;
  wire                ADDR_OSERDESE2_1_SHIFTOUT1;
  wire                ADDR_OSERDESE2_1_SHIFTOUT2;
  wire                ADDR_OSERDESE2_2_OQ;
  wire                ADDR_OSERDESE2_2_OFB;
  wire                ADDR_OSERDESE2_2_TQ;
  wire                ADDR_OSERDESE2_2_TFB;
  wire                ADDR_OSERDESE2_2_TBYTEOUT;
  wire                ADDR_OSERDESE2_2_SHIFTOUT1;
  wire                ADDR_OSERDESE2_2_SHIFTOUT2;
  wire                ADDR_OSERDESE2_3_OQ;
  wire                ADDR_OSERDESE2_3_OFB;
  wire                ADDR_OSERDESE2_3_TQ;
  wire                ADDR_OSERDESE2_3_TFB;
  wire                ADDR_OSERDESE2_3_TBYTEOUT;
  wire                ADDR_OSERDESE2_3_SHIFTOUT1;
  wire                ADDR_OSERDESE2_3_SHIFTOUT2;
  wire                ADDR_OSERDESE2_4_OQ;
  wire                ADDR_OSERDESE2_4_OFB;
  wire                ADDR_OSERDESE2_4_TQ;
  wire                ADDR_OSERDESE2_4_TFB;
  wire                ADDR_OSERDESE2_4_TBYTEOUT;
  wire                ADDR_OSERDESE2_4_SHIFTOUT1;
  wire                ADDR_OSERDESE2_4_SHIFTOUT2;
  wire                ADDR_OSERDESE2_5_OQ;
  wire                ADDR_OSERDESE2_5_OFB;
  wire                ADDR_OSERDESE2_5_TQ;
  wire                ADDR_OSERDESE2_5_TFB;
  wire                ADDR_OSERDESE2_5_TBYTEOUT;
  wire                ADDR_OSERDESE2_5_SHIFTOUT1;
  wire                ADDR_OSERDESE2_5_SHIFTOUT2;
  wire                ADDR_OSERDESE2_6_OQ;
  wire                ADDR_OSERDESE2_6_OFB;
  wire                ADDR_OSERDESE2_6_TQ;
  wire                ADDR_OSERDESE2_6_TFB;
  wire                ADDR_OSERDESE2_6_TBYTEOUT;
  wire                ADDR_OSERDESE2_6_SHIFTOUT1;
  wire                ADDR_OSERDESE2_6_SHIFTOUT2;
  wire                ADDR_OSERDESE2_7_OQ;
  wire                ADDR_OSERDESE2_7_OFB;
  wire                ADDR_OSERDESE2_7_TQ;
  wire                ADDR_OSERDESE2_7_TFB;
  wire                ADDR_OSERDESE2_7_TBYTEOUT;
  wire                ADDR_OSERDESE2_7_SHIFTOUT1;
  wire                ADDR_OSERDESE2_7_SHIFTOUT2;
  wire                ADDR_OSERDESE2_8_OQ;
  wire                ADDR_OSERDESE2_8_OFB;
  wire                ADDR_OSERDESE2_8_TQ;
  wire                ADDR_OSERDESE2_8_TFB;
  wire                ADDR_OSERDESE2_8_TBYTEOUT;
  wire                ADDR_OSERDESE2_8_SHIFTOUT1;
  wire                ADDR_OSERDESE2_8_SHIFTOUT2;
  wire                ADDR_OSERDESE2_9_OQ;
  wire                ADDR_OSERDESE2_9_OFB;
  wire                ADDR_OSERDESE2_9_TQ;
  wire                ADDR_OSERDESE2_9_TFB;
  wire                ADDR_OSERDESE2_9_TBYTEOUT;
  wire                ADDR_OSERDESE2_9_SHIFTOUT1;
  wire                ADDR_OSERDESE2_9_SHIFTOUT2;
  wire                ADDR_OSERDESE2_10_OQ;
  wire                ADDR_OSERDESE2_10_OFB;
  wire                ADDR_OSERDESE2_10_TQ;
  wire                ADDR_OSERDESE2_10_TFB;
  wire                ADDR_OSERDESE2_10_TBYTEOUT;
  wire                ADDR_OSERDESE2_10_SHIFTOUT1;
  wire                ADDR_OSERDESE2_10_SHIFTOUT2;
  wire                ADDR_OSERDESE2_11_OQ;
  wire                ADDR_OSERDESE2_11_OFB;
  wire                ADDR_OSERDESE2_11_TQ;
  wire                ADDR_OSERDESE2_11_TFB;
  wire                ADDR_OSERDESE2_11_TBYTEOUT;
  wire                ADDR_OSERDESE2_11_SHIFTOUT1;
  wire                ADDR_OSERDESE2_11_SHIFTOUT2;
  wire                ADDR_OSERDESE2_12_OQ;
  wire                ADDR_OSERDESE2_12_OFB;
  wire                ADDR_OSERDESE2_12_TQ;
  wire                ADDR_OSERDESE2_12_TFB;
  wire                ADDR_OSERDESE2_12_TBYTEOUT;
  wire                ADDR_OSERDESE2_12_SHIFTOUT1;
  wire                ADDR_OSERDESE2_12_SHIFTOUT2;
  wire                BA_OSERDESE2_OQ;
  wire                BA_OSERDESE2_OFB;
  wire                BA_OSERDESE2_TQ;
  wire                BA_OSERDESE2_TFB;
  wire                BA_OSERDESE2_TBYTEOUT;
  wire                BA_OSERDESE2_SHIFTOUT1;
  wire                BA_OSERDESE2_SHIFTOUT2;
  wire                BA_OSERDESE2_1_OQ;
  wire                BA_OSERDESE2_1_OFB;
  wire                BA_OSERDESE2_1_TQ;
  wire                BA_OSERDESE2_1_TFB;
  wire                BA_OSERDESE2_1_TBYTEOUT;
  wire                BA_OSERDESE2_1_SHIFTOUT1;
  wire                BA_OSERDESE2_1_SHIFTOUT2;
  wire                BA_OSERDESE2_2_OQ;
  wire                BA_OSERDESE2_2_OFB;
  wire                BA_OSERDESE2_2_TQ;
  wire                BA_OSERDESE2_2_TFB;
  wire                BA_OSERDESE2_2_TBYTEOUT;
  wire                BA_OSERDESE2_2_SHIFTOUT1;
  wire                BA_OSERDESE2_2_SHIFTOUT2;
  wire                CASn_OSERDESE2_OQ;
  wire                CASn_OSERDESE2_OFB;
  wire                CASn_OSERDESE2_TQ;
  wire                CASn_OSERDESE2_TFB;
  wire                CASn_OSERDESE2_TBYTEOUT;
  wire                CASn_OSERDESE2_SHIFTOUT1;
  wire                CASn_OSERDESE2_SHIFTOUT2;
  wire                CKE_OSERDESE2_OQ;
  wire                CKE_OSERDESE2_OFB;
  wire                CKE_OSERDESE2_TQ;
  wire                CKE_OSERDESE2_TFB;
  wire                CKE_OSERDESE2_TBYTEOUT;
  wire                CKE_OSERDESE2_SHIFTOUT1;
  wire                CKE_OSERDESE2_SHIFTOUT2;
  wire                CSn_OSERDESE2_OQ;
  wire                CSn_OSERDESE2_OFB;
  wire                CSn_OSERDESE2_TQ;
  wire                CSn_OSERDESE2_TFB;
  wire                CSn_OSERDESE2_TBYTEOUT;
  wire                CSn_OSERDESE2_SHIFTOUT1;
  wire                CSn_OSERDESE2_SHIFTOUT2;
  wire                RASn_OSERDESE2_OQ;
  wire                RASn_OSERDESE2_OFB;
  wire                RASn_OSERDESE2_TQ;
  wire                RASn_OSERDESE2_TFB;
  wire                RASn_OSERDESE2_TBYTEOUT;
  wire                RASn_OSERDESE2_SHIFTOUT1;
  wire                RASn_OSERDESE2_SHIFTOUT2;
  wire                WEn_OSERDESE2_OQ;
  wire                WEn_OSERDESE2_OFB;
  wire                WEn_OSERDESE2_TQ;
  wire                WEn_OSERDESE2_TFB;
  wire                WEn_OSERDESE2_TBYTEOUT;
  wire                WEn_OSERDESE2_SHIFTOUT1;
  wire                WEn_OSERDESE2_SHIFTOUT2;
  wire                ODT_OSERDESE2_OQ;
  wire                ODT_OSERDESE2_OFB;
  wire                ODT_OSERDESE2_TQ;
  wire                ODT_OSERDESE2_TFB;
  wire                ODT_OSERDESE2_TBYTEOUT;
  wire                ODT_OSERDESE2_SHIFTOUT1;
  wire                ODT_OSERDESE2_SHIFTOUT2;
  wire                CK_OSERDESE2_1_OQ;
  wire                CK_OSERDESE2_1_OFB;
  wire                CK_OSERDESE2_1_TQ;
  wire                CK_OSERDESE2_1_TFB;
  wire                CK_OSERDESE2_1_TBYTEOUT;
  wire                CK_OSERDESE2_1_SHIFTOUT1;
  wire                CK_OSERDESE2_1_SHIFTOUT2;
  wire                dqs_0_buf_O;
  wire                CK_OSERDESE2_2_OQ;
  wire                CK_OSERDESE2_2_OFB;
  wire                CK_OSERDESE2_2_TQ;
  wire                CK_OSERDESE2_2_TFB;
  wire                CK_OSERDESE2_2_TBYTEOUT;
  wire                CK_OSERDESE2_2_SHIFTOUT1;
  wire                CK_OSERDESE2_2_SHIFTOUT2;
  wire                dqs_1_buf_O;
  wire                DM_OSERDESE2_OQ;
  wire                DM_OSERDESE2_OFB;
  wire                DM_OSERDESE2_TQ;
  wire                DM_OSERDESE2_TFB;
  wire                DM_OSERDESE2_TBYTEOUT;
  wire                DM_OSERDESE2_SHIFTOUT1;
  wire                DM_OSERDESE2_SHIFTOUT2;
  wire                DM_OSERDESE2_1_OQ;
  wire                DM_OSERDESE2_1_OFB;
  wire                DM_OSERDESE2_1_TQ;
  wire                DM_OSERDESE2_1_TFB;
  wire                DM_OSERDESE2_1_TBYTEOUT;
  wire                DM_OSERDESE2_1_SHIFTOUT1;
  wire                DM_OSERDESE2_1_SHIFTOUT2;
  wire                dq_0_buf_O;
  wire                DQ_OSERDESE2_OQ;
  wire                DQ_OSERDESE2_OFB;
  wire                DQ_OSERDESE2_TQ;
  wire                DQ_OSERDESE2_TFB;
  wire                DQ_OSERDESE2_TBYTEOUT;
  wire                DQ_OSERDESE2_SHIFTOUT1;
  wire                DQ_OSERDESE2_SHIFTOUT2;
  wire       [4:0]    dq_0_idelay_CNTVALUEOUT;
  wire                dq_0_idelay_DATAOUT;
  wire                dq_0_des_O;
  wire                dq_0_des_Q1;
  wire                dq_0_des_Q2;
  wire                dq_0_des_Q3;
  wire                dq_0_des_Q4;
  wire                dq_0_des_Q5;
  wire                dq_0_des_Q6;
  wire                dq_0_des_Q7;
  wire                dq_0_des_Q8;
  wire                dq_0_des_SHIFTOUT1;
  wire                dq_0_des_SHIFTOUT2;
  wire                dq_1_buf_O;
  wire                DQ_OSERDESE2_1_OQ;
  wire                DQ_OSERDESE2_1_OFB;
  wire                DQ_OSERDESE2_1_TQ;
  wire                DQ_OSERDESE2_1_TFB;
  wire                DQ_OSERDESE2_1_TBYTEOUT;
  wire                DQ_OSERDESE2_1_SHIFTOUT1;
  wire                DQ_OSERDESE2_1_SHIFTOUT2;
  wire       [4:0]    dq_1_idelay_CNTVALUEOUT;
  wire                dq_1_idelay_DATAOUT;
  wire                dq_1_des_O;
  wire                dq_1_des_Q1;
  wire                dq_1_des_Q2;
  wire                dq_1_des_Q3;
  wire                dq_1_des_Q4;
  wire                dq_1_des_Q5;
  wire                dq_1_des_Q6;
  wire                dq_1_des_Q7;
  wire                dq_1_des_Q8;
  wire                dq_1_des_SHIFTOUT1;
  wire                dq_1_des_SHIFTOUT2;
  wire                dq_2_buf_O;
  wire                DQ_OSERDESE2_2_OQ;
  wire                DQ_OSERDESE2_2_OFB;
  wire                DQ_OSERDESE2_2_TQ;
  wire                DQ_OSERDESE2_2_TFB;
  wire                DQ_OSERDESE2_2_TBYTEOUT;
  wire                DQ_OSERDESE2_2_SHIFTOUT1;
  wire                DQ_OSERDESE2_2_SHIFTOUT2;
  wire       [4:0]    dq_2_idelay_CNTVALUEOUT;
  wire                dq_2_idelay_DATAOUT;
  wire                dq_2_des_O;
  wire                dq_2_des_Q1;
  wire                dq_2_des_Q2;
  wire                dq_2_des_Q3;
  wire                dq_2_des_Q4;
  wire                dq_2_des_Q5;
  wire                dq_2_des_Q6;
  wire                dq_2_des_Q7;
  wire                dq_2_des_Q8;
  wire                dq_2_des_SHIFTOUT1;
  wire                dq_2_des_SHIFTOUT2;
  wire                dq_3_buf_O;
  wire                DQ_OSERDESE2_3_OQ;
  wire                DQ_OSERDESE2_3_OFB;
  wire                DQ_OSERDESE2_3_TQ;
  wire                DQ_OSERDESE2_3_TFB;
  wire                DQ_OSERDESE2_3_TBYTEOUT;
  wire                DQ_OSERDESE2_3_SHIFTOUT1;
  wire                DQ_OSERDESE2_3_SHIFTOUT2;
  wire       [4:0]    dq_3_idelay_CNTVALUEOUT;
  wire                dq_3_idelay_DATAOUT;
  wire                dq_3_des_O;
  wire                dq_3_des_Q1;
  wire                dq_3_des_Q2;
  wire                dq_3_des_Q3;
  wire                dq_3_des_Q4;
  wire                dq_3_des_Q5;
  wire                dq_3_des_Q6;
  wire                dq_3_des_Q7;
  wire                dq_3_des_Q8;
  wire                dq_3_des_SHIFTOUT1;
  wire                dq_3_des_SHIFTOUT2;
  wire                dq_4_buf_O;
  wire                DQ_OSERDESE2_4_OQ;
  wire                DQ_OSERDESE2_4_OFB;
  wire                DQ_OSERDESE2_4_TQ;
  wire                DQ_OSERDESE2_4_TFB;
  wire                DQ_OSERDESE2_4_TBYTEOUT;
  wire                DQ_OSERDESE2_4_SHIFTOUT1;
  wire                DQ_OSERDESE2_4_SHIFTOUT2;
  wire       [4:0]    dq_4_idelay_CNTVALUEOUT;
  wire                dq_4_idelay_DATAOUT;
  wire                dq_4_des_O;
  wire                dq_4_des_Q1;
  wire                dq_4_des_Q2;
  wire                dq_4_des_Q3;
  wire                dq_4_des_Q4;
  wire                dq_4_des_Q5;
  wire                dq_4_des_Q6;
  wire                dq_4_des_Q7;
  wire                dq_4_des_Q8;
  wire                dq_4_des_SHIFTOUT1;
  wire                dq_4_des_SHIFTOUT2;
  wire                dq_5_buf_O;
  wire                DQ_OSERDESE2_5_OQ;
  wire                DQ_OSERDESE2_5_OFB;
  wire                DQ_OSERDESE2_5_TQ;
  wire                DQ_OSERDESE2_5_TFB;
  wire                DQ_OSERDESE2_5_TBYTEOUT;
  wire                DQ_OSERDESE2_5_SHIFTOUT1;
  wire                DQ_OSERDESE2_5_SHIFTOUT2;
  wire       [4:0]    dq_5_idelay_CNTVALUEOUT;
  wire                dq_5_idelay_DATAOUT;
  wire                dq_5_des_O;
  wire                dq_5_des_Q1;
  wire                dq_5_des_Q2;
  wire                dq_5_des_Q3;
  wire                dq_5_des_Q4;
  wire                dq_5_des_Q5;
  wire                dq_5_des_Q6;
  wire                dq_5_des_Q7;
  wire                dq_5_des_Q8;
  wire                dq_5_des_SHIFTOUT1;
  wire                dq_5_des_SHIFTOUT2;
  wire                dq_6_buf_O;
  wire                DQ_OSERDESE2_6_OQ;
  wire                DQ_OSERDESE2_6_OFB;
  wire                DQ_OSERDESE2_6_TQ;
  wire                DQ_OSERDESE2_6_TFB;
  wire                DQ_OSERDESE2_6_TBYTEOUT;
  wire                DQ_OSERDESE2_6_SHIFTOUT1;
  wire                DQ_OSERDESE2_6_SHIFTOUT2;
  wire       [4:0]    dq_6_idelay_CNTVALUEOUT;
  wire                dq_6_idelay_DATAOUT;
  wire                dq_6_des_O;
  wire                dq_6_des_Q1;
  wire                dq_6_des_Q2;
  wire                dq_6_des_Q3;
  wire                dq_6_des_Q4;
  wire                dq_6_des_Q5;
  wire                dq_6_des_Q6;
  wire                dq_6_des_Q7;
  wire                dq_6_des_Q8;
  wire                dq_6_des_SHIFTOUT1;
  wire                dq_6_des_SHIFTOUT2;
  wire                dq_7_buf_O;
  wire                DQ_OSERDESE2_7_OQ;
  wire                DQ_OSERDESE2_7_OFB;
  wire                DQ_OSERDESE2_7_TQ;
  wire                DQ_OSERDESE2_7_TFB;
  wire                DQ_OSERDESE2_7_TBYTEOUT;
  wire                DQ_OSERDESE2_7_SHIFTOUT1;
  wire                DQ_OSERDESE2_7_SHIFTOUT2;
  wire       [4:0]    dq_7_idelay_CNTVALUEOUT;
  wire                dq_7_idelay_DATAOUT;
  wire                dq_7_des_O;
  wire                dq_7_des_Q1;
  wire                dq_7_des_Q2;
  wire                dq_7_des_Q3;
  wire                dq_7_des_Q4;
  wire                dq_7_des_Q5;
  wire                dq_7_des_Q6;
  wire                dq_7_des_Q7;
  wire                dq_7_des_Q8;
  wire                dq_7_des_SHIFTOUT1;
  wire                dq_7_des_SHIFTOUT2;
  wire                dq_8_buf_O;
  wire                DQ_OSERDESE2_8_OQ;
  wire                DQ_OSERDESE2_8_OFB;
  wire                DQ_OSERDESE2_8_TQ;
  wire                DQ_OSERDESE2_8_TFB;
  wire                DQ_OSERDESE2_8_TBYTEOUT;
  wire                DQ_OSERDESE2_8_SHIFTOUT1;
  wire                DQ_OSERDESE2_8_SHIFTOUT2;
  wire       [4:0]    dq_8_idelay_CNTVALUEOUT;
  wire                dq_8_idelay_DATAOUT;
  wire                dq_8_des_O;
  wire                dq_8_des_Q1;
  wire                dq_8_des_Q2;
  wire                dq_8_des_Q3;
  wire                dq_8_des_Q4;
  wire                dq_8_des_Q5;
  wire                dq_8_des_Q6;
  wire                dq_8_des_Q7;
  wire                dq_8_des_Q8;
  wire                dq_8_des_SHIFTOUT1;
  wire                dq_8_des_SHIFTOUT2;
  wire                dq_9_buf_O;
  wire                DQ_OSERDESE2_9_OQ;
  wire                DQ_OSERDESE2_9_OFB;
  wire                DQ_OSERDESE2_9_TQ;
  wire                DQ_OSERDESE2_9_TFB;
  wire                DQ_OSERDESE2_9_TBYTEOUT;
  wire                DQ_OSERDESE2_9_SHIFTOUT1;
  wire                DQ_OSERDESE2_9_SHIFTOUT2;
  wire       [4:0]    dq_9_idelay_CNTVALUEOUT;
  wire                dq_9_idelay_DATAOUT;
  wire                dq_9_des_O;
  wire                dq_9_des_Q1;
  wire                dq_9_des_Q2;
  wire                dq_9_des_Q3;
  wire                dq_9_des_Q4;
  wire                dq_9_des_Q5;
  wire                dq_9_des_Q6;
  wire                dq_9_des_Q7;
  wire                dq_9_des_Q8;
  wire                dq_9_des_SHIFTOUT1;
  wire                dq_9_des_SHIFTOUT2;
  wire                dq_10_buf_O;
  wire                DQ_OSERDESE2_10_OQ;
  wire                DQ_OSERDESE2_10_OFB;
  wire                DQ_OSERDESE2_10_TQ;
  wire                DQ_OSERDESE2_10_TFB;
  wire                DQ_OSERDESE2_10_TBYTEOUT;
  wire                DQ_OSERDESE2_10_SHIFTOUT1;
  wire                DQ_OSERDESE2_10_SHIFTOUT2;
  wire       [4:0]    dq_10_idelay_CNTVALUEOUT;
  wire                dq_10_idelay_DATAOUT;
  wire                dq_10_des_O;
  wire                dq_10_des_Q1;
  wire                dq_10_des_Q2;
  wire                dq_10_des_Q3;
  wire                dq_10_des_Q4;
  wire                dq_10_des_Q5;
  wire                dq_10_des_Q6;
  wire                dq_10_des_Q7;
  wire                dq_10_des_Q8;
  wire                dq_10_des_SHIFTOUT1;
  wire                dq_10_des_SHIFTOUT2;
  wire                dq_11_buf_O;
  wire                DQ_OSERDESE2_11_OQ;
  wire                DQ_OSERDESE2_11_OFB;
  wire                DQ_OSERDESE2_11_TQ;
  wire                DQ_OSERDESE2_11_TFB;
  wire                DQ_OSERDESE2_11_TBYTEOUT;
  wire                DQ_OSERDESE2_11_SHIFTOUT1;
  wire                DQ_OSERDESE2_11_SHIFTOUT2;
  wire       [4:0]    dq_11_idelay_CNTVALUEOUT;
  wire                dq_11_idelay_DATAOUT;
  wire                dq_11_des_O;
  wire                dq_11_des_Q1;
  wire                dq_11_des_Q2;
  wire                dq_11_des_Q3;
  wire                dq_11_des_Q4;
  wire                dq_11_des_Q5;
  wire                dq_11_des_Q6;
  wire                dq_11_des_Q7;
  wire                dq_11_des_Q8;
  wire                dq_11_des_SHIFTOUT1;
  wire                dq_11_des_SHIFTOUT2;
  wire                dq_12_buf_O;
  wire                DQ_OSERDESE2_12_OQ;
  wire                DQ_OSERDESE2_12_OFB;
  wire                DQ_OSERDESE2_12_TQ;
  wire                DQ_OSERDESE2_12_TFB;
  wire                DQ_OSERDESE2_12_TBYTEOUT;
  wire                DQ_OSERDESE2_12_SHIFTOUT1;
  wire                DQ_OSERDESE2_12_SHIFTOUT2;
  wire       [4:0]    dq_12_idelay_CNTVALUEOUT;
  wire                dq_12_idelay_DATAOUT;
  wire                dq_12_des_O;
  wire                dq_12_des_Q1;
  wire                dq_12_des_Q2;
  wire                dq_12_des_Q3;
  wire                dq_12_des_Q4;
  wire                dq_12_des_Q5;
  wire                dq_12_des_Q6;
  wire                dq_12_des_Q7;
  wire                dq_12_des_Q8;
  wire                dq_12_des_SHIFTOUT1;
  wire                dq_12_des_SHIFTOUT2;
  wire                dq_13_buf_O;
  wire                DQ_OSERDESE2_13_OQ;
  wire                DQ_OSERDESE2_13_OFB;
  wire                DQ_OSERDESE2_13_TQ;
  wire                DQ_OSERDESE2_13_TFB;
  wire                DQ_OSERDESE2_13_TBYTEOUT;
  wire                DQ_OSERDESE2_13_SHIFTOUT1;
  wire                DQ_OSERDESE2_13_SHIFTOUT2;
  wire       [4:0]    dq_13_idelay_CNTVALUEOUT;
  wire                dq_13_idelay_DATAOUT;
  wire                dq_13_des_O;
  wire                dq_13_des_Q1;
  wire                dq_13_des_Q2;
  wire                dq_13_des_Q3;
  wire                dq_13_des_Q4;
  wire                dq_13_des_Q5;
  wire                dq_13_des_Q6;
  wire                dq_13_des_Q7;
  wire                dq_13_des_Q8;
  wire                dq_13_des_SHIFTOUT1;
  wire                dq_13_des_SHIFTOUT2;
  wire                dq_14_buf_O;
  wire                DQ_OSERDESE2_14_OQ;
  wire                DQ_OSERDESE2_14_OFB;
  wire                DQ_OSERDESE2_14_TQ;
  wire                DQ_OSERDESE2_14_TFB;
  wire                DQ_OSERDESE2_14_TBYTEOUT;
  wire                DQ_OSERDESE2_14_SHIFTOUT1;
  wire                DQ_OSERDESE2_14_SHIFTOUT2;
  wire       [4:0]    dq_14_idelay_CNTVALUEOUT;
  wire                dq_14_idelay_DATAOUT;
  wire                dq_14_des_O;
  wire                dq_14_des_Q1;
  wire                dq_14_des_Q2;
  wire                dq_14_des_Q3;
  wire                dq_14_des_Q4;
  wire                dq_14_des_Q5;
  wire                dq_14_des_Q6;
  wire                dq_14_des_Q7;
  wire                dq_14_des_Q8;
  wire                dq_14_des_SHIFTOUT1;
  wire                dq_14_des_SHIFTOUT2;
  wire                dq_15_buf_O;
  wire                DQ_OSERDESE2_15_OQ;
  wire                DQ_OSERDESE2_15_OFB;
  wire                DQ_OSERDESE2_15_TQ;
  wire                DQ_OSERDESE2_15_TFB;
  wire                DQ_OSERDESE2_15_TBYTEOUT;
  wire                DQ_OSERDESE2_15_SHIFTOUT1;
  wire                DQ_OSERDESE2_15_SHIFTOUT2;
  wire       [4:0]    dq_15_idelay_CNTVALUEOUT;
  wire                dq_15_idelay_DATAOUT;
  wire                dq_15_des_O;
  wire                dq_15_des_Q1;
  wire                dq_15_des_Q2;
  wire                dq_15_des_Q3;
  wire                dq_15_des_Q4;
  wire                dq_15_des_Q5;
  wire                dq_15_des_Q6;
  wire                dq_15_des_Q7;
  wire                dq_15_des_Q8;
  wire                dq_15_des_SHIFTOUT1;
  wire                dq_15_des_SHIFTOUT2;
  wire       [1:0]    _zz_951;
  wire                clk270Rst;
  wire                clk90Rst;
  reg                 _zz_1;
  reg                 _zz_2;
  reg                 _zz_3;
  reg                 _zz_4;
  reg                 _zz_5;
  reg                 _zz_6;
  reg                 _zz_7;
  reg                 _zz_8;
  reg                 _zz_9;
  reg                 _zz_10;
  reg                 _zz_11;
  reg                 _zz_12;
  reg                 _zz_13;
  reg                 _zz_14;
  reg                 _zz_15;
  reg                 _zz_16;
  reg                 io_ctrl_phases_0_CASn_regNext;
  reg                 io_ctrl_phases_1_CASn_regNext;
  reg                 io_ctrl_phases_0_CKE_regNext;
  reg                 io_ctrl_phases_1_CKE_regNext;
  reg                 io_ctrl_phases_0_CSn_regNext;
  reg                 io_ctrl_phases_1_CSn_regNext;
  reg                 io_ctrl_phases_0_RASn_regNext;
  reg                 io_ctrl_phases_1_RASn_regNext;
  reg                 io_ctrl_phases_0_WEn_regNext;
  reg                 io_ctrl_phases_1_WEn_regNext;
  reg                 io_ctrl_phases_0_ODT_regNext;
  reg                 io_ctrl_phases_1_ODT_regNext;
  reg                 dqe0Reg;
  reg                 dqe270Reg;
  reg        [3:0]    _zz_17;
  reg                 dqstReg_0;
  reg                 dqstReg_1;
  reg                 dqstReg_2;
  reg                 dqstReg_3;
  reg        [15:0]   dqReg_0_0;
  reg        [15:0]   dqReg_0_1;
  reg        [15:0]   dqReg_1_0;
  reg        [15:0]   dqReg_1_1;
  reg        [1:0]    dmReg_0_0;
  reg        [1:0]    dmReg_0_1;
  reg        [1:0]    dmReg_1_0;
  reg        [1:0]    dmReg_1_1;

  assign _zz_951 = {io_ctrl_writeEnable,dqe270Reg};
  BufferCC_26 bufferCC_33 (
    .io_dataIn                    (_zz_18                     ), //i
    .io_dataOut                   (bufferCC_33_io_dataOut     ), //o
    .CLKOUT2                      (CLKOUT2                    ), //i
    .sdramCd_logic_outputReset    (sdramCd_logic_outputReset  )  //i
  );
  BufferCC_27 bufferCC_34 (
    .io_dataIn     (_zz_19                  ), //i
    .io_dataOut    (bufferCC_34_io_dataOut  ), //o
    .CLKOUT2       (CLKOUT2                 ), //i
    .clk270Rst     (clk270Rst               )  //i
  );
  IDELAYCTRL idelayctrl_1 (
    .REFCLK    (CLKOUT4                    ), //i
    .RST       (sdramCd_logic_outputReset  ), //i
    .RDY       (idelayctrl_1_RDY           )  //o
  );
  OBUFDS clkBuf (
    .I     (CK_OSERDESE2_OQ  ), //i
    .O     (clkBuf_O         ), //o
    .OB    (clkBuf_OB        )  //o
  );
  OSERDESE2 #(
    .DATA_RATE_OQ("DDR"),
    .DATA_RATE_TQ("DDR"),
    .DATA_WIDTH(4),
    .SERDES_MODE("MASTER"),
    .TRISTATE_WIDTH(4) 
  ) CK_OSERDESE2 (
    .CLK          (CLKOUT4                 ), //i
    .CLKDIV       (CLKOUT2                 ), //i
    .D1           (_zz_20                  ), //i
    .D2           (_zz_21                  ), //i
    .D3           (_zz_22                  ), //i
    .D4           (_zz_23                  ), //i
    .D5           (_zz_24                  ), //i
    .D6           (_zz_25                  ), //i
    .D7           (_zz_26                  ), //i
    .D8           (_zz_27                  ), //i
    .T1           (_zz_28                  ), //i
    .T2           (_zz_29                  ), //i
    .T3           (_zz_30                  ), //i
    .T4           (_zz_31                  ), //i
    .TCE          (_zz_32                  ), //i
    .OCE          (_zz_33                  ), //i
    .TBYTEIN      (_zz_34                  ), //i
    .RST          (clk90Rst                ), //i
    .SHIFTIN1     (_zz_35                  ), //i
    .SHIFTIN2     (_zz_36                  ), //i
    .OQ           (CK_OSERDESE2_OQ         ), //o
    .OFB          (CK_OSERDESE2_OFB        ), //o
    .TQ           (CK_OSERDESE2_TQ         ), //o
    .TFB          (CK_OSERDESE2_TFB        ), //o
    .TBYTEOUT     (CK_OSERDESE2_TBYTEOUT   ), //o
    .SHIFTOUT1    (CK_OSERDESE2_SHIFTOUT1  ), //o
    .SHIFTOUT2    (CK_OSERDESE2_SHIFTOUT2  )  //o
  );
  OSERDESE2 #(
    .DATA_RATE_OQ("DDR"),
    .DATA_RATE_TQ("DDR"),
    .DATA_WIDTH(4),
    .SERDES_MODE("MASTER"),
    .TRISTATE_WIDTH(4) 
  ) ADDR_OSERDESE2 (
    .CLK          (CLKOUT3                    ), //i
    .CLKDIV       (CLKOUT1                    ), //i
    .D1           (_zz_1                      ), //i
    .D2           (_zz_1                      ), //i
    .D3           (_zz_1                      ), //i
    .D4           (_zz_1                      ), //i
    .D5           (_zz_37                     ), //i
    .D6           (_zz_38                     ), //i
    .D7           (_zz_39                     ), //i
    .D8           (_zz_40                     ), //i
    .T1           (_zz_41                     ), //i
    .T2           (_zz_42                     ), //i
    .T3           (_zz_43                     ), //i
    .T4           (_zz_44                     ), //i
    .TCE          (_zz_45                     ), //i
    .OCE          (_zz_46                     ), //i
    .TBYTEIN      (_zz_47                     ), //i
    .RST          (sdramCd_logic_outputReset  ), //i
    .SHIFTIN1     (_zz_48                     ), //i
    .SHIFTIN2     (_zz_49                     ), //i
    .OQ           (ADDR_OSERDESE2_OQ          ), //o
    .OFB          (ADDR_OSERDESE2_OFB         ), //o
    .TQ           (ADDR_OSERDESE2_TQ          ), //o
    .TFB          (ADDR_OSERDESE2_TFB         ), //o
    .TBYTEOUT     (ADDR_OSERDESE2_TBYTEOUT    ), //o
    .SHIFTOUT1    (ADDR_OSERDESE2_SHIFTOUT1   ), //o
    .SHIFTOUT2    (ADDR_OSERDESE2_SHIFTOUT2   )  //o
  );
  OSERDESE2 #(
    .DATA_RATE_OQ("DDR"),
    .DATA_RATE_TQ("DDR"),
    .DATA_WIDTH(4),
    .SERDES_MODE("MASTER"),
    .TRISTATE_WIDTH(4) 
  ) ADDR_OSERDESE2_1 (
    .CLK          (CLKOUT3                     ), //i
    .CLKDIV       (CLKOUT1                     ), //i
    .D1           (_zz_2                       ), //i
    .D2           (_zz_2                       ), //i
    .D3           (_zz_2                       ), //i
    .D4           (_zz_2                       ), //i
    .D5           (_zz_50                      ), //i
    .D6           (_zz_51                      ), //i
    .D7           (_zz_52                      ), //i
    .D8           (_zz_53                      ), //i
    .T1           (_zz_54                      ), //i
    .T2           (_zz_55                      ), //i
    .T3           (_zz_56                      ), //i
    .T4           (_zz_57                      ), //i
    .TCE          (_zz_58                      ), //i
    .OCE          (_zz_59                      ), //i
    .TBYTEIN      (_zz_60                      ), //i
    .RST          (sdramCd_logic_outputReset   ), //i
    .SHIFTIN1     (_zz_61                      ), //i
    .SHIFTIN2     (_zz_62                      ), //i
    .OQ           (ADDR_OSERDESE2_1_OQ         ), //o
    .OFB          (ADDR_OSERDESE2_1_OFB        ), //o
    .TQ           (ADDR_OSERDESE2_1_TQ         ), //o
    .TFB          (ADDR_OSERDESE2_1_TFB        ), //o
    .TBYTEOUT     (ADDR_OSERDESE2_1_TBYTEOUT   ), //o
    .SHIFTOUT1    (ADDR_OSERDESE2_1_SHIFTOUT1  ), //o
    .SHIFTOUT2    (ADDR_OSERDESE2_1_SHIFTOUT2  )  //o
  );
  OSERDESE2 #(
    .DATA_RATE_OQ("DDR"),
    .DATA_RATE_TQ("DDR"),
    .DATA_WIDTH(4),
    .SERDES_MODE("MASTER"),
    .TRISTATE_WIDTH(4) 
  ) ADDR_OSERDESE2_2 (
    .CLK          (CLKOUT3                     ), //i
    .CLKDIV       (CLKOUT1                     ), //i
    .D1           (_zz_3                       ), //i
    .D2           (_zz_3                       ), //i
    .D3           (_zz_3                       ), //i
    .D4           (_zz_3                       ), //i
    .D5           (_zz_63                      ), //i
    .D6           (_zz_64                      ), //i
    .D7           (_zz_65                      ), //i
    .D8           (_zz_66                      ), //i
    .T1           (_zz_67                      ), //i
    .T2           (_zz_68                      ), //i
    .T3           (_zz_69                      ), //i
    .T4           (_zz_70                      ), //i
    .TCE          (_zz_71                      ), //i
    .OCE          (_zz_72                      ), //i
    .TBYTEIN      (_zz_73                      ), //i
    .RST          (sdramCd_logic_outputReset   ), //i
    .SHIFTIN1     (_zz_74                      ), //i
    .SHIFTIN2     (_zz_75                      ), //i
    .OQ           (ADDR_OSERDESE2_2_OQ         ), //o
    .OFB          (ADDR_OSERDESE2_2_OFB        ), //o
    .TQ           (ADDR_OSERDESE2_2_TQ         ), //o
    .TFB          (ADDR_OSERDESE2_2_TFB        ), //o
    .TBYTEOUT     (ADDR_OSERDESE2_2_TBYTEOUT   ), //o
    .SHIFTOUT1    (ADDR_OSERDESE2_2_SHIFTOUT1  ), //o
    .SHIFTOUT2    (ADDR_OSERDESE2_2_SHIFTOUT2  )  //o
  );
  OSERDESE2 #(
    .DATA_RATE_OQ("DDR"),
    .DATA_RATE_TQ("DDR"),
    .DATA_WIDTH(4),
    .SERDES_MODE("MASTER"),
    .TRISTATE_WIDTH(4) 
  ) ADDR_OSERDESE2_3 (
    .CLK          (CLKOUT3                     ), //i
    .CLKDIV       (CLKOUT1                     ), //i
    .D1           (_zz_4                       ), //i
    .D2           (_zz_4                       ), //i
    .D3           (_zz_4                       ), //i
    .D4           (_zz_4                       ), //i
    .D5           (_zz_76                      ), //i
    .D6           (_zz_77                      ), //i
    .D7           (_zz_78                      ), //i
    .D8           (_zz_79                      ), //i
    .T1           (_zz_80                      ), //i
    .T2           (_zz_81                      ), //i
    .T3           (_zz_82                      ), //i
    .T4           (_zz_83                      ), //i
    .TCE          (_zz_84                      ), //i
    .OCE          (_zz_85                      ), //i
    .TBYTEIN      (_zz_86                      ), //i
    .RST          (sdramCd_logic_outputReset   ), //i
    .SHIFTIN1     (_zz_87                      ), //i
    .SHIFTIN2     (_zz_88                      ), //i
    .OQ           (ADDR_OSERDESE2_3_OQ         ), //o
    .OFB          (ADDR_OSERDESE2_3_OFB        ), //o
    .TQ           (ADDR_OSERDESE2_3_TQ         ), //o
    .TFB          (ADDR_OSERDESE2_3_TFB        ), //o
    .TBYTEOUT     (ADDR_OSERDESE2_3_TBYTEOUT   ), //o
    .SHIFTOUT1    (ADDR_OSERDESE2_3_SHIFTOUT1  ), //o
    .SHIFTOUT2    (ADDR_OSERDESE2_3_SHIFTOUT2  )  //o
  );
  OSERDESE2 #(
    .DATA_RATE_OQ("DDR"),
    .DATA_RATE_TQ("DDR"),
    .DATA_WIDTH(4),
    .SERDES_MODE("MASTER"),
    .TRISTATE_WIDTH(4) 
  ) ADDR_OSERDESE2_4 (
    .CLK          (CLKOUT3                     ), //i
    .CLKDIV       (CLKOUT1                     ), //i
    .D1           (_zz_5                       ), //i
    .D2           (_zz_5                       ), //i
    .D3           (_zz_5                       ), //i
    .D4           (_zz_5                       ), //i
    .D5           (_zz_89                      ), //i
    .D6           (_zz_90                      ), //i
    .D7           (_zz_91                      ), //i
    .D8           (_zz_92                      ), //i
    .T1           (_zz_93                      ), //i
    .T2           (_zz_94                      ), //i
    .T3           (_zz_95                      ), //i
    .T4           (_zz_96                      ), //i
    .TCE          (_zz_97                      ), //i
    .OCE          (_zz_98                      ), //i
    .TBYTEIN      (_zz_99                      ), //i
    .RST          (sdramCd_logic_outputReset   ), //i
    .SHIFTIN1     (_zz_100                     ), //i
    .SHIFTIN2     (_zz_101                     ), //i
    .OQ           (ADDR_OSERDESE2_4_OQ         ), //o
    .OFB          (ADDR_OSERDESE2_4_OFB        ), //o
    .TQ           (ADDR_OSERDESE2_4_TQ         ), //o
    .TFB          (ADDR_OSERDESE2_4_TFB        ), //o
    .TBYTEOUT     (ADDR_OSERDESE2_4_TBYTEOUT   ), //o
    .SHIFTOUT1    (ADDR_OSERDESE2_4_SHIFTOUT1  ), //o
    .SHIFTOUT2    (ADDR_OSERDESE2_4_SHIFTOUT2  )  //o
  );
  OSERDESE2 #(
    .DATA_RATE_OQ("DDR"),
    .DATA_RATE_TQ("DDR"),
    .DATA_WIDTH(4),
    .SERDES_MODE("MASTER"),
    .TRISTATE_WIDTH(4) 
  ) ADDR_OSERDESE2_5 (
    .CLK          (CLKOUT3                     ), //i
    .CLKDIV       (CLKOUT1                     ), //i
    .D1           (_zz_6                       ), //i
    .D2           (_zz_6                       ), //i
    .D3           (_zz_6                       ), //i
    .D4           (_zz_6                       ), //i
    .D5           (_zz_102                     ), //i
    .D6           (_zz_103                     ), //i
    .D7           (_zz_104                     ), //i
    .D8           (_zz_105                     ), //i
    .T1           (_zz_106                     ), //i
    .T2           (_zz_107                     ), //i
    .T3           (_zz_108                     ), //i
    .T4           (_zz_109                     ), //i
    .TCE          (_zz_110                     ), //i
    .OCE          (_zz_111                     ), //i
    .TBYTEIN      (_zz_112                     ), //i
    .RST          (sdramCd_logic_outputReset   ), //i
    .SHIFTIN1     (_zz_113                     ), //i
    .SHIFTIN2     (_zz_114                     ), //i
    .OQ           (ADDR_OSERDESE2_5_OQ         ), //o
    .OFB          (ADDR_OSERDESE2_5_OFB        ), //o
    .TQ           (ADDR_OSERDESE2_5_TQ         ), //o
    .TFB          (ADDR_OSERDESE2_5_TFB        ), //o
    .TBYTEOUT     (ADDR_OSERDESE2_5_TBYTEOUT   ), //o
    .SHIFTOUT1    (ADDR_OSERDESE2_5_SHIFTOUT1  ), //o
    .SHIFTOUT2    (ADDR_OSERDESE2_5_SHIFTOUT2  )  //o
  );
  OSERDESE2 #(
    .DATA_RATE_OQ("DDR"),
    .DATA_RATE_TQ("DDR"),
    .DATA_WIDTH(4),
    .SERDES_MODE("MASTER"),
    .TRISTATE_WIDTH(4) 
  ) ADDR_OSERDESE2_6 (
    .CLK          (CLKOUT3                     ), //i
    .CLKDIV       (CLKOUT1                     ), //i
    .D1           (_zz_7                       ), //i
    .D2           (_zz_7                       ), //i
    .D3           (_zz_7                       ), //i
    .D4           (_zz_7                       ), //i
    .D5           (_zz_115                     ), //i
    .D6           (_zz_116                     ), //i
    .D7           (_zz_117                     ), //i
    .D8           (_zz_118                     ), //i
    .T1           (_zz_119                     ), //i
    .T2           (_zz_120                     ), //i
    .T3           (_zz_121                     ), //i
    .T4           (_zz_122                     ), //i
    .TCE          (_zz_123                     ), //i
    .OCE          (_zz_124                     ), //i
    .TBYTEIN      (_zz_125                     ), //i
    .RST          (sdramCd_logic_outputReset   ), //i
    .SHIFTIN1     (_zz_126                     ), //i
    .SHIFTIN2     (_zz_127                     ), //i
    .OQ           (ADDR_OSERDESE2_6_OQ         ), //o
    .OFB          (ADDR_OSERDESE2_6_OFB        ), //o
    .TQ           (ADDR_OSERDESE2_6_TQ         ), //o
    .TFB          (ADDR_OSERDESE2_6_TFB        ), //o
    .TBYTEOUT     (ADDR_OSERDESE2_6_TBYTEOUT   ), //o
    .SHIFTOUT1    (ADDR_OSERDESE2_6_SHIFTOUT1  ), //o
    .SHIFTOUT2    (ADDR_OSERDESE2_6_SHIFTOUT2  )  //o
  );
  OSERDESE2 #(
    .DATA_RATE_OQ("DDR"),
    .DATA_RATE_TQ("DDR"),
    .DATA_WIDTH(4),
    .SERDES_MODE("MASTER"),
    .TRISTATE_WIDTH(4) 
  ) ADDR_OSERDESE2_7 (
    .CLK          (CLKOUT3                     ), //i
    .CLKDIV       (CLKOUT1                     ), //i
    .D1           (_zz_8                       ), //i
    .D2           (_zz_8                       ), //i
    .D3           (_zz_8                       ), //i
    .D4           (_zz_8                       ), //i
    .D5           (_zz_128                     ), //i
    .D6           (_zz_129                     ), //i
    .D7           (_zz_130                     ), //i
    .D8           (_zz_131                     ), //i
    .T1           (_zz_132                     ), //i
    .T2           (_zz_133                     ), //i
    .T3           (_zz_134                     ), //i
    .T4           (_zz_135                     ), //i
    .TCE          (_zz_136                     ), //i
    .OCE          (_zz_137                     ), //i
    .TBYTEIN      (_zz_138                     ), //i
    .RST          (sdramCd_logic_outputReset   ), //i
    .SHIFTIN1     (_zz_139                     ), //i
    .SHIFTIN2     (_zz_140                     ), //i
    .OQ           (ADDR_OSERDESE2_7_OQ         ), //o
    .OFB          (ADDR_OSERDESE2_7_OFB        ), //o
    .TQ           (ADDR_OSERDESE2_7_TQ         ), //o
    .TFB          (ADDR_OSERDESE2_7_TFB        ), //o
    .TBYTEOUT     (ADDR_OSERDESE2_7_TBYTEOUT   ), //o
    .SHIFTOUT1    (ADDR_OSERDESE2_7_SHIFTOUT1  ), //o
    .SHIFTOUT2    (ADDR_OSERDESE2_7_SHIFTOUT2  )  //o
  );
  OSERDESE2 #(
    .DATA_RATE_OQ("DDR"),
    .DATA_RATE_TQ("DDR"),
    .DATA_WIDTH(4),
    .SERDES_MODE("MASTER"),
    .TRISTATE_WIDTH(4) 
  ) ADDR_OSERDESE2_8 (
    .CLK          (CLKOUT3                     ), //i
    .CLKDIV       (CLKOUT1                     ), //i
    .D1           (_zz_9                       ), //i
    .D2           (_zz_9                       ), //i
    .D3           (_zz_9                       ), //i
    .D4           (_zz_9                       ), //i
    .D5           (_zz_141                     ), //i
    .D6           (_zz_142                     ), //i
    .D7           (_zz_143                     ), //i
    .D8           (_zz_144                     ), //i
    .T1           (_zz_145                     ), //i
    .T2           (_zz_146                     ), //i
    .T3           (_zz_147                     ), //i
    .T4           (_zz_148                     ), //i
    .TCE          (_zz_149                     ), //i
    .OCE          (_zz_150                     ), //i
    .TBYTEIN      (_zz_151                     ), //i
    .RST          (sdramCd_logic_outputReset   ), //i
    .SHIFTIN1     (_zz_152                     ), //i
    .SHIFTIN2     (_zz_153                     ), //i
    .OQ           (ADDR_OSERDESE2_8_OQ         ), //o
    .OFB          (ADDR_OSERDESE2_8_OFB        ), //o
    .TQ           (ADDR_OSERDESE2_8_TQ         ), //o
    .TFB          (ADDR_OSERDESE2_8_TFB        ), //o
    .TBYTEOUT     (ADDR_OSERDESE2_8_TBYTEOUT   ), //o
    .SHIFTOUT1    (ADDR_OSERDESE2_8_SHIFTOUT1  ), //o
    .SHIFTOUT2    (ADDR_OSERDESE2_8_SHIFTOUT2  )  //o
  );
  OSERDESE2 #(
    .DATA_RATE_OQ("DDR"),
    .DATA_RATE_TQ("DDR"),
    .DATA_WIDTH(4),
    .SERDES_MODE("MASTER"),
    .TRISTATE_WIDTH(4) 
  ) ADDR_OSERDESE2_9 (
    .CLK          (CLKOUT3                     ), //i
    .CLKDIV       (CLKOUT1                     ), //i
    .D1           (_zz_10                      ), //i
    .D2           (_zz_10                      ), //i
    .D3           (_zz_10                      ), //i
    .D4           (_zz_10                      ), //i
    .D5           (_zz_154                     ), //i
    .D6           (_zz_155                     ), //i
    .D7           (_zz_156                     ), //i
    .D8           (_zz_157                     ), //i
    .T1           (_zz_158                     ), //i
    .T2           (_zz_159                     ), //i
    .T3           (_zz_160                     ), //i
    .T4           (_zz_161                     ), //i
    .TCE          (_zz_162                     ), //i
    .OCE          (_zz_163                     ), //i
    .TBYTEIN      (_zz_164                     ), //i
    .RST          (sdramCd_logic_outputReset   ), //i
    .SHIFTIN1     (_zz_165                     ), //i
    .SHIFTIN2     (_zz_166                     ), //i
    .OQ           (ADDR_OSERDESE2_9_OQ         ), //o
    .OFB          (ADDR_OSERDESE2_9_OFB        ), //o
    .TQ           (ADDR_OSERDESE2_9_TQ         ), //o
    .TFB          (ADDR_OSERDESE2_9_TFB        ), //o
    .TBYTEOUT     (ADDR_OSERDESE2_9_TBYTEOUT   ), //o
    .SHIFTOUT1    (ADDR_OSERDESE2_9_SHIFTOUT1  ), //o
    .SHIFTOUT2    (ADDR_OSERDESE2_9_SHIFTOUT2  )  //o
  );
  OSERDESE2 #(
    .DATA_RATE_OQ("DDR"),
    .DATA_RATE_TQ("DDR"),
    .DATA_WIDTH(4),
    .SERDES_MODE("MASTER"),
    .TRISTATE_WIDTH(4) 
  ) ADDR_OSERDESE2_10 (
    .CLK          (CLKOUT3                      ), //i
    .CLKDIV       (CLKOUT1                      ), //i
    .D1           (_zz_11                       ), //i
    .D2           (_zz_11                       ), //i
    .D3           (_zz_11                       ), //i
    .D4           (_zz_11                       ), //i
    .D5           (_zz_167                      ), //i
    .D6           (_zz_168                      ), //i
    .D7           (_zz_169                      ), //i
    .D8           (_zz_170                      ), //i
    .T1           (_zz_171                      ), //i
    .T2           (_zz_172                      ), //i
    .T3           (_zz_173                      ), //i
    .T4           (_zz_174                      ), //i
    .TCE          (_zz_175                      ), //i
    .OCE          (_zz_176                      ), //i
    .TBYTEIN      (_zz_177                      ), //i
    .RST          (sdramCd_logic_outputReset    ), //i
    .SHIFTIN1     (_zz_178                      ), //i
    .SHIFTIN2     (_zz_179                      ), //i
    .OQ           (ADDR_OSERDESE2_10_OQ         ), //o
    .OFB          (ADDR_OSERDESE2_10_OFB        ), //o
    .TQ           (ADDR_OSERDESE2_10_TQ         ), //o
    .TFB          (ADDR_OSERDESE2_10_TFB        ), //o
    .TBYTEOUT     (ADDR_OSERDESE2_10_TBYTEOUT   ), //o
    .SHIFTOUT1    (ADDR_OSERDESE2_10_SHIFTOUT1  ), //o
    .SHIFTOUT2    (ADDR_OSERDESE2_10_SHIFTOUT2  )  //o
  );
  OSERDESE2 #(
    .DATA_RATE_OQ("DDR"),
    .DATA_RATE_TQ("DDR"),
    .DATA_WIDTH(4),
    .SERDES_MODE("MASTER"),
    .TRISTATE_WIDTH(4) 
  ) ADDR_OSERDESE2_11 (
    .CLK          (CLKOUT3                      ), //i
    .CLKDIV       (CLKOUT1                      ), //i
    .D1           (_zz_12                       ), //i
    .D2           (_zz_12                       ), //i
    .D3           (_zz_12                       ), //i
    .D4           (_zz_12                       ), //i
    .D5           (_zz_180                      ), //i
    .D6           (_zz_181                      ), //i
    .D7           (_zz_182                      ), //i
    .D8           (_zz_183                      ), //i
    .T1           (_zz_184                      ), //i
    .T2           (_zz_185                      ), //i
    .T3           (_zz_186                      ), //i
    .T4           (_zz_187                      ), //i
    .TCE          (_zz_188                      ), //i
    .OCE          (_zz_189                      ), //i
    .TBYTEIN      (_zz_190                      ), //i
    .RST          (sdramCd_logic_outputReset    ), //i
    .SHIFTIN1     (_zz_191                      ), //i
    .SHIFTIN2     (_zz_192                      ), //i
    .OQ           (ADDR_OSERDESE2_11_OQ         ), //o
    .OFB          (ADDR_OSERDESE2_11_OFB        ), //o
    .TQ           (ADDR_OSERDESE2_11_TQ         ), //o
    .TFB          (ADDR_OSERDESE2_11_TFB        ), //o
    .TBYTEOUT     (ADDR_OSERDESE2_11_TBYTEOUT   ), //o
    .SHIFTOUT1    (ADDR_OSERDESE2_11_SHIFTOUT1  ), //o
    .SHIFTOUT2    (ADDR_OSERDESE2_11_SHIFTOUT2  )  //o
  );
  OSERDESE2 #(
    .DATA_RATE_OQ("DDR"),
    .DATA_RATE_TQ("DDR"),
    .DATA_WIDTH(4),
    .SERDES_MODE("MASTER"),
    .TRISTATE_WIDTH(4) 
  ) ADDR_OSERDESE2_12 (
    .CLK          (CLKOUT3                      ), //i
    .CLKDIV       (CLKOUT1                      ), //i
    .D1           (_zz_13                       ), //i
    .D2           (_zz_13                       ), //i
    .D3           (_zz_13                       ), //i
    .D4           (_zz_13                       ), //i
    .D5           (_zz_193                      ), //i
    .D6           (_zz_194                      ), //i
    .D7           (_zz_195                      ), //i
    .D8           (_zz_196                      ), //i
    .T1           (_zz_197                      ), //i
    .T2           (_zz_198                      ), //i
    .T3           (_zz_199                      ), //i
    .T4           (_zz_200                      ), //i
    .TCE          (_zz_201                      ), //i
    .OCE          (_zz_202                      ), //i
    .TBYTEIN      (_zz_203                      ), //i
    .RST          (sdramCd_logic_outputReset    ), //i
    .SHIFTIN1     (_zz_204                      ), //i
    .SHIFTIN2     (_zz_205                      ), //i
    .OQ           (ADDR_OSERDESE2_12_OQ         ), //o
    .OFB          (ADDR_OSERDESE2_12_OFB        ), //o
    .TQ           (ADDR_OSERDESE2_12_TQ         ), //o
    .TFB          (ADDR_OSERDESE2_12_TFB        ), //o
    .TBYTEOUT     (ADDR_OSERDESE2_12_TBYTEOUT   ), //o
    .SHIFTOUT1    (ADDR_OSERDESE2_12_SHIFTOUT1  ), //o
    .SHIFTOUT2    (ADDR_OSERDESE2_12_SHIFTOUT2  )  //o
  );
  OSERDESE2 #(
    .DATA_RATE_OQ("DDR"),
    .DATA_RATE_TQ("DDR"),
    .DATA_WIDTH(4),
    .SERDES_MODE("MASTER"),
    .TRISTATE_WIDTH(4) 
  ) BA_OSERDESE2 (
    .CLK          (CLKOUT3                    ), //i
    .CLKDIV       (CLKOUT1                    ), //i
    .D1           (_zz_14                     ), //i
    .D2           (_zz_14                     ), //i
    .D3           (_zz_14                     ), //i
    .D4           (_zz_14                     ), //i
    .D5           (_zz_206                    ), //i
    .D6           (_zz_207                    ), //i
    .D7           (_zz_208                    ), //i
    .D8           (_zz_209                    ), //i
    .T1           (_zz_210                    ), //i
    .T2           (_zz_211                    ), //i
    .T3           (_zz_212                    ), //i
    .T4           (_zz_213                    ), //i
    .TCE          (_zz_214                    ), //i
    .OCE          (_zz_215                    ), //i
    .TBYTEIN      (_zz_216                    ), //i
    .RST          (sdramCd_logic_outputReset  ), //i
    .SHIFTIN1     (_zz_217                    ), //i
    .SHIFTIN2     (_zz_218                    ), //i
    .OQ           (BA_OSERDESE2_OQ            ), //o
    .OFB          (BA_OSERDESE2_OFB           ), //o
    .TQ           (BA_OSERDESE2_TQ            ), //o
    .TFB          (BA_OSERDESE2_TFB           ), //o
    .TBYTEOUT     (BA_OSERDESE2_TBYTEOUT      ), //o
    .SHIFTOUT1    (BA_OSERDESE2_SHIFTOUT1     ), //o
    .SHIFTOUT2    (BA_OSERDESE2_SHIFTOUT2     )  //o
  );
  OSERDESE2 #(
    .DATA_RATE_OQ("DDR"),
    .DATA_RATE_TQ("DDR"),
    .DATA_WIDTH(4),
    .SERDES_MODE("MASTER"),
    .TRISTATE_WIDTH(4) 
  ) BA_OSERDESE2_1 (
    .CLK          (CLKOUT3                    ), //i
    .CLKDIV       (CLKOUT1                    ), //i
    .D1           (_zz_15                     ), //i
    .D2           (_zz_15                     ), //i
    .D3           (_zz_15                     ), //i
    .D4           (_zz_15                     ), //i
    .D5           (_zz_219                    ), //i
    .D6           (_zz_220                    ), //i
    .D7           (_zz_221                    ), //i
    .D8           (_zz_222                    ), //i
    .T1           (_zz_223                    ), //i
    .T2           (_zz_224                    ), //i
    .T3           (_zz_225                    ), //i
    .T4           (_zz_226                    ), //i
    .TCE          (_zz_227                    ), //i
    .OCE          (_zz_228                    ), //i
    .TBYTEIN      (_zz_229                    ), //i
    .RST          (sdramCd_logic_outputReset  ), //i
    .SHIFTIN1     (_zz_230                    ), //i
    .SHIFTIN2     (_zz_231                    ), //i
    .OQ           (BA_OSERDESE2_1_OQ          ), //o
    .OFB          (BA_OSERDESE2_1_OFB         ), //o
    .TQ           (BA_OSERDESE2_1_TQ          ), //o
    .TFB          (BA_OSERDESE2_1_TFB         ), //o
    .TBYTEOUT     (BA_OSERDESE2_1_TBYTEOUT    ), //o
    .SHIFTOUT1    (BA_OSERDESE2_1_SHIFTOUT1   ), //o
    .SHIFTOUT2    (BA_OSERDESE2_1_SHIFTOUT2   )  //o
  );
  OSERDESE2 #(
    .DATA_RATE_OQ("DDR"),
    .DATA_RATE_TQ("DDR"),
    .DATA_WIDTH(4),
    .SERDES_MODE("MASTER"),
    .TRISTATE_WIDTH(4) 
  ) BA_OSERDESE2_2 (
    .CLK          (CLKOUT3                    ), //i
    .CLKDIV       (CLKOUT1                    ), //i
    .D1           (_zz_16                     ), //i
    .D2           (_zz_16                     ), //i
    .D3           (_zz_16                     ), //i
    .D4           (_zz_16                     ), //i
    .D5           (_zz_232                    ), //i
    .D6           (_zz_233                    ), //i
    .D7           (_zz_234                    ), //i
    .D8           (_zz_235                    ), //i
    .T1           (_zz_236                    ), //i
    .T2           (_zz_237                    ), //i
    .T3           (_zz_238                    ), //i
    .T4           (_zz_239                    ), //i
    .TCE          (_zz_240                    ), //i
    .OCE          (_zz_241                    ), //i
    .TBYTEIN      (_zz_242                    ), //i
    .RST          (sdramCd_logic_outputReset  ), //i
    .SHIFTIN1     (_zz_243                    ), //i
    .SHIFTIN2     (_zz_244                    ), //i
    .OQ           (BA_OSERDESE2_2_OQ          ), //o
    .OFB          (BA_OSERDESE2_2_OFB         ), //o
    .TQ           (BA_OSERDESE2_2_TQ          ), //o
    .TFB          (BA_OSERDESE2_2_TFB         ), //o
    .TBYTEOUT     (BA_OSERDESE2_2_TBYTEOUT    ), //o
    .SHIFTOUT1    (BA_OSERDESE2_2_SHIFTOUT1   ), //o
    .SHIFTOUT2    (BA_OSERDESE2_2_SHIFTOUT2   )  //o
  );
  OSERDESE2 #(
    .DATA_RATE_OQ("DDR"),
    .DATA_RATE_TQ("DDR"),
    .DATA_WIDTH(4),
    .SERDES_MODE("MASTER"),
    .TRISTATE_WIDTH(4) 
  ) CASn_OSERDESE2 (
    .CLK          (CLKOUT3                        ), //i
    .CLKDIV       (CLKOUT1                        ), //i
    .D1           (io_ctrl_phases_0_CASn_regNext  ), //i
    .D2           (io_ctrl_phases_0_CASn_regNext  ), //i
    .D3           (io_ctrl_phases_1_CASn_regNext  ), //i
    .D4           (io_ctrl_phases_1_CASn_regNext  ), //i
    .D5           (_zz_245                        ), //i
    .D6           (_zz_246                        ), //i
    .D7           (_zz_247                        ), //i
    .D8           (_zz_248                        ), //i
    .T1           (_zz_249                        ), //i
    .T2           (_zz_250                        ), //i
    .T3           (_zz_251                        ), //i
    .T4           (_zz_252                        ), //i
    .TCE          (_zz_253                        ), //i
    .OCE          (_zz_254                        ), //i
    .TBYTEIN      (_zz_255                        ), //i
    .RST          (sdramCd_logic_outputReset      ), //i
    .SHIFTIN1     (_zz_256                        ), //i
    .SHIFTIN2     (_zz_257                        ), //i
    .OQ           (CASn_OSERDESE2_OQ              ), //o
    .OFB          (CASn_OSERDESE2_OFB             ), //o
    .TQ           (CASn_OSERDESE2_TQ              ), //o
    .TFB          (CASn_OSERDESE2_TFB             ), //o
    .TBYTEOUT     (CASn_OSERDESE2_TBYTEOUT        ), //o
    .SHIFTOUT1    (CASn_OSERDESE2_SHIFTOUT1       ), //o
    .SHIFTOUT2    (CASn_OSERDESE2_SHIFTOUT2       )  //o
  );
  OSERDESE2 #(
    .DATA_RATE_OQ("DDR"),
    .DATA_RATE_TQ("DDR"),
    .DATA_WIDTH(4),
    .SERDES_MODE("MASTER"),
    .TRISTATE_WIDTH(4) 
  ) CKE_OSERDESE2 (
    .CLK          (CLKOUT3                       ), //i
    .CLKDIV       (CLKOUT1                       ), //i
    .D1           (io_ctrl_phases_0_CKE_regNext  ), //i
    .D2           (io_ctrl_phases_0_CKE_regNext  ), //i
    .D3           (io_ctrl_phases_1_CKE_regNext  ), //i
    .D4           (io_ctrl_phases_1_CKE_regNext  ), //i
    .D5           (_zz_258                       ), //i
    .D6           (_zz_259                       ), //i
    .D7           (_zz_260                       ), //i
    .D8           (_zz_261                       ), //i
    .T1           (_zz_262                       ), //i
    .T2           (_zz_263                       ), //i
    .T3           (_zz_264                       ), //i
    .T4           (_zz_265                       ), //i
    .TCE          (_zz_266                       ), //i
    .OCE          (_zz_267                       ), //i
    .TBYTEIN      (_zz_268                       ), //i
    .RST          (sdramCd_logic_outputReset     ), //i
    .SHIFTIN1     (_zz_269                       ), //i
    .SHIFTIN2     (_zz_270                       ), //i
    .OQ           (CKE_OSERDESE2_OQ              ), //o
    .OFB          (CKE_OSERDESE2_OFB             ), //o
    .TQ           (CKE_OSERDESE2_TQ              ), //o
    .TFB          (CKE_OSERDESE2_TFB             ), //o
    .TBYTEOUT     (CKE_OSERDESE2_TBYTEOUT        ), //o
    .SHIFTOUT1    (CKE_OSERDESE2_SHIFTOUT1       ), //o
    .SHIFTOUT2    (CKE_OSERDESE2_SHIFTOUT2       )  //o
  );
  OSERDESE2 #(
    .DATA_RATE_OQ("DDR"),
    .DATA_RATE_TQ("DDR"),
    .DATA_WIDTH(4),
    .SERDES_MODE("MASTER"),
    .TRISTATE_WIDTH(4) 
  ) CSn_OSERDESE2 (
    .CLK          (CLKOUT3                       ), //i
    .CLKDIV       (CLKOUT1                       ), //i
    .D1           (io_ctrl_phases_0_CSn_regNext  ), //i
    .D2           (io_ctrl_phases_0_CSn_regNext  ), //i
    .D3           (io_ctrl_phases_1_CSn_regNext  ), //i
    .D4           (io_ctrl_phases_1_CSn_regNext  ), //i
    .D5           (_zz_271                       ), //i
    .D6           (_zz_272                       ), //i
    .D7           (_zz_273                       ), //i
    .D8           (_zz_274                       ), //i
    .T1           (_zz_275                       ), //i
    .T2           (_zz_276                       ), //i
    .T3           (_zz_277                       ), //i
    .T4           (_zz_278                       ), //i
    .TCE          (_zz_279                       ), //i
    .OCE          (_zz_280                       ), //i
    .TBYTEIN      (_zz_281                       ), //i
    .RST          (sdramCd_logic_outputReset     ), //i
    .SHIFTIN1     (_zz_282                       ), //i
    .SHIFTIN2     (_zz_283                       ), //i
    .OQ           (CSn_OSERDESE2_OQ              ), //o
    .OFB          (CSn_OSERDESE2_OFB             ), //o
    .TQ           (CSn_OSERDESE2_TQ              ), //o
    .TFB          (CSn_OSERDESE2_TFB             ), //o
    .TBYTEOUT     (CSn_OSERDESE2_TBYTEOUT        ), //o
    .SHIFTOUT1    (CSn_OSERDESE2_SHIFTOUT1       ), //o
    .SHIFTOUT2    (CSn_OSERDESE2_SHIFTOUT2       )  //o
  );
  OSERDESE2 #(
    .DATA_RATE_OQ("DDR"),
    .DATA_RATE_TQ("DDR"),
    .DATA_WIDTH(4),
    .SERDES_MODE("MASTER"),
    .TRISTATE_WIDTH(4) 
  ) RASn_OSERDESE2 (
    .CLK          (CLKOUT3                        ), //i
    .CLKDIV       (CLKOUT1                        ), //i
    .D1           (io_ctrl_phases_0_RASn_regNext  ), //i
    .D2           (io_ctrl_phases_0_RASn_regNext  ), //i
    .D3           (io_ctrl_phases_1_RASn_regNext  ), //i
    .D4           (io_ctrl_phases_1_RASn_regNext  ), //i
    .D5           (_zz_284                        ), //i
    .D6           (_zz_285                        ), //i
    .D7           (_zz_286                        ), //i
    .D8           (_zz_287                        ), //i
    .T1           (_zz_288                        ), //i
    .T2           (_zz_289                        ), //i
    .T3           (_zz_290                        ), //i
    .T4           (_zz_291                        ), //i
    .TCE          (_zz_292                        ), //i
    .OCE          (_zz_293                        ), //i
    .TBYTEIN      (_zz_294                        ), //i
    .RST          (sdramCd_logic_outputReset      ), //i
    .SHIFTIN1     (_zz_295                        ), //i
    .SHIFTIN2     (_zz_296                        ), //i
    .OQ           (RASn_OSERDESE2_OQ              ), //o
    .OFB          (RASn_OSERDESE2_OFB             ), //o
    .TQ           (RASn_OSERDESE2_TQ              ), //o
    .TFB          (RASn_OSERDESE2_TFB             ), //o
    .TBYTEOUT     (RASn_OSERDESE2_TBYTEOUT        ), //o
    .SHIFTOUT1    (RASn_OSERDESE2_SHIFTOUT1       ), //o
    .SHIFTOUT2    (RASn_OSERDESE2_SHIFTOUT2       )  //o
  );
  OSERDESE2 #(
    .DATA_RATE_OQ("DDR"),
    .DATA_RATE_TQ("DDR"),
    .DATA_WIDTH(4),
    .SERDES_MODE("MASTER"),
    .TRISTATE_WIDTH(4) 
  ) WEn_OSERDESE2 (
    .CLK          (CLKOUT3                       ), //i
    .CLKDIV       (CLKOUT1                       ), //i
    .D1           (io_ctrl_phases_0_WEn_regNext  ), //i
    .D2           (io_ctrl_phases_0_WEn_regNext  ), //i
    .D3           (io_ctrl_phases_1_WEn_regNext  ), //i
    .D4           (io_ctrl_phases_1_WEn_regNext  ), //i
    .D5           (_zz_297                       ), //i
    .D6           (_zz_298                       ), //i
    .D7           (_zz_299                       ), //i
    .D8           (_zz_300                       ), //i
    .T1           (_zz_301                       ), //i
    .T2           (_zz_302                       ), //i
    .T3           (_zz_303                       ), //i
    .T4           (_zz_304                       ), //i
    .TCE          (_zz_305                       ), //i
    .OCE          (_zz_306                       ), //i
    .TBYTEIN      (_zz_307                       ), //i
    .RST          (sdramCd_logic_outputReset     ), //i
    .SHIFTIN1     (_zz_308                       ), //i
    .SHIFTIN2     (_zz_309                       ), //i
    .OQ           (WEn_OSERDESE2_OQ              ), //o
    .OFB          (WEn_OSERDESE2_OFB             ), //o
    .TQ           (WEn_OSERDESE2_TQ              ), //o
    .TFB          (WEn_OSERDESE2_TFB             ), //o
    .TBYTEOUT     (WEn_OSERDESE2_TBYTEOUT        ), //o
    .SHIFTOUT1    (WEn_OSERDESE2_SHIFTOUT1       ), //o
    .SHIFTOUT2    (WEn_OSERDESE2_SHIFTOUT2       )  //o
  );
  OSERDESE2 #(
    .DATA_RATE_OQ("DDR"),
    .DATA_RATE_TQ("DDR"),
    .DATA_WIDTH(4),
    .SERDES_MODE("MASTER"),
    .TRISTATE_WIDTH(4) 
  ) ODT_OSERDESE2 (
    .CLK          (CLKOUT3                       ), //i
    .CLKDIV       (CLKOUT1                       ), //i
    .D1           (io_ctrl_phases_0_ODT_regNext  ), //i
    .D2           (io_ctrl_phases_0_ODT_regNext  ), //i
    .D3           (io_ctrl_phases_1_ODT_regNext  ), //i
    .D4           (io_ctrl_phases_1_ODT_regNext  ), //i
    .D5           (_zz_310                       ), //i
    .D6           (_zz_311                       ), //i
    .D7           (_zz_312                       ), //i
    .D8           (_zz_313                       ), //i
    .T1           (_zz_314                       ), //i
    .T2           (_zz_315                       ), //i
    .T3           (_zz_316                       ), //i
    .T4           (_zz_317                       ), //i
    .TCE          (_zz_318                       ), //i
    .OCE          (_zz_319                       ), //i
    .TBYTEIN      (_zz_320                       ), //i
    .RST          (sdramCd_logic_outputReset     ), //i
    .SHIFTIN1     (_zz_321                       ), //i
    .SHIFTIN2     (_zz_322                       ), //i
    .OQ           (ODT_OSERDESE2_OQ              ), //o
    .OFB          (ODT_OSERDESE2_OFB             ), //o
    .TQ           (ODT_OSERDESE2_TQ              ), //o
    .TFB          (ODT_OSERDESE2_TFB             ), //o
    .TBYTEOUT     (ODT_OSERDESE2_TBYTEOUT        ), //o
    .SHIFTOUT1    (ODT_OSERDESE2_SHIFTOUT1       ), //o
    .SHIFTOUT2    (ODT_OSERDESE2_SHIFTOUT2       )  //o
  );
  OSERDESE2 #(
    .DATA_RATE_OQ("DDR"),
    .DATA_RATE_TQ("DDR"),
    .DATA_WIDTH(4),
    .SERDES_MODE("MASTER"),
    .TRISTATE_WIDTH(4) 
  ) CK_OSERDESE2_1 (
    .CLK          (CLKOUT4                   ), //i
    .CLKDIV       (CLKOUT2                   ), //i
    .D1           (_zz_323                   ), //i
    .D2           (_zz_324                   ), //i
    .D3           (_zz_325                   ), //i
    .D4           (_zz_326                   ), //i
    .D5           (_zz_327                   ), //i
    .D6           (_zz_328                   ), //i
    .D7           (_zz_329                   ), //i
    .D8           (_zz_330                   ), //i
    .T1           (_zz_331                   ), //i
    .T2           (_zz_332                   ), //i
    .T3           (_zz_333                   ), //i
    .T4           (_zz_334                   ), //i
    .TCE          (_zz_335                   ), //i
    .OCE          (_zz_336                   ), //i
    .TBYTEIN      (_zz_337                   ), //i
    .RST          (clk90Rst                  ), //i
    .SHIFTIN1     (_zz_338                   ), //i
    .SHIFTIN2     (_zz_339                   ), //i
    .OQ           (CK_OSERDESE2_1_OQ         ), //o
    .OFB          (CK_OSERDESE2_1_OFB        ), //o
    .TQ           (CK_OSERDESE2_1_TQ         ), //o
    .TFB          (CK_OSERDESE2_1_TFB        ), //o
    .TBYTEOUT     (CK_OSERDESE2_1_TBYTEOUT   ), //o
    .SHIFTOUT1    (CK_OSERDESE2_1_SHIFTOUT1  ), //o
    .SHIFTOUT2    (CK_OSERDESE2_1_SHIFTOUT2  )  //o
  );
  IOBUFDS dqs_0_buf (
    .I      (CK_OSERDESE2_1_OQ  ), //i
    .T      (CK_OSERDESE2_1_TQ  ), //i
    .O      (dqs_0_buf_O        ), //o
    .IO     (io_sdram_DQS[0]    ), //~
    .IOB    (io_sdram_DQSn[0]   )  //~
  );
  OSERDESE2 #(
    .DATA_RATE_OQ("DDR"),
    .DATA_RATE_TQ("DDR"),
    .DATA_WIDTH(4),
    .SERDES_MODE("MASTER"),
    .TRISTATE_WIDTH(4) 
  ) CK_OSERDESE2_2 (
    .CLK          (CLKOUT4                   ), //i
    .CLKDIV       (CLKOUT2                   ), //i
    .D1           (_zz_340                   ), //i
    .D2           (_zz_341                   ), //i
    .D3           (_zz_342                   ), //i
    .D4           (_zz_343                   ), //i
    .D5           (_zz_344                   ), //i
    .D6           (_zz_345                   ), //i
    .D7           (_zz_346                   ), //i
    .D8           (_zz_347                   ), //i
    .T1           (_zz_348                   ), //i
    .T2           (_zz_349                   ), //i
    .T3           (_zz_350                   ), //i
    .T4           (_zz_351                   ), //i
    .TCE          (_zz_352                   ), //i
    .OCE          (_zz_353                   ), //i
    .TBYTEIN      (_zz_354                   ), //i
    .RST          (clk90Rst                  ), //i
    .SHIFTIN1     (_zz_355                   ), //i
    .SHIFTIN2     (_zz_356                   ), //i
    .OQ           (CK_OSERDESE2_2_OQ         ), //o
    .OFB          (CK_OSERDESE2_2_OFB        ), //o
    .TQ           (CK_OSERDESE2_2_TQ         ), //o
    .TFB          (CK_OSERDESE2_2_TFB        ), //o
    .TBYTEOUT     (CK_OSERDESE2_2_TBYTEOUT   ), //o
    .SHIFTOUT1    (CK_OSERDESE2_2_SHIFTOUT1  ), //o
    .SHIFTOUT2    (CK_OSERDESE2_2_SHIFTOUT2  )  //o
  );
  IOBUFDS dqs_1_buf (
    .I      (CK_OSERDESE2_2_OQ  ), //i
    .T      (CK_OSERDESE2_2_TQ  ), //i
    .O      (dqs_1_buf_O        ), //o
    .IO     (io_sdram_DQS[1]    ), //~
    .IOB    (io_sdram_DQSn[1]   )  //~
  );
  OSERDESE2 #(
    .DATA_RATE_OQ("DDR"),
    .DATA_RATE_TQ("DDR"),
    .DATA_WIDTH(4),
    .SERDES_MODE("MASTER"),
    .TRISTATE_WIDTH(4) 
  ) DM_OSERDESE2 (
    .CLK          (CLKOUT3                    ), //i
    .CLKDIV       (CLKOUT1                    ), //i
    .D1           (_zz_357                    ), //i
    .D2           (_zz_358                    ), //i
    .D3           (_zz_359                    ), //i
    .D4           (_zz_360                    ), //i
    .D5           (_zz_361                    ), //i
    .D6           (_zz_362                    ), //i
    .D7           (_zz_363                    ), //i
    .D8           (_zz_364                    ), //i
    .T1           (_zz_365                    ), //i
    .T2           (_zz_366                    ), //i
    .T3           (_zz_367                    ), //i
    .T4           (_zz_368                    ), //i
    .TCE          (_zz_369                    ), //i
    .OCE          (_zz_370                    ), //i
    .TBYTEIN      (_zz_371                    ), //i
    .RST          (sdramCd_logic_outputReset  ), //i
    .SHIFTIN1     (_zz_372                    ), //i
    .SHIFTIN2     (_zz_373                    ), //i
    .OQ           (DM_OSERDESE2_OQ            ), //o
    .OFB          (DM_OSERDESE2_OFB           ), //o
    .TQ           (DM_OSERDESE2_TQ            ), //o
    .TFB          (DM_OSERDESE2_TFB           ), //o
    .TBYTEOUT     (DM_OSERDESE2_TBYTEOUT      ), //o
    .SHIFTOUT1    (DM_OSERDESE2_SHIFTOUT1     ), //o
    .SHIFTOUT2    (DM_OSERDESE2_SHIFTOUT2     )  //o
  );
  OSERDESE2 #(
    .DATA_RATE_OQ("DDR"),
    .DATA_RATE_TQ("DDR"),
    .DATA_WIDTH(4),
    .SERDES_MODE("MASTER"),
    .TRISTATE_WIDTH(4) 
  ) DM_OSERDESE2_1 (
    .CLK          (CLKOUT3                    ), //i
    .CLKDIV       (CLKOUT1                    ), //i
    .D1           (_zz_374                    ), //i
    .D2           (_zz_375                    ), //i
    .D3           (_zz_376                    ), //i
    .D4           (_zz_377                    ), //i
    .D5           (_zz_378                    ), //i
    .D6           (_zz_379                    ), //i
    .D7           (_zz_380                    ), //i
    .D8           (_zz_381                    ), //i
    .T1           (_zz_382                    ), //i
    .T2           (_zz_383                    ), //i
    .T3           (_zz_384                    ), //i
    .T4           (_zz_385                    ), //i
    .TCE          (_zz_386                    ), //i
    .OCE          (_zz_387                    ), //i
    .TBYTEIN      (_zz_388                    ), //i
    .RST          (sdramCd_logic_outputReset  ), //i
    .SHIFTIN1     (_zz_389                    ), //i
    .SHIFTIN2     (_zz_390                    ), //i
    .OQ           (DM_OSERDESE2_1_OQ          ), //o
    .OFB          (DM_OSERDESE2_1_OFB         ), //o
    .TQ           (DM_OSERDESE2_1_TQ          ), //o
    .TFB          (DM_OSERDESE2_1_TFB         ), //o
    .TBYTEOUT     (DM_OSERDESE2_1_TBYTEOUT    ), //o
    .SHIFTOUT1    (DM_OSERDESE2_1_SHIFTOUT1   ), //o
    .SHIFTOUT2    (DM_OSERDESE2_1_SHIFTOUT2   )  //o
  );
  IOBUF dq_0_buf (
    .I     (DQ_OSERDESE2_OQ  ), //i
    .T     (DQ_OSERDESE2_TQ  ), //i
    .O     (dq_0_buf_O       ), //o
    .IO    (io_sdram_DQ[0]   )  //~
  );
  OSERDESE2 #(
    .DATA_RATE_OQ("DDR"),
    .DATA_RATE_TQ("DDR"),
    .DATA_WIDTH(4),
    .SERDES_MODE("MASTER"),
    .TRISTATE_WIDTH(4) 
  ) DQ_OSERDESE2 (
    .CLK          (CLKOUT3                    ), //i
    .CLKDIV       (CLKOUT1                    ), //i
    .D1           (_zz_391                    ), //i
    .D2           (_zz_392                    ), //i
    .D3           (_zz_393                    ), //i
    .D4           (_zz_394                    ), //i
    .D5           (_zz_395                    ), //i
    .D6           (_zz_396                    ), //i
    .D7           (_zz_397                    ), //i
    .D8           (_zz_398                    ), //i
    .T1           (_zz_399                    ), //i
    .T2           (_zz_400                    ), //i
    .T3           (_zz_401                    ), //i
    .T4           (_zz_402                    ), //i
    .TCE          (_zz_403                    ), //i
    .OCE          (_zz_404                    ), //i
    .TBYTEIN      (_zz_405                    ), //i
    .RST          (sdramCd_logic_outputReset  ), //i
    .SHIFTIN1     (_zz_406                    ), //i
    .SHIFTIN2     (_zz_407                    ), //i
    .OQ           (DQ_OSERDESE2_OQ            ), //o
    .OFB          (DQ_OSERDESE2_OFB           ), //o
    .TQ           (DQ_OSERDESE2_TQ            ), //o
    .TFB          (DQ_OSERDESE2_TFB           ), //o
    .TBYTEOUT     (DQ_OSERDESE2_TBYTEOUT      ), //o
    .SHIFTOUT1    (DQ_OSERDESE2_SHIFTOUT1     ), //o
    .SHIFTOUT2    (DQ_OSERDESE2_SHIFTOUT2     )  //o
  );
  IDELAYE2 #(
    .HIGH_PERFORMANCE_MODE("TRUE"),
    .IDELAY_TYPE("VAR_LOAD"),
    .IDELAY_VALUE(0),
    .PIPE_SEL("FALSE"),
    .REFCLK_FREQUENCY(300.0),
    .SIGNAL_PATTERN("DATA") 
  ) dq_0_idelay (
    .CNTVALUEOUT    (dq_0_idelay_CNTVALUEOUT[4:0]  ), //o
    .DATAOUT        (dq_0_idelay_DATAOUT           ), //o
    .C              (CLKOUT3                       ), //i
    .CE             (_zz_408                       ), //i
    .CINVCTRL       (_zz_409                       ), //i
    .CNTVALUEIN     (idelayValueIn[4:0]            ), //i
    .DATAIN         (_zz_410                       ), //i
    .IDATAIN        (dq_0_buf_O                    ), //i
    .INC            (_zz_411                       ), //i
    .LD             (dq_0_idelayLoad               ), //i
    .LDPIPEEN       (_zz_412                       ), //i
    .REGRST         (_zz_413                       )  //i
  );
  ISERDESE2 #(
    .DATA_RATE("DDR"),
    .DATA_WIDTH(4),
    .INTERFACE_TYPE("NETWORKING"),
    .IOBDELAY("IFD") 
  ) dq_0_des (
    .BITSLIP         (dq_0_bitsleep              ), //i
    .CE1             (_zz_414                    ), //i
    .CE2             (_zz_415                    ), //i
    .CLK             (CLKOUT3                    ), //i
    .CLKB            (_zz_416                    ), //i
    .CLKDIV          (CLKOUT1                    ), //i
    .CLKDIVP         (_zz_417                    ), //i
    .D               (_zz_418                    ), //i
    .DDLY            (dq_0_idelay_DATAOUT        ), //i
    .DYNCLKDIVSEL    (_zz_419                    ), //i
    .DYNCLKSEL       (_zz_420                    ), //i
    .OCLK            (_zz_421                    ), //i
    .OCLKB           (_zz_422                    ), //i
    .OFB             (_zz_423                    ), //i
    .RST             (sdramCd_logic_outputReset  ), //i
    .SHIFTIN1        (_zz_424                    ), //i
    .SHIFTIN2        (_zz_425                    ), //i
    .O               (dq_0_des_O                 ), //o
    .Q1              (dq_0_des_Q1                ), //o
    .Q2              (dq_0_des_Q2                ), //o
    .Q3              (dq_0_des_Q3                ), //o
    .Q4              (dq_0_des_Q4                ), //o
    .Q5              (dq_0_des_Q5                ), //o
    .Q6              (dq_0_des_Q6                ), //o
    .Q7              (dq_0_des_Q7                ), //o
    .Q8              (dq_0_des_Q8                ), //o
    .SHIFTOUT1       (dq_0_des_SHIFTOUT1         ), //o
    .SHIFTOUT2       (dq_0_des_SHIFTOUT2         )  //o
  );
  IOBUF dq_1_buf (
    .I     (DQ_OSERDESE2_1_OQ  ), //i
    .T     (DQ_OSERDESE2_1_TQ  ), //i
    .O     (dq_1_buf_O         ), //o
    .IO    (io_sdram_DQ[1]     )  //~
  );
  OSERDESE2 #(
    .DATA_RATE_OQ("DDR"),
    .DATA_RATE_TQ("DDR"),
    .DATA_WIDTH(4),
    .SERDES_MODE("MASTER"),
    .TRISTATE_WIDTH(4) 
  ) DQ_OSERDESE2_1 (
    .CLK          (CLKOUT3                    ), //i
    .CLKDIV       (CLKOUT1                    ), //i
    .D1           (_zz_426                    ), //i
    .D2           (_zz_427                    ), //i
    .D3           (_zz_428                    ), //i
    .D4           (_zz_429                    ), //i
    .D5           (_zz_430                    ), //i
    .D6           (_zz_431                    ), //i
    .D7           (_zz_432                    ), //i
    .D8           (_zz_433                    ), //i
    .T1           (_zz_434                    ), //i
    .T2           (_zz_435                    ), //i
    .T3           (_zz_436                    ), //i
    .T4           (_zz_437                    ), //i
    .TCE          (_zz_438                    ), //i
    .OCE          (_zz_439                    ), //i
    .TBYTEIN      (_zz_440                    ), //i
    .RST          (sdramCd_logic_outputReset  ), //i
    .SHIFTIN1     (_zz_441                    ), //i
    .SHIFTIN2     (_zz_442                    ), //i
    .OQ           (DQ_OSERDESE2_1_OQ          ), //o
    .OFB          (DQ_OSERDESE2_1_OFB         ), //o
    .TQ           (DQ_OSERDESE2_1_TQ          ), //o
    .TFB          (DQ_OSERDESE2_1_TFB         ), //o
    .TBYTEOUT     (DQ_OSERDESE2_1_TBYTEOUT    ), //o
    .SHIFTOUT1    (DQ_OSERDESE2_1_SHIFTOUT1   ), //o
    .SHIFTOUT2    (DQ_OSERDESE2_1_SHIFTOUT2   )  //o
  );
  IDELAYE2 #(
    .HIGH_PERFORMANCE_MODE("TRUE"),
    .IDELAY_TYPE("VAR_LOAD"),
    .IDELAY_VALUE(0),
    .PIPE_SEL("FALSE"),
    .REFCLK_FREQUENCY(300.0),
    .SIGNAL_PATTERN("DATA") 
  ) dq_1_idelay (
    .CNTVALUEOUT    (dq_1_idelay_CNTVALUEOUT[4:0]  ), //o
    .DATAOUT        (dq_1_idelay_DATAOUT           ), //o
    .C              (CLKOUT3                       ), //i
    .CE             (_zz_443                       ), //i
    .CINVCTRL       (_zz_444                       ), //i
    .CNTVALUEIN     (idelayValueIn[4:0]            ), //i
    .DATAIN         (_zz_445                       ), //i
    .IDATAIN        (dq_1_buf_O                    ), //i
    .INC            (_zz_446                       ), //i
    .LD             (dq_1_idelayLoad               ), //i
    .LDPIPEEN       (_zz_447                       ), //i
    .REGRST         (_zz_448                       )  //i
  );
  ISERDESE2 #(
    .DATA_RATE("DDR"),
    .DATA_WIDTH(4),
    .INTERFACE_TYPE("NETWORKING"),
    .IOBDELAY("IFD") 
  ) dq_1_des (
    .BITSLIP         (dq_1_bitsleep              ), //i
    .CE1             (_zz_449                    ), //i
    .CE2             (_zz_450                    ), //i
    .CLK             (CLKOUT3                    ), //i
    .CLKB            (_zz_451                    ), //i
    .CLKDIV          (CLKOUT1                    ), //i
    .CLKDIVP         (_zz_452                    ), //i
    .D               (_zz_453                    ), //i
    .DDLY            (dq_1_idelay_DATAOUT        ), //i
    .DYNCLKDIVSEL    (_zz_454                    ), //i
    .DYNCLKSEL       (_zz_455                    ), //i
    .OCLK            (_zz_456                    ), //i
    .OCLKB           (_zz_457                    ), //i
    .OFB             (_zz_458                    ), //i
    .RST             (sdramCd_logic_outputReset  ), //i
    .SHIFTIN1        (_zz_459                    ), //i
    .SHIFTIN2        (_zz_460                    ), //i
    .O               (dq_1_des_O                 ), //o
    .Q1              (dq_1_des_Q1                ), //o
    .Q2              (dq_1_des_Q2                ), //o
    .Q3              (dq_1_des_Q3                ), //o
    .Q4              (dq_1_des_Q4                ), //o
    .Q5              (dq_1_des_Q5                ), //o
    .Q6              (dq_1_des_Q6                ), //o
    .Q7              (dq_1_des_Q7                ), //o
    .Q8              (dq_1_des_Q8                ), //o
    .SHIFTOUT1       (dq_1_des_SHIFTOUT1         ), //o
    .SHIFTOUT2       (dq_1_des_SHIFTOUT2         )  //o
  );
  IOBUF dq_2_buf (
    .I     (DQ_OSERDESE2_2_OQ  ), //i
    .T     (DQ_OSERDESE2_2_TQ  ), //i
    .O     (dq_2_buf_O         ), //o
    .IO    (io_sdram_DQ[2]     )  //~
  );
  OSERDESE2 #(
    .DATA_RATE_OQ("DDR"),
    .DATA_RATE_TQ("DDR"),
    .DATA_WIDTH(4),
    .SERDES_MODE("MASTER"),
    .TRISTATE_WIDTH(4) 
  ) DQ_OSERDESE2_2 (
    .CLK          (CLKOUT3                    ), //i
    .CLKDIV       (CLKOUT1                    ), //i
    .D1           (_zz_461                    ), //i
    .D2           (_zz_462                    ), //i
    .D3           (_zz_463                    ), //i
    .D4           (_zz_464                    ), //i
    .D5           (_zz_465                    ), //i
    .D6           (_zz_466                    ), //i
    .D7           (_zz_467                    ), //i
    .D8           (_zz_468                    ), //i
    .T1           (_zz_469                    ), //i
    .T2           (_zz_470                    ), //i
    .T3           (_zz_471                    ), //i
    .T4           (_zz_472                    ), //i
    .TCE          (_zz_473                    ), //i
    .OCE          (_zz_474                    ), //i
    .TBYTEIN      (_zz_475                    ), //i
    .RST          (sdramCd_logic_outputReset  ), //i
    .SHIFTIN1     (_zz_476                    ), //i
    .SHIFTIN2     (_zz_477                    ), //i
    .OQ           (DQ_OSERDESE2_2_OQ          ), //o
    .OFB          (DQ_OSERDESE2_2_OFB         ), //o
    .TQ           (DQ_OSERDESE2_2_TQ          ), //o
    .TFB          (DQ_OSERDESE2_2_TFB         ), //o
    .TBYTEOUT     (DQ_OSERDESE2_2_TBYTEOUT    ), //o
    .SHIFTOUT1    (DQ_OSERDESE2_2_SHIFTOUT1   ), //o
    .SHIFTOUT2    (DQ_OSERDESE2_2_SHIFTOUT2   )  //o
  );
  IDELAYE2 #(
    .HIGH_PERFORMANCE_MODE("TRUE"),
    .IDELAY_TYPE("VAR_LOAD"),
    .IDELAY_VALUE(0),
    .PIPE_SEL("FALSE"),
    .REFCLK_FREQUENCY(300.0),
    .SIGNAL_PATTERN("DATA") 
  ) dq_2_idelay (
    .CNTVALUEOUT    (dq_2_idelay_CNTVALUEOUT[4:0]  ), //o
    .DATAOUT        (dq_2_idelay_DATAOUT           ), //o
    .C              (CLKOUT3                       ), //i
    .CE             (_zz_478                       ), //i
    .CINVCTRL       (_zz_479                       ), //i
    .CNTVALUEIN     (idelayValueIn[4:0]            ), //i
    .DATAIN         (_zz_480                       ), //i
    .IDATAIN        (dq_2_buf_O                    ), //i
    .INC            (_zz_481                       ), //i
    .LD             (dq_2_idelayLoad               ), //i
    .LDPIPEEN       (_zz_482                       ), //i
    .REGRST         (_zz_483                       )  //i
  );
  ISERDESE2 #(
    .DATA_RATE("DDR"),
    .DATA_WIDTH(4),
    .INTERFACE_TYPE("NETWORKING"),
    .IOBDELAY("IFD") 
  ) dq_2_des (
    .BITSLIP         (dq_2_bitsleep              ), //i
    .CE1             (_zz_484                    ), //i
    .CE2             (_zz_485                    ), //i
    .CLK             (CLKOUT3                    ), //i
    .CLKB            (_zz_486                    ), //i
    .CLKDIV          (CLKOUT1                    ), //i
    .CLKDIVP         (_zz_487                    ), //i
    .D               (_zz_488                    ), //i
    .DDLY            (dq_2_idelay_DATAOUT        ), //i
    .DYNCLKDIVSEL    (_zz_489                    ), //i
    .DYNCLKSEL       (_zz_490                    ), //i
    .OCLK            (_zz_491                    ), //i
    .OCLKB           (_zz_492                    ), //i
    .OFB             (_zz_493                    ), //i
    .RST             (sdramCd_logic_outputReset  ), //i
    .SHIFTIN1        (_zz_494                    ), //i
    .SHIFTIN2        (_zz_495                    ), //i
    .O               (dq_2_des_O                 ), //o
    .Q1              (dq_2_des_Q1                ), //o
    .Q2              (dq_2_des_Q2                ), //o
    .Q3              (dq_2_des_Q3                ), //o
    .Q4              (dq_2_des_Q4                ), //o
    .Q5              (dq_2_des_Q5                ), //o
    .Q6              (dq_2_des_Q6                ), //o
    .Q7              (dq_2_des_Q7                ), //o
    .Q8              (dq_2_des_Q8                ), //o
    .SHIFTOUT1       (dq_2_des_SHIFTOUT1         ), //o
    .SHIFTOUT2       (dq_2_des_SHIFTOUT2         )  //o
  );
  IOBUF dq_3_buf (
    .I     (DQ_OSERDESE2_3_OQ  ), //i
    .T     (DQ_OSERDESE2_3_TQ  ), //i
    .O     (dq_3_buf_O         ), //o
    .IO    (io_sdram_DQ[3]     )  //~
  );
  OSERDESE2 #(
    .DATA_RATE_OQ("DDR"),
    .DATA_RATE_TQ("DDR"),
    .DATA_WIDTH(4),
    .SERDES_MODE("MASTER"),
    .TRISTATE_WIDTH(4) 
  ) DQ_OSERDESE2_3 (
    .CLK          (CLKOUT3                    ), //i
    .CLKDIV       (CLKOUT1                    ), //i
    .D1           (_zz_496                    ), //i
    .D2           (_zz_497                    ), //i
    .D3           (_zz_498                    ), //i
    .D4           (_zz_499                    ), //i
    .D5           (_zz_500                    ), //i
    .D6           (_zz_501                    ), //i
    .D7           (_zz_502                    ), //i
    .D8           (_zz_503                    ), //i
    .T1           (_zz_504                    ), //i
    .T2           (_zz_505                    ), //i
    .T3           (_zz_506                    ), //i
    .T4           (_zz_507                    ), //i
    .TCE          (_zz_508                    ), //i
    .OCE          (_zz_509                    ), //i
    .TBYTEIN      (_zz_510                    ), //i
    .RST          (sdramCd_logic_outputReset  ), //i
    .SHIFTIN1     (_zz_511                    ), //i
    .SHIFTIN2     (_zz_512                    ), //i
    .OQ           (DQ_OSERDESE2_3_OQ          ), //o
    .OFB          (DQ_OSERDESE2_3_OFB         ), //o
    .TQ           (DQ_OSERDESE2_3_TQ          ), //o
    .TFB          (DQ_OSERDESE2_3_TFB         ), //o
    .TBYTEOUT     (DQ_OSERDESE2_3_TBYTEOUT    ), //o
    .SHIFTOUT1    (DQ_OSERDESE2_3_SHIFTOUT1   ), //o
    .SHIFTOUT2    (DQ_OSERDESE2_3_SHIFTOUT2   )  //o
  );
  IDELAYE2 #(
    .HIGH_PERFORMANCE_MODE("TRUE"),
    .IDELAY_TYPE("VAR_LOAD"),
    .IDELAY_VALUE(0),
    .PIPE_SEL("FALSE"),
    .REFCLK_FREQUENCY(300.0),
    .SIGNAL_PATTERN("DATA") 
  ) dq_3_idelay (
    .CNTVALUEOUT    (dq_3_idelay_CNTVALUEOUT[4:0]  ), //o
    .DATAOUT        (dq_3_idelay_DATAOUT           ), //o
    .C              (CLKOUT3                       ), //i
    .CE             (_zz_513                       ), //i
    .CINVCTRL       (_zz_514                       ), //i
    .CNTVALUEIN     (idelayValueIn[4:0]            ), //i
    .DATAIN         (_zz_515                       ), //i
    .IDATAIN        (dq_3_buf_O                    ), //i
    .INC            (_zz_516                       ), //i
    .LD             (dq_3_idelayLoad               ), //i
    .LDPIPEEN       (_zz_517                       ), //i
    .REGRST         (_zz_518                       )  //i
  );
  ISERDESE2 #(
    .DATA_RATE("DDR"),
    .DATA_WIDTH(4),
    .INTERFACE_TYPE("NETWORKING"),
    .IOBDELAY("IFD") 
  ) dq_3_des (
    .BITSLIP         (dq_3_bitsleep              ), //i
    .CE1             (_zz_519                    ), //i
    .CE2             (_zz_520                    ), //i
    .CLK             (CLKOUT3                    ), //i
    .CLKB            (_zz_521                    ), //i
    .CLKDIV          (CLKOUT1                    ), //i
    .CLKDIVP         (_zz_522                    ), //i
    .D               (_zz_523                    ), //i
    .DDLY            (dq_3_idelay_DATAOUT        ), //i
    .DYNCLKDIVSEL    (_zz_524                    ), //i
    .DYNCLKSEL       (_zz_525                    ), //i
    .OCLK            (_zz_526                    ), //i
    .OCLKB           (_zz_527                    ), //i
    .OFB             (_zz_528                    ), //i
    .RST             (sdramCd_logic_outputReset  ), //i
    .SHIFTIN1        (_zz_529                    ), //i
    .SHIFTIN2        (_zz_530                    ), //i
    .O               (dq_3_des_O                 ), //o
    .Q1              (dq_3_des_Q1                ), //o
    .Q2              (dq_3_des_Q2                ), //o
    .Q3              (dq_3_des_Q3                ), //o
    .Q4              (dq_3_des_Q4                ), //o
    .Q5              (dq_3_des_Q5                ), //o
    .Q6              (dq_3_des_Q6                ), //o
    .Q7              (dq_3_des_Q7                ), //o
    .Q8              (dq_3_des_Q8                ), //o
    .SHIFTOUT1       (dq_3_des_SHIFTOUT1         ), //o
    .SHIFTOUT2       (dq_3_des_SHIFTOUT2         )  //o
  );
  IOBUF dq_4_buf (
    .I     (DQ_OSERDESE2_4_OQ  ), //i
    .T     (DQ_OSERDESE2_4_TQ  ), //i
    .O     (dq_4_buf_O         ), //o
    .IO    (io_sdram_DQ[4]     )  //~
  );
  OSERDESE2 #(
    .DATA_RATE_OQ("DDR"),
    .DATA_RATE_TQ("DDR"),
    .DATA_WIDTH(4),
    .SERDES_MODE("MASTER"),
    .TRISTATE_WIDTH(4) 
  ) DQ_OSERDESE2_4 (
    .CLK          (CLKOUT3                    ), //i
    .CLKDIV       (CLKOUT1                    ), //i
    .D1           (_zz_531                    ), //i
    .D2           (_zz_532                    ), //i
    .D3           (_zz_533                    ), //i
    .D4           (_zz_534                    ), //i
    .D5           (_zz_535                    ), //i
    .D6           (_zz_536                    ), //i
    .D7           (_zz_537                    ), //i
    .D8           (_zz_538                    ), //i
    .T1           (_zz_539                    ), //i
    .T2           (_zz_540                    ), //i
    .T3           (_zz_541                    ), //i
    .T4           (_zz_542                    ), //i
    .TCE          (_zz_543                    ), //i
    .OCE          (_zz_544                    ), //i
    .TBYTEIN      (_zz_545                    ), //i
    .RST          (sdramCd_logic_outputReset  ), //i
    .SHIFTIN1     (_zz_546                    ), //i
    .SHIFTIN2     (_zz_547                    ), //i
    .OQ           (DQ_OSERDESE2_4_OQ          ), //o
    .OFB          (DQ_OSERDESE2_4_OFB         ), //o
    .TQ           (DQ_OSERDESE2_4_TQ          ), //o
    .TFB          (DQ_OSERDESE2_4_TFB         ), //o
    .TBYTEOUT     (DQ_OSERDESE2_4_TBYTEOUT    ), //o
    .SHIFTOUT1    (DQ_OSERDESE2_4_SHIFTOUT1   ), //o
    .SHIFTOUT2    (DQ_OSERDESE2_4_SHIFTOUT2   )  //o
  );
  IDELAYE2 #(
    .HIGH_PERFORMANCE_MODE("TRUE"),
    .IDELAY_TYPE("VAR_LOAD"),
    .IDELAY_VALUE(0),
    .PIPE_SEL("FALSE"),
    .REFCLK_FREQUENCY(300.0),
    .SIGNAL_PATTERN("DATA") 
  ) dq_4_idelay (
    .CNTVALUEOUT    (dq_4_idelay_CNTVALUEOUT[4:0]  ), //o
    .DATAOUT        (dq_4_idelay_DATAOUT           ), //o
    .C              (CLKOUT3                       ), //i
    .CE             (_zz_548                       ), //i
    .CINVCTRL       (_zz_549                       ), //i
    .CNTVALUEIN     (idelayValueIn[4:0]            ), //i
    .DATAIN         (_zz_550                       ), //i
    .IDATAIN        (dq_4_buf_O                    ), //i
    .INC            (_zz_551                       ), //i
    .LD             (dq_4_idelayLoad               ), //i
    .LDPIPEEN       (_zz_552                       ), //i
    .REGRST         (_zz_553                       )  //i
  );
  ISERDESE2 #(
    .DATA_RATE("DDR"),
    .DATA_WIDTH(4),
    .INTERFACE_TYPE("NETWORKING"),
    .IOBDELAY("IFD") 
  ) dq_4_des (
    .BITSLIP         (dq_4_bitsleep              ), //i
    .CE1             (_zz_554                    ), //i
    .CE2             (_zz_555                    ), //i
    .CLK             (CLKOUT3                    ), //i
    .CLKB            (_zz_556                    ), //i
    .CLKDIV          (CLKOUT1                    ), //i
    .CLKDIVP         (_zz_557                    ), //i
    .D               (_zz_558                    ), //i
    .DDLY            (dq_4_idelay_DATAOUT        ), //i
    .DYNCLKDIVSEL    (_zz_559                    ), //i
    .DYNCLKSEL       (_zz_560                    ), //i
    .OCLK            (_zz_561                    ), //i
    .OCLKB           (_zz_562                    ), //i
    .OFB             (_zz_563                    ), //i
    .RST             (sdramCd_logic_outputReset  ), //i
    .SHIFTIN1        (_zz_564                    ), //i
    .SHIFTIN2        (_zz_565                    ), //i
    .O               (dq_4_des_O                 ), //o
    .Q1              (dq_4_des_Q1                ), //o
    .Q2              (dq_4_des_Q2                ), //o
    .Q3              (dq_4_des_Q3                ), //o
    .Q4              (dq_4_des_Q4                ), //o
    .Q5              (dq_4_des_Q5                ), //o
    .Q6              (dq_4_des_Q6                ), //o
    .Q7              (dq_4_des_Q7                ), //o
    .Q8              (dq_4_des_Q8                ), //o
    .SHIFTOUT1       (dq_4_des_SHIFTOUT1         ), //o
    .SHIFTOUT2       (dq_4_des_SHIFTOUT2         )  //o
  );
  IOBUF dq_5_buf (
    .I     (DQ_OSERDESE2_5_OQ  ), //i
    .T     (DQ_OSERDESE2_5_TQ  ), //i
    .O     (dq_5_buf_O         ), //o
    .IO    (io_sdram_DQ[5]     )  //~
  );
  OSERDESE2 #(
    .DATA_RATE_OQ("DDR"),
    .DATA_RATE_TQ("DDR"),
    .DATA_WIDTH(4),
    .SERDES_MODE("MASTER"),
    .TRISTATE_WIDTH(4) 
  ) DQ_OSERDESE2_5 (
    .CLK          (CLKOUT3                    ), //i
    .CLKDIV       (CLKOUT1                    ), //i
    .D1           (_zz_566                    ), //i
    .D2           (_zz_567                    ), //i
    .D3           (_zz_568                    ), //i
    .D4           (_zz_569                    ), //i
    .D5           (_zz_570                    ), //i
    .D6           (_zz_571                    ), //i
    .D7           (_zz_572                    ), //i
    .D8           (_zz_573                    ), //i
    .T1           (_zz_574                    ), //i
    .T2           (_zz_575                    ), //i
    .T3           (_zz_576                    ), //i
    .T4           (_zz_577                    ), //i
    .TCE          (_zz_578                    ), //i
    .OCE          (_zz_579                    ), //i
    .TBYTEIN      (_zz_580                    ), //i
    .RST          (sdramCd_logic_outputReset  ), //i
    .SHIFTIN1     (_zz_581                    ), //i
    .SHIFTIN2     (_zz_582                    ), //i
    .OQ           (DQ_OSERDESE2_5_OQ          ), //o
    .OFB          (DQ_OSERDESE2_5_OFB         ), //o
    .TQ           (DQ_OSERDESE2_5_TQ          ), //o
    .TFB          (DQ_OSERDESE2_5_TFB         ), //o
    .TBYTEOUT     (DQ_OSERDESE2_5_TBYTEOUT    ), //o
    .SHIFTOUT1    (DQ_OSERDESE2_5_SHIFTOUT1   ), //o
    .SHIFTOUT2    (DQ_OSERDESE2_5_SHIFTOUT2   )  //o
  );
  IDELAYE2 #(
    .HIGH_PERFORMANCE_MODE("TRUE"),
    .IDELAY_TYPE("VAR_LOAD"),
    .IDELAY_VALUE(0),
    .PIPE_SEL("FALSE"),
    .REFCLK_FREQUENCY(300.0),
    .SIGNAL_PATTERN("DATA") 
  ) dq_5_idelay (
    .CNTVALUEOUT    (dq_5_idelay_CNTVALUEOUT[4:0]  ), //o
    .DATAOUT        (dq_5_idelay_DATAOUT           ), //o
    .C              (CLKOUT3                       ), //i
    .CE             (_zz_583                       ), //i
    .CINVCTRL       (_zz_584                       ), //i
    .CNTVALUEIN     (idelayValueIn[4:0]            ), //i
    .DATAIN         (_zz_585                       ), //i
    .IDATAIN        (dq_5_buf_O                    ), //i
    .INC            (_zz_586                       ), //i
    .LD             (dq_5_idelayLoad               ), //i
    .LDPIPEEN       (_zz_587                       ), //i
    .REGRST         (_zz_588                       )  //i
  );
  ISERDESE2 #(
    .DATA_RATE("DDR"),
    .DATA_WIDTH(4),
    .INTERFACE_TYPE("NETWORKING"),
    .IOBDELAY("IFD") 
  ) dq_5_des (
    .BITSLIP         (dq_5_bitsleep              ), //i
    .CE1             (_zz_589                    ), //i
    .CE2             (_zz_590                    ), //i
    .CLK             (CLKOUT3                    ), //i
    .CLKB            (_zz_591                    ), //i
    .CLKDIV          (CLKOUT1                    ), //i
    .CLKDIVP         (_zz_592                    ), //i
    .D               (_zz_593                    ), //i
    .DDLY            (dq_5_idelay_DATAOUT        ), //i
    .DYNCLKDIVSEL    (_zz_594                    ), //i
    .DYNCLKSEL       (_zz_595                    ), //i
    .OCLK            (_zz_596                    ), //i
    .OCLKB           (_zz_597                    ), //i
    .OFB             (_zz_598                    ), //i
    .RST             (sdramCd_logic_outputReset  ), //i
    .SHIFTIN1        (_zz_599                    ), //i
    .SHIFTIN2        (_zz_600                    ), //i
    .O               (dq_5_des_O                 ), //o
    .Q1              (dq_5_des_Q1                ), //o
    .Q2              (dq_5_des_Q2                ), //o
    .Q3              (dq_5_des_Q3                ), //o
    .Q4              (dq_5_des_Q4                ), //o
    .Q5              (dq_5_des_Q5                ), //o
    .Q6              (dq_5_des_Q6                ), //o
    .Q7              (dq_5_des_Q7                ), //o
    .Q8              (dq_5_des_Q8                ), //o
    .SHIFTOUT1       (dq_5_des_SHIFTOUT1         ), //o
    .SHIFTOUT2       (dq_5_des_SHIFTOUT2         )  //o
  );
  IOBUF dq_6_buf (
    .I     (DQ_OSERDESE2_6_OQ  ), //i
    .T     (DQ_OSERDESE2_6_TQ  ), //i
    .O     (dq_6_buf_O         ), //o
    .IO    (io_sdram_DQ[6]     )  //~
  );
  OSERDESE2 #(
    .DATA_RATE_OQ("DDR"),
    .DATA_RATE_TQ("DDR"),
    .DATA_WIDTH(4),
    .SERDES_MODE("MASTER"),
    .TRISTATE_WIDTH(4) 
  ) DQ_OSERDESE2_6 (
    .CLK          (CLKOUT3                    ), //i
    .CLKDIV       (CLKOUT1                    ), //i
    .D1           (_zz_601                    ), //i
    .D2           (_zz_602                    ), //i
    .D3           (_zz_603                    ), //i
    .D4           (_zz_604                    ), //i
    .D5           (_zz_605                    ), //i
    .D6           (_zz_606                    ), //i
    .D7           (_zz_607                    ), //i
    .D8           (_zz_608                    ), //i
    .T1           (_zz_609                    ), //i
    .T2           (_zz_610                    ), //i
    .T3           (_zz_611                    ), //i
    .T4           (_zz_612                    ), //i
    .TCE          (_zz_613                    ), //i
    .OCE          (_zz_614                    ), //i
    .TBYTEIN      (_zz_615                    ), //i
    .RST          (sdramCd_logic_outputReset  ), //i
    .SHIFTIN1     (_zz_616                    ), //i
    .SHIFTIN2     (_zz_617                    ), //i
    .OQ           (DQ_OSERDESE2_6_OQ          ), //o
    .OFB          (DQ_OSERDESE2_6_OFB         ), //o
    .TQ           (DQ_OSERDESE2_6_TQ          ), //o
    .TFB          (DQ_OSERDESE2_6_TFB         ), //o
    .TBYTEOUT     (DQ_OSERDESE2_6_TBYTEOUT    ), //o
    .SHIFTOUT1    (DQ_OSERDESE2_6_SHIFTOUT1   ), //o
    .SHIFTOUT2    (DQ_OSERDESE2_6_SHIFTOUT2   )  //o
  );
  IDELAYE2 #(
    .HIGH_PERFORMANCE_MODE("TRUE"),
    .IDELAY_TYPE("VAR_LOAD"),
    .IDELAY_VALUE(0),
    .PIPE_SEL("FALSE"),
    .REFCLK_FREQUENCY(300.0),
    .SIGNAL_PATTERN("DATA") 
  ) dq_6_idelay (
    .CNTVALUEOUT    (dq_6_idelay_CNTVALUEOUT[4:0]  ), //o
    .DATAOUT        (dq_6_idelay_DATAOUT           ), //o
    .C              (CLKOUT3                       ), //i
    .CE             (_zz_618                       ), //i
    .CINVCTRL       (_zz_619                       ), //i
    .CNTVALUEIN     (idelayValueIn[4:0]            ), //i
    .DATAIN         (_zz_620                       ), //i
    .IDATAIN        (dq_6_buf_O                    ), //i
    .INC            (_zz_621                       ), //i
    .LD             (dq_6_idelayLoad               ), //i
    .LDPIPEEN       (_zz_622                       ), //i
    .REGRST         (_zz_623                       )  //i
  );
  ISERDESE2 #(
    .DATA_RATE("DDR"),
    .DATA_WIDTH(4),
    .INTERFACE_TYPE("NETWORKING"),
    .IOBDELAY("IFD") 
  ) dq_6_des (
    .BITSLIP         (dq_6_bitsleep              ), //i
    .CE1             (_zz_624                    ), //i
    .CE2             (_zz_625                    ), //i
    .CLK             (CLKOUT3                    ), //i
    .CLKB            (_zz_626                    ), //i
    .CLKDIV          (CLKOUT1                    ), //i
    .CLKDIVP         (_zz_627                    ), //i
    .D               (_zz_628                    ), //i
    .DDLY            (dq_6_idelay_DATAOUT        ), //i
    .DYNCLKDIVSEL    (_zz_629                    ), //i
    .DYNCLKSEL       (_zz_630                    ), //i
    .OCLK            (_zz_631                    ), //i
    .OCLKB           (_zz_632                    ), //i
    .OFB             (_zz_633                    ), //i
    .RST             (sdramCd_logic_outputReset  ), //i
    .SHIFTIN1        (_zz_634                    ), //i
    .SHIFTIN2        (_zz_635                    ), //i
    .O               (dq_6_des_O                 ), //o
    .Q1              (dq_6_des_Q1                ), //o
    .Q2              (dq_6_des_Q2                ), //o
    .Q3              (dq_6_des_Q3                ), //o
    .Q4              (dq_6_des_Q4                ), //o
    .Q5              (dq_6_des_Q5                ), //o
    .Q6              (dq_6_des_Q6                ), //o
    .Q7              (dq_6_des_Q7                ), //o
    .Q8              (dq_6_des_Q8                ), //o
    .SHIFTOUT1       (dq_6_des_SHIFTOUT1         ), //o
    .SHIFTOUT2       (dq_6_des_SHIFTOUT2         )  //o
  );
  IOBUF dq_7_buf (
    .I     (DQ_OSERDESE2_7_OQ  ), //i
    .T     (DQ_OSERDESE2_7_TQ  ), //i
    .O     (dq_7_buf_O         ), //o
    .IO    (io_sdram_DQ[7]     )  //~
  );
  OSERDESE2 #(
    .DATA_RATE_OQ("DDR"),
    .DATA_RATE_TQ("DDR"),
    .DATA_WIDTH(4),
    .SERDES_MODE("MASTER"),
    .TRISTATE_WIDTH(4) 
  ) DQ_OSERDESE2_7 (
    .CLK          (CLKOUT3                    ), //i
    .CLKDIV       (CLKOUT1                    ), //i
    .D1           (_zz_636                    ), //i
    .D2           (_zz_637                    ), //i
    .D3           (_zz_638                    ), //i
    .D4           (_zz_639                    ), //i
    .D5           (_zz_640                    ), //i
    .D6           (_zz_641                    ), //i
    .D7           (_zz_642                    ), //i
    .D8           (_zz_643                    ), //i
    .T1           (_zz_644                    ), //i
    .T2           (_zz_645                    ), //i
    .T3           (_zz_646                    ), //i
    .T4           (_zz_647                    ), //i
    .TCE          (_zz_648                    ), //i
    .OCE          (_zz_649                    ), //i
    .TBYTEIN      (_zz_650                    ), //i
    .RST          (sdramCd_logic_outputReset  ), //i
    .SHIFTIN1     (_zz_651                    ), //i
    .SHIFTIN2     (_zz_652                    ), //i
    .OQ           (DQ_OSERDESE2_7_OQ          ), //o
    .OFB          (DQ_OSERDESE2_7_OFB         ), //o
    .TQ           (DQ_OSERDESE2_7_TQ          ), //o
    .TFB          (DQ_OSERDESE2_7_TFB         ), //o
    .TBYTEOUT     (DQ_OSERDESE2_7_TBYTEOUT    ), //o
    .SHIFTOUT1    (DQ_OSERDESE2_7_SHIFTOUT1   ), //o
    .SHIFTOUT2    (DQ_OSERDESE2_7_SHIFTOUT2   )  //o
  );
  IDELAYE2 #(
    .HIGH_PERFORMANCE_MODE("TRUE"),
    .IDELAY_TYPE("VAR_LOAD"),
    .IDELAY_VALUE(0),
    .PIPE_SEL("FALSE"),
    .REFCLK_FREQUENCY(300.0),
    .SIGNAL_PATTERN("DATA") 
  ) dq_7_idelay (
    .CNTVALUEOUT    (dq_7_idelay_CNTVALUEOUT[4:0]  ), //o
    .DATAOUT        (dq_7_idelay_DATAOUT           ), //o
    .C              (CLKOUT3                       ), //i
    .CE             (_zz_653                       ), //i
    .CINVCTRL       (_zz_654                       ), //i
    .CNTVALUEIN     (idelayValueIn[4:0]            ), //i
    .DATAIN         (_zz_655                       ), //i
    .IDATAIN        (dq_7_buf_O                    ), //i
    .INC            (_zz_656                       ), //i
    .LD             (dq_7_idelayLoad               ), //i
    .LDPIPEEN       (_zz_657                       ), //i
    .REGRST         (_zz_658                       )  //i
  );
  ISERDESE2 #(
    .DATA_RATE("DDR"),
    .DATA_WIDTH(4),
    .INTERFACE_TYPE("NETWORKING"),
    .IOBDELAY("IFD") 
  ) dq_7_des (
    .BITSLIP         (dq_7_bitsleep              ), //i
    .CE1             (_zz_659                    ), //i
    .CE2             (_zz_660                    ), //i
    .CLK             (CLKOUT3                    ), //i
    .CLKB            (_zz_661                    ), //i
    .CLKDIV          (CLKOUT1                    ), //i
    .CLKDIVP         (_zz_662                    ), //i
    .D               (_zz_663                    ), //i
    .DDLY            (dq_7_idelay_DATAOUT        ), //i
    .DYNCLKDIVSEL    (_zz_664                    ), //i
    .DYNCLKSEL       (_zz_665                    ), //i
    .OCLK            (_zz_666                    ), //i
    .OCLKB           (_zz_667                    ), //i
    .OFB             (_zz_668                    ), //i
    .RST             (sdramCd_logic_outputReset  ), //i
    .SHIFTIN1        (_zz_669                    ), //i
    .SHIFTIN2        (_zz_670                    ), //i
    .O               (dq_7_des_O                 ), //o
    .Q1              (dq_7_des_Q1                ), //o
    .Q2              (dq_7_des_Q2                ), //o
    .Q3              (dq_7_des_Q3                ), //o
    .Q4              (dq_7_des_Q4                ), //o
    .Q5              (dq_7_des_Q5                ), //o
    .Q6              (dq_7_des_Q6                ), //o
    .Q7              (dq_7_des_Q7                ), //o
    .Q8              (dq_7_des_Q8                ), //o
    .SHIFTOUT1       (dq_7_des_SHIFTOUT1         ), //o
    .SHIFTOUT2       (dq_7_des_SHIFTOUT2         )  //o
  );
  IOBUF dq_8_buf (
    .I     (DQ_OSERDESE2_8_OQ  ), //i
    .T     (DQ_OSERDESE2_8_TQ  ), //i
    .O     (dq_8_buf_O         ), //o
    .IO    (io_sdram_DQ[8]     )  //~
  );
  OSERDESE2 #(
    .DATA_RATE_OQ("DDR"),
    .DATA_RATE_TQ("DDR"),
    .DATA_WIDTH(4),
    .SERDES_MODE("MASTER"),
    .TRISTATE_WIDTH(4) 
  ) DQ_OSERDESE2_8 (
    .CLK          (CLKOUT3                    ), //i
    .CLKDIV       (CLKOUT1                    ), //i
    .D1           (_zz_671                    ), //i
    .D2           (_zz_672                    ), //i
    .D3           (_zz_673                    ), //i
    .D4           (_zz_674                    ), //i
    .D5           (_zz_675                    ), //i
    .D6           (_zz_676                    ), //i
    .D7           (_zz_677                    ), //i
    .D8           (_zz_678                    ), //i
    .T1           (_zz_679                    ), //i
    .T2           (_zz_680                    ), //i
    .T3           (_zz_681                    ), //i
    .T4           (_zz_682                    ), //i
    .TCE          (_zz_683                    ), //i
    .OCE          (_zz_684                    ), //i
    .TBYTEIN      (_zz_685                    ), //i
    .RST          (sdramCd_logic_outputReset  ), //i
    .SHIFTIN1     (_zz_686                    ), //i
    .SHIFTIN2     (_zz_687                    ), //i
    .OQ           (DQ_OSERDESE2_8_OQ          ), //o
    .OFB          (DQ_OSERDESE2_8_OFB         ), //o
    .TQ           (DQ_OSERDESE2_8_TQ          ), //o
    .TFB          (DQ_OSERDESE2_8_TFB         ), //o
    .TBYTEOUT     (DQ_OSERDESE2_8_TBYTEOUT    ), //o
    .SHIFTOUT1    (DQ_OSERDESE2_8_SHIFTOUT1   ), //o
    .SHIFTOUT2    (DQ_OSERDESE2_8_SHIFTOUT2   )  //o
  );
  IDELAYE2 #(
    .HIGH_PERFORMANCE_MODE("TRUE"),
    .IDELAY_TYPE("VAR_LOAD"),
    .IDELAY_VALUE(0),
    .PIPE_SEL("FALSE"),
    .REFCLK_FREQUENCY(300.0),
    .SIGNAL_PATTERN("DATA") 
  ) dq_8_idelay (
    .CNTVALUEOUT    (dq_8_idelay_CNTVALUEOUT[4:0]  ), //o
    .DATAOUT        (dq_8_idelay_DATAOUT           ), //o
    .C              (CLKOUT3                       ), //i
    .CE             (_zz_688                       ), //i
    .CINVCTRL       (_zz_689                       ), //i
    .CNTVALUEIN     (idelayValueIn[4:0]            ), //i
    .DATAIN         (_zz_690                       ), //i
    .IDATAIN        (dq_8_buf_O                    ), //i
    .INC            (_zz_691                       ), //i
    .LD             (dq_8_idelayLoad               ), //i
    .LDPIPEEN       (_zz_692                       ), //i
    .REGRST         (_zz_693                       )  //i
  );
  ISERDESE2 #(
    .DATA_RATE("DDR"),
    .DATA_WIDTH(4),
    .INTERFACE_TYPE("NETWORKING"),
    .IOBDELAY("IFD") 
  ) dq_8_des (
    .BITSLIP         (dq_8_bitsleep              ), //i
    .CE1             (_zz_694                    ), //i
    .CE2             (_zz_695                    ), //i
    .CLK             (CLKOUT3                    ), //i
    .CLKB            (_zz_696                    ), //i
    .CLKDIV          (CLKOUT1                    ), //i
    .CLKDIVP         (_zz_697                    ), //i
    .D               (_zz_698                    ), //i
    .DDLY            (dq_8_idelay_DATAOUT        ), //i
    .DYNCLKDIVSEL    (_zz_699                    ), //i
    .DYNCLKSEL       (_zz_700                    ), //i
    .OCLK            (_zz_701                    ), //i
    .OCLKB           (_zz_702                    ), //i
    .OFB             (_zz_703                    ), //i
    .RST             (sdramCd_logic_outputReset  ), //i
    .SHIFTIN1        (_zz_704                    ), //i
    .SHIFTIN2        (_zz_705                    ), //i
    .O               (dq_8_des_O                 ), //o
    .Q1              (dq_8_des_Q1                ), //o
    .Q2              (dq_8_des_Q2                ), //o
    .Q3              (dq_8_des_Q3                ), //o
    .Q4              (dq_8_des_Q4                ), //o
    .Q5              (dq_8_des_Q5                ), //o
    .Q6              (dq_8_des_Q6                ), //o
    .Q7              (dq_8_des_Q7                ), //o
    .Q8              (dq_8_des_Q8                ), //o
    .SHIFTOUT1       (dq_8_des_SHIFTOUT1         ), //o
    .SHIFTOUT2       (dq_8_des_SHIFTOUT2         )  //o
  );
  IOBUF dq_9_buf (
    .I     (DQ_OSERDESE2_9_OQ  ), //i
    .T     (DQ_OSERDESE2_9_TQ  ), //i
    .O     (dq_9_buf_O         ), //o
    .IO    (io_sdram_DQ[9]     )  //~
  );
  OSERDESE2 #(
    .DATA_RATE_OQ("DDR"),
    .DATA_RATE_TQ("DDR"),
    .DATA_WIDTH(4),
    .SERDES_MODE("MASTER"),
    .TRISTATE_WIDTH(4) 
  ) DQ_OSERDESE2_9 (
    .CLK          (CLKOUT3                    ), //i
    .CLKDIV       (CLKOUT1                    ), //i
    .D1           (_zz_706                    ), //i
    .D2           (_zz_707                    ), //i
    .D3           (_zz_708                    ), //i
    .D4           (_zz_709                    ), //i
    .D5           (_zz_710                    ), //i
    .D6           (_zz_711                    ), //i
    .D7           (_zz_712                    ), //i
    .D8           (_zz_713                    ), //i
    .T1           (_zz_714                    ), //i
    .T2           (_zz_715                    ), //i
    .T3           (_zz_716                    ), //i
    .T4           (_zz_717                    ), //i
    .TCE          (_zz_718                    ), //i
    .OCE          (_zz_719                    ), //i
    .TBYTEIN      (_zz_720                    ), //i
    .RST          (sdramCd_logic_outputReset  ), //i
    .SHIFTIN1     (_zz_721                    ), //i
    .SHIFTIN2     (_zz_722                    ), //i
    .OQ           (DQ_OSERDESE2_9_OQ          ), //o
    .OFB          (DQ_OSERDESE2_9_OFB         ), //o
    .TQ           (DQ_OSERDESE2_9_TQ          ), //o
    .TFB          (DQ_OSERDESE2_9_TFB         ), //o
    .TBYTEOUT     (DQ_OSERDESE2_9_TBYTEOUT    ), //o
    .SHIFTOUT1    (DQ_OSERDESE2_9_SHIFTOUT1   ), //o
    .SHIFTOUT2    (DQ_OSERDESE2_9_SHIFTOUT2   )  //o
  );
  IDELAYE2 #(
    .HIGH_PERFORMANCE_MODE("TRUE"),
    .IDELAY_TYPE("VAR_LOAD"),
    .IDELAY_VALUE(0),
    .PIPE_SEL("FALSE"),
    .REFCLK_FREQUENCY(300.0),
    .SIGNAL_PATTERN("DATA") 
  ) dq_9_idelay (
    .CNTVALUEOUT    (dq_9_idelay_CNTVALUEOUT[4:0]  ), //o
    .DATAOUT        (dq_9_idelay_DATAOUT           ), //o
    .C              (CLKOUT3                       ), //i
    .CE             (_zz_723                       ), //i
    .CINVCTRL       (_zz_724                       ), //i
    .CNTVALUEIN     (idelayValueIn[4:0]            ), //i
    .DATAIN         (_zz_725                       ), //i
    .IDATAIN        (dq_9_buf_O                    ), //i
    .INC            (_zz_726                       ), //i
    .LD             (dq_9_idelayLoad               ), //i
    .LDPIPEEN       (_zz_727                       ), //i
    .REGRST         (_zz_728                       )  //i
  );
  ISERDESE2 #(
    .DATA_RATE("DDR"),
    .DATA_WIDTH(4),
    .INTERFACE_TYPE("NETWORKING"),
    .IOBDELAY("IFD") 
  ) dq_9_des (
    .BITSLIP         (dq_9_bitsleep              ), //i
    .CE1             (_zz_729                    ), //i
    .CE2             (_zz_730                    ), //i
    .CLK             (CLKOUT3                    ), //i
    .CLKB            (_zz_731                    ), //i
    .CLKDIV          (CLKOUT1                    ), //i
    .CLKDIVP         (_zz_732                    ), //i
    .D               (_zz_733                    ), //i
    .DDLY            (dq_9_idelay_DATAOUT        ), //i
    .DYNCLKDIVSEL    (_zz_734                    ), //i
    .DYNCLKSEL       (_zz_735                    ), //i
    .OCLK            (_zz_736                    ), //i
    .OCLKB           (_zz_737                    ), //i
    .OFB             (_zz_738                    ), //i
    .RST             (sdramCd_logic_outputReset  ), //i
    .SHIFTIN1        (_zz_739                    ), //i
    .SHIFTIN2        (_zz_740                    ), //i
    .O               (dq_9_des_O                 ), //o
    .Q1              (dq_9_des_Q1                ), //o
    .Q2              (dq_9_des_Q2                ), //o
    .Q3              (dq_9_des_Q3                ), //o
    .Q4              (dq_9_des_Q4                ), //o
    .Q5              (dq_9_des_Q5                ), //o
    .Q6              (dq_9_des_Q6                ), //o
    .Q7              (dq_9_des_Q7                ), //o
    .Q8              (dq_9_des_Q8                ), //o
    .SHIFTOUT1       (dq_9_des_SHIFTOUT1         ), //o
    .SHIFTOUT2       (dq_9_des_SHIFTOUT2         )  //o
  );
  IOBUF dq_10_buf (
    .I     (DQ_OSERDESE2_10_OQ  ), //i
    .T     (DQ_OSERDESE2_10_TQ  ), //i
    .O     (dq_10_buf_O         ), //o
    .IO    (io_sdram_DQ[10]     )  //~
  );
  OSERDESE2 #(
    .DATA_RATE_OQ("DDR"),
    .DATA_RATE_TQ("DDR"),
    .DATA_WIDTH(4),
    .SERDES_MODE("MASTER"),
    .TRISTATE_WIDTH(4) 
  ) DQ_OSERDESE2_10 (
    .CLK          (CLKOUT3                    ), //i
    .CLKDIV       (CLKOUT1                    ), //i
    .D1           (_zz_741                    ), //i
    .D2           (_zz_742                    ), //i
    .D3           (_zz_743                    ), //i
    .D4           (_zz_744                    ), //i
    .D5           (_zz_745                    ), //i
    .D6           (_zz_746                    ), //i
    .D7           (_zz_747                    ), //i
    .D8           (_zz_748                    ), //i
    .T1           (_zz_749                    ), //i
    .T2           (_zz_750                    ), //i
    .T3           (_zz_751                    ), //i
    .T4           (_zz_752                    ), //i
    .TCE          (_zz_753                    ), //i
    .OCE          (_zz_754                    ), //i
    .TBYTEIN      (_zz_755                    ), //i
    .RST          (sdramCd_logic_outputReset  ), //i
    .SHIFTIN1     (_zz_756                    ), //i
    .SHIFTIN2     (_zz_757                    ), //i
    .OQ           (DQ_OSERDESE2_10_OQ         ), //o
    .OFB          (DQ_OSERDESE2_10_OFB        ), //o
    .TQ           (DQ_OSERDESE2_10_TQ         ), //o
    .TFB          (DQ_OSERDESE2_10_TFB        ), //o
    .TBYTEOUT     (DQ_OSERDESE2_10_TBYTEOUT   ), //o
    .SHIFTOUT1    (DQ_OSERDESE2_10_SHIFTOUT1  ), //o
    .SHIFTOUT2    (DQ_OSERDESE2_10_SHIFTOUT2  )  //o
  );
  IDELAYE2 #(
    .HIGH_PERFORMANCE_MODE("TRUE"),
    .IDELAY_TYPE("VAR_LOAD"),
    .IDELAY_VALUE(0),
    .PIPE_SEL("FALSE"),
    .REFCLK_FREQUENCY(300.0),
    .SIGNAL_PATTERN("DATA") 
  ) dq_10_idelay (
    .CNTVALUEOUT    (dq_10_idelay_CNTVALUEOUT[4:0]  ), //o
    .DATAOUT        (dq_10_idelay_DATAOUT           ), //o
    .C              (CLKOUT3                        ), //i
    .CE             (_zz_758                        ), //i
    .CINVCTRL       (_zz_759                        ), //i
    .CNTVALUEIN     (idelayValueIn[4:0]             ), //i
    .DATAIN         (_zz_760                        ), //i
    .IDATAIN        (dq_10_buf_O                    ), //i
    .INC            (_zz_761                        ), //i
    .LD             (dq_10_idelayLoad               ), //i
    .LDPIPEEN       (_zz_762                        ), //i
    .REGRST         (_zz_763                        )  //i
  );
  ISERDESE2 #(
    .DATA_RATE("DDR"),
    .DATA_WIDTH(4),
    .INTERFACE_TYPE("NETWORKING"),
    .IOBDELAY("IFD") 
  ) dq_10_des (
    .BITSLIP         (dq_10_bitsleep             ), //i
    .CE1             (_zz_764                    ), //i
    .CE2             (_zz_765                    ), //i
    .CLK             (CLKOUT3                    ), //i
    .CLKB            (_zz_766                    ), //i
    .CLKDIV          (CLKOUT1                    ), //i
    .CLKDIVP         (_zz_767                    ), //i
    .D               (_zz_768                    ), //i
    .DDLY            (dq_10_idelay_DATAOUT       ), //i
    .DYNCLKDIVSEL    (_zz_769                    ), //i
    .DYNCLKSEL       (_zz_770                    ), //i
    .OCLK            (_zz_771                    ), //i
    .OCLKB           (_zz_772                    ), //i
    .OFB             (_zz_773                    ), //i
    .RST             (sdramCd_logic_outputReset  ), //i
    .SHIFTIN1        (_zz_774                    ), //i
    .SHIFTIN2        (_zz_775                    ), //i
    .O               (dq_10_des_O                ), //o
    .Q1              (dq_10_des_Q1               ), //o
    .Q2              (dq_10_des_Q2               ), //o
    .Q3              (dq_10_des_Q3               ), //o
    .Q4              (dq_10_des_Q4               ), //o
    .Q5              (dq_10_des_Q5               ), //o
    .Q6              (dq_10_des_Q6               ), //o
    .Q7              (dq_10_des_Q7               ), //o
    .Q8              (dq_10_des_Q8               ), //o
    .SHIFTOUT1       (dq_10_des_SHIFTOUT1        ), //o
    .SHIFTOUT2       (dq_10_des_SHIFTOUT2        )  //o
  );
  IOBUF dq_11_buf (
    .I     (DQ_OSERDESE2_11_OQ  ), //i
    .T     (DQ_OSERDESE2_11_TQ  ), //i
    .O     (dq_11_buf_O         ), //o
    .IO    (io_sdram_DQ[11]     )  //~
  );
  OSERDESE2 #(
    .DATA_RATE_OQ("DDR"),
    .DATA_RATE_TQ("DDR"),
    .DATA_WIDTH(4),
    .SERDES_MODE("MASTER"),
    .TRISTATE_WIDTH(4) 
  ) DQ_OSERDESE2_11 (
    .CLK          (CLKOUT3                    ), //i
    .CLKDIV       (CLKOUT1                    ), //i
    .D1           (_zz_776                    ), //i
    .D2           (_zz_777                    ), //i
    .D3           (_zz_778                    ), //i
    .D4           (_zz_779                    ), //i
    .D5           (_zz_780                    ), //i
    .D6           (_zz_781                    ), //i
    .D7           (_zz_782                    ), //i
    .D8           (_zz_783                    ), //i
    .T1           (_zz_784                    ), //i
    .T2           (_zz_785                    ), //i
    .T3           (_zz_786                    ), //i
    .T4           (_zz_787                    ), //i
    .TCE          (_zz_788                    ), //i
    .OCE          (_zz_789                    ), //i
    .TBYTEIN      (_zz_790                    ), //i
    .RST          (sdramCd_logic_outputReset  ), //i
    .SHIFTIN1     (_zz_791                    ), //i
    .SHIFTIN2     (_zz_792                    ), //i
    .OQ           (DQ_OSERDESE2_11_OQ         ), //o
    .OFB          (DQ_OSERDESE2_11_OFB        ), //o
    .TQ           (DQ_OSERDESE2_11_TQ         ), //o
    .TFB          (DQ_OSERDESE2_11_TFB        ), //o
    .TBYTEOUT     (DQ_OSERDESE2_11_TBYTEOUT   ), //o
    .SHIFTOUT1    (DQ_OSERDESE2_11_SHIFTOUT1  ), //o
    .SHIFTOUT2    (DQ_OSERDESE2_11_SHIFTOUT2  )  //o
  );
  IDELAYE2 #(
    .HIGH_PERFORMANCE_MODE("TRUE"),
    .IDELAY_TYPE("VAR_LOAD"),
    .IDELAY_VALUE(0),
    .PIPE_SEL("FALSE"),
    .REFCLK_FREQUENCY(300.0),
    .SIGNAL_PATTERN("DATA") 
  ) dq_11_idelay (
    .CNTVALUEOUT    (dq_11_idelay_CNTVALUEOUT[4:0]  ), //o
    .DATAOUT        (dq_11_idelay_DATAOUT           ), //o
    .C              (CLKOUT3                        ), //i
    .CE             (_zz_793                        ), //i
    .CINVCTRL       (_zz_794                        ), //i
    .CNTVALUEIN     (idelayValueIn[4:0]             ), //i
    .DATAIN         (_zz_795                        ), //i
    .IDATAIN        (dq_11_buf_O                    ), //i
    .INC            (_zz_796                        ), //i
    .LD             (dq_11_idelayLoad               ), //i
    .LDPIPEEN       (_zz_797                        ), //i
    .REGRST         (_zz_798                        )  //i
  );
  ISERDESE2 #(
    .DATA_RATE("DDR"),
    .DATA_WIDTH(4),
    .INTERFACE_TYPE("NETWORKING"),
    .IOBDELAY("IFD") 
  ) dq_11_des (
    .BITSLIP         (dq_11_bitsleep             ), //i
    .CE1             (_zz_799                    ), //i
    .CE2             (_zz_800                    ), //i
    .CLK             (CLKOUT3                    ), //i
    .CLKB            (_zz_801                    ), //i
    .CLKDIV          (CLKOUT1                    ), //i
    .CLKDIVP         (_zz_802                    ), //i
    .D               (_zz_803                    ), //i
    .DDLY            (dq_11_idelay_DATAOUT       ), //i
    .DYNCLKDIVSEL    (_zz_804                    ), //i
    .DYNCLKSEL       (_zz_805                    ), //i
    .OCLK            (_zz_806                    ), //i
    .OCLKB           (_zz_807                    ), //i
    .OFB             (_zz_808                    ), //i
    .RST             (sdramCd_logic_outputReset  ), //i
    .SHIFTIN1        (_zz_809                    ), //i
    .SHIFTIN2        (_zz_810                    ), //i
    .O               (dq_11_des_O                ), //o
    .Q1              (dq_11_des_Q1               ), //o
    .Q2              (dq_11_des_Q2               ), //o
    .Q3              (dq_11_des_Q3               ), //o
    .Q4              (dq_11_des_Q4               ), //o
    .Q5              (dq_11_des_Q5               ), //o
    .Q6              (dq_11_des_Q6               ), //o
    .Q7              (dq_11_des_Q7               ), //o
    .Q8              (dq_11_des_Q8               ), //o
    .SHIFTOUT1       (dq_11_des_SHIFTOUT1        ), //o
    .SHIFTOUT2       (dq_11_des_SHIFTOUT2        )  //o
  );
  IOBUF dq_12_buf (
    .I     (DQ_OSERDESE2_12_OQ  ), //i
    .T     (DQ_OSERDESE2_12_TQ  ), //i
    .O     (dq_12_buf_O         ), //o
    .IO    (io_sdram_DQ[12]     )  //~
  );
  OSERDESE2 #(
    .DATA_RATE_OQ("DDR"),
    .DATA_RATE_TQ("DDR"),
    .DATA_WIDTH(4),
    .SERDES_MODE("MASTER"),
    .TRISTATE_WIDTH(4) 
  ) DQ_OSERDESE2_12 (
    .CLK          (CLKOUT3                    ), //i
    .CLKDIV       (CLKOUT1                    ), //i
    .D1           (_zz_811                    ), //i
    .D2           (_zz_812                    ), //i
    .D3           (_zz_813                    ), //i
    .D4           (_zz_814                    ), //i
    .D5           (_zz_815                    ), //i
    .D6           (_zz_816                    ), //i
    .D7           (_zz_817                    ), //i
    .D8           (_zz_818                    ), //i
    .T1           (_zz_819                    ), //i
    .T2           (_zz_820                    ), //i
    .T3           (_zz_821                    ), //i
    .T4           (_zz_822                    ), //i
    .TCE          (_zz_823                    ), //i
    .OCE          (_zz_824                    ), //i
    .TBYTEIN      (_zz_825                    ), //i
    .RST          (sdramCd_logic_outputReset  ), //i
    .SHIFTIN1     (_zz_826                    ), //i
    .SHIFTIN2     (_zz_827                    ), //i
    .OQ           (DQ_OSERDESE2_12_OQ         ), //o
    .OFB          (DQ_OSERDESE2_12_OFB        ), //o
    .TQ           (DQ_OSERDESE2_12_TQ         ), //o
    .TFB          (DQ_OSERDESE2_12_TFB        ), //o
    .TBYTEOUT     (DQ_OSERDESE2_12_TBYTEOUT   ), //o
    .SHIFTOUT1    (DQ_OSERDESE2_12_SHIFTOUT1  ), //o
    .SHIFTOUT2    (DQ_OSERDESE2_12_SHIFTOUT2  )  //o
  );
  IDELAYE2 #(
    .HIGH_PERFORMANCE_MODE("TRUE"),
    .IDELAY_TYPE("VAR_LOAD"),
    .IDELAY_VALUE(0),
    .PIPE_SEL("FALSE"),
    .REFCLK_FREQUENCY(300.0),
    .SIGNAL_PATTERN("DATA") 
  ) dq_12_idelay (
    .CNTVALUEOUT    (dq_12_idelay_CNTVALUEOUT[4:0]  ), //o
    .DATAOUT        (dq_12_idelay_DATAOUT           ), //o
    .C              (CLKOUT3                        ), //i
    .CE             (_zz_828                        ), //i
    .CINVCTRL       (_zz_829                        ), //i
    .CNTVALUEIN     (idelayValueIn[4:0]             ), //i
    .DATAIN         (_zz_830                        ), //i
    .IDATAIN        (dq_12_buf_O                    ), //i
    .INC            (_zz_831                        ), //i
    .LD             (dq_12_idelayLoad               ), //i
    .LDPIPEEN       (_zz_832                        ), //i
    .REGRST         (_zz_833                        )  //i
  );
  ISERDESE2 #(
    .DATA_RATE("DDR"),
    .DATA_WIDTH(4),
    .INTERFACE_TYPE("NETWORKING"),
    .IOBDELAY("IFD") 
  ) dq_12_des (
    .BITSLIP         (dq_12_bitsleep             ), //i
    .CE1             (_zz_834                    ), //i
    .CE2             (_zz_835                    ), //i
    .CLK             (CLKOUT3                    ), //i
    .CLKB            (_zz_836                    ), //i
    .CLKDIV          (CLKOUT1                    ), //i
    .CLKDIVP         (_zz_837                    ), //i
    .D               (_zz_838                    ), //i
    .DDLY            (dq_12_idelay_DATAOUT       ), //i
    .DYNCLKDIVSEL    (_zz_839                    ), //i
    .DYNCLKSEL       (_zz_840                    ), //i
    .OCLK            (_zz_841                    ), //i
    .OCLKB           (_zz_842                    ), //i
    .OFB             (_zz_843                    ), //i
    .RST             (sdramCd_logic_outputReset  ), //i
    .SHIFTIN1        (_zz_844                    ), //i
    .SHIFTIN2        (_zz_845                    ), //i
    .O               (dq_12_des_O                ), //o
    .Q1              (dq_12_des_Q1               ), //o
    .Q2              (dq_12_des_Q2               ), //o
    .Q3              (dq_12_des_Q3               ), //o
    .Q4              (dq_12_des_Q4               ), //o
    .Q5              (dq_12_des_Q5               ), //o
    .Q6              (dq_12_des_Q6               ), //o
    .Q7              (dq_12_des_Q7               ), //o
    .Q8              (dq_12_des_Q8               ), //o
    .SHIFTOUT1       (dq_12_des_SHIFTOUT1        ), //o
    .SHIFTOUT2       (dq_12_des_SHIFTOUT2        )  //o
  );
  IOBUF dq_13_buf (
    .I     (DQ_OSERDESE2_13_OQ  ), //i
    .T     (DQ_OSERDESE2_13_TQ  ), //i
    .O     (dq_13_buf_O         ), //o
    .IO    (io_sdram_DQ[13]     )  //~
  );
  OSERDESE2 #(
    .DATA_RATE_OQ("DDR"),
    .DATA_RATE_TQ("DDR"),
    .DATA_WIDTH(4),
    .SERDES_MODE("MASTER"),
    .TRISTATE_WIDTH(4) 
  ) DQ_OSERDESE2_13 (
    .CLK          (CLKOUT3                    ), //i
    .CLKDIV       (CLKOUT1                    ), //i
    .D1           (_zz_846                    ), //i
    .D2           (_zz_847                    ), //i
    .D3           (_zz_848                    ), //i
    .D4           (_zz_849                    ), //i
    .D5           (_zz_850                    ), //i
    .D6           (_zz_851                    ), //i
    .D7           (_zz_852                    ), //i
    .D8           (_zz_853                    ), //i
    .T1           (_zz_854                    ), //i
    .T2           (_zz_855                    ), //i
    .T3           (_zz_856                    ), //i
    .T4           (_zz_857                    ), //i
    .TCE          (_zz_858                    ), //i
    .OCE          (_zz_859                    ), //i
    .TBYTEIN      (_zz_860                    ), //i
    .RST          (sdramCd_logic_outputReset  ), //i
    .SHIFTIN1     (_zz_861                    ), //i
    .SHIFTIN2     (_zz_862                    ), //i
    .OQ           (DQ_OSERDESE2_13_OQ         ), //o
    .OFB          (DQ_OSERDESE2_13_OFB        ), //o
    .TQ           (DQ_OSERDESE2_13_TQ         ), //o
    .TFB          (DQ_OSERDESE2_13_TFB        ), //o
    .TBYTEOUT     (DQ_OSERDESE2_13_TBYTEOUT   ), //o
    .SHIFTOUT1    (DQ_OSERDESE2_13_SHIFTOUT1  ), //o
    .SHIFTOUT2    (DQ_OSERDESE2_13_SHIFTOUT2  )  //o
  );
  IDELAYE2 #(
    .HIGH_PERFORMANCE_MODE("TRUE"),
    .IDELAY_TYPE("VAR_LOAD"),
    .IDELAY_VALUE(0),
    .PIPE_SEL("FALSE"),
    .REFCLK_FREQUENCY(300.0),
    .SIGNAL_PATTERN("DATA") 
  ) dq_13_idelay (
    .CNTVALUEOUT    (dq_13_idelay_CNTVALUEOUT[4:0]  ), //o
    .DATAOUT        (dq_13_idelay_DATAOUT           ), //o
    .C              (CLKOUT3                        ), //i
    .CE             (_zz_863                        ), //i
    .CINVCTRL       (_zz_864                        ), //i
    .CNTVALUEIN     (idelayValueIn[4:0]             ), //i
    .DATAIN         (_zz_865                        ), //i
    .IDATAIN        (dq_13_buf_O                    ), //i
    .INC            (_zz_866                        ), //i
    .LD             (dq_13_idelayLoad               ), //i
    .LDPIPEEN       (_zz_867                        ), //i
    .REGRST         (_zz_868                        )  //i
  );
  ISERDESE2 #(
    .DATA_RATE("DDR"),
    .DATA_WIDTH(4),
    .INTERFACE_TYPE("NETWORKING"),
    .IOBDELAY("IFD") 
  ) dq_13_des (
    .BITSLIP         (dq_13_bitsleep             ), //i
    .CE1             (_zz_869                    ), //i
    .CE2             (_zz_870                    ), //i
    .CLK             (CLKOUT3                    ), //i
    .CLKB            (_zz_871                    ), //i
    .CLKDIV          (CLKOUT1                    ), //i
    .CLKDIVP         (_zz_872                    ), //i
    .D               (_zz_873                    ), //i
    .DDLY            (dq_13_idelay_DATAOUT       ), //i
    .DYNCLKDIVSEL    (_zz_874                    ), //i
    .DYNCLKSEL       (_zz_875                    ), //i
    .OCLK            (_zz_876                    ), //i
    .OCLKB           (_zz_877                    ), //i
    .OFB             (_zz_878                    ), //i
    .RST             (sdramCd_logic_outputReset  ), //i
    .SHIFTIN1        (_zz_879                    ), //i
    .SHIFTIN2        (_zz_880                    ), //i
    .O               (dq_13_des_O                ), //o
    .Q1              (dq_13_des_Q1               ), //o
    .Q2              (dq_13_des_Q2               ), //o
    .Q3              (dq_13_des_Q3               ), //o
    .Q4              (dq_13_des_Q4               ), //o
    .Q5              (dq_13_des_Q5               ), //o
    .Q6              (dq_13_des_Q6               ), //o
    .Q7              (dq_13_des_Q7               ), //o
    .Q8              (dq_13_des_Q8               ), //o
    .SHIFTOUT1       (dq_13_des_SHIFTOUT1        ), //o
    .SHIFTOUT2       (dq_13_des_SHIFTOUT2        )  //o
  );
  IOBUF dq_14_buf (
    .I     (DQ_OSERDESE2_14_OQ  ), //i
    .T     (DQ_OSERDESE2_14_TQ  ), //i
    .O     (dq_14_buf_O         ), //o
    .IO    (io_sdram_DQ[14]     )  //~
  );
  OSERDESE2 #(
    .DATA_RATE_OQ("DDR"),
    .DATA_RATE_TQ("DDR"),
    .DATA_WIDTH(4),
    .SERDES_MODE("MASTER"),
    .TRISTATE_WIDTH(4) 
  ) DQ_OSERDESE2_14 (
    .CLK          (CLKOUT3                    ), //i
    .CLKDIV       (CLKOUT1                    ), //i
    .D1           (_zz_881                    ), //i
    .D2           (_zz_882                    ), //i
    .D3           (_zz_883                    ), //i
    .D4           (_zz_884                    ), //i
    .D5           (_zz_885                    ), //i
    .D6           (_zz_886                    ), //i
    .D7           (_zz_887                    ), //i
    .D8           (_zz_888                    ), //i
    .T1           (_zz_889                    ), //i
    .T2           (_zz_890                    ), //i
    .T3           (_zz_891                    ), //i
    .T4           (_zz_892                    ), //i
    .TCE          (_zz_893                    ), //i
    .OCE          (_zz_894                    ), //i
    .TBYTEIN      (_zz_895                    ), //i
    .RST          (sdramCd_logic_outputReset  ), //i
    .SHIFTIN1     (_zz_896                    ), //i
    .SHIFTIN2     (_zz_897                    ), //i
    .OQ           (DQ_OSERDESE2_14_OQ         ), //o
    .OFB          (DQ_OSERDESE2_14_OFB        ), //o
    .TQ           (DQ_OSERDESE2_14_TQ         ), //o
    .TFB          (DQ_OSERDESE2_14_TFB        ), //o
    .TBYTEOUT     (DQ_OSERDESE2_14_TBYTEOUT   ), //o
    .SHIFTOUT1    (DQ_OSERDESE2_14_SHIFTOUT1  ), //o
    .SHIFTOUT2    (DQ_OSERDESE2_14_SHIFTOUT2  )  //o
  );
  IDELAYE2 #(
    .HIGH_PERFORMANCE_MODE("TRUE"),
    .IDELAY_TYPE("VAR_LOAD"),
    .IDELAY_VALUE(0),
    .PIPE_SEL("FALSE"),
    .REFCLK_FREQUENCY(300.0),
    .SIGNAL_PATTERN("DATA") 
  ) dq_14_idelay (
    .CNTVALUEOUT    (dq_14_idelay_CNTVALUEOUT[4:0]  ), //o
    .DATAOUT        (dq_14_idelay_DATAOUT           ), //o
    .C              (CLKOUT3                        ), //i
    .CE             (_zz_898                        ), //i
    .CINVCTRL       (_zz_899                        ), //i
    .CNTVALUEIN     (idelayValueIn[4:0]             ), //i
    .DATAIN         (_zz_900                        ), //i
    .IDATAIN        (dq_14_buf_O                    ), //i
    .INC            (_zz_901                        ), //i
    .LD             (dq_14_idelayLoad               ), //i
    .LDPIPEEN       (_zz_902                        ), //i
    .REGRST         (_zz_903                        )  //i
  );
  ISERDESE2 #(
    .DATA_RATE("DDR"),
    .DATA_WIDTH(4),
    .INTERFACE_TYPE("NETWORKING"),
    .IOBDELAY("IFD") 
  ) dq_14_des (
    .BITSLIP         (dq_14_bitsleep             ), //i
    .CE1             (_zz_904                    ), //i
    .CE2             (_zz_905                    ), //i
    .CLK             (CLKOUT3                    ), //i
    .CLKB            (_zz_906                    ), //i
    .CLKDIV          (CLKOUT1                    ), //i
    .CLKDIVP         (_zz_907                    ), //i
    .D               (_zz_908                    ), //i
    .DDLY            (dq_14_idelay_DATAOUT       ), //i
    .DYNCLKDIVSEL    (_zz_909                    ), //i
    .DYNCLKSEL       (_zz_910                    ), //i
    .OCLK            (_zz_911                    ), //i
    .OCLKB           (_zz_912                    ), //i
    .OFB             (_zz_913                    ), //i
    .RST             (sdramCd_logic_outputReset  ), //i
    .SHIFTIN1        (_zz_914                    ), //i
    .SHIFTIN2        (_zz_915                    ), //i
    .O               (dq_14_des_O                ), //o
    .Q1              (dq_14_des_Q1               ), //o
    .Q2              (dq_14_des_Q2               ), //o
    .Q3              (dq_14_des_Q3               ), //o
    .Q4              (dq_14_des_Q4               ), //o
    .Q5              (dq_14_des_Q5               ), //o
    .Q6              (dq_14_des_Q6               ), //o
    .Q7              (dq_14_des_Q7               ), //o
    .Q8              (dq_14_des_Q8               ), //o
    .SHIFTOUT1       (dq_14_des_SHIFTOUT1        ), //o
    .SHIFTOUT2       (dq_14_des_SHIFTOUT2        )  //o
  );
  IOBUF dq_15_buf (
    .I     (DQ_OSERDESE2_15_OQ  ), //i
    .T     (DQ_OSERDESE2_15_TQ  ), //i
    .O     (dq_15_buf_O         ), //o
    .IO    (io_sdram_DQ[15]     )  //~
  );
  OSERDESE2 #(
    .DATA_RATE_OQ("DDR"),
    .DATA_RATE_TQ("DDR"),
    .DATA_WIDTH(4),
    .SERDES_MODE("MASTER"),
    .TRISTATE_WIDTH(4) 
  ) DQ_OSERDESE2_15 (
    .CLK          (CLKOUT3                    ), //i
    .CLKDIV       (CLKOUT1                    ), //i
    .D1           (_zz_916                    ), //i
    .D2           (_zz_917                    ), //i
    .D3           (_zz_918                    ), //i
    .D4           (_zz_919                    ), //i
    .D5           (_zz_920                    ), //i
    .D6           (_zz_921                    ), //i
    .D7           (_zz_922                    ), //i
    .D8           (_zz_923                    ), //i
    .T1           (_zz_924                    ), //i
    .T2           (_zz_925                    ), //i
    .T3           (_zz_926                    ), //i
    .T4           (_zz_927                    ), //i
    .TCE          (_zz_928                    ), //i
    .OCE          (_zz_929                    ), //i
    .TBYTEIN      (_zz_930                    ), //i
    .RST          (sdramCd_logic_outputReset  ), //i
    .SHIFTIN1     (_zz_931                    ), //i
    .SHIFTIN2     (_zz_932                    ), //i
    .OQ           (DQ_OSERDESE2_15_OQ         ), //o
    .OFB          (DQ_OSERDESE2_15_OFB        ), //o
    .TQ           (DQ_OSERDESE2_15_TQ         ), //o
    .TFB          (DQ_OSERDESE2_15_TFB        ), //o
    .TBYTEOUT     (DQ_OSERDESE2_15_TBYTEOUT   ), //o
    .SHIFTOUT1    (DQ_OSERDESE2_15_SHIFTOUT1  ), //o
    .SHIFTOUT2    (DQ_OSERDESE2_15_SHIFTOUT2  )  //o
  );
  IDELAYE2 #(
    .HIGH_PERFORMANCE_MODE("TRUE"),
    .IDELAY_TYPE("VAR_LOAD"),
    .IDELAY_VALUE(0),
    .PIPE_SEL("FALSE"),
    .REFCLK_FREQUENCY(300.0),
    .SIGNAL_PATTERN("DATA") 
  ) dq_15_idelay (
    .CNTVALUEOUT    (dq_15_idelay_CNTVALUEOUT[4:0]  ), //o
    .DATAOUT        (dq_15_idelay_DATAOUT           ), //o
    .C              (CLKOUT3                        ), //i
    .CE             (_zz_933                        ), //i
    .CINVCTRL       (_zz_934                        ), //i
    .CNTVALUEIN     (idelayValueIn[4:0]             ), //i
    .DATAIN         (_zz_935                        ), //i
    .IDATAIN        (dq_15_buf_O                    ), //i
    .INC            (_zz_936                        ), //i
    .LD             (dq_15_idelayLoad               ), //i
    .LDPIPEEN       (_zz_937                        ), //i
    .REGRST         (_zz_938                        )  //i
  );
  ISERDESE2 #(
    .DATA_RATE("DDR"),
    .DATA_WIDTH(4),
    .INTERFACE_TYPE("NETWORKING"),
    .IOBDELAY("IFD") 
  ) dq_15_des (
    .BITSLIP         (dq_15_bitsleep             ), //i
    .CE1             (_zz_939                    ), //i
    .CE2             (_zz_940                    ), //i
    .CLK             (CLKOUT3                    ), //i
    .CLKB            (_zz_941                    ), //i
    .CLKDIV          (CLKOUT1                    ), //i
    .CLKDIVP         (_zz_942                    ), //i
    .D               (_zz_943                    ), //i
    .DDLY            (dq_15_idelay_DATAOUT       ), //i
    .DYNCLKDIVSEL    (_zz_944                    ), //i
    .DYNCLKSEL       (_zz_945                    ), //i
    .OCLK            (_zz_946                    ), //i
    .OCLKB           (_zz_947                    ), //i
    .OFB             (_zz_948                    ), //i
    .RST             (sdramCd_logic_outputReset  ), //i
    .SHIFTIN1        (_zz_949                    ), //i
    .SHIFTIN2        (_zz_950                    ), //i
    .O               (dq_15_des_O                ), //o
    .Q1              (dq_15_des_Q1               ), //o
    .Q2              (dq_15_des_Q2               ), //o
    .Q3              (dq_15_des_Q3               ), //o
    .Q4              (dq_15_des_Q4               ), //o
    .Q5              (dq_15_des_Q5               ), //o
    .Q6              (dq_15_des_Q6               ), //o
    .Q7              (dq_15_des_Q7               ), //o
    .Q8              (dq_15_des_Q8               ), //o
    .SHIFTOUT1       (dq_15_des_SHIFTOUT1        ), //o
    .SHIFTOUT2       (dq_15_des_SHIFTOUT2        )  //o
  );
  assign _zz_18 = 1'b0;
  assign clk270Rst = bufferCC_33_io_dataOut;
  assign _zz_19 = 1'b0;
  assign clk90Rst = bufferCC_34_io_dataOut;
  assign _zz_20 = 1'b1;
  assign _zz_21 = 1'b0;
  assign _zz_22 = 1'b1;
  assign _zz_23 = 1'b0;
  assign _zz_24 = 1'b0;
  assign _zz_25 = 1'b0;
  assign _zz_26 = 1'b0;
  assign _zz_27 = 1'b0;
  assign _zz_28 = (! 1'b1);
  assign _zz_29 = (! 1'b1);
  assign _zz_30 = (! 1'b1);
  assign _zz_31 = (! 1'b1);
  assign _zz_32 = 1'b1;
  assign _zz_33 = 1'b1;
  assign _zz_34 = 1'b1;
  assign io_sdram_CK = clkBuf_O;
  assign io_sdram_CKn = clkBuf_OB;
  assign _zz_37 = 1'b0;
  assign _zz_38 = 1'b0;
  assign _zz_39 = 1'b0;
  assign _zz_40 = 1'b0;
  assign _zz_41 = (! 1'b1);
  assign _zz_42 = (! 1'b1);
  assign _zz_43 = (! 1'b1);
  assign _zz_44 = (! 1'b1);
  assign _zz_45 = 1'b1;
  assign _zz_46 = 1'b1;
  assign _zz_47 = 1'b1;
  always @ (*) begin
    io_sdram_ADDR[0] = ADDR_OSERDESE2_OQ;
    io_sdram_ADDR[1] = ADDR_OSERDESE2_1_OQ;
    io_sdram_ADDR[2] = ADDR_OSERDESE2_2_OQ;
    io_sdram_ADDR[3] = ADDR_OSERDESE2_3_OQ;
    io_sdram_ADDR[4] = ADDR_OSERDESE2_4_OQ;
    io_sdram_ADDR[5] = ADDR_OSERDESE2_5_OQ;
    io_sdram_ADDR[6] = ADDR_OSERDESE2_6_OQ;
    io_sdram_ADDR[7] = ADDR_OSERDESE2_7_OQ;
    io_sdram_ADDR[8] = ADDR_OSERDESE2_8_OQ;
    io_sdram_ADDR[9] = ADDR_OSERDESE2_9_OQ;
    io_sdram_ADDR[10] = ADDR_OSERDESE2_10_OQ;
    io_sdram_ADDR[11] = ADDR_OSERDESE2_11_OQ;
    io_sdram_ADDR[12] = ADDR_OSERDESE2_12_OQ;
  end

  assign _zz_50 = 1'b0;
  assign _zz_51 = 1'b0;
  assign _zz_52 = 1'b0;
  assign _zz_53 = 1'b0;
  assign _zz_54 = (! 1'b1);
  assign _zz_55 = (! 1'b1);
  assign _zz_56 = (! 1'b1);
  assign _zz_57 = (! 1'b1);
  assign _zz_58 = 1'b1;
  assign _zz_59 = 1'b1;
  assign _zz_60 = 1'b1;
  assign _zz_63 = 1'b0;
  assign _zz_64 = 1'b0;
  assign _zz_65 = 1'b0;
  assign _zz_66 = 1'b0;
  assign _zz_67 = (! 1'b1);
  assign _zz_68 = (! 1'b1);
  assign _zz_69 = (! 1'b1);
  assign _zz_70 = (! 1'b1);
  assign _zz_71 = 1'b1;
  assign _zz_72 = 1'b1;
  assign _zz_73 = 1'b1;
  assign _zz_76 = 1'b0;
  assign _zz_77 = 1'b0;
  assign _zz_78 = 1'b0;
  assign _zz_79 = 1'b0;
  assign _zz_80 = (! 1'b1);
  assign _zz_81 = (! 1'b1);
  assign _zz_82 = (! 1'b1);
  assign _zz_83 = (! 1'b1);
  assign _zz_84 = 1'b1;
  assign _zz_85 = 1'b1;
  assign _zz_86 = 1'b1;
  assign _zz_89 = 1'b0;
  assign _zz_90 = 1'b0;
  assign _zz_91 = 1'b0;
  assign _zz_92 = 1'b0;
  assign _zz_93 = (! 1'b1);
  assign _zz_94 = (! 1'b1);
  assign _zz_95 = (! 1'b1);
  assign _zz_96 = (! 1'b1);
  assign _zz_97 = 1'b1;
  assign _zz_98 = 1'b1;
  assign _zz_99 = 1'b1;
  assign _zz_102 = 1'b0;
  assign _zz_103 = 1'b0;
  assign _zz_104 = 1'b0;
  assign _zz_105 = 1'b0;
  assign _zz_106 = (! 1'b1);
  assign _zz_107 = (! 1'b1);
  assign _zz_108 = (! 1'b1);
  assign _zz_109 = (! 1'b1);
  assign _zz_110 = 1'b1;
  assign _zz_111 = 1'b1;
  assign _zz_112 = 1'b1;
  assign _zz_115 = 1'b0;
  assign _zz_116 = 1'b0;
  assign _zz_117 = 1'b0;
  assign _zz_118 = 1'b0;
  assign _zz_119 = (! 1'b1);
  assign _zz_120 = (! 1'b1);
  assign _zz_121 = (! 1'b1);
  assign _zz_122 = (! 1'b1);
  assign _zz_123 = 1'b1;
  assign _zz_124 = 1'b1;
  assign _zz_125 = 1'b1;
  assign _zz_128 = 1'b0;
  assign _zz_129 = 1'b0;
  assign _zz_130 = 1'b0;
  assign _zz_131 = 1'b0;
  assign _zz_132 = (! 1'b1);
  assign _zz_133 = (! 1'b1);
  assign _zz_134 = (! 1'b1);
  assign _zz_135 = (! 1'b1);
  assign _zz_136 = 1'b1;
  assign _zz_137 = 1'b1;
  assign _zz_138 = 1'b1;
  assign _zz_141 = 1'b0;
  assign _zz_142 = 1'b0;
  assign _zz_143 = 1'b0;
  assign _zz_144 = 1'b0;
  assign _zz_145 = (! 1'b1);
  assign _zz_146 = (! 1'b1);
  assign _zz_147 = (! 1'b1);
  assign _zz_148 = (! 1'b1);
  assign _zz_149 = 1'b1;
  assign _zz_150 = 1'b1;
  assign _zz_151 = 1'b1;
  assign _zz_154 = 1'b0;
  assign _zz_155 = 1'b0;
  assign _zz_156 = 1'b0;
  assign _zz_157 = 1'b0;
  assign _zz_158 = (! 1'b1);
  assign _zz_159 = (! 1'b1);
  assign _zz_160 = (! 1'b1);
  assign _zz_161 = (! 1'b1);
  assign _zz_162 = 1'b1;
  assign _zz_163 = 1'b1;
  assign _zz_164 = 1'b1;
  assign _zz_167 = 1'b0;
  assign _zz_168 = 1'b0;
  assign _zz_169 = 1'b0;
  assign _zz_170 = 1'b0;
  assign _zz_171 = (! 1'b1);
  assign _zz_172 = (! 1'b1);
  assign _zz_173 = (! 1'b1);
  assign _zz_174 = (! 1'b1);
  assign _zz_175 = 1'b1;
  assign _zz_176 = 1'b1;
  assign _zz_177 = 1'b1;
  assign _zz_180 = 1'b0;
  assign _zz_181 = 1'b0;
  assign _zz_182 = 1'b0;
  assign _zz_183 = 1'b0;
  assign _zz_184 = (! 1'b1);
  assign _zz_185 = (! 1'b1);
  assign _zz_186 = (! 1'b1);
  assign _zz_187 = (! 1'b1);
  assign _zz_188 = 1'b1;
  assign _zz_189 = 1'b1;
  assign _zz_190 = 1'b1;
  assign _zz_193 = 1'b0;
  assign _zz_194 = 1'b0;
  assign _zz_195 = 1'b0;
  assign _zz_196 = 1'b0;
  assign _zz_197 = (! 1'b1);
  assign _zz_198 = (! 1'b1);
  assign _zz_199 = (! 1'b1);
  assign _zz_200 = (! 1'b1);
  assign _zz_201 = 1'b1;
  assign _zz_202 = 1'b1;
  assign _zz_203 = 1'b1;
  assign _zz_206 = 1'b0;
  assign _zz_207 = 1'b0;
  assign _zz_208 = 1'b0;
  assign _zz_209 = 1'b0;
  assign _zz_210 = (! 1'b1);
  assign _zz_211 = (! 1'b1);
  assign _zz_212 = (! 1'b1);
  assign _zz_213 = (! 1'b1);
  assign _zz_214 = 1'b1;
  assign _zz_215 = 1'b1;
  assign _zz_216 = 1'b1;
  always @ (*) begin
    io_sdram_BA[0] = BA_OSERDESE2_OQ;
    io_sdram_BA[1] = BA_OSERDESE2_1_OQ;
    io_sdram_BA[2] = BA_OSERDESE2_2_OQ;
  end

  assign _zz_219 = 1'b0;
  assign _zz_220 = 1'b0;
  assign _zz_221 = 1'b0;
  assign _zz_222 = 1'b0;
  assign _zz_223 = (! 1'b1);
  assign _zz_224 = (! 1'b1);
  assign _zz_225 = (! 1'b1);
  assign _zz_226 = (! 1'b1);
  assign _zz_227 = 1'b1;
  assign _zz_228 = 1'b1;
  assign _zz_229 = 1'b1;
  assign _zz_232 = 1'b0;
  assign _zz_233 = 1'b0;
  assign _zz_234 = 1'b0;
  assign _zz_235 = 1'b0;
  assign _zz_236 = (! 1'b1);
  assign _zz_237 = (! 1'b1);
  assign _zz_238 = (! 1'b1);
  assign _zz_239 = (! 1'b1);
  assign _zz_240 = 1'b1;
  assign _zz_241 = 1'b1;
  assign _zz_242 = 1'b1;
  assign _zz_245 = 1'b0;
  assign _zz_246 = 1'b0;
  assign _zz_247 = 1'b0;
  assign _zz_248 = 1'b0;
  assign _zz_249 = (! 1'b1);
  assign _zz_250 = (! 1'b1);
  assign _zz_251 = (! 1'b1);
  assign _zz_252 = (! 1'b1);
  assign _zz_253 = 1'b1;
  assign _zz_254 = 1'b1;
  assign _zz_255 = 1'b1;
  assign io_sdram_CASn = CASn_OSERDESE2_OQ;
  assign _zz_258 = 1'b0;
  assign _zz_259 = 1'b0;
  assign _zz_260 = 1'b0;
  assign _zz_261 = 1'b0;
  assign _zz_262 = (! 1'b1);
  assign _zz_263 = (! 1'b1);
  assign _zz_264 = (! 1'b1);
  assign _zz_265 = (! 1'b1);
  assign _zz_266 = 1'b1;
  assign _zz_267 = 1'b1;
  assign _zz_268 = 1'b1;
  assign io_sdram_CKE = CKE_OSERDESE2_OQ;
  assign _zz_271 = 1'b0;
  assign _zz_272 = 1'b0;
  assign _zz_273 = 1'b0;
  assign _zz_274 = 1'b0;
  assign _zz_275 = (! 1'b1);
  assign _zz_276 = (! 1'b1);
  assign _zz_277 = (! 1'b1);
  assign _zz_278 = (! 1'b1);
  assign _zz_279 = 1'b1;
  assign _zz_280 = 1'b1;
  assign _zz_281 = 1'b1;
  assign io_sdram_CSn = CSn_OSERDESE2_OQ;
  assign _zz_284 = 1'b0;
  assign _zz_285 = 1'b0;
  assign _zz_286 = 1'b0;
  assign _zz_287 = 1'b0;
  assign _zz_288 = (! 1'b1);
  assign _zz_289 = (! 1'b1);
  assign _zz_290 = (! 1'b1);
  assign _zz_291 = (! 1'b1);
  assign _zz_292 = 1'b1;
  assign _zz_293 = 1'b1;
  assign _zz_294 = 1'b1;
  assign io_sdram_RASn = RASn_OSERDESE2_OQ;
  assign _zz_297 = 1'b0;
  assign _zz_298 = 1'b0;
  assign _zz_299 = 1'b0;
  assign _zz_300 = 1'b0;
  assign _zz_301 = (! 1'b1);
  assign _zz_302 = (! 1'b1);
  assign _zz_303 = (! 1'b1);
  assign _zz_304 = (! 1'b1);
  assign _zz_305 = 1'b1;
  assign _zz_306 = 1'b1;
  assign _zz_307 = 1'b1;
  assign io_sdram_WEn = WEn_OSERDESE2_OQ;
  assign _zz_310 = 1'b0;
  assign _zz_311 = 1'b0;
  assign _zz_312 = 1'b0;
  assign _zz_313 = 1'b0;
  assign _zz_314 = (! 1'b1);
  assign _zz_315 = (! 1'b1);
  assign _zz_316 = (! 1'b1);
  assign _zz_317 = (! 1'b1);
  assign _zz_318 = 1'b1;
  assign _zz_319 = 1'b1;
  assign _zz_320 = 1'b1;
  assign io_sdram_ODT = ODT_OSERDESE2_OQ;
  always @ (*) begin
    case(_zz_951)
      2'b00 : begin
        _zz_17 = 4'b0000;
      end
      2'b10 : begin
        _zz_17 = 4'b0011;
      end
      2'b11 : begin
        _zz_17 = 4'b1111;
      end
      default : begin
        _zz_17 = 4'b1111;
      end
    endcase
  end

  assign _zz_323 = 1'b1;
  assign _zz_324 = 1'b0;
  assign _zz_325 = 1'b1;
  assign _zz_326 = 1'b0;
  assign _zz_327 = 1'b0;
  assign _zz_328 = 1'b0;
  assign _zz_329 = 1'b0;
  assign _zz_330 = 1'b0;
  assign _zz_331 = (! dqstReg_0);
  assign _zz_332 = (! dqstReg_1);
  assign _zz_333 = (! dqstReg_2);
  assign _zz_334 = (! dqstReg_3);
  assign _zz_335 = 1'b1;
  assign _zz_336 = 1'b1;
  assign _zz_337 = 1'b1;
  assign _zz_340 = 1'b1;
  assign _zz_341 = 1'b0;
  assign _zz_342 = 1'b1;
  assign _zz_343 = 1'b0;
  assign _zz_344 = 1'b0;
  assign _zz_345 = 1'b0;
  assign _zz_346 = 1'b0;
  assign _zz_347 = 1'b0;
  assign _zz_348 = (! dqstReg_0);
  assign _zz_349 = (! dqstReg_1);
  assign _zz_350 = (! dqstReg_2);
  assign _zz_351 = (! dqstReg_3);
  assign _zz_352 = 1'b1;
  assign _zz_353 = 1'b1;
  assign _zz_354 = 1'b1;
  assign _zz_357 = dmReg_0_0[0];
  assign _zz_358 = dmReg_0_1[0];
  assign _zz_359 = dmReg_1_0[0];
  assign _zz_360 = dmReg_1_1[0];
  assign _zz_361 = 1'b0;
  assign _zz_362 = 1'b0;
  assign _zz_363 = 1'b0;
  assign _zz_364 = 1'b0;
  assign _zz_365 = (! 1'b1);
  assign _zz_366 = (! 1'b1);
  assign _zz_367 = (! 1'b1);
  assign _zz_368 = (! 1'b1);
  assign _zz_369 = 1'b1;
  assign _zz_370 = 1'b1;
  assign _zz_371 = 1'b1;
  always @ (*) begin
    io_sdram_DM[0] = DM_OSERDESE2_OQ;
    io_sdram_DM[1] = DM_OSERDESE2_1_OQ;
  end

  assign _zz_374 = dmReg_0_0[1];
  assign _zz_375 = dmReg_0_1[1];
  assign _zz_376 = dmReg_1_0[1];
  assign _zz_377 = dmReg_1_1[1];
  assign _zz_378 = 1'b0;
  assign _zz_379 = 1'b0;
  assign _zz_380 = 1'b0;
  assign _zz_381 = 1'b0;
  assign _zz_382 = (! 1'b1);
  assign _zz_383 = (! 1'b1);
  assign _zz_384 = (! 1'b1);
  assign _zz_385 = (! 1'b1);
  assign _zz_386 = 1'b1;
  assign _zz_387 = 1'b1;
  assign _zz_388 = 1'b1;
  assign io_ctrl_readValid = io_ctrl_readEnable;
  assign _zz_391 = dqReg_0_0[0];
  assign _zz_392 = dqReg_0_1[0];
  assign _zz_393 = dqReg_1_0[0];
  assign _zz_394 = dqReg_1_1[0];
  assign _zz_395 = 1'b0;
  assign _zz_396 = 1'b0;
  assign _zz_397 = 1'b0;
  assign _zz_398 = 1'b0;
  assign _zz_399 = (! dqe0Reg);
  assign _zz_400 = (! dqe0Reg);
  assign _zz_401 = (! dqe0Reg);
  assign _zz_402 = (! dqe0Reg);
  assign _zz_403 = 1'b1;
  assign _zz_404 = 1'b1;
  assign _zz_405 = 1'b1;
  assign _zz_412 = 1'b0;
  assign _zz_411 = 1'b1;
  assign _zz_409 = 1'b0;
  assign _zz_410 = 1'b0;
  assign _zz_413 = 1'b0;
  assign _zz_408 = 1'b0;
  assign _zz_414 = 1'b1;
  assign _zz_415 = 1'b1;
  assign _zz_417 = 1'b0;
  assign _zz_418 = 1'b0;
  assign _zz_419 = 1'b0;
  assign _zz_420 = 1'b0;
  assign _zz_416 = (! CLKOUT3);
  assign _zz_421 = 1'b0;
  assign _zz_422 = 1'b0;
  assign _zz_423 = 1'b0;
  assign _zz_424 = 1'b0;
  assign _zz_425 = 1'b0;
  always @ (*) begin
    io_ctrl_phases_0_DQr_0[0] = dq_0_des_Q4;
    io_ctrl_phases_0_DQr_0[1] = dq_1_des_Q4;
    io_ctrl_phases_0_DQr_0[2] = dq_2_des_Q4;
    io_ctrl_phases_0_DQr_0[3] = dq_3_des_Q4;
    io_ctrl_phases_0_DQr_0[4] = dq_4_des_Q4;
    io_ctrl_phases_0_DQr_0[5] = dq_5_des_Q4;
    io_ctrl_phases_0_DQr_0[6] = dq_6_des_Q4;
    io_ctrl_phases_0_DQr_0[7] = dq_7_des_Q4;
    io_ctrl_phases_0_DQr_0[8] = dq_8_des_Q4;
    io_ctrl_phases_0_DQr_0[9] = dq_9_des_Q4;
    io_ctrl_phases_0_DQr_0[10] = dq_10_des_Q4;
    io_ctrl_phases_0_DQr_0[11] = dq_11_des_Q4;
    io_ctrl_phases_0_DQr_0[12] = dq_12_des_Q4;
    io_ctrl_phases_0_DQr_0[13] = dq_13_des_Q4;
    io_ctrl_phases_0_DQr_0[14] = dq_14_des_Q4;
    io_ctrl_phases_0_DQr_0[15] = dq_15_des_Q4;
  end

  always @ (*) begin
    io_ctrl_phases_0_DQr_1[0] = dq_0_des_Q3;
    io_ctrl_phases_0_DQr_1[1] = dq_1_des_Q3;
    io_ctrl_phases_0_DQr_1[2] = dq_2_des_Q3;
    io_ctrl_phases_0_DQr_1[3] = dq_3_des_Q3;
    io_ctrl_phases_0_DQr_1[4] = dq_4_des_Q3;
    io_ctrl_phases_0_DQr_1[5] = dq_5_des_Q3;
    io_ctrl_phases_0_DQr_1[6] = dq_6_des_Q3;
    io_ctrl_phases_0_DQr_1[7] = dq_7_des_Q3;
    io_ctrl_phases_0_DQr_1[8] = dq_8_des_Q3;
    io_ctrl_phases_0_DQr_1[9] = dq_9_des_Q3;
    io_ctrl_phases_0_DQr_1[10] = dq_10_des_Q3;
    io_ctrl_phases_0_DQr_1[11] = dq_11_des_Q3;
    io_ctrl_phases_0_DQr_1[12] = dq_12_des_Q3;
    io_ctrl_phases_0_DQr_1[13] = dq_13_des_Q3;
    io_ctrl_phases_0_DQr_1[14] = dq_14_des_Q3;
    io_ctrl_phases_0_DQr_1[15] = dq_15_des_Q3;
  end

  always @ (*) begin
    io_ctrl_phases_1_DQr_0[0] = dq_0_des_Q2;
    io_ctrl_phases_1_DQr_0[1] = dq_1_des_Q2;
    io_ctrl_phases_1_DQr_0[2] = dq_2_des_Q2;
    io_ctrl_phases_1_DQr_0[3] = dq_3_des_Q2;
    io_ctrl_phases_1_DQr_0[4] = dq_4_des_Q2;
    io_ctrl_phases_1_DQr_0[5] = dq_5_des_Q2;
    io_ctrl_phases_1_DQr_0[6] = dq_6_des_Q2;
    io_ctrl_phases_1_DQr_0[7] = dq_7_des_Q2;
    io_ctrl_phases_1_DQr_0[8] = dq_8_des_Q2;
    io_ctrl_phases_1_DQr_0[9] = dq_9_des_Q2;
    io_ctrl_phases_1_DQr_0[10] = dq_10_des_Q2;
    io_ctrl_phases_1_DQr_0[11] = dq_11_des_Q2;
    io_ctrl_phases_1_DQr_0[12] = dq_12_des_Q2;
    io_ctrl_phases_1_DQr_0[13] = dq_13_des_Q2;
    io_ctrl_phases_1_DQr_0[14] = dq_14_des_Q2;
    io_ctrl_phases_1_DQr_0[15] = dq_15_des_Q2;
  end

  always @ (*) begin
    io_ctrl_phases_1_DQr_1[0] = dq_0_des_Q1;
    io_ctrl_phases_1_DQr_1[1] = dq_1_des_Q1;
    io_ctrl_phases_1_DQr_1[2] = dq_2_des_Q1;
    io_ctrl_phases_1_DQr_1[3] = dq_3_des_Q1;
    io_ctrl_phases_1_DQr_1[4] = dq_4_des_Q1;
    io_ctrl_phases_1_DQr_1[5] = dq_5_des_Q1;
    io_ctrl_phases_1_DQr_1[6] = dq_6_des_Q1;
    io_ctrl_phases_1_DQr_1[7] = dq_7_des_Q1;
    io_ctrl_phases_1_DQr_1[8] = dq_8_des_Q1;
    io_ctrl_phases_1_DQr_1[9] = dq_9_des_Q1;
    io_ctrl_phases_1_DQr_1[10] = dq_10_des_Q1;
    io_ctrl_phases_1_DQr_1[11] = dq_11_des_Q1;
    io_ctrl_phases_1_DQr_1[12] = dq_12_des_Q1;
    io_ctrl_phases_1_DQr_1[13] = dq_13_des_Q1;
    io_ctrl_phases_1_DQr_1[14] = dq_14_des_Q1;
    io_ctrl_phases_1_DQr_1[15] = dq_15_des_Q1;
  end

  assign _zz_426 = dqReg_0_0[1];
  assign _zz_427 = dqReg_0_1[1];
  assign _zz_428 = dqReg_1_0[1];
  assign _zz_429 = dqReg_1_1[1];
  assign _zz_430 = 1'b0;
  assign _zz_431 = 1'b0;
  assign _zz_432 = 1'b0;
  assign _zz_433 = 1'b0;
  assign _zz_434 = (! dqe0Reg);
  assign _zz_435 = (! dqe0Reg);
  assign _zz_436 = (! dqe0Reg);
  assign _zz_437 = (! dqe0Reg);
  assign _zz_438 = 1'b1;
  assign _zz_439 = 1'b1;
  assign _zz_440 = 1'b1;
  assign _zz_447 = 1'b0;
  assign _zz_446 = 1'b1;
  assign _zz_444 = 1'b0;
  assign _zz_445 = 1'b0;
  assign _zz_448 = 1'b0;
  assign _zz_443 = 1'b0;
  assign _zz_449 = 1'b1;
  assign _zz_450 = 1'b1;
  assign _zz_452 = 1'b0;
  assign _zz_453 = 1'b0;
  assign _zz_454 = 1'b0;
  assign _zz_455 = 1'b0;
  assign _zz_451 = (! CLKOUT3);
  assign _zz_456 = 1'b0;
  assign _zz_457 = 1'b0;
  assign _zz_458 = 1'b0;
  assign _zz_459 = 1'b0;
  assign _zz_460 = 1'b0;
  assign _zz_461 = dqReg_0_0[2];
  assign _zz_462 = dqReg_0_1[2];
  assign _zz_463 = dqReg_1_0[2];
  assign _zz_464 = dqReg_1_1[2];
  assign _zz_465 = 1'b0;
  assign _zz_466 = 1'b0;
  assign _zz_467 = 1'b0;
  assign _zz_468 = 1'b0;
  assign _zz_469 = (! dqe0Reg);
  assign _zz_470 = (! dqe0Reg);
  assign _zz_471 = (! dqe0Reg);
  assign _zz_472 = (! dqe0Reg);
  assign _zz_473 = 1'b1;
  assign _zz_474 = 1'b1;
  assign _zz_475 = 1'b1;
  assign _zz_482 = 1'b0;
  assign _zz_481 = 1'b1;
  assign _zz_479 = 1'b0;
  assign _zz_480 = 1'b0;
  assign _zz_483 = 1'b0;
  assign _zz_478 = 1'b0;
  assign _zz_484 = 1'b1;
  assign _zz_485 = 1'b1;
  assign _zz_487 = 1'b0;
  assign _zz_488 = 1'b0;
  assign _zz_489 = 1'b0;
  assign _zz_490 = 1'b0;
  assign _zz_486 = (! CLKOUT3);
  assign _zz_491 = 1'b0;
  assign _zz_492 = 1'b0;
  assign _zz_493 = 1'b0;
  assign _zz_494 = 1'b0;
  assign _zz_495 = 1'b0;
  assign _zz_496 = dqReg_0_0[3];
  assign _zz_497 = dqReg_0_1[3];
  assign _zz_498 = dqReg_1_0[3];
  assign _zz_499 = dqReg_1_1[3];
  assign _zz_500 = 1'b0;
  assign _zz_501 = 1'b0;
  assign _zz_502 = 1'b0;
  assign _zz_503 = 1'b0;
  assign _zz_504 = (! dqe0Reg);
  assign _zz_505 = (! dqe0Reg);
  assign _zz_506 = (! dqe0Reg);
  assign _zz_507 = (! dqe0Reg);
  assign _zz_508 = 1'b1;
  assign _zz_509 = 1'b1;
  assign _zz_510 = 1'b1;
  assign _zz_517 = 1'b0;
  assign _zz_516 = 1'b1;
  assign _zz_514 = 1'b0;
  assign _zz_515 = 1'b0;
  assign _zz_518 = 1'b0;
  assign _zz_513 = 1'b0;
  assign _zz_519 = 1'b1;
  assign _zz_520 = 1'b1;
  assign _zz_522 = 1'b0;
  assign _zz_523 = 1'b0;
  assign _zz_524 = 1'b0;
  assign _zz_525 = 1'b0;
  assign _zz_521 = (! CLKOUT3);
  assign _zz_526 = 1'b0;
  assign _zz_527 = 1'b0;
  assign _zz_528 = 1'b0;
  assign _zz_529 = 1'b0;
  assign _zz_530 = 1'b0;
  assign _zz_531 = dqReg_0_0[4];
  assign _zz_532 = dqReg_0_1[4];
  assign _zz_533 = dqReg_1_0[4];
  assign _zz_534 = dqReg_1_1[4];
  assign _zz_535 = 1'b0;
  assign _zz_536 = 1'b0;
  assign _zz_537 = 1'b0;
  assign _zz_538 = 1'b0;
  assign _zz_539 = (! dqe0Reg);
  assign _zz_540 = (! dqe0Reg);
  assign _zz_541 = (! dqe0Reg);
  assign _zz_542 = (! dqe0Reg);
  assign _zz_543 = 1'b1;
  assign _zz_544 = 1'b1;
  assign _zz_545 = 1'b1;
  assign _zz_552 = 1'b0;
  assign _zz_551 = 1'b1;
  assign _zz_549 = 1'b0;
  assign _zz_550 = 1'b0;
  assign _zz_553 = 1'b0;
  assign _zz_548 = 1'b0;
  assign _zz_554 = 1'b1;
  assign _zz_555 = 1'b1;
  assign _zz_557 = 1'b0;
  assign _zz_558 = 1'b0;
  assign _zz_559 = 1'b0;
  assign _zz_560 = 1'b0;
  assign _zz_556 = (! CLKOUT3);
  assign _zz_561 = 1'b0;
  assign _zz_562 = 1'b0;
  assign _zz_563 = 1'b0;
  assign _zz_564 = 1'b0;
  assign _zz_565 = 1'b0;
  assign _zz_566 = dqReg_0_0[5];
  assign _zz_567 = dqReg_0_1[5];
  assign _zz_568 = dqReg_1_0[5];
  assign _zz_569 = dqReg_1_1[5];
  assign _zz_570 = 1'b0;
  assign _zz_571 = 1'b0;
  assign _zz_572 = 1'b0;
  assign _zz_573 = 1'b0;
  assign _zz_574 = (! dqe0Reg);
  assign _zz_575 = (! dqe0Reg);
  assign _zz_576 = (! dqe0Reg);
  assign _zz_577 = (! dqe0Reg);
  assign _zz_578 = 1'b1;
  assign _zz_579 = 1'b1;
  assign _zz_580 = 1'b1;
  assign _zz_587 = 1'b0;
  assign _zz_586 = 1'b1;
  assign _zz_584 = 1'b0;
  assign _zz_585 = 1'b0;
  assign _zz_588 = 1'b0;
  assign _zz_583 = 1'b0;
  assign _zz_589 = 1'b1;
  assign _zz_590 = 1'b1;
  assign _zz_592 = 1'b0;
  assign _zz_593 = 1'b0;
  assign _zz_594 = 1'b0;
  assign _zz_595 = 1'b0;
  assign _zz_591 = (! CLKOUT3);
  assign _zz_596 = 1'b0;
  assign _zz_597 = 1'b0;
  assign _zz_598 = 1'b0;
  assign _zz_599 = 1'b0;
  assign _zz_600 = 1'b0;
  assign _zz_601 = dqReg_0_0[6];
  assign _zz_602 = dqReg_0_1[6];
  assign _zz_603 = dqReg_1_0[6];
  assign _zz_604 = dqReg_1_1[6];
  assign _zz_605 = 1'b0;
  assign _zz_606 = 1'b0;
  assign _zz_607 = 1'b0;
  assign _zz_608 = 1'b0;
  assign _zz_609 = (! dqe0Reg);
  assign _zz_610 = (! dqe0Reg);
  assign _zz_611 = (! dqe0Reg);
  assign _zz_612 = (! dqe0Reg);
  assign _zz_613 = 1'b1;
  assign _zz_614 = 1'b1;
  assign _zz_615 = 1'b1;
  assign _zz_622 = 1'b0;
  assign _zz_621 = 1'b1;
  assign _zz_619 = 1'b0;
  assign _zz_620 = 1'b0;
  assign _zz_623 = 1'b0;
  assign _zz_618 = 1'b0;
  assign _zz_624 = 1'b1;
  assign _zz_625 = 1'b1;
  assign _zz_627 = 1'b0;
  assign _zz_628 = 1'b0;
  assign _zz_629 = 1'b0;
  assign _zz_630 = 1'b0;
  assign _zz_626 = (! CLKOUT3);
  assign _zz_631 = 1'b0;
  assign _zz_632 = 1'b0;
  assign _zz_633 = 1'b0;
  assign _zz_634 = 1'b0;
  assign _zz_635 = 1'b0;
  assign _zz_636 = dqReg_0_0[7];
  assign _zz_637 = dqReg_0_1[7];
  assign _zz_638 = dqReg_1_0[7];
  assign _zz_639 = dqReg_1_1[7];
  assign _zz_640 = 1'b0;
  assign _zz_641 = 1'b0;
  assign _zz_642 = 1'b0;
  assign _zz_643 = 1'b0;
  assign _zz_644 = (! dqe0Reg);
  assign _zz_645 = (! dqe0Reg);
  assign _zz_646 = (! dqe0Reg);
  assign _zz_647 = (! dqe0Reg);
  assign _zz_648 = 1'b1;
  assign _zz_649 = 1'b1;
  assign _zz_650 = 1'b1;
  assign _zz_657 = 1'b0;
  assign _zz_656 = 1'b1;
  assign _zz_654 = 1'b0;
  assign _zz_655 = 1'b0;
  assign _zz_658 = 1'b0;
  assign _zz_653 = 1'b0;
  assign _zz_659 = 1'b1;
  assign _zz_660 = 1'b1;
  assign _zz_662 = 1'b0;
  assign _zz_663 = 1'b0;
  assign _zz_664 = 1'b0;
  assign _zz_665 = 1'b0;
  assign _zz_661 = (! CLKOUT3);
  assign _zz_666 = 1'b0;
  assign _zz_667 = 1'b0;
  assign _zz_668 = 1'b0;
  assign _zz_669 = 1'b0;
  assign _zz_670 = 1'b0;
  assign _zz_671 = dqReg_0_0[8];
  assign _zz_672 = dqReg_0_1[8];
  assign _zz_673 = dqReg_1_0[8];
  assign _zz_674 = dqReg_1_1[8];
  assign _zz_675 = 1'b0;
  assign _zz_676 = 1'b0;
  assign _zz_677 = 1'b0;
  assign _zz_678 = 1'b0;
  assign _zz_679 = (! dqe0Reg);
  assign _zz_680 = (! dqe0Reg);
  assign _zz_681 = (! dqe0Reg);
  assign _zz_682 = (! dqe0Reg);
  assign _zz_683 = 1'b1;
  assign _zz_684 = 1'b1;
  assign _zz_685 = 1'b1;
  assign _zz_692 = 1'b0;
  assign _zz_691 = 1'b1;
  assign _zz_689 = 1'b0;
  assign _zz_690 = 1'b0;
  assign _zz_693 = 1'b0;
  assign _zz_688 = 1'b0;
  assign _zz_694 = 1'b1;
  assign _zz_695 = 1'b1;
  assign _zz_697 = 1'b0;
  assign _zz_698 = 1'b0;
  assign _zz_699 = 1'b0;
  assign _zz_700 = 1'b0;
  assign _zz_696 = (! CLKOUT3);
  assign _zz_701 = 1'b0;
  assign _zz_702 = 1'b0;
  assign _zz_703 = 1'b0;
  assign _zz_704 = 1'b0;
  assign _zz_705 = 1'b0;
  assign _zz_706 = dqReg_0_0[9];
  assign _zz_707 = dqReg_0_1[9];
  assign _zz_708 = dqReg_1_0[9];
  assign _zz_709 = dqReg_1_1[9];
  assign _zz_710 = 1'b0;
  assign _zz_711 = 1'b0;
  assign _zz_712 = 1'b0;
  assign _zz_713 = 1'b0;
  assign _zz_714 = (! dqe0Reg);
  assign _zz_715 = (! dqe0Reg);
  assign _zz_716 = (! dqe0Reg);
  assign _zz_717 = (! dqe0Reg);
  assign _zz_718 = 1'b1;
  assign _zz_719 = 1'b1;
  assign _zz_720 = 1'b1;
  assign _zz_727 = 1'b0;
  assign _zz_726 = 1'b1;
  assign _zz_724 = 1'b0;
  assign _zz_725 = 1'b0;
  assign _zz_728 = 1'b0;
  assign _zz_723 = 1'b0;
  assign _zz_729 = 1'b1;
  assign _zz_730 = 1'b1;
  assign _zz_732 = 1'b0;
  assign _zz_733 = 1'b0;
  assign _zz_734 = 1'b0;
  assign _zz_735 = 1'b0;
  assign _zz_731 = (! CLKOUT3);
  assign _zz_736 = 1'b0;
  assign _zz_737 = 1'b0;
  assign _zz_738 = 1'b0;
  assign _zz_739 = 1'b0;
  assign _zz_740 = 1'b0;
  assign _zz_741 = dqReg_0_0[10];
  assign _zz_742 = dqReg_0_1[10];
  assign _zz_743 = dqReg_1_0[10];
  assign _zz_744 = dqReg_1_1[10];
  assign _zz_745 = 1'b0;
  assign _zz_746 = 1'b0;
  assign _zz_747 = 1'b0;
  assign _zz_748 = 1'b0;
  assign _zz_749 = (! dqe0Reg);
  assign _zz_750 = (! dqe0Reg);
  assign _zz_751 = (! dqe0Reg);
  assign _zz_752 = (! dqe0Reg);
  assign _zz_753 = 1'b1;
  assign _zz_754 = 1'b1;
  assign _zz_755 = 1'b1;
  assign _zz_762 = 1'b0;
  assign _zz_761 = 1'b1;
  assign _zz_759 = 1'b0;
  assign _zz_760 = 1'b0;
  assign _zz_763 = 1'b0;
  assign _zz_758 = 1'b0;
  assign _zz_764 = 1'b1;
  assign _zz_765 = 1'b1;
  assign _zz_767 = 1'b0;
  assign _zz_768 = 1'b0;
  assign _zz_769 = 1'b0;
  assign _zz_770 = 1'b0;
  assign _zz_766 = (! CLKOUT3);
  assign _zz_771 = 1'b0;
  assign _zz_772 = 1'b0;
  assign _zz_773 = 1'b0;
  assign _zz_774 = 1'b0;
  assign _zz_775 = 1'b0;
  assign _zz_776 = dqReg_0_0[11];
  assign _zz_777 = dqReg_0_1[11];
  assign _zz_778 = dqReg_1_0[11];
  assign _zz_779 = dqReg_1_1[11];
  assign _zz_780 = 1'b0;
  assign _zz_781 = 1'b0;
  assign _zz_782 = 1'b0;
  assign _zz_783 = 1'b0;
  assign _zz_784 = (! dqe0Reg);
  assign _zz_785 = (! dqe0Reg);
  assign _zz_786 = (! dqe0Reg);
  assign _zz_787 = (! dqe0Reg);
  assign _zz_788 = 1'b1;
  assign _zz_789 = 1'b1;
  assign _zz_790 = 1'b1;
  assign _zz_797 = 1'b0;
  assign _zz_796 = 1'b1;
  assign _zz_794 = 1'b0;
  assign _zz_795 = 1'b0;
  assign _zz_798 = 1'b0;
  assign _zz_793 = 1'b0;
  assign _zz_799 = 1'b1;
  assign _zz_800 = 1'b1;
  assign _zz_802 = 1'b0;
  assign _zz_803 = 1'b0;
  assign _zz_804 = 1'b0;
  assign _zz_805 = 1'b0;
  assign _zz_801 = (! CLKOUT3);
  assign _zz_806 = 1'b0;
  assign _zz_807 = 1'b0;
  assign _zz_808 = 1'b0;
  assign _zz_809 = 1'b0;
  assign _zz_810 = 1'b0;
  assign _zz_811 = dqReg_0_0[12];
  assign _zz_812 = dqReg_0_1[12];
  assign _zz_813 = dqReg_1_0[12];
  assign _zz_814 = dqReg_1_1[12];
  assign _zz_815 = 1'b0;
  assign _zz_816 = 1'b0;
  assign _zz_817 = 1'b0;
  assign _zz_818 = 1'b0;
  assign _zz_819 = (! dqe0Reg);
  assign _zz_820 = (! dqe0Reg);
  assign _zz_821 = (! dqe0Reg);
  assign _zz_822 = (! dqe0Reg);
  assign _zz_823 = 1'b1;
  assign _zz_824 = 1'b1;
  assign _zz_825 = 1'b1;
  assign _zz_832 = 1'b0;
  assign _zz_831 = 1'b1;
  assign _zz_829 = 1'b0;
  assign _zz_830 = 1'b0;
  assign _zz_833 = 1'b0;
  assign _zz_828 = 1'b0;
  assign _zz_834 = 1'b1;
  assign _zz_835 = 1'b1;
  assign _zz_837 = 1'b0;
  assign _zz_838 = 1'b0;
  assign _zz_839 = 1'b0;
  assign _zz_840 = 1'b0;
  assign _zz_836 = (! CLKOUT3);
  assign _zz_841 = 1'b0;
  assign _zz_842 = 1'b0;
  assign _zz_843 = 1'b0;
  assign _zz_844 = 1'b0;
  assign _zz_845 = 1'b0;
  assign _zz_846 = dqReg_0_0[13];
  assign _zz_847 = dqReg_0_1[13];
  assign _zz_848 = dqReg_1_0[13];
  assign _zz_849 = dqReg_1_1[13];
  assign _zz_850 = 1'b0;
  assign _zz_851 = 1'b0;
  assign _zz_852 = 1'b0;
  assign _zz_853 = 1'b0;
  assign _zz_854 = (! dqe0Reg);
  assign _zz_855 = (! dqe0Reg);
  assign _zz_856 = (! dqe0Reg);
  assign _zz_857 = (! dqe0Reg);
  assign _zz_858 = 1'b1;
  assign _zz_859 = 1'b1;
  assign _zz_860 = 1'b1;
  assign _zz_867 = 1'b0;
  assign _zz_866 = 1'b1;
  assign _zz_864 = 1'b0;
  assign _zz_865 = 1'b0;
  assign _zz_868 = 1'b0;
  assign _zz_863 = 1'b0;
  assign _zz_869 = 1'b1;
  assign _zz_870 = 1'b1;
  assign _zz_872 = 1'b0;
  assign _zz_873 = 1'b0;
  assign _zz_874 = 1'b0;
  assign _zz_875 = 1'b0;
  assign _zz_871 = (! CLKOUT3);
  assign _zz_876 = 1'b0;
  assign _zz_877 = 1'b0;
  assign _zz_878 = 1'b0;
  assign _zz_879 = 1'b0;
  assign _zz_880 = 1'b0;
  assign _zz_881 = dqReg_0_0[14];
  assign _zz_882 = dqReg_0_1[14];
  assign _zz_883 = dqReg_1_0[14];
  assign _zz_884 = dqReg_1_1[14];
  assign _zz_885 = 1'b0;
  assign _zz_886 = 1'b0;
  assign _zz_887 = 1'b0;
  assign _zz_888 = 1'b0;
  assign _zz_889 = (! dqe0Reg);
  assign _zz_890 = (! dqe0Reg);
  assign _zz_891 = (! dqe0Reg);
  assign _zz_892 = (! dqe0Reg);
  assign _zz_893 = 1'b1;
  assign _zz_894 = 1'b1;
  assign _zz_895 = 1'b1;
  assign _zz_902 = 1'b0;
  assign _zz_901 = 1'b1;
  assign _zz_899 = 1'b0;
  assign _zz_900 = 1'b0;
  assign _zz_903 = 1'b0;
  assign _zz_898 = 1'b0;
  assign _zz_904 = 1'b1;
  assign _zz_905 = 1'b1;
  assign _zz_907 = 1'b0;
  assign _zz_908 = 1'b0;
  assign _zz_909 = 1'b0;
  assign _zz_910 = 1'b0;
  assign _zz_906 = (! CLKOUT3);
  assign _zz_911 = 1'b0;
  assign _zz_912 = 1'b0;
  assign _zz_913 = 1'b0;
  assign _zz_914 = 1'b0;
  assign _zz_915 = 1'b0;
  assign _zz_916 = dqReg_0_0[15];
  assign _zz_917 = dqReg_0_1[15];
  assign _zz_918 = dqReg_1_0[15];
  assign _zz_919 = dqReg_1_1[15];
  assign _zz_920 = 1'b0;
  assign _zz_921 = 1'b0;
  assign _zz_922 = 1'b0;
  assign _zz_923 = 1'b0;
  assign _zz_924 = (! dqe0Reg);
  assign _zz_925 = (! dqe0Reg);
  assign _zz_926 = (! dqe0Reg);
  assign _zz_927 = (! dqe0Reg);
  assign _zz_928 = 1'b1;
  assign _zz_929 = 1'b1;
  assign _zz_930 = 1'b1;
  assign _zz_937 = 1'b0;
  assign _zz_936 = 1'b1;
  assign _zz_934 = 1'b0;
  assign _zz_935 = 1'b0;
  assign _zz_938 = 1'b0;
  assign _zz_933 = 1'b0;
  assign _zz_939 = 1'b1;
  assign _zz_940 = 1'b1;
  assign _zz_942 = 1'b0;
  assign _zz_943 = 1'b0;
  assign _zz_944 = 1'b0;
  assign _zz_945 = 1'b0;
  assign _zz_941 = (! CLKOUT3);
  assign _zz_946 = 1'b0;
  assign _zz_947 = 1'b0;
  assign _zz_948 = 1'b0;
  assign _zz_949 = 1'b0;
  assign _zz_950 = 1'b0;
  assign _zz_35 = 1'b0;
  assign _zz_36 = 1'b0;
  assign _zz_48 = 1'b0;
  assign _zz_49 = 1'b0;
  assign _zz_61 = 1'b0;
  assign _zz_62 = 1'b0;
  assign _zz_74 = 1'b0;
  assign _zz_75 = 1'b0;
  assign _zz_87 = 1'b0;
  assign _zz_88 = 1'b0;
  assign _zz_100 = 1'b0;
  assign _zz_101 = 1'b0;
  assign _zz_113 = 1'b0;
  assign _zz_114 = 1'b0;
  assign _zz_126 = 1'b0;
  assign _zz_127 = 1'b0;
  assign _zz_139 = 1'b0;
  assign _zz_140 = 1'b0;
  assign _zz_152 = 1'b0;
  assign _zz_153 = 1'b0;
  assign _zz_165 = 1'b0;
  assign _zz_166 = 1'b0;
  assign _zz_178 = 1'b0;
  assign _zz_179 = 1'b0;
  assign _zz_191 = 1'b0;
  assign _zz_192 = 1'b0;
  assign _zz_204 = 1'b0;
  assign _zz_205 = 1'b0;
  assign _zz_217 = 1'b0;
  assign _zz_218 = 1'b0;
  assign _zz_230 = 1'b0;
  assign _zz_231 = 1'b0;
  assign _zz_243 = 1'b0;
  assign _zz_244 = 1'b0;
  assign _zz_256 = 1'b0;
  assign _zz_257 = 1'b0;
  assign _zz_269 = 1'b0;
  assign _zz_270 = 1'b0;
  assign _zz_282 = 1'b0;
  assign _zz_283 = 1'b0;
  assign _zz_295 = 1'b0;
  assign _zz_296 = 1'b0;
  assign _zz_308 = 1'b0;
  assign _zz_309 = 1'b0;
  assign _zz_321 = 1'b0;
  assign _zz_322 = 1'b0;
  assign _zz_338 = 1'b0;
  assign _zz_339 = 1'b0;
  assign _zz_355 = 1'b0;
  assign _zz_356 = 1'b0;
  assign _zz_372 = 1'b0;
  assign _zz_373 = 1'b0;
  assign _zz_389 = 1'b0;
  assign _zz_390 = 1'b0;
  assign _zz_406 = 1'b0;
  assign _zz_407 = 1'b0;
  assign _zz_441 = 1'b0;
  assign _zz_442 = 1'b0;
  assign _zz_476 = 1'b0;
  assign _zz_477 = 1'b0;
  assign _zz_511 = 1'b0;
  assign _zz_512 = 1'b0;
  assign _zz_546 = 1'b0;
  assign _zz_547 = 1'b0;
  assign _zz_581 = 1'b0;
  assign _zz_582 = 1'b0;
  assign _zz_616 = 1'b0;
  assign _zz_617 = 1'b0;
  assign _zz_651 = 1'b0;
  assign _zz_652 = 1'b0;
  assign _zz_686 = 1'b0;
  assign _zz_687 = 1'b0;
  assign _zz_721 = 1'b0;
  assign _zz_722 = 1'b0;
  assign _zz_756 = 1'b0;
  assign _zz_757 = 1'b0;
  assign _zz_791 = 1'b0;
  assign _zz_792 = 1'b0;
  assign _zz_826 = 1'b0;
  assign _zz_827 = 1'b0;
  assign _zz_861 = 1'b0;
  assign _zz_862 = 1'b0;
  assign _zz_896 = 1'b0;
  assign _zz_897 = 1'b0;
  assign _zz_931 = 1'b0;
  assign _zz_932 = 1'b0;
  always @ (posedge CLKOUT1) begin
    _zz_1 <= io_ctrl_ADDR[0];
    _zz_2 <= io_ctrl_ADDR[1];
    _zz_3 <= io_ctrl_ADDR[2];
    _zz_4 <= io_ctrl_ADDR[3];
    _zz_5 <= io_ctrl_ADDR[4];
    _zz_6 <= io_ctrl_ADDR[5];
    _zz_7 <= io_ctrl_ADDR[6];
    _zz_8 <= io_ctrl_ADDR[7];
    _zz_9 <= io_ctrl_ADDR[8];
    _zz_10 <= io_ctrl_ADDR[9];
    _zz_11 <= io_ctrl_ADDR[10];
    _zz_12 <= io_ctrl_ADDR[11];
    _zz_13 <= io_ctrl_ADDR[12];
    _zz_14 <= io_ctrl_BA[0];
    _zz_15 <= io_ctrl_BA[1];
    _zz_16 <= io_ctrl_BA[2];
    io_ctrl_phases_0_CASn_regNext <= io_ctrl_phases_0_CASn;
    io_ctrl_phases_1_CASn_regNext <= io_ctrl_phases_1_CASn;
    io_ctrl_phases_0_CKE_regNext <= io_ctrl_phases_0_CKE;
    io_ctrl_phases_1_CKE_regNext <= io_ctrl_phases_1_CKE;
    io_ctrl_phases_0_CSn_regNext <= io_ctrl_phases_0_CSn;
    io_ctrl_phases_1_CSn_regNext <= io_ctrl_phases_1_CSn;
    io_ctrl_phases_0_RASn_regNext <= io_ctrl_phases_0_RASn;
    io_ctrl_phases_1_RASn_regNext <= io_ctrl_phases_1_RASn;
    io_ctrl_phases_0_WEn_regNext <= io_ctrl_phases_0_WEn;
    io_ctrl_phases_1_WEn_regNext <= io_ctrl_phases_1_WEn;
    io_ctrl_phases_0_ODT_regNext <= io_ctrl_phases_0_ODT;
    io_ctrl_phases_1_ODT_regNext <= io_ctrl_phases_1_ODT;
    dqReg_0_0 <= io_ctrl_phases_0_DQw_0;
    dqReg_0_1 <= io_ctrl_phases_0_DQw_1;
    dqReg_1_0 <= io_ctrl_phases_1_DQw_0;
    dqReg_1_1 <= io_ctrl_phases_1_DQw_1;
    dmReg_0_0 <= io_ctrl_phases_0_DM_0;
    dmReg_0_1 <= io_ctrl_phases_0_DM_1;
    dmReg_1_0 <= io_ctrl_phases_1_DM_0;
    dmReg_1_1 <= io_ctrl_phases_1_DM_1;
  end

  always @ (posedge CLKOUT1) begin
    if(sdramCd_logic_outputReset) begin
      dqe0Reg <= 1'b0;
    end else begin
      dqe0Reg <= io_ctrl_writeEnable;
    end
  end

  always @ (negedge CLKOUT2) begin
    if(clk270Rst) begin
      dqe270Reg <= 1'b0;
      dqstReg_0 <= 1'b0;
      dqstReg_1 <= 1'b0;
      dqstReg_2 <= 1'b0;
      dqstReg_3 <= 1'b0;
    end else begin
      dqe270Reg <= io_ctrl_writeEnable;
      dqstReg_0 <= _zz_17[3];
      dqstReg_1 <= _zz_17[2];
      dqstReg_2 <= _zz_17[1];
      dqstReg_3 <= _zz_17[0];
    end
  end


endmodule

module CtrlWithoutPhyBmb (
  input               io_bmb_0_cmd_valid,
  output              io_bmb_0_cmd_ready,
  input               io_bmb_0_cmd_payload_last,
  input      [4:0]    io_bmb_0_cmd_payload_fragment_source,
  input      [0:0]    io_bmb_0_cmd_payload_fragment_opcode,
  input      [26:0]   io_bmb_0_cmd_payload_fragment_address,
  input      [5:0]    io_bmb_0_cmd_payload_fragment_length,
  input      [63:0]   io_bmb_0_cmd_payload_fragment_data,
  input      [7:0]    io_bmb_0_cmd_payload_fragment_mask,
  output              io_bmb_0_rsp_valid,
  input               io_bmb_0_rsp_ready,
  output              io_bmb_0_rsp_payload_last,
  output     [4:0]    io_bmb_0_rsp_payload_fragment_source,
  output     [0:0]    io_bmb_0_rsp_payload_fragment_opcode,
  output     [63:0]   io_bmb_0_rsp_payload_fragment_data,
  input               io_ctrl_cmd_valid,
  output              io_ctrl_cmd_ready,
  input               io_ctrl_cmd_payload_last,
  input      [0:0]    io_ctrl_cmd_payload_fragment_source,
  input      [0:0]    io_ctrl_cmd_payload_fragment_opcode,
  input      [11:0]   io_ctrl_cmd_payload_fragment_address,
  input      [1:0]    io_ctrl_cmd_payload_fragment_length,
  input      [31:0]   io_ctrl_cmd_payload_fragment_data,
  input      [3:0]    io_ctrl_cmd_payload_fragment_mask,
  input      [6:0]    io_ctrl_cmd_payload_fragment_context,
  output              io_ctrl_rsp_valid,
  input               io_ctrl_rsp_ready,
  output              io_ctrl_rsp_payload_last,
  output     [0:0]    io_ctrl_rsp_payload_fragment_source,
  output     [0:0]    io_ctrl_rsp_payload_fragment_opcode,
  output     [31:0]   io_ctrl_rsp_payload_fragment_data,
  output     [6:0]    io_ctrl_rsp_payload_fragment_context,
  output              io_phy_phases_0_CASn,
  output              io_phy_phases_0_CKE,
  output              io_phy_phases_0_CSn,
  output              io_phy_phases_0_RASn,
  output              io_phy_phases_0_WEn,
  output              io_phy_phases_0_ODT,
  output     [1:0]    io_phy_phases_0_DM_0,
  output     [1:0]    io_phy_phases_0_DM_1,
  output     [15:0]   io_phy_phases_0_DQw_0,
  output     [15:0]   io_phy_phases_0_DQw_1,
  input      [15:0]   io_phy_phases_0_DQr_0,
  input      [15:0]   io_phy_phases_0_DQr_1,
  output              io_phy_phases_1_CASn,
  output              io_phy_phases_1_CKE,
  output              io_phy_phases_1_CSn,
  output              io_phy_phases_1_RASn,
  output              io_phy_phases_1_WEn,
  output              io_phy_phases_1_ODT,
  output     [1:0]    io_phy_phases_1_DM_0,
  output     [1:0]    io_phy_phases_1_DM_1,
  output     [15:0]   io_phy_phases_1_DQw_0,
  output     [15:0]   io_phy_phases_1_DQw_1,
  input      [15:0]   io_phy_phases_1_DQr_0,
  input      [15:0]   io_phy_phases_1_DQr_1,
  output     [12:0]   io_phy_ADDR,
  output     [2:0]    io_phy_BA,
  output              io_phy_DQS_preamble,
  output              io_phy_DQS_active,
  output              io_phy_DQS_postamble,
  output              io_phy_writeEnable,
  output              io_phy_readEnable,
  input               io_phy_readValid,
  input               CLKOUT0,
  input               systemCd_logic_outputReset,
  input               CLKOUT1,
  input               sdramCd_logic_outputReset
);
  wire                bmbAdapter_0_io_input_cmd_ready;
  wire                bmbAdapter_0_io_input_rsp_valid;
  wire                bmbAdapter_0_io_input_rsp_payload_last;
  wire       [4:0]    bmbAdapter_0_io_input_rsp_payload_fragment_source;
  wire       [0:0]    bmbAdapter_0_io_input_rsp_payload_fragment_opcode;
  wire       [63:0]   bmbAdapter_0_io_input_rsp_payload_fragment_data;
  wire       [0:0]    bmbAdapter_0_io_output_writeDataTocken;
  wire                bmbAdapter_0_io_output_cmd_valid;
  wire                bmbAdapter_0_io_output_cmd_payload_write;
  wire       [26:0]   bmbAdapter_0_io_output_cmd_payload_address;
  wire       [11:0]   bmbAdapter_0_io_output_cmd_payload_context;
  wire                bmbAdapter_0_io_output_cmd_payload_burstLast;
  wire       [2:0]    bmbAdapter_0_io_output_cmd_payload_length;
  wire                bmbAdapter_0_io_output_writeData_valid;
  wire       [63:0]   bmbAdapter_0_io_output_writeData_payload_data;
  wire       [7:0]    bmbAdapter_0_io_output_writeData_payload_mask;
  wire       [0:0]    bmbAdapter_0_io_output_writeDataAdded;
  wire                bmbAdapter_0_io_output_rsp_ready;
  wire                core_2_io_ports_0_cmd_ready;
  wire                core_2_io_ports_0_writeData_ready;
  wire                core_2_io_ports_0_rsp_valid;
  wire                core_2_io_ports_0_rsp_payload_last;
  wire       [63:0]   core_2_io_ports_0_rsp_payload_fragment_data;
  wire       [11:0]   core_2_io_ports_0_rsp_payload_fragment_context;
  wire                core_2_io_phy_phases_0_CASn;
  wire                core_2_io_phy_phases_0_CKE;
  wire                core_2_io_phy_phases_0_CSn;
  wire       [1:0]    core_2_io_phy_phases_0_DM_0;
  wire       [1:0]    core_2_io_phy_phases_0_DM_1;
  wire                core_2_io_phy_phases_0_RASn;
  wire                core_2_io_phy_phases_0_WEn;
  wire       [15:0]   core_2_io_phy_phases_0_DQw_0;
  wire       [15:0]   core_2_io_phy_phases_0_DQw_1;
  wire                core_2_io_phy_phases_0_ODT;
  wire                core_2_io_phy_phases_1_CASn;
  wire                core_2_io_phy_phases_1_CKE;
  wire                core_2_io_phy_phases_1_CSn;
  wire       [1:0]    core_2_io_phy_phases_1_DM_0;
  wire       [1:0]    core_2_io_phy_phases_1_DM_1;
  wire                core_2_io_phy_phases_1_RASn;
  wire                core_2_io_phy_phases_1_WEn;
  wire       [15:0]   core_2_io_phy_phases_1_DQw_0;
  wire       [15:0]   core_2_io_phy_phases_1_DQw_1;
  wire                core_2_io_phy_phases_1_ODT;
  wire       [12:0]   core_2_io_phy_ADDR;
  wire       [2:0]    core_2_io_phy_BA;
  wire                core_2_io_phy_readEnable;
  wire                core_2_io_phy_writeEnable;
  wire                core_2_io_phy_DQS_preamble;
  wire                core_2_io_phy_DQS_active;
  wire                core_2_io_phy_DQS_postamble;
  wire                core_2_io_refresh;
  wire       [0:0]    _zz_38;
  wire       [0:0]    _zz_39;
  wire       [0:0]    _zz_40;
  wire       [0:0]    _zz_41;
  wire       [0:0]    _zz_42;
  wire       [0:0]    _zz_43;
  wire       [0:0]    _zz_44;
  wire                mapper_readHaltTrigger;
  wire                mapper_writeHaltTrigger;
  wire                mapper_rsp_valid;
  wire                mapper_rsp_ready;
  wire                mapper_rsp_payload_last;
  wire       [0:0]    mapper_rsp_payload_fragment_source;
  wire       [0:0]    mapper_rsp_payload_fragment_opcode;
  wire       [31:0]   mapper_rsp_payload_fragment_data;
  wire       [6:0]    mapper_rsp_payload_fragment_context;
  wire                _zz_1;
  wire                _zz_2;
  wire                _zz_3;
  reg                 _zz_4;
  reg                 _zz_5;
  reg        [0:0]    _zz_6;
  reg        [0:0]    _zz_7;
  reg        [31:0]   _zz_8;
  reg        [6:0]    _zz_9;
  wire                mapper_askWrite;
  wire                mapper_askRead;
  wire                mapper_doWrite;
  wire                mapper_doRead;
  reg                 _zz_10;
  reg                 _zz_11;
  reg        [0:0]    _zz_12;
  reg        [0:0]    _zz_13;
  reg        [0:0]    _zz_14;
  reg        [0:0]    _zz_15;
  reg        [0:0]    _zz_16 = 1'b0;
  reg        [15:0]   _zz_17 = 16'b0000000000000000;
  reg        [3:0]    _zz_18 = 4'b0000;
  reg        [3:0]    _zz_19 = 4'b0000;
  reg        [6:0]    _zz_20 = 7'b0000000;
  reg        [3:0]    _zz_21 = 4'b0000;
  reg        [3:0]    _zz_22 = 4'b0000;
  reg        [3:0]    _zz_23 = 4'b0000;
  reg        [3:0]    _zz_24 = 4'b0000;
  reg        [3:0]    _zz_25 = 4'b0000;
  reg        [3:0]    _zz_26 = 4'b0000;
  reg        [3:0]    _zz_27 = 4'b0000;
  reg        [3:0]    _zz_28 = 4'b0000;
  reg        [1:0]    _zz_29 = 2'b00;
  reg                 _zz_30;
  reg                 _zz_30_regNext;
  reg                 _zz_31;
  reg                 _zz_32;
  reg                 _zz_33;
  reg                 _zz_34;
  reg        [12:0]   _zz_35;
  reg        [2:0]    _zz_36;
  reg                 _zz_37;

  assign _zz_38 = io_ctrl_cmd_payload_fragment_data[0 : 0];
  assign _zz_39 = io_ctrl_cmd_payload_fragment_data[1 : 1];
  assign _zz_40 = io_ctrl_cmd_payload_fragment_data[1 : 1];
  assign _zz_41 = io_ctrl_cmd_payload_fragment_data[2 : 2];
  assign _zz_42 = io_ctrl_cmd_payload_fragment_data[3 : 3];
  assign _zz_43 = io_ctrl_cmd_payload_fragment_data[4 : 4];
  assign _zz_44 = io_ctrl_cmd_payload_fragment_data[1 : 1];
  BmbAdapter bmbAdapter_0 (
    .io_refresh                                (core_2_io_refresh                                       ), //i
    .io_input_cmd_valid                        (io_bmb_0_cmd_valid                                      ), //i
    .io_input_cmd_ready                        (bmbAdapter_0_io_input_cmd_ready                         ), //o
    .io_input_cmd_payload_last                 (io_bmb_0_cmd_payload_last                               ), //i
    .io_input_cmd_payload_fragment_source      (io_bmb_0_cmd_payload_fragment_source[4:0]               ), //i
    .io_input_cmd_payload_fragment_opcode      (io_bmb_0_cmd_payload_fragment_opcode                    ), //i
    .io_input_cmd_payload_fragment_address     (io_bmb_0_cmd_payload_fragment_address[26:0]             ), //i
    .io_input_cmd_payload_fragment_length      (io_bmb_0_cmd_payload_fragment_length[5:0]               ), //i
    .io_input_cmd_payload_fragment_data        (io_bmb_0_cmd_payload_fragment_data[63:0]                ), //i
    .io_input_cmd_payload_fragment_mask        (io_bmb_0_cmd_payload_fragment_mask[7:0]                 ), //i
    .io_input_rsp_valid                        (bmbAdapter_0_io_input_rsp_valid                         ), //o
    .io_input_rsp_ready                        (io_bmb_0_rsp_ready                                      ), //i
    .io_input_rsp_payload_last                 (bmbAdapter_0_io_input_rsp_payload_last                  ), //o
    .io_input_rsp_payload_fragment_source      (bmbAdapter_0_io_input_rsp_payload_fragment_source[4:0]  ), //o
    .io_input_rsp_payload_fragment_opcode      (bmbAdapter_0_io_input_rsp_payload_fragment_opcode       ), //o
    .io_input_rsp_payload_fragment_data        (bmbAdapter_0_io_input_rsp_payload_fragment_data[63:0]   ), //o
    .io_output_cmd_valid                       (bmbAdapter_0_io_output_cmd_valid                        ), //o
    .io_output_cmd_ready                       (core_2_io_ports_0_cmd_ready                             ), //i
    .io_output_cmd_payload_write               (bmbAdapter_0_io_output_cmd_payload_write                ), //o
    .io_output_cmd_payload_address             (bmbAdapter_0_io_output_cmd_payload_address[26:0]        ), //o
    .io_output_cmd_payload_context             (bmbAdapter_0_io_output_cmd_payload_context[11:0]        ), //o
    .io_output_cmd_payload_burstLast           (bmbAdapter_0_io_output_cmd_payload_burstLast            ), //o
    .io_output_cmd_payload_length              (bmbAdapter_0_io_output_cmd_payload_length[2:0]          ), //o
    .io_output_writeData_valid                 (bmbAdapter_0_io_output_writeData_valid                  ), //o
    .io_output_writeData_ready                 (core_2_io_ports_0_writeData_ready                       ), //i
    .io_output_writeData_payload_data          (bmbAdapter_0_io_output_writeData_payload_data[63:0]     ), //o
    .io_output_writeData_payload_mask          (bmbAdapter_0_io_output_writeData_payload_mask[7:0]      ), //o
    .io_output_writeDataTocken                 (bmbAdapter_0_io_output_writeDataTocken                  ), //o
    .io_output_rsp_valid                       (core_2_io_ports_0_rsp_valid                             ), //i
    .io_output_rsp_ready                       (bmbAdapter_0_io_output_rsp_ready                        ), //o
    .io_output_rsp_payload_last                (core_2_io_ports_0_rsp_payload_last                      ), //i
    .io_output_rsp_payload_fragment_data       (core_2_io_ports_0_rsp_payload_fragment_data[63:0]       ), //i
    .io_output_rsp_payload_fragment_context    (core_2_io_ports_0_rsp_payload_fragment_context[11:0]    ), //i
    .io_output_writeDataAdded                  (bmbAdapter_0_io_output_writeDataAdded                   ), //o
    .CLKOUT0                                   (CLKOUT0                                                 ), //i
    .systemCd_logic_outputReset                (systemCd_logic_outputReset                              ), //i
    .CLKOUT1                                   (CLKOUT1                                                 ), //i
    .sdramCd_logic_outputReset                 (sdramCd_logic_outputReset                               )  //i
  );
  Core core_2 (
    .io_config_readLatency                      (_zz_16                                                ), //i
    .io_config_RAS                              (_zz_18[3:0]                                           ), //i
    .io_config_RP                               (_zz_19[3:0]                                           ), //i
    .io_config_WR                               (_zz_26[3:0]                                           ), //i
    .io_config_RCD                              (_zz_22[3:0]                                           ), //i
    .io_config_WTR                              (_zz_25[3:0]                                           ), //i
    .io_config_RTP                              (_zz_24[3:0]                                           ), //i
    .io_config_RRD                              (_zz_21[3:0]                                           ), //i
    .io_config_RTW                              (_zz_23[3:0]                                           ), //i
    .io_config_RFC                              (_zz_20[6:0]                                           ), //i
    .io_config_ODT                              (_zz_28[3:0]                                           ), //i
    .io_config_ODTend                           (_zz_29[1:0]                                           ), //i
    .io_config_FAW                              (_zz_27[3:0]                                           ), //i
    .io_config_REF                              (_zz_17[15:0]                                          ), //i
    .io_config_autoRefresh                      (_zz_10                                                ), //i
    .io_config_noActive                         (_zz_11                                                ), //i
    .io_config_phase_active                     (_zz_14                                                ), //i
    .io_config_phase_precharge                  (_zz_15                                                ), //i
    .io_config_phase_read                       (_zz_13                                                ), //i
    .io_config_phase_write                      (_zz_12                                                ), //i
    .io_soft_cmd_valid                          (_zz_30_regNext                                        ), //i
    .io_soft_cmd_payload_ADDR                   (_zz_35[12:0]                                          ), //i
    .io_soft_cmd_payload_BA                     (_zz_36[2:0]                                           ), //i
    .io_soft_cmd_payload_CASn                   (_zz_33                                                ), //i
    .io_soft_cmd_payload_CSn                    (_zz_31                                                ), //i
    .io_soft_cmd_payload_RASn                   (_zz_32                                                ), //i
    .io_soft_cmd_payload_WEn                    (_zz_34                                                ), //i
    .io_soft_CKE                                (_zz_37                                                ), //i
    .io_ports_0_cmd_valid                       (bmbAdapter_0_io_output_cmd_valid                      ), //i
    .io_ports_0_cmd_ready                       (core_2_io_ports_0_cmd_ready                           ), //o
    .io_ports_0_cmd_payload_write               (bmbAdapter_0_io_output_cmd_payload_write              ), //i
    .io_ports_0_cmd_payload_address             (bmbAdapter_0_io_output_cmd_payload_address[26:0]      ), //i
    .io_ports_0_cmd_payload_context             (bmbAdapter_0_io_output_cmd_payload_context[11:0]      ), //i
    .io_ports_0_cmd_payload_burstLast           (bmbAdapter_0_io_output_cmd_payload_burstLast          ), //i
    .io_ports_0_cmd_payload_length              (bmbAdapter_0_io_output_cmd_payload_length[2:0]        ), //i
    .io_ports_0_writeData_valid                 (bmbAdapter_0_io_output_writeData_valid                ), //i
    .io_ports_0_writeData_ready                 (core_2_io_ports_0_writeData_ready                     ), //o
    .io_ports_0_writeData_payload_data          (bmbAdapter_0_io_output_writeData_payload_data[63:0]   ), //i
    .io_ports_0_writeData_payload_mask          (bmbAdapter_0_io_output_writeData_payload_mask[7:0]    ), //i
    .io_ports_0_writeDataTocken                 (bmbAdapter_0_io_output_writeDataTocken                ), //i
    .io_ports_0_rsp_valid                       (core_2_io_ports_0_rsp_valid                           ), //o
    .io_ports_0_rsp_ready                       (bmbAdapter_0_io_output_rsp_ready                      ), //i
    .io_ports_0_rsp_payload_last                (core_2_io_ports_0_rsp_payload_last                    ), //o
    .io_ports_0_rsp_payload_fragment_data       (core_2_io_ports_0_rsp_payload_fragment_data[63:0]     ), //o
    .io_ports_0_rsp_payload_fragment_context    (core_2_io_ports_0_rsp_payload_fragment_context[11:0]  ), //o
    .io_ports_0_writeDataAdded                  (bmbAdapter_0_io_output_writeDataAdded                 ), //i
    .io_phy_phases_0_CASn                       (core_2_io_phy_phases_0_CASn                           ), //o
    .io_phy_phases_0_CKE                        (core_2_io_phy_phases_0_CKE                            ), //o
    .io_phy_phases_0_CSn                        (core_2_io_phy_phases_0_CSn                            ), //o
    .io_phy_phases_0_RASn                       (core_2_io_phy_phases_0_RASn                           ), //o
    .io_phy_phases_0_WEn                        (core_2_io_phy_phases_0_WEn                            ), //o
    .io_phy_phases_0_ODT                        (core_2_io_phy_phases_0_ODT                            ), //o
    .io_phy_phases_0_DM_0                       (core_2_io_phy_phases_0_DM_0[1:0]                      ), //o
    .io_phy_phases_0_DM_1                       (core_2_io_phy_phases_0_DM_1[1:0]                      ), //o
    .io_phy_phases_0_DQw_0                      (core_2_io_phy_phases_0_DQw_0[15:0]                    ), //o
    .io_phy_phases_0_DQw_1                      (core_2_io_phy_phases_0_DQw_1[15:0]                    ), //o
    .io_phy_phases_0_DQr_0                      (io_phy_phases_0_DQr_0[15:0]                           ), //i
    .io_phy_phases_0_DQr_1                      (io_phy_phases_0_DQr_1[15:0]                           ), //i
    .io_phy_phases_1_CASn                       (core_2_io_phy_phases_1_CASn                           ), //o
    .io_phy_phases_1_CKE                        (core_2_io_phy_phases_1_CKE                            ), //o
    .io_phy_phases_1_CSn                        (core_2_io_phy_phases_1_CSn                            ), //o
    .io_phy_phases_1_RASn                       (core_2_io_phy_phases_1_RASn                           ), //o
    .io_phy_phases_1_WEn                        (core_2_io_phy_phases_1_WEn                            ), //o
    .io_phy_phases_1_ODT                        (core_2_io_phy_phases_1_ODT                            ), //o
    .io_phy_phases_1_DM_0                       (core_2_io_phy_phases_1_DM_0[1:0]                      ), //o
    .io_phy_phases_1_DM_1                       (core_2_io_phy_phases_1_DM_1[1:0]                      ), //o
    .io_phy_phases_1_DQw_0                      (core_2_io_phy_phases_1_DQw_0[15:0]                    ), //o
    .io_phy_phases_1_DQw_1                      (core_2_io_phy_phases_1_DQw_1[15:0]                    ), //o
    .io_phy_phases_1_DQr_0                      (io_phy_phases_1_DQr_0[15:0]                           ), //i
    .io_phy_phases_1_DQr_1                      (io_phy_phases_1_DQr_1[15:0]                           ), //i
    .io_phy_ADDR                                (core_2_io_phy_ADDR[12:0]                              ), //o
    .io_phy_BA                                  (core_2_io_phy_BA[2:0]                                 ), //o
    .io_phy_DQS_preamble                        (core_2_io_phy_DQS_preamble                            ), //o
    .io_phy_DQS_active                          (core_2_io_phy_DQS_active                              ), //o
    .io_phy_DQS_postamble                       (core_2_io_phy_DQS_postamble                           ), //o
    .io_phy_writeEnable                         (core_2_io_phy_writeEnable                             ), //o
    .io_phy_readEnable                          (core_2_io_phy_readEnable                              ), //o
    .io_phy_readValid                           (io_phy_readValid                                      ), //i
    .io_refresh                                 (core_2_io_refresh                                     ), //o
    .CLKOUT1                                    (CLKOUT1                                               ), //i
    .sdramCd_logic_outputReset                  (sdramCd_logic_outputReset                             )  //i
  );
  assign io_bmb_0_cmd_ready = bmbAdapter_0_io_input_cmd_ready;
  assign io_bmb_0_rsp_valid = bmbAdapter_0_io_input_rsp_valid;
  assign io_bmb_0_rsp_payload_last = bmbAdapter_0_io_input_rsp_payload_last;
  assign io_bmb_0_rsp_payload_fragment_source = bmbAdapter_0_io_input_rsp_payload_fragment_source;
  assign io_bmb_0_rsp_payload_fragment_opcode = bmbAdapter_0_io_input_rsp_payload_fragment_opcode;
  assign io_bmb_0_rsp_payload_fragment_data = bmbAdapter_0_io_input_rsp_payload_fragment_data;
  assign io_phy_phases_0_CASn = core_2_io_phy_phases_0_CASn;
  assign io_phy_phases_0_CKE = core_2_io_phy_phases_0_CKE;
  assign io_phy_phases_0_CSn = core_2_io_phy_phases_0_CSn;
  assign io_phy_phases_0_RASn = core_2_io_phy_phases_0_RASn;
  assign io_phy_phases_0_WEn = core_2_io_phy_phases_0_WEn;
  assign io_phy_phases_0_ODT = core_2_io_phy_phases_0_ODT;
  assign io_phy_phases_0_DM_0 = core_2_io_phy_phases_0_DM_0;
  assign io_phy_phases_0_DM_1 = core_2_io_phy_phases_0_DM_1;
  assign io_phy_phases_0_DQw_0 = core_2_io_phy_phases_0_DQw_0;
  assign io_phy_phases_0_DQw_1 = core_2_io_phy_phases_0_DQw_1;
  assign io_phy_phases_1_CASn = core_2_io_phy_phases_1_CASn;
  assign io_phy_phases_1_CKE = core_2_io_phy_phases_1_CKE;
  assign io_phy_phases_1_CSn = core_2_io_phy_phases_1_CSn;
  assign io_phy_phases_1_RASn = core_2_io_phy_phases_1_RASn;
  assign io_phy_phases_1_WEn = core_2_io_phy_phases_1_WEn;
  assign io_phy_phases_1_ODT = core_2_io_phy_phases_1_ODT;
  assign io_phy_phases_1_DM_0 = core_2_io_phy_phases_1_DM_0;
  assign io_phy_phases_1_DM_1 = core_2_io_phy_phases_1_DM_1;
  assign io_phy_phases_1_DQw_0 = core_2_io_phy_phases_1_DQw_0;
  assign io_phy_phases_1_DQw_1 = core_2_io_phy_phases_1_DQw_1;
  assign io_phy_ADDR = core_2_io_phy_ADDR;
  assign io_phy_BA = core_2_io_phy_BA;
  assign io_phy_DQS_preamble = core_2_io_phy_DQS_preamble;
  assign io_phy_DQS_active = core_2_io_phy_DQS_active;
  assign io_phy_DQS_postamble = core_2_io_phy_DQS_postamble;
  assign io_phy_writeEnable = core_2_io_phy_writeEnable;
  assign io_phy_readEnable = core_2_io_phy_readEnable;
  assign mapper_readHaltTrigger = 1'b0;
  assign mapper_writeHaltTrigger = 1'b0;
  assign _zz_1 = (! (mapper_readHaltTrigger || mapper_writeHaltTrigger));
  assign mapper_rsp_ready = (_zz_2 && _zz_1);
  assign _zz_2 = ((1'b1 && (! _zz_3)) || io_ctrl_rsp_ready);
  assign _zz_3 = _zz_4;
  assign io_ctrl_rsp_valid = _zz_3;
  assign io_ctrl_rsp_payload_last = _zz_5;
  assign io_ctrl_rsp_payload_fragment_source = _zz_6;
  assign io_ctrl_rsp_payload_fragment_opcode = _zz_7;
  assign io_ctrl_rsp_payload_fragment_data = _zz_8;
  assign io_ctrl_rsp_payload_fragment_context = _zz_9;
  assign mapper_askWrite = (io_ctrl_cmd_valid && (io_ctrl_cmd_payload_fragment_opcode == 1'b1));
  assign mapper_askRead = (io_ctrl_cmd_valid && (io_ctrl_cmd_payload_fragment_opcode == 1'b0));
  assign mapper_doWrite = ((io_ctrl_cmd_valid && io_ctrl_cmd_ready) && (io_ctrl_cmd_payload_fragment_opcode == 1'b1));
  assign mapper_doRead = ((io_ctrl_cmd_valid && io_ctrl_cmd_ready) && (io_ctrl_cmd_payload_fragment_opcode == 1'b0));
  assign mapper_rsp_valid = io_ctrl_cmd_valid;
  assign io_ctrl_cmd_ready = mapper_rsp_ready;
  assign mapper_rsp_payload_last = 1'b1;
  assign mapper_rsp_payload_fragment_opcode = 1'b0;
  assign mapper_rsp_payload_fragment_data = 32'h0;
  assign mapper_rsp_payload_fragment_context = io_ctrl_cmd_payload_fragment_context;
  assign mapper_rsp_payload_fragment_source = io_ctrl_cmd_payload_fragment_source;
  always @ (*) begin
    _zz_30 = 1'b0;
    case(io_ctrl_cmd_payload_fragment_address)
      12'h100 : begin
        if(mapper_doWrite)begin
          _zz_30 = 1'b1;
        end
      end
      default : begin
      end
    endcase
  end

  always @ (posedge CLKOUT1) begin
    if(sdramCd_logic_outputReset) begin
      _zz_4 <= 1'b0;
      _zz_10 <= 1'b0;
      _zz_11 <= 1'b0;
      _zz_30_regNext <= 1'b0;
      _zz_37 <= 1'b0;
    end else begin
      if(_zz_2)begin
        _zz_4 <= (mapper_rsp_valid && _zz_1);
      end
      _zz_30_regNext <= _zz_30;
      case(io_ctrl_cmd_payload_fragment_address)
        12'h0 : begin
          if(mapper_doWrite)begin
            _zz_10 <= _zz_38[0];
            _zz_11 <= _zz_39[0];
          end
        end
        12'h110 : begin
          if(mapper_doWrite)begin
            _zz_37 <= _zz_44[0];
          end
        end
        default : begin
        end
      endcase
    end
  end

  always @ (posedge CLKOUT1) begin
    if(_zz_2)begin
      _zz_5 <= mapper_rsp_payload_last;
      _zz_6 <= mapper_rsp_payload_fragment_source;
      _zz_7 <= mapper_rsp_payload_fragment_opcode;
      _zz_8 <= mapper_rsp_payload_fragment_data;
      _zz_9 <= mapper_rsp_payload_fragment_context;
    end
    case(io_ctrl_cmd_payload_fragment_address)
      12'h004 : begin
        if(mapper_doWrite)begin
          _zz_12 <= io_ctrl_cmd_payload_fragment_data[0 : 0];
          _zz_13 <= io_ctrl_cmd_payload_fragment_data[8 : 8];
          _zz_14 <= io_ctrl_cmd_payload_fragment_data[16 : 16];
          _zz_15 <= io_ctrl_cmd_payload_fragment_data[24 : 24];
        end
      end
      12'h00c : begin
        if(mapper_doWrite)begin
          _zz_16 <= io_ctrl_cmd_payload_fragment_data[0 : 0];
        end
      end
      12'h010 : begin
        if(mapper_doWrite)begin
          _zz_17 <= io_ctrl_cmd_payload_fragment_data[15 : 0];
        end
      end
      12'h020 : begin
        if(mapper_doWrite)begin
          _zz_18 <= io_ctrl_cmd_payload_fragment_data[3 : 0];
          _zz_19 <= io_ctrl_cmd_payload_fragment_data[11 : 8];
          _zz_20 <= io_ctrl_cmd_payload_fragment_data[22 : 16];
          _zz_21 <= io_ctrl_cmd_payload_fragment_data[27 : 24];
        end
      end
      12'h024 : begin
        if(mapper_doWrite)begin
          _zz_22 <= io_ctrl_cmd_payload_fragment_data[3 : 0];
        end
      end
      12'h028 : begin
        if(mapper_doWrite)begin
          _zz_23 <= io_ctrl_cmd_payload_fragment_data[3 : 0];
          _zz_24 <= io_ctrl_cmd_payload_fragment_data[11 : 8];
          _zz_25 <= io_ctrl_cmd_payload_fragment_data[19 : 16];
          _zz_26 <= io_ctrl_cmd_payload_fragment_data[27 : 24];
        end
      end
      12'h030 : begin
        if(mapper_doWrite)begin
          _zz_27 <= io_ctrl_cmd_payload_fragment_data[3 : 0];
        end
      end
      12'h034 : begin
        if(mapper_doWrite)begin
          _zz_28 <= io_ctrl_cmd_payload_fragment_data[3 : 0];
          _zz_29 <= io_ctrl_cmd_payload_fragment_data[9 : 8];
        end
      end
      12'h104 : begin
        if(mapper_doWrite)begin
          _zz_31 <= _zz_40[0];
          _zz_32 <= _zz_41[0];
          _zz_33 <= _zz_42[0];
          _zz_34 <= _zz_43[0];
        end
      end
      12'h108 : begin
        if(mapper_doWrite)begin
          _zz_35 <= io_ctrl_cmd_payload_fragment_data[12 : 0];
        end
      end
      12'h10c : begin
        if(mapper_doWrite)begin
          _zz_36 <= io_ctrl_cmd_payload_fragment_data[2 : 0];
        end
      end
      default : begin
      end
    endcase
  end


endmodule

module BmbSyncRemover (
  input               io_input_cmd_valid,
  output              io_input_cmd_ready,
  input               io_input_cmd_payload_last,
  input      [0:0]    io_input_cmd_payload_fragment_opcode,
  input      [31:0]   io_input_cmd_payload_fragment_address,
  input      [1:0]    io_input_cmd_payload_fragment_length,
  input      [63:0]   io_input_cmd_payload_fragment_data,
  input      [7:0]    io_input_cmd_payload_fragment_mask,
  output              io_input_rsp_valid,
  input               io_input_rsp_ready,
  output              io_input_rsp_payload_last,
  output     [0:0]    io_input_rsp_payload_fragment_opcode,
  output     [63:0]   io_input_rsp_payload_fragment_data,
  output              io_output_cmd_valid,
  input               io_output_cmd_ready,
  output              io_output_cmd_payload_last,
  output     [0:0]    io_output_cmd_payload_fragment_opcode,
  output     [31:0]   io_output_cmd_payload_fragment_address,
  output     [1:0]    io_output_cmd_payload_fragment_length,
  output     [63:0]   io_output_cmd_payload_fragment_data,
  output     [7:0]    io_output_cmd_payload_fragment_mask,
  input               io_output_rsp_valid,
  output              io_output_rsp_ready,
  input               io_output_rsp_payload_last,
  input      [0:0]    io_output_rsp_payload_fragment_opcode,
  input      [63:0]   io_output_rsp_payload_fragment_data,
  input               io_output_sync_valid,
  output              io_output_sync_ready,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  wire                _zz_4;
  wire                _zz_5;
  wire                _zz_6;
  wire                _zz_7;
  wire                io_input_cmd_fork_io_input_ready;
  wire                io_input_cmd_fork_io_outputs_0_valid;
  wire                io_input_cmd_fork_io_outputs_0_payload_last;
  wire       [0:0]    io_input_cmd_fork_io_outputs_0_payload_fragment_opcode;
  wire       [31:0]   io_input_cmd_fork_io_outputs_0_payload_fragment_address;
  wire       [1:0]    io_input_cmd_fork_io_outputs_0_payload_fragment_length;
  wire       [63:0]   io_input_cmd_fork_io_outputs_0_payload_fragment_data;
  wire       [7:0]    io_input_cmd_fork_io_outputs_0_payload_fragment_mask;
  wire                io_input_cmd_fork_io_outputs_1_valid;
  wire                io_input_cmd_fork_io_outputs_1_payload_last;
  wire       [0:0]    io_input_cmd_fork_io_outputs_1_payload_fragment_opcode;
  wire       [31:0]   io_input_cmd_fork_io_outputs_1_payload_fragment_address;
  wire       [1:0]    io_input_cmd_fork_io_outputs_1_payload_fragment_length;
  wire       [63:0]   io_input_cmd_fork_io_outputs_1_payload_fragment_data;
  wire       [7:0]    io_input_cmd_fork_io_outputs_1_payload_fragment_mask;
  wire                io_input_cmd_fork_io_outputs_1_translated_thrown_fifo_io_push_ready;
  wire                io_input_cmd_fork_io_outputs_1_translated_thrown_fifo_io_pop_valid;
  wire                io_input_cmd_fork_io_outputs_1_translated_thrown_fifo_io_pop_payload;
  wire       [4:0]    io_input_cmd_fork_io_outputs_1_translated_thrown_fifo_io_occupancy;
  wire                io_output_rsp_fifo_io_push_ready;
  wire                io_output_rsp_fifo_io_pop_valid;
  wire                io_output_rsp_fifo_io_pop_payload_last;
  wire       [0:0]    io_output_rsp_fifo_io_pop_payload_fragment_opcode;
  wire       [63:0]   io_output_rsp_fifo_io_pop_payload_fragment_data;
  wire       [3:0]    io_output_rsp_fifo_io_occupancy;
  wire                _zz_8;
  wire       [4:0]    _zz_9;
  wire       [0:0]    _zz_10;
  wire       [4:0]    _zz_11;
  wire       [0:0]    _zz_12;
  wire       [4:0]    _zz_13;
  wire                io_input_cmd_fork_io_outputs_1_translated_valid;
  reg                 io_input_cmd_fork_io_outputs_1_translated_ready;
  wire                io_input_cmd_fork_io_outputs_1_translated_payload;
  reg                 io_input_cmd_fork_io_outputs_1_payload_first;
  reg                 io_input_cmd_fork_io_outputs_1_translated_thrown_valid;
  wire                io_input_cmd_fork_io_outputs_1_translated_thrown_ready;
  wire                io_input_cmd_fork_io_outputs_1_translated_thrown_payload;
  wire                _zz_1;
  reg        [4:0]    _zz_2;
  wire                _zz_3;

  assign _zz_8 = (! (io_input_cmd_fork_io_outputs_1_valid && io_input_cmd_fork_io_outputs_1_payload_first));
  assign _zz_9 = (_zz_2 + _zz_11);
  assign _zz_10 = ((io_output_sync_valid && io_output_sync_ready) && 1'b1);
  assign _zz_11 = {4'd0, _zz_10};
  assign _zz_12 = (((io_output_rsp_fifo_io_pop_valid && _zz_6) && _zz_1) && io_input_cmd_fork_io_outputs_1_translated_thrown_fifo_io_pop_payload);
  assign _zz_13 = {4'd0, _zz_12};
  StreamFork_2 io_input_cmd_fork (
    .io_input_valid                           (io_input_cmd_valid                                             ), //i
    .io_input_ready                           (io_input_cmd_fork_io_input_ready                               ), //o
    .io_input_payload_last                    (io_input_cmd_payload_last                                      ), //i
    .io_input_payload_fragment_opcode         (io_input_cmd_payload_fragment_opcode                           ), //i
    .io_input_payload_fragment_address        (io_input_cmd_payload_fragment_address[31:0]                    ), //i
    .io_input_payload_fragment_length         (io_input_cmd_payload_fragment_length[1:0]                      ), //i
    .io_input_payload_fragment_data           (io_input_cmd_payload_fragment_data[63:0]                       ), //i
    .io_input_payload_fragment_mask           (io_input_cmd_payload_fragment_mask[7:0]                        ), //i
    .io_outputs_0_valid                       (io_input_cmd_fork_io_outputs_0_valid                           ), //o
    .io_outputs_0_ready                       (io_output_cmd_ready                                            ), //i
    .io_outputs_0_payload_last                (io_input_cmd_fork_io_outputs_0_payload_last                    ), //o
    .io_outputs_0_payload_fragment_opcode     (io_input_cmd_fork_io_outputs_0_payload_fragment_opcode         ), //o
    .io_outputs_0_payload_fragment_address    (io_input_cmd_fork_io_outputs_0_payload_fragment_address[31:0]  ), //o
    .io_outputs_0_payload_fragment_length     (io_input_cmd_fork_io_outputs_0_payload_fragment_length[1:0]    ), //o
    .io_outputs_0_payload_fragment_data       (io_input_cmd_fork_io_outputs_0_payload_fragment_data[63:0]     ), //o
    .io_outputs_0_payload_fragment_mask       (io_input_cmd_fork_io_outputs_0_payload_fragment_mask[7:0]      ), //o
    .io_outputs_1_valid                       (io_input_cmd_fork_io_outputs_1_valid                           ), //o
    .io_outputs_1_ready                       (io_input_cmd_fork_io_outputs_1_translated_ready                ), //i
    .io_outputs_1_payload_last                (io_input_cmd_fork_io_outputs_1_payload_last                    ), //o
    .io_outputs_1_payload_fragment_opcode     (io_input_cmd_fork_io_outputs_1_payload_fragment_opcode         ), //o
    .io_outputs_1_payload_fragment_address    (io_input_cmd_fork_io_outputs_1_payload_fragment_address[31:0]  ), //o
    .io_outputs_1_payload_fragment_length     (io_input_cmd_fork_io_outputs_1_payload_fragment_length[1:0]    ), //o
    .io_outputs_1_payload_fragment_data       (io_input_cmd_fork_io_outputs_1_payload_fragment_data[63:0]     ), //o
    .io_outputs_1_payload_fragment_mask       (io_input_cmd_fork_io_outputs_1_payload_fragment_mask[7:0]      ), //o
    .CLKOUT0                                  (CLKOUT0                                                        ), //i
    .systemCd_logic_outputReset               (systemCd_logic_outputReset                                     )  //i
  );
  StreamFifoLowLatency_1 io_input_cmd_fork_io_outputs_1_translated_thrown_fifo (
    .io_push_valid                 (io_input_cmd_fork_io_outputs_1_translated_thrown_valid                   ), //i
    .io_push_ready                 (io_input_cmd_fork_io_outputs_1_translated_thrown_fifo_io_push_ready      ), //o
    .io_push_payload               (io_input_cmd_fork_io_outputs_1_translated_thrown_payload                 ), //i
    .io_pop_valid                  (io_input_cmd_fork_io_outputs_1_translated_thrown_fifo_io_pop_valid       ), //o
    .io_pop_ready                  (_zz_4                                                                    ), //i
    .io_pop_payload                (io_input_cmd_fork_io_outputs_1_translated_thrown_fifo_io_pop_payload     ), //o
    .io_flush                      (_zz_5                                                                    ), //i
    .io_occupancy                  (io_input_cmd_fork_io_outputs_1_translated_thrown_fifo_io_occupancy[4:0]  ), //o
    .CLKOUT0                       (CLKOUT0                                                                  ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset                                               )  //i
  );
  StreamFifoLowLatency_2 io_output_rsp_fifo (
    .io_push_valid                      (io_output_rsp_valid                                    ), //i
    .io_push_ready                      (io_output_rsp_fifo_io_push_ready                       ), //o
    .io_push_payload_last               (io_output_rsp_payload_last                             ), //i
    .io_push_payload_fragment_opcode    (io_output_rsp_payload_fragment_opcode                  ), //i
    .io_push_payload_fragment_data      (io_output_rsp_payload_fragment_data[63:0]              ), //i
    .io_pop_valid                       (io_output_rsp_fifo_io_pop_valid                        ), //o
    .io_pop_ready                       (_zz_6                                                  ), //i
    .io_pop_payload_last                (io_output_rsp_fifo_io_pop_payload_last                 ), //o
    .io_pop_payload_fragment_opcode     (io_output_rsp_fifo_io_pop_payload_fragment_opcode      ), //o
    .io_pop_payload_fragment_data       (io_output_rsp_fifo_io_pop_payload_fragment_data[63:0]  ), //o
    .io_flush                           (_zz_7                                                  ), //i
    .io_occupancy                       (io_output_rsp_fifo_io_occupancy[3:0]                   ), //o
    .CLKOUT0                            (CLKOUT0                                                ), //i
    .systemCd_logic_outputReset         (systemCd_logic_outputReset                             )  //i
  );
  assign io_input_cmd_ready = io_input_cmd_fork_io_input_ready;
  assign io_output_cmd_valid = io_input_cmd_fork_io_outputs_0_valid;
  assign io_output_cmd_payload_last = io_input_cmd_fork_io_outputs_0_payload_last;
  assign io_output_cmd_payload_fragment_opcode = io_input_cmd_fork_io_outputs_0_payload_fragment_opcode;
  assign io_output_cmd_payload_fragment_address = io_input_cmd_fork_io_outputs_0_payload_fragment_address;
  assign io_output_cmd_payload_fragment_length = io_input_cmd_fork_io_outputs_0_payload_fragment_length;
  assign io_output_cmd_payload_fragment_data = io_input_cmd_fork_io_outputs_0_payload_fragment_data;
  assign io_output_cmd_payload_fragment_mask = io_input_cmd_fork_io_outputs_0_payload_fragment_mask;
  assign io_input_cmd_fork_io_outputs_1_translated_valid = io_input_cmd_fork_io_outputs_1_valid;
  assign io_input_cmd_fork_io_outputs_1_translated_payload = (io_input_cmd_fork_io_outputs_1_payload_fragment_opcode == 1'b1);
  always @ (*) begin
    io_input_cmd_fork_io_outputs_1_translated_thrown_valid = io_input_cmd_fork_io_outputs_1_translated_valid;
    if(_zz_8)begin
      io_input_cmd_fork_io_outputs_1_translated_thrown_valid = 1'b0;
    end
  end

  always @ (*) begin
    io_input_cmd_fork_io_outputs_1_translated_ready = io_input_cmd_fork_io_outputs_1_translated_thrown_ready;
    if(_zz_8)begin
      io_input_cmd_fork_io_outputs_1_translated_ready = 1'b1;
    end
  end

  assign io_input_cmd_fork_io_outputs_1_translated_thrown_payload = io_input_cmd_fork_io_outputs_1_translated_payload;
  assign io_input_cmd_fork_io_outputs_1_translated_thrown_ready = io_input_cmd_fork_io_outputs_1_translated_thrown_fifo_io_push_ready;
  assign io_output_rsp_ready = io_output_rsp_fifo_io_push_ready;
  assign _zz_1 = 1'b1;
  assign _zz_3 = ((! io_input_cmd_fork_io_outputs_1_translated_thrown_fifo_io_pop_payload) || (((_zz_2 != 5'h0) && _zz_1) != 1'b0));
  assign _zz_6 = (io_input_rsp_ready && _zz_3);
  assign io_input_rsp_valid = (io_output_rsp_fifo_io_pop_valid && _zz_3);
  assign io_input_rsp_payload_last = io_output_rsp_fifo_io_pop_payload_last;
  assign io_input_rsp_payload_fragment_opcode = io_output_rsp_fifo_io_pop_payload_fragment_opcode;
  assign io_input_rsp_payload_fragment_data = io_output_rsp_fifo_io_pop_payload_fragment_data;
  assign _zz_4 = (io_input_cmd_fork_io_outputs_1_translated_thrown_fifo_io_pop_payload && (io_output_rsp_fifo_io_pop_valid && _zz_6));
  assign io_output_sync_ready = 1'b1;
  assign _zz_5 = 1'b0;
  assign _zz_7 = 1'b0;
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      io_input_cmd_fork_io_outputs_1_payload_first <= 1'b1;
      _zz_2 <= 5'h0;
    end else begin
      if((io_input_cmd_fork_io_outputs_1_valid && io_input_cmd_fork_io_outputs_1_translated_ready))begin
        io_input_cmd_fork_io_outputs_1_payload_first <= io_input_cmd_fork_io_outputs_1_payload_last;
      end
      _zz_2 <= (_zz_9 - _zz_13);
    end
  end


endmodule

module BmbDecoder_1 (
  input               io_input_cmd_valid,
  output              io_input_cmd_ready,
  input               io_input_cmd_payload_last,
  input      [0:0]    io_input_cmd_payload_fragment_opcode,
  input      [31:0]   io_input_cmd_payload_fragment_address,
  input      [1:0]    io_input_cmd_payload_fragment_length,
  input      [63:0]   io_input_cmd_payload_fragment_data,
  input      [7:0]    io_input_cmd_payload_fragment_mask,
  output              io_input_rsp_valid,
  input               io_input_rsp_ready,
  output              io_input_rsp_payload_last,
  output     [0:0]    io_input_rsp_payload_fragment_opcode,
  output              io_outputs_0_cmd_valid,
  input               io_outputs_0_cmd_ready,
  output              io_outputs_0_cmd_payload_last,
  output     [0:0]    io_outputs_0_cmd_payload_fragment_opcode,
  output     [31:0]   io_outputs_0_cmd_payload_fragment_address,
  output     [1:0]    io_outputs_0_cmd_payload_fragment_length,
  output     [63:0]   io_outputs_0_cmd_payload_fragment_data,
  output     [7:0]    io_outputs_0_cmd_payload_fragment_mask,
  input               io_outputs_0_rsp_valid,
  output              io_outputs_0_rsp_ready,
  input               io_outputs_0_rsp_payload_last,
  input      [0:0]    io_outputs_0_rsp_payload_fragment_opcode
);

  assign io_outputs_0_cmd_valid = io_input_cmd_valid;
  assign io_input_cmd_ready = io_outputs_0_cmd_ready;
  assign io_input_rsp_valid = io_outputs_0_rsp_valid;
  assign io_outputs_0_rsp_ready = io_input_rsp_ready;
  assign io_outputs_0_cmd_payload_last = io_input_cmd_payload_last;
  assign io_input_rsp_payload_last = io_outputs_0_rsp_payload_last;
  assign io_outputs_0_cmd_payload_fragment_opcode = io_input_cmd_payload_fragment_opcode;
  assign io_outputs_0_cmd_payload_fragment_address = io_input_cmd_payload_fragment_address;
  assign io_outputs_0_cmd_payload_fragment_length = io_input_cmd_payload_fragment_length;
  assign io_outputs_0_cmd_payload_fragment_data = io_input_cmd_payload_fragment_data;
  assign io_outputs_0_cmd_payload_fragment_mask = io_input_cmd_payload_fragment_mask;
  assign io_input_rsp_payload_fragment_opcode = io_outputs_0_rsp_payload_fragment_opcode;

endmodule

module BmbOnChipRam (
  input               io_bus_cmd_valid,
  output              io_bus_cmd_ready,
  input               io_bus_cmd_payload_last,
  input      [0:0]    io_bus_cmd_payload_fragment_source,
  input      [0:0]    io_bus_cmd_payload_fragment_opcode,
  input      [12:0]   io_bus_cmd_payload_fragment_address,
  input      [1:0]    io_bus_cmd_payload_fragment_length,
  input      [31:0]   io_bus_cmd_payload_fragment_data,
  input      [3:0]    io_bus_cmd_payload_fragment_mask,
  input      [6:0]    io_bus_cmd_payload_fragment_context,
  output              io_bus_rsp_valid,
  input               io_bus_rsp_ready,
  output              io_bus_rsp_payload_last,
  output     [0:0]    io_bus_rsp_payload_fragment_source,
  output     [0:0]    io_bus_rsp_payload_fragment_opcode,
  output     [31:0]   io_bus_rsp_payload_fragment_data,
  output     [6:0]    io_bus_rsp_payload_fragment_context,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  reg        [31:0]   _zz_5;
  reg                 io_bus_cmd_valid_regNextWhen;
  reg        [0:0]    io_bus_cmd_payload_fragment_source_regNextWhen;
  reg        [6:0]    io_bus_cmd_payload_fragment_context_regNextWhen;
  wire       [10:0]   _zz_1;
  wire                _zz_2;
  wire                _zz_3;
  wire       [31:0]   _zz_4;
  reg [7:0] ram_symbol0 [0:2047];
  reg [7:0] ram_symbol1 [0:2047];
  reg [7:0] ram_symbol2 [0:2047];
  reg [7:0] ram_symbol3 [0:2047];
  reg [7:0] _zz_6;
  reg [7:0] _zz_7;
  reg [7:0] _zz_8;
  reg [7:0] _zz_9;

  initial begin
    ram_symbol0[0] = 'b10010111;
    ram_symbol1[0] = 'b00010001;
    ram_symbol2[0] = 'b00000000;
    ram_symbol3[0] = 'b00000000;
    ram_symbol0[1] = 'b10010011;
    ram_symbol1[1] = 'b10000001;
    ram_symbol2[1] = 'b00000001;
    ram_symbol3[1] = 'b00010100;
    ram_symbol0[2] = 'b00100011;
    ram_symbol1[2] = 'b10101110;
    ram_symbol2[2] = 'b00000001;
    ram_symbol3[2] = 'b10000000;
    ram_symbol0[3] = 'b01110011;
    ram_symbol1[3] = 'b00100101;
    ram_symbol2[3] = 'b01000000;
    ram_symbol3[3] = 'b11110001;
    ram_symbol0[4] = 'b01100011;
    ram_symbol1[4] = 'b00001110;
    ram_symbol2[4] = 'b00000101;
    ram_symbol3[4] = 'b00000010;
    ram_symbol0[5] = 'b00000011;
    ram_symbol1[5] = 'b10100101;
    ram_symbol2[5] = 'b11000001;
    ram_symbol3[5] = 'b10000001;
    ram_symbol0[6] = 'b11100011;
    ram_symbol1[6] = 'b00001110;
    ram_symbol2[6] = 'b00000101;
    ram_symbol3[6] = 'b11111110;
    ram_symbol0[7] = 'b00001111;
    ram_symbol1[7] = 'b00000000;
    ram_symbol2[7] = 'b00100000;
    ram_symbol3[7] = 'b00000010;
    ram_symbol0[8] = 'b00001111;
    ram_symbol1[8] = 'b00010000;
    ram_symbol2[8] = 'b00000000;
    ram_symbol3[8] = 'b00000000;
    ram_symbol0[9] = 'b10000011;
    ram_symbol1[9] = 'b10100111;
    ram_symbol2[9] = 'b10000001;
    ram_symbol3[9] = 'b10000001;
    ram_symbol0[10] = 'b00010011;
    ram_symbol1[10] = 'b00000101;
    ram_symbol2[10] = 'b00000000;
    ram_symbol3[10] = 'b00000000;
    ram_symbol0[11] = 'b10010011;
    ram_symbol1[11] = 'b00000101;
    ram_symbol2[11] = 'b00000000;
    ram_symbol3[11] = 'b00000000;
    ram_symbol0[12] = 'b00010011;
    ram_symbol1[12] = 'b00000110;
    ram_symbol2[12] = 'b00000000;
    ram_symbol3[12] = 'b00000000;
    ram_symbol0[13] = 'b01100111;
    ram_symbol1[13] = 'b10000000;
    ram_symbol2[13] = 'b00000111;
    ram_symbol3[13] = 'b00000000;
    ram_symbol0[14] = 'b00100011;
    ram_symbol1[14] = 'b10101100;
    ram_symbol2[14] = 'b10100001;
    ram_symbol3[14] = 'b10000000;
    ram_symbol0[15] = 'b00001111;
    ram_symbol1[15] = 'b00000000;
    ram_symbol2[15] = 'b00010000;
    ram_symbol3[15] = 'b00000001;
    ram_symbol0[16] = 'b00010011;
    ram_symbol1[16] = 'b00000101;
    ram_symbol2[16] = 'b00010000;
    ram_symbol3[16] = 'b00000000;
    ram_symbol0[17] = 'b00100011;
    ram_symbol1[17] = 'b10101110;
    ram_symbol2[17] = 'b10100001;
    ram_symbol3[17] = 'b10000000;
    ram_symbol0[18] = 'b01100111;
    ram_symbol1[18] = 'b10000000;
    ram_symbol2[18] = 'b00000000;
    ram_symbol3[18] = 'b00000000;
    ram_symbol0[19] = 'b00010011;
    ram_symbol1[19] = 'b10000001;
    ram_symbol2[19] = 'b00000001;
    ram_symbol3[19] = 'b10100010;
    ram_symbol0[20] = 'b00010111;
    ram_symbol1[20] = 'b00010101;
    ram_symbol2[20] = 'b00000000;
    ram_symbol3[20] = 'b00000000;
    ram_symbol0[21] = 'b00010011;
    ram_symbol1[21] = 'b00000101;
    ram_symbol2[21] = 'b10000101;
    ram_symbol3[21] = 'b10001100;
    ram_symbol0[22] = 'b10010111;
    ram_symbol1[22] = 'b00010101;
    ram_symbol2[22] = 'b00000000;
    ram_symbol3[22] = 'b00000000;
    ram_symbol0[23] = 'b10010011;
    ram_symbol1[23] = 'b10000101;
    ram_symbol2[23] = 'b00000101;
    ram_symbol3[23] = 'b10001100;
    ram_symbol0[24] = 'b00010011;
    ram_symbol1[24] = 'b10000110;
    ram_symbol2[24] = 'b01000001;
    ram_symbol3[24] = 'b10000001;
    ram_symbol0[25] = 'b01100011;
    ram_symbol1[25] = 'b11111100;
    ram_symbol2[25] = 'b11000101;
    ram_symbol3[25] = 'b00000000;
    ram_symbol0[26] = 'b10000011;
    ram_symbol1[26] = 'b00100010;
    ram_symbol2[26] = 'b00000101;
    ram_symbol3[26] = 'b00000000;
    ram_symbol0[27] = 'b00100011;
    ram_symbol1[27] = 'b10100000;
    ram_symbol2[27] = 'b01010101;
    ram_symbol3[27] = 'b00000000;
    ram_symbol0[28] = 'b00010011;
    ram_symbol1[28] = 'b00000101;
    ram_symbol2[28] = 'b01000101;
    ram_symbol3[28] = 'b00000000;
    ram_symbol0[29] = 'b10010011;
    ram_symbol1[29] = 'b10000101;
    ram_symbol2[29] = 'b01000101;
    ram_symbol3[29] = 'b00000000;
    ram_symbol0[30] = 'b11100011;
    ram_symbol1[30] = 'b11101000;
    ram_symbol2[30] = 'b11000101;
    ram_symbol3[30] = 'b11111110;
    ram_symbol0[31] = 'b00010011;
    ram_symbol1[31] = 'b10000101;
    ram_symbol2[31] = 'b01000001;
    ram_symbol3[31] = 'b10000001;
    ram_symbol0[32] = 'b10010011;
    ram_symbol1[32] = 'b10000101;
    ram_symbol2[32] = 'b00000001;
    ram_symbol3[32] = 'b10000010;
    ram_symbol0[33] = 'b01100011;
    ram_symbol1[33] = 'b01111000;
    ram_symbol2[33] = 'b10110101;
    ram_symbol3[33] = 'b00000000;
    ram_symbol0[34] = 'b00100011;
    ram_symbol1[34] = 'b00100000;
    ram_symbol2[34] = 'b00000101;
    ram_symbol3[34] = 'b00000000;
    ram_symbol0[35] = 'b00010011;
    ram_symbol1[35] = 'b00000101;
    ram_symbol2[35] = 'b01000101;
    ram_symbol3[35] = 'b00000000;
    ram_symbol0[36] = 'b11100011;
    ram_symbol1[36] = 'b01101100;
    ram_symbol2[36] = 'b10110101;
    ram_symbol3[36] = 'b11111110;
    ram_symbol0[37] = 'b11101111;
    ram_symbol1[37] = 'b00000000;
    ram_symbol2[37] = 'b00000000;
    ram_symbol3[37] = 'b01111111;
    ram_symbol0[38] = 'b11101111;
    ram_symbol1[38] = 'b00000000;
    ram_symbol2[38] = 'b11000000;
    ram_symbol3[38] = 'b00000000;
    ram_symbol0[39] = 'b01101111;
    ram_symbol1[39] = 'b00000000;
    ram_symbol2[39] = 'b00000000;
    ram_symbol3[39] = 'b00000000;
    ram_symbol0[40] = 'b01100111;
    ram_symbol1[40] = 'b10000000;
    ram_symbol2[40] = 'b00000000;
    ram_symbol3[40] = 'b00000000;
    ram_symbol0[41] = 'b01101111;
    ram_symbol1[41] = 'b00000000;
    ram_symbol2[41] = 'b01000000;
    ram_symbol3[41] = 'b00111011;
    ram_symbol0[42] = 'b10000011;
    ram_symbol1[42] = 'b11010111;
    ram_symbol2[42] = 'b01000001;
    ram_symbol3[42] = 'b10000001;
    ram_symbol0[43] = 'b10010011;
    ram_symbol1[43] = 'b11010110;
    ram_symbol2[43] = 'b00110111;
    ram_symbol3[43] = 'b00000000;
    ram_symbol0[44] = 'b00010011;
    ram_symbol1[44] = 'b11010101;
    ram_symbol2[44] = 'b00100111;
    ram_symbol3[44] = 'b00000000;
    ram_symbol0[45] = 'b00110011;
    ram_symbol1[45] = 'b01000101;
    ram_symbol2[45] = 'b11010101;
    ram_symbol3[45] = 'b00000000;
    ram_symbol0[46] = 'b00110011;
    ram_symbol1[46] = 'b11000101;
    ram_symbol2[46] = 'b10100111;
    ram_symbol3[46] = 'b00000000;
    ram_symbol0[47] = 'b10010011;
    ram_symbol1[47] = 'b11010110;
    ram_symbol2[47] = 'b01010111;
    ram_symbol3[47] = 'b00000000;
    ram_symbol0[48] = 'b00110011;
    ram_symbol1[48] = 'b01000101;
    ram_symbol2[48] = 'b11010101;
    ram_symbol3[48] = 'b00000000;
    ram_symbol0[49] = 'b10010011;
    ram_symbol1[49] = 'b11010111;
    ram_symbol2[49] = 'b00010111;
    ram_symbol3[49] = 'b00000000;
    ram_symbol0[50] = 'b00010011;
    ram_symbol1[50] = 'b00010101;
    ram_symbol2[50] = 'b11110101;
    ram_symbol3[50] = 'b00000000;
    ram_symbol0[51] = 'b00110011;
    ram_symbol1[51] = 'b01100101;
    ram_symbol2[51] = 'b11110101;
    ram_symbol3[51] = 'b00000000;
    ram_symbol0[52] = 'b00010011;
    ram_symbol1[52] = 'b00010101;
    ram_symbol2[52] = 'b00000101;
    ram_symbol3[52] = 'b00000001;
    ram_symbol0[53] = 'b00010011;
    ram_symbol1[53] = 'b01010101;
    ram_symbol2[53] = 'b00000101;
    ram_symbol3[53] = 'b00000001;
    ram_symbol0[54] = 'b00100011;
    ram_symbol1[54] = 'b10011010;
    ram_symbol2[54] = 'b10100001;
    ram_symbol3[54] = 'b10000000;
    ram_symbol0[55] = 'b01100111;
    ram_symbol1[55] = 'b10000000;
    ram_symbol2[55] = 'b00000000;
    ram_symbol3[55] = 'b00000000;
    ram_symbol0[56] = 'b00110111;
    ram_symbol1[56] = 'b00000111;
    ram_symbol2[56] = 'b00000001;
    ram_symbol3[56] = 'b00000000;
    ram_symbol0[57] = 'b10110111;
    ram_symbol1[57] = 'b00000110;
    ram_symbol2[57] = 'b00000010;
    ram_symbol3[57] = 'b00010000;
    ram_symbol0[58] = 'b00010011;
    ram_symbol1[58] = 'b00000111;
    ram_symbol2[58] = 'b11110111;
    ram_symbol3[58] = 'b11111111;
    ram_symbol0[59] = 'b10000011;
    ram_symbol1[59] = 'b10100111;
    ram_symbol2[59] = 'b01000110;
    ram_symbol3[59] = 'b00000000;
    ram_symbol0[60] = 'b10110011;
    ram_symbol1[60] = 'b11110111;
    ram_symbol2[60] = 'b11100111;
    ram_symbol3[60] = 'b00000000;
    ram_symbol0[61] = 'b11100011;
    ram_symbol1[61] = 'b10001100;
    ram_symbol2[61] = 'b00000111;
    ram_symbol3[61] = 'b11111110;
    ram_symbol0[62] = 'b00010011;
    ram_symbol1[62] = 'b01100101;
    ram_symbol2[62] = 'b00000101;
    ram_symbol3[62] = 'b00010000;
    ram_symbol0[63] = 'b00100011;
    ram_symbol1[63] = 'b10100000;
    ram_symbol2[63] = 'b10100110;
    ram_symbol3[63] = 'b00000000;
    ram_symbol0[64] = 'b01100111;
    ram_symbol1[64] = 'b10000000;
    ram_symbol2[64] = 'b00000000;
    ram_symbol3[64] = 'b00000000;
    ram_symbol0[65] = 'b00010011;
    ram_symbol1[65] = 'b00000001;
    ram_symbol2[65] = 'b00000001;
    ram_symbol3[65] = 'b11111110;
    ram_symbol0[66] = 'b00100011;
    ram_symbol1[66] = 'b00101100;
    ram_symbol2[66] = 'b10000001;
    ram_symbol3[66] = 'b00000000;
    ram_symbol0[67] = 'b00010011;
    ram_symbol1[67] = 'b00000100;
    ram_symbol2[67] = 'b00000101;
    ram_symbol3[67] = 'b00000000;
    ram_symbol0[68] = 'b00010011;
    ram_symbol1[68] = 'b00000101;
    ram_symbol2[68] = 'b10110000;
    ram_symbol3[68] = 'b00000000;
    ram_symbol0[69] = 'b00100011;
    ram_symbol1[69] = 'b00100110;
    ram_symbol2[69] = 'b10110001;
    ram_symbol3[69] = 'b00000000;
    ram_symbol0[70] = 'b00100011;
    ram_symbol1[70] = 'b00100100;
    ram_symbol2[70] = 'b11000001;
    ram_symbol3[70] = 'b00000000;
    ram_symbol0[71] = 'b00100011;
    ram_symbol1[71] = 'b00101110;
    ram_symbol2[71] = 'b00010001;
    ram_symbol3[71] = 'b00000000;
    ram_symbol0[72] = 'b11101111;
    ram_symbol1[72] = 'b11110000;
    ram_symbol2[72] = 'b00011111;
    ram_symbol3[72] = 'b11111100;
    ram_symbol0[73] = 'b00010011;
    ram_symbol1[73] = 'b01010101;
    ram_symbol2[73] = 'b00000100;
    ram_symbol3[73] = 'b00000001;
    ram_symbol0[74] = 'b00010011;
    ram_symbol1[74] = 'b01110101;
    ram_symbol2[74] = 'b11110101;
    ram_symbol3[74] = 'b00001111;
    ram_symbol0[75] = 'b11101111;
    ram_symbol1[75] = 'b11110000;
    ram_symbol2[75] = 'b01011111;
    ram_symbol3[75] = 'b11111011;
    ram_symbol0[76] = 'b00010011;
    ram_symbol1[76] = 'b00000101;
    ram_symbol2[76] = 'b00000000;
    ram_symbol3[76] = 'b00000000;
    ram_symbol0[77] = 'b11101111;
    ram_symbol1[77] = 'b11110000;
    ram_symbol2[77] = 'b11011111;
    ram_symbol3[77] = 'b11111010;
    ram_symbol0[78] = 'b00010011;
    ram_symbol1[78] = 'b00000101;
    ram_symbol2[78] = 'b00000000;
    ram_symbol3[78] = 'b00000000;
    ram_symbol0[79] = 'b11101111;
    ram_symbol1[79] = 'b11110000;
    ram_symbol2[79] = 'b01011111;
    ram_symbol3[79] = 'b11111010;
    ram_symbol0[80] = 'b00010011;
    ram_symbol1[80] = 'b00000101;
    ram_symbol2[80] = 'b00000000;
    ram_symbol3[80] = 'b00000000;
    ram_symbol0[81] = 'b11101111;
    ram_symbol1[81] = 'b11110000;
    ram_symbol2[81] = 'b11011111;
    ram_symbol3[81] = 'b11111001;
    ram_symbol0[82] = 'b10000011;
    ram_symbol1[82] = 'b00100101;
    ram_symbol2[82] = 'b11000001;
    ram_symbol3[82] = 'b00000000;
    ram_symbol0[83] = 'b00000011;
    ram_symbol1[83] = 'b00100110;
    ram_symbol2[83] = 'b10000001;
    ram_symbol3[83] = 'b00000000;
    ram_symbol0[84] = 'b00110111;
    ram_symbol1[84] = 'b00000111;
    ram_symbol2[84] = 'b00000001;
    ram_symbol3[84] = 'b00000000;
    ram_symbol0[85] = 'b10110111;
    ram_symbol1[85] = 'b00000111;
    ram_symbol2[85] = 'b00000010;
    ram_symbol3[85] = 'b00010000;
    ram_symbol0[86] = 'b00110011;
    ram_symbol1[86] = 'b10000110;
    ram_symbol2[86] = 'b11000101;
    ram_symbol3[86] = 'b00000000;
    ram_symbol0[87] = 'b00010011;
    ram_symbol1[87] = 'b00000111;
    ram_symbol2[87] = 'b11110111;
    ram_symbol3[87] = 'b11111111;
    ram_symbol0[88] = 'b00010011;
    ram_symbol1[88] = 'b00001000;
    ram_symbol2[88] = 'b00000000;
    ram_symbol3[88] = 'b00100000;
    ram_symbol0[89] = 'b10000011;
    ram_symbol1[89] = 'b10100110;
    ram_symbol2[89] = 'b01000111;
    ram_symbol3[89] = 'b00000000;
    ram_symbol0[90] = 'b10110011;
    ram_symbol1[90] = 'b11110110;
    ram_symbol2[90] = 'b11100110;
    ram_symbol3[90] = 'b00000000;
    ram_symbol0[91] = 'b11100011;
    ram_symbol1[91] = 'b10001100;
    ram_symbol2[91] = 'b00000110;
    ram_symbol3[91] = 'b11111110;
    ram_symbol0[92] = 'b00100011;
    ram_symbol1[92] = 'b10100000;
    ram_symbol2[92] = 'b00000111;
    ram_symbol3[92] = 'b00000001;
    ram_symbol0[93] = 'b10000011;
    ram_symbol1[93] = 'b10100110;
    ram_symbol2[93] = 'b01000111;
    ram_symbol3[93] = 'b00000000;
    ram_symbol0[94] = 'b10010011;
    ram_symbol1[94] = 'b11010110;
    ram_symbol2[94] = 'b00000110;
    ram_symbol3[94] = 'b00000001;
    ram_symbol0[95] = 'b11100011;
    ram_symbol1[95] = 'b10001100;
    ram_symbol2[95] = 'b00000110;
    ram_symbol3[95] = 'b11111110;
    ram_symbol0[96] = 'b00000011;
    ram_symbol1[96] = 'b10100101;
    ram_symbol2[96] = 'b00000111;
    ram_symbol3[96] = 'b00000000;
    ram_symbol0[97] = 'b10010011;
    ram_symbol1[97] = 'b10000110;
    ram_symbol2[97] = 'b00010101;
    ram_symbol3[97] = 'b00000000;
    ram_symbol0[98] = 'b00100011;
    ram_symbol1[98] = 'b10000000;
    ram_symbol2[98] = 'b10100101;
    ram_symbol3[98] = 'b00000000;
    ram_symbol0[99] = 'b01100011;
    ram_symbol1[99] = 'b00011010;
    ram_symbol2[99] = 'b11010110;
    ram_symbol3[99] = 'b00000000;
    ram_symbol0[100] = 'b10000011;
    ram_symbol1[100] = 'b00100000;
    ram_symbol2[100] = 'b11000001;
    ram_symbol3[100] = 'b00000001;
    ram_symbol0[101] = 'b00000011;
    ram_symbol1[101] = 'b00100100;
    ram_symbol2[101] = 'b10000001;
    ram_symbol3[101] = 'b00000001;
    ram_symbol0[102] = 'b00010011;
    ram_symbol1[102] = 'b00000001;
    ram_symbol2[102] = 'b00000001;
    ram_symbol3[102] = 'b00000010;
    ram_symbol0[103] = 'b01100111;
    ram_symbol1[103] = 'b10000000;
    ram_symbol2[103] = 'b00000000;
    ram_symbol3[103] = 'b00000000;
    ram_symbol0[104] = 'b10010011;
    ram_symbol1[104] = 'b10000101;
    ram_symbol2[104] = 'b00000110;
    ram_symbol3[104] = 'b00000000;
    ram_symbol0[105] = 'b01101111;
    ram_symbol1[105] = 'b11110000;
    ram_symbol2[105] = 'b00011111;
    ram_symbol3[105] = 'b11111100;
    ram_symbol0[106] = 'b00010011;
    ram_symbol1[106] = 'b00000001;
    ram_symbol2[106] = 'b00000001;
    ram_symbol3[106] = 'b11111011;
    ram_symbol0[107] = 'b00100011;
    ram_symbol1[107] = 'b00100000;
    ram_symbol2[107] = 'b00100001;
    ram_symbol3[107] = 'b00000101;
    ram_symbol0[108] = 'b00110111;
    ram_symbol1[108] = 'b10111001;
    ram_symbol2[108] = 'b11111111;
    ram_symbol3[108] = 'b11111111;
    ram_symbol0[109] = 'b00100011;
    ram_symbol1[109] = 'b00100100;
    ram_symbol2[109] = 'b10000001;
    ram_symbol3[109] = 'b00000100;
    ram_symbol0[110] = 'b00100011;
    ram_symbol1[110] = 'b00101100;
    ram_symbol2[110] = 'b01000001;
    ram_symbol3[110] = 'b00000011;
    ram_symbol0[111] = 'b00100011;
    ram_symbol1[111] = 'b00101010;
    ram_symbol2[111] = 'b01010001;
    ram_symbol3[111] = 'b00000011;
    ram_symbol0[112] = 'b00100011;
    ram_symbol1[112] = 'b00101000;
    ram_symbol2[112] = 'b01100001;
    ram_symbol3[112] = 'b00000011;
    ram_symbol0[113] = 'b00100011;
    ram_symbol1[113] = 'b00100110;
    ram_symbol2[113] = 'b01110001;
    ram_symbol3[113] = 'b00000011;
    ram_symbol0[114] = 'b00100011;
    ram_symbol1[114] = 'b00100100;
    ram_symbol2[114] = 'b10000001;
    ram_symbol3[114] = 'b00000011;
    ram_symbol0[115] = 'b00100011;
    ram_symbol1[115] = 'b00100010;
    ram_symbol2[115] = 'b10010001;
    ram_symbol3[115] = 'b00000011;
    ram_symbol0[116] = 'b00100011;
    ram_symbol1[116] = 'b00100110;
    ram_symbol2[116] = 'b00010001;
    ram_symbol3[116] = 'b00000100;
    ram_symbol0[117] = 'b00100011;
    ram_symbol1[117] = 'b00100010;
    ram_symbol2[117] = 'b10010001;
    ram_symbol3[117] = 'b00000100;
    ram_symbol0[118] = 'b00100011;
    ram_symbol1[118] = 'b00101110;
    ram_symbol2[118] = 'b00110001;
    ram_symbol3[118] = 'b00000011;
    ram_symbol0[119] = 'b00100011;
    ram_symbol1[119] = 'b00100000;
    ram_symbol2[119] = 'b10100001;
    ram_symbol3[119] = 'b00000011;
    ram_symbol0[120] = 'b00100011;
    ram_symbol1[120] = 'b00101110;
    ram_symbol2[120] = 'b10110001;
    ram_symbol3[120] = 'b00000001;
    ram_symbol0[121] = 'b00010011;
    ram_symbol1[121] = 'b00000100;
    ram_symbol2[121] = 'b00000000;
    ram_symbol3[121] = 'b00000000;
    ram_symbol0[122] = 'b00110111;
    ram_symbol1[122] = 'b00001010;
    ram_symbol2[122] = 'b00010000;
    ram_symbol3[122] = 'b00010000;
    ram_symbol0[123] = 'b10110111;
    ram_symbol1[123] = 'b00011010;
    ram_symbol2[123] = 'b00010000;
    ram_symbol3[123] = 'b00010000;
    ram_symbol0[124] = 'b00010011;
    ram_symbol1[124] = 'b00001100;
    ram_symbol2[124] = 'b11110000;
    ram_symbol3[124] = 'b11111111;
    ram_symbol0[125] = 'b00010011;
    ram_symbol1[125] = 'b00001001;
    ram_symbol2[125] = 'b00011001;
    ram_symbol3[125] = 'b11001110;
    ram_symbol0[126] = 'b10110111;
    ram_symbol1[126] = 'b00011011;
    ram_symbol2[126] = 'b00000000;
    ram_symbol3[126] = 'b10000000;
    ram_symbol0[127] = 'b10010011;
    ram_symbol1[127] = 'b00001100;
    ram_symbol2[127] = 'b01000000;
    ram_symbol3[127] = 'b00000000;
    ram_symbol0[128] = 'b00100011;
    ram_symbol1[128] = 'b00100110;
    ram_symbol2[128] = 'b10001010;
    ram_symbol3[128] = 'b00000000;
    ram_symbol0[129] = 'b10010011;
    ram_symbol1[129] = 'b00001001;
    ram_symbol2[129] = 'b10000000;
    ram_symbol3[129] = 'b00000000;
    ram_symbol0[130] = 'b00010011;
    ram_symbol1[130] = 'b10001101;
    ram_symbol2[130] = 'b00001010;
    ram_symbol3[130] = 'b00000100;
    ram_symbol0[131] = 'b00100011;
    ram_symbol1[131] = 'b00100000;
    ram_symbol2[131] = 'b10001101;
    ram_symbol3[131] = 'b00000001;
    ram_symbol0[132] = 'b00001111;
    ram_symbol1[132] = 'b01010000;
    ram_symbol2[132] = 'b00000000;
    ram_symbol3[132] = 'b00000000;
    ram_symbol0[133] = 'b10110111;
    ram_symbol1[133] = 'b00000100;
    ram_symbol2[133] = 'b00000000;
    ram_symbol3[133] = 'b10000000;
    ram_symbol0[134] = 'b00100011;
    ram_symbol1[134] = 'b10011010;
    ram_symbol2[134] = 'b00100001;
    ram_symbol3[134] = 'b10000001;
    ram_symbol0[135] = 'b10000011;
    ram_symbol1[135] = 'b10101101;
    ram_symbol2[135] = 'b00000100;
    ram_symbol3[135] = 'b00000000;
    ram_symbol0[136] = 'b11101111;
    ram_symbol1[136] = 'b11110000;
    ram_symbol2[136] = 'b10011111;
    ram_symbol3[136] = 'b11101000;
    ram_symbol0[137] = 'b00100011;
    ram_symbol1[137] = 'b00100110;
    ram_symbol2[137] = 'b10100001;
    ram_symbol3[137] = 'b00000000;
    ram_symbol0[138] = 'b11101111;
    ram_symbol1[138] = 'b11110000;
    ram_symbol2[138] = 'b00011111;
    ram_symbol3[138] = 'b11101000;
    ram_symbol0[139] = 'b10000011;
    ram_symbol1[139] = 'b00100111;
    ram_symbol2[139] = 'b11000001;
    ram_symbol3[139] = 'b00000000;
    ram_symbol0[140] = 'b00010011;
    ram_symbol1[140] = 'b00010101;
    ram_symbol2[140] = 'b00000101;
    ram_symbol3[140] = 'b00000001;
    ram_symbol0[141] = 'b00110011;
    ram_symbol1[141] = 'b00000101;
    ram_symbol2[141] = 'b11110101;
    ram_symbol3[141] = 'b00000000;
    ram_symbol0[142] = 'b01100011;
    ram_symbol1[142] = 'b10010110;
    ram_symbol2[142] = 'b10101101;
    ram_symbol3[142] = 'b00000100;
    ram_symbol0[143] = 'b10010011;
    ram_symbol1[143] = 'b10000100;
    ram_symbol2[143] = 'b01000100;
    ram_symbol3[143] = 'b00000000;
    ram_symbol0[144] = 'b11100011;
    ram_symbol1[144] = 'b10011110;
    ram_symbol2[144] = 'b01110100;
    ram_symbol3[144] = 'b11111101;
    ram_symbol0[145] = 'b00010011;
    ram_symbol1[145] = 'b00000101;
    ram_symbol2[145] = 'b00000000;
    ram_symbol3[145] = 'b00000000;
    ram_symbol0[146] = 'b10000011;
    ram_symbol1[146] = 'b00100000;
    ram_symbol2[146] = 'b11000001;
    ram_symbol3[146] = 'b00000100;
    ram_symbol0[147] = 'b00000011;
    ram_symbol1[147] = 'b00100100;
    ram_symbol2[147] = 'b10000001;
    ram_symbol3[147] = 'b00000100;
    ram_symbol0[148] = 'b10000011;
    ram_symbol1[148] = 'b00100100;
    ram_symbol2[148] = 'b01000001;
    ram_symbol3[148] = 'b00000100;
    ram_symbol0[149] = 'b00000011;
    ram_symbol1[149] = 'b00101001;
    ram_symbol2[149] = 'b00000001;
    ram_symbol3[149] = 'b00000100;
    ram_symbol0[150] = 'b10000011;
    ram_symbol1[150] = 'b00101001;
    ram_symbol2[150] = 'b11000001;
    ram_symbol3[150] = 'b00000011;
    ram_symbol0[151] = 'b00000011;
    ram_symbol1[151] = 'b00101010;
    ram_symbol2[151] = 'b10000001;
    ram_symbol3[151] = 'b00000011;
    ram_symbol0[152] = 'b10000011;
    ram_symbol1[152] = 'b00101010;
    ram_symbol2[152] = 'b01000001;
    ram_symbol3[152] = 'b00000011;
    ram_symbol0[153] = 'b00000011;
    ram_symbol1[153] = 'b00101011;
    ram_symbol2[153] = 'b00000001;
    ram_symbol3[153] = 'b00000011;
    ram_symbol0[154] = 'b10000011;
    ram_symbol1[154] = 'b00101011;
    ram_symbol2[154] = 'b11000001;
    ram_symbol3[154] = 'b00000010;
    ram_symbol0[155] = 'b00000011;
    ram_symbol1[155] = 'b00101100;
    ram_symbol2[155] = 'b10000001;
    ram_symbol3[155] = 'b00000010;
    ram_symbol0[156] = 'b10000011;
    ram_symbol1[156] = 'b00101100;
    ram_symbol2[156] = 'b01000001;
    ram_symbol3[156] = 'b00000010;
    ram_symbol0[157] = 'b00000011;
    ram_symbol1[157] = 'b00101101;
    ram_symbol2[157] = 'b00000001;
    ram_symbol3[157] = 'b00000010;
    ram_symbol0[158] = 'b10000011;
    ram_symbol1[158] = 'b00101101;
    ram_symbol2[158] = 'b11000001;
    ram_symbol3[158] = 'b00000001;
    ram_symbol0[159] = 'b00010011;
    ram_symbol1[159] = 'b00000001;
    ram_symbol2[159] = 'b00000001;
    ram_symbol3[159] = 'b00000101;
    ram_symbol0[160] = 'b01100111;
    ram_symbol1[160] = 'b10000000;
    ram_symbol2[160] = 'b00000000;
    ram_symbol3[160] = 'b00000000;
    ram_symbol0[161] = 'b10010011;
    ram_symbol1[161] = 'b10001001;
    ram_symbol2[161] = 'b11111001;
    ram_symbol3[161] = 'b11111111;
    ram_symbol0[162] = 'b11100011;
    ram_symbol1[162] = 'b10010010;
    ram_symbol2[162] = 'b00001001;
    ram_symbol3[162] = 'b11111000;
    ram_symbol0[163] = 'b00010011;
    ram_symbol1[163] = 'b00000100;
    ram_symbol2[163] = 'b00010100;
    ram_symbol3[163] = 'b00000000;
    ram_symbol0[164] = 'b11100011;
    ram_symbol1[164] = 'b00011000;
    ram_symbol2[164] = 'b10010100;
    ram_symbol3[164] = 'b11110111;
    ram_symbol0[165] = 'b00010011;
    ram_symbol1[165] = 'b00000101;
    ram_symbol2[165] = 'b00010000;
    ram_symbol3[165] = 'b00000000;
    ram_symbol0[166] = 'b01101111;
    ram_symbol1[166] = 'b11110000;
    ram_symbol2[166] = 'b00011111;
    ram_symbol3[166] = 'b11111011;
    ram_symbol0[167] = 'b00110111;
    ram_symbol1[167] = 'b00000111;
    ram_symbol2[167] = 'b00000001;
    ram_symbol3[167] = 'b00010000;
    ram_symbol0[168] = 'b10000011;
    ram_symbol1[168] = 'b00100111;
    ram_symbol2[168] = 'b01000111;
    ram_symbol3[168] = 'b00000000;
    ram_symbol0[169] = 'b10010011;
    ram_symbol1[169] = 'b11010111;
    ram_symbol2[169] = 'b00000111;
    ram_symbol3[169] = 'b00000001;
    ram_symbol0[170] = 'b10010011;
    ram_symbol1[170] = 'b11110111;
    ram_symbol2[170] = 'b11110111;
    ram_symbol3[170] = 'b00001111;
    ram_symbol0[171] = 'b11100011;
    ram_symbol1[171] = 'b10001010;
    ram_symbol2[171] = 'b00000111;
    ram_symbol3[171] = 'b11111110;
    ram_symbol0[172] = 'b00100011;
    ram_symbol1[172] = 'b00100000;
    ram_symbol2[172] = 'b10100111;
    ram_symbol3[172] = 'b00000000;
    ram_symbol0[173] = 'b01100111;
    ram_symbol1[173] = 'b10000000;
    ram_symbol2[173] = 'b00000000;
    ram_symbol3[173] = 'b00000000;
    ram_symbol0[174] = 'b00010011;
    ram_symbol1[174] = 'b00000001;
    ram_symbol2[174] = 'b00000001;
    ram_symbol3[174] = 'b11111111;
    ram_symbol0[175] = 'b00100011;
    ram_symbol1[175] = 'b00100100;
    ram_symbol2[175] = 'b10000001;
    ram_symbol3[175] = 'b00000000;
    ram_symbol0[176] = 'b00100011;
    ram_symbol1[176] = 'b00100110;
    ram_symbol2[176] = 'b00010001;
    ram_symbol3[176] = 'b00000000;
    ram_symbol0[177] = 'b00010011;
    ram_symbol1[177] = 'b00000100;
    ram_symbol2[177] = 'b00000101;
    ram_symbol3[177] = 'b00000000;
    ram_symbol0[178] = 'b00000011;
    ram_symbol1[178] = 'b01000101;
    ram_symbol2[178] = 'b00000100;
    ram_symbol3[178] = 'b00000000;
    ram_symbol0[179] = 'b01100011;
    ram_symbol1[179] = 'b00011010;
    ram_symbol2[179] = 'b00000101;
    ram_symbol3[179] = 'b00000000;
    ram_symbol0[180] = 'b10000011;
    ram_symbol1[180] = 'b00100000;
    ram_symbol2[180] = 'b11000001;
    ram_symbol3[180] = 'b00000000;
    ram_symbol0[181] = 'b00000011;
    ram_symbol1[181] = 'b00100100;
    ram_symbol2[181] = 'b10000001;
    ram_symbol3[181] = 'b00000000;
    ram_symbol0[182] = 'b00010011;
    ram_symbol1[182] = 'b00000001;
    ram_symbol2[182] = 'b00000001;
    ram_symbol3[182] = 'b00000001;
    ram_symbol0[183] = 'b01100111;
    ram_symbol1[183] = 'b10000000;
    ram_symbol2[183] = 'b00000000;
    ram_symbol3[183] = 'b00000000;
    ram_symbol0[184] = 'b00010011;
    ram_symbol1[184] = 'b00000100;
    ram_symbol2[184] = 'b00010100;
    ram_symbol3[184] = 'b00000000;
    ram_symbol0[185] = 'b11101111;
    ram_symbol1[185] = 'b11110000;
    ram_symbol2[185] = 'b10011111;
    ram_symbol3[185] = 'b11111011;
    ram_symbol0[186] = 'b01101111;
    ram_symbol1[186] = 'b11110000;
    ram_symbol2[186] = 'b00011111;
    ram_symbol3[186] = 'b11111110;
    ram_symbol0[187] = 'b10110111;
    ram_symbol1[187] = 'b11000111;
    ram_symbol2[187] = 'b10110000;
    ram_symbol3[187] = 'b00010000;
    ram_symbol0[188] = 'b00000011;
    ram_symbol1[188] = 'b10100111;
    ram_symbol2[188] = 'b10000111;
    ram_symbol3[188] = 'b11111111;
    ram_symbol0[189] = 'b10010011;
    ram_symbol1[189] = 'b00000111;
    ram_symbol2[189] = 'b01000000;
    ram_symbol3[189] = 'b00000110;
    ram_symbol0[190] = 'b00110011;
    ram_symbol1[190] = 'b00000101;
    ram_symbol2[190] = 'b11110101;
    ram_symbol3[190] = 'b00000010;
    ram_symbol0[191] = 'b00110011;
    ram_symbol1[191] = 'b00000101;
    ram_symbol2[191] = 'b11100101;
    ram_symbol3[191] = 'b00000000;
    ram_symbol0[192] = 'b00110111;
    ram_symbol1[192] = 'b11000111;
    ram_symbol2[192] = 'b10110000;
    ram_symbol3[192] = 'b00010000;
    ram_symbol0[193] = 'b10000011;
    ram_symbol1[193] = 'b00100111;
    ram_symbol2[193] = 'b10000111;
    ram_symbol3[193] = 'b11111111;
    ram_symbol0[194] = 'b10110011;
    ram_symbol1[194] = 'b00000111;
    ram_symbol2[194] = 'b11110101;
    ram_symbol3[194] = 'b01000000;
    ram_symbol0[195] = 'b11100011;
    ram_symbol1[195] = 'b11011100;
    ram_symbol2[195] = 'b00000111;
    ram_symbol3[195] = 'b11111110;
    ram_symbol0[196] = 'b01100111;
    ram_symbol1[196] = 'b10000000;
    ram_symbol2[196] = 'b00000000;
    ram_symbol3[196] = 'b00000000;
    ram_symbol0[197] = 'b10110111;
    ram_symbol1[197] = 'b00000111;
    ram_symbol2[197] = 'b00010000;
    ram_symbol3[197] = 'b00010000;
    ram_symbol0[198] = 'b00100011;
    ram_symbol1[198] = 'b10100110;
    ram_symbol2[198] = 'b10110111;
    ram_symbol3[198] = 'b00010000;
    ram_symbol0[199] = 'b00100011;
    ram_symbol1[199] = 'b10100100;
    ram_symbol2[199] = 'b11000111;
    ram_symbol3[199] = 'b00010000;
    ram_symbol0[200] = 'b00100011;
    ram_symbol1[200] = 'b10100010;
    ram_symbol2[200] = 'b10100111;
    ram_symbol3[200] = 'b00010000;
    ram_symbol0[201] = 'b00100011;
    ram_symbol1[201] = 'b10100000;
    ram_symbol2[201] = 'b00000111;
    ram_symbol3[201] = 'b00010000;
    ram_symbol0[202] = 'b00010011;
    ram_symbol1[202] = 'b00000101;
    ram_symbol2[202] = 'b00010000;
    ram_symbol3[202] = 'b00000000;
    ram_symbol0[203] = 'b01101111;
    ram_symbol1[203] = 'b11110000;
    ram_symbol2[203] = 'b00011111;
    ram_symbol3[203] = 'b11111100;
    ram_symbol0[204] = 'b10110111;
    ram_symbol1[204] = 'b10110111;
    ram_symbol2[204] = 'b11111111;
    ram_symbol3[204] = 'b11111111;
    ram_symbol0[205] = 'b10010011;
    ram_symbol1[205] = 'b10000111;
    ram_symbol2[205] = 'b00010111;
    ram_symbol3[205] = 'b11001110;
    ram_symbol0[206] = 'b00100011;
    ram_symbol1[206] = 'b10011010;
    ram_symbol2[206] = 'b11110001;
    ram_symbol3[206] = 'b10000000;
    ram_symbol0[207] = 'b01100111;
    ram_symbol1[207] = 'b10000000;
    ram_symbol2[207] = 'b00000000;
    ram_symbol3[207] = 'b00000000;
    ram_symbol0[208] = 'b10110111;
    ram_symbol1[208] = 'b00000111;
    ram_symbol2[208] = 'b00000001;
    ram_symbol3[208] = 'b00000000;
    ram_symbol0[209] = 'b10010011;
    ram_symbol1[209] = 'b00000110;
    ram_symbol2[209] = 'b00000000;
    ram_symbol3[209] = 'b00000000;
    ram_symbol0[210] = 'b10010011;
    ram_symbol1[210] = 'b00001000;
    ram_symbol2[210] = 'b00000000;
    ram_symbol3[210] = 'b01100100;
    ram_symbol0[211] = 'b00110111;
    ram_symbol1[211] = 'b00001000;
    ram_symbol2[211] = 'b00000000;
    ram_symbol3[211] = 'b10000111;
    ram_symbol0[212] = 'b00010011;
    ram_symbol1[212] = 'b00000011;
    ram_symbol2[212] = 'b10110000;
    ram_symbol3[212] = 'b00010010;
    ram_symbol0[213] = 'b00010011;
    ram_symbol1[213] = 'b00000101;
    ram_symbol2[213] = 'b11110000;
    ram_symbol3[213] = 'b00011000;
    ram_symbol0[214] = 'b00010011;
    ram_symbol1[214] = 'b10001111;
    ram_symbol2[214] = 'b11110111;
    ram_symbol3[214] = 'b11111111;
    ram_symbol0[215] = 'b00010011;
    ram_symbol1[215] = 'b10000110;
    ram_symbol2[215] = 'b00000111;
    ram_symbol3[215] = 'b10000000;
    ram_symbol0[216] = 'b00010011;
    ram_symbol1[216] = 'b00001110;
    ram_symbol2[216] = 'b00000000;
    ram_symbol3[216] = 'b00110010;
    ram_symbol0[217] = 'b10010011;
    ram_symbol1[217] = 'b00001110;
    ram_symbol2[217] = 'b10000000;
    ram_symbol3[217] = 'b00100101;
    ram_symbol0[218] = 'b00110011;
    ram_symbol1[218] = 'b10000111;
    ram_symbol2[218] = 'b00010110;
    ram_symbol3[218] = 'b00000011;
    ram_symbol0[219] = 'b10010011;
    ram_symbol1[219] = 'b00000111;
    ram_symbol2[219] = 'b00000000;
    ram_symbol3[219] = 'b00000000;
    ram_symbol0[220] = 'b00110011;
    ram_symbol1[220] = 'b00000111;
    ram_symbol2[220] = 'b00000111;
    ram_symbol3[220] = 'b00000001;
    ram_symbol0[221] = 'b01100011;
    ram_symbol1[221] = 'b01100110;
    ram_symbol2[221] = 'b11010011;
    ram_symbol3[221] = 'b00000010;
    ram_symbol0[222] = 'b10010011;
    ram_symbol1[222] = 'b00000101;
    ram_symbol2[222] = 'b00000110;
    ram_symbol3[222] = 'b00000000;
    ram_symbol0[223] = 'b01100011;
    ram_symbol1[223] = 'b01110100;
    ram_symbol2[223] = 'b11110101;
    ram_symbol3[223] = 'b00000000;
    ram_symbol0[224] = 'b10010011;
    ram_symbol1[224] = 'b00000101;
    ram_symbol2[224] = 'b00000000;
    ram_symbol3[224] = 'b01111110;
    ram_symbol0[225] = 'b00100011;
    ram_symbol1[225] = 'b00010000;
    ram_symbol2[225] = 'b10110111;
    ram_symbol3[225] = 'b00000000;
    ram_symbol0[226] = 'b10010011;
    ram_symbol1[226] = 'b10000111;
    ram_symbol2[226] = 'b00010111;
    ram_symbol3[226] = 'b00000000;
    ram_symbol0[227] = 'b00010011;
    ram_symbol1[227] = 'b00000111;
    ram_symbol2[227] = 'b00100111;
    ram_symbol3[227] = 'b00000000;
    ram_symbol0[228] = 'b11100011;
    ram_symbol1[228] = 'b10010010;
    ram_symbol2[228] = 'b11000111;
    ram_symbol3[228] = 'b11111111;
    ram_symbol0[229] = 'b10010011;
    ram_symbol1[229] = 'b10000110;
    ram_symbol2[229] = 'b00010110;
    ram_symbol3[229] = 'b00000000;
    ram_symbol0[230] = 'b11100011;
    ram_symbol1[230] = 'b10011000;
    ram_symbol2[230] = 'b11010110;
    ram_symbol3[230] = 'b11111101;
    ram_symbol0[231] = 'b01100111;
    ram_symbol1[231] = 'b10000000;
    ram_symbol2[231] = 'b00000000;
    ram_symbol3[231] = 'b00000000;
    ram_symbol0[232] = 'b10010011;
    ram_symbol1[232] = 'b00000101;
    ram_symbol2[232] = 'b11110000;
    ram_symbol3[232] = 'b00000001;
    ram_symbol0[233] = 'b11100011;
    ram_symbol1[233] = 'b01110000;
    ram_symbol2[233] = 'b11110101;
    ram_symbol3[233] = 'b11111110;
    ram_symbol0[234] = 'b10010011;
    ram_symbol1[234] = 'b00000101;
    ram_symbol2[234] = 'b00001111;
    ram_symbol3[234] = 'b00000000;
    ram_symbol0[235] = 'b01101111;
    ram_symbol1[235] = 'b11110000;
    ram_symbol2[235] = 'b10011111;
    ram_symbol3[235] = 'b11111101;
    ram_symbol0[236] = 'b00110111;
    ram_symbol1[236] = 'b00010101;
    ram_symbol2[236] = 'b10100000;
    ram_symbol3[236] = 'b00010000;
    ram_symbol0[237] = 'b00010011;
    ram_symbol1[237] = 'b00000001;
    ram_symbol2[237] = 'b00000001;
    ram_symbol3[237] = 'b11111111;
    ram_symbol0[238] = 'b00010011;
    ram_symbol1[238] = 'b00000101;
    ram_symbol2[238] = 'b10000101;
    ram_symbol3[238] = 'b10010001;
    ram_symbol0[239] = 'b00100011;
    ram_symbol1[239] = 'b00100110;
    ram_symbol2[239] = 'b00010001;
    ram_symbol3[239] = 'b00000000;
    ram_symbol0[240] = 'b11101111;
    ram_symbol1[240] = 'b11110000;
    ram_symbol2[240] = 'b10011111;
    ram_symbol3[240] = 'b11101111;
    ram_symbol0[241] = 'b11101111;
    ram_symbol1[241] = 'b11110000;
    ram_symbol2[241] = 'b11011111;
    ram_symbol3[241] = 'b11110111;
    ram_symbol0[242] = 'b10110111;
    ram_symbol1[242] = 'b00000111;
    ram_symbol2[242] = 'b00001001;
    ram_symbol3[242] = 'b00010000;
    ram_symbol0[243] = 'b00010011;
    ram_symbol1[243] = 'b00000111;
    ram_symbol2[243] = 'b00000000;
    ram_symbol3[243] = 'b00001000;
    ram_symbol0[244] = 'b00100011;
    ram_symbol1[244] = 'b10100000;
    ram_symbol2[244] = 'b11100111;
    ram_symbol3[244] = 'b00000100;
    ram_symbol0[245] = 'b00010011;
    ram_symbol1[245] = 'b00000111;
    ram_symbol2[245] = 'b00000000;
    ram_symbol3[245] = 'b01000010;
    ram_symbol0[246] = 'b00100011;
    ram_symbol1[246] = 'b10100010;
    ram_symbol2[246] = 'b11100111;
    ram_symbol3[246] = 'b00000100;
    ram_symbol0[247] = 'b00010011;
    ram_symbol1[247] = 'b00000111;
    ram_symbol2[247] = 'b10000000;
    ram_symbol3[247] = 'b00001010;
    ram_symbol0[248] = 'b00100011;
    ram_symbol1[248] = 'b10100100;
    ram_symbol2[248] = 'b11100111;
    ram_symbol3[248] = 'b00000100;
    ram_symbol0[249] = 'b00010011;
    ram_symbol1[249] = 'b00000111;
    ram_symbol2[249] = 'b10000000;
    ram_symbol3[249] = 'b00111100;
    ram_symbol0[250] = 'b00100011;
    ram_symbol1[250] = 'b10100110;
    ram_symbol2[250] = 'b11100111;
    ram_symbol3[250] = 'b00000100;
    ram_symbol0[251] = 'b00010011;
    ram_symbol1[251] = 'b00000111;
    ram_symbol2[251] = 'b01000000;
    ram_symbol3[251] = 'b00000000;
    ram_symbol0[252] = 'b00100011;
    ram_symbol1[252] = 'b10101000;
    ram_symbol2[252] = 'b11100111;
    ram_symbol3[252] = 'b00000100;
    ram_symbol0[253] = 'b00010011;
    ram_symbol1[253] = 'b00000111;
    ram_symbol2[253] = 'b01000000;
    ram_symbol3[253] = 'b00100111;
    ram_symbol0[254] = 'b00100011;
    ram_symbol1[254] = 'b10101010;
    ram_symbol2[254] = 'b11100111;
    ram_symbol3[254] = 'b00000100;
    ram_symbol0[255] = 'b00010011;
    ram_symbol1[255] = 'b00000111;
    ram_symbol2[255] = 'b01010000;
    ram_symbol3[255] = 'b00000000;
    ram_symbol0[256] = 'b00100011;
    ram_symbol1[256] = 'b10101100;
    ram_symbol2[256] = 'b11100111;
    ram_symbol3[256] = 'b00000100;
    ram_symbol0[257] = 'b00010011;
    ram_symbol1[257] = 'b00000111;
    ram_symbol2[257] = 'b11010000;
    ram_symbol3[257] = 'b00100101;
    ram_symbol0[258] = 'b00100011;
    ram_symbol1[258] = 'b10101110;
    ram_symbol2[258] = 'b11100111;
    ram_symbol3[258] = 'b00000100;
    ram_symbol0[259] = 'b10010011;
    ram_symbol1[259] = 'b00000110;
    ram_symbol2[259] = 'b00110000;
    ram_symbol3[259] = 'b00000000;
    ram_symbol0[260] = 'b00100011;
    ram_symbol1[260] = 'b10100000;
    ram_symbol2[260] = 'b11010111;
    ram_symbol3[260] = 'b00000110;
    ram_symbol0[261] = 'b00010011;
    ram_symbol1[261] = 'b00000111;
    ram_symbol2[261] = 'b00010000;
    ram_symbol3[261] = 'b00000000;
    ram_symbol0[262] = 'b00100011;
    ram_symbol1[262] = 'b10100000;
    ram_symbol2[262] = 'b11100111;
    ram_symbol3[262] = 'b00000000;
    ram_symbol0[263] = 'b10110111;
    ram_symbol1[263] = 'b00000111;
    ram_symbol2[263] = 'b00001000;
    ram_symbol3[263] = 'b00010000;
    ram_symbol0[264] = 'b00110111;
    ram_symbol1[264] = 'b00000111;
    ram_symbol2[264] = 'b00000000;
    ram_symbol3[264] = 'b10000111;
    ram_symbol0[265] = 'b00100011;
    ram_symbol1[265] = 'b10100000;
    ram_symbol2[265] = 'b11100111;
    ram_symbol3[265] = 'b00000000;
    ram_symbol0[266] = 'b00110111;
    ram_symbol1[266] = 'b00100111;
    ram_symbol2[266] = 'b00000000;
    ram_symbol3[266] = 'b00000000;
    ram_symbol0[267] = 'b00010011;
    ram_symbol1[267] = 'b00000110;
    ram_symbol2[267] = 'b11110111;
    ram_symbol3[267] = 'b11111111;
    ram_symbol0[268] = 'b00100011;
    ram_symbol1[268] = 'b10100110;
    ram_symbol2[268] = 'b11000111;
    ram_symbol3[268] = 'b00000000;
    ram_symbol0[269] = 'b00100011;
    ram_symbol1[269] = 'b10101100;
    ram_symbol2[269] = 'b00000111;
    ram_symbol3[269] = 'b00000000;
    ram_symbol0[270] = 'b00100011;
    ram_symbol1[270] = 'b10101110;
    ram_symbol2[270] = 'b11100111;
    ram_symbol3[270] = 'b00000000;
    ram_symbol0[271] = 'b00110111;
    ram_symbol1[271] = 'b10100111;
    ram_symbol2[271] = 'b00001110;
    ram_symbol3[271] = 'b00000000;
    ram_symbol0[272] = 'b10000011;
    ram_symbol1[272] = 'b00100000;
    ram_symbol2[272] = 'b11000001;
    ram_symbol3[272] = 'b00000000;
    ram_symbol0[273] = 'b00010011;
    ram_symbol1[273] = 'b00000111;
    ram_symbol2[273] = 'b11110111;
    ram_symbol3[273] = 'b01011111;
    ram_symbol0[274] = 'b00100011;
    ram_symbol1[274] = 'b10100000;
    ram_symbol2[274] = 'b11100111;
    ram_symbol3[274] = 'b00000010;
    ram_symbol0[275] = 'b00100011;
    ram_symbol1[275] = 'b10100110;
    ram_symbol2[275] = 'b11010111;
    ram_symbol3[275] = 'b00000010;
    ram_symbol0[276] = 'b00010011;
    ram_symbol1[276] = 'b00000001;
    ram_symbol2[276] = 'b00000001;
    ram_symbol3[276] = 'b00000001;
    ram_symbol0[277] = 'b01100111;
    ram_symbol1[277] = 'b10000000;
    ram_symbol2[277] = 'b00000000;
    ram_symbol3[277] = 'b00000000;
    ram_symbol0[278] = 'b00010011;
    ram_symbol1[278] = 'b00000001;
    ram_symbol2[278] = 'b00000001;
    ram_symbol3[278] = 'b11111100;
    ram_symbol0[279] = 'b00100011;
    ram_symbol1[279] = 'b00101110;
    ram_symbol2[279] = 'b00010001;
    ram_symbol3[279] = 'b00000010;
    ram_symbol0[280] = 'b00100011;
    ram_symbol1[280] = 'b00101100;
    ram_symbol2[280] = 'b10000001;
    ram_symbol3[280] = 'b00000010;
    ram_symbol0[281] = 'b00100011;
    ram_symbol1[281] = 'b00101010;
    ram_symbol2[281] = 'b10010001;
    ram_symbol3[281] = 'b00000010;
    ram_symbol0[282] = 'b00110111;
    ram_symbol1[282] = 'b00000100;
    ram_symbol2[282] = 'b00010000;
    ram_symbol3[282] = 'b00010000;
    ram_symbol0[283] = 'b00100011;
    ram_symbol1[283] = 'b00101000;
    ram_symbol2[283] = 'b00100001;
    ram_symbol3[283] = 'b00000011;
    ram_symbol0[284] = 'b00100011;
    ram_symbol1[284] = 'b00100110;
    ram_symbol2[284] = 'b00110001;
    ram_symbol3[284] = 'b00000011;
    ram_symbol0[285] = 'b00100011;
    ram_symbol1[285] = 'b00100100;
    ram_symbol2[285] = 'b01000001;
    ram_symbol3[285] = 'b00000011;
    ram_symbol0[286] = 'b00100011;
    ram_symbol1[286] = 'b00100010;
    ram_symbol2[286] = 'b01010001;
    ram_symbol3[286] = 'b00000011;
    ram_symbol0[287] = 'b00100011;
    ram_symbol1[287] = 'b00100000;
    ram_symbol2[287] = 'b01100001;
    ram_symbol3[287] = 'b00000011;
    ram_symbol0[288] = 'b00100011;
    ram_symbol1[288] = 'b00101110;
    ram_symbol2[288] = 'b01110001;
    ram_symbol3[288] = 'b00000001;
    ram_symbol0[289] = 'b00100011;
    ram_symbol1[289] = 'b00101100;
    ram_symbol2[289] = 'b10000001;
    ram_symbol3[289] = 'b00000001;
    ram_symbol0[290] = 'b00100011;
    ram_symbol1[290] = 'b00101010;
    ram_symbol2[290] = 'b10010001;
    ram_symbol3[290] = 'b00000001;
    ram_symbol0[291] = 'b00100011;
    ram_symbol1[291] = 'b00101000;
    ram_symbol2[291] = 'b10100001;
    ram_symbol3[291] = 'b00000001;
    ram_symbol0[292] = 'b00100011;
    ram_symbol1[292] = 'b00100110;
    ram_symbol2[292] = 'b10110001;
    ram_symbol3[292] = 'b00000001;
    ram_symbol0[293] = 'b10010011;
    ram_symbol1[293] = 'b00000111;
    ram_symbol2[293] = 'b00000000;
    ram_symbol3[293] = 'b00010000;
    ram_symbol0[294] = 'b00100011;
    ram_symbol1[294] = 'b00100010;
    ram_symbol2[294] = 'b11110100;
    ram_symbol3[294] = 'b00000000;
    ram_symbol0[295] = 'b00100011;
    ram_symbol1[295] = 'b00100100;
    ram_symbol2[295] = 'b00000100;
    ram_symbol3[295] = 'b00000000;
    ram_symbol0[296] = 'b00010011;
    ram_symbol1[296] = 'b00001001;
    ram_symbol2[296] = 'b00100000;
    ram_symbol3[296] = 'b00000000;
    ram_symbol0[297] = 'b00100011;
    ram_symbol1[297] = 'b00100000;
    ram_symbol2[297] = 'b00100100;
    ram_symbol3[297] = 'b00000001;
    ram_symbol0[298] = 'b10010011;
    ram_symbol1[298] = 'b00000111;
    ram_symbol2[298] = 'b11010000;
    ram_symbol3[298] = 'b01001001;
    ram_symbol0[299] = 'b00100011;
    ram_symbol1[299] = 'b00101000;
    ram_symbol2[299] = 'b11110100;
    ram_symbol3[299] = 'b00000000;
    ram_symbol0[300] = 'b10110111;
    ram_symbol1[300] = 'b00000111;
    ram_symbol2[300] = 'b00010010;
    ram_symbol3[300] = 'b00000000;
    ram_symbol0[301] = 'b10010011;
    ram_symbol1[301] = 'b10000111;
    ram_symbol2[301] = 'b01010111;
    ram_symbol3[301] = 'b00010000;
    ram_symbol0[302] = 'b00100011;
    ram_symbol1[302] = 'b00100000;
    ram_symbol2[302] = 'b11110100;
    ram_symbol3[302] = 'b00000010;
    ram_symbol0[303] = 'b10010011;
    ram_symbol1[303] = 'b00000100;
    ram_symbol2[303] = 'b00010000;
    ram_symbol3[303] = 'b00000000;
    ram_symbol0[304] = 'b10110111;
    ram_symbol1[304] = 'b00000111;
    ram_symbol2[304] = 'b00000100;
    ram_symbol3[304] = 'b00000101;
    ram_symbol0[305] = 'b00100011;
    ram_symbol1[305] = 'b00100010;
    ram_symbol2[305] = 'b10010100;
    ram_symbol3[305] = 'b00000010;
    ram_symbol0[306] = 'b10010011;
    ram_symbol1[306] = 'b10000111;
    ram_symbol2[306] = 'b00100111;
    ram_symbol3[306] = 'b00010000;
    ram_symbol0[307] = 'b00100011;
    ram_symbol1[307] = 'b00100100;
    ram_symbol2[307] = 'b11110100;
    ram_symbol3[307] = 'b00000010;
    ram_symbol0[308] = 'b10010011;
    ram_symbol1[308] = 'b00000111;
    ram_symbol2[308] = 'b01100000;
    ram_symbol3[308] = 'b00000000;
    ram_symbol0[309] = 'b00100011;
    ram_symbol1[309] = 'b00101000;
    ram_symbol2[309] = 'b11110100;
    ram_symbol3[309] = 'b00000010;
    ram_symbol0[310] = 'b10010011;
    ram_symbol1[310] = 'b00000111;
    ram_symbol2[310] = 'b00100000;
    ram_symbol3[310] = 'b00110000;
    ram_symbol0[311] = 'b00100011;
    ram_symbol1[311] = 'b00101010;
    ram_symbol2[311] = 'b11110100;
    ram_symbol3[311] = 'b00000010;
    ram_symbol0[312] = 'b00100011;
    ram_symbol1[312] = 'b00101000;
    ram_symbol2[312] = 'b00000100;
    ram_symbol3[312] = 'b00010000;
    ram_symbol0[313] = 'b00010011;
    ram_symbol1[313] = 'b00000101;
    ram_symbol2[313] = 'b10000000;
    ram_symbol3[313] = 'b00001100;
    ram_symbol0[314] = 'b11101111;
    ram_symbol1[314] = 'b11110000;
    ram_symbol2[314] = 'b01011111;
    ram_symbol3[314] = 'b11100000;
    ram_symbol0[315] = 'b00010011;
    ram_symbol1[315] = 'b00000101;
    ram_symbol2[315] = 'b10100000;
    ram_symbol3[315] = 'b00000000;
    ram_symbol0[316] = 'b00100011;
    ram_symbol1[316] = 'b00101000;
    ram_symbol2[316] = 'b00100100;
    ram_symbol3[316] = 'b00010001;
    ram_symbol0[317] = 'b11101111;
    ram_symbol1[317] = 'b11110000;
    ram_symbol2[317] = 'b10011111;
    ram_symbol3[317] = 'b11011111;
    ram_symbol0[318] = 'b00010011;
    ram_symbol1[318] = 'b00000110;
    ram_symbol2[318] = 'b00000000;
    ram_symbol3[318] = 'b01000000;
    ram_symbol0[319] = 'b10010011;
    ram_symbol1[319] = 'b00000101;
    ram_symbol2[319] = 'b00000000;
    ram_symbol3[319] = 'b00000000;
    ram_symbol0[320] = 'b00010011;
    ram_symbol1[320] = 'b00000101;
    ram_symbol2[320] = 'b10000000;
    ram_symbol3[320] = 'b00000000;
    ram_symbol0[321] = 'b11101111;
    ram_symbol1[321] = 'b11110000;
    ram_symbol2[321] = 'b00011111;
    ram_symbol3[321] = 'b11100001;
    ram_symbol0[322] = 'b00010011;
    ram_symbol1[322] = 'b00000110;
    ram_symbol2[322] = 'b00000000;
    ram_symbol3[322] = 'b00000000;
    ram_symbol0[323] = 'b10010011;
    ram_symbol1[323] = 'b00000101;
    ram_symbol2[323] = 'b00100000;
    ram_symbol3[323] = 'b00000000;
    ram_symbol0[324] = 'b00010011;
    ram_symbol1[324] = 'b00000101;
    ram_symbol2[324] = 'b00000000;
    ram_symbol3[324] = 'b00000000;
    ram_symbol0[325] = 'b11101111;
    ram_symbol1[325] = 'b11110000;
    ram_symbol2[325] = 'b00011111;
    ram_symbol3[325] = 'b11100000;
    ram_symbol0[326] = 'b00010011;
    ram_symbol1[326] = 'b00000110;
    ram_symbol2[326] = 'b00000000;
    ram_symbol3[326] = 'b00000000;
    ram_symbol0[327] = 'b10010011;
    ram_symbol1[327] = 'b00000101;
    ram_symbol2[327] = 'b00110000;
    ram_symbol3[327] = 'b00000000;
    ram_symbol0[328] = 'b00010011;
    ram_symbol1[328] = 'b00000101;
    ram_symbol2[328] = 'b00000000;
    ram_symbol3[328] = 'b00000000;
    ram_symbol0[329] = 'b11101111;
    ram_symbol1[329] = 'b11110000;
    ram_symbol2[329] = 'b00011111;
    ram_symbol3[329] = 'b11011111;
    ram_symbol0[330] = 'b00010011;
    ram_symbol1[330] = 'b00000110;
    ram_symbol2[330] = 'b01000000;
    ram_symbol3[330] = 'b00000100;
    ram_symbol0[331] = 'b10010011;
    ram_symbol1[331] = 'b00000101;
    ram_symbol2[331] = 'b00010000;
    ram_symbol3[331] = 'b00000000;
    ram_symbol0[332] = 'b00010011;
    ram_symbol1[332] = 'b00000101;
    ram_symbol2[332] = 'b00000000;
    ram_symbol3[332] = 'b00000000;
    ram_symbol0[333] = 'b11101111;
    ram_symbol1[333] = 'b11110000;
    ram_symbol2[333] = 'b00011111;
    ram_symbol3[333] = 'b11011110;
    ram_symbol0[334] = 'b00010011;
    ram_symbol1[334] = 'b00000110;
    ram_symbol2[334] = 'b00000000;
    ram_symbol3[334] = 'b00010000;
    ram_symbol0[335] = 'b10010011;
    ram_symbol1[335] = 'b00000101;
    ram_symbol2[335] = 'b00000000;
    ram_symbol3[335] = 'b00000000;
    ram_symbol0[336] = 'b00010011;
    ram_symbol1[336] = 'b00000101;
    ram_symbol2[336] = 'b00000000;
    ram_symbol3[336] = 'b00000000;
    ram_symbol0[337] = 'b11101111;
    ram_symbol1[337] = 'b11110000;
    ram_symbol2[337] = 'b00011111;
    ram_symbol3[337] = 'b11011101;
    ram_symbol0[338] = 'b00010011;
    ram_symbol1[338] = 'b00000101;
    ram_symbol2[338] = 'b01000000;
    ram_symbol3[338] = 'b00000001;
    ram_symbol0[339] = 'b11101111;
    ram_symbol1[339] = 'b11110000;
    ram_symbol2[339] = 'b00011111;
    ram_symbol3[339] = 'b11011010;
    ram_symbol0[340] = 'b00010011;
    ram_symbol1[340] = 'b00000110;
    ram_symbol2[340] = 'b00000000;
    ram_symbol3[340] = 'b01000000;
    ram_symbol0[341] = 'b10010011;
    ram_symbol1[341] = 'b00000101;
    ram_symbol2[341] = 'b00000000;
    ram_symbol3[341] = 'b00000000;
    ram_symbol0[342] = 'b00010011;
    ram_symbol1[342] = 'b00000101;
    ram_symbol2[342] = 'b10000000;
    ram_symbol3[342] = 'b00000000;
    ram_symbol0[343] = 'b11101111;
    ram_symbol1[343] = 'b11110000;
    ram_symbol2[343] = 'b10011111;
    ram_symbol3[343] = 'b11011011;
    ram_symbol0[344] = 'b00010011;
    ram_symbol1[344] = 'b00000110;
    ram_symbol2[344] = 'b00000000;
    ram_symbol3[344] = 'b00000000;
    ram_symbol0[345] = 'b10010011;
    ram_symbol1[345] = 'b00000101;
    ram_symbol2[345] = 'b00000000;
    ram_symbol3[345] = 'b00000000;
    ram_symbol0[346] = 'b00010011;
    ram_symbol1[346] = 'b00000101;
    ram_symbol2[346] = 'b00000000;
    ram_symbol3[346] = 'b00000001;
    ram_symbol0[347] = 'b11101111;
    ram_symbol1[347] = 'b11110000;
    ram_symbol2[347] = 'b10011111;
    ram_symbol3[347] = 'b11011010;
    ram_symbol0[348] = 'b00010011;
    ram_symbol1[348] = 'b00000110;
    ram_symbol2[348] = 'b00000000;
    ram_symbol3[348] = 'b00000000;
    ram_symbol0[349] = 'b10010011;
    ram_symbol1[349] = 'b00000101;
    ram_symbol2[349] = 'b00000000;
    ram_symbol3[349] = 'b00000000;
    ram_symbol0[350] = 'b00010011;
    ram_symbol1[350] = 'b00000101;
    ram_symbol2[350] = 'b00000000;
    ram_symbol3[350] = 'b00000001;
    ram_symbol0[351] = 'b11101111;
    ram_symbol1[351] = 'b11110000;
    ram_symbol2[351] = 'b10011111;
    ram_symbol3[351] = 'b11011001;
    ram_symbol0[352] = 'b00110111;
    ram_symbol1[352] = 'b00010110;
    ram_symbol2[352] = 'b00000000;
    ram_symbol3[352] = 'b00000000;
    ram_symbol0[353] = 'b00010011;
    ram_symbol1[353] = 'b00000110;
    ram_symbol2[353] = 'b00100110;
    ram_symbol3[353] = 'b10000101;
    ram_symbol0[354] = 'b10010011;
    ram_symbol1[354] = 'b00000101;
    ram_symbol2[354] = 'b00000000;
    ram_symbol3[354] = 'b00000000;
    ram_symbol0[355] = 'b00010011;
    ram_symbol1[355] = 'b00000101;
    ram_symbol2[355] = 'b00000000;
    ram_symbol3[355] = 'b00000000;
    ram_symbol0[356] = 'b11101111;
    ram_symbol1[356] = 'b11110000;
    ram_symbol2[356] = 'b01011111;
    ram_symbol3[356] = 'b11011000;
    ram_symbol0[357] = 'b00010011;
    ram_symbol1[357] = 'b00000101;
    ram_symbol2[357] = 'b01000000;
    ram_symbol3[357] = 'b00000001;
    ram_symbol0[358] = 'b11101111;
    ram_symbol1[358] = 'b11110000;
    ram_symbol2[358] = 'b01011111;
    ram_symbol3[358] = 'b11010101;
    ram_symbol0[359] = 'b00010011;
    ram_symbol1[359] = 'b00000110;
    ram_symbol2[359] = 'b01000000;
    ram_symbol3[359] = 'b00111100;
    ram_symbol0[360] = 'b10010011;
    ram_symbol1[360] = 'b00000101;
    ram_symbol2[360] = 'b00010000;
    ram_symbol3[360] = 'b00000000;
    ram_symbol0[361] = 'b00010011;
    ram_symbol1[361] = 'b00000101;
    ram_symbol2[361] = 'b00000000;
    ram_symbol3[361] = 'b00000000;
    ram_symbol0[362] = 'b11101111;
    ram_symbol1[362] = 'b11110000;
    ram_symbol2[362] = 'b11011111;
    ram_symbol3[362] = 'b11010110;
    ram_symbol0[363] = 'b00010011;
    ram_symbol1[363] = 'b00000110;
    ram_symbol2[363] = 'b01000000;
    ram_symbol3[363] = 'b00000100;
    ram_symbol0[364] = 'b10010011;
    ram_symbol1[364] = 'b00000101;
    ram_symbol2[364] = 'b00010000;
    ram_symbol3[364] = 'b00000000;
    ram_symbol0[365] = 'b00010011;
    ram_symbol1[365] = 'b00000101;
    ram_symbol2[365] = 'b00000000;
    ram_symbol3[365] = 'b00000000;
    ram_symbol0[366] = 'b11101111;
    ram_symbol1[366] = 'b11110000;
    ram_symbol2[366] = 'b11011111;
    ram_symbol3[366] = 'b11010101;
    ram_symbol0[367] = 'b00010011;
    ram_symbol1[367] = 'b00000101;
    ram_symbol2[367] = 'b10100000;
    ram_symbol3[367] = 'b00000000;
    ram_symbol0[368] = 'b11101111;
    ram_symbol1[368] = 'b11110000;
    ram_symbol2[368] = 'b11011111;
    ram_symbol3[368] = 'b11010010;
    ram_symbol0[369] = 'b00110111;
    ram_symbol1[369] = 'b00010101;
    ram_symbol2[369] = 'b10100000;
    ram_symbol3[369] = 'b00010000;
    ram_symbol0[370] = 'b00100011;
    ram_symbol1[370] = 'b00100000;
    ram_symbol2[370] = 'b10010100;
    ram_symbol3[370] = 'b00000000;
    ram_symbol0[371] = 'b00010011;
    ram_symbol1[371] = 'b00000101;
    ram_symbol2[371] = 'b01000101;
    ram_symbol3[371] = 'b10010010;
    ram_symbol0[372] = 'b11101111;
    ram_symbol1[372] = 'b11110000;
    ram_symbol2[372] = 'b10011111;
    ram_symbol3[372] = 'b11001110;
    ram_symbol0[373] = 'b10110111;
    ram_symbol1[373] = 'b10110111;
    ram_symbol2[373] = 'b11111111;
    ram_symbol3[373] = 'b11111111;
    ram_symbol0[374] = 'b10010011;
    ram_symbol1[374] = 'b10000111;
    ram_symbol2[374] = 'b00010111;
    ram_symbol3[374] = 'b11001110;
    ram_symbol0[375] = 'b00100011;
    ram_symbol1[375] = 'b10011010;
    ram_symbol2[375] = 'b11110001;
    ram_symbol3[375] = 'b10000000;
    ram_symbol0[376] = 'b00110111;
    ram_symbol1[376] = 'b00000100;
    ram_symbol2[376] = 'b00000000;
    ram_symbol3[376] = 'b10000000;
    ram_symbol0[377] = 'b10110111;
    ram_symbol1[377] = 'b00010100;
    ram_symbol2[377] = 'b00000000;
    ram_symbol3[377] = 'b10000000;
    ram_symbol0[378] = 'b11101111;
    ram_symbol1[378] = 'b11110000;
    ram_symbol2[378] = 'b00011111;
    ram_symbol3[378] = 'b10101100;
    ram_symbol0[379] = 'b00010011;
    ram_symbol1[379] = 'b00001001;
    ram_symbol2[379] = 'b00000101;
    ram_symbol3[379] = 'b00000000;
    ram_symbol0[380] = 'b11101111;
    ram_symbol1[380] = 'b11110000;
    ram_symbol2[380] = 'b10011111;
    ram_symbol3[380] = 'b10101011;
    ram_symbol0[381] = 'b00010011;
    ram_symbol1[381] = 'b00010101;
    ram_symbol2[381] = 'b00000101;
    ram_symbol3[381] = 'b00000001;
    ram_symbol0[382] = 'b00110011;
    ram_symbol1[382] = 'b00000101;
    ram_symbol2[382] = 'b00100101;
    ram_symbol3[382] = 'b00000001;
    ram_symbol0[383] = 'b00100011;
    ram_symbol1[383] = 'b00100000;
    ram_symbol2[383] = 'b10100100;
    ram_symbol3[383] = 'b00000000;
    ram_symbol0[384] = 'b00010011;
    ram_symbol1[384] = 'b00000100;
    ram_symbol2[384] = 'b01000100;
    ram_symbol3[384] = 'b00000000;
    ram_symbol0[385] = 'b11100011;
    ram_symbol1[385] = 'b00010010;
    ram_symbol2[385] = 'b10010100;
    ram_symbol3[385] = 'b11111110;
    ram_symbol0[386] = 'b00110111;
    ram_symbol1[386] = 'b00011011;
    ram_symbol2[386] = 'b10100000;
    ram_symbol3[386] = 'b00010000;
    ram_symbol0[387] = 'b00110111;
    ram_symbol1[387] = 'b00011001;
    ram_symbol2[387] = 'b00010000;
    ram_symbol3[387] = 'b00010000;
    ram_symbol0[388] = 'b00010011;
    ram_symbol1[388] = 'b00001010;
    ram_symbol2[388] = 'b11110000;
    ram_symbol3[388] = 'b11111111;
    ram_symbol0[389] = 'b00010011;
    ram_symbol1[389] = 'b00001100;
    ram_symbol2[389] = 'b11110000;
    ram_symbol3[389] = 'b11111111;
    ram_symbol0[390] = 'b10010011;
    ram_symbol1[390] = 'b00001011;
    ram_symbol2[390] = 'b00000000;
    ram_symbol3[390] = 'b00000100;
    ram_symbol0[391] = 'b00010011;
    ram_symbol1[391] = 'b00000101;
    ram_symbol2[391] = 'b11001011;
    ram_symbol3[391] = 'b10010011;
    ram_symbol0[392] = 'b11101111;
    ram_symbol1[392] = 'b11110000;
    ram_symbol2[392] = 'b10011111;
    ram_symbol3[392] = 'b11001001;
    ram_symbol0[393] = 'b00010011;
    ram_symbol1[393] = 'b00000100;
    ram_symbol2[393] = 'b00000000;
    ram_symbol3[393] = 'b00000000;
    ram_symbol0[394] = 'b10010011;
    ram_symbol1[394] = 'b00001001;
    ram_symbol2[394] = 'b00000000;
    ram_symbol3[394] = 'b00000000;
    ram_symbol0[395] = 'b10010011;
    ram_symbol1[395] = 'b00001100;
    ram_symbol2[395] = 'b00000000;
    ram_symbol3[395] = 'b00000000;
    ram_symbol0[396] = 'b10010011;
    ram_symbol1[396] = 'b00000100;
    ram_symbol2[396] = 'b00000000;
    ram_symbol3[396] = 'b00000000;
    ram_symbol0[397] = 'b10010011;
    ram_symbol1[397] = 'b00001101;
    ram_symbol2[397] = 'b00001001;
    ram_symbol3[397] = 'b00000010;
    ram_symbol0[398] = 'b00100011;
    ram_symbol1[398] = 'b00100000;
    ram_symbol2[398] = 'b10011001;
    ram_symbol3[398] = 'b00000000;
    ram_symbol0[399] = 'b00100011;
    ram_symbol1[399] = 'b10100000;
    ram_symbol2[399] = 'b10001101;
    ram_symbol3[399] = 'b00000001;
    ram_symbol0[400] = 'b00100011;
    ram_symbol1[400] = 'b10100000;
    ram_symbol2[400] = 'b00001101;
    ram_symbol3[400] = 'b00000000;
    ram_symbol0[401] = 'b11101111;
    ram_symbol1[401] = 'b11110000;
    ram_symbol2[401] = 'b01011111;
    ram_symbol3[401] = 'b10110110;
    ram_symbol0[402] = 'b00010011;
    ram_symbol1[402] = 'b10001101;
    ram_symbol2[402] = 'b00010100;
    ram_symbol3[402] = 'b00000000;
    ram_symbol0[403] = 'b01100011;
    ram_symbol1[403] = 'b00010100;
    ram_symbol2[403] = 'b00000101;
    ram_symbol3[403] = 'b00100010;
    ram_symbol0[404] = 'b00010011;
    ram_symbol1[404] = 'b00000101;
    ram_symbol2[404] = 'b10000000;
    ram_symbol3[404] = 'b00000101;
    ram_symbol0[405] = 'b11101111;
    ram_symbol1[405] = 'b11110000;
    ram_symbol2[405] = 'b10011111;
    ram_symbol3[405] = 'b11000100;
    ram_symbol0[406] = 'b10110011;
    ram_symbol1[406] = 'b10000111;
    ram_symbol2[406] = 'b10010100;
    ram_symbol3[406] = 'b01000001;
    ram_symbol0[407] = 'b00110011;
    ram_symbol1[407] = 'b10000111;
    ram_symbol2[407] = 'b10001001;
    ram_symbol3[407] = 'b01000000;
    ram_symbol0[408] = 'b01100011;
    ram_symbol1[408] = 'b01110110;
    ram_symbol2[408] = 'b11110111;
    ram_symbol3[408] = 'b00000000;
    ram_symbol0[409] = 'b10010011;
    ram_symbol1[409] = 'b10001001;
    ram_symbol2[409] = 'b00000100;
    ram_symbol3[409] = 'b00000000;
    ram_symbol0[410] = 'b00010011;
    ram_symbol1[410] = 'b10000100;
    ram_symbol2[410] = 'b00001100;
    ram_symbol3[410] = 'b00000000;
    ram_symbol0[411] = 'b10010011;
    ram_symbol1[411] = 'b00000100;
    ram_symbol2[411] = 'b00001101;
    ram_symbol3[411] = 'b00000000;
    ram_symbol0[412] = 'b11100011;
    ram_symbol1[412] = 'b00010100;
    ram_symbol2[412] = 'b01111101;
    ram_symbol3[412] = 'b11111101;
    ram_symbol0[413] = 'b00110011;
    ram_symbol1[413] = 'b00000100;
    ram_symbol2[413] = 'b00110100;
    ram_symbol3[413] = 'b00000001;
    ram_symbol0[414] = 'b00010011;
    ram_symbol1[414] = 'b00000101;
    ram_symbol2[414] = 'b10100000;
    ram_symbol3[414] = 'b00000000;
    ram_symbol0[415] = 'b00010011;
    ram_symbol1[415] = 'b01010100;
    ram_symbol2[415] = 'b00010100;
    ram_symbol3[415] = 'b00000000;
    ram_symbol0[416] = 'b11101111;
    ram_symbol1[416] = 'b11110000;
    ram_symbol2[416] = 'b11011111;
    ram_symbol3[416] = 'b11000001;
    ram_symbol0[417] = 'b10010011;
    ram_symbol1[417] = 'b00000100;
    ram_symbol2[417] = 'b00000000;
    ram_symbol3[417] = 'b00000000;
    ram_symbol0[418] = 'b10010011;
    ram_symbol1[418] = 'b00001001;
    ram_symbol2[418] = 'b10110100;
    ram_symbol3[418] = 'b00000000;
    ram_symbol0[419] = 'b00010011;
    ram_symbol1[419] = 'b00000101;
    ram_symbol2[419] = 'b00000000;
    ram_symbol3[419] = 'b00000010;
    ram_symbol0[420] = 'b10010011;
    ram_symbol1[420] = 'b10000100;
    ram_symbol2[420] = 'b00010100;
    ram_symbol3[420] = 'b00000000;
    ram_symbol0[421] = 'b11101111;
    ram_symbol1[421] = 'b11110000;
    ram_symbol2[421] = 'b10011111;
    ram_symbol3[421] = 'b11000000;
    ram_symbol0[422] = 'b11100011;
    ram_symbol1[422] = 'b11101010;
    ram_symbol2[422] = 'b00110100;
    ram_symbol3[422] = 'b11111111;
    ram_symbol0[423] = 'b00010011;
    ram_symbol1[423] = 'b10000101;
    ram_symbol2[423] = 'b10000001;
    ram_symbol3[423] = 'b10000000;
    ram_symbol0[424] = 'b11101111;
    ram_symbol1[424] = 'b11110000;
    ram_symbol2[424] = 'b10011111;
    ram_symbol3[424] = 'b11000001;
    ram_symbol0[425] = 'b00100011;
    ram_symbol1[425] = 'b00100000;
    ram_symbol2[425] = 'b10001001;
    ram_symbol3[425] = 'b00000000;
    ram_symbol0[426] = 'b00100011;
    ram_symbol1[426] = 'b00100000;
    ram_symbol2[426] = 'b01001001;
    ram_symbol3[426] = 'b00000011;
    ram_symbol0[427] = 'b00100011;
    ram_symbol1[427] = 'b00100000;
    ram_symbol2[427] = 'b00001001;
    ram_symbol3[427] = 'b00000010;
    ram_symbol0[428] = 'b11101111;
    ram_symbol1[428] = 'b11110000;
    ram_symbol2[428] = 'b10011111;
    ram_symbol3[428] = 'b10101111;
    ram_symbol0[429] = 'b11100011;
    ram_symbol1[429] = 'b00010100;
    ram_symbol2[429] = 'b00000101;
    ram_symbol3[429] = 'b11110110;
    ram_symbol0[430] = 'b10110111;
    ram_symbol1[430] = 'b00000111;
    ram_symbol2[430] = 'b00000010;
    ram_symbol3[430] = 'b00010000;
    ram_symbol0[431] = 'b00010011;
    ram_symbol1[431] = 'b00000111;
    ram_symbol2[431] = 'b00100000;
    ram_symbol3[431] = 'b00000000;
    ram_symbol0[432] = 'b00100011;
    ram_symbol1[432] = 'b10100100;
    ram_symbol2[432] = 'b00000111;
    ram_symbol3[432] = 'b00000000;
    ram_symbol0[433] = 'b00100011;
    ram_symbol1[433] = 'b10100000;
    ram_symbol2[433] = 'b11100111;
    ram_symbol3[433] = 'b00000010;
    ram_symbol0[434] = 'b00100011;
    ram_symbol1[434] = 'b10100010;
    ram_symbol2[434] = 'b11100111;
    ram_symbol3[434] = 'b00000010;
    ram_symbol0[435] = 'b00100011;
    ram_symbol1[435] = 'b10100100;
    ram_symbol2[435] = 'b11100111;
    ram_symbol3[435] = 'b00000010;
    ram_symbol0[436] = 'b00100011;
    ram_symbol1[436] = 'b10100110;
    ram_symbol2[436] = 'b11100111;
    ram_symbol3[436] = 'b00000010;
    ram_symbol0[437] = 'b00110111;
    ram_symbol1[437] = 'b00000111;
    ram_symbol2[437] = 'b00000001;
    ram_symbol3[437] = 'b00000000;
    ram_symbol0[438] = 'b10110111;
    ram_symbol1[438] = 'b00000110;
    ram_symbol2[438] = 'b00000010;
    ram_symbol3[438] = 'b00010000;
    ram_symbol0[439] = 'b00010011;
    ram_symbol1[439] = 'b00000111;
    ram_symbol2[439] = 'b11110111;
    ram_symbol3[439] = 'b11111111;
    ram_symbol0[440] = 'b10000011;
    ram_symbol1[440] = 'b10100111;
    ram_symbol2[440] = 'b01000110;
    ram_symbol3[440] = 'b00000000;
    ram_symbol0[441] = 'b10110011;
    ram_symbol1[441] = 'b11110111;
    ram_symbol2[441] = 'b11100111;
    ram_symbol3[441] = 'b00000000;
    ram_symbol0[442] = 'b11100011;
    ram_symbol1[442] = 'b10001100;
    ram_symbol2[442] = 'b00000111;
    ram_symbol3[442] = 'b11111110;
    ram_symbol0[443] = 'b10110111;
    ram_symbol1[443] = 'b00010111;
    ram_symbol2[443] = 'b00000000;
    ram_symbol3[443] = 'b00000000;
    ram_symbol0[444] = 'b10010011;
    ram_symbol1[444] = 'b10000111;
    ram_symbol2[444] = 'b00000111;
    ram_symbol3[444] = 'b10000000;
    ram_symbol0[445] = 'b00110111;
    ram_symbol1[445] = 'b00000111;
    ram_symbol2[445] = 'b00000001;
    ram_symbol3[445] = 'b00000000;
    ram_symbol0[446] = 'b00100011;
    ram_symbol1[446] = 'b10100000;
    ram_symbol2[446] = 'b11110110;
    ram_symbol3[446] = 'b00000000;
    ram_symbol0[447] = 'b00010011;
    ram_symbol1[447] = 'b00000111;
    ram_symbol2[447] = 'b11110111;
    ram_symbol3[447] = 'b11111111;
    ram_symbol0[448] = 'b10110111;
    ram_symbol1[448] = 'b00000110;
    ram_symbol2[448] = 'b00000010;
    ram_symbol3[448] = 'b00010000;
    ram_symbol0[449] = 'b10000011;
    ram_symbol1[449] = 'b10100111;
    ram_symbol2[449] = 'b01000110;
    ram_symbol3[449] = 'b00000000;
    ram_symbol0[450] = 'b10110011;
    ram_symbol1[450] = 'b11110111;
    ram_symbol2[450] = 'b11100111;
    ram_symbol3[450] = 'b00000000;
    ram_symbol0[451] = 'b11100011;
    ram_symbol1[451] = 'b10001100;
    ram_symbol2[451] = 'b00000111;
    ram_symbol3[451] = 'b11111110;
    ram_symbol0[452] = 'b10110111;
    ram_symbol1[452] = 'b00010111;
    ram_symbol2[452] = 'b00000000;
    ram_symbol3[452] = 'b00000000;
    ram_symbol0[453] = 'b10010011;
    ram_symbol1[453] = 'b10000111;
    ram_symbol2[453] = 'b00000111;
    ram_symbol3[453] = 'b10001000;
    ram_symbol0[454] = 'b00100011;
    ram_symbol1[454] = 'b10100000;
    ram_symbol2[454] = 'b11110110;
    ram_symbol3[454] = 'b00000000;
    ram_symbol0[455] = 'b00010011;
    ram_symbol1[455] = 'b00000101;
    ram_symbol2[455] = 'b10110000;
    ram_symbol3[455] = 'b00001010;
    ram_symbol0[456] = 'b11101111;
    ram_symbol1[456] = 'b11110000;
    ram_symbol2[456] = 'b00011111;
    ram_symbol3[456] = 'b10011100;
    ram_symbol0[457] = 'b00110111;
    ram_symbol1[457] = 'b00000111;
    ram_symbol2[457] = 'b00000001;
    ram_symbol3[457] = 'b00000000;
    ram_symbol0[458] = 'b10110111;
    ram_symbol1[458] = 'b00000110;
    ram_symbol2[458] = 'b00000010;
    ram_symbol3[458] = 'b00010000;
    ram_symbol0[459] = 'b00010011;
    ram_symbol1[459] = 'b00000111;
    ram_symbol2[459] = 'b11110111;
    ram_symbol3[459] = 'b11111111;
    ram_symbol0[460] = 'b10000011;
    ram_symbol1[460] = 'b10100111;
    ram_symbol2[460] = 'b01000110;
    ram_symbol3[460] = 'b00000000;
    ram_symbol0[461] = 'b10110011;
    ram_symbol1[461] = 'b11110111;
    ram_symbol2[461] = 'b11100111;
    ram_symbol3[461] = 'b00000000;
    ram_symbol0[462] = 'b11100011;
    ram_symbol1[462] = 'b10001100;
    ram_symbol2[462] = 'b00000111;
    ram_symbol3[462] = 'b11111110;
    ram_symbol0[463] = 'b10110111;
    ram_symbol1[463] = 'b00010111;
    ram_symbol2[463] = 'b00000000;
    ram_symbol3[463] = 'b00000000;
    ram_symbol0[464] = 'b10010011;
    ram_symbol1[464] = 'b10000111;
    ram_symbol2[464] = 'b00000111;
    ram_symbol3[464] = 'b10000000;
    ram_symbol0[465] = 'b00100011;
    ram_symbol1[465] = 'b10100000;
    ram_symbol2[465] = 'b11110110;
    ram_symbol3[465] = 'b00000000;
    ram_symbol0[466] = 'b10110111;
    ram_symbol1[466] = 'b11000111;
    ram_symbol2[466] = 'b10110000;
    ram_symbol3[466] = 'b00010000;
    ram_symbol0[467] = 'b00000011;
    ram_symbol1[467] = 'b10100111;
    ram_symbol2[467] = 'b10000111;
    ram_symbol3[467] = 'b11111111;
    ram_symbol0[468] = 'b10110111;
    ram_symbol1[468] = 'b01010111;
    ram_symbol2[468] = 'b00000000;
    ram_symbol3[468] = 'b00000000;
    ram_symbol0[469] = 'b10010011;
    ram_symbol1[469] = 'b10000111;
    ram_symbol2[469] = 'b00000111;
    ram_symbol3[469] = 'b11100010;
    ram_symbol0[470] = 'b00110011;
    ram_symbol1[470] = 'b00000111;
    ram_symbol2[470] = 'b11110111;
    ram_symbol3[470] = 'b00000000;
    ram_symbol0[471] = 'b10110111;
    ram_symbol1[471] = 'b11000110;
    ram_symbol2[471] = 'b10110000;
    ram_symbol3[471] = 'b00010000;
    ram_symbol0[472] = 'b10000011;
    ram_symbol1[472] = 'b10100111;
    ram_symbol2[472] = 'b10000110;
    ram_symbol3[472] = 'b11111111;
    ram_symbol0[473] = 'b10110011;
    ram_symbol1[473] = 'b00000111;
    ram_symbol2[473] = 'b11110111;
    ram_symbol3[473] = 'b01000000;
    ram_symbol0[474] = 'b11100011;
    ram_symbol1[474] = 'b11011100;
    ram_symbol2[474] = 'b00000111;
    ram_symbol3[474] = 'b11111110;
    ram_symbol0[475] = 'b00110111;
    ram_symbol1[475] = 'b00000111;
    ram_symbol2[475] = 'b00000001;
    ram_symbol3[475] = 'b00000000;
    ram_symbol0[476] = 'b10110111;
    ram_symbol1[476] = 'b00000110;
    ram_symbol2[476] = 'b00000010;
    ram_symbol3[476] = 'b00010000;
    ram_symbol0[477] = 'b00010011;
    ram_symbol1[477] = 'b00000111;
    ram_symbol2[477] = 'b11110111;
    ram_symbol3[477] = 'b11111111;
    ram_symbol0[478] = 'b10000011;
    ram_symbol1[478] = 'b10100111;
    ram_symbol2[478] = 'b01000110;
    ram_symbol3[478] = 'b00000000;
    ram_symbol0[479] = 'b10110011;
    ram_symbol1[479] = 'b11110111;
    ram_symbol2[479] = 'b11100111;
    ram_symbol3[479] = 'b00000000;
    ram_symbol0[480] = 'b11100011;
    ram_symbol1[480] = 'b10001100;
    ram_symbol2[480] = 'b00000111;
    ram_symbol3[480] = 'b11111110;
    ram_symbol0[481] = 'b10110111;
    ram_symbol1[481] = 'b00010111;
    ram_symbol2[481] = 'b00000000;
    ram_symbol3[481] = 'b00000000;
    ram_symbol0[482] = 'b10010011;
    ram_symbol1[482] = 'b10000111;
    ram_symbol2[482] = 'b00000111;
    ram_symbol3[482] = 'b10001000;
    ram_symbol0[483] = 'b00100011;
    ram_symbol1[483] = 'b10100000;
    ram_symbol2[483] = 'b11110110;
    ram_symbol3[483] = 'b00000000;
    ram_symbol0[484] = 'b00110111;
    ram_symbol1[484] = 'b00000110;
    ram_symbol2[484] = 'b00000100;
    ram_symbol3[484] = 'b00000000;
    ram_symbol0[485] = 'b10110111;
    ram_symbol1[485] = 'b00000101;
    ram_symbol2[485] = 'b11111000;
    ram_symbol3[485] = 'b10000000;
    ram_symbol0[486] = 'b00110111;
    ram_symbol1[486] = 'b00000101;
    ram_symbol2[486] = 'b01000000;
    ram_symbol3[486] = 'b00000000;
    ram_symbol0[487] = 'b11101111;
    ram_symbol1[487] = 'b11110000;
    ram_symbol2[487] = 'b10011111;
    ram_symbol3[487] = 'b10010110;
    ram_symbol0[488] = 'b00110111;
    ram_symbol1[488] = 'b00000111;
    ram_symbol2[488] = 'b00000001;
    ram_symbol3[488] = 'b00000000;
    ram_symbol0[489] = 'b10110111;
    ram_symbol1[489] = 'b00000110;
    ram_symbol2[489] = 'b00000010;
    ram_symbol3[489] = 'b00010000;
    ram_symbol0[490] = 'b00010011;
    ram_symbol1[490] = 'b00000111;
    ram_symbol2[490] = 'b11110111;
    ram_symbol3[490] = 'b11111111;
    ram_symbol0[491] = 'b10000011;
    ram_symbol1[491] = 'b10100111;
    ram_symbol2[491] = 'b01000110;
    ram_symbol3[491] = 'b00000000;
    ram_symbol0[492] = 'b10110011;
    ram_symbol1[492] = 'b11110111;
    ram_symbol2[492] = 'b11100111;
    ram_symbol3[492] = 'b00000000;
    ram_symbol0[493] = 'b11100011;
    ram_symbol1[493] = 'b10001100;
    ram_symbol2[493] = 'b00000111;
    ram_symbol3[493] = 'b11111110;
    ram_symbol0[494] = 'b10110111;
    ram_symbol1[494] = 'b00010111;
    ram_symbol2[494] = 'b00000000;
    ram_symbol3[494] = 'b00000000;
    ram_symbol0[495] = 'b10010011;
    ram_symbol1[495] = 'b10000111;
    ram_symbol2[495] = 'b00000111;
    ram_symbol3[495] = 'b10000000;
    ram_symbol0[496] = 'b00110111;
    ram_symbol1[496] = 'b00000111;
    ram_symbol2[496] = 'b00000001;
    ram_symbol3[496] = 'b00000000;
    ram_symbol0[497] = 'b00100011;
    ram_symbol1[497] = 'b10100000;
    ram_symbol2[497] = 'b11110110;
    ram_symbol3[497] = 'b00000000;
    ram_symbol0[498] = 'b00010011;
    ram_symbol1[498] = 'b00000111;
    ram_symbol2[498] = 'b11110111;
    ram_symbol3[498] = 'b11111111;
    ram_symbol0[499] = 'b10110111;
    ram_symbol1[499] = 'b00000110;
    ram_symbol2[499] = 'b00000010;
    ram_symbol3[499] = 'b00010000;
    ram_symbol0[500] = 'b10000011;
    ram_symbol1[500] = 'b10100111;
    ram_symbol2[500] = 'b01000110;
    ram_symbol3[500] = 'b00000000;
    ram_symbol0[501] = 'b10110011;
    ram_symbol1[501] = 'b11110111;
    ram_symbol2[501] = 'b11100111;
    ram_symbol3[501] = 'b00000000;
    ram_symbol0[502] = 'b11100011;
    ram_symbol1[502] = 'b10001100;
    ram_symbol2[502] = 'b00000111;
    ram_symbol3[502] = 'b11111110;
    ram_symbol0[503] = 'b10110111;
    ram_symbol1[503] = 'b00010111;
    ram_symbol2[503] = 'b00000000;
    ram_symbol3[503] = 'b00000000;
    ram_symbol0[504] = 'b10010011;
    ram_symbol1[504] = 'b10000111;
    ram_symbol2[504] = 'b00000111;
    ram_symbol3[504] = 'b10001000;
    ram_symbol0[505] = 'b00100011;
    ram_symbol1[505] = 'b10100000;
    ram_symbol2[505] = 'b11110110;
    ram_symbol3[505] = 'b00000000;
    ram_symbol0[506] = 'b00110111;
    ram_symbol1[506] = 'b00000110;
    ram_symbol2[506] = 'b00001000;
    ram_symbol3[506] = 'b00000000;
    ram_symbol0[507] = 'b10110111;
    ram_symbol1[507] = 'b00000101;
    ram_symbol2[507] = 'b11110000;
    ram_symbol3[507] = 'b10000000;
    ram_symbol0[508] = 'b00110111;
    ram_symbol1[508] = 'b00000101;
    ram_symbol2[508] = 'b01001000;
    ram_symbol3[508] = 'b00000000;
    ram_symbol0[509] = 'b11101111;
    ram_symbol1[509] = 'b11110000;
    ram_symbol2[509] = 'b00011111;
    ram_symbol3[509] = 'b10010001;
    ram_symbol0[510] = 'b00110111;
    ram_symbol1[510] = 'b00000111;
    ram_symbol2[510] = 'b00000001;
    ram_symbol3[510] = 'b00000000;
    ram_symbol0[511] = 'b10110111;
    ram_symbol1[511] = 'b00000110;
    ram_symbol2[511] = 'b00000010;
    ram_symbol3[511] = 'b00010000;
    ram_symbol0[512] = 'b00010011;
    ram_symbol1[512] = 'b00000111;
    ram_symbol2[512] = 'b11110111;
    ram_symbol3[512] = 'b11111111;
    ram_symbol0[513] = 'b10000011;
    ram_symbol1[513] = 'b10100111;
    ram_symbol2[513] = 'b01000110;
    ram_symbol3[513] = 'b00000000;
    ram_symbol0[514] = 'b10110011;
    ram_symbol1[514] = 'b11110111;
    ram_symbol2[514] = 'b11100111;
    ram_symbol3[514] = 'b00000000;
    ram_symbol0[515] = 'b11100011;
    ram_symbol1[515] = 'b10001100;
    ram_symbol2[515] = 'b00000111;
    ram_symbol3[515] = 'b11111110;
    ram_symbol0[516] = 'b10110111;
    ram_symbol1[516] = 'b00010111;
    ram_symbol2[516] = 'b00000000;
    ram_symbol3[516] = 'b00000000;
    ram_symbol0[517] = 'b10010011;
    ram_symbol1[517] = 'b10000111;
    ram_symbol2[517] = 'b00000111;
    ram_symbol3[517] = 'b10000000;
    ram_symbol0[518] = 'b00100011;
    ram_symbol1[518] = 'b10100000;
    ram_symbol2[518] = 'b11110110;
    ram_symbol3[518] = 'b00000000;
    ram_symbol0[519] = 'b11101111;
    ram_symbol1[519] = 'b11110000;
    ram_symbol2[519] = 'b01011111;
    ram_symbol3[519] = 'b10111001;
    ram_symbol0[520] = 'b00110111;
    ram_symbol1[520] = 'b00000101;
    ram_symbol2[520] = 'b11111000;
    ram_symbol3[520] = 'b10000000;
    ram_symbol0[521] = 'b11101111;
    ram_symbol1[521] = 'b11110000;
    ram_symbol2[521] = 'b01011111;
    ram_symbol3[521] = 'b10000001;
    ram_symbol0[522] = 'b00000011;
    ram_symbol1[522] = 'b00100100;
    ram_symbol2[522] = 'b10000001;
    ram_symbol3[522] = 'b00000011;
    ram_symbol0[523] = 'b10000011;
    ram_symbol1[523] = 'b00100000;
    ram_symbol2[523] = 'b11000001;
    ram_symbol3[523] = 'b00000011;
    ram_symbol0[524] = 'b10000011;
    ram_symbol1[524] = 'b00100100;
    ram_symbol2[524] = 'b01000001;
    ram_symbol3[524] = 'b00000011;
    ram_symbol0[525] = 'b00000011;
    ram_symbol1[525] = 'b00101001;
    ram_symbol2[525] = 'b00000001;
    ram_symbol3[525] = 'b00000011;
    ram_symbol0[526] = 'b10000011;
    ram_symbol1[526] = 'b00101001;
    ram_symbol2[526] = 'b11000001;
    ram_symbol3[526] = 'b00000010;
    ram_symbol0[527] = 'b00000011;
    ram_symbol1[527] = 'b00101010;
    ram_symbol2[527] = 'b10000001;
    ram_symbol3[527] = 'b00000010;
    ram_symbol0[528] = 'b10000011;
    ram_symbol1[528] = 'b00101010;
    ram_symbol2[528] = 'b01000001;
    ram_symbol3[528] = 'b00000010;
    ram_symbol0[529] = 'b00000011;
    ram_symbol1[529] = 'b00101011;
    ram_symbol2[529] = 'b00000001;
    ram_symbol3[529] = 'b00000010;
    ram_symbol0[530] = 'b10000011;
    ram_symbol1[530] = 'b00101011;
    ram_symbol2[530] = 'b11000001;
    ram_symbol3[530] = 'b00000001;
    ram_symbol0[531] = 'b00000011;
    ram_symbol1[531] = 'b00101100;
    ram_symbol2[531] = 'b10000001;
    ram_symbol3[531] = 'b00000001;
    ram_symbol0[532] = 'b10000011;
    ram_symbol1[532] = 'b00101100;
    ram_symbol2[532] = 'b01000001;
    ram_symbol3[532] = 'b00000001;
    ram_symbol0[533] = 'b00000011;
    ram_symbol1[533] = 'b00101101;
    ram_symbol2[533] = 'b00000001;
    ram_symbol3[533] = 'b00000001;
    ram_symbol0[534] = 'b10000011;
    ram_symbol1[534] = 'b00101101;
    ram_symbol2[534] = 'b11000001;
    ram_symbol3[534] = 'b00000000;
    ram_symbol0[535] = 'b00010011;
    ram_symbol1[535] = 'b00000110;
    ram_symbol2[535] = 'b00000000;
    ram_symbol3[535] = 'b00000000;
    ram_symbol0[536] = 'b10010011;
    ram_symbol1[536] = 'b00000101;
    ram_symbol2[536] = 'b00000000;
    ram_symbol3[536] = 'b00000000;
    ram_symbol0[537] = 'b00010011;
    ram_symbol1[537] = 'b00000101;
    ram_symbol2[537] = 'b00000000;
    ram_symbol3[537] = 'b00000000;
    ram_symbol0[538] = 'b00110111;
    ram_symbol1[538] = 'b00000011;
    ram_symbol2[538] = 'b11111000;
    ram_symbol3[538] = 'b10000000;
    ram_symbol0[539] = 'b00010011;
    ram_symbol1[539] = 'b00000001;
    ram_symbol2[539] = 'b00000001;
    ram_symbol3[539] = 'b00000100;
    ram_symbol0[540] = 'b01100111;
    ram_symbol1[540] = 'b00000000;
    ram_symbol2[540] = 'b00000011;
    ram_symbol3[540] = 'b00000000;
    ram_symbol0[541] = 'b00010011;
    ram_symbol1[541] = 'b00000101;
    ram_symbol2[541] = 'b11100000;
    ram_symbol3[541] = 'b00000010;
    ram_symbol0[542] = 'b11101111;
    ram_symbol1[542] = 'b11110000;
    ram_symbol2[542] = 'b01011111;
    ram_symbol3[542] = 'b10100010;
    ram_symbol0[543] = 'b10010011;
    ram_symbol1[543] = 'b00001100;
    ram_symbol2[543] = 'b00001101;
    ram_symbol3[543] = 'b00000000;
    ram_symbol0[544] = 'b01101111;
    ram_symbol1[544] = 'b11110000;
    ram_symbol2[544] = 'b11011111;
    ram_symbol3[544] = 'b11011110;
    ram_symbol0[545] = 'b00010011;
    ram_symbol1[545] = 'b00000001;
    ram_symbol2[545] = 'b00000001;
    ram_symbol3[545] = 'b11111111;
    ram_symbol0[546] = 'b00100011;
    ram_symbol1[546] = 'b00100100;
    ram_symbol2[546] = 'b10000001;
    ram_symbol3[546] = 'b00000000;
    ram_symbol0[547] = 'b00100011;
    ram_symbol1[547] = 'b00100000;
    ram_symbol2[547] = 'b00100001;
    ram_symbol3[547] = 'b00000001;
    ram_symbol0[548] = 'b00010111;
    ram_symbol1[548] = 'b00000100;
    ram_symbol2[548] = 'b00000000;
    ram_symbol3[548] = 'b00000000;
    ram_symbol0[549] = 'b00010011;
    ram_symbol1[549] = 'b00000100;
    ram_symbol2[549] = 'b10000100;
    ram_symbol3[549] = 'b00001000;
    ram_symbol0[550] = 'b00010111;
    ram_symbol1[550] = 'b00001001;
    ram_symbol2[550] = 'b00000000;
    ram_symbol3[550] = 'b00000000;
    ram_symbol0[551] = 'b00010011;
    ram_symbol1[551] = 'b00001001;
    ram_symbol2[551] = 'b00001001;
    ram_symbol3[551] = 'b00001000;
    ram_symbol0[552] = 'b00110011;
    ram_symbol1[552] = 'b00001001;
    ram_symbol2[552] = 'b10001001;
    ram_symbol3[552] = 'b01000000;
    ram_symbol0[553] = 'b00100011;
    ram_symbol1[553] = 'b00100110;
    ram_symbol2[553] = 'b00010001;
    ram_symbol3[553] = 'b00000000;
    ram_symbol0[554] = 'b00100011;
    ram_symbol1[554] = 'b00100010;
    ram_symbol2[554] = 'b10010001;
    ram_symbol3[554] = 'b00000000;
    ram_symbol0[555] = 'b00010011;
    ram_symbol1[555] = 'b01011001;
    ram_symbol2[555] = 'b00101001;
    ram_symbol3[555] = 'b01000000;
    ram_symbol0[556] = 'b01100011;
    ram_symbol1[556] = 'b00001110;
    ram_symbol2[556] = 'b00001001;
    ram_symbol3[556] = 'b00000000;
    ram_symbol0[557] = 'b10010011;
    ram_symbol1[557] = 'b00000100;
    ram_symbol2[557] = 'b00000000;
    ram_symbol3[557] = 'b00000000;
    ram_symbol0[558] = 'b10000011;
    ram_symbol1[558] = 'b00100111;
    ram_symbol2[558] = 'b00000100;
    ram_symbol3[558] = 'b00000000;
    ram_symbol0[559] = 'b10010011;
    ram_symbol1[559] = 'b10000100;
    ram_symbol2[559] = 'b00010100;
    ram_symbol3[559] = 'b00000000;
    ram_symbol0[560] = 'b00010011;
    ram_symbol1[560] = 'b00000100;
    ram_symbol2[560] = 'b01000100;
    ram_symbol3[560] = 'b00000000;
    ram_symbol0[561] = 'b11100111;
    ram_symbol1[561] = 'b10000000;
    ram_symbol2[561] = 'b00000111;
    ram_symbol3[561] = 'b00000000;
    ram_symbol0[562] = 'b11100011;
    ram_symbol1[562] = 'b00011000;
    ram_symbol2[562] = 'b10011001;
    ram_symbol3[562] = 'b11111110;
    ram_symbol0[563] = 'b00010111;
    ram_symbol1[563] = 'b00000100;
    ram_symbol2[563] = 'b00000000;
    ram_symbol3[563] = 'b00000000;
    ram_symbol0[564] = 'b00010011;
    ram_symbol1[564] = 'b00000100;
    ram_symbol2[564] = 'b11000100;
    ram_symbol3[564] = 'b00000100;
    ram_symbol0[565] = 'b00010111;
    ram_symbol1[565] = 'b00001001;
    ram_symbol2[565] = 'b00000000;
    ram_symbol3[565] = 'b00000000;
    ram_symbol0[566] = 'b00010011;
    ram_symbol1[566] = 'b00001001;
    ram_symbol2[566] = 'b01001001;
    ram_symbol3[566] = 'b00000100;
    ram_symbol0[567] = 'b00110011;
    ram_symbol1[567] = 'b00001001;
    ram_symbol2[567] = 'b10001001;
    ram_symbol3[567] = 'b01000000;
    ram_symbol0[568] = 'b00010011;
    ram_symbol1[568] = 'b01011001;
    ram_symbol2[568] = 'b00101001;
    ram_symbol3[568] = 'b01000000;
    ram_symbol0[569] = 'b01100011;
    ram_symbol1[569] = 'b00001110;
    ram_symbol2[569] = 'b00001001;
    ram_symbol3[569] = 'b00000000;
    ram_symbol0[570] = 'b10010011;
    ram_symbol1[570] = 'b00000100;
    ram_symbol2[570] = 'b00000000;
    ram_symbol3[570] = 'b00000000;
    ram_symbol0[571] = 'b10000011;
    ram_symbol1[571] = 'b00100111;
    ram_symbol2[571] = 'b00000100;
    ram_symbol3[571] = 'b00000000;
    ram_symbol0[572] = 'b10010011;
    ram_symbol1[572] = 'b10000100;
    ram_symbol2[572] = 'b00010100;
    ram_symbol3[572] = 'b00000000;
    ram_symbol0[573] = 'b00010011;
    ram_symbol1[573] = 'b00000100;
    ram_symbol2[573] = 'b01000100;
    ram_symbol3[573] = 'b00000000;
    ram_symbol0[574] = 'b11100111;
    ram_symbol1[574] = 'b10000000;
    ram_symbol2[574] = 'b00000111;
    ram_symbol3[574] = 'b00000000;
    ram_symbol0[575] = 'b11100011;
    ram_symbol1[575] = 'b00011000;
    ram_symbol2[575] = 'b10011001;
    ram_symbol3[575] = 'b11111110;
    ram_symbol0[576] = 'b10000011;
    ram_symbol1[576] = 'b00100000;
    ram_symbol2[576] = 'b11000001;
    ram_symbol3[576] = 'b00000000;
    ram_symbol0[577] = 'b00000011;
    ram_symbol1[577] = 'b00100100;
    ram_symbol2[577] = 'b10000001;
    ram_symbol3[577] = 'b00000000;
    ram_symbol0[578] = 'b10000011;
    ram_symbol1[578] = 'b00100100;
    ram_symbol2[578] = 'b01000001;
    ram_symbol3[578] = 'b00000000;
    ram_symbol0[579] = 'b00000011;
    ram_symbol1[579] = 'b00101001;
    ram_symbol2[579] = 'b00000001;
    ram_symbol3[579] = 'b00000000;
    ram_symbol0[580] = 'b00010011;
    ram_symbol1[580] = 'b00000001;
    ram_symbol2[580] = 'b00000001;
    ram_symbol3[580] = 'b00000001;
    ram_symbol0[581] = 'b01100111;
    ram_symbol1[581] = 'b10000000;
    ram_symbol2[581] = 'b00000000;
    ram_symbol3[581] = 'b00000000;
    ram_symbol0[582] = 'b01010110;
    ram_symbol1[582] = 'b01000111;
    ram_symbol2[582] = 'b01000001;
    ram_symbol3[582] = 'b00100000;
    ram_symbol0[583] = 'b01101001;
    ram_symbol1[583] = 'b01101110;
    ram_symbol2[583] = 'b01101001;
    ram_symbol3[583] = 'b01110100;
    ram_symbol0[584] = 'b00001010;
    ram_symbol1[584] = 'b00000000;
    ram_symbol2[584] = 'b00000000;
    ram_symbol3[584] = 'b00000000;
    ram_symbol0[585] = 'b00001010;
    ram_symbol1[585] = 'b01010011;
    ram_symbol2[585] = 'b00110111;
    ram_symbol3[585] = 'b00100000;
    ram_symbol0[586] = 'b01110000;
    ram_symbol1[586] = 'b01101000;
    ram_symbol2[586] = 'b01111001;
    ram_symbol3[586] = 'b00100000;
    ram_symbol0[587] = 'b01100011;
    ram_symbol1[587] = 'b01100001;
    ram_symbol2[587] = 'b01101100;
    ram_symbol3[587] = 'b01101001;
    ram_symbol0[588] = 'b01100010;
    ram_symbol1[588] = 'b01110010;
    ram_symbol2[588] = 'b01100001;
    ram_symbol3[588] = 'b01110100;
    ram_symbol0[589] = 'b01101001;
    ram_symbol1[589] = 'b01101111;
    ram_symbol2[589] = 'b01101110;
    ram_symbol3[589] = 'b00001010;
    ram_symbol0[590] = 'b00000000;
    ram_symbol1[590] = 'b00000000;
    ram_symbol2[590] = 'b00000000;
    ram_symbol3[590] = 'b00000000;
    ram_symbol0[591] = 'b00100000;
    ram_symbol1[591] = 'b00100000;
    ram_symbol2[591] = 'b01000100;
    ram_symbol3[591] = 'b01010001;
    ram_symbol0[592] = 'b00100000;
    ram_symbol1[592] = 'b01100101;
    ram_symbol2[592] = 'b01111001;
    ram_symbol3[592] = 'b01100101;
    ram_symbol0[593] = 'b00100000;
    ram_symbol1[593] = 'b00111010;
    ram_symbol2[593] = 'b00100000;
    ram_symbol3[593] = 'b00000000;
    ram_symbol0[594] = 'b01011110;
    ram_symbol1[594] = 'b00001010;
    ram_symbol2[594] = 'b00000000;
    ram_symbol3[594] = 'b00000000;
    ram_symbol0[595] = 'b00000000;
    ram_symbol1[595] = 'b00000000;
    ram_symbol2[595] = 'b00000000;
    ram_symbol3[595] = 'b00000000;
    ram_symbol0[596] = 'b00000000;
    ram_symbol1[596] = 'b00000000;
    ram_symbol2[596] = 'b00000000;
    ram_symbol3[596] = 'b00000000;
    ram_symbol0[597] = 'b00000000;
    ram_symbol1[597] = 'b00000000;
    ram_symbol2[597] = 'b00000000;
    ram_symbol3[597] = 'b00000000;
    ram_symbol0[598] = 'b00000000;
    ram_symbol1[598] = 'b00000000;
    ram_symbol2[598] = 'b00000000;
    ram_symbol3[598] = 'b00000000;
    ram_symbol0[599] = 'b00000000;
    ram_symbol1[599] = 'b00000000;
    ram_symbol2[599] = 'b00000000;
    ram_symbol3[599] = 'b00000000;
    ram_symbol0[600] = 'b00000000;
    ram_symbol1[600] = 'b00000000;
    ram_symbol2[600] = 'b00000000;
    ram_symbol3[600] = 'b00000000;
    ram_symbol0[601] = 'b00000000;
    ram_symbol1[601] = 'b00000000;
    ram_symbol2[601] = 'b00000000;
    ram_symbol3[601] = 'b00000000;
    ram_symbol0[602] = 'b00000000;
    ram_symbol1[602] = 'b00000000;
    ram_symbol2[602] = 'b00000000;
    ram_symbol3[602] = 'b00000000;
    ram_symbol0[603] = 'b00000000;
    ram_symbol1[603] = 'b00000000;
    ram_symbol2[603] = 'b00000000;
    ram_symbol3[603] = 'b00000000;
    ram_symbol0[604] = 'b00000000;
    ram_symbol1[604] = 'b00000000;
    ram_symbol2[604] = 'b00000000;
    ram_symbol3[604] = 'b00000000;
    ram_symbol0[605] = 'b00000000;
    ram_symbol1[605] = 'b00000000;
    ram_symbol2[605] = 'b00000000;
    ram_symbol3[605] = 'b00000000;
    ram_symbol0[606] = 'b00000000;
    ram_symbol1[606] = 'b00000000;
    ram_symbol2[606] = 'b00000000;
    ram_symbol3[606] = 'b00000000;
    ram_symbol0[607] = 'b00000000;
    ram_symbol1[607] = 'b00000000;
    ram_symbol2[607] = 'b00000000;
    ram_symbol3[607] = 'b00000000;
    ram_symbol0[608] = 'b00000000;
    ram_symbol1[608] = 'b00000000;
    ram_symbol2[608] = 'b00000000;
    ram_symbol3[608] = 'b00000000;
    ram_symbol0[609] = 'b00000000;
    ram_symbol1[609] = 'b00000000;
    ram_symbol2[609] = 'b00000000;
    ram_symbol3[609] = 'b00000000;
    ram_symbol0[610] = 'b00000000;
    ram_symbol1[610] = 'b00000000;
    ram_symbol2[610] = 'b00000000;
    ram_symbol3[610] = 'b00000000;
    ram_symbol0[611] = 'b00000000;
    ram_symbol1[611] = 'b00000000;
    ram_symbol2[611] = 'b00000000;
    ram_symbol3[611] = 'b00000000;
    ram_symbol0[612] = 'b00000000;
    ram_symbol1[612] = 'b00000000;
    ram_symbol2[612] = 'b00000000;
    ram_symbol3[612] = 'b00000000;
    ram_symbol0[613] = 'b00000000;
    ram_symbol1[613] = 'b00000000;
    ram_symbol2[613] = 'b00000000;
    ram_symbol3[613] = 'b00000000;
    ram_symbol0[614] = 'b00000000;
    ram_symbol1[614] = 'b00000000;
    ram_symbol2[614] = 'b00000000;
    ram_symbol3[614] = 'b00000000;
    ram_symbol0[615] = 'b00000000;
    ram_symbol1[615] = 'b00000000;
    ram_symbol2[615] = 'b00000000;
    ram_symbol3[615] = 'b00000000;
    ram_symbol0[616] = 'b00000000;
    ram_symbol1[616] = 'b00000000;
    ram_symbol2[616] = 'b00000000;
    ram_symbol3[616] = 'b00000000;
    ram_symbol0[617] = 'b00000000;
    ram_symbol1[617] = 'b00000000;
    ram_symbol2[617] = 'b00000000;
    ram_symbol3[617] = 'b00000000;
    ram_symbol0[618] = 'b00000000;
    ram_symbol1[618] = 'b00000000;
    ram_symbol2[618] = 'b00000000;
    ram_symbol3[618] = 'b00000000;
    ram_symbol0[619] = 'b00000000;
    ram_symbol1[619] = 'b00000000;
    ram_symbol2[619] = 'b00000000;
    ram_symbol3[619] = 'b00000000;
    ram_symbol0[620] = 'b00000000;
    ram_symbol1[620] = 'b00000000;
    ram_symbol2[620] = 'b00000000;
    ram_symbol3[620] = 'b00000000;
    ram_symbol0[621] = 'b00000000;
    ram_symbol1[621] = 'b00000000;
    ram_symbol2[621] = 'b00000000;
    ram_symbol3[621] = 'b00000000;
    ram_symbol0[622] = 'b00000000;
    ram_symbol1[622] = 'b00000000;
    ram_symbol2[622] = 'b00000000;
    ram_symbol3[622] = 'b00000000;
    ram_symbol0[623] = 'b00000000;
    ram_symbol1[623] = 'b00000000;
    ram_symbol2[623] = 'b00000000;
    ram_symbol3[623] = 'b00000000;
    ram_symbol0[624] = 'b00000000;
    ram_symbol1[624] = 'b00000000;
    ram_symbol2[624] = 'b00000000;
    ram_symbol3[624] = 'b00000000;
    ram_symbol0[625] = 'b00000000;
    ram_symbol1[625] = 'b00000000;
    ram_symbol2[625] = 'b00000000;
    ram_symbol3[625] = 'b00000000;
    ram_symbol0[626] = 'b00000000;
    ram_symbol1[626] = 'b00000000;
    ram_symbol2[626] = 'b00000000;
    ram_symbol3[626] = 'b00000000;
    ram_symbol0[627] = 'b00000000;
    ram_symbol1[627] = 'b00000000;
    ram_symbol2[627] = 'b00000000;
    ram_symbol3[627] = 'b00000000;
    ram_symbol0[628] = 'b00000000;
    ram_symbol1[628] = 'b00000000;
    ram_symbol2[628] = 'b00000000;
    ram_symbol3[628] = 'b00000000;
    ram_symbol0[629] = 'b00000000;
    ram_symbol1[629] = 'b00000000;
    ram_symbol2[629] = 'b00000000;
    ram_symbol3[629] = 'b00000000;
    ram_symbol0[630] = 'b00000000;
    ram_symbol1[630] = 'b00000000;
    ram_symbol2[630] = 'b00000000;
    ram_symbol3[630] = 'b00000000;
    ram_symbol0[631] = 'b00000000;
    ram_symbol1[631] = 'b00000000;
    ram_symbol2[631] = 'b00000000;
    ram_symbol3[631] = 'b00000000;
    ram_symbol0[632] = 'b00000000;
    ram_symbol1[632] = 'b00000000;
    ram_symbol2[632] = 'b00000000;
    ram_symbol3[632] = 'b00000000;
    ram_symbol0[633] = 'b00000000;
    ram_symbol1[633] = 'b00000000;
    ram_symbol2[633] = 'b00000000;
    ram_symbol3[633] = 'b00000000;
    ram_symbol0[634] = 'b00000000;
    ram_symbol1[634] = 'b00000000;
    ram_symbol2[634] = 'b00000000;
    ram_symbol3[634] = 'b00000000;
    ram_symbol0[635] = 'b00000000;
    ram_symbol1[635] = 'b00000000;
    ram_symbol2[635] = 'b00000000;
    ram_symbol3[635] = 'b00000000;
    ram_symbol0[636] = 'b00000000;
    ram_symbol1[636] = 'b00000000;
    ram_symbol2[636] = 'b00000000;
    ram_symbol3[636] = 'b00000000;
    ram_symbol0[637] = 'b00000000;
    ram_symbol1[637] = 'b00000000;
    ram_symbol2[637] = 'b00000000;
    ram_symbol3[637] = 'b00000000;
    ram_symbol0[638] = 'b00000000;
    ram_symbol1[638] = 'b00000000;
    ram_symbol2[638] = 'b00000000;
    ram_symbol3[638] = 'b00000000;
    ram_symbol0[639] = 'b00000000;
    ram_symbol1[639] = 'b00000000;
    ram_symbol2[639] = 'b00000000;
    ram_symbol3[639] = 'b00000000;
    ram_symbol0[640] = 'b00000000;
    ram_symbol1[640] = 'b00000000;
    ram_symbol2[640] = 'b00000000;
    ram_symbol3[640] = 'b00000000;
    ram_symbol0[641] = 'b00000000;
    ram_symbol1[641] = 'b00000000;
    ram_symbol2[641] = 'b00000000;
    ram_symbol3[641] = 'b00000000;
    ram_symbol0[642] = 'b00000000;
    ram_symbol1[642] = 'b00000000;
    ram_symbol2[642] = 'b00000000;
    ram_symbol3[642] = 'b00000000;
    ram_symbol0[643] = 'b00000000;
    ram_symbol1[643] = 'b00000000;
    ram_symbol2[643] = 'b00000000;
    ram_symbol3[643] = 'b00000000;
    ram_symbol0[644] = 'b00000000;
    ram_symbol1[644] = 'b00000000;
    ram_symbol2[644] = 'b00000000;
    ram_symbol3[644] = 'b00000000;
    ram_symbol0[645] = 'b00000000;
    ram_symbol1[645] = 'b00000000;
    ram_symbol2[645] = 'b00000000;
    ram_symbol3[645] = 'b00000000;
    ram_symbol0[646] = 'b00000000;
    ram_symbol1[646] = 'b00000000;
    ram_symbol2[646] = 'b00000000;
    ram_symbol3[646] = 'b00000000;
    ram_symbol0[647] = 'b00000000;
    ram_symbol1[647] = 'b00000000;
    ram_symbol2[647] = 'b00000000;
    ram_symbol3[647] = 'b00000000;
    ram_symbol0[648] = 'b00000000;
    ram_symbol1[648] = 'b00000000;
    ram_symbol2[648] = 'b00000000;
    ram_symbol3[648] = 'b00000000;
    ram_symbol0[649] = 'b00000000;
    ram_symbol1[649] = 'b00000000;
    ram_symbol2[649] = 'b00000000;
    ram_symbol3[649] = 'b00000000;
    ram_symbol0[650] = 'b00000000;
    ram_symbol1[650] = 'b00000000;
    ram_symbol2[650] = 'b00000000;
    ram_symbol3[650] = 'b00000000;
    ram_symbol0[651] = 'b00000000;
    ram_symbol1[651] = 'b00000000;
    ram_symbol2[651] = 'b00000000;
    ram_symbol3[651] = 'b00000000;
    ram_symbol0[652] = 'b00000000;
    ram_symbol1[652] = 'b00000000;
    ram_symbol2[652] = 'b00000000;
    ram_symbol3[652] = 'b00000000;
    ram_symbol0[653] = 'b00000000;
    ram_symbol1[653] = 'b00000000;
    ram_symbol2[653] = 'b00000000;
    ram_symbol3[653] = 'b00000000;
    ram_symbol0[654] = 'b00000000;
    ram_symbol1[654] = 'b00000000;
    ram_symbol2[654] = 'b00000000;
    ram_symbol3[654] = 'b00000000;
    ram_symbol0[655] = 'b00000000;
    ram_symbol1[655] = 'b00000000;
    ram_symbol2[655] = 'b00000000;
    ram_symbol3[655] = 'b00000000;
    ram_symbol0[656] = 'b00000000;
    ram_symbol1[656] = 'b00000000;
    ram_symbol2[656] = 'b00000000;
    ram_symbol3[656] = 'b00000000;
    ram_symbol0[657] = 'b00000000;
    ram_symbol1[657] = 'b00000000;
    ram_symbol2[657] = 'b00000000;
    ram_symbol3[657] = 'b00000000;
    ram_symbol0[658] = 'b00000000;
    ram_symbol1[658] = 'b00000000;
    ram_symbol2[658] = 'b00000000;
    ram_symbol3[658] = 'b00000000;
    ram_symbol0[659] = 'b00000000;
    ram_symbol1[659] = 'b00000000;
    ram_symbol2[659] = 'b00000000;
    ram_symbol3[659] = 'b00000000;
    ram_symbol0[660] = 'b00000000;
    ram_symbol1[660] = 'b00000000;
    ram_symbol2[660] = 'b00000000;
    ram_symbol3[660] = 'b00000000;
    ram_symbol0[661] = 'b00000000;
    ram_symbol1[661] = 'b00000000;
    ram_symbol2[661] = 'b00000000;
    ram_symbol3[661] = 'b00000000;
    ram_symbol0[662] = 'b00000000;
    ram_symbol1[662] = 'b00000000;
    ram_symbol2[662] = 'b00000000;
    ram_symbol3[662] = 'b00000000;
    ram_symbol0[663] = 'b00000000;
    ram_symbol1[663] = 'b00000000;
    ram_symbol2[663] = 'b00000000;
    ram_symbol3[663] = 'b00000000;
    ram_symbol0[664] = 'b00000000;
    ram_symbol1[664] = 'b00000000;
    ram_symbol2[664] = 'b00000000;
    ram_symbol3[664] = 'b00000000;
    ram_symbol0[665] = 'b00000000;
    ram_symbol1[665] = 'b00000000;
    ram_symbol2[665] = 'b00000000;
    ram_symbol3[665] = 'b00000000;
    ram_symbol0[666] = 'b00000000;
    ram_symbol1[666] = 'b00000000;
    ram_symbol2[666] = 'b00000000;
    ram_symbol3[666] = 'b00000000;
    ram_symbol0[667] = 'b00000000;
    ram_symbol1[667] = 'b00000000;
    ram_symbol2[667] = 'b00000000;
    ram_symbol3[667] = 'b00000000;
    ram_symbol0[668] = 'b00000000;
    ram_symbol1[668] = 'b00000000;
    ram_symbol2[668] = 'b00000000;
    ram_symbol3[668] = 'b00000000;
    ram_symbol0[669] = 'b00000000;
    ram_symbol1[669] = 'b00000000;
    ram_symbol2[669] = 'b00000000;
    ram_symbol3[669] = 'b00000000;
    ram_symbol0[670] = 'b00000000;
    ram_symbol1[670] = 'b00000000;
    ram_symbol2[670] = 'b00000000;
    ram_symbol3[670] = 'b00000000;
    ram_symbol0[671] = 'b00000000;
    ram_symbol1[671] = 'b00000000;
    ram_symbol2[671] = 'b00000000;
    ram_symbol3[671] = 'b00000000;
    ram_symbol0[672] = 'b00000000;
    ram_symbol1[672] = 'b00000000;
    ram_symbol2[672] = 'b00000000;
    ram_symbol3[672] = 'b00000000;
    ram_symbol0[673] = 'b00000000;
    ram_symbol1[673] = 'b00000000;
    ram_symbol2[673] = 'b00000000;
    ram_symbol3[673] = 'b00000000;
    ram_symbol0[674] = 'b00000000;
    ram_symbol1[674] = 'b00000000;
    ram_symbol2[674] = 'b00000000;
    ram_symbol3[674] = 'b00000000;
    ram_symbol0[675] = 'b00000000;
    ram_symbol1[675] = 'b00000000;
    ram_symbol2[675] = 'b00000000;
    ram_symbol3[675] = 'b00000000;
    ram_symbol0[676] = 'b00000000;
    ram_symbol1[676] = 'b00000000;
    ram_symbol2[676] = 'b00000000;
    ram_symbol3[676] = 'b00000000;
    ram_symbol0[677] = 'b00000000;
    ram_symbol1[677] = 'b00000000;
    ram_symbol2[677] = 'b00000000;
    ram_symbol3[677] = 'b00000000;
    ram_symbol0[678] = 'b00000000;
    ram_symbol1[678] = 'b00000000;
    ram_symbol2[678] = 'b00000000;
    ram_symbol3[678] = 'b00000000;
    ram_symbol0[679] = 'b00000000;
    ram_symbol1[679] = 'b00000000;
    ram_symbol2[679] = 'b00000000;
    ram_symbol3[679] = 'b00000000;
    ram_symbol0[680] = 'b00000000;
    ram_symbol1[680] = 'b00000000;
    ram_symbol2[680] = 'b00000000;
    ram_symbol3[680] = 'b00000000;
    ram_symbol0[681] = 'b00000000;
    ram_symbol1[681] = 'b00000000;
    ram_symbol2[681] = 'b00000000;
    ram_symbol3[681] = 'b00000000;
    ram_symbol0[682] = 'b00000000;
    ram_symbol1[682] = 'b00000000;
    ram_symbol2[682] = 'b00000000;
    ram_symbol3[682] = 'b00000000;
    ram_symbol0[683] = 'b00000000;
    ram_symbol1[683] = 'b00000000;
    ram_symbol2[683] = 'b00000000;
    ram_symbol3[683] = 'b00000000;
    ram_symbol0[684] = 'b00000000;
    ram_symbol1[684] = 'b00000000;
    ram_symbol2[684] = 'b00000000;
    ram_symbol3[684] = 'b00000000;
    ram_symbol0[685] = 'b00000000;
    ram_symbol1[685] = 'b00000000;
    ram_symbol2[685] = 'b00000000;
    ram_symbol3[685] = 'b00000000;
    ram_symbol0[686] = 'b00000000;
    ram_symbol1[686] = 'b00000000;
    ram_symbol2[686] = 'b00000000;
    ram_symbol3[686] = 'b00000000;
    ram_symbol0[687] = 'b00000000;
    ram_symbol1[687] = 'b00000000;
    ram_symbol2[687] = 'b00000000;
    ram_symbol3[687] = 'b00000000;
    ram_symbol0[688] = 'b00000000;
    ram_symbol1[688] = 'b00000000;
    ram_symbol2[688] = 'b00000000;
    ram_symbol3[688] = 'b00000000;
    ram_symbol0[689] = 'b00000000;
    ram_symbol1[689] = 'b00000000;
    ram_symbol2[689] = 'b00000000;
    ram_symbol3[689] = 'b00000000;
    ram_symbol0[690] = 'b00000000;
    ram_symbol1[690] = 'b00000000;
    ram_symbol2[690] = 'b00000000;
    ram_symbol3[690] = 'b00000000;
    ram_symbol0[691] = 'b00000000;
    ram_symbol1[691] = 'b00000000;
    ram_symbol2[691] = 'b00000000;
    ram_symbol3[691] = 'b00000000;
    ram_symbol0[692] = 'b00000000;
    ram_symbol1[692] = 'b00000000;
    ram_symbol2[692] = 'b00000000;
    ram_symbol3[692] = 'b00000000;
    ram_symbol0[693] = 'b00000000;
    ram_symbol1[693] = 'b00000000;
    ram_symbol2[693] = 'b00000000;
    ram_symbol3[693] = 'b00000000;
    ram_symbol0[694] = 'b00000000;
    ram_symbol1[694] = 'b00000000;
    ram_symbol2[694] = 'b00000000;
    ram_symbol3[694] = 'b00000000;
    ram_symbol0[695] = 'b00000000;
    ram_symbol1[695] = 'b00000000;
    ram_symbol2[695] = 'b00000000;
    ram_symbol3[695] = 'b00000000;
    ram_symbol0[696] = 'b00000000;
    ram_symbol1[696] = 'b00000000;
    ram_symbol2[696] = 'b00000000;
    ram_symbol3[696] = 'b00000000;
    ram_symbol0[697] = 'b00000000;
    ram_symbol1[697] = 'b00000000;
    ram_symbol2[697] = 'b00000000;
    ram_symbol3[697] = 'b00000000;
    ram_symbol0[698] = 'b00000000;
    ram_symbol1[698] = 'b00000000;
    ram_symbol2[698] = 'b00000000;
    ram_symbol3[698] = 'b00000000;
    ram_symbol0[699] = 'b00000000;
    ram_symbol1[699] = 'b00000000;
    ram_symbol2[699] = 'b00000000;
    ram_symbol3[699] = 'b00000000;
    ram_symbol0[700] = 'b00000000;
    ram_symbol1[700] = 'b00000000;
    ram_symbol2[700] = 'b00000000;
    ram_symbol3[700] = 'b00000000;
    ram_symbol0[701] = 'b00000000;
    ram_symbol1[701] = 'b00000000;
    ram_symbol2[701] = 'b00000000;
    ram_symbol3[701] = 'b00000000;
    ram_symbol0[702] = 'b00000000;
    ram_symbol1[702] = 'b00000000;
    ram_symbol2[702] = 'b00000000;
    ram_symbol3[702] = 'b00000000;
    ram_symbol0[703] = 'b00000000;
    ram_symbol1[703] = 'b00000000;
    ram_symbol2[703] = 'b00000000;
    ram_symbol3[703] = 'b00000000;
    ram_symbol0[704] = 'b00000000;
    ram_symbol1[704] = 'b00000000;
    ram_symbol2[704] = 'b00000000;
    ram_symbol3[704] = 'b00000000;
    ram_symbol0[705] = 'b00000000;
    ram_symbol1[705] = 'b00000000;
    ram_symbol2[705] = 'b00000000;
    ram_symbol3[705] = 'b00000000;
    ram_symbol0[706] = 'b00000000;
    ram_symbol1[706] = 'b00000000;
    ram_symbol2[706] = 'b00000000;
    ram_symbol3[706] = 'b00000000;
    ram_symbol0[707] = 'b00000000;
    ram_symbol1[707] = 'b00000000;
    ram_symbol2[707] = 'b00000000;
    ram_symbol3[707] = 'b00000000;
    ram_symbol0[708] = 'b00000000;
    ram_symbol1[708] = 'b00000000;
    ram_symbol2[708] = 'b00000000;
    ram_symbol3[708] = 'b00000000;
    ram_symbol0[709] = 'b00000000;
    ram_symbol1[709] = 'b00000000;
    ram_symbol2[709] = 'b00000000;
    ram_symbol3[709] = 'b00000000;
    ram_symbol0[710] = 'b00000000;
    ram_symbol1[710] = 'b00000000;
    ram_symbol2[710] = 'b00000000;
    ram_symbol3[710] = 'b00000000;
    ram_symbol0[711] = 'b00000000;
    ram_symbol1[711] = 'b00000000;
    ram_symbol2[711] = 'b00000000;
    ram_symbol3[711] = 'b00000000;
    ram_symbol0[712] = 'b00000000;
    ram_symbol1[712] = 'b00000000;
    ram_symbol2[712] = 'b00000000;
    ram_symbol3[712] = 'b00000000;
    ram_symbol0[713] = 'b00000000;
    ram_symbol1[713] = 'b00000000;
    ram_symbol2[713] = 'b00000000;
    ram_symbol3[713] = 'b00000000;
    ram_symbol0[714] = 'b00000000;
    ram_symbol1[714] = 'b00000000;
    ram_symbol2[714] = 'b00000000;
    ram_symbol3[714] = 'b00000000;
    ram_symbol0[715] = 'b00000000;
    ram_symbol1[715] = 'b00000000;
    ram_symbol2[715] = 'b00000000;
    ram_symbol3[715] = 'b00000000;
    ram_symbol0[716] = 'b00000000;
    ram_symbol1[716] = 'b00000000;
    ram_symbol2[716] = 'b00000000;
    ram_symbol3[716] = 'b00000000;
    ram_symbol0[717] = 'b00000000;
    ram_symbol1[717] = 'b00000000;
    ram_symbol2[717] = 'b00000000;
    ram_symbol3[717] = 'b00000000;
    ram_symbol0[718] = 'b00000000;
    ram_symbol1[718] = 'b00000000;
    ram_symbol2[718] = 'b00000000;
    ram_symbol3[718] = 'b00000000;
    ram_symbol0[719] = 'b00000000;
    ram_symbol1[719] = 'b00000000;
    ram_symbol2[719] = 'b00000000;
    ram_symbol3[719] = 'b00000000;
    ram_symbol0[720] = 'b00000000;
    ram_symbol1[720] = 'b00000000;
    ram_symbol2[720] = 'b00000000;
    ram_symbol3[720] = 'b00000000;
    ram_symbol0[721] = 'b00000000;
    ram_symbol1[721] = 'b00000000;
    ram_symbol2[721] = 'b00000000;
    ram_symbol3[721] = 'b00000000;
    ram_symbol0[722] = 'b00000000;
    ram_symbol1[722] = 'b00000000;
    ram_symbol2[722] = 'b00000000;
    ram_symbol3[722] = 'b00000000;
    ram_symbol0[723] = 'b00000000;
    ram_symbol1[723] = 'b00000000;
    ram_symbol2[723] = 'b00000000;
    ram_symbol3[723] = 'b00000000;
    ram_symbol0[724] = 'b00000000;
    ram_symbol1[724] = 'b00000000;
    ram_symbol2[724] = 'b00000000;
    ram_symbol3[724] = 'b00000000;
    ram_symbol0[725] = 'b00000000;
    ram_symbol1[725] = 'b00000000;
    ram_symbol2[725] = 'b00000000;
    ram_symbol3[725] = 'b00000000;
    ram_symbol0[726] = 'b00000000;
    ram_symbol1[726] = 'b00000000;
    ram_symbol2[726] = 'b00000000;
    ram_symbol3[726] = 'b00000000;
    ram_symbol0[727] = 'b00000000;
    ram_symbol1[727] = 'b00000000;
    ram_symbol2[727] = 'b00000000;
    ram_symbol3[727] = 'b00000000;
    ram_symbol0[728] = 'b00000000;
    ram_symbol1[728] = 'b00000000;
    ram_symbol2[728] = 'b00000000;
    ram_symbol3[728] = 'b00000000;
    ram_symbol0[729] = 'b00000000;
    ram_symbol1[729] = 'b00000000;
    ram_symbol2[729] = 'b00000000;
    ram_symbol3[729] = 'b00000000;
    ram_symbol0[730] = 'b00000000;
    ram_symbol1[730] = 'b00000000;
    ram_symbol2[730] = 'b00000000;
    ram_symbol3[730] = 'b00000000;
    ram_symbol0[731] = 'b00000000;
    ram_symbol1[731] = 'b00000000;
    ram_symbol2[731] = 'b00000000;
    ram_symbol3[731] = 'b00000000;
    ram_symbol0[732] = 'b00000000;
    ram_symbol1[732] = 'b00000000;
    ram_symbol2[732] = 'b00000000;
    ram_symbol3[732] = 'b00000000;
    ram_symbol0[733] = 'b00000000;
    ram_symbol1[733] = 'b00000000;
    ram_symbol2[733] = 'b00000000;
    ram_symbol3[733] = 'b00000000;
    ram_symbol0[734] = 'b00000000;
    ram_symbol1[734] = 'b00000000;
    ram_symbol2[734] = 'b00000000;
    ram_symbol3[734] = 'b00000000;
    ram_symbol0[735] = 'b00000000;
    ram_symbol1[735] = 'b00000000;
    ram_symbol2[735] = 'b00000000;
    ram_symbol3[735] = 'b00000000;
    ram_symbol0[736] = 'b00000000;
    ram_symbol1[736] = 'b00000000;
    ram_symbol2[736] = 'b00000000;
    ram_symbol3[736] = 'b00000000;
    ram_symbol0[737] = 'b00000000;
    ram_symbol1[737] = 'b00000000;
    ram_symbol2[737] = 'b00000000;
    ram_symbol3[737] = 'b00000000;
    ram_symbol0[738] = 'b00000000;
    ram_symbol1[738] = 'b00000000;
    ram_symbol2[738] = 'b00000000;
    ram_symbol3[738] = 'b00000000;
    ram_symbol0[739] = 'b00000000;
    ram_symbol1[739] = 'b00000000;
    ram_symbol2[739] = 'b00000000;
    ram_symbol3[739] = 'b00000000;
    ram_symbol0[740] = 'b00000000;
    ram_symbol1[740] = 'b00000000;
    ram_symbol2[740] = 'b00000000;
    ram_symbol3[740] = 'b00000000;
    ram_symbol0[741] = 'b00000000;
    ram_symbol1[741] = 'b00000000;
    ram_symbol2[741] = 'b00000000;
    ram_symbol3[741] = 'b00000000;
    ram_symbol0[742] = 'b00000000;
    ram_symbol1[742] = 'b00000000;
    ram_symbol2[742] = 'b00000000;
    ram_symbol3[742] = 'b00000000;
    ram_symbol0[743] = 'b00000000;
    ram_symbol1[743] = 'b00000000;
    ram_symbol2[743] = 'b00000000;
    ram_symbol3[743] = 'b00000000;
    ram_symbol0[744] = 'b00000000;
    ram_symbol1[744] = 'b00000000;
    ram_symbol2[744] = 'b00000000;
    ram_symbol3[744] = 'b00000000;
    ram_symbol0[745] = 'b00000000;
    ram_symbol1[745] = 'b00000000;
    ram_symbol2[745] = 'b00000000;
    ram_symbol3[745] = 'b00000000;
    ram_symbol0[746] = 'b00000000;
    ram_symbol1[746] = 'b00000000;
    ram_symbol2[746] = 'b00000000;
    ram_symbol3[746] = 'b00000000;
    ram_symbol0[747] = 'b00000000;
    ram_symbol1[747] = 'b00000000;
    ram_symbol2[747] = 'b00000000;
    ram_symbol3[747] = 'b00000000;
    ram_symbol0[748] = 'b00000000;
    ram_symbol1[748] = 'b00000000;
    ram_symbol2[748] = 'b00000000;
    ram_symbol3[748] = 'b00000000;
    ram_symbol0[749] = 'b00000000;
    ram_symbol1[749] = 'b00000000;
    ram_symbol2[749] = 'b00000000;
    ram_symbol3[749] = 'b00000000;
    ram_symbol0[750] = 'b00000000;
    ram_symbol1[750] = 'b00000000;
    ram_symbol2[750] = 'b00000000;
    ram_symbol3[750] = 'b00000000;
    ram_symbol0[751] = 'b00000000;
    ram_symbol1[751] = 'b00000000;
    ram_symbol2[751] = 'b00000000;
    ram_symbol3[751] = 'b00000000;
    ram_symbol0[752] = 'b00000000;
    ram_symbol1[752] = 'b00000000;
    ram_symbol2[752] = 'b00000000;
    ram_symbol3[752] = 'b00000000;
    ram_symbol0[753] = 'b00000000;
    ram_symbol1[753] = 'b00000000;
    ram_symbol2[753] = 'b00000000;
    ram_symbol3[753] = 'b00000000;
    ram_symbol0[754] = 'b00000000;
    ram_symbol1[754] = 'b00000000;
    ram_symbol2[754] = 'b00000000;
    ram_symbol3[754] = 'b00000000;
    ram_symbol0[755] = 'b00000000;
    ram_symbol1[755] = 'b00000000;
    ram_symbol2[755] = 'b00000000;
    ram_symbol3[755] = 'b00000000;
    ram_symbol0[756] = 'b00000000;
    ram_symbol1[756] = 'b00000000;
    ram_symbol2[756] = 'b00000000;
    ram_symbol3[756] = 'b00000000;
    ram_symbol0[757] = 'b00000000;
    ram_symbol1[757] = 'b00000000;
    ram_symbol2[757] = 'b00000000;
    ram_symbol3[757] = 'b00000000;
    ram_symbol0[758] = 'b00000000;
    ram_symbol1[758] = 'b00000000;
    ram_symbol2[758] = 'b00000000;
    ram_symbol3[758] = 'b00000000;
    ram_symbol0[759] = 'b00000000;
    ram_symbol1[759] = 'b00000000;
    ram_symbol2[759] = 'b00000000;
    ram_symbol3[759] = 'b00000000;
    ram_symbol0[760] = 'b00000000;
    ram_symbol1[760] = 'b00000000;
    ram_symbol2[760] = 'b00000000;
    ram_symbol3[760] = 'b00000000;
    ram_symbol0[761] = 'b00000000;
    ram_symbol1[761] = 'b00000000;
    ram_symbol2[761] = 'b00000000;
    ram_symbol3[761] = 'b00000000;
    ram_symbol0[762] = 'b00000000;
    ram_symbol1[762] = 'b00000000;
    ram_symbol2[762] = 'b00000000;
    ram_symbol3[762] = 'b00000000;
    ram_symbol0[763] = 'b00000000;
    ram_symbol1[763] = 'b00000000;
    ram_symbol2[763] = 'b00000000;
    ram_symbol3[763] = 'b00000000;
    ram_symbol0[764] = 'b00000000;
    ram_symbol1[764] = 'b00000000;
    ram_symbol2[764] = 'b00000000;
    ram_symbol3[764] = 'b00000000;
    ram_symbol0[765] = 'b00000000;
    ram_symbol1[765] = 'b00000000;
    ram_symbol2[765] = 'b00000000;
    ram_symbol3[765] = 'b00000000;
    ram_symbol0[766] = 'b00000000;
    ram_symbol1[766] = 'b00000000;
    ram_symbol2[766] = 'b00000000;
    ram_symbol3[766] = 'b00000000;
    ram_symbol0[767] = 'b00000000;
    ram_symbol1[767] = 'b00000000;
    ram_symbol2[767] = 'b00000000;
    ram_symbol3[767] = 'b00000000;
    ram_symbol0[768] = 'b00000000;
    ram_symbol1[768] = 'b00000000;
    ram_symbol2[768] = 'b00000000;
    ram_symbol3[768] = 'b00000000;
    ram_symbol0[769] = 'b00000000;
    ram_symbol1[769] = 'b00000000;
    ram_symbol2[769] = 'b00000000;
    ram_symbol3[769] = 'b00000000;
    ram_symbol0[770] = 'b00000000;
    ram_symbol1[770] = 'b00000000;
    ram_symbol2[770] = 'b00000000;
    ram_symbol3[770] = 'b00000000;
    ram_symbol0[771] = 'b00000000;
    ram_symbol1[771] = 'b00000000;
    ram_symbol2[771] = 'b00000000;
    ram_symbol3[771] = 'b00000000;
    ram_symbol0[772] = 'b00000000;
    ram_symbol1[772] = 'b00000000;
    ram_symbol2[772] = 'b00000000;
    ram_symbol3[772] = 'b00000000;
    ram_symbol0[773] = 'b00000000;
    ram_symbol1[773] = 'b00000000;
    ram_symbol2[773] = 'b00000000;
    ram_symbol3[773] = 'b00000000;
    ram_symbol0[774] = 'b00000000;
    ram_symbol1[774] = 'b00000000;
    ram_symbol2[774] = 'b00000000;
    ram_symbol3[774] = 'b00000000;
    ram_symbol0[775] = 'b00000000;
    ram_symbol1[775] = 'b00000000;
    ram_symbol2[775] = 'b00000000;
    ram_symbol3[775] = 'b00000000;
    ram_symbol0[776] = 'b00000000;
    ram_symbol1[776] = 'b00000000;
    ram_symbol2[776] = 'b00000000;
    ram_symbol3[776] = 'b00000000;
    ram_symbol0[777] = 'b00000000;
    ram_symbol1[777] = 'b00000000;
    ram_symbol2[777] = 'b00000000;
    ram_symbol3[777] = 'b00000000;
    ram_symbol0[778] = 'b00000000;
    ram_symbol1[778] = 'b00000000;
    ram_symbol2[778] = 'b00000000;
    ram_symbol3[778] = 'b00000000;
    ram_symbol0[779] = 'b00000000;
    ram_symbol1[779] = 'b00000000;
    ram_symbol2[779] = 'b00000000;
    ram_symbol3[779] = 'b00000000;
    ram_symbol0[780] = 'b00000000;
    ram_symbol1[780] = 'b00000000;
    ram_symbol2[780] = 'b00000000;
    ram_symbol3[780] = 'b00000000;
    ram_symbol0[781] = 'b00000000;
    ram_symbol1[781] = 'b00000000;
    ram_symbol2[781] = 'b00000000;
    ram_symbol3[781] = 'b00000000;
    ram_symbol0[782] = 'b00000000;
    ram_symbol1[782] = 'b00000000;
    ram_symbol2[782] = 'b00000000;
    ram_symbol3[782] = 'b00000000;
    ram_symbol0[783] = 'b00000000;
    ram_symbol1[783] = 'b00000000;
    ram_symbol2[783] = 'b00000000;
    ram_symbol3[783] = 'b00000000;
    ram_symbol0[784] = 'b00000000;
    ram_symbol1[784] = 'b00000000;
    ram_symbol2[784] = 'b00000000;
    ram_symbol3[784] = 'b00000000;
    ram_symbol0[785] = 'b00000000;
    ram_symbol1[785] = 'b00000000;
    ram_symbol2[785] = 'b00000000;
    ram_symbol3[785] = 'b00000000;
    ram_symbol0[786] = 'b00000000;
    ram_symbol1[786] = 'b00000000;
    ram_symbol2[786] = 'b00000000;
    ram_symbol3[786] = 'b00000000;
    ram_symbol0[787] = 'b00000000;
    ram_symbol1[787] = 'b00000000;
    ram_symbol2[787] = 'b00000000;
    ram_symbol3[787] = 'b00000000;
    ram_symbol0[788] = 'b00000000;
    ram_symbol1[788] = 'b00000000;
    ram_symbol2[788] = 'b00000000;
    ram_symbol3[788] = 'b00000000;
    ram_symbol0[789] = 'b00000000;
    ram_symbol1[789] = 'b00000000;
    ram_symbol2[789] = 'b00000000;
    ram_symbol3[789] = 'b00000000;
    ram_symbol0[790] = 'b00000000;
    ram_symbol1[790] = 'b00000000;
    ram_symbol2[790] = 'b00000000;
    ram_symbol3[790] = 'b00000000;
    ram_symbol0[791] = 'b00000000;
    ram_symbol1[791] = 'b00000000;
    ram_symbol2[791] = 'b00000000;
    ram_symbol3[791] = 'b00000000;
    ram_symbol0[792] = 'b00000000;
    ram_symbol1[792] = 'b00000000;
    ram_symbol2[792] = 'b00000000;
    ram_symbol3[792] = 'b00000000;
    ram_symbol0[793] = 'b00000000;
    ram_symbol1[793] = 'b00000000;
    ram_symbol2[793] = 'b00000000;
    ram_symbol3[793] = 'b00000000;
    ram_symbol0[794] = 'b00000000;
    ram_symbol1[794] = 'b00000000;
    ram_symbol2[794] = 'b00000000;
    ram_symbol3[794] = 'b00000000;
    ram_symbol0[795] = 'b00000000;
    ram_symbol1[795] = 'b00000000;
    ram_symbol2[795] = 'b00000000;
    ram_symbol3[795] = 'b00000000;
    ram_symbol0[796] = 'b00000000;
    ram_symbol1[796] = 'b00000000;
    ram_symbol2[796] = 'b00000000;
    ram_symbol3[796] = 'b00000000;
    ram_symbol0[797] = 'b00000000;
    ram_symbol1[797] = 'b00000000;
    ram_symbol2[797] = 'b00000000;
    ram_symbol3[797] = 'b00000000;
    ram_symbol0[798] = 'b00000000;
    ram_symbol1[798] = 'b00000000;
    ram_symbol2[798] = 'b00000000;
    ram_symbol3[798] = 'b00000000;
    ram_symbol0[799] = 'b00000000;
    ram_symbol1[799] = 'b00000000;
    ram_symbol2[799] = 'b00000000;
    ram_symbol3[799] = 'b00000000;
    ram_symbol0[800] = 'b00000000;
    ram_symbol1[800] = 'b00000000;
    ram_symbol2[800] = 'b00000000;
    ram_symbol3[800] = 'b00000000;
    ram_symbol0[801] = 'b00000000;
    ram_symbol1[801] = 'b00000000;
    ram_symbol2[801] = 'b00000000;
    ram_symbol3[801] = 'b00000000;
    ram_symbol0[802] = 'b00000000;
    ram_symbol1[802] = 'b00000000;
    ram_symbol2[802] = 'b00000000;
    ram_symbol3[802] = 'b00000000;
    ram_symbol0[803] = 'b00000000;
    ram_symbol1[803] = 'b00000000;
    ram_symbol2[803] = 'b00000000;
    ram_symbol3[803] = 'b00000000;
    ram_symbol0[804] = 'b00000000;
    ram_symbol1[804] = 'b00000000;
    ram_symbol2[804] = 'b00000000;
    ram_symbol3[804] = 'b00000000;
    ram_symbol0[805] = 'b00000000;
    ram_symbol1[805] = 'b00000000;
    ram_symbol2[805] = 'b00000000;
    ram_symbol3[805] = 'b00000000;
    ram_symbol0[806] = 'b00000000;
    ram_symbol1[806] = 'b00000000;
    ram_symbol2[806] = 'b00000000;
    ram_symbol3[806] = 'b00000000;
    ram_symbol0[807] = 'b00000000;
    ram_symbol1[807] = 'b00000000;
    ram_symbol2[807] = 'b00000000;
    ram_symbol3[807] = 'b00000000;
    ram_symbol0[808] = 'b00000000;
    ram_symbol1[808] = 'b00000000;
    ram_symbol2[808] = 'b00000000;
    ram_symbol3[808] = 'b00000000;
    ram_symbol0[809] = 'b00000000;
    ram_symbol1[809] = 'b00000000;
    ram_symbol2[809] = 'b00000000;
    ram_symbol3[809] = 'b00000000;
    ram_symbol0[810] = 'b00000000;
    ram_symbol1[810] = 'b00000000;
    ram_symbol2[810] = 'b00000000;
    ram_symbol3[810] = 'b00000000;
    ram_symbol0[811] = 'b00000000;
    ram_symbol1[811] = 'b00000000;
    ram_symbol2[811] = 'b00000000;
    ram_symbol3[811] = 'b00000000;
    ram_symbol0[812] = 'b00000000;
    ram_symbol1[812] = 'b00000000;
    ram_symbol2[812] = 'b00000000;
    ram_symbol3[812] = 'b00000000;
    ram_symbol0[813] = 'b00000000;
    ram_symbol1[813] = 'b00000000;
    ram_symbol2[813] = 'b00000000;
    ram_symbol3[813] = 'b00000000;
    ram_symbol0[814] = 'b00000000;
    ram_symbol1[814] = 'b00000000;
    ram_symbol2[814] = 'b00000000;
    ram_symbol3[814] = 'b00000000;
    ram_symbol0[815] = 'b00000000;
    ram_symbol1[815] = 'b00000000;
    ram_symbol2[815] = 'b00000000;
    ram_symbol3[815] = 'b00000000;
    ram_symbol0[816] = 'b00000000;
    ram_symbol1[816] = 'b00000000;
    ram_symbol2[816] = 'b00000000;
    ram_symbol3[816] = 'b00000000;
    ram_symbol0[817] = 'b00000000;
    ram_symbol1[817] = 'b00000000;
    ram_symbol2[817] = 'b00000000;
    ram_symbol3[817] = 'b00000000;
    ram_symbol0[818] = 'b00000000;
    ram_symbol1[818] = 'b00000000;
    ram_symbol2[818] = 'b00000000;
    ram_symbol3[818] = 'b00000000;
    ram_symbol0[819] = 'b00000000;
    ram_symbol1[819] = 'b00000000;
    ram_symbol2[819] = 'b00000000;
    ram_symbol3[819] = 'b00000000;
    ram_symbol0[820] = 'b00000000;
    ram_symbol1[820] = 'b00000000;
    ram_symbol2[820] = 'b00000000;
    ram_symbol3[820] = 'b00000000;
    ram_symbol0[821] = 'b00000000;
    ram_symbol1[821] = 'b00000000;
    ram_symbol2[821] = 'b00000000;
    ram_symbol3[821] = 'b00000000;
    ram_symbol0[822] = 'b00000000;
    ram_symbol1[822] = 'b00000000;
    ram_symbol2[822] = 'b00000000;
    ram_symbol3[822] = 'b00000000;
    ram_symbol0[823] = 'b00000000;
    ram_symbol1[823] = 'b00000000;
    ram_symbol2[823] = 'b00000000;
    ram_symbol3[823] = 'b00000000;
    ram_symbol0[824] = 'b00000000;
    ram_symbol1[824] = 'b00000000;
    ram_symbol2[824] = 'b00000000;
    ram_symbol3[824] = 'b00000000;
    ram_symbol0[825] = 'b00000000;
    ram_symbol1[825] = 'b00000000;
    ram_symbol2[825] = 'b00000000;
    ram_symbol3[825] = 'b00000000;
    ram_symbol0[826] = 'b00000000;
    ram_symbol1[826] = 'b00000000;
    ram_symbol2[826] = 'b00000000;
    ram_symbol3[826] = 'b00000000;
    ram_symbol0[827] = 'b00000000;
    ram_symbol1[827] = 'b00000000;
    ram_symbol2[827] = 'b00000000;
    ram_symbol3[827] = 'b00000000;
    ram_symbol0[828] = 'b00000000;
    ram_symbol1[828] = 'b00000000;
    ram_symbol2[828] = 'b00000000;
    ram_symbol3[828] = 'b00000000;
    ram_symbol0[829] = 'b00000000;
    ram_symbol1[829] = 'b00000000;
    ram_symbol2[829] = 'b00000000;
    ram_symbol3[829] = 'b00000000;
    ram_symbol0[830] = 'b00000000;
    ram_symbol1[830] = 'b00000000;
    ram_symbol2[830] = 'b00000000;
    ram_symbol3[830] = 'b00000000;
    ram_symbol0[831] = 'b00000000;
    ram_symbol1[831] = 'b00000000;
    ram_symbol2[831] = 'b00000000;
    ram_symbol3[831] = 'b00000000;
    ram_symbol0[832] = 'b00000000;
    ram_symbol1[832] = 'b00000000;
    ram_symbol2[832] = 'b00000000;
    ram_symbol3[832] = 'b00000000;
    ram_symbol0[833] = 'b00000000;
    ram_symbol1[833] = 'b00000000;
    ram_symbol2[833] = 'b00000000;
    ram_symbol3[833] = 'b00000000;
    ram_symbol0[834] = 'b00000000;
    ram_symbol1[834] = 'b00000000;
    ram_symbol2[834] = 'b00000000;
    ram_symbol3[834] = 'b00000000;
    ram_symbol0[835] = 'b00000000;
    ram_symbol1[835] = 'b00000000;
    ram_symbol2[835] = 'b00000000;
    ram_symbol3[835] = 'b00000000;
    ram_symbol0[836] = 'b00000000;
    ram_symbol1[836] = 'b00000000;
    ram_symbol2[836] = 'b00000000;
    ram_symbol3[836] = 'b00000000;
    ram_symbol0[837] = 'b00000000;
    ram_symbol1[837] = 'b00000000;
    ram_symbol2[837] = 'b00000000;
    ram_symbol3[837] = 'b00000000;
    ram_symbol0[838] = 'b00000000;
    ram_symbol1[838] = 'b00000000;
    ram_symbol2[838] = 'b00000000;
    ram_symbol3[838] = 'b00000000;
    ram_symbol0[839] = 'b00000000;
    ram_symbol1[839] = 'b00000000;
    ram_symbol2[839] = 'b00000000;
    ram_symbol3[839] = 'b00000000;
    ram_symbol0[840] = 'b00000000;
    ram_symbol1[840] = 'b00000000;
    ram_symbol2[840] = 'b00000000;
    ram_symbol3[840] = 'b00000000;
    ram_symbol0[841] = 'b00000000;
    ram_symbol1[841] = 'b00000000;
    ram_symbol2[841] = 'b00000000;
    ram_symbol3[841] = 'b00000000;
    ram_symbol0[842] = 'b00000000;
    ram_symbol1[842] = 'b00000000;
    ram_symbol2[842] = 'b00000000;
    ram_symbol3[842] = 'b00000000;
    ram_symbol0[843] = 'b00000000;
    ram_symbol1[843] = 'b00000000;
    ram_symbol2[843] = 'b00000000;
    ram_symbol3[843] = 'b00000000;
    ram_symbol0[844] = 'b00000000;
    ram_symbol1[844] = 'b00000000;
    ram_symbol2[844] = 'b00000000;
    ram_symbol3[844] = 'b00000000;
    ram_symbol0[845] = 'b00000000;
    ram_symbol1[845] = 'b00000000;
    ram_symbol2[845] = 'b00000000;
    ram_symbol3[845] = 'b00000000;
    ram_symbol0[846] = 'b00000000;
    ram_symbol1[846] = 'b00000000;
    ram_symbol2[846] = 'b00000000;
    ram_symbol3[846] = 'b00000000;
    ram_symbol0[847] = 'b00000000;
    ram_symbol1[847] = 'b00000000;
    ram_symbol2[847] = 'b00000000;
    ram_symbol3[847] = 'b00000000;
    ram_symbol0[848] = 'b00000000;
    ram_symbol1[848] = 'b00000000;
    ram_symbol2[848] = 'b00000000;
    ram_symbol3[848] = 'b00000000;
    ram_symbol0[849] = 'b00000000;
    ram_symbol1[849] = 'b00000000;
    ram_symbol2[849] = 'b00000000;
    ram_symbol3[849] = 'b00000000;
    ram_symbol0[850] = 'b00000000;
    ram_symbol1[850] = 'b00000000;
    ram_symbol2[850] = 'b00000000;
    ram_symbol3[850] = 'b00000000;
    ram_symbol0[851] = 'b00000000;
    ram_symbol1[851] = 'b00000000;
    ram_symbol2[851] = 'b00000000;
    ram_symbol3[851] = 'b00000000;
    ram_symbol0[852] = 'b00000000;
    ram_symbol1[852] = 'b00000000;
    ram_symbol2[852] = 'b00000000;
    ram_symbol3[852] = 'b00000000;
    ram_symbol0[853] = 'b00000000;
    ram_symbol1[853] = 'b00000000;
    ram_symbol2[853] = 'b00000000;
    ram_symbol3[853] = 'b00000000;
    ram_symbol0[854] = 'b00000000;
    ram_symbol1[854] = 'b00000000;
    ram_symbol2[854] = 'b00000000;
    ram_symbol3[854] = 'b00000000;
    ram_symbol0[855] = 'b00000000;
    ram_symbol1[855] = 'b00000000;
    ram_symbol2[855] = 'b00000000;
    ram_symbol3[855] = 'b00000000;
    ram_symbol0[856] = 'b00000000;
    ram_symbol1[856] = 'b00000000;
    ram_symbol2[856] = 'b00000000;
    ram_symbol3[856] = 'b00000000;
    ram_symbol0[857] = 'b00000000;
    ram_symbol1[857] = 'b00000000;
    ram_symbol2[857] = 'b00000000;
    ram_symbol3[857] = 'b00000000;
    ram_symbol0[858] = 'b00000000;
    ram_symbol1[858] = 'b00000000;
    ram_symbol2[858] = 'b00000000;
    ram_symbol3[858] = 'b00000000;
    ram_symbol0[859] = 'b00000000;
    ram_symbol1[859] = 'b00000000;
    ram_symbol2[859] = 'b00000000;
    ram_symbol3[859] = 'b00000000;
    ram_symbol0[860] = 'b00000000;
    ram_symbol1[860] = 'b00000000;
    ram_symbol2[860] = 'b00000000;
    ram_symbol3[860] = 'b00000000;
    ram_symbol0[861] = 'b00000000;
    ram_symbol1[861] = 'b00000000;
    ram_symbol2[861] = 'b00000000;
    ram_symbol3[861] = 'b00000000;
    ram_symbol0[862] = 'b00000000;
    ram_symbol1[862] = 'b00000000;
    ram_symbol2[862] = 'b00000000;
    ram_symbol3[862] = 'b00000000;
    ram_symbol0[863] = 'b00000000;
    ram_symbol1[863] = 'b00000000;
    ram_symbol2[863] = 'b00000000;
    ram_symbol3[863] = 'b00000000;
    ram_symbol0[864] = 'b00000000;
    ram_symbol1[864] = 'b00000000;
    ram_symbol2[864] = 'b00000000;
    ram_symbol3[864] = 'b00000000;
    ram_symbol0[865] = 'b00000000;
    ram_symbol1[865] = 'b00000000;
    ram_symbol2[865] = 'b00000000;
    ram_symbol3[865] = 'b00000000;
    ram_symbol0[866] = 'b00000000;
    ram_symbol1[866] = 'b00000000;
    ram_symbol2[866] = 'b00000000;
    ram_symbol3[866] = 'b00000000;
    ram_symbol0[867] = 'b00000000;
    ram_symbol1[867] = 'b00000000;
    ram_symbol2[867] = 'b00000000;
    ram_symbol3[867] = 'b00000000;
    ram_symbol0[868] = 'b00000000;
    ram_symbol1[868] = 'b00000000;
    ram_symbol2[868] = 'b00000000;
    ram_symbol3[868] = 'b00000000;
    ram_symbol0[869] = 'b00000000;
    ram_symbol1[869] = 'b00000000;
    ram_symbol2[869] = 'b00000000;
    ram_symbol3[869] = 'b00000000;
    ram_symbol0[870] = 'b00000000;
    ram_symbol1[870] = 'b00000000;
    ram_symbol2[870] = 'b00000000;
    ram_symbol3[870] = 'b00000000;
    ram_symbol0[871] = 'b00000000;
    ram_symbol1[871] = 'b00000000;
    ram_symbol2[871] = 'b00000000;
    ram_symbol3[871] = 'b00000000;
    ram_symbol0[872] = 'b00000000;
    ram_symbol1[872] = 'b00000000;
    ram_symbol2[872] = 'b00000000;
    ram_symbol3[872] = 'b00000000;
    ram_symbol0[873] = 'b00000000;
    ram_symbol1[873] = 'b00000000;
    ram_symbol2[873] = 'b00000000;
    ram_symbol3[873] = 'b00000000;
    ram_symbol0[874] = 'b00000000;
    ram_symbol1[874] = 'b00000000;
    ram_symbol2[874] = 'b00000000;
    ram_symbol3[874] = 'b00000000;
    ram_symbol0[875] = 'b00000000;
    ram_symbol1[875] = 'b00000000;
    ram_symbol2[875] = 'b00000000;
    ram_symbol3[875] = 'b00000000;
    ram_symbol0[876] = 'b00000000;
    ram_symbol1[876] = 'b00000000;
    ram_symbol2[876] = 'b00000000;
    ram_symbol3[876] = 'b00000000;
    ram_symbol0[877] = 'b00000000;
    ram_symbol1[877] = 'b00000000;
    ram_symbol2[877] = 'b00000000;
    ram_symbol3[877] = 'b00000000;
    ram_symbol0[878] = 'b00000000;
    ram_symbol1[878] = 'b00000000;
    ram_symbol2[878] = 'b00000000;
    ram_symbol3[878] = 'b00000000;
    ram_symbol0[879] = 'b00000000;
    ram_symbol1[879] = 'b00000000;
    ram_symbol2[879] = 'b00000000;
    ram_symbol3[879] = 'b00000000;
    ram_symbol0[880] = 'b00000000;
    ram_symbol1[880] = 'b00000000;
    ram_symbol2[880] = 'b00000000;
    ram_symbol3[880] = 'b00000000;
    ram_symbol0[881] = 'b00000000;
    ram_symbol1[881] = 'b00000000;
    ram_symbol2[881] = 'b00000000;
    ram_symbol3[881] = 'b00000000;
    ram_symbol0[882] = 'b00000000;
    ram_symbol1[882] = 'b00000000;
    ram_symbol2[882] = 'b00000000;
    ram_symbol3[882] = 'b00000000;
    ram_symbol0[883] = 'b00000000;
    ram_symbol1[883] = 'b00000000;
    ram_symbol2[883] = 'b00000000;
    ram_symbol3[883] = 'b00000000;
    ram_symbol0[884] = 'b00000000;
    ram_symbol1[884] = 'b00000000;
    ram_symbol2[884] = 'b00000000;
    ram_symbol3[884] = 'b00000000;
    ram_symbol0[885] = 'b00000000;
    ram_symbol1[885] = 'b00000000;
    ram_symbol2[885] = 'b00000000;
    ram_symbol3[885] = 'b00000000;
    ram_symbol0[886] = 'b00000000;
    ram_symbol1[886] = 'b00000000;
    ram_symbol2[886] = 'b00000000;
    ram_symbol3[886] = 'b00000000;
    ram_symbol0[887] = 'b00000000;
    ram_symbol1[887] = 'b00000000;
    ram_symbol2[887] = 'b00000000;
    ram_symbol3[887] = 'b00000000;
    ram_symbol0[888] = 'b00000000;
    ram_symbol1[888] = 'b00000000;
    ram_symbol2[888] = 'b00000000;
    ram_symbol3[888] = 'b00000000;
    ram_symbol0[889] = 'b00000000;
    ram_symbol1[889] = 'b00000000;
    ram_symbol2[889] = 'b00000000;
    ram_symbol3[889] = 'b00000000;
    ram_symbol0[890] = 'b00000000;
    ram_symbol1[890] = 'b00000000;
    ram_symbol2[890] = 'b00000000;
    ram_symbol3[890] = 'b00000000;
    ram_symbol0[891] = 'b00000000;
    ram_symbol1[891] = 'b00000000;
    ram_symbol2[891] = 'b00000000;
    ram_symbol3[891] = 'b00000000;
    ram_symbol0[892] = 'b00000000;
    ram_symbol1[892] = 'b00000000;
    ram_symbol2[892] = 'b00000000;
    ram_symbol3[892] = 'b00000000;
    ram_symbol0[893] = 'b00000000;
    ram_symbol1[893] = 'b00000000;
    ram_symbol2[893] = 'b00000000;
    ram_symbol3[893] = 'b00000000;
    ram_symbol0[894] = 'b00000000;
    ram_symbol1[894] = 'b00000000;
    ram_symbol2[894] = 'b00000000;
    ram_symbol3[894] = 'b00000000;
    ram_symbol0[895] = 'b00000000;
    ram_symbol1[895] = 'b00000000;
    ram_symbol2[895] = 'b00000000;
    ram_symbol3[895] = 'b00000000;
    ram_symbol0[896] = 'b00000000;
    ram_symbol1[896] = 'b00000000;
    ram_symbol2[896] = 'b00000000;
    ram_symbol3[896] = 'b00000000;
    ram_symbol0[897] = 'b00000000;
    ram_symbol1[897] = 'b00000000;
    ram_symbol2[897] = 'b00000000;
    ram_symbol3[897] = 'b00000000;
    ram_symbol0[898] = 'b00000000;
    ram_symbol1[898] = 'b00000000;
    ram_symbol2[898] = 'b00000000;
    ram_symbol3[898] = 'b00000000;
    ram_symbol0[899] = 'b00000000;
    ram_symbol1[899] = 'b00000000;
    ram_symbol2[899] = 'b00000000;
    ram_symbol3[899] = 'b00000000;
    ram_symbol0[900] = 'b00000000;
    ram_symbol1[900] = 'b00000000;
    ram_symbol2[900] = 'b00000000;
    ram_symbol3[900] = 'b00000000;
    ram_symbol0[901] = 'b00000000;
    ram_symbol1[901] = 'b00000000;
    ram_symbol2[901] = 'b00000000;
    ram_symbol3[901] = 'b00000000;
    ram_symbol0[902] = 'b00000000;
    ram_symbol1[902] = 'b00000000;
    ram_symbol2[902] = 'b00000000;
    ram_symbol3[902] = 'b00000000;
    ram_symbol0[903] = 'b00000000;
    ram_symbol1[903] = 'b00000000;
    ram_symbol2[903] = 'b00000000;
    ram_symbol3[903] = 'b00000000;
    ram_symbol0[904] = 'b00000000;
    ram_symbol1[904] = 'b00000000;
    ram_symbol2[904] = 'b00000000;
    ram_symbol3[904] = 'b00000000;
    ram_symbol0[905] = 'b00000000;
    ram_symbol1[905] = 'b00000000;
    ram_symbol2[905] = 'b00000000;
    ram_symbol3[905] = 'b00000000;
    ram_symbol0[906] = 'b00000000;
    ram_symbol1[906] = 'b00000000;
    ram_symbol2[906] = 'b00000000;
    ram_symbol3[906] = 'b00000000;
    ram_symbol0[907] = 'b00000000;
    ram_symbol1[907] = 'b00000000;
    ram_symbol2[907] = 'b00000000;
    ram_symbol3[907] = 'b00000000;
    ram_symbol0[908] = 'b00000000;
    ram_symbol1[908] = 'b00000000;
    ram_symbol2[908] = 'b00000000;
    ram_symbol3[908] = 'b00000000;
    ram_symbol0[909] = 'b00000000;
    ram_symbol1[909] = 'b00000000;
    ram_symbol2[909] = 'b00000000;
    ram_symbol3[909] = 'b00000000;
    ram_symbol0[910] = 'b00000000;
    ram_symbol1[910] = 'b00000000;
    ram_symbol2[910] = 'b00000000;
    ram_symbol3[910] = 'b00000000;
    ram_symbol0[911] = 'b00000000;
    ram_symbol1[911] = 'b00000000;
    ram_symbol2[911] = 'b00000000;
    ram_symbol3[911] = 'b00000000;
    ram_symbol0[912] = 'b00000000;
    ram_symbol1[912] = 'b00000000;
    ram_symbol2[912] = 'b00000000;
    ram_symbol3[912] = 'b00000000;
    ram_symbol0[913] = 'b00000000;
    ram_symbol1[913] = 'b00000000;
    ram_symbol2[913] = 'b00000000;
    ram_symbol3[913] = 'b00000000;
    ram_symbol0[914] = 'b00000000;
    ram_symbol1[914] = 'b00000000;
    ram_symbol2[914] = 'b00000000;
    ram_symbol3[914] = 'b00000000;
    ram_symbol0[915] = 'b00000000;
    ram_symbol1[915] = 'b00000000;
    ram_symbol2[915] = 'b00000000;
    ram_symbol3[915] = 'b00000000;
    ram_symbol0[916] = 'b00000000;
    ram_symbol1[916] = 'b00000000;
    ram_symbol2[916] = 'b00000000;
    ram_symbol3[916] = 'b00000000;
    ram_symbol0[917] = 'b00000000;
    ram_symbol1[917] = 'b00000000;
    ram_symbol2[917] = 'b00000000;
    ram_symbol3[917] = 'b00000000;
    ram_symbol0[918] = 'b00000000;
    ram_symbol1[918] = 'b00000000;
    ram_symbol2[918] = 'b00000000;
    ram_symbol3[918] = 'b00000000;
    ram_symbol0[919] = 'b00000000;
    ram_symbol1[919] = 'b00000000;
    ram_symbol2[919] = 'b00000000;
    ram_symbol3[919] = 'b00000000;
    ram_symbol0[920] = 'b00000000;
    ram_symbol1[920] = 'b00000000;
    ram_symbol2[920] = 'b00000000;
    ram_symbol3[920] = 'b00000000;
    ram_symbol0[921] = 'b00000000;
    ram_symbol1[921] = 'b00000000;
    ram_symbol2[921] = 'b00000000;
    ram_symbol3[921] = 'b00000000;
    ram_symbol0[922] = 'b00000000;
    ram_symbol1[922] = 'b00000000;
    ram_symbol2[922] = 'b00000000;
    ram_symbol3[922] = 'b00000000;
    ram_symbol0[923] = 'b00000000;
    ram_symbol1[923] = 'b00000000;
    ram_symbol2[923] = 'b00000000;
    ram_symbol3[923] = 'b00000000;
    ram_symbol0[924] = 'b00000000;
    ram_symbol1[924] = 'b00000000;
    ram_symbol2[924] = 'b00000000;
    ram_symbol3[924] = 'b00000000;
    ram_symbol0[925] = 'b00000000;
    ram_symbol1[925] = 'b00000000;
    ram_symbol2[925] = 'b00000000;
    ram_symbol3[925] = 'b00000000;
    ram_symbol0[926] = 'b00000000;
    ram_symbol1[926] = 'b00000000;
    ram_symbol2[926] = 'b00000000;
    ram_symbol3[926] = 'b00000000;
    ram_symbol0[927] = 'b00000000;
    ram_symbol1[927] = 'b00000000;
    ram_symbol2[927] = 'b00000000;
    ram_symbol3[927] = 'b00000000;
    ram_symbol0[928] = 'b00000000;
    ram_symbol1[928] = 'b00000000;
    ram_symbol2[928] = 'b00000000;
    ram_symbol3[928] = 'b00000000;
    ram_symbol0[929] = 'b00000000;
    ram_symbol1[929] = 'b00000000;
    ram_symbol2[929] = 'b00000000;
    ram_symbol3[929] = 'b00000000;
    ram_symbol0[930] = 'b00000000;
    ram_symbol1[930] = 'b00000000;
    ram_symbol2[930] = 'b00000000;
    ram_symbol3[930] = 'b00000000;
    ram_symbol0[931] = 'b00000000;
    ram_symbol1[931] = 'b00000000;
    ram_symbol2[931] = 'b00000000;
    ram_symbol3[931] = 'b00000000;
    ram_symbol0[932] = 'b00000000;
    ram_symbol1[932] = 'b00000000;
    ram_symbol2[932] = 'b00000000;
    ram_symbol3[932] = 'b00000000;
    ram_symbol0[933] = 'b00000000;
    ram_symbol1[933] = 'b00000000;
    ram_symbol2[933] = 'b00000000;
    ram_symbol3[933] = 'b00000000;
    ram_symbol0[934] = 'b00000000;
    ram_symbol1[934] = 'b00000000;
    ram_symbol2[934] = 'b00000000;
    ram_symbol3[934] = 'b00000000;
    ram_symbol0[935] = 'b00000000;
    ram_symbol1[935] = 'b00000000;
    ram_symbol2[935] = 'b00000000;
    ram_symbol3[935] = 'b00000000;
    ram_symbol0[936] = 'b00000000;
    ram_symbol1[936] = 'b00000000;
    ram_symbol2[936] = 'b00000000;
    ram_symbol3[936] = 'b00000000;
    ram_symbol0[937] = 'b00000000;
    ram_symbol1[937] = 'b00000000;
    ram_symbol2[937] = 'b00000000;
    ram_symbol3[937] = 'b00000000;
    ram_symbol0[938] = 'b00000000;
    ram_symbol1[938] = 'b00000000;
    ram_symbol2[938] = 'b00000000;
    ram_symbol3[938] = 'b00000000;
    ram_symbol0[939] = 'b00000000;
    ram_symbol1[939] = 'b00000000;
    ram_symbol2[939] = 'b00000000;
    ram_symbol3[939] = 'b00000000;
    ram_symbol0[940] = 'b00000000;
    ram_symbol1[940] = 'b00000000;
    ram_symbol2[940] = 'b00000000;
    ram_symbol3[940] = 'b00000000;
    ram_symbol0[941] = 'b00000000;
    ram_symbol1[941] = 'b00000000;
    ram_symbol2[941] = 'b00000000;
    ram_symbol3[941] = 'b00000000;
    ram_symbol0[942] = 'b00000000;
    ram_symbol1[942] = 'b00000000;
    ram_symbol2[942] = 'b00000000;
    ram_symbol3[942] = 'b00000000;
    ram_symbol0[943] = 'b00000000;
    ram_symbol1[943] = 'b00000000;
    ram_symbol2[943] = 'b00000000;
    ram_symbol3[943] = 'b00000000;
    ram_symbol0[944] = 'b00000000;
    ram_symbol1[944] = 'b00000000;
    ram_symbol2[944] = 'b00000000;
    ram_symbol3[944] = 'b00000000;
    ram_symbol0[945] = 'b00000000;
    ram_symbol1[945] = 'b00000000;
    ram_symbol2[945] = 'b00000000;
    ram_symbol3[945] = 'b00000000;
    ram_symbol0[946] = 'b00000000;
    ram_symbol1[946] = 'b00000000;
    ram_symbol2[946] = 'b00000000;
    ram_symbol3[946] = 'b00000000;
    ram_symbol0[947] = 'b00000000;
    ram_symbol1[947] = 'b00000000;
    ram_symbol2[947] = 'b00000000;
    ram_symbol3[947] = 'b00000000;
    ram_symbol0[948] = 'b00000000;
    ram_symbol1[948] = 'b00000000;
    ram_symbol2[948] = 'b00000000;
    ram_symbol3[948] = 'b00000000;
    ram_symbol0[949] = 'b00000000;
    ram_symbol1[949] = 'b00000000;
    ram_symbol2[949] = 'b00000000;
    ram_symbol3[949] = 'b00000000;
    ram_symbol0[950] = 'b00000000;
    ram_symbol1[950] = 'b00000000;
    ram_symbol2[950] = 'b00000000;
    ram_symbol3[950] = 'b00000000;
    ram_symbol0[951] = 'b00000000;
    ram_symbol1[951] = 'b00000000;
    ram_symbol2[951] = 'b00000000;
    ram_symbol3[951] = 'b00000000;
    ram_symbol0[952] = 'b00000000;
    ram_symbol1[952] = 'b00000000;
    ram_symbol2[952] = 'b00000000;
    ram_symbol3[952] = 'b00000000;
    ram_symbol0[953] = 'b00000000;
    ram_symbol1[953] = 'b00000000;
    ram_symbol2[953] = 'b00000000;
    ram_symbol3[953] = 'b00000000;
    ram_symbol0[954] = 'b00000000;
    ram_symbol1[954] = 'b00000000;
    ram_symbol2[954] = 'b00000000;
    ram_symbol3[954] = 'b00000000;
    ram_symbol0[955] = 'b00000000;
    ram_symbol1[955] = 'b00000000;
    ram_symbol2[955] = 'b00000000;
    ram_symbol3[955] = 'b00000000;
    ram_symbol0[956] = 'b00000000;
    ram_symbol1[956] = 'b00000000;
    ram_symbol2[956] = 'b00000000;
    ram_symbol3[956] = 'b00000000;
    ram_symbol0[957] = 'b00000000;
    ram_symbol1[957] = 'b00000000;
    ram_symbol2[957] = 'b00000000;
    ram_symbol3[957] = 'b00000000;
    ram_symbol0[958] = 'b00000000;
    ram_symbol1[958] = 'b00000000;
    ram_symbol2[958] = 'b00000000;
    ram_symbol3[958] = 'b00000000;
    ram_symbol0[959] = 'b00000000;
    ram_symbol1[959] = 'b00000000;
    ram_symbol2[959] = 'b00000000;
    ram_symbol3[959] = 'b00000000;
    ram_symbol0[960] = 'b00000000;
    ram_symbol1[960] = 'b00000000;
    ram_symbol2[960] = 'b00000000;
    ram_symbol3[960] = 'b00000000;
    ram_symbol0[961] = 'b00000000;
    ram_symbol1[961] = 'b00000000;
    ram_symbol2[961] = 'b00000000;
    ram_symbol3[961] = 'b00000000;
    ram_symbol0[962] = 'b00000000;
    ram_symbol1[962] = 'b00000000;
    ram_symbol2[962] = 'b00000000;
    ram_symbol3[962] = 'b00000000;
    ram_symbol0[963] = 'b00000000;
    ram_symbol1[963] = 'b00000000;
    ram_symbol2[963] = 'b00000000;
    ram_symbol3[963] = 'b00000000;
    ram_symbol0[964] = 'b00000000;
    ram_symbol1[964] = 'b00000000;
    ram_symbol2[964] = 'b00000000;
    ram_symbol3[964] = 'b00000000;
    ram_symbol0[965] = 'b00000000;
    ram_symbol1[965] = 'b00000000;
    ram_symbol2[965] = 'b00000000;
    ram_symbol3[965] = 'b00000000;
    ram_symbol0[966] = 'b00000000;
    ram_symbol1[966] = 'b00000000;
    ram_symbol2[966] = 'b00000000;
    ram_symbol3[966] = 'b00000000;
    ram_symbol0[967] = 'b00000000;
    ram_symbol1[967] = 'b00000000;
    ram_symbol2[967] = 'b00000000;
    ram_symbol3[967] = 'b00000000;
    ram_symbol0[968] = 'b00000000;
    ram_symbol1[968] = 'b00000000;
    ram_symbol2[968] = 'b00000000;
    ram_symbol3[968] = 'b00000000;
    ram_symbol0[969] = 'b00000000;
    ram_symbol1[969] = 'b00000000;
    ram_symbol2[969] = 'b00000000;
    ram_symbol3[969] = 'b00000000;
    ram_symbol0[970] = 'b00000000;
    ram_symbol1[970] = 'b00000000;
    ram_symbol2[970] = 'b00000000;
    ram_symbol3[970] = 'b00000000;
    ram_symbol0[971] = 'b00000000;
    ram_symbol1[971] = 'b00000000;
    ram_symbol2[971] = 'b00000000;
    ram_symbol3[971] = 'b00000000;
    ram_symbol0[972] = 'b00000000;
    ram_symbol1[972] = 'b00000000;
    ram_symbol2[972] = 'b00000000;
    ram_symbol3[972] = 'b00000000;
    ram_symbol0[973] = 'b00000000;
    ram_symbol1[973] = 'b00000000;
    ram_symbol2[973] = 'b00000000;
    ram_symbol3[973] = 'b00000000;
    ram_symbol0[974] = 'b00000000;
    ram_symbol1[974] = 'b00000000;
    ram_symbol2[974] = 'b00000000;
    ram_symbol3[974] = 'b00000000;
    ram_symbol0[975] = 'b00000000;
    ram_symbol1[975] = 'b00000000;
    ram_symbol2[975] = 'b00000000;
    ram_symbol3[975] = 'b00000000;
    ram_symbol0[976] = 'b00000000;
    ram_symbol1[976] = 'b00000000;
    ram_symbol2[976] = 'b00000000;
    ram_symbol3[976] = 'b00000000;
    ram_symbol0[977] = 'b00000000;
    ram_symbol1[977] = 'b00000000;
    ram_symbol2[977] = 'b00000000;
    ram_symbol3[977] = 'b00000000;
    ram_symbol0[978] = 'b00000000;
    ram_symbol1[978] = 'b00000000;
    ram_symbol2[978] = 'b00000000;
    ram_symbol3[978] = 'b00000000;
    ram_symbol0[979] = 'b00000000;
    ram_symbol1[979] = 'b00000000;
    ram_symbol2[979] = 'b00000000;
    ram_symbol3[979] = 'b00000000;
    ram_symbol0[980] = 'b00000000;
    ram_symbol1[980] = 'b00000000;
    ram_symbol2[980] = 'b00000000;
    ram_symbol3[980] = 'b00000000;
    ram_symbol0[981] = 'b00000000;
    ram_symbol1[981] = 'b00000000;
    ram_symbol2[981] = 'b00000000;
    ram_symbol3[981] = 'b00000000;
    ram_symbol0[982] = 'b00000000;
    ram_symbol1[982] = 'b00000000;
    ram_symbol2[982] = 'b00000000;
    ram_symbol3[982] = 'b00000000;
    ram_symbol0[983] = 'b00000000;
    ram_symbol1[983] = 'b00000000;
    ram_symbol2[983] = 'b00000000;
    ram_symbol3[983] = 'b00000000;
    ram_symbol0[984] = 'b00000000;
    ram_symbol1[984] = 'b00000000;
    ram_symbol2[984] = 'b00000000;
    ram_symbol3[984] = 'b00000000;
    ram_symbol0[985] = 'b00000000;
    ram_symbol1[985] = 'b00000000;
    ram_symbol2[985] = 'b00000000;
    ram_symbol3[985] = 'b00000000;
    ram_symbol0[986] = 'b00000000;
    ram_symbol1[986] = 'b00000000;
    ram_symbol2[986] = 'b00000000;
    ram_symbol3[986] = 'b00000000;
    ram_symbol0[987] = 'b00000000;
    ram_symbol1[987] = 'b00000000;
    ram_symbol2[987] = 'b00000000;
    ram_symbol3[987] = 'b00000000;
    ram_symbol0[988] = 'b00000000;
    ram_symbol1[988] = 'b00000000;
    ram_symbol2[988] = 'b00000000;
    ram_symbol3[988] = 'b00000000;
    ram_symbol0[989] = 'b00000000;
    ram_symbol1[989] = 'b00000000;
    ram_symbol2[989] = 'b00000000;
    ram_symbol3[989] = 'b00000000;
    ram_symbol0[990] = 'b00000000;
    ram_symbol1[990] = 'b00000000;
    ram_symbol2[990] = 'b00000000;
    ram_symbol3[990] = 'b00000000;
    ram_symbol0[991] = 'b00000000;
    ram_symbol1[991] = 'b00000000;
    ram_symbol2[991] = 'b00000000;
    ram_symbol3[991] = 'b00000000;
    ram_symbol0[992] = 'b00000000;
    ram_symbol1[992] = 'b00000000;
    ram_symbol2[992] = 'b00000000;
    ram_symbol3[992] = 'b00000000;
    ram_symbol0[993] = 'b00000000;
    ram_symbol1[993] = 'b00000000;
    ram_symbol2[993] = 'b00000000;
    ram_symbol3[993] = 'b00000000;
    ram_symbol0[994] = 'b00000000;
    ram_symbol1[994] = 'b00000000;
    ram_symbol2[994] = 'b00000000;
    ram_symbol3[994] = 'b00000000;
    ram_symbol0[995] = 'b00000000;
    ram_symbol1[995] = 'b00000000;
    ram_symbol2[995] = 'b00000000;
    ram_symbol3[995] = 'b00000000;
    ram_symbol0[996] = 'b00000000;
    ram_symbol1[996] = 'b00000000;
    ram_symbol2[996] = 'b00000000;
    ram_symbol3[996] = 'b00000000;
    ram_symbol0[997] = 'b00000000;
    ram_symbol1[997] = 'b00000000;
    ram_symbol2[997] = 'b00000000;
    ram_symbol3[997] = 'b00000000;
    ram_symbol0[998] = 'b00000000;
    ram_symbol1[998] = 'b00000000;
    ram_symbol2[998] = 'b00000000;
    ram_symbol3[998] = 'b00000000;
    ram_symbol0[999] = 'b00000000;
    ram_symbol1[999] = 'b00000000;
    ram_symbol2[999] = 'b00000000;
    ram_symbol3[999] = 'b00000000;
    ram_symbol0[1000] = 'b00000000;
    ram_symbol1[1000] = 'b00000000;
    ram_symbol2[1000] = 'b00000000;
    ram_symbol3[1000] = 'b00000000;
    ram_symbol0[1001] = 'b00000000;
    ram_symbol1[1001] = 'b00000000;
    ram_symbol2[1001] = 'b00000000;
    ram_symbol3[1001] = 'b00000000;
    ram_symbol0[1002] = 'b00000000;
    ram_symbol1[1002] = 'b00000000;
    ram_symbol2[1002] = 'b00000000;
    ram_symbol3[1002] = 'b00000000;
    ram_symbol0[1003] = 'b00000000;
    ram_symbol1[1003] = 'b00000000;
    ram_symbol2[1003] = 'b00000000;
    ram_symbol3[1003] = 'b00000000;
    ram_symbol0[1004] = 'b00000000;
    ram_symbol1[1004] = 'b00000000;
    ram_symbol2[1004] = 'b00000000;
    ram_symbol3[1004] = 'b00000000;
    ram_symbol0[1005] = 'b00000000;
    ram_symbol1[1005] = 'b00000000;
    ram_symbol2[1005] = 'b00000000;
    ram_symbol3[1005] = 'b00000000;
    ram_symbol0[1006] = 'b00000000;
    ram_symbol1[1006] = 'b00000000;
    ram_symbol2[1006] = 'b00000000;
    ram_symbol3[1006] = 'b00000000;
    ram_symbol0[1007] = 'b00000000;
    ram_symbol1[1007] = 'b00000000;
    ram_symbol2[1007] = 'b00000000;
    ram_symbol3[1007] = 'b00000000;
    ram_symbol0[1008] = 'b00000000;
    ram_symbol1[1008] = 'b00000000;
    ram_symbol2[1008] = 'b00000000;
    ram_symbol3[1008] = 'b00000000;
    ram_symbol0[1009] = 'b00000000;
    ram_symbol1[1009] = 'b00000000;
    ram_symbol2[1009] = 'b00000000;
    ram_symbol3[1009] = 'b00000000;
    ram_symbol0[1010] = 'b00000000;
    ram_symbol1[1010] = 'b00000000;
    ram_symbol2[1010] = 'b00000000;
    ram_symbol3[1010] = 'b00000000;
    ram_symbol0[1011] = 'b00000000;
    ram_symbol1[1011] = 'b00000000;
    ram_symbol2[1011] = 'b00000000;
    ram_symbol3[1011] = 'b00000000;
    ram_symbol0[1012] = 'b00000000;
    ram_symbol1[1012] = 'b00000000;
    ram_symbol2[1012] = 'b00000000;
    ram_symbol3[1012] = 'b00000000;
    ram_symbol0[1013] = 'b00000000;
    ram_symbol1[1013] = 'b00000000;
    ram_symbol2[1013] = 'b00000000;
    ram_symbol3[1013] = 'b00000000;
    ram_symbol0[1014] = 'b00000000;
    ram_symbol1[1014] = 'b00000000;
    ram_symbol2[1014] = 'b00000000;
    ram_symbol3[1014] = 'b00000000;
    ram_symbol0[1015] = 'b00000000;
    ram_symbol1[1015] = 'b00000000;
    ram_symbol2[1015] = 'b00000000;
    ram_symbol3[1015] = 'b00000000;
    ram_symbol0[1016] = 'b00000000;
    ram_symbol1[1016] = 'b00000000;
    ram_symbol2[1016] = 'b00000000;
    ram_symbol3[1016] = 'b00000000;
    ram_symbol0[1017] = 'b00000000;
    ram_symbol1[1017] = 'b00000000;
    ram_symbol2[1017] = 'b00000000;
    ram_symbol3[1017] = 'b00000000;
    ram_symbol0[1018] = 'b00000000;
    ram_symbol1[1018] = 'b00000000;
    ram_symbol2[1018] = 'b00000000;
    ram_symbol3[1018] = 'b00000000;
    ram_symbol0[1019] = 'b00000000;
    ram_symbol1[1019] = 'b00000000;
    ram_symbol2[1019] = 'b00000000;
    ram_symbol3[1019] = 'b00000000;
    ram_symbol0[1020] = 'b00000000;
    ram_symbol1[1020] = 'b00000000;
    ram_symbol2[1020] = 'b00000000;
    ram_symbol3[1020] = 'b00000000;
    ram_symbol0[1021] = 'b00000000;
    ram_symbol1[1021] = 'b00000000;
    ram_symbol2[1021] = 'b00000000;
    ram_symbol3[1021] = 'b00000000;
    ram_symbol0[1022] = 'b00000000;
    ram_symbol1[1022] = 'b00000000;
    ram_symbol2[1022] = 'b00000000;
    ram_symbol3[1022] = 'b00000000;
    ram_symbol0[1023] = 'b00000000;
    ram_symbol1[1023] = 'b00000000;
    ram_symbol2[1023] = 'b00000000;
    ram_symbol3[1023] = 'b00000000;
    ram_symbol0[1024] = 'b00000000;
    ram_symbol1[1024] = 'b00000000;
    ram_symbol2[1024] = 'b00000000;
    ram_symbol3[1024] = 'b00000000;
    ram_symbol0[1025] = 'b00000000;
    ram_symbol1[1025] = 'b00000000;
    ram_symbol2[1025] = 'b00000000;
    ram_symbol3[1025] = 'b00000000;
    ram_symbol0[1026] = 'b00000000;
    ram_symbol1[1026] = 'b00000000;
    ram_symbol2[1026] = 'b00000000;
    ram_symbol3[1026] = 'b00000000;
    ram_symbol0[1027] = 'b00000000;
    ram_symbol1[1027] = 'b00000000;
    ram_symbol2[1027] = 'b00000000;
    ram_symbol3[1027] = 'b00000000;
    ram_symbol0[1028] = 'b00000000;
    ram_symbol1[1028] = 'b00000000;
    ram_symbol2[1028] = 'b00000000;
    ram_symbol3[1028] = 'b00000000;
    ram_symbol0[1029] = 'b00000000;
    ram_symbol1[1029] = 'b00000000;
    ram_symbol2[1029] = 'b00000000;
    ram_symbol3[1029] = 'b00000000;
    ram_symbol0[1030] = 'b00000000;
    ram_symbol1[1030] = 'b00000000;
    ram_symbol2[1030] = 'b00000000;
    ram_symbol3[1030] = 'b00000000;
    ram_symbol0[1031] = 'b00000000;
    ram_symbol1[1031] = 'b00000000;
    ram_symbol2[1031] = 'b00000000;
    ram_symbol3[1031] = 'b00000000;
    ram_symbol0[1032] = 'b00000000;
    ram_symbol1[1032] = 'b00000000;
    ram_symbol2[1032] = 'b00000000;
    ram_symbol3[1032] = 'b00000000;
    ram_symbol0[1033] = 'b00000000;
    ram_symbol1[1033] = 'b00000000;
    ram_symbol2[1033] = 'b00000000;
    ram_symbol3[1033] = 'b00000000;
    ram_symbol0[1034] = 'b00000000;
    ram_symbol1[1034] = 'b00000000;
    ram_symbol2[1034] = 'b00000000;
    ram_symbol3[1034] = 'b00000000;
    ram_symbol0[1035] = 'b00000000;
    ram_symbol1[1035] = 'b00000000;
    ram_symbol2[1035] = 'b00000000;
    ram_symbol3[1035] = 'b00000000;
    ram_symbol0[1036] = 'b00000000;
    ram_symbol1[1036] = 'b00000000;
    ram_symbol2[1036] = 'b00000000;
    ram_symbol3[1036] = 'b00000000;
    ram_symbol0[1037] = 'b00000000;
    ram_symbol1[1037] = 'b00000000;
    ram_symbol2[1037] = 'b00000000;
    ram_symbol3[1037] = 'b00000000;
    ram_symbol0[1038] = 'b00000000;
    ram_symbol1[1038] = 'b00000000;
    ram_symbol2[1038] = 'b00000000;
    ram_symbol3[1038] = 'b00000000;
    ram_symbol0[1039] = 'b00000000;
    ram_symbol1[1039] = 'b00000000;
    ram_symbol2[1039] = 'b00000000;
    ram_symbol3[1039] = 'b00000000;
    ram_symbol0[1040] = 'b00000000;
    ram_symbol1[1040] = 'b00000000;
    ram_symbol2[1040] = 'b00000000;
    ram_symbol3[1040] = 'b00000000;
    ram_symbol0[1041] = 'b00000000;
    ram_symbol1[1041] = 'b00000000;
    ram_symbol2[1041] = 'b00000000;
    ram_symbol3[1041] = 'b00000000;
    ram_symbol0[1042] = 'b00000000;
    ram_symbol1[1042] = 'b00000000;
    ram_symbol2[1042] = 'b00000000;
    ram_symbol3[1042] = 'b00000000;
    ram_symbol0[1043] = 'b00000000;
    ram_symbol1[1043] = 'b00000000;
    ram_symbol2[1043] = 'b00000000;
    ram_symbol3[1043] = 'b00000000;
    ram_symbol0[1044] = 'b00000000;
    ram_symbol1[1044] = 'b00000000;
    ram_symbol2[1044] = 'b00000000;
    ram_symbol3[1044] = 'b00000000;
    ram_symbol0[1045] = 'b00000000;
    ram_symbol1[1045] = 'b00000000;
    ram_symbol2[1045] = 'b00000000;
    ram_symbol3[1045] = 'b00000000;
    ram_symbol0[1046] = 'b00000000;
    ram_symbol1[1046] = 'b00000000;
    ram_symbol2[1046] = 'b00000000;
    ram_symbol3[1046] = 'b00000000;
    ram_symbol0[1047] = 'b00000000;
    ram_symbol1[1047] = 'b00000000;
    ram_symbol2[1047] = 'b00000000;
    ram_symbol3[1047] = 'b00000000;
    ram_symbol0[1048] = 'b00000000;
    ram_symbol1[1048] = 'b00000000;
    ram_symbol2[1048] = 'b00000000;
    ram_symbol3[1048] = 'b00000000;
    ram_symbol0[1049] = 'b00000000;
    ram_symbol1[1049] = 'b00000000;
    ram_symbol2[1049] = 'b00000000;
    ram_symbol3[1049] = 'b00000000;
    ram_symbol0[1050] = 'b00000000;
    ram_symbol1[1050] = 'b00000000;
    ram_symbol2[1050] = 'b00000000;
    ram_symbol3[1050] = 'b00000000;
    ram_symbol0[1051] = 'b00000000;
    ram_symbol1[1051] = 'b00000000;
    ram_symbol2[1051] = 'b00000000;
    ram_symbol3[1051] = 'b00000000;
    ram_symbol0[1052] = 'b00000000;
    ram_symbol1[1052] = 'b00000000;
    ram_symbol2[1052] = 'b00000000;
    ram_symbol3[1052] = 'b00000000;
    ram_symbol0[1053] = 'b00000000;
    ram_symbol1[1053] = 'b00000000;
    ram_symbol2[1053] = 'b00000000;
    ram_symbol3[1053] = 'b00000000;
    ram_symbol0[1054] = 'b00000000;
    ram_symbol1[1054] = 'b00000000;
    ram_symbol2[1054] = 'b00000000;
    ram_symbol3[1054] = 'b00000000;
    ram_symbol0[1055] = 'b00000000;
    ram_symbol1[1055] = 'b00000000;
    ram_symbol2[1055] = 'b00000000;
    ram_symbol3[1055] = 'b00000000;
    ram_symbol0[1056] = 'b00000000;
    ram_symbol1[1056] = 'b00000000;
    ram_symbol2[1056] = 'b00000000;
    ram_symbol3[1056] = 'b00000000;
    ram_symbol0[1057] = 'b00000000;
    ram_symbol1[1057] = 'b00000000;
    ram_symbol2[1057] = 'b00000000;
    ram_symbol3[1057] = 'b00000000;
    ram_symbol0[1058] = 'b00000000;
    ram_symbol1[1058] = 'b00000000;
    ram_symbol2[1058] = 'b00000000;
    ram_symbol3[1058] = 'b00000000;
    ram_symbol0[1059] = 'b00000000;
    ram_symbol1[1059] = 'b00000000;
    ram_symbol2[1059] = 'b00000000;
    ram_symbol3[1059] = 'b00000000;
    ram_symbol0[1060] = 'b00000000;
    ram_symbol1[1060] = 'b00000000;
    ram_symbol2[1060] = 'b00000000;
    ram_symbol3[1060] = 'b00000000;
    ram_symbol0[1061] = 'b00000000;
    ram_symbol1[1061] = 'b00000000;
    ram_symbol2[1061] = 'b00000000;
    ram_symbol3[1061] = 'b00000000;
    ram_symbol0[1062] = 'b00000000;
    ram_symbol1[1062] = 'b00000000;
    ram_symbol2[1062] = 'b00000000;
    ram_symbol3[1062] = 'b00000000;
    ram_symbol0[1063] = 'b00000000;
    ram_symbol1[1063] = 'b00000000;
    ram_symbol2[1063] = 'b00000000;
    ram_symbol3[1063] = 'b00000000;
    ram_symbol0[1064] = 'b00000000;
    ram_symbol1[1064] = 'b00000000;
    ram_symbol2[1064] = 'b00000000;
    ram_symbol3[1064] = 'b00000000;
    ram_symbol0[1065] = 'b00000000;
    ram_symbol1[1065] = 'b00000000;
    ram_symbol2[1065] = 'b00000000;
    ram_symbol3[1065] = 'b00000000;
    ram_symbol0[1066] = 'b00000000;
    ram_symbol1[1066] = 'b00000000;
    ram_symbol2[1066] = 'b00000000;
    ram_symbol3[1066] = 'b00000000;
    ram_symbol0[1067] = 'b00000000;
    ram_symbol1[1067] = 'b00000000;
    ram_symbol2[1067] = 'b00000000;
    ram_symbol3[1067] = 'b00000000;
    ram_symbol0[1068] = 'b00000000;
    ram_symbol1[1068] = 'b00000000;
    ram_symbol2[1068] = 'b00000000;
    ram_symbol3[1068] = 'b00000000;
    ram_symbol0[1069] = 'b00000000;
    ram_symbol1[1069] = 'b00000000;
    ram_symbol2[1069] = 'b00000000;
    ram_symbol3[1069] = 'b00000000;
    ram_symbol0[1070] = 'b00000000;
    ram_symbol1[1070] = 'b00000000;
    ram_symbol2[1070] = 'b00000000;
    ram_symbol3[1070] = 'b00000000;
    ram_symbol0[1071] = 'b00000000;
    ram_symbol1[1071] = 'b00000000;
    ram_symbol2[1071] = 'b00000000;
    ram_symbol3[1071] = 'b00000000;
    ram_symbol0[1072] = 'b00000000;
    ram_symbol1[1072] = 'b00000000;
    ram_symbol2[1072] = 'b00000000;
    ram_symbol3[1072] = 'b00000000;
    ram_symbol0[1073] = 'b00000000;
    ram_symbol1[1073] = 'b00000000;
    ram_symbol2[1073] = 'b00000000;
    ram_symbol3[1073] = 'b00000000;
    ram_symbol0[1074] = 'b00000000;
    ram_symbol1[1074] = 'b00000000;
    ram_symbol2[1074] = 'b00000000;
    ram_symbol3[1074] = 'b00000000;
    ram_symbol0[1075] = 'b00000000;
    ram_symbol1[1075] = 'b00000000;
    ram_symbol2[1075] = 'b00000000;
    ram_symbol3[1075] = 'b00000000;
    ram_symbol0[1076] = 'b00000000;
    ram_symbol1[1076] = 'b00000000;
    ram_symbol2[1076] = 'b00000000;
    ram_symbol3[1076] = 'b00000000;
    ram_symbol0[1077] = 'b00000000;
    ram_symbol1[1077] = 'b00000000;
    ram_symbol2[1077] = 'b00000000;
    ram_symbol3[1077] = 'b00000000;
    ram_symbol0[1078] = 'b00000000;
    ram_symbol1[1078] = 'b00000000;
    ram_symbol2[1078] = 'b00000000;
    ram_symbol3[1078] = 'b00000000;
    ram_symbol0[1079] = 'b00000000;
    ram_symbol1[1079] = 'b00000000;
    ram_symbol2[1079] = 'b00000000;
    ram_symbol3[1079] = 'b00000000;
    ram_symbol0[1080] = 'b00000000;
    ram_symbol1[1080] = 'b00000000;
    ram_symbol2[1080] = 'b00000000;
    ram_symbol3[1080] = 'b00000000;
    ram_symbol0[1081] = 'b00000000;
    ram_symbol1[1081] = 'b00000000;
    ram_symbol2[1081] = 'b00000000;
    ram_symbol3[1081] = 'b00000000;
    ram_symbol0[1082] = 'b00000000;
    ram_symbol1[1082] = 'b00000000;
    ram_symbol2[1082] = 'b00000000;
    ram_symbol3[1082] = 'b00000000;
    ram_symbol0[1083] = 'b00000000;
    ram_symbol1[1083] = 'b00000000;
    ram_symbol2[1083] = 'b00000000;
    ram_symbol3[1083] = 'b00000000;
    ram_symbol0[1084] = 'b00000000;
    ram_symbol1[1084] = 'b00000000;
    ram_symbol2[1084] = 'b00000000;
    ram_symbol3[1084] = 'b00000000;
    ram_symbol0[1085] = 'b00000000;
    ram_symbol1[1085] = 'b00000000;
    ram_symbol2[1085] = 'b00000000;
    ram_symbol3[1085] = 'b00000000;
    ram_symbol0[1086] = 'b00000000;
    ram_symbol1[1086] = 'b00000000;
    ram_symbol2[1086] = 'b00000000;
    ram_symbol3[1086] = 'b00000000;
    ram_symbol0[1087] = 'b00000000;
    ram_symbol1[1087] = 'b00000000;
    ram_symbol2[1087] = 'b00000000;
    ram_symbol3[1087] = 'b00000000;
    ram_symbol0[1088] = 'b00000000;
    ram_symbol1[1088] = 'b00000000;
    ram_symbol2[1088] = 'b00000000;
    ram_symbol3[1088] = 'b00000000;
    ram_symbol0[1089] = 'b00000000;
    ram_symbol1[1089] = 'b00000000;
    ram_symbol2[1089] = 'b00000000;
    ram_symbol3[1089] = 'b00000000;
    ram_symbol0[1090] = 'b00000000;
    ram_symbol1[1090] = 'b00000000;
    ram_symbol2[1090] = 'b00000000;
    ram_symbol3[1090] = 'b00000000;
    ram_symbol0[1091] = 'b00000000;
    ram_symbol1[1091] = 'b00000000;
    ram_symbol2[1091] = 'b00000000;
    ram_symbol3[1091] = 'b00000000;
    ram_symbol0[1092] = 'b00000000;
    ram_symbol1[1092] = 'b00000000;
    ram_symbol2[1092] = 'b00000000;
    ram_symbol3[1092] = 'b00000000;
    ram_symbol0[1093] = 'b00000000;
    ram_symbol1[1093] = 'b00000000;
    ram_symbol2[1093] = 'b00000000;
    ram_symbol3[1093] = 'b00000000;
    ram_symbol0[1094] = 'b00000000;
    ram_symbol1[1094] = 'b00000000;
    ram_symbol2[1094] = 'b00000000;
    ram_symbol3[1094] = 'b00000000;
    ram_symbol0[1095] = 'b00000000;
    ram_symbol1[1095] = 'b00000000;
    ram_symbol2[1095] = 'b00000000;
    ram_symbol3[1095] = 'b00000000;
    ram_symbol0[1096] = 'b00000000;
    ram_symbol1[1096] = 'b00000000;
    ram_symbol2[1096] = 'b00000000;
    ram_symbol3[1096] = 'b00000000;
    ram_symbol0[1097] = 'b00000000;
    ram_symbol1[1097] = 'b00000000;
    ram_symbol2[1097] = 'b00000000;
    ram_symbol3[1097] = 'b00000000;
    ram_symbol0[1098] = 'b00000000;
    ram_symbol1[1098] = 'b00000000;
    ram_symbol2[1098] = 'b00000000;
    ram_symbol3[1098] = 'b00000000;
    ram_symbol0[1099] = 'b00000000;
    ram_symbol1[1099] = 'b00000000;
    ram_symbol2[1099] = 'b00000000;
    ram_symbol3[1099] = 'b00000000;
    ram_symbol0[1100] = 'b00000000;
    ram_symbol1[1100] = 'b00000000;
    ram_symbol2[1100] = 'b00000000;
    ram_symbol3[1100] = 'b00000000;
    ram_symbol0[1101] = 'b00000000;
    ram_symbol1[1101] = 'b00000000;
    ram_symbol2[1101] = 'b00000000;
    ram_symbol3[1101] = 'b00000000;
    ram_symbol0[1102] = 'b00000000;
    ram_symbol1[1102] = 'b00000000;
    ram_symbol2[1102] = 'b00000000;
    ram_symbol3[1102] = 'b00000000;
    ram_symbol0[1103] = 'b00000000;
    ram_symbol1[1103] = 'b00000000;
    ram_symbol2[1103] = 'b00000000;
    ram_symbol3[1103] = 'b00000000;
    ram_symbol0[1104] = 'b00000000;
    ram_symbol1[1104] = 'b00000000;
    ram_symbol2[1104] = 'b00000000;
    ram_symbol3[1104] = 'b00000000;
    ram_symbol0[1105] = 'b00000000;
    ram_symbol1[1105] = 'b00000000;
    ram_symbol2[1105] = 'b00000000;
    ram_symbol3[1105] = 'b00000000;
    ram_symbol0[1106] = 'b00000000;
    ram_symbol1[1106] = 'b00000000;
    ram_symbol2[1106] = 'b00000000;
    ram_symbol3[1106] = 'b00000000;
    ram_symbol0[1107] = 'b00000000;
    ram_symbol1[1107] = 'b00000000;
    ram_symbol2[1107] = 'b00000000;
    ram_symbol3[1107] = 'b00000000;
    ram_symbol0[1108] = 'b00000000;
    ram_symbol1[1108] = 'b00000000;
    ram_symbol2[1108] = 'b00000000;
    ram_symbol3[1108] = 'b00000000;
    ram_symbol0[1109] = 'b00000000;
    ram_symbol1[1109] = 'b00000000;
    ram_symbol2[1109] = 'b00000000;
    ram_symbol3[1109] = 'b00000000;
    ram_symbol0[1110] = 'b00000000;
    ram_symbol1[1110] = 'b00000000;
    ram_symbol2[1110] = 'b00000000;
    ram_symbol3[1110] = 'b00000000;
    ram_symbol0[1111] = 'b00000000;
    ram_symbol1[1111] = 'b00000000;
    ram_symbol2[1111] = 'b00000000;
    ram_symbol3[1111] = 'b00000000;
    ram_symbol0[1112] = 'b00000000;
    ram_symbol1[1112] = 'b00000000;
    ram_symbol2[1112] = 'b00000000;
    ram_symbol3[1112] = 'b00000000;
    ram_symbol0[1113] = 'b00000000;
    ram_symbol1[1113] = 'b00000000;
    ram_symbol2[1113] = 'b00000000;
    ram_symbol3[1113] = 'b00000000;
    ram_symbol0[1114] = 'b00000000;
    ram_symbol1[1114] = 'b00000000;
    ram_symbol2[1114] = 'b00000000;
    ram_symbol3[1114] = 'b00000000;
    ram_symbol0[1115] = 'b00000000;
    ram_symbol1[1115] = 'b00000000;
    ram_symbol2[1115] = 'b00000000;
    ram_symbol3[1115] = 'b00000000;
    ram_symbol0[1116] = 'b00000000;
    ram_symbol1[1116] = 'b00000000;
    ram_symbol2[1116] = 'b00000000;
    ram_symbol3[1116] = 'b00000000;
    ram_symbol0[1117] = 'b00000000;
    ram_symbol1[1117] = 'b00000000;
    ram_symbol2[1117] = 'b00000000;
    ram_symbol3[1117] = 'b00000000;
    ram_symbol0[1118] = 'b00000000;
    ram_symbol1[1118] = 'b00000000;
    ram_symbol2[1118] = 'b00000000;
    ram_symbol3[1118] = 'b00000000;
    ram_symbol0[1119] = 'b00000000;
    ram_symbol1[1119] = 'b00000000;
    ram_symbol2[1119] = 'b00000000;
    ram_symbol3[1119] = 'b00000000;
    ram_symbol0[1120] = 'b00000000;
    ram_symbol1[1120] = 'b00000000;
    ram_symbol2[1120] = 'b00000000;
    ram_symbol3[1120] = 'b00000000;
    ram_symbol0[1121] = 'b00000000;
    ram_symbol1[1121] = 'b00000000;
    ram_symbol2[1121] = 'b00000000;
    ram_symbol3[1121] = 'b00000000;
    ram_symbol0[1122] = 'b00000000;
    ram_symbol1[1122] = 'b00000000;
    ram_symbol2[1122] = 'b00000000;
    ram_symbol3[1122] = 'b00000000;
    ram_symbol0[1123] = 'b00000000;
    ram_symbol1[1123] = 'b00000000;
    ram_symbol2[1123] = 'b00000000;
    ram_symbol3[1123] = 'b00000000;
    ram_symbol0[1124] = 'b00000000;
    ram_symbol1[1124] = 'b00000000;
    ram_symbol2[1124] = 'b00000000;
    ram_symbol3[1124] = 'b00000000;
    ram_symbol0[1125] = 'b00000000;
    ram_symbol1[1125] = 'b00000000;
    ram_symbol2[1125] = 'b00000000;
    ram_symbol3[1125] = 'b00000000;
    ram_symbol0[1126] = 'b00000000;
    ram_symbol1[1126] = 'b00000000;
    ram_symbol2[1126] = 'b00000000;
    ram_symbol3[1126] = 'b00000000;
    ram_symbol0[1127] = 'b00000000;
    ram_symbol1[1127] = 'b00000000;
    ram_symbol2[1127] = 'b00000000;
    ram_symbol3[1127] = 'b00000000;
    ram_symbol0[1128] = 'b00000000;
    ram_symbol1[1128] = 'b00000000;
    ram_symbol2[1128] = 'b00000000;
    ram_symbol3[1128] = 'b00000000;
    ram_symbol0[1129] = 'b00000000;
    ram_symbol1[1129] = 'b00000000;
    ram_symbol2[1129] = 'b00000000;
    ram_symbol3[1129] = 'b00000000;
    ram_symbol0[1130] = 'b00000000;
    ram_symbol1[1130] = 'b00000000;
    ram_symbol2[1130] = 'b00000000;
    ram_symbol3[1130] = 'b00000000;
    ram_symbol0[1131] = 'b00000000;
    ram_symbol1[1131] = 'b00000000;
    ram_symbol2[1131] = 'b00000000;
    ram_symbol3[1131] = 'b00000000;
    ram_symbol0[1132] = 'b00000000;
    ram_symbol1[1132] = 'b00000000;
    ram_symbol2[1132] = 'b00000000;
    ram_symbol3[1132] = 'b00000000;
    ram_symbol0[1133] = 'b00000000;
    ram_symbol1[1133] = 'b00000000;
    ram_symbol2[1133] = 'b00000000;
    ram_symbol3[1133] = 'b00000000;
    ram_symbol0[1134] = 'b00000000;
    ram_symbol1[1134] = 'b00000000;
    ram_symbol2[1134] = 'b00000000;
    ram_symbol3[1134] = 'b00000000;
    ram_symbol0[1135] = 'b00000000;
    ram_symbol1[1135] = 'b00000000;
    ram_symbol2[1135] = 'b00000000;
    ram_symbol3[1135] = 'b00000000;
    ram_symbol0[1136] = 'b00000000;
    ram_symbol1[1136] = 'b00000000;
    ram_symbol2[1136] = 'b00000000;
    ram_symbol3[1136] = 'b00000000;
    ram_symbol0[1137] = 'b00000000;
    ram_symbol1[1137] = 'b00000000;
    ram_symbol2[1137] = 'b00000000;
    ram_symbol3[1137] = 'b00000000;
    ram_symbol0[1138] = 'b00000000;
    ram_symbol1[1138] = 'b00000000;
    ram_symbol2[1138] = 'b00000000;
    ram_symbol3[1138] = 'b00000000;
    ram_symbol0[1139] = 'b00000000;
    ram_symbol1[1139] = 'b00000000;
    ram_symbol2[1139] = 'b00000000;
    ram_symbol3[1139] = 'b00000000;
    ram_symbol0[1140] = 'b00000000;
    ram_symbol1[1140] = 'b00000000;
    ram_symbol2[1140] = 'b00000000;
    ram_symbol3[1140] = 'b00000000;
    ram_symbol0[1141] = 'b00000000;
    ram_symbol1[1141] = 'b00000000;
    ram_symbol2[1141] = 'b00000000;
    ram_symbol3[1141] = 'b00000000;
    ram_symbol0[1142] = 'b00000000;
    ram_symbol1[1142] = 'b00000000;
    ram_symbol2[1142] = 'b00000000;
    ram_symbol3[1142] = 'b00000000;
    ram_symbol0[1143] = 'b00000000;
    ram_symbol1[1143] = 'b00000000;
    ram_symbol2[1143] = 'b00000000;
    ram_symbol3[1143] = 'b00000000;
    ram_symbol0[1144] = 'b00000000;
    ram_symbol1[1144] = 'b00000000;
    ram_symbol2[1144] = 'b00000000;
    ram_symbol3[1144] = 'b00000000;
    ram_symbol0[1145] = 'b00000000;
    ram_symbol1[1145] = 'b00000000;
    ram_symbol2[1145] = 'b00000000;
    ram_symbol3[1145] = 'b00000000;
    ram_symbol0[1146] = 'b00000000;
    ram_symbol1[1146] = 'b00000000;
    ram_symbol2[1146] = 'b00000000;
    ram_symbol3[1146] = 'b00000000;
    ram_symbol0[1147] = 'b00000000;
    ram_symbol1[1147] = 'b00000000;
    ram_symbol2[1147] = 'b00000000;
    ram_symbol3[1147] = 'b00000000;
    ram_symbol0[1148] = 'b00000000;
    ram_symbol1[1148] = 'b00000000;
    ram_symbol2[1148] = 'b00000000;
    ram_symbol3[1148] = 'b00000000;
    ram_symbol0[1149] = 'b00000000;
    ram_symbol1[1149] = 'b00000000;
    ram_symbol2[1149] = 'b00000000;
    ram_symbol3[1149] = 'b00000000;
    ram_symbol0[1150] = 'b00000000;
    ram_symbol1[1150] = 'b00000000;
    ram_symbol2[1150] = 'b00000000;
    ram_symbol3[1150] = 'b00000000;
    ram_symbol0[1151] = 'b00000000;
    ram_symbol1[1151] = 'b00000000;
    ram_symbol2[1151] = 'b00000000;
    ram_symbol3[1151] = 'b00000000;
    ram_symbol0[1152] = 'b00000000;
    ram_symbol1[1152] = 'b00000000;
    ram_symbol2[1152] = 'b00000000;
    ram_symbol3[1152] = 'b00000000;
    ram_symbol0[1153] = 'b00000000;
    ram_symbol1[1153] = 'b00000000;
    ram_symbol2[1153] = 'b00000000;
    ram_symbol3[1153] = 'b00000000;
    ram_symbol0[1154] = 'b00000000;
    ram_symbol1[1154] = 'b00000000;
    ram_symbol2[1154] = 'b00000000;
    ram_symbol3[1154] = 'b00000000;
    ram_symbol0[1155] = 'b00000000;
    ram_symbol1[1155] = 'b00000000;
    ram_symbol2[1155] = 'b00000000;
    ram_symbol3[1155] = 'b00000000;
    ram_symbol0[1156] = 'b00000000;
    ram_symbol1[1156] = 'b00000000;
    ram_symbol2[1156] = 'b00000000;
    ram_symbol3[1156] = 'b00000000;
    ram_symbol0[1157] = 'b00000000;
    ram_symbol1[1157] = 'b00000000;
    ram_symbol2[1157] = 'b00000000;
    ram_symbol3[1157] = 'b00000000;
    ram_symbol0[1158] = 'b00000000;
    ram_symbol1[1158] = 'b00000000;
    ram_symbol2[1158] = 'b00000000;
    ram_symbol3[1158] = 'b00000000;
    ram_symbol0[1159] = 'b00000000;
    ram_symbol1[1159] = 'b00000000;
    ram_symbol2[1159] = 'b00000000;
    ram_symbol3[1159] = 'b00000000;
    ram_symbol0[1160] = 'b00000000;
    ram_symbol1[1160] = 'b00000000;
    ram_symbol2[1160] = 'b00000000;
    ram_symbol3[1160] = 'b00000000;
    ram_symbol0[1161] = 'b00000000;
    ram_symbol1[1161] = 'b00000000;
    ram_symbol2[1161] = 'b00000000;
    ram_symbol3[1161] = 'b00000000;
    ram_symbol0[1162] = 'b00000000;
    ram_symbol1[1162] = 'b00000000;
    ram_symbol2[1162] = 'b00000000;
    ram_symbol3[1162] = 'b00000000;
    ram_symbol0[1163] = 'b00000000;
    ram_symbol1[1163] = 'b00000000;
    ram_symbol2[1163] = 'b00000000;
    ram_symbol3[1163] = 'b00000000;
    ram_symbol0[1164] = 'b00000000;
    ram_symbol1[1164] = 'b00000000;
    ram_symbol2[1164] = 'b00000000;
    ram_symbol3[1164] = 'b00000000;
    ram_symbol0[1165] = 'b00000000;
    ram_symbol1[1165] = 'b00000000;
    ram_symbol2[1165] = 'b00000000;
    ram_symbol3[1165] = 'b00000000;
    ram_symbol0[1166] = 'b00000000;
    ram_symbol1[1166] = 'b00000000;
    ram_symbol2[1166] = 'b00000000;
    ram_symbol3[1166] = 'b00000000;
    ram_symbol0[1167] = 'b00000000;
    ram_symbol1[1167] = 'b00000000;
    ram_symbol2[1167] = 'b00000000;
    ram_symbol3[1167] = 'b00000000;
    ram_symbol0[1168] = 'b00000000;
    ram_symbol1[1168] = 'b00000000;
    ram_symbol2[1168] = 'b00000000;
    ram_symbol3[1168] = 'b00000000;
    ram_symbol0[1169] = 'b00000000;
    ram_symbol1[1169] = 'b00000000;
    ram_symbol2[1169] = 'b00000000;
    ram_symbol3[1169] = 'b00000000;
    ram_symbol0[1170] = 'b00000000;
    ram_symbol1[1170] = 'b00000000;
    ram_symbol2[1170] = 'b00000000;
    ram_symbol3[1170] = 'b00000000;
    ram_symbol0[1171] = 'b00000000;
    ram_symbol1[1171] = 'b00000000;
    ram_symbol2[1171] = 'b00000000;
    ram_symbol3[1171] = 'b00000000;
    ram_symbol0[1172] = 'b00000000;
    ram_symbol1[1172] = 'b00000000;
    ram_symbol2[1172] = 'b00000000;
    ram_symbol3[1172] = 'b00000000;
    ram_symbol0[1173] = 'b00000000;
    ram_symbol1[1173] = 'b00000000;
    ram_symbol2[1173] = 'b00000000;
    ram_symbol3[1173] = 'b00000000;
    ram_symbol0[1174] = 'b00000000;
    ram_symbol1[1174] = 'b00000000;
    ram_symbol2[1174] = 'b00000000;
    ram_symbol3[1174] = 'b00000000;
    ram_symbol0[1175] = 'b00000000;
    ram_symbol1[1175] = 'b00000000;
    ram_symbol2[1175] = 'b00000000;
    ram_symbol3[1175] = 'b00000000;
    ram_symbol0[1176] = 'b00000000;
    ram_symbol1[1176] = 'b00000000;
    ram_symbol2[1176] = 'b00000000;
    ram_symbol3[1176] = 'b00000000;
    ram_symbol0[1177] = 'b00000000;
    ram_symbol1[1177] = 'b00000000;
    ram_symbol2[1177] = 'b00000000;
    ram_symbol3[1177] = 'b00000000;
    ram_symbol0[1178] = 'b00000000;
    ram_symbol1[1178] = 'b00000000;
    ram_symbol2[1178] = 'b00000000;
    ram_symbol3[1178] = 'b00000000;
    ram_symbol0[1179] = 'b00000000;
    ram_symbol1[1179] = 'b00000000;
    ram_symbol2[1179] = 'b00000000;
    ram_symbol3[1179] = 'b00000000;
    ram_symbol0[1180] = 'b00000000;
    ram_symbol1[1180] = 'b00000000;
    ram_symbol2[1180] = 'b00000000;
    ram_symbol3[1180] = 'b00000000;
    ram_symbol0[1181] = 'b00000000;
    ram_symbol1[1181] = 'b00000000;
    ram_symbol2[1181] = 'b00000000;
    ram_symbol3[1181] = 'b00000000;
    ram_symbol0[1182] = 'b00000000;
    ram_symbol1[1182] = 'b00000000;
    ram_symbol2[1182] = 'b00000000;
    ram_symbol3[1182] = 'b00000000;
    ram_symbol0[1183] = 'b00000000;
    ram_symbol1[1183] = 'b00000000;
    ram_symbol2[1183] = 'b00000000;
    ram_symbol3[1183] = 'b00000000;
    ram_symbol0[1184] = 'b00000000;
    ram_symbol1[1184] = 'b00000000;
    ram_symbol2[1184] = 'b00000000;
    ram_symbol3[1184] = 'b00000000;
    ram_symbol0[1185] = 'b00000000;
    ram_symbol1[1185] = 'b00000000;
    ram_symbol2[1185] = 'b00000000;
    ram_symbol3[1185] = 'b00000000;
    ram_symbol0[1186] = 'b00000000;
    ram_symbol1[1186] = 'b00000000;
    ram_symbol2[1186] = 'b00000000;
    ram_symbol3[1186] = 'b00000000;
    ram_symbol0[1187] = 'b00000000;
    ram_symbol1[1187] = 'b00000000;
    ram_symbol2[1187] = 'b00000000;
    ram_symbol3[1187] = 'b00000000;
    ram_symbol0[1188] = 'b00000000;
    ram_symbol1[1188] = 'b00000000;
    ram_symbol2[1188] = 'b00000000;
    ram_symbol3[1188] = 'b00000000;
    ram_symbol0[1189] = 'b00000000;
    ram_symbol1[1189] = 'b00000000;
    ram_symbol2[1189] = 'b00000000;
    ram_symbol3[1189] = 'b00000000;
    ram_symbol0[1190] = 'b00000000;
    ram_symbol1[1190] = 'b00000000;
    ram_symbol2[1190] = 'b00000000;
    ram_symbol3[1190] = 'b00000000;
    ram_symbol0[1191] = 'b00000000;
    ram_symbol1[1191] = 'b00000000;
    ram_symbol2[1191] = 'b00000000;
    ram_symbol3[1191] = 'b00000000;
    ram_symbol0[1192] = 'b00000000;
    ram_symbol1[1192] = 'b00000000;
    ram_symbol2[1192] = 'b00000000;
    ram_symbol3[1192] = 'b00000000;
    ram_symbol0[1193] = 'b00000000;
    ram_symbol1[1193] = 'b00000000;
    ram_symbol2[1193] = 'b00000000;
    ram_symbol3[1193] = 'b00000000;
    ram_symbol0[1194] = 'b00000000;
    ram_symbol1[1194] = 'b00000000;
    ram_symbol2[1194] = 'b00000000;
    ram_symbol3[1194] = 'b00000000;
    ram_symbol0[1195] = 'b00000000;
    ram_symbol1[1195] = 'b00000000;
    ram_symbol2[1195] = 'b00000000;
    ram_symbol3[1195] = 'b00000000;
    ram_symbol0[1196] = 'b00000000;
    ram_symbol1[1196] = 'b00000000;
    ram_symbol2[1196] = 'b00000000;
    ram_symbol3[1196] = 'b00000000;
    ram_symbol0[1197] = 'b00000000;
    ram_symbol1[1197] = 'b00000000;
    ram_symbol2[1197] = 'b00000000;
    ram_symbol3[1197] = 'b00000000;
    ram_symbol0[1198] = 'b00000000;
    ram_symbol1[1198] = 'b00000000;
    ram_symbol2[1198] = 'b00000000;
    ram_symbol3[1198] = 'b00000000;
    ram_symbol0[1199] = 'b00000000;
    ram_symbol1[1199] = 'b00000000;
    ram_symbol2[1199] = 'b00000000;
    ram_symbol3[1199] = 'b00000000;
    ram_symbol0[1200] = 'b00000000;
    ram_symbol1[1200] = 'b00000000;
    ram_symbol2[1200] = 'b00000000;
    ram_symbol3[1200] = 'b00000000;
    ram_symbol0[1201] = 'b00000000;
    ram_symbol1[1201] = 'b00000000;
    ram_symbol2[1201] = 'b00000000;
    ram_symbol3[1201] = 'b00000000;
    ram_symbol0[1202] = 'b00000000;
    ram_symbol1[1202] = 'b00000000;
    ram_symbol2[1202] = 'b00000000;
    ram_symbol3[1202] = 'b00000000;
    ram_symbol0[1203] = 'b00000000;
    ram_symbol1[1203] = 'b00000000;
    ram_symbol2[1203] = 'b00000000;
    ram_symbol3[1203] = 'b00000000;
    ram_symbol0[1204] = 'b00000000;
    ram_symbol1[1204] = 'b00000000;
    ram_symbol2[1204] = 'b00000000;
    ram_symbol3[1204] = 'b00000000;
    ram_symbol0[1205] = 'b00000000;
    ram_symbol1[1205] = 'b00000000;
    ram_symbol2[1205] = 'b00000000;
    ram_symbol3[1205] = 'b00000000;
    ram_symbol0[1206] = 'b00000000;
    ram_symbol1[1206] = 'b00000000;
    ram_symbol2[1206] = 'b00000000;
    ram_symbol3[1206] = 'b00000000;
    ram_symbol0[1207] = 'b00000000;
    ram_symbol1[1207] = 'b00000000;
    ram_symbol2[1207] = 'b00000000;
    ram_symbol3[1207] = 'b00000000;
    ram_symbol0[1208] = 'b00000000;
    ram_symbol1[1208] = 'b00000000;
    ram_symbol2[1208] = 'b00000000;
    ram_symbol3[1208] = 'b00000000;
    ram_symbol0[1209] = 'b00000000;
    ram_symbol1[1209] = 'b00000000;
    ram_symbol2[1209] = 'b00000000;
    ram_symbol3[1209] = 'b00000000;
    ram_symbol0[1210] = 'b00000000;
    ram_symbol1[1210] = 'b00000000;
    ram_symbol2[1210] = 'b00000000;
    ram_symbol3[1210] = 'b00000000;
    ram_symbol0[1211] = 'b00000000;
    ram_symbol1[1211] = 'b00000000;
    ram_symbol2[1211] = 'b00000000;
    ram_symbol3[1211] = 'b00000000;
    ram_symbol0[1212] = 'b00000000;
    ram_symbol1[1212] = 'b00000000;
    ram_symbol2[1212] = 'b00000000;
    ram_symbol3[1212] = 'b00000000;
    ram_symbol0[1213] = 'b00000000;
    ram_symbol1[1213] = 'b00000000;
    ram_symbol2[1213] = 'b00000000;
    ram_symbol3[1213] = 'b00000000;
    ram_symbol0[1214] = 'b00000000;
    ram_symbol1[1214] = 'b00000000;
    ram_symbol2[1214] = 'b00000000;
    ram_symbol3[1214] = 'b00000000;
    ram_symbol0[1215] = 'b00000000;
    ram_symbol1[1215] = 'b00000000;
    ram_symbol2[1215] = 'b00000000;
    ram_symbol3[1215] = 'b00000000;
    ram_symbol0[1216] = 'b00000000;
    ram_symbol1[1216] = 'b00000000;
    ram_symbol2[1216] = 'b00000000;
    ram_symbol3[1216] = 'b00000000;
    ram_symbol0[1217] = 'b00000000;
    ram_symbol1[1217] = 'b00000000;
    ram_symbol2[1217] = 'b00000000;
    ram_symbol3[1217] = 'b00000000;
    ram_symbol0[1218] = 'b00000000;
    ram_symbol1[1218] = 'b00000000;
    ram_symbol2[1218] = 'b00000000;
    ram_symbol3[1218] = 'b00000000;
    ram_symbol0[1219] = 'b00000000;
    ram_symbol1[1219] = 'b00000000;
    ram_symbol2[1219] = 'b00000000;
    ram_symbol3[1219] = 'b00000000;
    ram_symbol0[1220] = 'b00000000;
    ram_symbol1[1220] = 'b00000000;
    ram_symbol2[1220] = 'b00000000;
    ram_symbol3[1220] = 'b00000000;
    ram_symbol0[1221] = 'b00000000;
    ram_symbol1[1221] = 'b00000000;
    ram_symbol2[1221] = 'b00000000;
    ram_symbol3[1221] = 'b00000000;
    ram_symbol0[1222] = 'b00000000;
    ram_symbol1[1222] = 'b00000000;
    ram_symbol2[1222] = 'b00000000;
    ram_symbol3[1222] = 'b00000000;
    ram_symbol0[1223] = 'b00000000;
    ram_symbol1[1223] = 'b00000000;
    ram_symbol2[1223] = 'b00000000;
    ram_symbol3[1223] = 'b00000000;
    ram_symbol0[1224] = 'b00000000;
    ram_symbol1[1224] = 'b00000000;
    ram_symbol2[1224] = 'b00000000;
    ram_symbol3[1224] = 'b00000000;
    ram_symbol0[1225] = 'b00000000;
    ram_symbol1[1225] = 'b00000000;
    ram_symbol2[1225] = 'b00000000;
    ram_symbol3[1225] = 'b00000000;
    ram_symbol0[1226] = 'b00000000;
    ram_symbol1[1226] = 'b00000000;
    ram_symbol2[1226] = 'b00000000;
    ram_symbol3[1226] = 'b00000000;
    ram_symbol0[1227] = 'b00000000;
    ram_symbol1[1227] = 'b00000000;
    ram_symbol2[1227] = 'b00000000;
    ram_symbol3[1227] = 'b00000000;
    ram_symbol0[1228] = 'b00000000;
    ram_symbol1[1228] = 'b00000000;
    ram_symbol2[1228] = 'b00000000;
    ram_symbol3[1228] = 'b00000000;
    ram_symbol0[1229] = 'b00000000;
    ram_symbol1[1229] = 'b00000000;
    ram_symbol2[1229] = 'b00000000;
    ram_symbol3[1229] = 'b00000000;
    ram_symbol0[1230] = 'b00000000;
    ram_symbol1[1230] = 'b00000000;
    ram_symbol2[1230] = 'b00000000;
    ram_symbol3[1230] = 'b00000000;
    ram_symbol0[1231] = 'b00000000;
    ram_symbol1[1231] = 'b00000000;
    ram_symbol2[1231] = 'b00000000;
    ram_symbol3[1231] = 'b00000000;
    ram_symbol0[1232] = 'b00000000;
    ram_symbol1[1232] = 'b00000000;
    ram_symbol2[1232] = 'b00000000;
    ram_symbol3[1232] = 'b00000000;
    ram_symbol0[1233] = 'b00000000;
    ram_symbol1[1233] = 'b00000000;
    ram_symbol2[1233] = 'b00000000;
    ram_symbol3[1233] = 'b00000000;
    ram_symbol0[1234] = 'b00000000;
    ram_symbol1[1234] = 'b00000000;
    ram_symbol2[1234] = 'b00000000;
    ram_symbol3[1234] = 'b00000000;
    ram_symbol0[1235] = 'b00000000;
    ram_symbol1[1235] = 'b00000000;
    ram_symbol2[1235] = 'b00000000;
    ram_symbol3[1235] = 'b00000000;
    ram_symbol0[1236] = 'b00000000;
    ram_symbol1[1236] = 'b00000000;
    ram_symbol2[1236] = 'b00000000;
    ram_symbol3[1236] = 'b00000000;
    ram_symbol0[1237] = 'b00000000;
    ram_symbol1[1237] = 'b00000000;
    ram_symbol2[1237] = 'b00000000;
    ram_symbol3[1237] = 'b00000000;
    ram_symbol0[1238] = 'b00000000;
    ram_symbol1[1238] = 'b00000000;
    ram_symbol2[1238] = 'b00000000;
    ram_symbol3[1238] = 'b00000000;
    ram_symbol0[1239] = 'b00000000;
    ram_symbol1[1239] = 'b00000000;
    ram_symbol2[1239] = 'b00000000;
    ram_symbol3[1239] = 'b00000000;
    ram_symbol0[1240] = 'b00000000;
    ram_symbol1[1240] = 'b00000000;
    ram_symbol2[1240] = 'b00000000;
    ram_symbol3[1240] = 'b00000000;
    ram_symbol0[1241] = 'b00000000;
    ram_symbol1[1241] = 'b00000000;
    ram_symbol2[1241] = 'b00000000;
    ram_symbol3[1241] = 'b00000000;
    ram_symbol0[1242] = 'b00000000;
    ram_symbol1[1242] = 'b00000000;
    ram_symbol2[1242] = 'b00000000;
    ram_symbol3[1242] = 'b00000000;
    ram_symbol0[1243] = 'b00000000;
    ram_symbol1[1243] = 'b00000000;
    ram_symbol2[1243] = 'b00000000;
    ram_symbol3[1243] = 'b00000000;
    ram_symbol0[1244] = 'b00000000;
    ram_symbol1[1244] = 'b00000000;
    ram_symbol2[1244] = 'b00000000;
    ram_symbol3[1244] = 'b00000000;
    ram_symbol0[1245] = 'b00000000;
    ram_symbol1[1245] = 'b00000000;
    ram_symbol2[1245] = 'b00000000;
    ram_symbol3[1245] = 'b00000000;
    ram_symbol0[1246] = 'b00000000;
    ram_symbol1[1246] = 'b00000000;
    ram_symbol2[1246] = 'b00000000;
    ram_symbol3[1246] = 'b00000000;
    ram_symbol0[1247] = 'b00000000;
    ram_symbol1[1247] = 'b00000000;
    ram_symbol2[1247] = 'b00000000;
    ram_symbol3[1247] = 'b00000000;
    ram_symbol0[1248] = 'b00000000;
    ram_symbol1[1248] = 'b00000000;
    ram_symbol2[1248] = 'b00000000;
    ram_symbol3[1248] = 'b00000000;
    ram_symbol0[1249] = 'b00000000;
    ram_symbol1[1249] = 'b00000000;
    ram_symbol2[1249] = 'b00000000;
    ram_symbol3[1249] = 'b00000000;
    ram_symbol0[1250] = 'b00000000;
    ram_symbol1[1250] = 'b00000000;
    ram_symbol2[1250] = 'b00000000;
    ram_symbol3[1250] = 'b00000000;
    ram_symbol0[1251] = 'b00000000;
    ram_symbol1[1251] = 'b00000000;
    ram_symbol2[1251] = 'b00000000;
    ram_symbol3[1251] = 'b00000000;
    ram_symbol0[1252] = 'b00000000;
    ram_symbol1[1252] = 'b00000000;
    ram_symbol2[1252] = 'b00000000;
    ram_symbol3[1252] = 'b00000000;
    ram_symbol0[1253] = 'b00000000;
    ram_symbol1[1253] = 'b00000000;
    ram_symbol2[1253] = 'b00000000;
    ram_symbol3[1253] = 'b00000000;
    ram_symbol0[1254] = 'b00000000;
    ram_symbol1[1254] = 'b00000000;
    ram_symbol2[1254] = 'b00000000;
    ram_symbol3[1254] = 'b00000000;
    ram_symbol0[1255] = 'b00000000;
    ram_symbol1[1255] = 'b00000000;
    ram_symbol2[1255] = 'b00000000;
    ram_symbol3[1255] = 'b00000000;
    ram_symbol0[1256] = 'b00000000;
    ram_symbol1[1256] = 'b00000000;
    ram_symbol2[1256] = 'b00000000;
    ram_symbol3[1256] = 'b00000000;
    ram_symbol0[1257] = 'b00000000;
    ram_symbol1[1257] = 'b00000000;
    ram_symbol2[1257] = 'b00000000;
    ram_symbol3[1257] = 'b00000000;
    ram_symbol0[1258] = 'b00000000;
    ram_symbol1[1258] = 'b00000000;
    ram_symbol2[1258] = 'b00000000;
    ram_symbol3[1258] = 'b00000000;
    ram_symbol0[1259] = 'b00000000;
    ram_symbol1[1259] = 'b00000000;
    ram_symbol2[1259] = 'b00000000;
    ram_symbol3[1259] = 'b00000000;
    ram_symbol0[1260] = 'b00000000;
    ram_symbol1[1260] = 'b00000000;
    ram_symbol2[1260] = 'b00000000;
    ram_symbol3[1260] = 'b00000000;
    ram_symbol0[1261] = 'b00000000;
    ram_symbol1[1261] = 'b00000000;
    ram_symbol2[1261] = 'b00000000;
    ram_symbol3[1261] = 'b00000000;
    ram_symbol0[1262] = 'b00000000;
    ram_symbol1[1262] = 'b00000000;
    ram_symbol2[1262] = 'b00000000;
    ram_symbol3[1262] = 'b00000000;
    ram_symbol0[1263] = 'b00000000;
    ram_symbol1[1263] = 'b00000000;
    ram_symbol2[1263] = 'b00000000;
    ram_symbol3[1263] = 'b00000000;
    ram_symbol0[1264] = 'b00000000;
    ram_symbol1[1264] = 'b00000000;
    ram_symbol2[1264] = 'b00000000;
    ram_symbol3[1264] = 'b00000000;
    ram_symbol0[1265] = 'b00000000;
    ram_symbol1[1265] = 'b00000000;
    ram_symbol2[1265] = 'b00000000;
    ram_symbol3[1265] = 'b00000000;
    ram_symbol0[1266] = 'b00000000;
    ram_symbol1[1266] = 'b00000000;
    ram_symbol2[1266] = 'b00000000;
    ram_symbol3[1266] = 'b00000000;
    ram_symbol0[1267] = 'b00000000;
    ram_symbol1[1267] = 'b00000000;
    ram_symbol2[1267] = 'b00000000;
    ram_symbol3[1267] = 'b00000000;
    ram_symbol0[1268] = 'b00000000;
    ram_symbol1[1268] = 'b00000000;
    ram_symbol2[1268] = 'b00000000;
    ram_symbol3[1268] = 'b00000000;
    ram_symbol0[1269] = 'b00000000;
    ram_symbol1[1269] = 'b00000000;
    ram_symbol2[1269] = 'b00000000;
    ram_symbol3[1269] = 'b00000000;
    ram_symbol0[1270] = 'b00000000;
    ram_symbol1[1270] = 'b00000000;
    ram_symbol2[1270] = 'b00000000;
    ram_symbol3[1270] = 'b00000000;
    ram_symbol0[1271] = 'b00000000;
    ram_symbol1[1271] = 'b00000000;
    ram_symbol2[1271] = 'b00000000;
    ram_symbol3[1271] = 'b00000000;
    ram_symbol0[1272] = 'b00000000;
    ram_symbol1[1272] = 'b00000000;
    ram_symbol2[1272] = 'b00000000;
    ram_symbol3[1272] = 'b00000000;
    ram_symbol0[1273] = 'b00000000;
    ram_symbol1[1273] = 'b00000000;
    ram_symbol2[1273] = 'b00000000;
    ram_symbol3[1273] = 'b00000000;
    ram_symbol0[1274] = 'b00000000;
    ram_symbol1[1274] = 'b00000000;
    ram_symbol2[1274] = 'b00000000;
    ram_symbol3[1274] = 'b00000000;
    ram_symbol0[1275] = 'b00000000;
    ram_symbol1[1275] = 'b00000000;
    ram_symbol2[1275] = 'b00000000;
    ram_symbol3[1275] = 'b00000000;
    ram_symbol0[1276] = 'b00000000;
    ram_symbol1[1276] = 'b00000000;
    ram_symbol2[1276] = 'b00000000;
    ram_symbol3[1276] = 'b00000000;
    ram_symbol0[1277] = 'b00000000;
    ram_symbol1[1277] = 'b00000000;
    ram_symbol2[1277] = 'b00000000;
    ram_symbol3[1277] = 'b00000000;
    ram_symbol0[1278] = 'b00000000;
    ram_symbol1[1278] = 'b00000000;
    ram_symbol2[1278] = 'b00000000;
    ram_symbol3[1278] = 'b00000000;
    ram_symbol0[1279] = 'b00000000;
    ram_symbol1[1279] = 'b00000000;
    ram_symbol2[1279] = 'b00000000;
    ram_symbol3[1279] = 'b00000000;
    ram_symbol0[1280] = 'b00000000;
    ram_symbol1[1280] = 'b00000000;
    ram_symbol2[1280] = 'b00000000;
    ram_symbol3[1280] = 'b00000000;
    ram_symbol0[1281] = 'b00000000;
    ram_symbol1[1281] = 'b00000000;
    ram_symbol2[1281] = 'b00000000;
    ram_symbol3[1281] = 'b00000000;
    ram_symbol0[1282] = 'b00000000;
    ram_symbol1[1282] = 'b00000000;
    ram_symbol2[1282] = 'b00000000;
    ram_symbol3[1282] = 'b00000000;
    ram_symbol0[1283] = 'b00000000;
    ram_symbol1[1283] = 'b00000000;
    ram_symbol2[1283] = 'b00000000;
    ram_symbol3[1283] = 'b00000000;
    ram_symbol0[1284] = 'b00000000;
    ram_symbol1[1284] = 'b00000000;
    ram_symbol2[1284] = 'b00000000;
    ram_symbol3[1284] = 'b00000000;
    ram_symbol0[1285] = 'b00000000;
    ram_symbol1[1285] = 'b00000000;
    ram_symbol2[1285] = 'b00000000;
    ram_symbol3[1285] = 'b00000000;
    ram_symbol0[1286] = 'b00000000;
    ram_symbol1[1286] = 'b00000000;
    ram_symbol2[1286] = 'b00000000;
    ram_symbol3[1286] = 'b00000000;
    ram_symbol0[1287] = 'b00000000;
    ram_symbol1[1287] = 'b00000000;
    ram_symbol2[1287] = 'b00000000;
    ram_symbol3[1287] = 'b00000000;
    ram_symbol0[1288] = 'b00000000;
    ram_symbol1[1288] = 'b00000000;
    ram_symbol2[1288] = 'b00000000;
    ram_symbol3[1288] = 'b00000000;
    ram_symbol0[1289] = 'b00000000;
    ram_symbol1[1289] = 'b00000000;
    ram_symbol2[1289] = 'b00000000;
    ram_symbol3[1289] = 'b00000000;
    ram_symbol0[1290] = 'b00000000;
    ram_symbol1[1290] = 'b00000000;
    ram_symbol2[1290] = 'b00000000;
    ram_symbol3[1290] = 'b00000000;
    ram_symbol0[1291] = 'b00000000;
    ram_symbol1[1291] = 'b00000000;
    ram_symbol2[1291] = 'b00000000;
    ram_symbol3[1291] = 'b00000000;
    ram_symbol0[1292] = 'b00000000;
    ram_symbol1[1292] = 'b00000000;
    ram_symbol2[1292] = 'b00000000;
    ram_symbol3[1292] = 'b00000000;
    ram_symbol0[1293] = 'b00000000;
    ram_symbol1[1293] = 'b00000000;
    ram_symbol2[1293] = 'b00000000;
    ram_symbol3[1293] = 'b00000000;
    ram_symbol0[1294] = 'b00000000;
    ram_symbol1[1294] = 'b00000000;
    ram_symbol2[1294] = 'b00000000;
    ram_symbol3[1294] = 'b00000000;
    ram_symbol0[1295] = 'b00000000;
    ram_symbol1[1295] = 'b00000000;
    ram_symbol2[1295] = 'b00000000;
    ram_symbol3[1295] = 'b00000000;
    ram_symbol0[1296] = 'b00000000;
    ram_symbol1[1296] = 'b00000000;
    ram_symbol2[1296] = 'b00000000;
    ram_symbol3[1296] = 'b00000000;
    ram_symbol0[1297] = 'b00000000;
    ram_symbol1[1297] = 'b00000000;
    ram_symbol2[1297] = 'b00000000;
    ram_symbol3[1297] = 'b00000000;
    ram_symbol0[1298] = 'b00000000;
    ram_symbol1[1298] = 'b00000000;
    ram_symbol2[1298] = 'b00000000;
    ram_symbol3[1298] = 'b00000000;
    ram_symbol0[1299] = 'b00000000;
    ram_symbol1[1299] = 'b00000000;
    ram_symbol2[1299] = 'b00000000;
    ram_symbol3[1299] = 'b00000000;
    ram_symbol0[1300] = 'b00000000;
    ram_symbol1[1300] = 'b00000000;
    ram_symbol2[1300] = 'b00000000;
    ram_symbol3[1300] = 'b00000000;
    ram_symbol0[1301] = 'b00000000;
    ram_symbol1[1301] = 'b00000000;
    ram_symbol2[1301] = 'b00000000;
    ram_symbol3[1301] = 'b00000000;
    ram_symbol0[1302] = 'b00000000;
    ram_symbol1[1302] = 'b00000000;
    ram_symbol2[1302] = 'b00000000;
    ram_symbol3[1302] = 'b00000000;
    ram_symbol0[1303] = 'b00000000;
    ram_symbol1[1303] = 'b00000000;
    ram_symbol2[1303] = 'b00000000;
    ram_symbol3[1303] = 'b00000000;
    ram_symbol0[1304] = 'b00000000;
    ram_symbol1[1304] = 'b00000000;
    ram_symbol2[1304] = 'b00000000;
    ram_symbol3[1304] = 'b00000000;
    ram_symbol0[1305] = 'b00000000;
    ram_symbol1[1305] = 'b00000000;
    ram_symbol2[1305] = 'b00000000;
    ram_symbol3[1305] = 'b00000000;
    ram_symbol0[1306] = 'b00000000;
    ram_symbol1[1306] = 'b00000000;
    ram_symbol2[1306] = 'b00000000;
    ram_symbol3[1306] = 'b00000000;
    ram_symbol0[1307] = 'b00000000;
    ram_symbol1[1307] = 'b00000000;
    ram_symbol2[1307] = 'b00000000;
    ram_symbol3[1307] = 'b00000000;
    ram_symbol0[1308] = 'b00000000;
    ram_symbol1[1308] = 'b00000000;
    ram_symbol2[1308] = 'b00000000;
    ram_symbol3[1308] = 'b00000000;
    ram_symbol0[1309] = 'b00000000;
    ram_symbol1[1309] = 'b00000000;
    ram_symbol2[1309] = 'b00000000;
    ram_symbol3[1309] = 'b00000000;
    ram_symbol0[1310] = 'b00000000;
    ram_symbol1[1310] = 'b00000000;
    ram_symbol2[1310] = 'b00000000;
    ram_symbol3[1310] = 'b00000000;
    ram_symbol0[1311] = 'b00000000;
    ram_symbol1[1311] = 'b00000000;
    ram_symbol2[1311] = 'b00000000;
    ram_symbol3[1311] = 'b00000000;
    ram_symbol0[1312] = 'b00000000;
    ram_symbol1[1312] = 'b00000000;
    ram_symbol2[1312] = 'b00000000;
    ram_symbol3[1312] = 'b00000000;
    ram_symbol0[1313] = 'b00000000;
    ram_symbol1[1313] = 'b00000000;
    ram_symbol2[1313] = 'b00000000;
    ram_symbol3[1313] = 'b00000000;
    ram_symbol0[1314] = 'b00000000;
    ram_symbol1[1314] = 'b00000000;
    ram_symbol2[1314] = 'b00000000;
    ram_symbol3[1314] = 'b00000000;
    ram_symbol0[1315] = 'b00000000;
    ram_symbol1[1315] = 'b00000000;
    ram_symbol2[1315] = 'b00000000;
    ram_symbol3[1315] = 'b00000000;
    ram_symbol0[1316] = 'b00000000;
    ram_symbol1[1316] = 'b00000000;
    ram_symbol2[1316] = 'b00000000;
    ram_symbol3[1316] = 'b00000000;
    ram_symbol0[1317] = 'b00000000;
    ram_symbol1[1317] = 'b00000000;
    ram_symbol2[1317] = 'b00000000;
    ram_symbol3[1317] = 'b00000000;
    ram_symbol0[1318] = 'b00000000;
    ram_symbol1[1318] = 'b00000000;
    ram_symbol2[1318] = 'b00000000;
    ram_symbol3[1318] = 'b00000000;
    ram_symbol0[1319] = 'b00000000;
    ram_symbol1[1319] = 'b00000000;
    ram_symbol2[1319] = 'b00000000;
    ram_symbol3[1319] = 'b00000000;
    ram_symbol0[1320] = 'b00000000;
    ram_symbol1[1320] = 'b00000000;
    ram_symbol2[1320] = 'b00000000;
    ram_symbol3[1320] = 'b00000000;
    ram_symbol0[1321] = 'b00000000;
    ram_symbol1[1321] = 'b00000000;
    ram_symbol2[1321] = 'b00000000;
    ram_symbol3[1321] = 'b00000000;
    ram_symbol0[1322] = 'b00000000;
    ram_symbol1[1322] = 'b00000000;
    ram_symbol2[1322] = 'b00000000;
    ram_symbol3[1322] = 'b00000000;
    ram_symbol0[1323] = 'b00000000;
    ram_symbol1[1323] = 'b00000000;
    ram_symbol2[1323] = 'b00000000;
    ram_symbol3[1323] = 'b00000000;
    ram_symbol0[1324] = 'b00000000;
    ram_symbol1[1324] = 'b00000000;
    ram_symbol2[1324] = 'b00000000;
    ram_symbol3[1324] = 'b00000000;
    ram_symbol0[1325] = 'b00000000;
    ram_symbol1[1325] = 'b00000000;
    ram_symbol2[1325] = 'b00000000;
    ram_symbol3[1325] = 'b00000000;
    ram_symbol0[1326] = 'b00000000;
    ram_symbol1[1326] = 'b00000000;
    ram_symbol2[1326] = 'b00000000;
    ram_symbol3[1326] = 'b00000000;
    ram_symbol0[1327] = 'b00000000;
    ram_symbol1[1327] = 'b00000000;
    ram_symbol2[1327] = 'b00000000;
    ram_symbol3[1327] = 'b00000000;
    ram_symbol0[1328] = 'b00000000;
    ram_symbol1[1328] = 'b00000000;
    ram_symbol2[1328] = 'b00000000;
    ram_symbol3[1328] = 'b00000000;
    ram_symbol0[1329] = 'b00000000;
    ram_symbol1[1329] = 'b00000000;
    ram_symbol2[1329] = 'b00000000;
    ram_symbol3[1329] = 'b00000000;
    ram_symbol0[1330] = 'b00000000;
    ram_symbol1[1330] = 'b00000000;
    ram_symbol2[1330] = 'b00000000;
    ram_symbol3[1330] = 'b00000000;
    ram_symbol0[1331] = 'b00000000;
    ram_symbol1[1331] = 'b00000000;
    ram_symbol2[1331] = 'b00000000;
    ram_symbol3[1331] = 'b00000000;
    ram_symbol0[1332] = 'b00000000;
    ram_symbol1[1332] = 'b00000000;
    ram_symbol2[1332] = 'b00000000;
    ram_symbol3[1332] = 'b00000000;
    ram_symbol0[1333] = 'b00000000;
    ram_symbol1[1333] = 'b00000000;
    ram_symbol2[1333] = 'b00000000;
    ram_symbol3[1333] = 'b00000000;
    ram_symbol0[1334] = 'b00000000;
    ram_symbol1[1334] = 'b00000000;
    ram_symbol2[1334] = 'b00000000;
    ram_symbol3[1334] = 'b00000000;
    ram_symbol0[1335] = 'b00000000;
    ram_symbol1[1335] = 'b00000000;
    ram_symbol2[1335] = 'b00000000;
    ram_symbol3[1335] = 'b00000000;
    ram_symbol0[1336] = 'b00000000;
    ram_symbol1[1336] = 'b00000000;
    ram_symbol2[1336] = 'b00000000;
    ram_symbol3[1336] = 'b00000000;
    ram_symbol0[1337] = 'b00000000;
    ram_symbol1[1337] = 'b00000000;
    ram_symbol2[1337] = 'b00000000;
    ram_symbol3[1337] = 'b00000000;
    ram_symbol0[1338] = 'b00000000;
    ram_symbol1[1338] = 'b00000000;
    ram_symbol2[1338] = 'b00000000;
    ram_symbol3[1338] = 'b00000000;
    ram_symbol0[1339] = 'b00000000;
    ram_symbol1[1339] = 'b00000000;
    ram_symbol2[1339] = 'b00000000;
    ram_symbol3[1339] = 'b00000000;
    ram_symbol0[1340] = 'b00000000;
    ram_symbol1[1340] = 'b00000000;
    ram_symbol2[1340] = 'b00000000;
    ram_symbol3[1340] = 'b00000000;
    ram_symbol0[1341] = 'b00000000;
    ram_symbol1[1341] = 'b00000000;
    ram_symbol2[1341] = 'b00000000;
    ram_symbol3[1341] = 'b00000000;
    ram_symbol0[1342] = 'b00000000;
    ram_symbol1[1342] = 'b00000000;
    ram_symbol2[1342] = 'b00000000;
    ram_symbol3[1342] = 'b00000000;
    ram_symbol0[1343] = 'b00000000;
    ram_symbol1[1343] = 'b00000000;
    ram_symbol2[1343] = 'b00000000;
    ram_symbol3[1343] = 'b00000000;
    ram_symbol0[1344] = 'b00000000;
    ram_symbol1[1344] = 'b00000000;
    ram_symbol2[1344] = 'b00000000;
    ram_symbol3[1344] = 'b00000000;
    ram_symbol0[1345] = 'b00000000;
    ram_symbol1[1345] = 'b00000000;
    ram_symbol2[1345] = 'b00000000;
    ram_symbol3[1345] = 'b00000000;
    ram_symbol0[1346] = 'b00000000;
    ram_symbol1[1346] = 'b00000000;
    ram_symbol2[1346] = 'b00000000;
    ram_symbol3[1346] = 'b00000000;
    ram_symbol0[1347] = 'b00000000;
    ram_symbol1[1347] = 'b00000000;
    ram_symbol2[1347] = 'b00000000;
    ram_symbol3[1347] = 'b00000000;
    ram_symbol0[1348] = 'b00000000;
    ram_symbol1[1348] = 'b00000000;
    ram_symbol2[1348] = 'b00000000;
    ram_symbol3[1348] = 'b00000000;
    ram_symbol0[1349] = 'b00000000;
    ram_symbol1[1349] = 'b00000000;
    ram_symbol2[1349] = 'b00000000;
    ram_symbol3[1349] = 'b00000000;
    ram_symbol0[1350] = 'b00000000;
    ram_symbol1[1350] = 'b00000000;
    ram_symbol2[1350] = 'b00000000;
    ram_symbol3[1350] = 'b00000000;
    ram_symbol0[1351] = 'b00000000;
    ram_symbol1[1351] = 'b00000000;
    ram_symbol2[1351] = 'b00000000;
    ram_symbol3[1351] = 'b00000000;
    ram_symbol0[1352] = 'b00000000;
    ram_symbol1[1352] = 'b00000000;
    ram_symbol2[1352] = 'b00000000;
    ram_symbol3[1352] = 'b00000000;
    ram_symbol0[1353] = 'b00000000;
    ram_symbol1[1353] = 'b00000000;
    ram_symbol2[1353] = 'b00000000;
    ram_symbol3[1353] = 'b00000000;
    ram_symbol0[1354] = 'b00000000;
    ram_symbol1[1354] = 'b00000000;
    ram_symbol2[1354] = 'b00000000;
    ram_symbol3[1354] = 'b00000000;
    ram_symbol0[1355] = 'b00000000;
    ram_symbol1[1355] = 'b00000000;
    ram_symbol2[1355] = 'b00000000;
    ram_symbol3[1355] = 'b00000000;
    ram_symbol0[1356] = 'b00000000;
    ram_symbol1[1356] = 'b00000000;
    ram_symbol2[1356] = 'b00000000;
    ram_symbol3[1356] = 'b00000000;
    ram_symbol0[1357] = 'b00000000;
    ram_symbol1[1357] = 'b00000000;
    ram_symbol2[1357] = 'b00000000;
    ram_symbol3[1357] = 'b00000000;
    ram_symbol0[1358] = 'b00000000;
    ram_symbol1[1358] = 'b00000000;
    ram_symbol2[1358] = 'b00000000;
    ram_symbol3[1358] = 'b00000000;
    ram_symbol0[1359] = 'b00000000;
    ram_symbol1[1359] = 'b00000000;
    ram_symbol2[1359] = 'b00000000;
    ram_symbol3[1359] = 'b00000000;
    ram_symbol0[1360] = 'b00000000;
    ram_symbol1[1360] = 'b00000000;
    ram_symbol2[1360] = 'b00000000;
    ram_symbol3[1360] = 'b00000000;
    ram_symbol0[1361] = 'b00000000;
    ram_symbol1[1361] = 'b00000000;
    ram_symbol2[1361] = 'b00000000;
    ram_symbol3[1361] = 'b00000000;
    ram_symbol0[1362] = 'b00000000;
    ram_symbol1[1362] = 'b00000000;
    ram_symbol2[1362] = 'b00000000;
    ram_symbol3[1362] = 'b00000000;
    ram_symbol0[1363] = 'b00000000;
    ram_symbol1[1363] = 'b00000000;
    ram_symbol2[1363] = 'b00000000;
    ram_symbol3[1363] = 'b00000000;
    ram_symbol0[1364] = 'b00000000;
    ram_symbol1[1364] = 'b00000000;
    ram_symbol2[1364] = 'b00000000;
    ram_symbol3[1364] = 'b00000000;
    ram_symbol0[1365] = 'b00000000;
    ram_symbol1[1365] = 'b00000000;
    ram_symbol2[1365] = 'b00000000;
    ram_symbol3[1365] = 'b00000000;
    ram_symbol0[1366] = 'b00000000;
    ram_symbol1[1366] = 'b00000000;
    ram_symbol2[1366] = 'b00000000;
    ram_symbol3[1366] = 'b00000000;
    ram_symbol0[1367] = 'b00000000;
    ram_symbol1[1367] = 'b00000000;
    ram_symbol2[1367] = 'b00000000;
    ram_symbol3[1367] = 'b00000000;
    ram_symbol0[1368] = 'b00000000;
    ram_symbol1[1368] = 'b00000000;
    ram_symbol2[1368] = 'b00000000;
    ram_symbol3[1368] = 'b00000000;
    ram_symbol0[1369] = 'b00000000;
    ram_symbol1[1369] = 'b00000000;
    ram_symbol2[1369] = 'b00000000;
    ram_symbol3[1369] = 'b00000000;
    ram_symbol0[1370] = 'b00000000;
    ram_symbol1[1370] = 'b00000000;
    ram_symbol2[1370] = 'b00000000;
    ram_symbol3[1370] = 'b00000000;
    ram_symbol0[1371] = 'b00000000;
    ram_symbol1[1371] = 'b00000000;
    ram_symbol2[1371] = 'b00000000;
    ram_symbol3[1371] = 'b00000000;
    ram_symbol0[1372] = 'b00000000;
    ram_symbol1[1372] = 'b00000000;
    ram_symbol2[1372] = 'b00000000;
    ram_symbol3[1372] = 'b00000000;
    ram_symbol0[1373] = 'b00000000;
    ram_symbol1[1373] = 'b00000000;
    ram_symbol2[1373] = 'b00000000;
    ram_symbol3[1373] = 'b00000000;
    ram_symbol0[1374] = 'b00000000;
    ram_symbol1[1374] = 'b00000000;
    ram_symbol2[1374] = 'b00000000;
    ram_symbol3[1374] = 'b00000000;
    ram_symbol0[1375] = 'b00000000;
    ram_symbol1[1375] = 'b00000000;
    ram_symbol2[1375] = 'b00000000;
    ram_symbol3[1375] = 'b00000000;
    ram_symbol0[1376] = 'b00000000;
    ram_symbol1[1376] = 'b00000000;
    ram_symbol2[1376] = 'b00000000;
    ram_symbol3[1376] = 'b00000000;
    ram_symbol0[1377] = 'b00000000;
    ram_symbol1[1377] = 'b00000000;
    ram_symbol2[1377] = 'b00000000;
    ram_symbol3[1377] = 'b00000000;
    ram_symbol0[1378] = 'b00000000;
    ram_symbol1[1378] = 'b00000000;
    ram_symbol2[1378] = 'b00000000;
    ram_symbol3[1378] = 'b00000000;
    ram_symbol0[1379] = 'b00000000;
    ram_symbol1[1379] = 'b00000000;
    ram_symbol2[1379] = 'b00000000;
    ram_symbol3[1379] = 'b00000000;
    ram_symbol0[1380] = 'b00000000;
    ram_symbol1[1380] = 'b00000000;
    ram_symbol2[1380] = 'b00000000;
    ram_symbol3[1380] = 'b00000000;
    ram_symbol0[1381] = 'b00000000;
    ram_symbol1[1381] = 'b00000000;
    ram_symbol2[1381] = 'b00000000;
    ram_symbol3[1381] = 'b00000000;
    ram_symbol0[1382] = 'b00000000;
    ram_symbol1[1382] = 'b00000000;
    ram_symbol2[1382] = 'b00000000;
    ram_symbol3[1382] = 'b00000000;
    ram_symbol0[1383] = 'b00000000;
    ram_symbol1[1383] = 'b00000000;
    ram_symbol2[1383] = 'b00000000;
    ram_symbol3[1383] = 'b00000000;
    ram_symbol0[1384] = 'b00000000;
    ram_symbol1[1384] = 'b00000000;
    ram_symbol2[1384] = 'b00000000;
    ram_symbol3[1384] = 'b00000000;
    ram_symbol0[1385] = 'b00000000;
    ram_symbol1[1385] = 'b00000000;
    ram_symbol2[1385] = 'b00000000;
    ram_symbol3[1385] = 'b00000000;
    ram_symbol0[1386] = 'b00000000;
    ram_symbol1[1386] = 'b00000000;
    ram_symbol2[1386] = 'b00000000;
    ram_symbol3[1386] = 'b00000000;
    ram_symbol0[1387] = 'b00000000;
    ram_symbol1[1387] = 'b00000000;
    ram_symbol2[1387] = 'b00000000;
    ram_symbol3[1387] = 'b00000000;
    ram_symbol0[1388] = 'b00000000;
    ram_symbol1[1388] = 'b00000000;
    ram_symbol2[1388] = 'b00000000;
    ram_symbol3[1388] = 'b00000000;
    ram_symbol0[1389] = 'b00000000;
    ram_symbol1[1389] = 'b00000000;
    ram_symbol2[1389] = 'b00000000;
    ram_symbol3[1389] = 'b00000000;
    ram_symbol0[1390] = 'b00000000;
    ram_symbol1[1390] = 'b00000000;
    ram_symbol2[1390] = 'b00000000;
    ram_symbol3[1390] = 'b00000000;
    ram_symbol0[1391] = 'b00000000;
    ram_symbol1[1391] = 'b00000000;
    ram_symbol2[1391] = 'b00000000;
    ram_symbol3[1391] = 'b00000000;
    ram_symbol0[1392] = 'b00000000;
    ram_symbol1[1392] = 'b00000000;
    ram_symbol2[1392] = 'b00000000;
    ram_symbol3[1392] = 'b00000000;
    ram_symbol0[1393] = 'b00000000;
    ram_symbol1[1393] = 'b00000000;
    ram_symbol2[1393] = 'b00000000;
    ram_symbol3[1393] = 'b00000000;
    ram_symbol0[1394] = 'b00000000;
    ram_symbol1[1394] = 'b00000000;
    ram_symbol2[1394] = 'b00000000;
    ram_symbol3[1394] = 'b00000000;
    ram_symbol0[1395] = 'b00000000;
    ram_symbol1[1395] = 'b00000000;
    ram_symbol2[1395] = 'b00000000;
    ram_symbol3[1395] = 'b00000000;
    ram_symbol0[1396] = 'b00000000;
    ram_symbol1[1396] = 'b00000000;
    ram_symbol2[1396] = 'b00000000;
    ram_symbol3[1396] = 'b00000000;
    ram_symbol0[1397] = 'b00000000;
    ram_symbol1[1397] = 'b00000000;
    ram_symbol2[1397] = 'b00000000;
    ram_symbol3[1397] = 'b00000000;
    ram_symbol0[1398] = 'b00000000;
    ram_symbol1[1398] = 'b00000000;
    ram_symbol2[1398] = 'b00000000;
    ram_symbol3[1398] = 'b00000000;
    ram_symbol0[1399] = 'b00000000;
    ram_symbol1[1399] = 'b00000000;
    ram_symbol2[1399] = 'b00000000;
    ram_symbol3[1399] = 'b00000000;
    ram_symbol0[1400] = 'b00000000;
    ram_symbol1[1400] = 'b00000000;
    ram_symbol2[1400] = 'b00000000;
    ram_symbol3[1400] = 'b00000000;
    ram_symbol0[1401] = 'b00000000;
    ram_symbol1[1401] = 'b00000000;
    ram_symbol2[1401] = 'b00000000;
    ram_symbol3[1401] = 'b00000000;
    ram_symbol0[1402] = 'b00000000;
    ram_symbol1[1402] = 'b00000000;
    ram_symbol2[1402] = 'b00000000;
    ram_symbol3[1402] = 'b00000000;
    ram_symbol0[1403] = 'b00000000;
    ram_symbol1[1403] = 'b00000000;
    ram_symbol2[1403] = 'b00000000;
    ram_symbol3[1403] = 'b00000000;
    ram_symbol0[1404] = 'b00000000;
    ram_symbol1[1404] = 'b00000000;
    ram_symbol2[1404] = 'b00000000;
    ram_symbol3[1404] = 'b00000000;
    ram_symbol0[1405] = 'b00000000;
    ram_symbol1[1405] = 'b00000000;
    ram_symbol2[1405] = 'b00000000;
    ram_symbol3[1405] = 'b00000000;
    ram_symbol0[1406] = 'b00000000;
    ram_symbol1[1406] = 'b00000000;
    ram_symbol2[1406] = 'b00000000;
    ram_symbol3[1406] = 'b00000000;
    ram_symbol0[1407] = 'b00000000;
    ram_symbol1[1407] = 'b00000000;
    ram_symbol2[1407] = 'b00000000;
    ram_symbol3[1407] = 'b00000000;
    ram_symbol0[1408] = 'b00000000;
    ram_symbol1[1408] = 'b00000000;
    ram_symbol2[1408] = 'b00000000;
    ram_symbol3[1408] = 'b00000000;
    ram_symbol0[1409] = 'b00000000;
    ram_symbol1[1409] = 'b00000000;
    ram_symbol2[1409] = 'b00000000;
    ram_symbol3[1409] = 'b00000000;
    ram_symbol0[1410] = 'b00000000;
    ram_symbol1[1410] = 'b00000000;
    ram_symbol2[1410] = 'b00000000;
    ram_symbol3[1410] = 'b00000000;
    ram_symbol0[1411] = 'b00000000;
    ram_symbol1[1411] = 'b00000000;
    ram_symbol2[1411] = 'b00000000;
    ram_symbol3[1411] = 'b00000000;
    ram_symbol0[1412] = 'b00000000;
    ram_symbol1[1412] = 'b00000000;
    ram_symbol2[1412] = 'b00000000;
    ram_symbol3[1412] = 'b00000000;
    ram_symbol0[1413] = 'b00000000;
    ram_symbol1[1413] = 'b00000000;
    ram_symbol2[1413] = 'b00000000;
    ram_symbol3[1413] = 'b00000000;
    ram_symbol0[1414] = 'b00000000;
    ram_symbol1[1414] = 'b00000000;
    ram_symbol2[1414] = 'b00000000;
    ram_symbol3[1414] = 'b00000000;
    ram_symbol0[1415] = 'b00000000;
    ram_symbol1[1415] = 'b00000000;
    ram_symbol2[1415] = 'b00000000;
    ram_symbol3[1415] = 'b00000000;
    ram_symbol0[1416] = 'b00000000;
    ram_symbol1[1416] = 'b00000000;
    ram_symbol2[1416] = 'b00000000;
    ram_symbol3[1416] = 'b00000000;
    ram_symbol0[1417] = 'b00000000;
    ram_symbol1[1417] = 'b00000000;
    ram_symbol2[1417] = 'b00000000;
    ram_symbol3[1417] = 'b00000000;
    ram_symbol0[1418] = 'b00000000;
    ram_symbol1[1418] = 'b00000000;
    ram_symbol2[1418] = 'b00000000;
    ram_symbol3[1418] = 'b00000000;
    ram_symbol0[1419] = 'b00000000;
    ram_symbol1[1419] = 'b00000000;
    ram_symbol2[1419] = 'b00000000;
    ram_symbol3[1419] = 'b00000000;
    ram_symbol0[1420] = 'b00000000;
    ram_symbol1[1420] = 'b00000000;
    ram_symbol2[1420] = 'b00000000;
    ram_symbol3[1420] = 'b00000000;
    ram_symbol0[1421] = 'b00000000;
    ram_symbol1[1421] = 'b00000000;
    ram_symbol2[1421] = 'b00000000;
    ram_symbol3[1421] = 'b00000000;
    ram_symbol0[1422] = 'b00000000;
    ram_symbol1[1422] = 'b00000000;
    ram_symbol2[1422] = 'b00000000;
    ram_symbol3[1422] = 'b00000000;
    ram_symbol0[1423] = 'b00000000;
    ram_symbol1[1423] = 'b00000000;
    ram_symbol2[1423] = 'b00000000;
    ram_symbol3[1423] = 'b00000000;
    ram_symbol0[1424] = 'b00000000;
    ram_symbol1[1424] = 'b00000000;
    ram_symbol2[1424] = 'b00000000;
    ram_symbol3[1424] = 'b00000000;
    ram_symbol0[1425] = 'b00000000;
    ram_symbol1[1425] = 'b00000000;
    ram_symbol2[1425] = 'b00000000;
    ram_symbol3[1425] = 'b00000000;
    ram_symbol0[1426] = 'b00000000;
    ram_symbol1[1426] = 'b00000000;
    ram_symbol2[1426] = 'b00000000;
    ram_symbol3[1426] = 'b00000000;
    ram_symbol0[1427] = 'b00000000;
    ram_symbol1[1427] = 'b00000000;
    ram_symbol2[1427] = 'b00000000;
    ram_symbol3[1427] = 'b00000000;
    ram_symbol0[1428] = 'b00000000;
    ram_symbol1[1428] = 'b00000000;
    ram_symbol2[1428] = 'b00000000;
    ram_symbol3[1428] = 'b00000000;
    ram_symbol0[1429] = 'b00000000;
    ram_symbol1[1429] = 'b00000000;
    ram_symbol2[1429] = 'b00000000;
    ram_symbol3[1429] = 'b00000000;
    ram_symbol0[1430] = 'b00000000;
    ram_symbol1[1430] = 'b00000000;
    ram_symbol2[1430] = 'b00000000;
    ram_symbol3[1430] = 'b00000000;
    ram_symbol0[1431] = 'b00000000;
    ram_symbol1[1431] = 'b00000000;
    ram_symbol2[1431] = 'b00000000;
    ram_symbol3[1431] = 'b00000000;
    ram_symbol0[1432] = 'b00000000;
    ram_symbol1[1432] = 'b00000000;
    ram_symbol2[1432] = 'b00000000;
    ram_symbol3[1432] = 'b00000000;
    ram_symbol0[1433] = 'b00000000;
    ram_symbol1[1433] = 'b00000000;
    ram_symbol2[1433] = 'b00000000;
    ram_symbol3[1433] = 'b00000000;
    ram_symbol0[1434] = 'b00000000;
    ram_symbol1[1434] = 'b00000000;
    ram_symbol2[1434] = 'b00000000;
    ram_symbol3[1434] = 'b00000000;
    ram_symbol0[1435] = 'b00000000;
    ram_symbol1[1435] = 'b00000000;
    ram_symbol2[1435] = 'b00000000;
    ram_symbol3[1435] = 'b00000000;
    ram_symbol0[1436] = 'b00000000;
    ram_symbol1[1436] = 'b00000000;
    ram_symbol2[1436] = 'b00000000;
    ram_symbol3[1436] = 'b00000000;
    ram_symbol0[1437] = 'b00000000;
    ram_symbol1[1437] = 'b00000000;
    ram_symbol2[1437] = 'b00000000;
    ram_symbol3[1437] = 'b00000000;
    ram_symbol0[1438] = 'b00000000;
    ram_symbol1[1438] = 'b00000000;
    ram_symbol2[1438] = 'b00000000;
    ram_symbol3[1438] = 'b00000000;
    ram_symbol0[1439] = 'b00000000;
    ram_symbol1[1439] = 'b00000000;
    ram_symbol2[1439] = 'b00000000;
    ram_symbol3[1439] = 'b00000000;
    ram_symbol0[1440] = 'b00000000;
    ram_symbol1[1440] = 'b00000000;
    ram_symbol2[1440] = 'b00000000;
    ram_symbol3[1440] = 'b00000000;
    ram_symbol0[1441] = 'b00000000;
    ram_symbol1[1441] = 'b00000000;
    ram_symbol2[1441] = 'b00000000;
    ram_symbol3[1441] = 'b00000000;
    ram_symbol0[1442] = 'b00000000;
    ram_symbol1[1442] = 'b00000000;
    ram_symbol2[1442] = 'b00000000;
    ram_symbol3[1442] = 'b00000000;
    ram_symbol0[1443] = 'b00000000;
    ram_symbol1[1443] = 'b00000000;
    ram_symbol2[1443] = 'b00000000;
    ram_symbol3[1443] = 'b00000000;
    ram_symbol0[1444] = 'b00000000;
    ram_symbol1[1444] = 'b00000000;
    ram_symbol2[1444] = 'b00000000;
    ram_symbol3[1444] = 'b00000000;
    ram_symbol0[1445] = 'b00000000;
    ram_symbol1[1445] = 'b00000000;
    ram_symbol2[1445] = 'b00000000;
    ram_symbol3[1445] = 'b00000000;
    ram_symbol0[1446] = 'b00000000;
    ram_symbol1[1446] = 'b00000000;
    ram_symbol2[1446] = 'b00000000;
    ram_symbol3[1446] = 'b00000000;
    ram_symbol0[1447] = 'b00000000;
    ram_symbol1[1447] = 'b00000000;
    ram_symbol2[1447] = 'b00000000;
    ram_symbol3[1447] = 'b00000000;
    ram_symbol0[1448] = 'b00000000;
    ram_symbol1[1448] = 'b00000000;
    ram_symbol2[1448] = 'b00000000;
    ram_symbol3[1448] = 'b00000000;
    ram_symbol0[1449] = 'b00000000;
    ram_symbol1[1449] = 'b00000000;
    ram_symbol2[1449] = 'b00000000;
    ram_symbol3[1449] = 'b00000000;
    ram_symbol0[1450] = 'b00000000;
    ram_symbol1[1450] = 'b00000000;
    ram_symbol2[1450] = 'b00000000;
    ram_symbol3[1450] = 'b00000000;
    ram_symbol0[1451] = 'b00000000;
    ram_symbol1[1451] = 'b00000000;
    ram_symbol2[1451] = 'b00000000;
    ram_symbol3[1451] = 'b00000000;
    ram_symbol0[1452] = 'b00000000;
    ram_symbol1[1452] = 'b00000000;
    ram_symbol2[1452] = 'b00000000;
    ram_symbol3[1452] = 'b00000000;
    ram_symbol0[1453] = 'b00000000;
    ram_symbol1[1453] = 'b00000000;
    ram_symbol2[1453] = 'b00000000;
    ram_symbol3[1453] = 'b00000000;
    ram_symbol0[1454] = 'b00000000;
    ram_symbol1[1454] = 'b00000000;
    ram_symbol2[1454] = 'b00000000;
    ram_symbol3[1454] = 'b00000000;
    ram_symbol0[1455] = 'b00000000;
    ram_symbol1[1455] = 'b00000000;
    ram_symbol2[1455] = 'b00000000;
    ram_symbol3[1455] = 'b00000000;
    ram_symbol0[1456] = 'b00000000;
    ram_symbol1[1456] = 'b00000000;
    ram_symbol2[1456] = 'b00000000;
    ram_symbol3[1456] = 'b00000000;
    ram_symbol0[1457] = 'b00000000;
    ram_symbol1[1457] = 'b00000000;
    ram_symbol2[1457] = 'b00000000;
    ram_symbol3[1457] = 'b00000000;
    ram_symbol0[1458] = 'b00000000;
    ram_symbol1[1458] = 'b00000000;
    ram_symbol2[1458] = 'b00000000;
    ram_symbol3[1458] = 'b00000000;
    ram_symbol0[1459] = 'b00000000;
    ram_symbol1[1459] = 'b00000000;
    ram_symbol2[1459] = 'b00000000;
    ram_symbol3[1459] = 'b00000000;
    ram_symbol0[1460] = 'b00000000;
    ram_symbol1[1460] = 'b00000000;
    ram_symbol2[1460] = 'b00000000;
    ram_symbol3[1460] = 'b00000000;
    ram_symbol0[1461] = 'b00000000;
    ram_symbol1[1461] = 'b00000000;
    ram_symbol2[1461] = 'b00000000;
    ram_symbol3[1461] = 'b00000000;
    ram_symbol0[1462] = 'b00000000;
    ram_symbol1[1462] = 'b00000000;
    ram_symbol2[1462] = 'b00000000;
    ram_symbol3[1462] = 'b00000000;
    ram_symbol0[1463] = 'b00000000;
    ram_symbol1[1463] = 'b00000000;
    ram_symbol2[1463] = 'b00000000;
    ram_symbol3[1463] = 'b00000000;
    ram_symbol0[1464] = 'b00000000;
    ram_symbol1[1464] = 'b00000000;
    ram_symbol2[1464] = 'b00000000;
    ram_symbol3[1464] = 'b00000000;
    ram_symbol0[1465] = 'b00000000;
    ram_symbol1[1465] = 'b00000000;
    ram_symbol2[1465] = 'b00000000;
    ram_symbol3[1465] = 'b00000000;
    ram_symbol0[1466] = 'b00000000;
    ram_symbol1[1466] = 'b00000000;
    ram_symbol2[1466] = 'b00000000;
    ram_symbol3[1466] = 'b00000000;
    ram_symbol0[1467] = 'b00000000;
    ram_symbol1[1467] = 'b00000000;
    ram_symbol2[1467] = 'b00000000;
    ram_symbol3[1467] = 'b00000000;
    ram_symbol0[1468] = 'b00000000;
    ram_symbol1[1468] = 'b00000000;
    ram_symbol2[1468] = 'b00000000;
    ram_symbol3[1468] = 'b00000000;
    ram_symbol0[1469] = 'b00000000;
    ram_symbol1[1469] = 'b00000000;
    ram_symbol2[1469] = 'b00000000;
    ram_symbol3[1469] = 'b00000000;
    ram_symbol0[1470] = 'b00000000;
    ram_symbol1[1470] = 'b00000000;
    ram_symbol2[1470] = 'b00000000;
    ram_symbol3[1470] = 'b00000000;
    ram_symbol0[1471] = 'b00000000;
    ram_symbol1[1471] = 'b00000000;
    ram_symbol2[1471] = 'b00000000;
    ram_symbol3[1471] = 'b00000000;
    ram_symbol0[1472] = 'b00000000;
    ram_symbol1[1472] = 'b00000000;
    ram_symbol2[1472] = 'b00000000;
    ram_symbol3[1472] = 'b00000000;
    ram_symbol0[1473] = 'b00000000;
    ram_symbol1[1473] = 'b00000000;
    ram_symbol2[1473] = 'b00000000;
    ram_symbol3[1473] = 'b00000000;
    ram_symbol0[1474] = 'b00000000;
    ram_symbol1[1474] = 'b00000000;
    ram_symbol2[1474] = 'b00000000;
    ram_symbol3[1474] = 'b00000000;
    ram_symbol0[1475] = 'b00000000;
    ram_symbol1[1475] = 'b00000000;
    ram_symbol2[1475] = 'b00000000;
    ram_symbol3[1475] = 'b00000000;
    ram_symbol0[1476] = 'b00000000;
    ram_symbol1[1476] = 'b00000000;
    ram_symbol2[1476] = 'b00000000;
    ram_symbol3[1476] = 'b00000000;
    ram_symbol0[1477] = 'b00000000;
    ram_symbol1[1477] = 'b00000000;
    ram_symbol2[1477] = 'b00000000;
    ram_symbol3[1477] = 'b00000000;
    ram_symbol0[1478] = 'b00000000;
    ram_symbol1[1478] = 'b00000000;
    ram_symbol2[1478] = 'b00000000;
    ram_symbol3[1478] = 'b00000000;
    ram_symbol0[1479] = 'b00000000;
    ram_symbol1[1479] = 'b00000000;
    ram_symbol2[1479] = 'b00000000;
    ram_symbol3[1479] = 'b00000000;
    ram_symbol0[1480] = 'b00000000;
    ram_symbol1[1480] = 'b00000000;
    ram_symbol2[1480] = 'b00000000;
    ram_symbol3[1480] = 'b00000000;
    ram_symbol0[1481] = 'b00000000;
    ram_symbol1[1481] = 'b00000000;
    ram_symbol2[1481] = 'b00000000;
    ram_symbol3[1481] = 'b00000000;
    ram_symbol0[1482] = 'b00000000;
    ram_symbol1[1482] = 'b00000000;
    ram_symbol2[1482] = 'b00000000;
    ram_symbol3[1482] = 'b00000000;
    ram_symbol0[1483] = 'b00000000;
    ram_symbol1[1483] = 'b00000000;
    ram_symbol2[1483] = 'b00000000;
    ram_symbol3[1483] = 'b00000000;
    ram_symbol0[1484] = 'b00000000;
    ram_symbol1[1484] = 'b00000000;
    ram_symbol2[1484] = 'b00000000;
    ram_symbol3[1484] = 'b00000000;
    ram_symbol0[1485] = 'b00000000;
    ram_symbol1[1485] = 'b00000000;
    ram_symbol2[1485] = 'b00000000;
    ram_symbol3[1485] = 'b00000000;
    ram_symbol0[1486] = 'b00000000;
    ram_symbol1[1486] = 'b00000000;
    ram_symbol2[1486] = 'b00000000;
    ram_symbol3[1486] = 'b00000000;
    ram_symbol0[1487] = 'b00000000;
    ram_symbol1[1487] = 'b00000000;
    ram_symbol2[1487] = 'b00000000;
    ram_symbol3[1487] = 'b00000000;
    ram_symbol0[1488] = 'b00000000;
    ram_symbol1[1488] = 'b00000000;
    ram_symbol2[1488] = 'b00000000;
    ram_symbol3[1488] = 'b00000000;
    ram_symbol0[1489] = 'b00000000;
    ram_symbol1[1489] = 'b00000000;
    ram_symbol2[1489] = 'b00000000;
    ram_symbol3[1489] = 'b00000000;
    ram_symbol0[1490] = 'b00000000;
    ram_symbol1[1490] = 'b00000000;
    ram_symbol2[1490] = 'b00000000;
    ram_symbol3[1490] = 'b00000000;
    ram_symbol0[1491] = 'b00000000;
    ram_symbol1[1491] = 'b00000000;
    ram_symbol2[1491] = 'b00000000;
    ram_symbol3[1491] = 'b00000000;
    ram_symbol0[1492] = 'b00000000;
    ram_symbol1[1492] = 'b00000000;
    ram_symbol2[1492] = 'b00000000;
    ram_symbol3[1492] = 'b00000000;
    ram_symbol0[1493] = 'b00000000;
    ram_symbol1[1493] = 'b00000000;
    ram_symbol2[1493] = 'b00000000;
    ram_symbol3[1493] = 'b00000000;
    ram_symbol0[1494] = 'b00000000;
    ram_symbol1[1494] = 'b00000000;
    ram_symbol2[1494] = 'b00000000;
    ram_symbol3[1494] = 'b00000000;
    ram_symbol0[1495] = 'b00000000;
    ram_symbol1[1495] = 'b00000000;
    ram_symbol2[1495] = 'b00000000;
    ram_symbol3[1495] = 'b00000000;
    ram_symbol0[1496] = 'b00000000;
    ram_symbol1[1496] = 'b00000000;
    ram_symbol2[1496] = 'b00000000;
    ram_symbol3[1496] = 'b00000000;
    ram_symbol0[1497] = 'b00000000;
    ram_symbol1[1497] = 'b00000000;
    ram_symbol2[1497] = 'b00000000;
    ram_symbol3[1497] = 'b00000000;
    ram_symbol0[1498] = 'b00000000;
    ram_symbol1[1498] = 'b00000000;
    ram_symbol2[1498] = 'b00000000;
    ram_symbol3[1498] = 'b00000000;
    ram_symbol0[1499] = 'b00000000;
    ram_symbol1[1499] = 'b00000000;
    ram_symbol2[1499] = 'b00000000;
    ram_symbol3[1499] = 'b00000000;
    ram_symbol0[1500] = 'b00000000;
    ram_symbol1[1500] = 'b00000000;
    ram_symbol2[1500] = 'b00000000;
    ram_symbol3[1500] = 'b00000000;
    ram_symbol0[1501] = 'b00000000;
    ram_symbol1[1501] = 'b00000000;
    ram_symbol2[1501] = 'b00000000;
    ram_symbol3[1501] = 'b00000000;
    ram_symbol0[1502] = 'b00000000;
    ram_symbol1[1502] = 'b00000000;
    ram_symbol2[1502] = 'b00000000;
    ram_symbol3[1502] = 'b00000000;
    ram_symbol0[1503] = 'b00000000;
    ram_symbol1[1503] = 'b00000000;
    ram_symbol2[1503] = 'b00000000;
    ram_symbol3[1503] = 'b00000000;
    ram_symbol0[1504] = 'b00000000;
    ram_symbol1[1504] = 'b00000000;
    ram_symbol2[1504] = 'b00000000;
    ram_symbol3[1504] = 'b00000000;
    ram_symbol0[1505] = 'b00000000;
    ram_symbol1[1505] = 'b00000000;
    ram_symbol2[1505] = 'b00000000;
    ram_symbol3[1505] = 'b00000000;
    ram_symbol0[1506] = 'b00000000;
    ram_symbol1[1506] = 'b00000000;
    ram_symbol2[1506] = 'b00000000;
    ram_symbol3[1506] = 'b00000000;
    ram_symbol0[1507] = 'b00000000;
    ram_symbol1[1507] = 'b00000000;
    ram_symbol2[1507] = 'b00000000;
    ram_symbol3[1507] = 'b00000000;
    ram_symbol0[1508] = 'b00000000;
    ram_symbol1[1508] = 'b00000000;
    ram_symbol2[1508] = 'b00000000;
    ram_symbol3[1508] = 'b00000000;
    ram_symbol0[1509] = 'b00000000;
    ram_symbol1[1509] = 'b00000000;
    ram_symbol2[1509] = 'b00000000;
    ram_symbol3[1509] = 'b00000000;
    ram_symbol0[1510] = 'b00000000;
    ram_symbol1[1510] = 'b00000000;
    ram_symbol2[1510] = 'b00000000;
    ram_symbol3[1510] = 'b00000000;
    ram_symbol0[1511] = 'b00000000;
    ram_symbol1[1511] = 'b00000000;
    ram_symbol2[1511] = 'b00000000;
    ram_symbol3[1511] = 'b00000000;
    ram_symbol0[1512] = 'b00000000;
    ram_symbol1[1512] = 'b00000000;
    ram_symbol2[1512] = 'b00000000;
    ram_symbol3[1512] = 'b00000000;
    ram_symbol0[1513] = 'b00000000;
    ram_symbol1[1513] = 'b00000000;
    ram_symbol2[1513] = 'b00000000;
    ram_symbol3[1513] = 'b00000000;
    ram_symbol0[1514] = 'b00000000;
    ram_symbol1[1514] = 'b00000000;
    ram_symbol2[1514] = 'b00000000;
    ram_symbol3[1514] = 'b00000000;
    ram_symbol0[1515] = 'b00000000;
    ram_symbol1[1515] = 'b00000000;
    ram_symbol2[1515] = 'b00000000;
    ram_symbol3[1515] = 'b00000000;
    ram_symbol0[1516] = 'b00000000;
    ram_symbol1[1516] = 'b00000000;
    ram_symbol2[1516] = 'b00000000;
    ram_symbol3[1516] = 'b00000000;
    ram_symbol0[1517] = 'b00000000;
    ram_symbol1[1517] = 'b00000000;
    ram_symbol2[1517] = 'b00000000;
    ram_symbol3[1517] = 'b00000000;
    ram_symbol0[1518] = 'b00000000;
    ram_symbol1[1518] = 'b00000000;
    ram_symbol2[1518] = 'b00000000;
    ram_symbol3[1518] = 'b00000000;
    ram_symbol0[1519] = 'b00000000;
    ram_symbol1[1519] = 'b00000000;
    ram_symbol2[1519] = 'b00000000;
    ram_symbol3[1519] = 'b00000000;
    ram_symbol0[1520] = 'b00000000;
    ram_symbol1[1520] = 'b00000000;
    ram_symbol2[1520] = 'b00000000;
    ram_symbol3[1520] = 'b00000000;
    ram_symbol0[1521] = 'b00000000;
    ram_symbol1[1521] = 'b00000000;
    ram_symbol2[1521] = 'b00000000;
    ram_symbol3[1521] = 'b00000000;
    ram_symbol0[1522] = 'b00000000;
    ram_symbol1[1522] = 'b00000000;
    ram_symbol2[1522] = 'b00000000;
    ram_symbol3[1522] = 'b00000000;
    ram_symbol0[1523] = 'b00000000;
    ram_symbol1[1523] = 'b00000000;
    ram_symbol2[1523] = 'b00000000;
    ram_symbol3[1523] = 'b00000000;
    ram_symbol0[1524] = 'b00000000;
    ram_symbol1[1524] = 'b00000000;
    ram_symbol2[1524] = 'b00000000;
    ram_symbol3[1524] = 'b00000000;
    ram_symbol0[1525] = 'b00000000;
    ram_symbol1[1525] = 'b00000000;
    ram_symbol2[1525] = 'b00000000;
    ram_symbol3[1525] = 'b00000000;
    ram_symbol0[1526] = 'b00000000;
    ram_symbol1[1526] = 'b00000000;
    ram_symbol2[1526] = 'b00000000;
    ram_symbol3[1526] = 'b00000000;
    ram_symbol0[1527] = 'b00000000;
    ram_symbol1[1527] = 'b00000000;
    ram_symbol2[1527] = 'b00000000;
    ram_symbol3[1527] = 'b00000000;
    ram_symbol0[1528] = 'b00000000;
    ram_symbol1[1528] = 'b00000000;
    ram_symbol2[1528] = 'b00000000;
    ram_symbol3[1528] = 'b00000000;
    ram_symbol0[1529] = 'b00000000;
    ram_symbol1[1529] = 'b00000000;
    ram_symbol2[1529] = 'b00000000;
    ram_symbol3[1529] = 'b00000000;
    ram_symbol0[1530] = 'b00000000;
    ram_symbol1[1530] = 'b00000000;
    ram_symbol2[1530] = 'b00000000;
    ram_symbol3[1530] = 'b00000000;
    ram_symbol0[1531] = 'b00000000;
    ram_symbol1[1531] = 'b00000000;
    ram_symbol2[1531] = 'b00000000;
    ram_symbol3[1531] = 'b00000000;
    ram_symbol0[1532] = 'b00000000;
    ram_symbol1[1532] = 'b00000000;
    ram_symbol2[1532] = 'b00000000;
    ram_symbol3[1532] = 'b00000000;
    ram_symbol0[1533] = 'b00000000;
    ram_symbol1[1533] = 'b00000000;
    ram_symbol2[1533] = 'b00000000;
    ram_symbol3[1533] = 'b00000000;
    ram_symbol0[1534] = 'b00000000;
    ram_symbol1[1534] = 'b00000000;
    ram_symbol2[1534] = 'b00000000;
    ram_symbol3[1534] = 'b00000000;
    ram_symbol0[1535] = 'b00000000;
    ram_symbol1[1535] = 'b00000000;
    ram_symbol2[1535] = 'b00000000;
    ram_symbol3[1535] = 'b00000000;
    ram_symbol0[1536] = 'b00000000;
    ram_symbol1[1536] = 'b00000000;
    ram_symbol2[1536] = 'b00000000;
    ram_symbol3[1536] = 'b00000000;
    ram_symbol0[1537] = 'b00000000;
    ram_symbol1[1537] = 'b00000000;
    ram_symbol2[1537] = 'b00000000;
    ram_symbol3[1537] = 'b00000000;
    ram_symbol0[1538] = 'b00000000;
    ram_symbol1[1538] = 'b00000000;
    ram_symbol2[1538] = 'b00000000;
    ram_symbol3[1538] = 'b00000000;
    ram_symbol0[1539] = 'b00000000;
    ram_symbol1[1539] = 'b00000000;
    ram_symbol2[1539] = 'b00000000;
    ram_symbol3[1539] = 'b00000000;
    ram_symbol0[1540] = 'b00000000;
    ram_symbol1[1540] = 'b00000000;
    ram_symbol2[1540] = 'b00000000;
    ram_symbol3[1540] = 'b00000000;
    ram_symbol0[1541] = 'b00000000;
    ram_symbol1[1541] = 'b00000000;
    ram_symbol2[1541] = 'b00000000;
    ram_symbol3[1541] = 'b00000000;
    ram_symbol0[1542] = 'b00000000;
    ram_symbol1[1542] = 'b00000000;
    ram_symbol2[1542] = 'b00000000;
    ram_symbol3[1542] = 'b00000000;
    ram_symbol0[1543] = 'b00000000;
    ram_symbol1[1543] = 'b00000000;
    ram_symbol2[1543] = 'b00000000;
    ram_symbol3[1543] = 'b00000000;
    ram_symbol0[1544] = 'b00000000;
    ram_symbol1[1544] = 'b00000000;
    ram_symbol2[1544] = 'b00000000;
    ram_symbol3[1544] = 'b00000000;
    ram_symbol0[1545] = 'b00000000;
    ram_symbol1[1545] = 'b00000000;
    ram_symbol2[1545] = 'b00000000;
    ram_symbol3[1545] = 'b00000000;
    ram_symbol0[1546] = 'b00000000;
    ram_symbol1[1546] = 'b00000000;
    ram_symbol2[1546] = 'b00000000;
    ram_symbol3[1546] = 'b00000000;
    ram_symbol0[1547] = 'b00000000;
    ram_symbol1[1547] = 'b00000000;
    ram_symbol2[1547] = 'b00000000;
    ram_symbol3[1547] = 'b00000000;
    ram_symbol0[1548] = 'b00000000;
    ram_symbol1[1548] = 'b00000000;
    ram_symbol2[1548] = 'b00000000;
    ram_symbol3[1548] = 'b00000000;
    ram_symbol0[1549] = 'b00000000;
    ram_symbol1[1549] = 'b00000000;
    ram_symbol2[1549] = 'b00000000;
    ram_symbol3[1549] = 'b00000000;
    ram_symbol0[1550] = 'b00000000;
    ram_symbol1[1550] = 'b00000000;
    ram_symbol2[1550] = 'b00000000;
    ram_symbol3[1550] = 'b00000000;
    ram_symbol0[1551] = 'b00000000;
    ram_symbol1[1551] = 'b00000000;
    ram_symbol2[1551] = 'b00000000;
    ram_symbol3[1551] = 'b00000000;
    ram_symbol0[1552] = 'b00000000;
    ram_symbol1[1552] = 'b00000000;
    ram_symbol2[1552] = 'b00000000;
    ram_symbol3[1552] = 'b00000000;
    ram_symbol0[1553] = 'b00000000;
    ram_symbol1[1553] = 'b00000000;
    ram_symbol2[1553] = 'b00000000;
    ram_symbol3[1553] = 'b00000000;
    ram_symbol0[1554] = 'b00000000;
    ram_symbol1[1554] = 'b00000000;
    ram_symbol2[1554] = 'b00000000;
    ram_symbol3[1554] = 'b00000000;
    ram_symbol0[1555] = 'b00000000;
    ram_symbol1[1555] = 'b00000000;
    ram_symbol2[1555] = 'b00000000;
    ram_symbol3[1555] = 'b00000000;
    ram_symbol0[1556] = 'b00000000;
    ram_symbol1[1556] = 'b00000000;
    ram_symbol2[1556] = 'b00000000;
    ram_symbol3[1556] = 'b00000000;
    ram_symbol0[1557] = 'b00000000;
    ram_symbol1[1557] = 'b00000000;
    ram_symbol2[1557] = 'b00000000;
    ram_symbol3[1557] = 'b00000000;
    ram_symbol0[1558] = 'b00000000;
    ram_symbol1[1558] = 'b00000000;
    ram_symbol2[1558] = 'b00000000;
    ram_symbol3[1558] = 'b00000000;
    ram_symbol0[1559] = 'b00000000;
    ram_symbol1[1559] = 'b00000000;
    ram_symbol2[1559] = 'b00000000;
    ram_symbol3[1559] = 'b00000000;
    ram_symbol0[1560] = 'b00000000;
    ram_symbol1[1560] = 'b00000000;
    ram_symbol2[1560] = 'b00000000;
    ram_symbol3[1560] = 'b00000000;
    ram_symbol0[1561] = 'b00000000;
    ram_symbol1[1561] = 'b00000000;
    ram_symbol2[1561] = 'b00000000;
    ram_symbol3[1561] = 'b00000000;
    ram_symbol0[1562] = 'b00000000;
    ram_symbol1[1562] = 'b00000000;
    ram_symbol2[1562] = 'b00000000;
    ram_symbol3[1562] = 'b00000000;
    ram_symbol0[1563] = 'b00000000;
    ram_symbol1[1563] = 'b00000000;
    ram_symbol2[1563] = 'b00000000;
    ram_symbol3[1563] = 'b00000000;
    ram_symbol0[1564] = 'b00000000;
    ram_symbol1[1564] = 'b00000000;
    ram_symbol2[1564] = 'b00000000;
    ram_symbol3[1564] = 'b00000000;
    ram_symbol0[1565] = 'b00000000;
    ram_symbol1[1565] = 'b00000000;
    ram_symbol2[1565] = 'b00000000;
    ram_symbol3[1565] = 'b00000000;
    ram_symbol0[1566] = 'b00000000;
    ram_symbol1[1566] = 'b00000000;
    ram_symbol2[1566] = 'b00000000;
    ram_symbol3[1566] = 'b00000000;
    ram_symbol0[1567] = 'b00000000;
    ram_symbol1[1567] = 'b00000000;
    ram_symbol2[1567] = 'b00000000;
    ram_symbol3[1567] = 'b00000000;
    ram_symbol0[1568] = 'b00000000;
    ram_symbol1[1568] = 'b00000000;
    ram_symbol2[1568] = 'b00000000;
    ram_symbol3[1568] = 'b00000000;
    ram_symbol0[1569] = 'b00000000;
    ram_symbol1[1569] = 'b00000000;
    ram_symbol2[1569] = 'b00000000;
    ram_symbol3[1569] = 'b00000000;
    ram_symbol0[1570] = 'b00000000;
    ram_symbol1[1570] = 'b00000000;
    ram_symbol2[1570] = 'b00000000;
    ram_symbol3[1570] = 'b00000000;
    ram_symbol0[1571] = 'b00000000;
    ram_symbol1[1571] = 'b00000000;
    ram_symbol2[1571] = 'b00000000;
    ram_symbol3[1571] = 'b00000000;
    ram_symbol0[1572] = 'b00000000;
    ram_symbol1[1572] = 'b00000000;
    ram_symbol2[1572] = 'b00000000;
    ram_symbol3[1572] = 'b00000000;
    ram_symbol0[1573] = 'b00000000;
    ram_symbol1[1573] = 'b00000000;
    ram_symbol2[1573] = 'b00000000;
    ram_symbol3[1573] = 'b00000000;
    ram_symbol0[1574] = 'b00000000;
    ram_symbol1[1574] = 'b00000000;
    ram_symbol2[1574] = 'b00000000;
    ram_symbol3[1574] = 'b00000000;
    ram_symbol0[1575] = 'b00000000;
    ram_symbol1[1575] = 'b00000000;
    ram_symbol2[1575] = 'b00000000;
    ram_symbol3[1575] = 'b00000000;
    ram_symbol0[1576] = 'b00000000;
    ram_symbol1[1576] = 'b00000000;
    ram_symbol2[1576] = 'b00000000;
    ram_symbol3[1576] = 'b00000000;
    ram_symbol0[1577] = 'b00000000;
    ram_symbol1[1577] = 'b00000000;
    ram_symbol2[1577] = 'b00000000;
    ram_symbol3[1577] = 'b00000000;
    ram_symbol0[1578] = 'b00000000;
    ram_symbol1[1578] = 'b00000000;
    ram_symbol2[1578] = 'b00000000;
    ram_symbol3[1578] = 'b00000000;
    ram_symbol0[1579] = 'b00000000;
    ram_symbol1[1579] = 'b00000000;
    ram_symbol2[1579] = 'b00000000;
    ram_symbol3[1579] = 'b00000000;
    ram_symbol0[1580] = 'b00000000;
    ram_symbol1[1580] = 'b00000000;
    ram_symbol2[1580] = 'b00000000;
    ram_symbol3[1580] = 'b00000000;
    ram_symbol0[1581] = 'b00000000;
    ram_symbol1[1581] = 'b00000000;
    ram_symbol2[1581] = 'b00000000;
    ram_symbol3[1581] = 'b00000000;
    ram_symbol0[1582] = 'b00000000;
    ram_symbol1[1582] = 'b00000000;
    ram_symbol2[1582] = 'b00000000;
    ram_symbol3[1582] = 'b00000000;
    ram_symbol0[1583] = 'b00000000;
    ram_symbol1[1583] = 'b00000000;
    ram_symbol2[1583] = 'b00000000;
    ram_symbol3[1583] = 'b00000000;
    ram_symbol0[1584] = 'b00000000;
    ram_symbol1[1584] = 'b00000000;
    ram_symbol2[1584] = 'b00000000;
    ram_symbol3[1584] = 'b00000000;
    ram_symbol0[1585] = 'b00000000;
    ram_symbol1[1585] = 'b00000000;
    ram_symbol2[1585] = 'b00000000;
    ram_symbol3[1585] = 'b00000000;
    ram_symbol0[1586] = 'b00000000;
    ram_symbol1[1586] = 'b00000000;
    ram_symbol2[1586] = 'b00000000;
    ram_symbol3[1586] = 'b00000000;
    ram_symbol0[1587] = 'b00000000;
    ram_symbol1[1587] = 'b00000000;
    ram_symbol2[1587] = 'b00000000;
    ram_symbol3[1587] = 'b00000000;
    ram_symbol0[1588] = 'b00000000;
    ram_symbol1[1588] = 'b00000000;
    ram_symbol2[1588] = 'b00000000;
    ram_symbol3[1588] = 'b00000000;
    ram_symbol0[1589] = 'b00000000;
    ram_symbol1[1589] = 'b00000000;
    ram_symbol2[1589] = 'b00000000;
    ram_symbol3[1589] = 'b00000000;
    ram_symbol0[1590] = 'b00000000;
    ram_symbol1[1590] = 'b00000000;
    ram_symbol2[1590] = 'b00000000;
    ram_symbol3[1590] = 'b00000000;
    ram_symbol0[1591] = 'b00000000;
    ram_symbol1[1591] = 'b00000000;
    ram_symbol2[1591] = 'b00000000;
    ram_symbol3[1591] = 'b00000000;
    ram_symbol0[1592] = 'b00000000;
    ram_symbol1[1592] = 'b00000000;
    ram_symbol2[1592] = 'b00000000;
    ram_symbol3[1592] = 'b00000000;
    ram_symbol0[1593] = 'b00000000;
    ram_symbol1[1593] = 'b00000000;
    ram_symbol2[1593] = 'b00000000;
    ram_symbol3[1593] = 'b00000000;
    ram_symbol0[1594] = 'b00000000;
    ram_symbol1[1594] = 'b00000000;
    ram_symbol2[1594] = 'b00000000;
    ram_symbol3[1594] = 'b00000000;
    ram_symbol0[1595] = 'b00000000;
    ram_symbol1[1595] = 'b00000000;
    ram_symbol2[1595] = 'b00000000;
    ram_symbol3[1595] = 'b00000000;
    ram_symbol0[1596] = 'b00000000;
    ram_symbol1[1596] = 'b00000000;
    ram_symbol2[1596] = 'b00000000;
    ram_symbol3[1596] = 'b00000000;
    ram_symbol0[1597] = 'b00000000;
    ram_symbol1[1597] = 'b00000000;
    ram_symbol2[1597] = 'b00000000;
    ram_symbol3[1597] = 'b00000000;
    ram_symbol0[1598] = 'b00000000;
    ram_symbol1[1598] = 'b00000000;
    ram_symbol2[1598] = 'b00000000;
    ram_symbol3[1598] = 'b00000000;
    ram_symbol0[1599] = 'b00000000;
    ram_symbol1[1599] = 'b00000000;
    ram_symbol2[1599] = 'b00000000;
    ram_symbol3[1599] = 'b00000000;
    ram_symbol0[1600] = 'b00000000;
    ram_symbol1[1600] = 'b00000000;
    ram_symbol2[1600] = 'b00000000;
    ram_symbol3[1600] = 'b00000000;
    ram_symbol0[1601] = 'b00000000;
    ram_symbol1[1601] = 'b00000000;
    ram_symbol2[1601] = 'b00000000;
    ram_symbol3[1601] = 'b00000000;
    ram_symbol0[1602] = 'b00000000;
    ram_symbol1[1602] = 'b00000000;
    ram_symbol2[1602] = 'b00000000;
    ram_symbol3[1602] = 'b00000000;
    ram_symbol0[1603] = 'b00000000;
    ram_symbol1[1603] = 'b00000000;
    ram_symbol2[1603] = 'b00000000;
    ram_symbol3[1603] = 'b00000000;
    ram_symbol0[1604] = 'b00000000;
    ram_symbol1[1604] = 'b00000000;
    ram_symbol2[1604] = 'b00000000;
    ram_symbol3[1604] = 'b00000000;
    ram_symbol0[1605] = 'b00000000;
    ram_symbol1[1605] = 'b00000000;
    ram_symbol2[1605] = 'b00000000;
    ram_symbol3[1605] = 'b00000000;
    ram_symbol0[1606] = 'b00000000;
    ram_symbol1[1606] = 'b00000000;
    ram_symbol2[1606] = 'b00000000;
    ram_symbol3[1606] = 'b00000000;
    ram_symbol0[1607] = 'b00000000;
    ram_symbol1[1607] = 'b00000000;
    ram_symbol2[1607] = 'b00000000;
    ram_symbol3[1607] = 'b00000000;
    ram_symbol0[1608] = 'b00000000;
    ram_symbol1[1608] = 'b00000000;
    ram_symbol2[1608] = 'b00000000;
    ram_symbol3[1608] = 'b00000000;
    ram_symbol0[1609] = 'b00000000;
    ram_symbol1[1609] = 'b00000000;
    ram_symbol2[1609] = 'b00000000;
    ram_symbol3[1609] = 'b00000000;
    ram_symbol0[1610] = 'b00000000;
    ram_symbol1[1610] = 'b00000000;
    ram_symbol2[1610] = 'b00000000;
    ram_symbol3[1610] = 'b00000000;
    ram_symbol0[1611] = 'b00000000;
    ram_symbol1[1611] = 'b00000000;
    ram_symbol2[1611] = 'b00000000;
    ram_symbol3[1611] = 'b00000000;
    ram_symbol0[1612] = 'b00000000;
    ram_symbol1[1612] = 'b00000000;
    ram_symbol2[1612] = 'b00000000;
    ram_symbol3[1612] = 'b00000000;
    ram_symbol0[1613] = 'b00000000;
    ram_symbol1[1613] = 'b00000000;
    ram_symbol2[1613] = 'b00000000;
    ram_symbol3[1613] = 'b00000000;
    ram_symbol0[1614] = 'b00000000;
    ram_symbol1[1614] = 'b00000000;
    ram_symbol2[1614] = 'b00000000;
    ram_symbol3[1614] = 'b00000000;
    ram_symbol0[1615] = 'b00000000;
    ram_symbol1[1615] = 'b00000000;
    ram_symbol2[1615] = 'b00000000;
    ram_symbol3[1615] = 'b00000000;
    ram_symbol0[1616] = 'b00000000;
    ram_symbol1[1616] = 'b00000000;
    ram_symbol2[1616] = 'b00000000;
    ram_symbol3[1616] = 'b00000000;
    ram_symbol0[1617] = 'b00000000;
    ram_symbol1[1617] = 'b00000000;
    ram_symbol2[1617] = 'b00000000;
    ram_symbol3[1617] = 'b00000000;
    ram_symbol0[1618] = 'b00000000;
    ram_symbol1[1618] = 'b00000000;
    ram_symbol2[1618] = 'b00000000;
    ram_symbol3[1618] = 'b00000000;
    ram_symbol0[1619] = 'b00000000;
    ram_symbol1[1619] = 'b00000000;
    ram_symbol2[1619] = 'b00000000;
    ram_symbol3[1619] = 'b00000000;
    ram_symbol0[1620] = 'b00000000;
    ram_symbol1[1620] = 'b00000000;
    ram_symbol2[1620] = 'b00000000;
    ram_symbol3[1620] = 'b00000000;
    ram_symbol0[1621] = 'b00000000;
    ram_symbol1[1621] = 'b00000000;
    ram_symbol2[1621] = 'b00000000;
    ram_symbol3[1621] = 'b00000000;
    ram_symbol0[1622] = 'b00000000;
    ram_symbol1[1622] = 'b00000000;
    ram_symbol2[1622] = 'b00000000;
    ram_symbol3[1622] = 'b00000000;
    ram_symbol0[1623] = 'b00000000;
    ram_symbol1[1623] = 'b00000000;
    ram_symbol2[1623] = 'b00000000;
    ram_symbol3[1623] = 'b00000000;
    ram_symbol0[1624] = 'b00000000;
    ram_symbol1[1624] = 'b00000000;
    ram_symbol2[1624] = 'b00000000;
    ram_symbol3[1624] = 'b00000000;
    ram_symbol0[1625] = 'b00000000;
    ram_symbol1[1625] = 'b00000000;
    ram_symbol2[1625] = 'b00000000;
    ram_symbol3[1625] = 'b00000000;
    ram_symbol0[1626] = 'b00000000;
    ram_symbol1[1626] = 'b00000000;
    ram_symbol2[1626] = 'b00000000;
    ram_symbol3[1626] = 'b00000000;
    ram_symbol0[1627] = 'b00000000;
    ram_symbol1[1627] = 'b00000000;
    ram_symbol2[1627] = 'b00000000;
    ram_symbol3[1627] = 'b00000000;
    ram_symbol0[1628] = 'b00000000;
    ram_symbol1[1628] = 'b00000000;
    ram_symbol2[1628] = 'b00000000;
    ram_symbol3[1628] = 'b00000000;
    ram_symbol0[1629] = 'b00000000;
    ram_symbol1[1629] = 'b00000000;
    ram_symbol2[1629] = 'b00000000;
    ram_symbol3[1629] = 'b00000000;
    ram_symbol0[1630] = 'b00000000;
    ram_symbol1[1630] = 'b00000000;
    ram_symbol2[1630] = 'b00000000;
    ram_symbol3[1630] = 'b00000000;
    ram_symbol0[1631] = 'b00000000;
    ram_symbol1[1631] = 'b00000000;
    ram_symbol2[1631] = 'b00000000;
    ram_symbol3[1631] = 'b00000000;
    ram_symbol0[1632] = 'b00000000;
    ram_symbol1[1632] = 'b00000000;
    ram_symbol2[1632] = 'b00000000;
    ram_symbol3[1632] = 'b00000000;
    ram_symbol0[1633] = 'b00000000;
    ram_symbol1[1633] = 'b00000000;
    ram_symbol2[1633] = 'b00000000;
    ram_symbol3[1633] = 'b00000000;
    ram_symbol0[1634] = 'b00000000;
    ram_symbol1[1634] = 'b00000000;
    ram_symbol2[1634] = 'b00000000;
    ram_symbol3[1634] = 'b00000000;
    ram_symbol0[1635] = 'b00000000;
    ram_symbol1[1635] = 'b00000000;
    ram_symbol2[1635] = 'b00000000;
    ram_symbol3[1635] = 'b00000000;
    ram_symbol0[1636] = 'b00000000;
    ram_symbol1[1636] = 'b00000000;
    ram_symbol2[1636] = 'b00000000;
    ram_symbol3[1636] = 'b00000000;
    ram_symbol0[1637] = 'b00000000;
    ram_symbol1[1637] = 'b00000000;
    ram_symbol2[1637] = 'b00000000;
    ram_symbol3[1637] = 'b00000000;
    ram_symbol0[1638] = 'b00000000;
    ram_symbol1[1638] = 'b00000000;
    ram_symbol2[1638] = 'b00000000;
    ram_symbol3[1638] = 'b00000000;
    ram_symbol0[1639] = 'b00000000;
    ram_symbol1[1639] = 'b00000000;
    ram_symbol2[1639] = 'b00000000;
    ram_symbol3[1639] = 'b00000000;
    ram_symbol0[1640] = 'b00000000;
    ram_symbol1[1640] = 'b00000000;
    ram_symbol2[1640] = 'b00000000;
    ram_symbol3[1640] = 'b00000000;
    ram_symbol0[1641] = 'b00000000;
    ram_symbol1[1641] = 'b00000000;
    ram_symbol2[1641] = 'b00000000;
    ram_symbol3[1641] = 'b00000000;
    ram_symbol0[1642] = 'b00000000;
    ram_symbol1[1642] = 'b00000000;
    ram_symbol2[1642] = 'b00000000;
    ram_symbol3[1642] = 'b00000000;
    ram_symbol0[1643] = 'b00000000;
    ram_symbol1[1643] = 'b00000000;
    ram_symbol2[1643] = 'b00000000;
    ram_symbol3[1643] = 'b00000000;
    ram_symbol0[1644] = 'b00000000;
    ram_symbol1[1644] = 'b00000000;
    ram_symbol2[1644] = 'b00000000;
    ram_symbol3[1644] = 'b00000000;
    ram_symbol0[1645] = 'b00000000;
    ram_symbol1[1645] = 'b00000000;
    ram_symbol2[1645] = 'b00000000;
    ram_symbol3[1645] = 'b00000000;
    ram_symbol0[1646] = 'b00000000;
    ram_symbol1[1646] = 'b00000000;
    ram_symbol2[1646] = 'b00000000;
    ram_symbol3[1646] = 'b00000000;
    ram_symbol0[1647] = 'b00000000;
    ram_symbol1[1647] = 'b00000000;
    ram_symbol2[1647] = 'b00000000;
    ram_symbol3[1647] = 'b00000000;
    ram_symbol0[1648] = 'b00000000;
    ram_symbol1[1648] = 'b00000000;
    ram_symbol2[1648] = 'b00000000;
    ram_symbol3[1648] = 'b00000000;
    ram_symbol0[1649] = 'b00000000;
    ram_symbol1[1649] = 'b00000000;
    ram_symbol2[1649] = 'b00000000;
    ram_symbol3[1649] = 'b00000000;
    ram_symbol0[1650] = 'b00000000;
    ram_symbol1[1650] = 'b00000000;
    ram_symbol2[1650] = 'b00000000;
    ram_symbol3[1650] = 'b00000000;
    ram_symbol0[1651] = 'b00000000;
    ram_symbol1[1651] = 'b00000000;
    ram_symbol2[1651] = 'b00000000;
    ram_symbol3[1651] = 'b00000000;
    ram_symbol0[1652] = 'b00000000;
    ram_symbol1[1652] = 'b00000000;
    ram_symbol2[1652] = 'b00000000;
    ram_symbol3[1652] = 'b00000000;
    ram_symbol0[1653] = 'b00000000;
    ram_symbol1[1653] = 'b00000000;
    ram_symbol2[1653] = 'b00000000;
    ram_symbol3[1653] = 'b00000000;
    ram_symbol0[1654] = 'b00000000;
    ram_symbol1[1654] = 'b00000000;
    ram_symbol2[1654] = 'b00000000;
    ram_symbol3[1654] = 'b00000000;
    ram_symbol0[1655] = 'b00000000;
    ram_symbol1[1655] = 'b00000000;
    ram_symbol2[1655] = 'b00000000;
    ram_symbol3[1655] = 'b00000000;
    ram_symbol0[1656] = 'b00000000;
    ram_symbol1[1656] = 'b00000000;
    ram_symbol2[1656] = 'b00000000;
    ram_symbol3[1656] = 'b00000000;
    ram_symbol0[1657] = 'b00000000;
    ram_symbol1[1657] = 'b00000000;
    ram_symbol2[1657] = 'b00000000;
    ram_symbol3[1657] = 'b00000000;
    ram_symbol0[1658] = 'b00000000;
    ram_symbol1[1658] = 'b00000000;
    ram_symbol2[1658] = 'b00000000;
    ram_symbol3[1658] = 'b00000000;
    ram_symbol0[1659] = 'b00000000;
    ram_symbol1[1659] = 'b00000000;
    ram_symbol2[1659] = 'b00000000;
    ram_symbol3[1659] = 'b00000000;
    ram_symbol0[1660] = 'b00000000;
    ram_symbol1[1660] = 'b00000000;
    ram_symbol2[1660] = 'b00000000;
    ram_symbol3[1660] = 'b00000000;
    ram_symbol0[1661] = 'b00000000;
    ram_symbol1[1661] = 'b00000000;
    ram_symbol2[1661] = 'b00000000;
    ram_symbol3[1661] = 'b00000000;
    ram_symbol0[1662] = 'b00000000;
    ram_symbol1[1662] = 'b00000000;
    ram_symbol2[1662] = 'b00000000;
    ram_symbol3[1662] = 'b00000000;
    ram_symbol0[1663] = 'b00000000;
    ram_symbol1[1663] = 'b00000000;
    ram_symbol2[1663] = 'b00000000;
    ram_symbol3[1663] = 'b00000000;
    ram_symbol0[1664] = 'b00000000;
    ram_symbol1[1664] = 'b00000000;
    ram_symbol2[1664] = 'b00000000;
    ram_symbol3[1664] = 'b00000000;
    ram_symbol0[1665] = 'b00000000;
    ram_symbol1[1665] = 'b00000000;
    ram_symbol2[1665] = 'b00000000;
    ram_symbol3[1665] = 'b00000000;
    ram_symbol0[1666] = 'b00000000;
    ram_symbol1[1666] = 'b00000000;
    ram_symbol2[1666] = 'b00000000;
    ram_symbol3[1666] = 'b00000000;
    ram_symbol0[1667] = 'b00000000;
    ram_symbol1[1667] = 'b00000000;
    ram_symbol2[1667] = 'b00000000;
    ram_symbol3[1667] = 'b00000000;
    ram_symbol0[1668] = 'b00000000;
    ram_symbol1[1668] = 'b00000000;
    ram_symbol2[1668] = 'b00000000;
    ram_symbol3[1668] = 'b00000000;
    ram_symbol0[1669] = 'b00000000;
    ram_symbol1[1669] = 'b00000000;
    ram_symbol2[1669] = 'b00000000;
    ram_symbol3[1669] = 'b00000000;
    ram_symbol0[1670] = 'b00000000;
    ram_symbol1[1670] = 'b00000000;
    ram_symbol2[1670] = 'b00000000;
    ram_symbol3[1670] = 'b00000000;
    ram_symbol0[1671] = 'b00000000;
    ram_symbol1[1671] = 'b00000000;
    ram_symbol2[1671] = 'b00000000;
    ram_symbol3[1671] = 'b00000000;
    ram_symbol0[1672] = 'b00000000;
    ram_symbol1[1672] = 'b00000000;
    ram_symbol2[1672] = 'b00000000;
    ram_symbol3[1672] = 'b00000000;
    ram_symbol0[1673] = 'b00000000;
    ram_symbol1[1673] = 'b00000000;
    ram_symbol2[1673] = 'b00000000;
    ram_symbol3[1673] = 'b00000000;
    ram_symbol0[1674] = 'b00000000;
    ram_symbol1[1674] = 'b00000000;
    ram_symbol2[1674] = 'b00000000;
    ram_symbol3[1674] = 'b00000000;
    ram_symbol0[1675] = 'b00000000;
    ram_symbol1[1675] = 'b00000000;
    ram_symbol2[1675] = 'b00000000;
    ram_symbol3[1675] = 'b00000000;
    ram_symbol0[1676] = 'b00000000;
    ram_symbol1[1676] = 'b00000000;
    ram_symbol2[1676] = 'b00000000;
    ram_symbol3[1676] = 'b00000000;
    ram_symbol0[1677] = 'b00000000;
    ram_symbol1[1677] = 'b00000000;
    ram_symbol2[1677] = 'b00000000;
    ram_symbol3[1677] = 'b00000000;
    ram_symbol0[1678] = 'b00000000;
    ram_symbol1[1678] = 'b00000000;
    ram_symbol2[1678] = 'b00000000;
    ram_symbol3[1678] = 'b00000000;
    ram_symbol0[1679] = 'b00000000;
    ram_symbol1[1679] = 'b00000000;
    ram_symbol2[1679] = 'b00000000;
    ram_symbol3[1679] = 'b00000000;
    ram_symbol0[1680] = 'b00000000;
    ram_symbol1[1680] = 'b00000000;
    ram_symbol2[1680] = 'b00000000;
    ram_symbol3[1680] = 'b00000000;
    ram_symbol0[1681] = 'b00000000;
    ram_symbol1[1681] = 'b00000000;
    ram_symbol2[1681] = 'b00000000;
    ram_symbol3[1681] = 'b00000000;
    ram_symbol0[1682] = 'b00000000;
    ram_symbol1[1682] = 'b00000000;
    ram_symbol2[1682] = 'b00000000;
    ram_symbol3[1682] = 'b00000000;
    ram_symbol0[1683] = 'b00000000;
    ram_symbol1[1683] = 'b00000000;
    ram_symbol2[1683] = 'b00000000;
    ram_symbol3[1683] = 'b00000000;
    ram_symbol0[1684] = 'b00000000;
    ram_symbol1[1684] = 'b00000000;
    ram_symbol2[1684] = 'b00000000;
    ram_symbol3[1684] = 'b00000000;
    ram_symbol0[1685] = 'b00000000;
    ram_symbol1[1685] = 'b00000000;
    ram_symbol2[1685] = 'b00000000;
    ram_symbol3[1685] = 'b00000000;
    ram_symbol0[1686] = 'b00000000;
    ram_symbol1[1686] = 'b00000000;
    ram_symbol2[1686] = 'b00000000;
    ram_symbol3[1686] = 'b00000000;
    ram_symbol0[1687] = 'b00000000;
    ram_symbol1[1687] = 'b00000000;
    ram_symbol2[1687] = 'b00000000;
    ram_symbol3[1687] = 'b00000000;
    ram_symbol0[1688] = 'b00000000;
    ram_symbol1[1688] = 'b00000000;
    ram_symbol2[1688] = 'b00000000;
    ram_symbol3[1688] = 'b00000000;
    ram_symbol0[1689] = 'b00000000;
    ram_symbol1[1689] = 'b00000000;
    ram_symbol2[1689] = 'b00000000;
    ram_symbol3[1689] = 'b00000000;
    ram_symbol0[1690] = 'b00000000;
    ram_symbol1[1690] = 'b00000000;
    ram_symbol2[1690] = 'b00000000;
    ram_symbol3[1690] = 'b00000000;
    ram_symbol0[1691] = 'b00000000;
    ram_symbol1[1691] = 'b00000000;
    ram_symbol2[1691] = 'b00000000;
    ram_symbol3[1691] = 'b00000000;
    ram_symbol0[1692] = 'b00000000;
    ram_symbol1[1692] = 'b00000000;
    ram_symbol2[1692] = 'b00000000;
    ram_symbol3[1692] = 'b00000000;
    ram_symbol0[1693] = 'b00000000;
    ram_symbol1[1693] = 'b00000000;
    ram_symbol2[1693] = 'b00000000;
    ram_symbol3[1693] = 'b00000000;
    ram_symbol0[1694] = 'b00000000;
    ram_symbol1[1694] = 'b00000000;
    ram_symbol2[1694] = 'b00000000;
    ram_symbol3[1694] = 'b00000000;
    ram_symbol0[1695] = 'b00000000;
    ram_symbol1[1695] = 'b00000000;
    ram_symbol2[1695] = 'b00000000;
    ram_symbol3[1695] = 'b00000000;
    ram_symbol0[1696] = 'b00000000;
    ram_symbol1[1696] = 'b00000000;
    ram_symbol2[1696] = 'b00000000;
    ram_symbol3[1696] = 'b00000000;
    ram_symbol0[1697] = 'b00000000;
    ram_symbol1[1697] = 'b00000000;
    ram_symbol2[1697] = 'b00000000;
    ram_symbol3[1697] = 'b00000000;
    ram_symbol0[1698] = 'b00000000;
    ram_symbol1[1698] = 'b00000000;
    ram_symbol2[1698] = 'b00000000;
    ram_symbol3[1698] = 'b00000000;
    ram_symbol0[1699] = 'b00000000;
    ram_symbol1[1699] = 'b00000000;
    ram_symbol2[1699] = 'b00000000;
    ram_symbol3[1699] = 'b00000000;
    ram_symbol0[1700] = 'b00000000;
    ram_symbol1[1700] = 'b00000000;
    ram_symbol2[1700] = 'b00000000;
    ram_symbol3[1700] = 'b00000000;
    ram_symbol0[1701] = 'b00000000;
    ram_symbol1[1701] = 'b00000000;
    ram_symbol2[1701] = 'b00000000;
    ram_symbol3[1701] = 'b00000000;
    ram_symbol0[1702] = 'b00000000;
    ram_symbol1[1702] = 'b00000000;
    ram_symbol2[1702] = 'b00000000;
    ram_symbol3[1702] = 'b00000000;
    ram_symbol0[1703] = 'b00000000;
    ram_symbol1[1703] = 'b00000000;
    ram_symbol2[1703] = 'b00000000;
    ram_symbol3[1703] = 'b00000000;
    ram_symbol0[1704] = 'b00000000;
    ram_symbol1[1704] = 'b00000000;
    ram_symbol2[1704] = 'b00000000;
    ram_symbol3[1704] = 'b00000000;
    ram_symbol0[1705] = 'b00000000;
    ram_symbol1[1705] = 'b00000000;
    ram_symbol2[1705] = 'b00000000;
    ram_symbol3[1705] = 'b00000000;
    ram_symbol0[1706] = 'b00000000;
    ram_symbol1[1706] = 'b00000000;
    ram_symbol2[1706] = 'b00000000;
    ram_symbol3[1706] = 'b00000000;
    ram_symbol0[1707] = 'b00000000;
    ram_symbol1[1707] = 'b00000000;
    ram_symbol2[1707] = 'b00000000;
    ram_symbol3[1707] = 'b00000000;
    ram_symbol0[1708] = 'b00000000;
    ram_symbol1[1708] = 'b00000000;
    ram_symbol2[1708] = 'b00000000;
    ram_symbol3[1708] = 'b00000000;
    ram_symbol0[1709] = 'b00000000;
    ram_symbol1[1709] = 'b00000000;
    ram_symbol2[1709] = 'b00000000;
    ram_symbol3[1709] = 'b00000000;
    ram_symbol0[1710] = 'b00000000;
    ram_symbol1[1710] = 'b00000000;
    ram_symbol2[1710] = 'b00000000;
    ram_symbol3[1710] = 'b00000000;
    ram_symbol0[1711] = 'b00000000;
    ram_symbol1[1711] = 'b00000000;
    ram_symbol2[1711] = 'b00000000;
    ram_symbol3[1711] = 'b00000000;
    ram_symbol0[1712] = 'b00000000;
    ram_symbol1[1712] = 'b00000000;
    ram_symbol2[1712] = 'b00000000;
    ram_symbol3[1712] = 'b00000000;
    ram_symbol0[1713] = 'b00000000;
    ram_symbol1[1713] = 'b00000000;
    ram_symbol2[1713] = 'b00000000;
    ram_symbol3[1713] = 'b00000000;
    ram_symbol0[1714] = 'b00000000;
    ram_symbol1[1714] = 'b00000000;
    ram_symbol2[1714] = 'b00000000;
    ram_symbol3[1714] = 'b00000000;
    ram_symbol0[1715] = 'b00000000;
    ram_symbol1[1715] = 'b00000000;
    ram_symbol2[1715] = 'b00000000;
    ram_symbol3[1715] = 'b00000000;
    ram_symbol0[1716] = 'b00000000;
    ram_symbol1[1716] = 'b00000000;
    ram_symbol2[1716] = 'b00000000;
    ram_symbol3[1716] = 'b00000000;
    ram_symbol0[1717] = 'b00000000;
    ram_symbol1[1717] = 'b00000000;
    ram_symbol2[1717] = 'b00000000;
    ram_symbol3[1717] = 'b00000000;
    ram_symbol0[1718] = 'b00000000;
    ram_symbol1[1718] = 'b00000000;
    ram_symbol2[1718] = 'b00000000;
    ram_symbol3[1718] = 'b00000000;
    ram_symbol0[1719] = 'b00000000;
    ram_symbol1[1719] = 'b00000000;
    ram_symbol2[1719] = 'b00000000;
    ram_symbol3[1719] = 'b00000000;
    ram_symbol0[1720] = 'b00000000;
    ram_symbol1[1720] = 'b00000000;
    ram_symbol2[1720] = 'b00000000;
    ram_symbol3[1720] = 'b00000000;
    ram_symbol0[1721] = 'b00000000;
    ram_symbol1[1721] = 'b00000000;
    ram_symbol2[1721] = 'b00000000;
    ram_symbol3[1721] = 'b00000000;
    ram_symbol0[1722] = 'b00000000;
    ram_symbol1[1722] = 'b00000000;
    ram_symbol2[1722] = 'b00000000;
    ram_symbol3[1722] = 'b00000000;
    ram_symbol0[1723] = 'b00000000;
    ram_symbol1[1723] = 'b00000000;
    ram_symbol2[1723] = 'b00000000;
    ram_symbol3[1723] = 'b00000000;
    ram_symbol0[1724] = 'b00000000;
    ram_symbol1[1724] = 'b00000000;
    ram_symbol2[1724] = 'b00000000;
    ram_symbol3[1724] = 'b00000000;
    ram_symbol0[1725] = 'b00000000;
    ram_symbol1[1725] = 'b00000000;
    ram_symbol2[1725] = 'b00000000;
    ram_symbol3[1725] = 'b00000000;
    ram_symbol0[1726] = 'b00000000;
    ram_symbol1[1726] = 'b00000000;
    ram_symbol2[1726] = 'b00000000;
    ram_symbol3[1726] = 'b00000000;
    ram_symbol0[1727] = 'b00000000;
    ram_symbol1[1727] = 'b00000000;
    ram_symbol2[1727] = 'b00000000;
    ram_symbol3[1727] = 'b00000000;
    ram_symbol0[1728] = 'b00000000;
    ram_symbol1[1728] = 'b00000000;
    ram_symbol2[1728] = 'b00000000;
    ram_symbol3[1728] = 'b00000000;
    ram_symbol0[1729] = 'b00000000;
    ram_symbol1[1729] = 'b00000000;
    ram_symbol2[1729] = 'b00000000;
    ram_symbol3[1729] = 'b00000000;
    ram_symbol0[1730] = 'b00000000;
    ram_symbol1[1730] = 'b00000000;
    ram_symbol2[1730] = 'b00000000;
    ram_symbol3[1730] = 'b00000000;
    ram_symbol0[1731] = 'b00000000;
    ram_symbol1[1731] = 'b00000000;
    ram_symbol2[1731] = 'b00000000;
    ram_symbol3[1731] = 'b00000000;
    ram_symbol0[1732] = 'b00000000;
    ram_symbol1[1732] = 'b00000000;
    ram_symbol2[1732] = 'b00000000;
    ram_symbol3[1732] = 'b00000000;
    ram_symbol0[1733] = 'b00000000;
    ram_symbol1[1733] = 'b00000000;
    ram_symbol2[1733] = 'b00000000;
    ram_symbol3[1733] = 'b00000000;
    ram_symbol0[1734] = 'b00000000;
    ram_symbol1[1734] = 'b00000000;
    ram_symbol2[1734] = 'b00000000;
    ram_symbol3[1734] = 'b00000000;
    ram_symbol0[1735] = 'b00000000;
    ram_symbol1[1735] = 'b00000000;
    ram_symbol2[1735] = 'b00000000;
    ram_symbol3[1735] = 'b00000000;
    ram_symbol0[1736] = 'b00000000;
    ram_symbol1[1736] = 'b00000000;
    ram_symbol2[1736] = 'b00000000;
    ram_symbol3[1736] = 'b00000000;
    ram_symbol0[1737] = 'b00000000;
    ram_symbol1[1737] = 'b00000000;
    ram_symbol2[1737] = 'b00000000;
    ram_symbol3[1737] = 'b00000000;
    ram_symbol0[1738] = 'b00000000;
    ram_symbol1[1738] = 'b00000000;
    ram_symbol2[1738] = 'b00000000;
    ram_symbol3[1738] = 'b00000000;
    ram_symbol0[1739] = 'b00000000;
    ram_symbol1[1739] = 'b00000000;
    ram_symbol2[1739] = 'b00000000;
    ram_symbol3[1739] = 'b00000000;
    ram_symbol0[1740] = 'b00000000;
    ram_symbol1[1740] = 'b00000000;
    ram_symbol2[1740] = 'b00000000;
    ram_symbol3[1740] = 'b00000000;
    ram_symbol0[1741] = 'b00000000;
    ram_symbol1[1741] = 'b00000000;
    ram_symbol2[1741] = 'b00000000;
    ram_symbol3[1741] = 'b00000000;
    ram_symbol0[1742] = 'b00000000;
    ram_symbol1[1742] = 'b00000000;
    ram_symbol2[1742] = 'b00000000;
    ram_symbol3[1742] = 'b00000000;
    ram_symbol0[1743] = 'b00000000;
    ram_symbol1[1743] = 'b00000000;
    ram_symbol2[1743] = 'b00000000;
    ram_symbol3[1743] = 'b00000000;
    ram_symbol0[1744] = 'b00000000;
    ram_symbol1[1744] = 'b00000000;
    ram_symbol2[1744] = 'b00000000;
    ram_symbol3[1744] = 'b00000000;
    ram_symbol0[1745] = 'b00000000;
    ram_symbol1[1745] = 'b00000000;
    ram_symbol2[1745] = 'b00000000;
    ram_symbol3[1745] = 'b00000000;
    ram_symbol0[1746] = 'b00000000;
    ram_symbol1[1746] = 'b00000000;
    ram_symbol2[1746] = 'b00000000;
    ram_symbol3[1746] = 'b00000000;
    ram_symbol0[1747] = 'b00000000;
    ram_symbol1[1747] = 'b00000000;
    ram_symbol2[1747] = 'b00000000;
    ram_symbol3[1747] = 'b00000000;
    ram_symbol0[1748] = 'b00000000;
    ram_symbol1[1748] = 'b00000000;
    ram_symbol2[1748] = 'b00000000;
    ram_symbol3[1748] = 'b00000000;
    ram_symbol0[1749] = 'b00000000;
    ram_symbol1[1749] = 'b00000000;
    ram_symbol2[1749] = 'b00000000;
    ram_symbol3[1749] = 'b00000000;
    ram_symbol0[1750] = 'b00000000;
    ram_symbol1[1750] = 'b00000000;
    ram_symbol2[1750] = 'b00000000;
    ram_symbol3[1750] = 'b00000000;
    ram_symbol0[1751] = 'b00000000;
    ram_symbol1[1751] = 'b00000000;
    ram_symbol2[1751] = 'b00000000;
    ram_symbol3[1751] = 'b00000000;
    ram_symbol0[1752] = 'b00000000;
    ram_symbol1[1752] = 'b00000000;
    ram_symbol2[1752] = 'b00000000;
    ram_symbol3[1752] = 'b00000000;
    ram_symbol0[1753] = 'b00000000;
    ram_symbol1[1753] = 'b00000000;
    ram_symbol2[1753] = 'b00000000;
    ram_symbol3[1753] = 'b00000000;
    ram_symbol0[1754] = 'b00000000;
    ram_symbol1[1754] = 'b00000000;
    ram_symbol2[1754] = 'b00000000;
    ram_symbol3[1754] = 'b00000000;
    ram_symbol0[1755] = 'b00000000;
    ram_symbol1[1755] = 'b00000000;
    ram_symbol2[1755] = 'b00000000;
    ram_symbol3[1755] = 'b00000000;
    ram_symbol0[1756] = 'b00000000;
    ram_symbol1[1756] = 'b00000000;
    ram_symbol2[1756] = 'b00000000;
    ram_symbol3[1756] = 'b00000000;
    ram_symbol0[1757] = 'b00000000;
    ram_symbol1[1757] = 'b00000000;
    ram_symbol2[1757] = 'b00000000;
    ram_symbol3[1757] = 'b00000000;
    ram_symbol0[1758] = 'b00000000;
    ram_symbol1[1758] = 'b00000000;
    ram_symbol2[1758] = 'b00000000;
    ram_symbol3[1758] = 'b00000000;
    ram_symbol0[1759] = 'b00000000;
    ram_symbol1[1759] = 'b00000000;
    ram_symbol2[1759] = 'b00000000;
    ram_symbol3[1759] = 'b00000000;
    ram_symbol0[1760] = 'b00000000;
    ram_symbol1[1760] = 'b00000000;
    ram_symbol2[1760] = 'b00000000;
    ram_symbol3[1760] = 'b00000000;
    ram_symbol0[1761] = 'b00000000;
    ram_symbol1[1761] = 'b00000000;
    ram_symbol2[1761] = 'b00000000;
    ram_symbol3[1761] = 'b00000000;
    ram_symbol0[1762] = 'b00000000;
    ram_symbol1[1762] = 'b00000000;
    ram_symbol2[1762] = 'b00000000;
    ram_symbol3[1762] = 'b00000000;
    ram_symbol0[1763] = 'b00000000;
    ram_symbol1[1763] = 'b00000000;
    ram_symbol2[1763] = 'b00000000;
    ram_symbol3[1763] = 'b00000000;
    ram_symbol0[1764] = 'b00000000;
    ram_symbol1[1764] = 'b00000000;
    ram_symbol2[1764] = 'b00000000;
    ram_symbol3[1764] = 'b00000000;
    ram_symbol0[1765] = 'b00000000;
    ram_symbol1[1765] = 'b00000000;
    ram_symbol2[1765] = 'b00000000;
    ram_symbol3[1765] = 'b00000000;
    ram_symbol0[1766] = 'b00000000;
    ram_symbol1[1766] = 'b00000000;
    ram_symbol2[1766] = 'b00000000;
    ram_symbol3[1766] = 'b00000000;
    ram_symbol0[1767] = 'b00000000;
    ram_symbol1[1767] = 'b00000000;
    ram_symbol2[1767] = 'b00000000;
    ram_symbol3[1767] = 'b00000000;
    ram_symbol0[1768] = 'b00000000;
    ram_symbol1[1768] = 'b00000000;
    ram_symbol2[1768] = 'b00000000;
    ram_symbol3[1768] = 'b00000000;
    ram_symbol0[1769] = 'b00000000;
    ram_symbol1[1769] = 'b00000000;
    ram_symbol2[1769] = 'b00000000;
    ram_symbol3[1769] = 'b00000000;
    ram_symbol0[1770] = 'b00000000;
    ram_symbol1[1770] = 'b00000000;
    ram_symbol2[1770] = 'b00000000;
    ram_symbol3[1770] = 'b00000000;
    ram_symbol0[1771] = 'b00000000;
    ram_symbol1[1771] = 'b00000000;
    ram_symbol2[1771] = 'b00000000;
    ram_symbol3[1771] = 'b00000000;
    ram_symbol0[1772] = 'b00000000;
    ram_symbol1[1772] = 'b00000000;
    ram_symbol2[1772] = 'b00000000;
    ram_symbol3[1772] = 'b00000000;
    ram_symbol0[1773] = 'b00000000;
    ram_symbol1[1773] = 'b00000000;
    ram_symbol2[1773] = 'b00000000;
    ram_symbol3[1773] = 'b00000000;
    ram_symbol0[1774] = 'b00000000;
    ram_symbol1[1774] = 'b00000000;
    ram_symbol2[1774] = 'b00000000;
    ram_symbol3[1774] = 'b00000000;
    ram_symbol0[1775] = 'b00000000;
    ram_symbol1[1775] = 'b00000000;
    ram_symbol2[1775] = 'b00000000;
    ram_symbol3[1775] = 'b00000000;
    ram_symbol0[1776] = 'b00000000;
    ram_symbol1[1776] = 'b00000000;
    ram_symbol2[1776] = 'b00000000;
    ram_symbol3[1776] = 'b00000000;
    ram_symbol0[1777] = 'b00000000;
    ram_symbol1[1777] = 'b00000000;
    ram_symbol2[1777] = 'b00000000;
    ram_symbol3[1777] = 'b00000000;
    ram_symbol0[1778] = 'b00000000;
    ram_symbol1[1778] = 'b00000000;
    ram_symbol2[1778] = 'b00000000;
    ram_symbol3[1778] = 'b00000000;
    ram_symbol0[1779] = 'b00000000;
    ram_symbol1[1779] = 'b00000000;
    ram_symbol2[1779] = 'b00000000;
    ram_symbol3[1779] = 'b00000000;
    ram_symbol0[1780] = 'b00000000;
    ram_symbol1[1780] = 'b00000000;
    ram_symbol2[1780] = 'b00000000;
    ram_symbol3[1780] = 'b00000000;
    ram_symbol0[1781] = 'b00000000;
    ram_symbol1[1781] = 'b00000000;
    ram_symbol2[1781] = 'b00000000;
    ram_symbol3[1781] = 'b00000000;
    ram_symbol0[1782] = 'b00000000;
    ram_symbol1[1782] = 'b00000000;
    ram_symbol2[1782] = 'b00000000;
    ram_symbol3[1782] = 'b00000000;
    ram_symbol0[1783] = 'b00000000;
    ram_symbol1[1783] = 'b00000000;
    ram_symbol2[1783] = 'b00000000;
    ram_symbol3[1783] = 'b00000000;
    ram_symbol0[1784] = 'b00000000;
    ram_symbol1[1784] = 'b00000000;
    ram_symbol2[1784] = 'b00000000;
    ram_symbol3[1784] = 'b00000000;
    ram_symbol0[1785] = 'b00000000;
    ram_symbol1[1785] = 'b00000000;
    ram_symbol2[1785] = 'b00000000;
    ram_symbol3[1785] = 'b00000000;
    ram_symbol0[1786] = 'b00000000;
    ram_symbol1[1786] = 'b00000000;
    ram_symbol2[1786] = 'b00000000;
    ram_symbol3[1786] = 'b00000000;
    ram_symbol0[1787] = 'b00000000;
    ram_symbol1[1787] = 'b00000000;
    ram_symbol2[1787] = 'b00000000;
    ram_symbol3[1787] = 'b00000000;
    ram_symbol0[1788] = 'b00000000;
    ram_symbol1[1788] = 'b00000000;
    ram_symbol2[1788] = 'b00000000;
    ram_symbol3[1788] = 'b00000000;
    ram_symbol0[1789] = 'b00000000;
    ram_symbol1[1789] = 'b00000000;
    ram_symbol2[1789] = 'b00000000;
    ram_symbol3[1789] = 'b00000000;
    ram_symbol0[1790] = 'b00000000;
    ram_symbol1[1790] = 'b00000000;
    ram_symbol2[1790] = 'b00000000;
    ram_symbol3[1790] = 'b00000000;
    ram_symbol0[1791] = 'b00000000;
    ram_symbol1[1791] = 'b00000000;
    ram_symbol2[1791] = 'b00000000;
    ram_symbol3[1791] = 'b00000000;
    ram_symbol0[1792] = 'b00000000;
    ram_symbol1[1792] = 'b00000000;
    ram_symbol2[1792] = 'b00000000;
    ram_symbol3[1792] = 'b00000000;
    ram_symbol0[1793] = 'b00000000;
    ram_symbol1[1793] = 'b00000000;
    ram_symbol2[1793] = 'b00000000;
    ram_symbol3[1793] = 'b00000000;
    ram_symbol0[1794] = 'b00000000;
    ram_symbol1[1794] = 'b00000000;
    ram_symbol2[1794] = 'b00000000;
    ram_symbol3[1794] = 'b00000000;
    ram_symbol0[1795] = 'b00000000;
    ram_symbol1[1795] = 'b00000000;
    ram_symbol2[1795] = 'b00000000;
    ram_symbol3[1795] = 'b00000000;
    ram_symbol0[1796] = 'b00000000;
    ram_symbol1[1796] = 'b00000000;
    ram_symbol2[1796] = 'b00000000;
    ram_symbol3[1796] = 'b00000000;
    ram_symbol0[1797] = 'b00000000;
    ram_symbol1[1797] = 'b00000000;
    ram_symbol2[1797] = 'b00000000;
    ram_symbol3[1797] = 'b00000000;
    ram_symbol0[1798] = 'b00000000;
    ram_symbol1[1798] = 'b00000000;
    ram_symbol2[1798] = 'b00000000;
    ram_symbol3[1798] = 'b00000000;
    ram_symbol0[1799] = 'b00000000;
    ram_symbol1[1799] = 'b00000000;
    ram_symbol2[1799] = 'b00000000;
    ram_symbol3[1799] = 'b00000000;
    ram_symbol0[1800] = 'b00000000;
    ram_symbol1[1800] = 'b00000000;
    ram_symbol2[1800] = 'b00000000;
    ram_symbol3[1800] = 'b00000000;
    ram_symbol0[1801] = 'b00000000;
    ram_symbol1[1801] = 'b00000000;
    ram_symbol2[1801] = 'b00000000;
    ram_symbol3[1801] = 'b00000000;
    ram_symbol0[1802] = 'b00000000;
    ram_symbol1[1802] = 'b00000000;
    ram_symbol2[1802] = 'b00000000;
    ram_symbol3[1802] = 'b00000000;
    ram_symbol0[1803] = 'b00000000;
    ram_symbol1[1803] = 'b00000000;
    ram_symbol2[1803] = 'b00000000;
    ram_symbol3[1803] = 'b00000000;
    ram_symbol0[1804] = 'b00000000;
    ram_symbol1[1804] = 'b00000000;
    ram_symbol2[1804] = 'b00000000;
    ram_symbol3[1804] = 'b00000000;
    ram_symbol0[1805] = 'b00000000;
    ram_symbol1[1805] = 'b00000000;
    ram_symbol2[1805] = 'b00000000;
    ram_symbol3[1805] = 'b00000000;
    ram_symbol0[1806] = 'b00000000;
    ram_symbol1[1806] = 'b00000000;
    ram_symbol2[1806] = 'b00000000;
    ram_symbol3[1806] = 'b00000000;
    ram_symbol0[1807] = 'b00000000;
    ram_symbol1[1807] = 'b00000000;
    ram_symbol2[1807] = 'b00000000;
    ram_symbol3[1807] = 'b00000000;
    ram_symbol0[1808] = 'b00000000;
    ram_symbol1[1808] = 'b00000000;
    ram_symbol2[1808] = 'b00000000;
    ram_symbol3[1808] = 'b00000000;
    ram_symbol0[1809] = 'b00000000;
    ram_symbol1[1809] = 'b00000000;
    ram_symbol2[1809] = 'b00000000;
    ram_symbol3[1809] = 'b00000000;
    ram_symbol0[1810] = 'b00000000;
    ram_symbol1[1810] = 'b00000000;
    ram_symbol2[1810] = 'b00000000;
    ram_symbol3[1810] = 'b00000000;
    ram_symbol0[1811] = 'b00000000;
    ram_symbol1[1811] = 'b00000000;
    ram_symbol2[1811] = 'b00000000;
    ram_symbol3[1811] = 'b00000000;
    ram_symbol0[1812] = 'b00000000;
    ram_symbol1[1812] = 'b00000000;
    ram_symbol2[1812] = 'b00000000;
    ram_symbol3[1812] = 'b00000000;
    ram_symbol0[1813] = 'b00000000;
    ram_symbol1[1813] = 'b00000000;
    ram_symbol2[1813] = 'b00000000;
    ram_symbol3[1813] = 'b00000000;
    ram_symbol0[1814] = 'b00000000;
    ram_symbol1[1814] = 'b00000000;
    ram_symbol2[1814] = 'b00000000;
    ram_symbol3[1814] = 'b00000000;
    ram_symbol0[1815] = 'b00000000;
    ram_symbol1[1815] = 'b00000000;
    ram_symbol2[1815] = 'b00000000;
    ram_symbol3[1815] = 'b00000000;
    ram_symbol0[1816] = 'b00000000;
    ram_symbol1[1816] = 'b00000000;
    ram_symbol2[1816] = 'b00000000;
    ram_symbol3[1816] = 'b00000000;
    ram_symbol0[1817] = 'b00000000;
    ram_symbol1[1817] = 'b00000000;
    ram_symbol2[1817] = 'b00000000;
    ram_symbol3[1817] = 'b00000000;
    ram_symbol0[1818] = 'b00000000;
    ram_symbol1[1818] = 'b00000000;
    ram_symbol2[1818] = 'b00000000;
    ram_symbol3[1818] = 'b00000000;
    ram_symbol0[1819] = 'b00000000;
    ram_symbol1[1819] = 'b00000000;
    ram_symbol2[1819] = 'b00000000;
    ram_symbol3[1819] = 'b00000000;
    ram_symbol0[1820] = 'b00000000;
    ram_symbol1[1820] = 'b00000000;
    ram_symbol2[1820] = 'b00000000;
    ram_symbol3[1820] = 'b00000000;
    ram_symbol0[1821] = 'b00000000;
    ram_symbol1[1821] = 'b00000000;
    ram_symbol2[1821] = 'b00000000;
    ram_symbol3[1821] = 'b00000000;
    ram_symbol0[1822] = 'b00000000;
    ram_symbol1[1822] = 'b00000000;
    ram_symbol2[1822] = 'b00000000;
    ram_symbol3[1822] = 'b00000000;
    ram_symbol0[1823] = 'b00000000;
    ram_symbol1[1823] = 'b00000000;
    ram_symbol2[1823] = 'b00000000;
    ram_symbol3[1823] = 'b00000000;
    ram_symbol0[1824] = 'b00000000;
    ram_symbol1[1824] = 'b00000000;
    ram_symbol2[1824] = 'b00000000;
    ram_symbol3[1824] = 'b00000000;
    ram_symbol0[1825] = 'b00000000;
    ram_symbol1[1825] = 'b00000000;
    ram_symbol2[1825] = 'b00000000;
    ram_symbol3[1825] = 'b00000000;
    ram_symbol0[1826] = 'b00000000;
    ram_symbol1[1826] = 'b00000000;
    ram_symbol2[1826] = 'b00000000;
    ram_symbol3[1826] = 'b00000000;
    ram_symbol0[1827] = 'b00000000;
    ram_symbol1[1827] = 'b00000000;
    ram_symbol2[1827] = 'b00000000;
    ram_symbol3[1827] = 'b00000000;
    ram_symbol0[1828] = 'b00000000;
    ram_symbol1[1828] = 'b00000000;
    ram_symbol2[1828] = 'b00000000;
    ram_symbol3[1828] = 'b00000000;
    ram_symbol0[1829] = 'b00000000;
    ram_symbol1[1829] = 'b00000000;
    ram_symbol2[1829] = 'b00000000;
    ram_symbol3[1829] = 'b00000000;
    ram_symbol0[1830] = 'b00000000;
    ram_symbol1[1830] = 'b00000000;
    ram_symbol2[1830] = 'b00000000;
    ram_symbol3[1830] = 'b00000000;
    ram_symbol0[1831] = 'b00000000;
    ram_symbol1[1831] = 'b00000000;
    ram_symbol2[1831] = 'b00000000;
    ram_symbol3[1831] = 'b00000000;
    ram_symbol0[1832] = 'b00000000;
    ram_symbol1[1832] = 'b00000000;
    ram_symbol2[1832] = 'b00000000;
    ram_symbol3[1832] = 'b00000000;
    ram_symbol0[1833] = 'b00000000;
    ram_symbol1[1833] = 'b00000000;
    ram_symbol2[1833] = 'b00000000;
    ram_symbol3[1833] = 'b00000000;
    ram_symbol0[1834] = 'b00000000;
    ram_symbol1[1834] = 'b00000000;
    ram_symbol2[1834] = 'b00000000;
    ram_symbol3[1834] = 'b00000000;
    ram_symbol0[1835] = 'b00000000;
    ram_symbol1[1835] = 'b00000000;
    ram_symbol2[1835] = 'b00000000;
    ram_symbol3[1835] = 'b00000000;
    ram_symbol0[1836] = 'b00000000;
    ram_symbol1[1836] = 'b00000000;
    ram_symbol2[1836] = 'b00000000;
    ram_symbol3[1836] = 'b00000000;
    ram_symbol0[1837] = 'b00000000;
    ram_symbol1[1837] = 'b00000000;
    ram_symbol2[1837] = 'b00000000;
    ram_symbol3[1837] = 'b00000000;
    ram_symbol0[1838] = 'b00000000;
    ram_symbol1[1838] = 'b00000000;
    ram_symbol2[1838] = 'b00000000;
    ram_symbol3[1838] = 'b00000000;
    ram_symbol0[1839] = 'b00000000;
    ram_symbol1[1839] = 'b00000000;
    ram_symbol2[1839] = 'b00000000;
    ram_symbol3[1839] = 'b00000000;
    ram_symbol0[1840] = 'b00000000;
    ram_symbol1[1840] = 'b00000000;
    ram_symbol2[1840] = 'b00000000;
    ram_symbol3[1840] = 'b00000000;
    ram_symbol0[1841] = 'b00000000;
    ram_symbol1[1841] = 'b00000000;
    ram_symbol2[1841] = 'b00000000;
    ram_symbol3[1841] = 'b00000000;
    ram_symbol0[1842] = 'b00000000;
    ram_symbol1[1842] = 'b00000000;
    ram_symbol2[1842] = 'b00000000;
    ram_symbol3[1842] = 'b00000000;
    ram_symbol0[1843] = 'b00000000;
    ram_symbol1[1843] = 'b00000000;
    ram_symbol2[1843] = 'b00000000;
    ram_symbol3[1843] = 'b00000000;
    ram_symbol0[1844] = 'b00000000;
    ram_symbol1[1844] = 'b00000000;
    ram_symbol2[1844] = 'b00000000;
    ram_symbol3[1844] = 'b00000000;
    ram_symbol0[1845] = 'b00000000;
    ram_symbol1[1845] = 'b00000000;
    ram_symbol2[1845] = 'b00000000;
    ram_symbol3[1845] = 'b00000000;
    ram_symbol0[1846] = 'b00000000;
    ram_symbol1[1846] = 'b00000000;
    ram_symbol2[1846] = 'b00000000;
    ram_symbol3[1846] = 'b00000000;
    ram_symbol0[1847] = 'b00000000;
    ram_symbol1[1847] = 'b00000000;
    ram_symbol2[1847] = 'b00000000;
    ram_symbol3[1847] = 'b00000000;
    ram_symbol0[1848] = 'b00000000;
    ram_symbol1[1848] = 'b00000000;
    ram_symbol2[1848] = 'b00000000;
    ram_symbol3[1848] = 'b00000000;
    ram_symbol0[1849] = 'b00000000;
    ram_symbol1[1849] = 'b00000000;
    ram_symbol2[1849] = 'b00000000;
    ram_symbol3[1849] = 'b00000000;
    ram_symbol0[1850] = 'b00000000;
    ram_symbol1[1850] = 'b00000000;
    ram_symbol2[1850] = 'b00000000;
    ram_symbol3[1850] = 'b00000000;
    ram_symbol0[1851] = 'b00000000;
    ram_symbol1[1851] = 'b00000000;
    ram_symbol2[1851] = 'b00000000;
    ram_symbol3[1851] = 'b00000000;
    ram_symbol0[1852] = 'b00000000;
    ram_symbol1[1852] = 'b00000000;
    ram_symbol2[1852] = 'b00000000;
    ram_symbol3[1852] = 'b00000000;
    ram_symbol0[1853] = 'b00000000;
    ram_symbol1[1853] = 'b00000000;
    ram_symbol2[1853] = 'b00000000;
    ram_symbol3[1853] = 'b00000000;
    ram_symbol0[1854] = 'b00000000;
    ram_symbol1[1854] = 'b00000000;
    ram_symbol2[1854] = 'b00000000;
    ram_symbol3[1854] = 'b00000000;
    ram_symbol0[1855] = 'b00000000;
    ram_symbol1[1855] = 'b00000000;
    ram_symbol2[1855] = 'b00000000;
    ram_symbol3[1855] = 'b00000000;
    ram_symbol0[1856] = 'b00000000;
    ram_symbol1[1856] = 'b00000000;
    ram_symbol2[1856] = 'b00000000;
    ram_symbol3[1856] = 'b00000000;
    ram_symbol0[1857] = 'b00000000;
    ram_symbol1[1857] = 'b00000000;
    ram_symbol2[1857] = 'b00000000;
    ram_symbol3[1857] = 'b00000000;
    ram_symbol0[1858] = 'b00000000;
    ram_symbol1[1858] = 'b00000000;
    ram_symbol2[1858] = 'b00000000;
    ram_symbol3[1858] = 'b00000000;
    ram_symbol0[1859] = 'b00000000;
    ram_symbol1[1859] = 'b00000000;
    ram_symbol2[1859] = 'b00000000;
    ram_symbol3[1859] = 'b00000000;
    ram_symbol0[1860] = 'b00000000;
    ram_symbol1[1860] = 'b00000000;
    ram_symbol2[1860] = 'b00000000;
    ram_symbol3[1860] = 'b00000000;
    ram_symbol0[1861] = 'b00000000;
    ram_symbol1[1861] = 'b00000000;
    ram_symbol2[1861] = 'b00000000;
    ram_symbol3[1861] = 'b00000000;
    ram_symbol0[1862] = 'b00000000;
    ram_symbol1[1862] = 'b00000000;
    ram_symbol2[1862] = 'b00000000;
    ram_symbol3[1862] = 'b00000000;
    ram_symbol0[1863] = 'b00000000;
    ram_symbol1[1863] = 'b00000000;
    ram_symbol2[1863] = 'b00000000;
    ram_symbol3[1863] = 'b00000000;
    ram_symbol0[1864] = 'b00000000;
    ram_symbol1[1864] = 'b00000000;
    ram_symbol2[1864] = 'b00000000;
    ram_symbol3[1864] = 'b00000000;
    ram_symbol0[1865] = 'b00000000;
    ram_symbol1[1865] = 'b00000000;
    ram_symbol2[1865] = 'b00000000;
    ram_symbol3[1865] = 'b00000000;
    ram_symbol0[1866] = 'b00000000;
    ram_symbol1[1866] = 'b00000000;
    ram_symbol2[1866] = 'b00000000;
    ram_symbol3[1866] = 'b00000000;
    ram_symbol0[1867] = 'b00000000;
    ram_symbol1[1867] = 'b00000000;
    ram_symbol2[1867] = 'b00000000;
    ram_symbol3[1867] = 'b00000000;
    ram_symbol0[1868] = 'b00000000;
    ram_symbol1[1868] = 'b00000000;
    ram_symbol2[1868] = 'b00000000;
    ram_symbol3[1868] = 'b00000000;
    ram_symbol0[1869] = 'b00000000;
    ram_symbol1[1869] = 'b00000000;
    ram_symbol2[1869] = 'b00000000;
    ram_symbol3[1869] = 'b00000000;
    ram_symbol0[1870] = 'b00000000;
    ram_symbol1[1870] = 'b00000000;
    ram_symbol2[1870] = 'b00000000;
    ram_symbol3[1870] = 'b00000000;
    ram_symbol0[1871] = 'b00000000;
    ram_symbol1[1871] = 'b00000000;
    ram_symbol2[1871] = 'b00000000;
    ram_symbol3[1871] = 'b00000000;
    ram_symbol0[1872] = 'b00000000;
    ram_symbol1[1872] = 'b00000000;
    ram_symbol2[1872] = 'b00000000;
    ram_symbol3[1872] = 'b00000000;
    ram_symbol0[1873] = 'b00000000;
    ram_symbol1[1873] = 'b00000000;
    ram_symbol2[1873] = 'b00000000;
    ram_symbol3[1873] = 'b00000000;
    ram_symbol0[1874] = 'b00000000;
    ram_symbol1[1874] = 'b00000000;
    ram_symbol2[1874] = 'b00000000;
    ram_symbol3[1874] = 'b00000000;
    ram_symbol0[1875] = 'b00000000;
    ram_symbol1[1875] = 'b00000000;
    ram_symbol2[1875] = 'b00000000;
    ram_symbol3[1875] = 'b00000000;
    ram_symbol0[1876] = 'b00000000;
    ram_symbol1[1876] = 'b00000000;
    ram_symbol2[1876] = 'b00000000;
    ram_symbol3[1876] = 'b00000000;
    ram_symbol0[1877] = 'b00000000;
    ram_symbol1[1877] = 'b00000000;
    ram_symbol2[1877] = 'b00000000;
    ram_symbol3[1877] = 'b00000000;
    ram_symbol0[1878] = 'b00000000;
    ram_symbol1[1878] = 'b00000000;
    ram_symbol2[1878] = 'b00000000;
    ram_symbol3[1878] = 'b00000000;
    ram_symbol0[1879] = 'b00000000;
    ram_symbol1[1879] = 'b00000000;
    ram_symbol2[1879] = 'b00000000;
    ram_symbol3[1879] = 'b00000000;
    ram_symbol0[1880] = 'b00000000;
    ram_symbol1[1880] = 'b00000000;
    ram_symbol2[1880] = 'b00000000;
    ram_symbol3[1880] = 'b00000000;
    ram_symbol0[1881] = 'b00000000;
    ram_symbol1[1881] = 'b00000000;
    ram_symbol2[1881] = 'b00000000;
    ram_symbol3[1881] = 'b00000000;
    ram_symbol0[1882] = 'b00000000;
    ram_symbol1[1882] = 'b00000000;
    ram_symbol2[1882] = 'b00000000;
    ram_symbol3[1882] = 'b00000000;
    ram_symbol0[1883] = 'b00000000;
    ram_symbol1[1883] = 'b00000000;
    ram_symbol2[1883] = 'b00000000;
    ram_symbol3[1883] = 'b00000000;
    ram_symbol0[1884] = 'b00000000;
    ram_symbol1[1884] = 'b00000000;
    ram_symbol2[1884] = 'b00000000;
    ram_symbol3[1884] = 'b00000000;
    ram_symbol0[1885] = 'b00000000;
    ram_symbol1[1885] = 'b00000000;
    ram_symbol2[1885] = 'b00000000;
    ram_symbol3[1885] = 'b00000000;
    ram_symbol0[1886] = 'b00000000;
    ram_symbol1[1886] = 'b00000000;
    ram_symbol2[1886] = 'b00000000;
    ram_symbol3[1886] = 'b00000000;
    ram_symbol0[1887] = 'b00000000;
    ram_symbol1[1887] = 'b00000000;
    ram_symbol2[1887] = 'b00000000;
    ram_symbol3[1887] = 'b00000000;
    ram_symbol0[1888] = 'b00000000;
    ram_symbol1[1888] = 'b00000000;
    ram_symbol2[1888] = 'b00000000;
    ram_symbol3[1888] = 'b00000000;
    ram_symbol0[1889] = 'b00000000;
    ram_symbol1[1889] = 'b00000000;
    ram_symbol2[1889] = 'b00000000;
    ram_symbol3[1889] = 'b00000000;
    ram_symbol0[1890] = 'b00000000;
    ram_symbol1[1890] = 'b00000000;
    ram_symbol2[1890] = 'b00000000;
    ram_symbol3[1890] = 'b00000000;
    ram_symbol0[1891] = 'b00000000;
    ram_symbol1[1891] = 'b00000000;
    ram_symbol2[1891] = 'b00000000;
    ram_symbol3[1891] = 'b00000000;
    ram_symbol0[1892] = 'b00000000;
    ram_symbol1[1892] = 'b00000000;
    ram_symbol2[1892] = 'b00000000;
    ram_symbol3[1892] = 'b00000000;
    ram_symbol0[1893] = 'b00000000;
    ram_symbol1[1893] = 'b00000000;
    ram_symbol2[1893] = 'b00000000;
    ram_symbol3[1893] = 'b00000000;
    ram_symbol0[1894] = 'b00000000;
    ram_symbol1[1894] = 'b00000000;
    ram_symbol2[1894] = 'b00000000;
    ram_symbol3[1894] = 'b00000000;
    ram_symbol0[1895] = 'b00000000;
    ram_symbol1[1895] = 'b00000000;
    ram_symbol2[1895] = 'b00000000;
    ram_symbol3[1895] = 'b00000000;
    ram_symbol0[1896] = 'b00000000;
    ram_symbol1[1896] = 'b00000000;
    ram_symbol2[1896] = 'b00000000;
    ram_symbol3[1896] = 'b00000000;
    ram_symbol0[1897] = 'b00000000;
    ram_symbol1[1897] = 'b00000000;
    ram_symbol2[1897] = 'b00000000;
    ram_symbol3[1897] = 'b00000000;
    ram_symbol0[1898] = 'b00000000;
    ram_symbol1[1898] = 'b00000000;
    ram_symbol2[1898] = 'b00000000;
    ram_symbol3[1898] = 'b00000000;
    ram_symbol0[1899] = 'b00000000;
    ram_symbol1[1899] = 'b00000000;
    ram_symbol2[1899] = 'b00000000;
    ram_symbol3[1899] = 'b00000000;
    ram_symbol0[1900] = 'b00000000;
    ram_symbol1[1900] = 'b00000000;
    ram_symbol2[1900] = 'b00000000;
    ram_symbol3[1900] = 'b00000000;
    ram_symbol0[1901] = 'b00000000;
    ram_symbol1[1901] = 'b00000000;
    ram_symbol2[1901] = 'b00000000;
    ram_symbol3[1901] = 'b00000000;
    ram_symbol0[1902] = 'b00000000;
    ram_symbol1[1902] = 'b00000000;
    ram_symbol2[1902] = 'b00000000;
    ram_symbol3[1902] = 'b00000000;
    ram_symbol0[1903] = 'b00000000;
    ram_symbol1[1903] = 'b00000000;
    ram_symbol2[1903] = 'b00000000;
    ram_symbol3[1903] = 'b00000000;
    ram_symbol0[1904] = 'b00000000;
    ram_symbol1[1904] = 'b00000000;
    ram_symbol2[1904] = 'b00000000;
    ram_symbol3[1904] = 'b00000000;
    ram_symbol0[1905] = 'b00000000;
    ram_symbol1[1905] = 'b00000000;
    ram_symbol2[1905] = 'b00000000;
    ram_symbol3[1905] = 'b00000000;
    ram_symbol0[1906] = 'b00000000;
    ram_symbol1[1906] = 'b00000000;
    ram_symbol2[1906] = 'b00000000;
    ram_symbol3[1906] = 'b00000000;
    ram_symbol0[1907] = 'b00000000;
    ram_symbol1[1907] = 'b00000000;
    ram_symbol2[1907] = 'b00000000;
    ram_symbol3[1907] = 'b00000000;
    ram_symbol0[1908] = 'b00000000;
    ram_symbol1[1908] = 'b00000000;
    ram_symbol2[1908] = 'b00000000;
    ram_symbol3[1908] = 'b00000000;
    ram_symbol0[1909] = 'b00000000;
    ram_symbol1[1909] = 'b00000000;
    ram_symbol2[1909] = 'b00000000;
    ram_symbol3[1909] = 'b00000000;
    ram_symbol0[1910] = 'b00000000;
    ram_symbol1[1910] = 'b00000000;
    ram_symbol2[1910] = 'b00000000;
    ram_symbol3[1910] = 'b00000000;
    ram_symbol0[1911] = 'b00000000;
    ram_symbol1[1911] = 'b00000000;
    ram_symbol2[1911] = 'b00000000;
    ram_symbol3[1911] = 'b00000000;
    ram_symbol0[1912] = 'b00000000;
    ram_symbol1[1912] = 'b00000000;
    ram_symbol2[1912] = 'b00000000;
    ram_symbol3[1912] = 'b00000000;
    ram_symbol0[1913] = 'b00000000;
    ram_symbol1[1913] = 'b00000000;
    ram_symbol2[1913] = 'b00000000;
    ram_symbol3[1913] = 'b00000000;
    ram_symbol0[1914] = 'b00000000;
    ram_symbol1[1914] = 'b00000000;
    ram_symbol2[1914] = 'b00000000;
    ram_symbol3[1914] = 'b00000000;
    ram_symbol0[1915] = 'b00000000;
    ram_symbol1[1915] = 'b00000000;
    ram_symbol2[1915] = 'b00000000;
    ram_symbol3[1915] = 'b00000000;
    ram_symbol0[1916] = 'b00000000;
    ram_symbol1[1916] = 'b00000000;
    ram_symbol2[1916] = 'b00000000;
    ram_symbol3[1916] = 'b00000000;
    ram_symbol0[1917] = 'b00000000;
    ram_symbol1[1917] = 'b00000000;
    ram_symbol2[1917] = 'b00000000;
    ram_symbol3[1917] = 'b00000000;
    ram_symbol0[1918] = 'b00000000;
    ram_symbol1[1918] = 'b00000000;
    ram_symbol2[1918] = 'b00000000;
    ram_symbol3[1918] = 'b00000000;
    ram_symbol0[1919] = 'b00000000;
    ram_symbol1[1919] = 'b00000000;
    ram_symbol2[1919] = 'b00000000;
    ram_symbol3[1919] = 'b00000000;
    ram_symbol0[1920] = 'b00000000;
    ram_symbol1[1920] = 'b00000000;
    ram_symbol2[1920] = 'b00000000;
    ram_symbol3[1920] = 'b00000000;
    ram_symbol0[1921] = 'b00000000;
    ram_symbol1[1921] = 'b00000000;
    ram_symbol2[1921] = 'b00000000;
    ram_symbol3[1921] = 'b00000000;
    ram_symbol0[1922] = 'b00000000;
    ram_symbol1[1922] = 'b00000000;
    ram_symbol2[1922] = 'b00000000;
    ram_symbol3[1922] = 'b00000000;
    ram_symbol0[1923] = 'b00000000;
    ram_symbol1[1923] = 'b00000000;
    ram_symbol2[1923] = 'b00000000;
    ram_symbol3[1923] = 'b00000000;
    ram_symbol0[1924] = 'b00000000;
    ram_symbol1[1924] = 'b00000000;
    ram_symbol2[1924] = 'b00000000;
    ram_symbol3[1924] = 'b00000000;
    ram_symbol0[1925] = 'b00000000;
    ram_symbol1[1925] = 'b00000000;
    ram_symbol2[1925] = 'b00000000;
    ram_symbol3[1925] = 'b00000000;
    ram_symbol0[1926] = 'b00000000;
    ram_symbol1[1926] = 'b00000000;
    ram_symbol2[1926] = 'b00000000;
    ram_symbol3[1926] = 'b00000000;
    ram_symbol0[1927] = 'b00000000;
    ram_symbol1[1927] = 'b00000000;
    ram_symbol2[1927] = 'b00000000;
    ram_symbol3[1927] = 'b00000000;
    ram_symbol0[1928] = 'b00000000;
    ram_symbol1[1928] = 'b00000000;
    ram_symbol2[1928] = 'b00000000;
    ram_symbol3[1928] = 'b00000000;
    ram_symbol0[1929] = 'b00000000;
    ram_symbol1[1929] = 'b00000000;
    ram_symbol2[1929] = 'b00000000;
    ram_symbol3[1929] = 'b00000000;
    ram_symbol0[1930] = 'b00000000;
    ram_symbol1[1930] = 'b00000000;
    ram_symbol2[1930] = 'b00000000;
    ram_symbol3[1930] = 'b00000000;
    ram_symbol0[1931] = 'b00000000;
    ram_symbol1[1931] = 'b00000000;
    ram_symbol2[1931] = 'b00000000;
    ram_symbol3[1931] = 'b00000000;
    ram_symbol0[1932] = 'b00000000;
    ram_symbol1[1932] = 'b00000000;
    ram_symbol2[1932] = 'b00000000;
    ram_symbol3[1932] = 'b00000000;
    ram_symbol0[1933] = 'b00000000;
    ram_symbol1[1933] = 'b00000000;
    ram_symbol2[1933] = 'b00000000;
    ram_symbol3[1933] = 'b00000000;
    ram_symbol0[1934] = 'b00000000;
    ram_symbol1[1934] = 'b00000000;
    ram_symbol2[1934] = 'b00000000;
    ram_symbol3[1934] = 'b00000000;
    ram_symbol0[1935] = 'b00000000;
    ram_symbol1[1935] = 'b00000000;
    ram_symbol2[1935] = 'b00000000;
    ram_symbol3[1935] = 'b00000000;
    ram_symbol0[1936] = 'b00000000;
    ram_symbol1[1936] = 'b00000000;
    ram_symbol2[1936] = 'b00000000;
    ram_symbol3[1936] = 'b00000000;
    ram_symbol0[1937] = 'b00000000;
    ram_symbol1[1937] = 'b00000000;
    ram_symbol2[1937] = 'b00000000;
    ram_symbol3[1937] = 'b00000000;
    ram_symbol0[1938] = 'b00000000;
    ram_symbol1[1938] = 'b00000000;
    ram_symbol2[1938] = 'b00000000;
    ram_symbol3[1938] = 'b00000000;
    ram_symbol0[1939] = 'b00000000;
    ram_symbol1[1939] = 'b00000000;
    ram_symbol2[1939] = 'b00000000;
    ram_symbol3[1939] = 'b00000000;
    ram_symbol0[1940] = 'b00000000;
    ram_symbol1[1940] = 'b00000000;
    ram_symbol2[1940] = 'b00000000;
    ram_symbol3[1940] = 'b00000000;
    ram_symbol0[1941] = 'b00000000;
    ram_symbol1[1941] = 'b00000000;
    ram_symbol2[1941] = 'b00000000;
    ram_symbol3[1941] = 'b00000000;
    ram_symbol0[1942] = 'b00000000;
    ram_symbol1[1942] = 'b00000000;
    ram_symbol2[1942] = 'b00000000;
    ram_symbol3[1942] = 'b00000000;
    ram_symbol0[1943] = 'b00000000;
    ram_symbol1[1943] = 'b00000000;
    ram_symbol2[1943] = 'b00000000;
    ram_symbol3[1943] = 'b00000000;
    ram_symbol0[1944] = 'b00000000;
    ram_symbol1[1944] = 'b00000000;
    ram_symbol2[1944] = 'b00000000;
    ram_symbol3[1944] = 'b00000000;
    ram_symbol0[1945] = 'b00000000;
    ram_symbol1[1945] = 'b00000000;
    ram_symbol2[1945] = 'b00000000;
    ram_symbol3[1945] = 'b00000000;
    ram_symbol0[1946] = 'b00000000;
    ram_symbol1[1946] = 'b00000000;
    ram_symbol2[1946] = 'b00000000;
    ram_symbol3[1946] = 'b00000000;
    ram_symbol0[1947] = 'b00000000;
    ram_symbol1[1947] = 'b00000000;
    ram_symbol2[1947] = 'b00000000;
    ram_symbol3[1947] = 'b00000000;
    ram_symbol0[1948] = 'b00000000;
    ram_symbol1[1948] = 'b00000000;
    ram_symbol2[1948] = 'b00000000;
    ram_symbol3[1948] = 'b00000000;
    ram_symbol0[1949] = 'b00000000;
    ram_symbol1[1949] = 'b00000000;
    ram_symbol2[1949] = 'b00000000;
    ram_symbol3[1949] = 'b00000000;
    ram_symbol0[1950] = 'b00000000;
    ram_symbol1[1950] = 'b00000000;
    ram_symbol2[1950] = 'b00000000;
    ram_symbol3[1950] = 'b00000000;
    ram_symbol0[1951] = 'b00000000;
    ram_symbol1[1951] = 'b00000000;
    ram_symbol2[1951] = 'b00000000;
    ram_symbol3[1951] = 'b00000000;
    ram_symbol0[1952] = 'b00000000;
    ram_symbol1[1952] = 'b00000000;
    ram_symbol2[1952] = 'b00000000;
    ram_symbol3[1952] = 'b00000000;
    ram_symbol0[1953] = 'b00000000;
    ram_symbol1[1953] = 'b00000000;
    ram_symbol2[1953] = 'b00000000;
    ram_symbol3[1953] = 'b00000000;
    ram_symbol0[1954] = 'b00000000;
    ram_symbol1[1954] = 'b00000000;
    ram_symbol2[1954] = 'b00000000;
    ram_symbol3[1954] = 'b00000000;
    ram_symbol0[1955] = 'b00000000;
    ram_symbol1[1955] = 'b00000000;
    ram_symbol2[1955] = 'b00000000;
    ram_symbol3[1955] = 'b00000000;
    ram_symbol0[1956] = 'b00000000;
    ram_symbol1[1956] = 'b00000000;
    ram_symbol2[1956] = 'b00000000;
    ram_symbol3[1956] = 'b00000000;
    ram_symbol0[1957] = 'b00000000;
    ram_symbol1[1957] = 'b00000000;
    ram_symbol2[1957] = 'b00000000;
    ram_symbol3[1957] = 'b00000000;
    ram_symbol0[1958] = 'b00000000;
    ram_symbol1[1958] = 'b00000000;
    ram_symbol2[1958] = 'b00000000;
    ram_symbol3[1958] = 'b00000000;
    ram_symbol0[1959] = 'b00000000;
    ram_symbol1[1959] = 'b00000000;
    ram_symbol2[1959] = 'b00000000;
    ram_symbol3[1959] = 'b00000000;
    ram_symbol0[1960] = 'b00000000;
    ram_symbol1[1960] = 'b00000000;
    ram_symbol2[1960] = 'b00000000;
    ram_symbol3[1960] = 'b00000000;
    ram_symbol0[1961] = 'b00000000;
    ram_symbol1[1961] = 'b00000000;
    ram_symbol2[1961] = 'b00000000;
    ram_symbol3[1961] = 'b00000000;
    ram_symbol0[1962] = 'b00000000;
    ram_symbol1[1962] = 'b00000000;
    ram_symbol2[1962] = 'b00000000;
    ram_symbol3[1962] = 'b00000000;
    ram_symbol0[1963] = 'b00000000;
    ram_symbol1[1963] = 'b00000000;
    ram_symbol2[1963] = 'b00000000;
    ram_symbol3[1963] = 'b00000000;
    ram_symbol0[1964] = 'b00000000;
    ram_symbol1[1964] = 'b00000000;
    ram_symbol2[1964] = 'b00000000;
    ram_symbol3[1964] = 'b00000000;
    ram_symbol0[1965] = 'b00000000;
    ram_symbol1[1965] = 'b00000000;
    ram_symbol2[1965] = 'b00000000;
    ram_symbol3[1965] = 'b00000000;
    ram_symbol0[1966] = 'b00000000;
    ram_symbol1[1966] = 'b00000000;
    ram_symbol2[1966] = 'b00000000;
    ram_symbol3[1966] = 'b00000000;
    ram_symbol0[1967] = 'b00000000;
    ram_symbol1[1967] = 'b00000000;
    ram_symbol2[1967] = 'b00000000;
    ram_symbol3[1967] = 'b00000000;
    ram_symbol0[1968] = 'b00000000;
    ram_symbol1[1968] = 'b00000000;
    ram_symbol2[1968] = 'b00000000;
    ram_symbol3[1968] = 'b00000000;
    ram_symbol0[1969] = 'b00000000;
    ram_symbol1[1969] = 'b00000000;
    ram_symbol2[1969] = 'b00000000;
    ram_symbol3[1969] = 'b00000000;
    ram_symbol0[1970] = 'b00000000;
    ram_symbol1[1970] = 'b00000000;
    ram_symbol2[1970] = 'b00000000;
    ram_symbol3[1970] = 'b00000000;
    ram_symbol0[1971] = 'b00000000;
    ram_symbol1[1971] = 'b00000000;
    ram_symbol2[1971] = 'b00000000;
    ram_symbol3[1971] = 'b00000000;
    ram_symbol0[1972] = 'b00000000;
    ram_symbol1[1972] = 'b00000000;
    ram_symbol2[1972] = 'b00000000;
    ram_symbol3[1972] = 'b00000000;
    ram_symbol0[1973] = 'b00000000;
    ram_symbol1[1973] = 'b00000000;
    ram_symbol2[1973] = 'b00000000;
    ram_symbol3[1973] = 'b00000000;
    ram_symbol0[1974] = 'b00000000;
    ram_symbol1[1974] = 'b00000000;
    ram_symbol2[1974] = 'b00000000;
    ram_symbol3[1974] = 'b00000000;
    ram_symbol0[1975] = 'b00000000;
    ram_symbol1[1975] = 'b00000000;
    ram_symbol2[1975] = 'b00000000;
    ram_symbol3[1975] = 'b00000000;
    ram_symbol0[1976] = 'b00000000;
    ram_symbol1[1976] = 'b00000000;
    ram_symbol2[1976] = 'b00000000;
    ram_symbol3[1976] = 'b00000000;
    ram_symbol0[1977] = 'b00000000;
    ram_symbol1[1977] = 'b00000000;
    ram_symbol2[1977] = 'b00000000;
    ram_symbol3[1977] = 'b00000000;
    ram_symbol0[1978] = 'b00000000;
    ram_symbol1[1978] = 'b00000000;
    ram_symbol2[1978] = 'b00000000;
    ram_symbol3[1978] = 'b00000000;
    ram_symbol0[1979] = 'b00000000;
    ram_symbol1[1979] = 'b00000000;
    ram_symbol2[1979] = 'b00000000;
    ram_symbol3[1979] = 'b00000000;
    ram_symbol0[1980] = 'b00000000;
    ram_symbol1[1980] = 'b00000000;
    ram_symbol2[1980] = 'b00000000;
    ram_symbol3[1980] = 'b00000000;
    ram_symbol0[1981] = 'b00000000;
    ram_symbol1[1981] = 'b00000000;
    ram_symbol2[1981] = 'b00000000;
    ram_symbol3[1981] = 'b00000000;
    ram_symbol0[1982] = 'b00000000;
    ram_symbol1[1982] = 'b00000000;
    ram_symbol2[1982] = 'b00000000;
    ram_symbol3[1982] = 'b00000000;
    ram_symbol0[1983] = 'b00000000;
    ram_symbol1[1983] = 'b00000000;
    ram_symbol2[1983] = 'b00000000;
    ram_symbol3[1983] = 'b00000000;
    ram_symbol0[1984] = 'b00000000;
    ram_symbol1[1984] = 'b00000000;
    ram_symbol2[1984] = 'b00000000;
    ram_symbol3[1984] = 'b00000000;
    ram_symbol0[1985] = 'b00000000;
    ram_symbol1[1985] = 'b00000000;
    ram_symbol2[1985] = 'b00000000;
    ram_symbol3[1985] = 'b00000000;
    ram_symbol0[1986] = 'b00000000;
    ram_symbol1[1986] = 'b00000000;
    ram_symbol2[1986] = 'b00000000;
    ram_symbol3[1986] = 'b00000000;
    ram_symbol0[1987] = 'b00000000;
    ram_symbol1[1987] = 'b00000000;
    ram_symbol2[1987] = 'b00000000;
    ram_symbol3[1987] = 'b00000000;
    ram_symbol0[1988] = 'b00000000;
    ram_symbol1[1988] = 'b00000000;
    ram_symbol2[1988] = 'b00000000;
    ram_symbol3[1988] = 'b00000000;
    ram_symbol0[1989] = 'b00000000;
    ram_symbol1[1989] = 'b00000000;
    ram_symbol2[1989] = 'b00000000;
    ram_symbol3[1989] = 'b00000000;
    ram_symbol0[1990] = 'b00000000;
    ram_symbol1[1990] = 'b00000000;
    ram_symbol2[1990] = 'b00000000;
    ram_symbol3[1990] = 'b00000000;
    ram_symbol0[1991] = 'b00000000;
    ram_symbol1[1991] = 'b00000000;
    ram_symbol2[1991] = 'b00000000;
    ram_symbol3[1991] = 'b00000000;
    ram_symbol0[1992] = 'b00000000;
    ram_symbol1[1992] = 'b00000000;
    ram_symbol2[1992] = 'b00000000;
    ram_symbol3[1992] = 'b00000000;
    ram_symbol0[1993] = 'b00000000;
    ram_symbol1[1993] = 'b00000000;
    ram_symbol2[1993] = 'b00000000;
    ram_symbol3[1993] = 'b00000000;
    ram_symbol0[1994] = 'b00000000;
    ram_symbol1[1994] = 'b00000000;
    ram_symbol2[1994] = 'b00000000;
    ram_symbol3[1994] = 'b00000000;
    ram_symbol0[1995] = 'b00000000;
    ram_symbol1[1995] = 'b00000000;
    ram_symbol2[1995] = 'b00000000;
    ram_symbol3[1995] = 'b00000000;
    ram_symbol0[1996] = 'b00000000;
    ram_symbol1[1996] = 'b00000000;
    ram_symbol2[1996] = 'b00000000;
    ram_symbol3[1996] = 'b00000000;
    ram_symbol0[1997] = 'b00000000;
    ram_symbol1[1997] = 'b00000000;
    ram_symbol2[1997] = 'b00000000;
    ram_symbol3[1997] = 'b00000000;
    ram_symbol0[1998] = 'b00000000;
    ram_symbol1[1998] = 'b00000000;
    ram_symbol2[1998] = 'b00000000;
    ram_symbol3[1998] = 'b00000000;
    ram_symbol0[1999] = 'b00000000;
    ram_symbol1[1999] = 'b00000000;
    ram_symbol2[1999] = 'b00000000;
    ram_symbol3[1999] = 'b00000000;
    ram_symbol0[2000] = 'b00000000;
    ram_symbol1[2000] = 'b00000000;
    ram_symbol2[2000] = 'b00000000;
    ram_symbol3[2000] = 'b00000000;
    ram_symbol0[2001] = 'b00000000;
    ram_symbol1[2001] = 'b00000000;
    ram_symbol2[2001] = 'b00000000;
    ram_symbol3[2001] = 'b00000000;
    ram_symbol0[2002] = 'b00000000;
    ram_symbol1[2002] = 'b00000000;
    ram_symbol2[2002] = 'b00000000;
    ram_symbol3[2002] = 'b00000000;
    ram_symbol0[2003] = 'b00000000;
    ram_symbol1[2003] = 'b00000000;
    ram_symbol2[2003] = 'b00000000;
    ram_symbol3[2003] = 'b00000000;
    ram_symbol0[2004] = 'b00000000;
    ram_symbol1[2004] = 'b00000000;
    ram_symbol2[2004] = 'b00000000;
    ram_symbol3[2004] = 'b00000000;
    ram_symbol0[2005] = 'b00000000;
    ram_symbol1[2005] = 'b00000000;
    ram_symbol2[2005] = 'b00000000;
    ram_symbol3[2005] = 'b00000000;
    ram_symbol0[2006] = 'b00000000;
    ram_symbol1[2006] = 'b00000000;
    ram_symbol2[2006] = 'b00000000;
    ram_symbol3[2006] = 'b00000000;
    ram_symbol0[2007] = 'b00000000;
    ram_symbol1[2007] = 'b00000000;
    ram_symbol2[2007] = 'b00000000;
    ram_symbol3[2007] = 'b00000000;
    ram_symbol0[2008] = 'b00000000;
    ram_symbol1[2008] = 'b00000000;
    ram_symbol2[2008] = 'b00000000;
    ram_symbol3[2008] = 'b00000000;
    ram_symbol0[2009] = 'b00000000;
    ram_symbol1[2009] = 'b00000000;
    ram_symbol2[2009] = 'b00000000;
    ram_symbol3[2009] = 'b00000000;
    ram_symbol0[2010] = 'b00000000;
    ram_symbol1[2010] = 'b00000000;
    ram_symbol2[2010] = 'b00000000;
    ram_symbol3[2010] = 'b00000000;
    ram_symbol0[2011] = 'b00000000;
    ram_symbol1[2011] = 'b00000000;
    ram_symbol2[2011] = 'b00000000;
    ram_symbol3[2011] = 'b00000000;
    ram_symbol0[2012] = 'b00000000;
    ram_symbol1[2012] = 'b00000000;
    ram_symbol2[2012] = 'b00000000;
    ram_symbol3[2012] = 'b00000000;
    ram_symbol0[2013] = 'b00000000;
    ram_symbol1[2013] = 'b00000000;
    ram_symbol2[2013] = 'b00000000;
    ram_symbol3[2013] = 'b00000000;
    ram_symbol0[2014] = 'b00000000;
    ram_symbol1[2014] = 'b00000000;
    ram_symbol2[2014] = 'b00000000;
    ram_symbol3[2014] = 'b00000000;
    ram_symbol0[2015] = 'b00000000;
    ram_symbol1[2015] = 'b00000000;
    ram_symbol2[2015] = 'b00000000;
    ram_symbol3[2015] = 'b00000000;
    ram_symbol0[2016] = 'b00000000;
    ram_symbol1[2016] = 'b00000000;
    ram_symbol2[2016] = 'b00000000;
    ram_symbol3[2016] = 'b00000000;
    ram_symbol0[2017] = 'b00000000;
    ram_symbol1[2017] = 'b00000000;
    ram_symbol2[2017] = 'b00000000;
    ram_symbol3[2017] = 'b00000000;
    ram_symbol0[2018] = 'b00000000;
    ram_symbol1[2018] = 'b00000000;
    ram_symbol2[2018] = 'b00000000;
    ram_symbol3[2018] = 'b00000000;
    ram_symbol0[2019] = 'b00000000;
    ram_symbol1[2019] = 'b00000000;
    ram_symbol2[2019] = 'b00000000;
    ram_symbol3[2019] = 'b00000000;
    ram_symbol0[2020] = 'b00000000;
    ram_symbol1[2020] = 'b00000000;
    ram_symbol2[2020] = 'b00000000;
    ram_symbol3[2020] = 'b00000000;
    ram_symbol0[2021] = 'b00000000;
    ram_symbol1[2021] = 'b00000000;
    ram_symbol2[2021] = 'b00000000;
    ram_symbol3[2021] = 'b00000000;
    ram_symbol0[2022] = 'b00000000;
    ram_symbol1[2022] = 'b00000000;
    ram_symbol2[2022] = 'b00000000;
    ram_symbol3[2022] = 'b00000000;
    ram_symbol0[2023] = 'b00000000;
    ram_symbol1[2023] = 'b00000000;
    ram_symbol2[2023] = 'b00000000;
    ram_symbol3[2023] = 'b00000000;
    ram_symbol0[2024] = 'b00000000;
    ram_symbol1[2024] = 'b00000000;
    ram_symbol2[2024] = 'b00000000;
    ram_symbol3[2024] = 'b00000000;
    ram_symbol0[2025] = 'b00000000;
    ram_symbol1[2025] = 'b00000000;
    ram_symbol2[2025] = 'b00000000;
    ram_symbol3[2025] = 'b00000000;
    ram_symbol0[2026] = 'b00000000;
    ram_symbol1[2026] = 'b00000000;
    ram_symbol2[2026] = 'b00000000;
    ram_symbol3[2026] = 'b00000000;
    ram_symbol0[2027] = 'b00000000;
    ram_symbol1[2027] = 'b00000000;
    ram_symbol2[2027] = 'b00000000;
    ram_symbol3[2027] = 'b00000000;
    ram_symbol0[2028] = 'b00000000;
    ram_symbol1[2028] = 'b00000000;
    ram_symbol2[2028] = 'b00000000;
    ram_symbol3[2028] = 'b00000000;
    ram_symbol0[2029] = 'b00000000;
    ram_symbol1[2029] = 'b00000000;
    ram_symbol2[2029] = 'b00000000;
    ram_symbol3[2029] = 'b00000000;
    ram_symbol0[2030] = 'b00000000;
    ram_symbol1[2030] = 'b00000000;
    ram_symbol2[2030] = 'b00000000;
    ram_symbol3[2030] = 'b00000000;
    ram_symbol0[2031] = 'b00000000;
    ram_symbol1[2031] = 'b00000000;
    ram_symbol2[2031] = 'b00000000;
    ram_symbol3[2031] = 'b00000000;
    ram_symbol0[2032] = 'b00000000;
    ram_symbol1[2032] = 'b00000000;
    ram_symbol2[2032] = 'b00000000;
    ram_symbol3[2032] = 'b00000000;
    ram_symbol0[2033] = 'b00000000;
    ram_symbol1[2033] = 'b00000000;
    ram_symbol2[2033] = 'b00000000;
    ram_symbol3[2033] = 'b00000000;
    ram_symbol0[2034] = 'b00000000;
    ram_symbol1[2034] = 'b00000000;
    ram_symbol2[2034] = 'b00000000;
    ram_symbol3[2034] = 'b00000000;
    ram_symbol0[2035] = 'b00000000;
    ram_symbol1[2035] = 'b00000000;
    ram_symbol2[2035] = 'b00000000;
    ram_symbol3[2035] = 'b00000000;
    ram_symbol0[2036] = 'b00000000;
    ram_symbol1[2036] = 'b00000000;
    ram_symbol2[2036] = 'b00000000;
    ram_symbol3[2036] = 'b00000000;
    ram_symbol0[2037] = 'b00000000;
    ram_symbol1[2037] = 'b00000000;
    ram_symbol2[2037] = 'b00000000;
    ram_symbol3[2037] = 'b00000000;
    ram_symbol0[2038] = 'b00000000;
    ram_symbol1[2038] = 'b00000000;
    ram_symbol2[2038] = 'b00000000;
    ram_symbol3[2038] = 'b00000000;
    ram_symbol0[2039] = 'b00000000;
    ram_symbol1[2039] = 'b00000000;
    ram_symbol2[2039] = 'b00000000;
    ram_symbol3[2039] = 'b00000000;
    ram_symbol0[2040] = 'b00000000;
    ram_symbol1[2040] = 'b00000000;
    ram_symbol2[2040] = 'b00000000;
    ram_symbol3[2040] = 'b00000000;
    ram_symbol0[2041] = 'b00000000;
    ram_symbol1[2041] = 'b00000000;
    ram_symbol2[2041] = 'b00000000;
    ram_symbol3[2041] = 'b00000000;
    ram_symbol0[2042] = 'b00000000;
    ram_symbol1[2042] = 'b00000000;
    ram_symbol2[2042] = 'b00000000;
    ram_symbol3[2042] = 'b00000000;
    ram_symbol0[2043] = 'b00000000;
    ram_symbol1[2043] = 'b00000000;
    ram_symbol2[2043] = 'b00000000;
    ram_symbol3[2043] = 'b00000000;
    ram_symbol0[2044] = 'b00000000;
    ram_symbol1[2044] = 'b00000000;
    ram_symbol2[2044] = 'b00000000;
    ram_symbol3[2044] = 'b00000000;
    ram_symbol0[2045] = 'b00000000;
    ram_symbol1[2045] = 'b00000000;
    ram_symbol2[2045] = 'b00000000;
    ram_symbol3[2045] = 'b00000000;
    ram_symbol0[2046] = 'b00000000;
    ram_symbol1[2046] = 'b00000000;
    ram_symbol2[2046] = 'b00000000;
    ram_symbol3[2046] = 'b00000000;
    ram_symbol0[2047] = 'b00000000;
    ram_symbol1[2047] = 'b00000000;
    ram_symbol2[2047] = 'b00000000;
    ram_symbol3[2047] = 'b00000000;
  end
  always @ (*) begin
    _zz_5 = {_zz_9, _zz_8, _zz_7, _zz_6};
  end
  always @ (posedge CLKOUT0) begin
    if(_zz_2) begin
      _zz_6 <= ram_symbol0[_zz_1];
      _zz_7 <= ram_symbol1[_zz_1];
      _zz_8 <= ram_symbol2[_zz_1];
      _zz_9 <= ram_symbol3[_zz_1];
    end
  end

  always @ (posedge CLKOUT0) begin
    if(io_bus_cmd_payload_fragment_mask[0] && _zz_2 && _zz_3 ) begin
      ram_symbol0[_zz_1] <= _zz_4[7 : 0];
    end
    if(io_bus_cmd_payload_fragment_mask[1] && _zz_2 && _zz_3 ) begin
      ram_symbol1[_zz_1] <= _zz_4[15 : 8];
    end
    if(io_bus_cmd_payload_fragment_mask[2] && _zz_2 && _zz_3 ) begin
      ram_symbol2[_zz_1] <= _zz_4[23 : 16];
    end
    if(io_bus_cmd_payload_fragment_mask[3] && _zz_2 && _zz_3 ) begin
      ram_symbol3[_zz_1] <= _zz_4[31 : 24];
    end
  end

  assign io_bus_cmd_ready = (! (io_bus_rsp_valid && (! io_bus_rsp_ready)));
  assign io_bus_rsp_valid = io_bus_cmd_valid_regNextWhen;
  assign io_bus_rsp_payload_fragment_source = io_bus_cmd_payload_fragment_source_regNextWhen;
  assign io_bus_rsp_payload_fragment_context = io_bus_cmd_payload_fragment_context_regNextWhen;
  assign _zz_1 = (io_bus_cmd_payload_fragment_address >>> 2);
  assign _zz_2 = (io_bus_cmd_valid && io_bus_cmd_ready);
  assign _zz_3 = (io_bus_cmd_payload_fragment_opcode == 1'b1);
  assign _zz_4 = io_bus_cmd_payload_fragment_data;
  assign io_bus_rsp_payload_fragment_data = _zz_5;
  assign io_bus_rsp_payload_fragment_opcode = 1'b0;
  assign io_bus_rsp_payload_last = 1'b1;
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      io_bus_cmd_valid_regNextWhen <= 1'b0;
    end else begin
      if(io_bus_cmd_ready)begin
        io_bus_cmd_valid_regNextWhen <= io_bus_cmd_valid;
      end
    end
  end

  always @ (posedge CLKOUT0) begin
    if(io_bus_cmd_ready)begin
      io_bus_cmd_payload_fragment_source_regNextWhen <= io_bus_cmd_payload_fragment_source;
    end
    if(io_bus_cmd_ready)begin
      io_bus_cmd_payload_fragment_context_regNextWhen <= io_bus_cmd_payload_fragment_context;
    end
  end


endmodule

module BmbBsbToDeltaSigma (
  input               io_ctrl_cmd_valid,
  output              io_ctrl_cmd_ready,
  input               io_ctrl_cmd_payload_last,
  input      [0:0]    io_ctrl_cmd_payload_fragment_source,
  input      [0:0]    io_ctrl_cmd_payload_fragment_opcode,
  input      [11:0]   io_ctrl_cmd_payload_fragment_address,
  input      [1:0]    io_ctrl_cmd_payload_fragment_length,
  input      [31:0]   io_ctrl_cmd_payload_fragment_data,
  input      [3:0]    io_ctrl_cmd_payload_fragment_mask,
  input      [6:0]    io_ctrl_cmd_payload_fragment_context,
  output              io_ctrl_rsp_valid,
  input               io_ctrl_rsp_ready,
  output              io_ctrl_rsp_payload_last,
  output     [0:0]    io_ctrl_rsp_payload_fragment_source,
  output     [0:0]    io_ctrl_rsp_payload_fragment_opcode,
  output     [31:0]   io_ctrl_rsp_payload_fragment_data,
  output     [6:0]    io_ctrl_rsp_payload_fragment_context,
  input               io_input_valid,
  output              io_input_ready,
  input      [31:0]   io_input_payload_data,
  input      [3:0]    io_input_payload_mask,
  input               io_input_payload_last,
  output     [1:0]    io_outputs,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  wire                core_2_io_input_ready;
  wire       [1:0]    core_2_io_outputs;
  wire                ctrl_readHaltTrigger;
  wire                ctrl_writeHaltTrigger;
  wire                ctrl_rsp_valid;
  wire                ctrl_rsp_ready;
  wire                ctrl_rsp_payload_last;
  wire       [0:0]    ctrl_rsp_payload_fragment_source;
  wire       [0:0]    ctrl_rsp_payload_fragment_opcode;
  wire       [31:0]   ctrl_rsp_payload_fragment_data;
  wire       [6:0]    ctrl_rsp_payload_fragment_context;
  wire                _zz_1;
  wire                _zz_2;
  wire                _zz_3;
  reg                 _zz_4;
  reg                 _zz_5;
  reg        [0:0]    _zz_6;
  reg        [0:0]    _zz_7;
  reg        [31:0]   _zz_8;
  reg        [6:0]    _zz_9;
  wire                ctrl_askWrite;
  wire                ctrl_askRead;
  wire                ctrl_doWrite;
  wire                ctrl_doRead;
  reg        [1:0]    _zz_10;
  reg        [15:0]   _zz_11;

  BsbToDeltaSigma core_2 (
    .io_channelCount               (_zz_10[1:0]                  ), //i
    .io_rate                       (_zz_11[15:0]                 ), //i
    .io_input_valid                (io_input_valid               ), //i
    .io_input_ready                (core_2_io_input_ready        ), //o
    .io_input_payload_data         (io_input_payload_data[31:0]  ), //i
    .io_input_payload_mask         (io_input_payload_mask[3:0]   ), //i
    .io_input_payload_last         (io_input_payload_last        ), //i
    .io_outputs                    (core_2_io_outputs[1:0]       ), //o
    .CLKOUT0                       (CLKOUT0                      ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset   )  //i
  );
  assign ctrl_readHaltTrigger = 1'b0;
  assign ctrl_writeHaltTrigger = 1'b0;
  assign _zz_1 = (! (ctrl_readHaltTrigger || ctrl_writeHaltTrigger));
  assign ctrl_rsp_ready = (_zz_2 && _zz_1);
  assign _zz_2 = ((1'b1 && (! _zz_3)) || io_ctrl_rsp_ready);
  assign _zz_3 = _zz_4;
  assign io_ctrl_rsp_valid = _zz_3;
  assign io_ctrl_rsp_payload_last = _zz_5;
  assign io_ctrl_rsp_payload_fragment_source = _zz_6;
  assign io_ctrl_rsp_payload_fragment_opcode = _zz_7;
  assign io_ctrl_rsp_payload_fragment_data = _zz_8;
  assign io_ctrl_rsp_payload_fragment_context = _zz_9;
  assign ctrl_askWrite = (io_ctrl_cmd_valid && (io_ctrl_cmd_payload_fragment_opcode == 1'b1));
  assign ctrl_askRead = (io_ctrl_cmd_valid && (io_ctrl_cmd_payload_fragment_opcode == 1'b0));
  assign ctrl_doWrite = ((io_ctrl_cmd_valid && io_ctrl_cmd_ready) && (io_ctrl_cmd_payload_fragment_opcode == 1'b1));
  assign ctrl_doRead = ((io_ctrl_cmd_valid && io_ctrl_cmd_ready) && (io_ctrl_cmd_payload_fragment_opcode == 1'b0));
  assign ctrl_rsp_valid = io_ctrl_cmd_valid;
  assign io_ctrl_cmd_ready = ctrl_rsp_ready;
  assign ctrl_rsp_payload_last = 1'b1;
  assign ctrl_rsp_payload_fragment_opcode = 1'b0;
  assign ctrl_rsp_payload_fragment_data = 32'h0;
  assign ctrl_rsp_payload_fragment_context = io_ctrl_cmd_payload_fragment_context;
  assign ctrl_rsp_payload_fragment_source = io_ctrl_cmd_payload_fragment_source;
  assign io_input_ready = core_2_io_input_ready;
  assign io_outputs = core_2_io_outputs;
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      _zz_4 <= 1'b0;
    end else begin
      if(_zz_2)begin
        _zz_4 <= (ctrl_rsp_valid && _zz_1);
      end
    end
  end

  always @ (posedge CLKOUT0) begin
    if(_zz_2)begin
      _zz_5 <= ctrl_rsp_payload_last;
      _zz_6 <= ctrl_rsp_payload_fragment_source;
      _zz_7 <= ctrl_rsp_payload_fragment_opcode;
      _zz_8 <= ctrl_rsp_payload_fragment_data;
      _zz_9 <= ctrl_rsp_payload_fragment_context;
    end
    case(io_ctrl_cmd_payload_fragment_address)
      12'h010 : begin
        if(ctrl_doWrite)begin
          _zz_10 <= io_ctrl_cmd_payload_fragment_data[1 : 0];
        end
      end
      12'h014 : begin
        if(ctrl_doWrite)begin
          _zz_11 <= io_ctrl_cmd_payload_fragment_data[15 : 0];
        end
      end
      default : begin
      end
    endcase
  end


endmodule

module StreamFifoCC_3 (
  input               io_push_valid,
  output              io_push_ready,
  input      [63:0]   io_push_payload_data,
  input      [7:0]    io_push_payload_mask,
  input               io_push_payload_last,
  output              io_pop_valid,
  input               io_pop_ready,
  output     [63:0]   io_pop_payload_data,
  output     [7:0]    io_pop_payload_mask,
  output              io_pop_payload_last,
  output     [7:0]    io_pushOccupancy,
  output     [7:0]    io_popOccupancy,
  input               CLKOUT0,
  input               systemCd_logic_outputReset,
  input               CLKOUT6,
  input               vgaCd_logic_outputReset
);
  reg        [72:0]   _zz_18;
  wire       [7:0]    popToPushGray_buffercc_io_dataOut;
  wire       [7:0]    pushToPopGray_buffercc_io_dataOut;
  wire                _zz_19;
  wire       [7:0]    _zz_20;
  wire       [6:0]    _zz_21;
  wire       [7:0]    _zz_22;
  wire       [6:0]    _zz_23;
  wire       [0:0]    _zz_24;
  wire       [72:0]   _zz_25;
  wire                _zz_26;
  reg                 _zz_1;
  wire       [7:0]    popToPushGray;
  wire       [7:0]    pushToPopGray;
  reg        [7:0]    pushCC_pushPtr;
  wire       [7:0]    pushCC_pushPtrPlus;
  reg        [7:0]    pushCC_pushPtrGray;
  wire       [7:0]    pushCC_popPtrGray;
  wire                pushCC_full;
  wire                _zz_2;
  wire                _zz_3;
  wire                _zz_4;
  wire                _zz_5;
  wire                _zz_6;
  wire                _zz_7;
  wire                _zz_8;
  reg        [7:0]    popCC_popPtr;
  wire       [7:0]    popCC_popPtrPlus;
  reg        [7:0]    popCC_popPtrGray;
  wire       [7:0]    popCC_pushPtrGray;
  wire                popCC_empty;
  wire       [7:0]    _zz_9;
  wire       [72:0]   _zz_10;
  wire                _zz_11;
  wire                _zz_12;
  wire                _zz_13;
  wire                _zz_14;
  wire                _zz_15;
  wire                _zz_16;
  wire                _zz_17;
  reg [72:0] ram [0:127];

  assign _zz_19 = (io_push_valid && io_push_ready);
  assign _zz_20 = (pushCC_pushPtrPlus >>> 1'b1);
  assign _zz_21 = pushCC_pushPtr[6:0];
  assign _zz_22 = (popCC_popPtrPlus >>> 1'b1);
  assign _zz_23 = _zz_9[6:0];
  assign _zz_24 = _zz_10[72 : 72];
  assign _zz_25 = {io_push_payload_last,{io_push_payload_mask,io_push_payload_data}};
  assign _zz_26 = 1'b1;
  always @ (posedge CLKOUT0) begin
    if(_zz_1) begin
      ram[_zz_21] <= _zz_25;
    end
  end

  always @ (posedge CLKOUT6) begin
    if(_zz_26) begin
      _zz_18 <= ram[_zz_23];
    end
  end

  BufferCC_24 popToPushGray_buffercc (
    .io_dataIn                     (popToPushGray[7:0]                      ), //i
    .io_dataOut                    (popToPushGray_buffercc_io_dataOut[7:0]  ), //o
    .CLKOUT0                       (CLKOUT0                                 ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset              )  //i
  );
  BufferCC_25 pushToPopGray_buffercc (
    .io_dataIn                  (pushToPopGray[7:0]                      ), //i
    .io_dataOut                 (pushToPopGray_buffercc_io_dataOut[7:0]  ), //o
    .CLKOUT6                    (CLKOUT6                                 ), //i
    .vgaCd_logic_outputReset    (vgaCd_logic_outputReset                 )  //i
  );
  always @ (*) begin
    _zz_1 = 1'b0;
    if(_zz_19)begin
      _zz_1 = 1'b1;
    end
  end

  assign pushCC_pushPtrPlus = (pushCC_pushPtr + 8'h01);
  assign pushCC_popPtrGray = popToPushGray_buffercc_io_dataOut;
  assign pushCC_full = ((pushCC_pushPtrGray[7 : 6] == (~ pushCC_popPtrGray[7 : 6])) && (pushCC_pushPtrGray[5 : 0] == pushCC_popPtrGray[5 : 0]));
  assign io_push_ready = (! pushCC_full);
  assign _zz_2 = (pushCC_popPtrGray[1] ^ _zz_3);
  assign _zz_3 = (pushCC_popPtrGray[2] ^ _zz_4);
  assign _zz_4 = (pushCC_popPtrGray[3] ^ _zz_5);
  assign _zz_5 = (pushCC_popPtrGray[4] ^ _zz_6);
  assign _zz_6 = (pushCC_popPtrGray[5] ^ _zz_7);
  assign _zz_7 = (pushCC_popPtrGray[6] ^ _zz_8);
  assign _zz_8 = pushCC_popPtrGray[7];
  assign io_pushOccupancy = (pushCC_pushPtr - {_zz_8,{_zz_7,{_zz_6,{_zz_5,{_zz_4,{_zz_3,{_zz_2,(pushCC_popPtrGray[0] ^ _zz_2)}}}}}}});
  assign popCC_popPtrPlus = (popCC_popPtr + 8'h01);
  assign popCC_pushPtrGray = pushToPopGray_buffercc_io_dataOut;
  assign popCC_empty = (popCC_popPtrGray == popCC_pushPtrGray);
  assign io_pop_valid = (! popCC_empty);
  assign _zz_9 = ((io_pop_valid && io_pop_ready) ? popCC_popPtrPlus : popCC_popPtr);
  assign _zz_10 = _zz_18;
  assign io_pop_payload_data = _zz_10[63 : 0];
  assign io_pop_payload_mask = _zz_10[71 : 64];
  assign io_pop_payload_last = _zz_24[0];
  assign _zz_11 = (popCC_pushPtrGray[1] ^ _zz_12);
  assign _zz_12 = (popCC_pushPtrGray[2] ^ _zz_13);
  assign _zz_13 = (popCC_pushPtrGray[3] ^ _zz_14);
  assign _zz_14 = (popCC_pushPtrGray[4] ^ _zz_15);
  assign _zz_15 = (popCC_pushPtrGray[5] ^ _zz_16);
  assign _zz_16 = (popCC_pushPtrGray[6] ^ _zz_17);
  assign _zz_17 = popCC_pushPtrGray[7];
  assign io_popOccupancy = ({_zz_17,{_zz_16,{_zz_15,{_zz_14,{_zz_13,{_zz_12,{_zz_11,(popCC_pushPtrGray[0] ^ _zz_11)}}}}}}} - popCC_popPtr);
  assign pushToPopGray = pushCC_pushPtrGray;
  assign popToPushGray = popCC_popPtrGray;
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      pushCC_pushPtr <= 8'h0;
      pushCC_pushPtrGray <= 8'h0;
    end else begin
      if((io_push_valid && io_push_ready))begin
        pushCC_pushPtrGray <= (_zz_20 ^ pushCC_pushPtrPlus);
      end
      if(_zz_19)begin
        pushCC_pushPtr <= pushCC_pushPtrPlus;
      end
    end
  end

  always @ (posedge CLKOUT6) begin
    if(vgaCd_logic_outputReset) begin
      popCC_popPtr <= 8'h0;
      popCC_popPtrGray <= 8'h0;
    end else begin
      if((io_pop_valid && io_pop_ready))begin
        popCC_popPtrGray <= (_zz_22 ^ popCC_popPtrPlus);
      end
      if((io_pop_valid && io_pop_ready))begin
        popCC_popPtr <= popCC_popPtrPlus;
      end
    end
  end


endmodule

module BmbVgaCtrl (
  input               io_input_valid,
  output reg          io_input_ready,
  input      [63:0]   io_input_payload_data,
  input      [7:0]    io_input_payload_mask,
  input               io_input_payload_last,
  input               io_ctrl_cmd_valid,
  output              io_ctrl_cmd_ready,
  input               io_ctrl_cmd_payload_last,
  input      [0:0]    io_ctrl_cmd_payload_fragment_source,
  input      [0:0]    io_ctrl_cmd_payload_fragment_opcode,
  input      [7:0]    io_ctrl_cmd_payload_fragment_address,
  input      [1:0]    io_ctrl_cmd_payload_fragment_length,
  input      [31:0]   io_ctrl_cmd_payload_fragment_data,
  input      [3:0]    io_ctrl_cmd_payload_fragment_mask,
  input      [6:0]    io_ctrl_cmd_payload_fragment_context,
  output              io_ctrl_rsp_valid,
  input               io_ctrl_rsp_ready,
  output              io_ctrl_rsp_payload_last,
  output     [0:0]    io_ctrl_rsp_payload_fragment_source,
  output     [0:0]    io_ctrl_rsp_payload_fragment_opcode,
  output     [31:0]   io_ctrl_rsp_payload_fragment_data,
  output     [6:0]    io_ctrl_rsp_payload_fragment_context,
  output              io_vga_vSync,
  output              io_vga_hSync,
  output              io_vga_colorEn,
  output     [3:0]    io_vga_color_r,
  output     [3:0]    io_vga_color_g,
  output     [3:0]    io_vga_color_b,
  input               CLKOUT0,
  input               systemCd_logic_outputReset,
  input               CLKOUT6,
  input               vgaCd_logic_outputReset
);
  wire                _zz_28;
  wire                _zz_29;
  reg        [15:0]   _zz_30;
  wire                run_buffercc_io_dataOut;
  wire                vga_ctrl_io_frameStart;
  wire                vga_ctrl_io_pixels_ready;
  wire                vga_ctrl_io_vga_vSync;
  wire                vga_ctrl_io_vga_hSync;
  wire                vga_ctrl_io_vga_colorEn;
  wire       [3:0]    vga_ctrl_io_vga_color_r;
  wire       [3:0]    vga_ctrl_io_vga_color_g;
  wire       [3:0]    vga_ctrl_io_vga_color_b;
  wire                vga_ctrl_io_error;
  wire       [0:0]    _zz_31;
  wire       [1:0]    _zz_32;
  wire       [0:0]    _zz_33;
  wire       [0:0]    _zz_34;
  wire       [0:0]    _zz_35;
  wire                ctrl_readHaltTrigger;
  wire                ctrl_writeHaltTrigger;
  wire                ctrl_rsp_valid;
  wire                ctrl_rsp_ready;
  wire                ctrl_rsp_payload_last;
  wire       [0:0]    ctrl_rsp_payload_fragment_source;
  wire       [0:0]    ctrl_rsp_payload_fragment_opcode;
  reg        [31:0]   ctrl_rsp_payload_fragment_data;
  wire       [6:0]    ctrl_rsp_payload_fragment_context;
  wire                _zz_1;
  wire                _zz_2;
  wire                _zz_3;
  reg                 _zz_4;
  reg                 _zz_5;
  reg        [0:0]    _zz_6;
  reg        [0:0]    _zz_7;
  reg        [31:0]   _zz_8;
  reg        [6:0]    _zz_9;
  wire                ctrl_askWrite;
  wire                ctrl_askRead;
  wire                ctrl_doWrite;
  wire                ctrl_doRead;
  reg                 run;
  wire                vga_input_valid;
  wire                vga_input_ready;
  wire                vga_input_payload_last;
  wire       [63:0]   vga_input_payload_fragment;
  wire                vga_resized_valid;
  wire                vga_resized_ready;
  wire                vga_resized_payload_last;
  wire       [15:0]   vga_resized_payload_fragment;
  reg                 _zz_10;
  reg        [1:0]    _zz_11;
  reg        [1:0]    _zz_12;
  wire                _zz_13;
  wire       [63:0]   _zz_14;
  wire                vga_adapted_valid;
  wire                vga_adapted_ready;
  wire                vga_adapted_payload_last;
  wire       [3:0]    vga_adapted_payload_fragment_r;
  wire       [3:0]    vga_adapted_payload_fragment_g;
  wire       [3:0]    vga_adapted_payload_fragment_b;
  wire                vga_run;
  reg                 vga_run_regNext;
  reg                 _zz_15;
  reg                 _zz_16;
  wire                vga_adapted_translated_valid;
  reg                 vga_adapted_translated_ready;
  wire       [3:0]    vga_adapted_translated_payload_r;
  wire       [3:0]    vga_adapted_translated_payload_g;
  wire       [3:0]    vga_adapted_translated_payload_b;
  reg                 vga_adapted_translated_thrown_valid;
  wire                vga_adapted_translated_thrown_ready;
  wire       [3:0]    vga_adapted_translated_thrown_payload_r;
  wire       [3:0]    vga_adapted_translated_thrown_payload_g;
  wire       [3:0]    vga_adapted_translated_thrown_payload_b;
  wire                _zz_17;
  reg        [11:0]   _zz_18;
  reg        [11:0]   _zz_19;
  reg        [11:0]   _zz_20;
  reg        [11:0]   _zz_21;
  reg        [11:0]   _zz_22;
  reg        [11:0]   _zz_23;
  reg        [11:0]   _zz_24;
  reg        [11:0]   _zz_25;
  reg                 _zz_26;
  reg                 _zz_27;

  assign _zz_31 = _zz_10;
  assign _zz_32 = {1'd0, _zz_31};
  assign _zz_33 = io_ctrl_cmd_payload_fragment_data[0 : 0];
  assign _zz_34 = io_ctrl_cmd_payload_fragment_data[0 : 0];
  assign _zz_35 = io_ctrl_cmd_payload_fragment_data[1 : 1];
  BufferCC_23 run_buffercc (
    .io_dataIn                  (run                      ), //i
    .io_dataOut                 (run_buffercc_io_dataOut  ), //o
    .CLKOUT6                    (CLKOUT6                  ), //i
    .vgaCd_logic_outputReset    (vgaCd_logic_outputReset  )  //i
  );
  VgaCtrl vga_ctrl (
    .io_softReset               (_zz_28                                        ), //i
    .io_timings_h_syncStart     (_zz_18[11:0]                                  ), //i
    .io_timings_h_syncEnd       (_zz_19[11:0]                                  ), //i
    .io_timings_h_colorStart    (_zz_20[11:0]                                  ), //i
    .io_timings_h_colorEnd      (_zz_21[11:0]                                  ), //i
    .io_timings_h_polarity      (_zz_26                                        ), //i
    .io_timings_v_syncStart     (_zz_22[11:0]                                  ), //i
    .io_timings_v_syncEnd       (_zz_23[11:0]                                  ), //i
    .io_timings_v_colorStart    (_zz_24[11:0]                                  ), //i
    .io_timings_v_colorEnd      (_zz_25[11:0]                                  ), //i
    .io_timings_v_polarity      (_zz_27                                        ), //i
    .io_frameStart              (vga_ctrl_io_frameStart                        ), //o
    .io_pixels_valid            (_zz_29                                        ), //i
    .io_pixels_ready            (vga_ctrl_io_pixels_ready                      ), //o
    .io_pixels_payload_r        (vga_adapted_translated_thrown_payload_r[3:0]  ), //i
    .io_pixels_payload_g        (vga_adapted_translated_thrown_payload_g[3:0]  ), //i
    .io_pixels_payload_b        (vga_adapted_translated_thrown_payload_b[3:0]  ), //i
    .io_vga_vSync               (vga_ctrl_io_vga_vSync                         ), //o
    .io_vga_hSync               (vga_ctrl_io_vga_hSync                         ), //o
    .io_vga_colorEn             (vga_ctrl_io_vga_colorEn                       ), //o
    .io_vga_color_r             (vga_ctrl_io_vga_color_r[3:0]                  ), //o
    .io_vga_color_g             (vga_ctrl_io_vga_color_g[3:0]                  ), //o
    .io_vga_color_b             (vga_ctrl_io_vga_color_b[3:0]                  ), //o
    .io_error                   (vga_ctrl_io_error                             ), //o
    .CLKOUT6                    (CLKOUT6                                       ), //i
    .vgaCd_logic_outputReset    (vgaCd_logic_outputReset                       )  //i
  );
  always @(*) begin
    case(_zz_12)
      2'b00 : begin
        _zz_30 = _zz_14[15 : 0];
      end
      2'b01 : begin
        _zz_30 = _zz_14[31 : 16];
      end
      2'b10 : begin
        _zz_30 = _zz_14[47 : 32];
      end
      default : begin
        _zz_30 = _zz_14[63 : 48];
      end
    endcase
  end

  assign ctrl_readHaltTrigger = 1'b0;
  assign ctrl_writeHaltTrigger = 1'b0;
  assign _zz_1 = (! (ctrl_readHaltTrigger || ctrl_writeHaltTrigger));
  assign ctrl_rsp_ready = (_zz_2 && _zz_1);
  assign _zz_2 = ((1'b1 && (! _zz_3)) || io_ctrl_rsp_ready);
  assign _zz_3 = _zz_4;
  assign io_ctrl_rsp_valid = _zz_3;
  assign io_ctrl_rsp_payload_last = _zz_5;
  assign io_ctrl_rsp_payload_fragment_source = _zz_6;
  assign io_ctrl_rsp_payload_fragment_opcode = _zz_7;
  assign io_ctrl_rsp_payload_fragment_data = _zz_8;
  assign io_ctrl_rsp_payload_fragment_context = _zz_9;
  assign ctrl_askWrite = (io_ctrl_cmd_valid && (io_ctrl_cmd_payload_fragment_opcode == 1'b1));
  assign ctrl_askRead = (io_ctrl_cmd_valid && (io_ctrl_cmd_payload_fragment_opcode == 1'b0));
  assign ctrl_doWrite = ((io_ctrl_cmd_valid && io_ctrl_cmd_ready) && (io_ctrl_cmd_payload_fragment_opcode == 1'b1));
  assign ctrl_doRead = ((io_ctrl_cmd_valid && io_ctrl_cmd_ready) && (io_ctrl_cmd_payload_fragment_opcode == 1'b0));
  assign ctrl_rsp_valid = io_ctrl_cmd_valid;
  assign io_ctrl_cmd_ready = ctrl_rsp_ready;
  assign ctrl_rsp_payload_last = 1'b1;
  assign ctrl_rsp_payload_fragment_opcode = 1'b0;
  always @ (*) begin
    ctrl_rsp_payload_fragment_data = 32'h0;
    case(io_ctrl_cmd_payload_fragment_address)
      8'h0 : begin
        ctrl_rsp_payload_fragment_data[0 : 0] = run;
      end
      default : begin
      end
    endcase
  end

  assign ctrl_rsp_payload_fragment_context = io_ctrl_cmd_payload_fragment_context;
  assign ctrl_rsp_payload_fragment_source = io_ctrl_cmd_payload_fragment_source;
  assign vga_input_valid = io_input_valid;
  always @ (*) begin
    io_input_ready = vga_input_ready;
    if((! vga_run))begin
      io_input_ready = 1'b1;
    end
  end

  assign vga_input_payload_fragment = io_input_payload_data;
  assign vga_input_payload_last = io_input_payload_last;
  always @ (*) begin
    _zz_10 = 1'b0;
    if((vga_resized_valid && vga_resized_ready))begin
      _zz_10 = 1'b1;
    end
  end

  assign _zz_13 = (_zz_12 == 2'b11);
  always @ (*) begin
    _zz_11 = (_zz_12 + _zz_32);
    if(1'b0)begin
      _zz_11 = 2'b00;
    end
  end

  assign vga_resized_valid = vga_input_valid;
  assign _zz_14 = vga_input_payload_fragment;
  assign vga_resized_payload_fragment = _zz_30;
  assign vga_resized_payload_last = (vga_input_payload_last && _zz_13);
  assign vga_input_ready = (vga_resized_ready && _zz_13);
  assign vga_adapted_valid = vga_resized_valid;
  assign vga_resized_ready = vga_adapted_ready;
  assign vga_adapted_payload_last = vga_resized_payload_last;
  assign vga_adapted_payload_fragment_r = vga_resized_payload_fragment[15 : 12];
  assign vga_adapted_payload_fragment_g = vga_resized_payload_fragment[10 : 7];
  assign vga_adapted_payload_fragment_b = vga_resized_payload_fragment[4 : 1];
  assign vga_run = run_buffercc_io_dataOut;
  assign vga_adapted_translated_valid = vga_adapted_valid;
  assign vga_adapted_ready = vga_adapted_translated_ready;
  assign vga_adapted_translated_payload_r = vga_adapted_payload_fragment_r;
  assign vga_adapted_translated_payload_g = vga_adapted_payload_fragment_g;
  assign vga_adapted_translated_payload_b = vga_adapted_payload_fragment_b;
  always @ (*) begin
    vga_adapted_translated_thrown_valid = vga_adapted_translated_valid;
    if(_zz_15)begin
      vga_adapted_translated_thrown_valid = 1'b0;
    end
  end

  always @ (*) begin
    vga_adapted_translated_ready = vga_adapted_translated_thrown_ready;
    if(_zz_15)begin
      vga_adapted_translated_ready = 1'b1;
    end
  end

  assign vga_adapted_translated_thrown_payload_r = vga_adapted_translated_payload_r;
  assign vga_adapted_translated_thrown_payload_g = vga_adapted_translated_payload_g;
  assign vga_adapted_translated_thrown_payload_b = vga_adapted_translated_payload_b;
  assign _zz_17 = (! _zz_16);
  assign vga_adapted_translated_thrown_ready = (vga_ctrl_io_pixels_ready && _zz_17);
  assign _zz_29 = (vga_adapted_translated_thrown_valid && _zz_17);
  assign _zz_28 = (! vga_run);
  assign io_vga_vSync = vga_ctrl_io_vga_vSync;
  assign io_vga_hSync = vga_ctrl_io_vga_hSync;
  assign io_vga_colorEn = vga_ctrl_io_vga_colorEn;
  assign io_vga_color_r = vga_ctrl_io_vga_color_r;
  assign io_vga_color_g = vga_ctrl_io_vga_color_g;
  assign io_vga_color_b = vga_ctrl_io_vga_color_b;
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      _zz_4 <= 1'b0;
      run <= 1'b0;
      _zz_26 <= 1'b0;
      _zz_27 <= 1'b0;
    end else begin
      if(_zz_2)begin
        _zz_4 <= (ctrl_rsp_valid && _zz_1);
      end
      case(io_ctrl_cmd_payload_fragment_address)
        8'h0 : begin
          if(ctrl_doWrite)begin
            run <= _zz_33[0];
          end
        end
        8'h60 : begin
          if(ctrl_doWrite)begin
            _zz_26 <= _zz_34[0];
            _zz_27 <= _zz_35[0];
          end
        end
        default : begin
        end
      endcase
    end
  end

  always @ (posedge CLKOUT0) begin
    if(_zz_2)begin
      _zz_5 <= ctrl_rsp_payload_last;
      _zz_6 <= ctrl_rsp_payload_fragment_source;
      _zz_7 <= ctrl_rsp_payload_fragment_opcode;
      _zz_8 <= ctrl_rsp_payload_fragment_data;
      _zz_9 <= ctrl_rsp_payload_fragment_context;
    end
    case(io_ctrl_cmd_payload_fragment_address)
      8'h40 : begin
        if(ctrl_doWrite)begin
          _zz_18 <= io_ctrl_cmd_payload_fragment_data[11 : 0];
        end
      end
      8'h44 : begin
        if(ctrl_doWrite)begin
          _zz_19 <= io_ctrl_cmd_payload_fragment_data[11 : 0];
        end
      end
      8'h48 : begin
        if(ctrl_doWrite)begin
          _zz_20 <= io_ctrl_cmd_payload_fragment_data[11 : 0];
        end
      end
      8'h4c : begin
        if(ctrl_doWrite)begin
          _zz_21 <= io_ctrl_cmd_payload_fragment_data[11 : 0];
        end
      end
      8'h50 : begin
        if(ctrl_doWrite)begin
          _zz_22 <= io_ctrl_cmd_payload_fragment_data[11 : 0];
        end
      end
      8'h54 : begin
        if(ctrl_doWrite)begin
          _zz_23 <= io_ctrl_cmd_payload_fragment_data[11 : 0];
        end
      end
      8'h58 : begin
        if(ctrl_doWrite)begin
          _zz_24 <= io_ctrl_cmd_payload_fragment_data[11 : 0];
        end
      end
      8'h5c : begin
        if(ctrl_doWrite)begin
          _zz_25 <= io_ctrl_cmd_payload_fragment_data[11 : 0];
        end
      end
      default : begin
      end
    endcase
  end

  always @ (posedge CLKOUT6) begin
    if(vgaCd_logic_outputReset) begin
      _zz_12 <= 2'b00;
      _zz_15 <= 1'b0;
      _zz_16 <= 1'b0;
    end else begin
      _zz_12 <= _zz_11;
      if(vga_ctrl_io_frameStart)begin
        _zz_16 <= 1'b0;
      end
      if(((vga_adapted_valid && vga_adapted_ready) && vga_adapted_payload_last))begin
        _zz_15 <= 1'b0;
        _zz_16 <= _zz_15;
      end
      if(((! _zz_16) && (! _zz_15)))begin
        if((vga_ctrl_io_error || (vga_run && (! vga_run_regNext))))begin
          _zz_15 <= 1'b1;
        end
      end
    end
  end

  always @ (posedge CLKOUT6) begin
    vga_run_regNext <= vga_run;
  end


endmodule

module Core_1 (
  output              io_sgRead_cmd_valid,
  input               io_sgRead_cmd_ready,
  output              io_sgRead_cmd_payload_last,
  output     [0:0]    io_sgRead_cmd_payload_fragment_opcode,
  output     [31:0]   io_sgRead_cmd_payload_fragment_address,
  output     [4:0]    io_sgRead_cmd_payload_fragment_length,
  input               io_sgRead_rsp_valid,
  output              io_sgRead_rsp_ready,
  input               io_sgRead_rsp_payload_last,
  input      [0:0]    io_sgRead_rsp_payload_fragment_opcode,
  input      [63:0]   io_sgRead_rsp_payload_fragment_data,
  output              io_sgWrite_cmd_valid,
  input               io_sgWrite_cmd_ready,
  output              io_sgWrite_cmd_payload_last,
  output     [0:0]    io_sgWrite_cmd_payload_fragment_opcode,
  output     [31:0]   io_sgWrite_cmd_payload_fragment_address,
  output     [1:0]    io_sgWrite_cmd_payload_fragment_length,
  output reg [63:0]   io_sgWrite_cmd_payload_fragment_data,
  output reg [7:0]    io_sgWrite_cmd_payload_fragment_mask,
  input               io_sgWrite_rsp_valid,
  output              io_sgWrite_rsp_ready,
  input               io_sgWrite_rsp_payload_last,
  input      [0:0]    io_sgWrite_rsp_payload_fragment_opcode,
  output reg          io_read_cmd_valid,
  input               io_read_cmd_ready,
  output              io_read_cmd_payload_last,
  output     [0:0]    io_read_cmd_payload_fragment_source,
  output     [0:0]    io_read_cmd_payload_fragment_opcode,
  output     [31:0]   io_read_cmd_payload_fragment_address,
  output     [5:0]    io_read_cmd_payload_fragment_length,
  output     [13:0]   io_read_cmd_payload_fragment_context,
  input               io_read_rsp_valid,
  output              io_read_rsp_ready,
  input               io_read_rsp_payload_last,
  input      [0:0]    io_read_rsp_payload_fragment_source,
  input      [0:0]    io_read_rsp_payload_fragment_opcode,
  input      [63:0]   io_read_rsp_payload_fragment_data,
  input      [13:0]   io_read_rsp_payload_fragment_context,
  output              io_outputs_0_valid,
  input               io_outputs_0_ready,
  output     [63:0]   io_outputs_0_payload_data,
  output     [7:0]    io_outputs_0_payload_mask,
  output              io_outputs_0_payload_last,
  output              io_outputs_1_valid,
  input               io_outputs_1_ready,
  output     [31:0]   io_outputs_1_payload_data,
  output     [3:0]    io_outputs_1_payload_mask,
  output              io_outputs_1_payload_last,
  output reg [1:0]    io_interrupts,
  input               io_ctrl_cmd_valid,
  output              io_ctrl_cmd_ready,
  input               io_ctrl_cmd_payload_last,
  input      [0:0]    io_ctrl_cmd_payload_fragment_source,
  input      [0:0]    io_ctrl_cmd_payload_fragment_opcode,
  input      [15:0]   io_ctrl_cmd_payload_fragment_address,
  input      [1:0]    io_ctrl_cmd_payload_fragment_length,
  input      [31:0]   io_ctrl_cmd_payload_fragment_data,
  input      [3:0]    io_ctrl_cmd_payload_fragment_mask,
  input      [6:0]    io_ctrl_cmd_payload_fragment_context,
  output              io_ctrl_rsp_valid,
  input               io_ctrl_rsp_ready,
  output              io_ctrl_rsp_payload_last,
  output     [0:0]    io_ctrl_rsp_payload_fragment_source,
  output     [0:0]    io_ctrl_rsp_payload_fragment_opcode,
  output     [31:0]   io_ctrl_rsp_payload_fragment_data,
  output     [6:0]    io_ctrl_rsp_payload_fragment_context,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  wire       [7:0]    _zz_30;
  reg        [7:0]    _zz_31;
  wire       [6:0]    _zz_32;
  wire                _zz_33;
  wire       [7:0]    _zz_34;
  wire       [2:0]    _zz_35;
  wire                _zz_36;
  wire       [7:0]    _zz_37;
  wire       [2:0]    _zz_38;
  reg                 _zz_39;
  reg        [31:0]   _zz_40;
  reg        [25:0]   _zz_41;
  reg        [5:0]    _zz_42;
  reg        [8:0]    _zz_43;
  wire                memory_core_io_writes_0_cmd_ready;
  wire                memory_core_io_writes_0_rsp_valid;
  wire       [6:0]    memory_core_io_writes_0_rsp_payload_context;
  wire                memory_core_io_reads_0_cmd_ready;
  wire                memory_core_io_reads_0_rsp_valid;
  wire       [63:0]   memory_core_io_reads_0_rsp_payload_data;
  wire       [7:0]    memory_core_io_reads_0_rsp_payload_mask;
  wire       [2:0]    memory_core_io_reads_0_rsp_payload_context;
  wire                memory_core_io_reads_1_cmd_ready;
  wire                memory_core_io_reads_1_rsp_valid;
  wire       [31:0]   memory_core_io_reads_1_rsp_payload_data;
  wire       [3:0]    memory_core_io_reads_1_rsp_payload_mask;
  wire       [2:0]    memory_core_io_reads_1_rsp_payload_context;
  wire                m2b_cmd_arbiter_io_inputs_0_ready;
  wire                m2b_cmd_arbiter_io_inputs_1_ready;
  wire                m2b_cmd_arbiter_io_output_valid;
  wire       [0:0]    m2b_cmd_arbiter_io_chosen;
  wire       [1:0]    m2b_cmd_arbiter_io_chosenOH;
  wire                _zz_44;
  wire                _zz_45;
  wire                _zz_46;
  wire                _zz_47;
  wire                _zz_48;
  wire                _zz_49;
  wire                _zz_50;
  wire                _zz_51;
  wire                _zz_52;
  wire                _zz_53;
  wire                _zz_54;
  wire                _zz_55;
  wire       [10:0]   _zz_56;
  wire       [3:0]    _zz_57;
  wire       [0:0]    _zz_58;
  wire       [3:0]    _zz_59;
  wire       [0:0]    _zz_60;
  wire       [3:0]    _zz_61;
  wire       [3:0]    _zz_62;
  wire       [8:0]    _zz_63;
  wire       [25:0]   _zz_64;
  wire       [31:0]   _zz_65;
  wire       [31:0]   _zz_66;
  wire       [8:0]    _zz_67;
  wire       [10:0]   _zz_68;
  wire       [3:0]    _zz_69;
  wire       [0:0]    _zz_70;
  wire       [3:0]    _zz_71;
  wire       [0:0]    _zz_72;
  wire       [3:0]    _zz_73;
  wire       [3:0]    _zz_74;
  wire       [8:0]    _zz_75;
  wire       [25:0]   _zz_76;
  wire       [8:0]    _zz_77;
  wire       [0:0]    _zz_78;
  wire       [0:0]    _zz_79;
  wire       [0:0]    _zz_80;
  wire       [0:0]    _zz_81;
  wire       [25:0]   _zz_82;
  wire       [25:0]   _zz_83;
  wire       [25:0]   _zz_84;
  wire       [25:0]   _zz_85;
  wire       [31:0]   _zz_86;
  wire       [31:0]   _zz_87;
  wire       [31:0]   _zz_88;
  wire       [31:0]   _zz_89;
  wire       [25:0]   _zz_90;
  wire       [25:0]   _zz_91;
  wire       [6:0]    _zz_92;
  wire       [5:0]    _zz_93;
  wire       [2:0]    _zz_94;
  wire       [5:0]    _zz_95;
  wire       [1:0]    _zz_96;
  wire       [6:0]    _zz_97;
  wire       [0:0]    _zz_98;
  wire       [0:0]    _zz_99;
  wire       [0:0]    _zz_100;
  wire       [0:0]    _zz_101;
  wire       [0:0]    _zz_102;
  wire       [0:0]    _zz_103;
  wire       [0:0]    _zz_104;
  wire       [0:0]    _zz_105;
  wire       [0:0]    _zz_106;
  wire       [0:0]    _zz_107;
  wire       [0:0]    _zz_108;
  wire       [0:0]    _zz_109;
  wire       [0:0]    _zz_110;
  wire       [0:0]    _zz_111;
  wire       [0:0]    _zz_112;
  wire       [0:0]    _zz_113;
  wire       [0:0]    _zz_114;
  wire       [0:0]    _zz_115;
  wire       [0:0]    _zz_116;
  wire       [0:0]    _zz_117;
  wire       [0:0]    _zz_118;
  wire       [0:0]    _zz_119;
  wire       [0:0]    _zz_120;
  wire       [31:0]   _zz_121;
  wire       [31:0]   _zz_122;
  wire       [0:0]    _zz_123;
  wire       [0:0]    _zz_124;
  wire       [0:0]    _zz_125;
  wire       [0:0]    _zz_126;
  wire       [0:0]    _zz_127;
  wire       [0:0]    _zz_128;
  wire       [0:0]    _zz_129;
  wire       [0:0]    _zz_130;
  wire       [0:0]    _zz_131;
  wire       [0:0]    _zz_132;
  wire       [0:0]    _zz_133;
  wire       [0:0]    _zz_134;
  wire       [0:0]    _zz_135;
  wire       [0:0]    _zz_136;
  wire       [1:0]    _zz_137;
  wire       [8:0]    _zz_138;
  wire       [3:0]    _zz_139;
  wire       [10:0]   _zz_140;
  wire       [3:0]    _zz_141;
  wire       [1:0]    _zz_142;
  wire       [8:0]    _zz_143;
  wire       [1:0]    _zz_144;
  wire       [8:0]    _zz_145;
  wire       [3:0]    _zz_146;
  wire       [10:0]   _zz_147;
  wire       [3:0]    _zz_148;
  wire       [0:0]    _zz_149;
  wire       [8:0]    _zz_150;
  wire                ctrl_readHaltTrigger;
  wire                ctrl_writeHaltTrigger;
  wire                ctrl_rsp_valid;
  wire                ctrl_rsp_ready;
  wire                ctrl_rsp_payload_last;
  wire       [0:0]    ctrl_rsp_payload_fragment_source;
  wire       [0:0]    ctrl_rsp_payload_fragment_opcode;
  reg        [31:0]   ctrl_rsp_payload_fragment_data;
  wire       [6:0]    ctrl_rsp_payload_fragment_context;
  wire                _zz_1;
  wire                _zz_2;
  wire                _zz_3;
  reg                 _zz_4;
  reg                 _zz_5;
  reg        [0:0]    _zz_6;
  reg        [0:0]    _zz_7;
  reg        [31:0]   _zz_8;
  reg        [6:0]    _zz_9;
  wire                ctrl_askWrite;
  wire                ctrl_askRead;
  wire                ctrl_doWrite;
  wire                ctrl_doRead;
  reg                 channels_0_channelStart;
  reg                 channels_0_channelStop;
  reg                 channels_0_channelCompletion;
  reg                 channels_0_channelValid;
  reg                 channels_0_descriptorStart;
  reg                 channels_0_descriptorCompletion;
  reg                 channels_0_descriptorValid;
  reg        [25:0]   channels_0_bytes;
  reg        [1:0]    channels_0_priority;
  reg                 channels_0_selfRestart;
  reg                 channels_0_readyToStop;
  reg                 channels_0_ctrl_kick;
  wire       [8:0]    channels_0_fifo_base;
  wire       [8:0]    channels_0_fifo_words;
  reg        [8:0]    channels_0_fifo_push_available;
  reg        [8:0]    channels_0_fifo_push_availableDecr;
  reg        [8:0]    channels_0_fifo_push_ptr;
  wire       [8:0]    channels_0_fifo_push_ptrWithBase;
  wire       [8:0]    channels_0_fifo_push_ptrIncr_value;
  reg        [8:0]    channels_0_fifo_pop_ptr;
  wire       [10:0]   channels_0_fifo_pop_bytes;
  wire       [8:0]    channels_0_fifo_pop_ptrWithBase;
  wire       [10:0]   channels_0_fifo_pop_bytesIncr_value;
  wire       [10:0]   channels_0_fifo_pop_bytesDecr_value;
  wire                channels_0_fifo_pop_empty;
  wire       [8:0]    channels_0_fifo_pop_ptrIncr_value;
  reg        [10:0]   channels_0_fifo_pop_withoutOverride_exposed;
  wire                channels_0_fifo_empty;
  reg                 channels_0_push_memory;
  reg        [31:0]   channels_0_push_m2b_address;
  wire       [5:0]    channels_0_push_m2b_bytePerBurst;
  reg                 channels_0_push_m2b_loadDone;
  reg        [25:0]   channels_0_push_m2b_bytesLeft;
  reg        [3:0]    channels_0_push_m2b_memPending;
  reg                 channels_0_push_m2b_memPendingIncr;
  reg                 channels_0_push_m2b_memPendingDecr;
  reg                 channels_0_push_m2b_loadRequest;
  reg                 channels_0_pop_memory;
  reg                 channels_0_pop_b2s_last;
  reg        [0:0]    channels_0_pop_b2s_portId;
  reg                 channels_0_pop_b2s_veryLastTrigger;
  reg                 channels_0_pop_b2s_veryLastValid;
  reg        [8:0]    channels_0_pop_b2s_veryLastPtr;
  reg                 channels_0_pop_b2s_veryLastEndPacket;
  reg                 channels_0_readyForChannelCompletion;
  reg                 _zz_10;
  wire                channels_0_s2b_full;
  reg        [8:0]    channels_0_fifo_pop_ptrIncr_value_regNext;
  reg                 channels_0_interrupts_completion_enable;
  reg                 channels_0_interrupts_completion_valid;
  reg                 channels_0_interrupts_onChannelCompletion_enable;
  reg                 channels_0_interrupts_onChannelCompletion_valid;
  reg                 channels_1_channelStart;
  reg                 channels_1_channelStop;
  reg                 channels_1_channelCompletion;
  reg                 channels_1_channelValid;
  reg                 channels_1_descriptorStart;
  reg                 channels_1_descriptorCompletion;
  reg                 channels_1_descriptorValid;
  reg        [25:0]   channels_1_bytes;
  reg        [1:0]    channels_1_priority;
  reg                 channels_1_readyToStop;
  reg                 channels_1_ll_sgStart;
  reg                 channels_1_ll_valid;
  reg                 channels_1_ll_head;
  reg                 channels_1_ll_justASync;
  reg                 channels_1_ll_waitDone;
  reg                 channels_1_ll_readDone;
  reg                 channels_1_ll_writeDone;
  reg                 channels_1_ll_gotDescriptorStall;
  reg                 channels_1_ll_packet;
  reg                 channels_1_ll_requireSync;
  reg        [31:0]   channels_1_ll_ptr;
  reg        [31:0]   channels_1_ll_ptrNext;
  wire                channels_1_ll_requestLl;
  reg                 channels_1_ll_descriptorUpdated;
  wire       [8:0]    channels_1_fifo_base;
  wire       [8:0]    channels_1_fifo_words;
  reg        [8:0]    channels_1_fifo_push_available;
  reg        [8:0]    channels_1_fifo_push_availableDecr;
  reg        [8:0]    channels_1_fifo_push_ptr;
  wire       [8:0]    channels_1_fifo_push_ptrWithBase;
  wire       [8:0]    channels_1_fifo_push_ptrIncr_value;
  reg        [8:0]    channels_1_fifo_pop_ptr;
  wire       [10:0]   channels_1_fifo_pop_bytes;
  wire       [8:0]    channels_1_fifo_pop_ptrWithBase;
  wire       [10:0]   channels_1_fifo_pop_bytesIncr_value;
  wire       [10:0]   channels_1_fifo_pop_bytesDecr_value;
  wire                channels_1_fifo_pop_empty;
  wire       [8:0]    channels_1_fifo_pop_ptrIncr_value;
  reg        [10:0]   channels_1_fifo_pop_withoutOverride_exposed;
  wire                channels_1_fifo_empty;
  reg                 channels_1_push_memory;
  reg        [31:0]   channels_1_push_m2b_address;
  wire       [5:0]    channels_1_push_m2b_bytePerBurst;
  reg                 channels_1_push_m2b_loadDone;
  reg        [25:0]   channels_1_push_m2b_bytesLeft;
  reg        [3:0]    channels_1_push_m2b_memPending;
  reg                 channels_1_push_m2b_memPendingIncr;
  reg                 channels_1_push_m2b_memPendingDecr;
  reg                 channels_1_push_m2b_loadRequest;
  reg                 channels_1_pop_memory;
  reg                 channels_1_pop_b2s_last;
  reg        [0:0]    channels_1_pop_b2s_portId;
  reg                 channels_1_pop_b2s_veryLastTrigger;
  reg                 channels_1_pop_b2s_veryLastValid;
  reg        [8:0]    channels_1_pop_b2s_veryLastPtr;
  reg                 channels_1_pop_b2s_veryLastEndPacket;
  reg                 channels_1_readyForChannelCompletion;
  reg                 _zz_11;
  wire                channels_1_s2b_full;
  reg        [8:0]    channels_1_fifo_pop_ptrIncr_value_regNext;
  reg                 channels_1_interrupts_completion_enable;
  reg                 channels_1_interrupts_completion_valid;
  reg                 channels_1_interrupts_onChannelCompletion_enable;
  reg                 channels_1_interrupts_onChannelCompletion_valid;
  reg                 channels_1_interrupts_onLinkedListUpdate_enable;
  reg                 channels_1_interrupts_onLinkedListUpdate_valid;
  wire       [0:0]    b2s_0_cmd_channelsOh;
  wire       [0:0]    b2s_0_cmd_context_channel;
  wire                b2s_0_cmd_context_veryLast;
  wire                b2s_0_cmd_context_endPacket;
  wire       [8:0]    b2s_0_cmd_veryLastPtr;
  wire       [8:0]    b2s_0_cmd_address;
  wire       [0:0]    b2s_0_rsp_context_channel;
  wire                b2s_0_rsp_context_veryLast;
  wire                b2s_0_rsp_context_endPacket;
  wire       [2:0]    _zz_12;
  wire       [0:0]    b2s_1_cmd_channelsOh;
  wire       [0:0]    b2s_1_cmd_context_channel;
  wire                b2s_1_cmd_context_veryLast;
  wire                b2s_1_cmd_context_endPacket;
  wire       [8:0]    b2s_1_cmd_veryLastPtr;
  wire       [8:0]    b2s_1_cmd_address;
  wire       [0:0]    b2s_1_rsp_context_channel;
  wire                b2s_1_rsp_context_veryLast;
  wire                b2s_1_rsp_context_endPacket;
  wire       [2:0]    _zz_13;
  reg                 m2b_cmd_s0_valid;
  reg        [0:0]    m2b_cmd_s0_chosen;
  wire       [1:0]    _zz_14;
  wire       [31:0]   m2b_cmd_s0_address;
  wire       [25:0]   m2b_cmd_s0_bytesLeft;
  wire       [5:0]    m2b_cmd_s0_readAddressBurstRange;
  wire       [5:0]    m2b_cmd_s0_lengthHead;
  wire       [5:0]    m2b_cmd_s0_length;
  wire                m2b_cmd_s0_lastBurst;
  reg                 m2b_cmd_s1_valid;
  reg        [31:0]   m2b_cmd_s1_address;
  reg        [5:0]    m2b_cmd_s1_length;
  reg                 m2b_cmd_s1_lastBurst;
  reg        [25:0]   m2b_cmd_s1_bytesLeft;
  wire       [0:0]    m2b_cmd_s1_context_channel;
  wire       [2:0]    m2b_cmd_s1_context_start;
  wire       [2:0]    m2b_cmd_s1_context_stop;
  wire       [5:0]    m2b_cmd_s1_context_length;
  wire                m2b_cmd_s1_context_last;
  wire       [31:0]   m2b_cmd_s1_addressNext;
  wire       [25:0]   m2b_cmd_s1_byteLeftNext;
  wire       [4:0]    m2b_cmd_s1_fifoPushDecr;
  wire       [0:0]    m2b_rsp_context_channel;
  wire       [2:0]    m2b_rsp_context_start;
  wire       [2:0]    m2b_rsp_context_stop;
  wire       [5:0]    m2b_rsp_context_length;
  wire                m2b_rsp_context_last;
  wire       [13:0]   _zz_15;
  wire                m2b_rsp_veryLast;
  reg                 m2b_rsp_first;
  wire                m2b_rsp_writeContext_last;
  wire                m2b_rsp_writeContext_lastOfBurst;
  wire       [0:0]    m2b_rsp_writeContext_channel;
  wire       [3:0]    m2b_rsp_writeContext_loadByteInNextBeat;
  wire                m2b_writeRsp_context_last;
  wire                m2b_writeRsp_context_lastOfBurst;
  wire       [0:0]    m2b_writeRsp_context_channel;
  wire       [3:0]    m2b_writeRsp_context_loadByteInNextBeat;
  wire       [6:0]    _zz_16;
  wire                _zz_17;
  wire                _zz_18;
  wire                ll_arbiter_head;
  wire                ll_arbiter_isJustASink;
  reg                 ll_cmd_valid;
  reg                 ll_cmd_oh_0;
  reg        [31:0]   ll_cmd_ptr;
  reg        [31:0]   ll_cmd_ptrNext;
  reg                 ll_cmd_endOfPacket;
  reg                 ll_cmd_isJustASink;
  reg                 ll_cmd_readFired;
  reg                 ll_cmd_writeFired;
  wire       [3:0]    ll_cmd_writeMaskSplit_0;
  wire       [3:0]    ll_cmd_writeMaskSplit_1;
  wire       [31:0]   ll_cmd_writeDataSplit_0;
  wire       [31:0]   ll_cmd_writeDataSplit_1;
  wire       [0:0]    _zz_19;
  wire                ll_readRsp_oh_0;
  reg        [1:0]    ll_readRsp_beatCounter;
  reg                 ll_readRsp_completed;
  wire       [0:0]    _zz_20;
  wire                ll_writeRsp_oh_0;
  reg                 _zz_21;
  reg                 _zz_22;
  reg                 _zz_23;
  reg                 _zz_24;
  reg                 _zz_25;
  reg                 _zz_26;
  reg                 _zz_27;
  reg                 _zz_28;
  reg                 _zz_29;
  function [7:0] zz_io_sgWrite_cmd_payload_fragment_mask(input dummy);
    begin
      zz_io_sgWrite_cmd_payload_fragment_mask[7 : 4] = 4'b0000;
      zz_io_sgWrite_cmd_payload_fragment_mask[3 : 0] = 4'b1111;
    end
  endfunction
  wire [7:0] _zz_151;

  assign _zz_44 = (! channels_0_descriptorValid);
  assign _zz_45 = (channels_0_selfRestart && (! channels_0_ctrl_kick));
  assign _zz_46 = (1'b0 == m2b_cmd_s0_chosen);
  assign _zz_47 = (! m2b_cmd_s0_valid);
  assign _zz_48 = ({channels_1_push_m2b_loadRequest,channels_0_push_m2b_loadRequest} != 2'b00);
  assign _zz_49 = ((io_read_rsp_valid && io_read_rsp_ready) && m2b_rsp_veryLast);
  assign _zz_50 = (((channels_1_ll_valid && channels_1_ll_waitDone) && channels_1_ll_writeDone) && channels_1_ll_readDone);
  assign _zz_51 = (! channels_1_ll_justASync);
  assign _zz_52 = (! channels_1_ll_gotDescriptorStall);
  assign _zz_53 = (1'b1 == m2b_cmd_s0_chosen);
  assign _zz_54 = (! ll_cmd_valid);
  assign _zz_55 = (io_sgRead_rsp_valid && io_sgRead_rsp_ready);
  assign _zz_56 = (channels_0_fifo_pop_withoutOverride_exposed + channels_0_fifo_pop_bytesIncr_value);
  assign _zz_57 = (channels_0_push_m2b_memPending + _zz_59);
  assign _zz_58 = channels_0_push_m2b_memPendingIncr;
  assign _zz_59 = {3'd0, _zz_58};
  assign _zz_60 = channels_0_push_m2b_memPendingDecr;
  assign _zz_61 = {3'd0, _zz_60};
  assign _zz_62 = (channels_0_push_m2b_bytePerBurst >>> 2);
  assign _zz_63 = {5'd0, _zz_62};
  assign _zz_64 = {20'd0, channels_0_push_m2b_bytePerBurst};
  assign _zz_65 = (channels_0_push_m2b_address - _zz_66);
  assign _zz_66 = {6'd0, channels_0_bytes};
  assign _zz_67 = (channels_0_fifo_push_available + channels_0_fifo_pop_ptrIncr_value_regNext);
  assign _zz_68 = (channels_1_fifo_pop_withoutOverride_exposed + channels_1_fifo_pop_bytesIncr_value);
  assign _zz_69 = (channels_1_push_m2b_memPending + _zz_71);
  assign _zz_70 = channels_1_push_m2b_memPendingIncr;
  assign _zz_71 = {3'd0, _zz_70};
  assign _zz_72 = channels_1_push_m2b_memPendingDecr;
  assign _zz_73 = {3'd0, _zz_72};
  assign _zz_74 = (channels_1_push_m2b_bytePerBurst >>> 2);
  assign _zz_75 = {5'd0, _zz_74};
  assign _zz_76 = {20'd0, channels_1_push_m2b_bytePerBurst};
  assign _zz_77 = (channels_1_fifo_push_available + channels_1_fifo_pop_ptrIncr_value_regNext);
  assign _zz_78 = _zz_12[1 : 1];
  assign _zz_79 = _zz_12[2 : 2];
  assign _zz_80 = _zz_13[1 : 1];
  assign _zz_81 = _zz_13[2 : 2];
  assign _zz_82 = ((_zz_83 < m2b_cmd_s0_bytesLeft) ? _zz_84 : m2b_cmd_s0_bytesLeft);
  assign _zz_83 = {20'd0, m2b_cmd_s0_lengthHead};
  assign _zz_84 = {20'd0, m2b_cmd_s0_lengthHead};
  assign _zz_85 = {20'd0, m2b_cmd_s0_length};
  assign _zz_86 = (m2b_cmd_s1_address + _zz_87);
  assign _zz_87 = {26'd0, m2b_cmd_s1_length};
  assign _zz_88 = (m2b_cmd_s1_address + _zz_89);
  assign _zz_89 = {26'd0, m2b_cmd_s1_length};
  assign _zz_90 = (m2b_cmd_s1_bytesLeft - _zz_91);
  assign _zz_91 = {20'd0, m2b_cmd_s1_length};
  assign _zz_92 = ({1'b0,(_zz_93 | 6'h07)} + _zz_97);
  assign _zz_93 = (_zz_95 + io_read_cmd_payload_fragment_length);
  assign _zz_94 = m2b_cmd_s1_address[2 : 0];
  assign _zz_95 = {3'd0, _zz_94};
  assign _zz_96 = {1'b0,1'b1};
  assign _zz_97 = {5'd0, _zz_96};
  assign _zz_98 = _zz_15[13 : 13];
  assign _zz_99 = _zz_16[0 : 0];
  assign _zz_100 = _zz_16[1 : 1];
  assign _zz_101 = io_sgRead_rsp_payload_fragment_data[62 : 62];
  assign _zz_102 = io_sgRead_rsp_payload_fragment_data[31 : 31];
  assign _zz_103 = io_ctrl_cmd_payload_fragment_data[0 : 0];
  assign _zz_104 = 1'b1;
  assign _zz_105 = io_ctrl_cmd_payload_fragment_data[0 : 0];
  assign _zz_106 = 1'b1;
  assign _zz_107 = io_ctrl_cmd_payload_fragment_data[0 : 0];
  assign _zz_108 = 1'b0;
  assign _zz_109 = io_ctrl_cmd_payload_fragment_data[2 : 2];
  assign _zz_110 = 1'b0;
  assign _zz_111 = io_ctrl_cmd_payload_fragment_data[4 : 4];
  assign _zz_112 = 1'b1;
  assign _zz_113 = io_ctrl_cmd_payload_fragment_data[4 : 4];
  assign _zz_114 = 1'b1;
  assign _zz_115 = io_ctrl_cmd_payload_fragment_data[0 : 0];
  assign _zz_116 = 1'b0;
  assign _zz_117 = io_ctrl_cmd_payload_fragment_data[2 : 2];
  assign _zz_118 = 1'b0;
  assign _zz_119 = io_ctrl_cmd_payload_fragment_data[3 : 3];
  assign _zz_120 = 1'b0;
  assign _zz_121 = io_ctrl_cmd_payload_fragment_data[31 : 0];
  assign _zz_122 = _zz_121;
  assign _zz_123 = io_ctrl_cmd_payload_fragment_data[12 : 12];
  assign _zz_124 = io_ctrl_cmd_payload_fragment_data[12 : 12];
  assign _zz_125 = io_ctrl_cmd_payload_fragment_data[13 : 13];
  assign _zz_126 = io_ctrl_cmd_payload_fragment_data[2 : 2];
  assign _zz_127 = io_ctrl_cmd_payload_fragment_data[1 : 1];
  assign _zz_128 = io_ctrl_cmd_payload_fragment_data[0 : 0];
  assign _zz_129 = io_ctrl_cmd_payload_fragment_data[2 : 2];
  assign _zz_130 = io_ctrl_cmd_payload_fragment_data[12 : 12];
  assign _zz_131 = io_ctrl_cmd_payload_fragment_data[12 : 12];
  assign _zz_132 = io_ctrl_cmd_payload_fragment_data[13 : 13];
  assign _zz_133 = io_ctrl_cmd_payload_fragment_data[2 : 2];
  assign _zz_134 = io_ctrl_cmd_payload_fragment_data[0 : 0];
  assign _zz_135 = io_ctrl_cmd_payload_fragment_data[2 : 2];
  assign _zz_136 = io_ctrl_cmd_payload_fragment_data[3 : 3];
  assign _zz_137 = (((io_read_rsp_valid && memory_core_io_writes_0_cmd_ready) && (m2b_rsp_context_channel == 1'b0)) ? 2'b10 : 2'b00);
  assign _zz_138 = {7'd0, _zz_137};
  assign _zz_139 = (_zz_17 ? _zz_141 : 4'b0000);
  assign _zz_140 = {7'd0, _zz_139};
  assign _zz_141 = (m2b_writeRsp_context_loadByteInNextBeat + 4'b0001);
  assign _zz_142 = ((b2s_0_cmd_channelsOh[0] && memory_core_io_reads_0_cmd_ready) ? 2'b10 : 2'b00);
  assign _zz_143 = {7'd0, _zz_142};
  assign _zz_144 = (((io_read_rsp_valid && memory_core_io_writes_0_cmd_ready) && (m2b_rsp_context_channel == 1'b1)) ? 2'b10 : 2'b00);
  assign _zz_145 = {7'd0, _zz_144};
  assign _zz_146 = (_zz_18 ? _zz_148 : 4'b0000);
  assign _zz_147 = {7'd0, _zz_146};
  assign _zz_148 = (m2b_writeRsp_context_loadByteInNextBeat + 4'b0001);
  assign _zz_149 = ((b2s_1_cmd_channelsOh[0] && memory_core_io_reads_1_cmd_ready) ? 1'b1 : 1'b0);
  assign _zz_150 = {8'd0, _zz_149};
  DmaMemoryCore memory_core (
    .io_writes_0_cmd_valid              (io_read_rsp_valid                                 ), //i
    .io_writes_0_cmd_ready              (memory_core_io_writes_0_cmd_ready                 ), //o
    .io_writes_0_cmd_payload_address    (_zz_30[7:0]                                       ), //i
    .io_writes_0_cmd_payload_data       (io_read_rsp_payload_fragment_data[63:0]           ), //i
    .io_writes_0_cmd_payload_mask       (_zz_31[7:0]                                       ), //i
    .io_writes_0_cmd_payload_context    (_zz_32[6:0]                                       ), //i
    .io_writes_0_rsp_valid              (memory_core_io_writes_0_rsp_valid                 ), //o
    .io_writes_0_rsp_payload_context    (memory_core_io_writes_0_rsp_payload_context[6:0]  ), //o
    .io_reads_0_cmd_valid               (_zz_33                                            ), //i
    .io_reads_0_cmd_ready               (memory_core_io_reads_0_cmd_ready                  ), //o
    .io_reads_0_cmd_payload_address     (_zz_34[7:0]                                       ), //i
    .io_reads_0_cmd_payload_priority    (channels_0_priority[1:0]                          ), //i
    .io_reads_0_cmd_payload_context     (_zz_35[2:0]                                       ), //i
    .io_reads_0_rsp_valid               (memory_core_io_reads_0_rsp_valid                  ), //o
    .io_reads_0_rsp_ready               (io_outputs_0_ready                                ), //i
    .io_reads_0_rsp_payload_data        (memory_core_io_reads_0_rsp_payload_data[63:0]     ), //o
    .io_reads_0_rsp_payload_mask        (memory_core_io_reads_0_rsp_payload_mask[7:0]      ), //o
    .io_reads_0_rsp_payload_context     (memory_core_io_reads_0_rsp_payload_context[2:0]   ), //o
    .io_reads_1_cmd_valid               (_zz_36                                            ), //i
    .io_reads_1_cmd_ready               (memory_core_io_reads_1_cmd_ready                  ), //o
    .io_reads_1_cmd_payload_address     (_zz_37[7:0]                                       ), //i
    .io_reads_1_cmd_payload_priority    (channels_1_priority[1:0]                          ), //i
    .io_reads_1_cmd_payload_context     (_zz_38[2:0]                                       ), //i
    .io_reads_1_rsp_valid               (memory_core_io_reads_1_rsp_valid                  ), //o
    .io_reads_1_rsp_ready               (io_outputs_1_ready                                ), //i
    .io_reads_1_rsp_payload_data        (memory_core_io_reads_1_rsp_payload_data[31:0]     ), //o
    .io_reads_1_rsp_payload_mask        (memory_core_io_reads_1_rsp_payload_mask[3:0]      ), //o
    .io_reads_1_rsp_payload_context     (memory_core_io_reads_1_rsp_payload_context[2:0]   ), //o
    .CLKOUT0                            (CLKOUT0                                           ), //i
    .systemCd_logic_outputReset         (systemCd_logic_outputReset                        )  //i
  );
  StreamArbiter_3 m2b_cmd_arbiter (
    .io_inputs_0_valid             (channels_0_push_m2b_loadRequest    ), //i
    .io_inputs_0_ready             (m2b_cmd_arbiter_io_inputs_0_ready  ), //o
    .io_inputs_1_valid             (channels_1_push_m2b_loadRequest    ), //i
    .io_inputs_1_ready             (m2b_cmd_arbiter_io_inputs_1_ready  ), //o
    .io_output_valid               (m2b_cmd_arbiter_io_output_valid    ), //o
    .io_output_ready               (_zz_39                             ), //i
    .io_chosen                     (m2b_cmd_arbiter_io_chosen          ), //o
    .io_chosenOH                   (m2b_cmd_arbiter_io_chosenOH[1:0]   ), //o
    .CLKOUT0                       (CLKOUT0                            ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset         )  //i
  );
  always @(*) begin
    case(m2b_cmd_s0_chosen)
      1'b0 : begin
        _zz_40 = channels_0_push_m2b_address;
        _zz_41 = channels_0_push_m2b_bytesLeft;
        _zz_42 = channels_0_push_m2b_bytePerBurst;
      end
      default : begin
        _zz_40 = channels_1_push_m2b_address;
        _zz_41 = channels_1_push_m2b_bytesLeft;
        _zz_42 = channels_1_push_m2b_bytePerBurst;
      end
    endcase
  end

  always @(*) begin
    case(m2b_rsp_context_channel)
      1'b0 : begin
        _zz_43 = channels_0_fifo_push_ptrWithBase;
      end
      default : begin
        _zz_43 = channels_1_fifo_push_ptrWithBase;
      end
    endcase
  end

  assign ctrl_readHaltTrigger = 1'b0;
  assign ctrl_writeHaltTrigger = 1'b0;
  assign _zz_1 = (! (ctrl_readHaltTrigger || ctrl_writeHaltTrigger));
  assign ctrl_rsp_ready = (_zz_2 && _zz_1);
  assign _zz_2 = ((1'b1 && (! _zz_3)) || io_ctrl_rsp_ready);
  assign _zz_3 = _zz_4;
  assign io_ctrl_rsp_valid = _zz_3;
  assign io_ctrl_rsp_payload_last = _zz_5;
  assign io_ctrl_rsp_payload_fragment_source = _zz_6;
  assign io_ctrl_rsp_payload_fragment_opcode = _zz_7;
  assign io_ctrl_rsp_payload_fragment_data = _zz_8;
  assign io_ctrl_rsp_payload_fragment_context = _zz_9;
  assign ctrl_askWrite = (io_ctrl_cmd_valid && (io_ctrl_cmd_payload_fragment_opcode == 1'b1));
  assign ctrl_askRead = (io_ctrl_cmd_valid && (io_ctrl_cmd_payload_fragment_opcode == 1'b0));
  assign ctrl_doWrite = ((io_ctrl_cmd_valid && io_ctrl_cmd_ready) && (io_ctrl_cmd_payload_fragment_opcode == 1'b1));
  assign ctrl_doRead = ((io_ctrl_cmd_valid && io_ctrl_cmd_ready) && (io_ctrl_cmd_payload_fragment_opcode == 1'b0));
  assign ctrl_rsp_valid = io_ctrl_cmd_valid;
  assign io_ctrl_cmd_ready = ctrl_rsp_ready;
  assign ctrl_rsp_payload_last = 1'b1;
  assign ctrl_rsp_payload_fragment_opcode = 1'b0;
  always @ (*) begin
    ctrl_rsp_payload_fragment_data = 32'h0;
    case(io_ctrl_cmd_payload_fragment_address)
      16'h002c : begin
        ctrl_rsp_payload_fragment_data[0 : 0] = channels_0_channelValid;
      end
      16'h0054 : begin
        ctrl_rsp_payload_fragment_data[0 : 0] = channels_0_interrupts_completion_valid;
        ctrl_rsp_payload_fragment_data[2 : 2] = channels_0_interrupts_onChannelCompletion_valid;
      end
      16'h00ac : begin
        ctrl_rsp_payload_fragment_data[0 : 0] = channels_1_channelValid;
      end
      16'h00f0 : begin
        ctrl_rsp_payload_fragment_data[31 : 0] = channels_1_ll_ptr;
      end
      16'h00d4 : begin
        ctrl_rsp_payload_fragment_data[0 : 0] = channels_1_interrupts_completion_valid;
        ctrl_rsp_payload_fragment_data[2 : 2] = channels_1_interrupts_onChannelCompletion_valid;
        ctrl_rsp_payload_fragment_data[3 : 3] = channels_1_interrupts_onLinkedListUpdate_valid;
      end
      default : begin
      end
    endcase
  end

  assign ctrl_rsp_payload_fragment_context = io_ctrl_cmd_payload_fragment_context;
  assign ctrl_rsp_payload_fragment_source = io_ctrl_cmd_payload_fragment_source;
  always @ (*) begin
    channels_0_channelStart = 1'b0;
    if(_zz_21)begin
      if(_zz_103[0])begin
        channels_0_channelStart = _zz_104[0];
      end
    end
  end

  always @ (*) begin
    channels_0_channelCompletion = 1'b0;
    if(channels_0_channelValid)begin
      if(channels_0_channelStop)begin
        if(channels_0_readyToStop)begin
          channels_0_channelCompletion = 1'b1;
        end
      end
    end
  end

  always @ (*) begin
    channels_0_descriptorStart = 1'b0;
    if(channels_0_ctrl_kick)begin
      channels_0_descriptorStart = 1'b1;
    end
    if(channels_0_channelValid)begin
      if(! channels_0_channelStop) begin
        if(_zz_44)begin
          if(_zz_45)begin
            channels_0_descriptorStart = 1'b1;
          end
        end
      end
    end
  end

  always @ (*) begin
    channels_0_descriptorCompletion = 1'b0;
    if(((((channels_0_descriptorValid && (! channels_0_pop_memory)) && channels_0_push_memory) && channels_0_push_m2b_loadDone) && (channels_0_push_m2b_memPending == 4'b0000)))begin
      channels_0_descriptorCompletion = 1'b1;
    end
    if(channels_0_channelValid)begin
      if(channels_0_channelStop)begin
        if(channels_0_readyToStop)begin
          channels_0_descriptorCompletion = 1'b1;
        end
      end
    end
  end

  always @ (*) begin
    channels_0_readyToStop = 1'b1;
    if((channels_0_push_m2b_memPending != 4'b0000))begin
      channels_0_readyToStop = 1'b0;
    end
  end

  assign channels_0_fifo_base = 9'h0;
  assign channels_0_fifo_words = 9'h03f;
  always @ (*) begin
    channels_0_fifo_push_availableDecr = 9'h0;
    if(m2b_cmd_s1_valid)begin
      if(io_read_cmd_ready)begin
        if(_zz_46)begin
          channels_0_fifo_push_availableDecr = {4'd0, m2b_cmd_s1_fifoPushDecr};
        end
      end
    end
  end

  assign channels_0_fifo_push_ptrWithBase = ((channels_0_fifo_base & (~ channels_0_fifo_words)) | (channels_0_fifo_push_ptr & channels_0_fifo_words));
  assign channels_0_fifo_pop_ptrWithBase = ((channels_0_fifo_base & (~ channels_0_fifo_words)) | (channels_0_fifo_pop_ptr & channels_0_fifo_words));
  assign channels_0_fifo_pop_empty = (channels_0_fifo_pop_ptr == channels_0_fifo_push_ptr);
  assign channels_0_fifo_pop_bytes = channels_0_fifo_pop_withoutOverride_exposed;
  assign channels_0_fifo_empty = (channels_0_fifo_push_ptr == channels_0_fifo_pop_ptr);
  assign channels_0_push_m2b_bytePerBurst = 6'h3f;
  always @ (*) begin
    channels_0_push_m2b_memPendingIncr = 1'b0;
    if(_zz_47)begin
      if(_zz_48)begin
        if(_zz_14[0])begin
          channels_0_push_m2b_memPendingIncr = 1'b1;
        end
      end
    end
  end

  always @ (*) begin
    channels_0_push_m2b_memPendingDecr = 1'b0;
    if((_zz_17 && m2b_writeRsp_context_lastOfBurst))begin
      channels_0_push_m2b_memPendingDecr = 1'b1;
    end
  end

  always @ (*) begin
    channels_0_push_m2b_loadRequest = (((((channels_0_descriptorValid && (! channels_0_channelStop)) && (! channels_0_push_m2b_loadDone)) && channels_0_push_memory) && (_zz_63 < channels_0_fifo_push_available)) && (channels_0_push_m2b_memPending != 4'b1000));
    if((((! channels_0_pop_memory) && channels_0_pop_b2s_veryLastValid) && (channels_0_push_m2b_bytesLeft <= _zz_64)))begin
      channels_0_push_m2b_loadRequest = 1'b0;
    end
  end

  always @ (*) begin
    channels_0_pop_b2s_veryLastTrigger = 1'b0;
    if(_zz_49)begin
      if((m2b_rsp_context_channel == 1'b0))begin
        channels_0_pop_b2s_veryLastTrigger = 1'b1;
      end
    end
  end

  always @ (*) begin
    channels_0_readyForChannelCompletion = 1'b1;
    if(((! channels_0_pop_memory) && (! channels_0_fifo_pop_empty)))begin
      channels_0_readyForChannelCompletion = 1'b0;
    end
  end

  always @ (*) begin
    _zz_10 = 1'b1;
    if(_zz_45)begin
      _zz_10 = 1'b0;
    end
    if(channels_0_ctrl_kick)begin
      _zz_10 = 1'b0;
    end
  end

  assign channels_0_s2b_full = (channels_0_fifo_push_available < 9'h002);
  always @ (*) begin
    channels_1_channelStart = 1'b0;
    if(_zz_25)begin
      if(_zz_111[0])begin
        channels_1_channelStart = _zz_112[0];
      end
    end
  end

  always @ (*) begin
    channels_1_channelCompletion = 1'b0;
    if(channels_1_channelValid)begin
      if(channels_1_channelStop)begin
        if(channels_1_readyToStop)begin
          channels_1_channelCompletion = 1'b1;
        end
      end
    end
  end

  always @ (*) begin
    channels_1_descriptorStart = 1'b0;
    if(_zz_50)begin
      if(_zz_51)begin
        if(_zz_52)begin
          channels_1_descriptorStart = 1'b1;
        end
      end
    end
  end

  always @ (*) begin
    channels_1_descriptorCompletion = 1'b0;
    if(((((channels_1_descriptorValid && (! channels_1_pop_memory)) && channels_1_push_memory) && channels_1_push_m2b_loadDone) && (channels_1_push_m2b_memPending == 4'b0000)))begin
      channels_1_descriptorCompletion = 1'b1;
    end
    if(channels_1_channelValid)begin
      if(channels_1_channelStop)begin
        if(channels_1_readyToStop)begin
          channels_1_descriptorCompletion = 1'b1;
        end
      end
    end
  end

  always @ (*) begin
    channels_1_readyToStop = 1'b1;
    if(channels_1_ll_waitDone)begin
      channels_1_readyToStop = 1'b0;
    end
    if((channels_1_push_m2b_memPending != 4'b0000))begin
      channels_1_readyToStop = 1'b0;
    end
  end

  always @ (*) begin
    channels_1_ll_sgStart = 1'b0;
    if(_zz_26)begin
      if(_zz_113[0])begin
        channels_1_ll_sgStart = _zz_114[0];
      end
    end
  end

  assign channels_1_ll_requestLl = ((((channels_1_channelValid && channels_1_ll_valid) && (! channels_1_channelStop)) && (! channels_1_ll_waitDone)) && ((! channels_1_descriptorValid) || channels_1_ll_requireSync));
  always @ (*) begin
    channels_1_ll_descriptorUpdated = 1'b0;
    if(_zz_50)begin
      if((! channels_1_ll_head))begin
        channels_1_ll_descriptorUpdated = 1'b1;
      end
    end
  end

  assign channels_1_fifo_base = 9'h040;
  assign channels_1_fifo_words = 9'h03f;
  always @ (*) begin
    channels_1_fifo_push_availableDecr = 9'h0;
    if(m2b_cmd_s1_valid)begin
      if(io_read_cmd_ready)begin
        if(_zz_53)begin
          channels_1_fifo_push_availableDecr = {4'd0, m2b_cmd_s1_fifoPushDecr};
        end
      end
    end
  end

  assign channels_1_fifo_push_ptrWithBase = ((channels_1_fifo_base & (~ channels_1_fifo_words)) | (channels_1_fifo_push_ptr & channels_1_fifo_words));
  assign channels_1_fifo_pop_ptrWithBase = ((channels_1_fifo_base & (~ channels_1_fifo_words)) | (channels_1_fifo_pop_ptr & channels_1_fifo_words));
  assign channels_1_fifo_pop_empty = (channels_1_fifo_pop_ptr == channels_1_fifo_push_ptr);
  assign channels_1_fifo_pop_bytes = channels_1_fifo_pop_withoutOverride_exposed;
  assign channels_1_fifo_empty = (channels_1_fifo_push_ptr == channels_1_fifo_pop_ptr);
  assign channels_1_push_m2b_bytePerBurst = 6'h3f;
  always @ (*) begin
    channels_1_push_m2b_memPendingIncr = 1'b0;
    if(_zz_47)begin
      if(_zz_48)begin
        if(_zz_14[1])begin
          channels_1_push_m2b_memPendingIncr = 1'b1;
        end
      end
    end
  end

  always @ (*) begin
    channels_1_push_m2b_memPendingDecr = 1'b0;
    if((_zz_18 && m2b_writeRsp_context_lastOfBurst))begin
      channels_1_push_m2b_memPendingDecr = 1'b1;
    end
  end

  always @ (*) begin
    channels_1_push_m2b_loadRequest = (((((channels_1_descriptorValid && (! channels_1_channelStop)) && (! channels_1_push_m2b_loadDone)) && channels_1_push_memory) && (_zz_75 < channels_1_fifo_push_available)) && (channels_1_push_m2b_memPending != 4'b1000));
    if((((! channels_1_pop_memory) && channels_1_pop_b2s_veryLastValid) && (channels_1_push_m2b_bytesLeft <= _zz_76)))begin
      channels_1_push_m2b_loadRequest = 1'b0;
    end
  end

  always @ (*) begin
    channels_1_pop_b2s_veryLastTrigger = 1'b0;
    if(_zz_49)begin
      if((m2b_rsp_context_channel == 1'b1))begin
        channels_1_pop_b2s_veryLastTrigger = 1'b1;
      end
    end
  end

  always @ (*) begin
    channels_1_readyForChannelCompletion = 1'b1;
    if(((! channels_1_pop_memory) && (! channels_1_fifo_pop_empty)))begin
      channels_1_readyForChannelCompletion = 1'b0;
    end
  end

  always @ (*) begin
    _zz_11 = 1'b1;
    if(channels_1_ll_valid)begin
      _zz_11 = 1'b0;
    end
  end

  assign channels_1_s2b_full = (channels_1_fifo_push_available < 9'h002);
  assign b2s_0_cmd_channelsOh = (((channels_0_channelValid && (! channels_0_pop_memory)) && (channels_0_pop_b2s_portId == 1'b0)) && (! channels_0_fifo_pop_empty));
  assign b2s_0_cmd_veryLastPtr = channels_0_pop_b2s_veryLastPtr;
  assign b2s_0_cmd_address = channels_0_fifo_pop_ptrWithBase;
  assign b2s_0_cmd_context_channel = b2s_0_cmd_channelsOh;
  assign b2s_0_cmd_context_veryLast = ((channels_0_pop_b2s_veryLastValid && (b2s_0_cmd_address[8 : 1] == b2s_0_cmd_veryLastPtr[8 : 1])) && 1'b1);
  assign b2s_0_cmd_context_endPacket = channels_0_pop_b2s_veryLastEndPacket;
  assign _zz_33 = (b2s_0_cmd_channelsOh != 1'b0);
  assign _zz_34 = b2s_0_cmd_address[7:0];
  assign _zz_35 = {b2s_0_cmd_context_endPacket,{b2s_0_cmd_context_veryLast,b2s_0_cmd_context_channel}};
  assign _zz_12 = memory_core_io_reads_0_rsp_payload_context;
  assign b2s_0_rsp_context_channel = _zz_12[0 : 0];
  assign b2s_0_rsp_context_veryLast = _zz_78[0];
  assign b2s_0_rsp_context_endPacket = _zz_79[0];
  assign io_outputs_0_valid = memory_core_io_reads_0_rsp_valid;
  assign io_outputs_0_payload_data = memory_core_io_reads_0_rsp_payload_data;
  assign io_outputs_0_payload_mask = memory_core_io_reads_0_rsp_payload_mask;
  assign io_outputs_0_payload_last = (b2s_0_rsp_context_veryLast && b2s_0_rsp_context_endPacket);
  assign b2s_1_cmd_channelsOh = (((channels_1_channelValid && (! channels_1_pop_memory)) && (channels_1_pop_b2s_portId == 1'b0)) && (! channels_1_fifo_pop_empty));
  assign b2s_1_cmd_veryLastPtr = channels_1_pop_b2s_veryLastPtr;
  assign b2s_1_cmd_address = channels_1_fifo_pop_ptrWithBase;
  assign b2s_1_cmd_context_channel = b2s_1_cmd_channelsOh;
  assign b2s_1_cmd_context_veryLast = ((channels_1_pop_b2s_veryLastValid && (b2s_1_cmd_address[8 : 1] == b2s_1_cmd_veryLastPtr[8 : 1])) && (b2s_1_cmd_address[0 : 0] == 1'b1));
  assign b2s_1_cmd_context_endPacket = channels_1_pop_b2s_veryLastEndPacket;
  assign _zz_36 = (b2s_1_cmd_channelsOh != 1'b0);
  assign _zz_37 = b2s_1_cmd_address[7:0];
  assign _zz_38 = {b2s_1_cmd_context_endPacket,{b2s_1_cmd_context_veryLast,b2s_1_cmd_context_channel}};
  assign _zz_13 = memory_core_io_reads_1_rsp_payload_context;
  assign b2s_1_rsp_context_channel = _zz_13[0 : 0];
  assign b2s_1_rsp_context_veryLast = _zz_80[0];
  assign b2s_1_rsp_context_endPacket = _zz_81[0];
  assign io_outputs_1_valid = memory_core_io_reads_1_rsp_valid;
  assign io_outputs_1_payload_data = memory_core_io_reads_1_rsp_payload_data;
  assign io_outputs_1_payload_mask = memory_core_io_reads_1_rsp_payload_mask;
  assign io_outputs_1_payload_last = (b2s_1_rsp_context_veryLast && b2s_1_rsp_context_endPacket);
  always @ (*) begin
    _zz_39 = 1'b0;
    if(_zz_47)begin
      _zz_39 = 1'b1;
    end
  end

  assign _zz_14 = ({1'd0,1'b1} <<< m2b_cmd_arbiter_io_chosen);
  assign m2b_cmd_s0_address = _zz_40;
  assign m2b_cmd_s0_bytesLeft = _zz_41;
  assign m2b_cmd_s0_readAddressBurstRange = m2b_cmd_s0_address[5 : 0];
  assign m2b_cmd_s0_lengthHead = ((~ m2b_cmd_s0_readAddressBurstRange) & _zz_42);
  assign m2b_cmd_s0_length = _zz_82[5:0];
  assign m2b_cmd_s0_lastBurst = (m2b_cmd_s0_bytesLeft == _zz_85);
  assign m2b_cmd_s1_context_channel = m2b_cmd_s0_chosen;
  assign m2b_cmd_s1_context_start = m2b_cmd_s1_address[2:0];
  assign m2b_cmd_s1_context_stop = _zz_86[2:0];
  assign m2b_cmd_s1_context_last = m2b_cmd_s1_lastBurst;
  assign m2b_cmd_s1_context_length = m2b_cmd_s1_length;
  always @ (*) begin
    io_read_cmd_valid = 1'b0;
    if(m2b_cmd_s1_valid)begin
      io_read_cmd_valid = 1'b1;
    end
  end

  assign io_read_cmd_payload_last = 1'b1;
  assign io_read_cmd_payload_fragment_source = m2b_cmd_s0_chosen;
  assign io_read_cmd_payload_fragment_opcode = 1'b0;
  assign io_read_cmd_payload_fragment_address = m2b_cmd_s1_address;
  assign io_read_cmd_payload_fragment_length = m2b_cmd_s1_length;
  assign io_read_cmd_payload_fragment_context = {m2b_cmd_s1_context_last,{m2b_cmd_s1_context_length,{m2b_cmd_s1_context_stop,{m2b_cmd_s1_context_start,m2b_cmd_s1_context_channel}}}};
  assign m2b_cmd_s1_addressNext = (_zz_88 + 32'h00000001);
  assign m2b_cmd_s1_byteLeftNext = (_zz_90 - 26'h0000001);
  assign m2b_cmd_s1_fifoPushDecr = (_zz_92 >>> 2);
  assign _zz_15 = io_read_rsp_payload_fragment_context;
  assign m2b_rsp_context_channel = _zz_15[0 : 0];
  assign m2b_rsp_context_start = _zz_15[3 : 1];
  assign m2b_rsp_context_stop = _zz_15[6 : 4];
  assign m2b_rsp_context_length = _zz_15[12 : 7];
  assign m2b_rsp_context_last = _zz_98[0];
  assign m2b_rsp_veryLast = (m2b_rsp_context_last && io_read_rsp_payload_last);
  always @ (*) begin
    _zz_31[0] = ((! (m2b_rsp_first && (3'b000 < m2b_rsp_context_start))) && (! (io_read_rsp_payload_last && (m2b_rsp_context_stop < 3'b000))));
    _zz_31[1] = ((! (m2b_rsp_first && (3'b001 < m2b_rsp_context_start))) && (! (io_read_rsp_payload_last && (m2b_rsp_context_stop < 3'b001))));
    _zz_31[2] = ((! (m2b_rsp_first && (3'b010 < m2b_rsp_context_start))) && (! (io_read_rsp_payload_last && (m2b_rsp_context_stop < 3'b010))));
    _zz_31[3] = ((! (m2b_rsp_first && (3'b011 < m2b_rsp_context_start))) && (! (io_read_rsp_payload_last && (m2b_rsp_context_stop < 3'b011))));
    _zz_31[4] = ((! (m2b_rsp_first && (3'b100 < m2b_rsp_context_start))) && (! (io_read_rsp_payload_last && (m2b_rsp_context_stop < 3'b100))));
    _zz_31[5] = ((! (m2b_rsp_first && (3'b101 < m2b_rsp_context_start))) && (! (io_read_rsp_payload_last && (m2b_rsp_context_stop < 3'b101))));
    _zz_31[6] = ((! (m2b_rsp_first && (3'b110 < m2b_rsp_context_start))) && (! (io_read_rsp_payload_last && (m2b_rsp_context_stop < 3'b110))));
    _zz_31[7] = ((! (m2b_rsp_first && (3'b111 < m2b_rsp_context_start))) && (! (io_read_rsp_payload_last && (m2b_rsp_context_stop < 3'b111))));
  end

  assign m2b_rsp_writeContext_last = m2b_rsp_veryLast;
  assign m2b_rsp_writeContext_lastOfBurst = io_read_rsp_payload_last;
  assign m2b_rsp_writeContext_channel = m2b_rsp_context_channel;
  assign m2b_rsp_writeContext_loadByteInNextBeat = ({1'b0,(io_read_rsp_payload_last ? m2b_rsp_context_stop : 3'b111)} - {1'b0,(m2b_rsp_first ? m2b_rsp_context_start : 3'b000)});
  assign _zz_30 = _zz_43[7:0];
  assign io_read_rsp_ready = memory_core_io_writes_0_cmd_ready;
  assign _zz_32 = {m2b_rsp_writeContext_loadByteInNextBeat,{m2b_rsp_writeContext_channel,{m2b_rsp_writeContext_lastOfBurst,m2b_rsp_writeContext_last}}};
  assign _zz_16 = memory_core_io_writes_0_rsp_payload_context;
  assign m2b_writeRsp_context_last = _zz_99[0];
  assign m2b_writeRsp_context_lastOfBurst = _zz_100[0];
  assign m2b_writeRsp_context_channel = _zz_16[2 : 2];
  assign m2b_writeRsp_context_loadByteInNextBeat = _zz_16[6 : 3];
  assign _zz_17 = (memory_core_io_writes_0_rsp_valid && (m2b_writeRsp_context_channel == 1'b0));
  assign _zz_18 = (memory_core_io_writes_0_rsp_valid && (m2b_writeRsp_context_channel == 1'b1));
  assign ll_arbiter_head = channels_1_ll_head;
  assign ll_arbiter_isJustASink = channels_1_descriptorValid;
  assign io_sgRead_cmd_valid = (ll_cmd_valid && (! ll_cmd_readFired));
  assign io_sgRead_cmd_payload_last = 1'b1;
  assign io_sgRead_cmd_payload_fragment_address = {ll_cmd_ptrNext[31 : 5],5'h0};
  assign io_sgRead_cmd_payload_fragment_length = 5'h1f;
  assign io_sgRead_cmd_payload_fragment_opcode = 1'b0;
  assign io_sgWrite_cmd_valid = (ll_cmd_valid && (! ll_cmd_writeFired));
  assign io_sgWrite_cmd_payload_last = 1'b1;
  assign io_sgWrite_cmd_payload_fragment_address = {ll_cmd_ptr[31 : 5],5'h0};
  assign io_sgWrite_cmd_payload_fragment_length = 2'b11;
  assign io_sgWrite_cmd_payload_fragment_opcode = 1'b1;
  assign ll_cmd_writeMaskSplit_0 = io_sgWrite_cmd_payload_fragment_mask[3 : 0];
  assign ll_cmd_writeMaskSplit_1 = io_sgWrite_cmd_payload_fragment_mask[7 : 4];
  assign ll_cmd_writeDataSplit_0 = io_sgWrite_cmd_payload_fragment_data[31 : 0];
  assign ll_cmd_writeDataSplit_1 = io_sgWrite_cmd_payload_fragment_data[63 : 32];
  assign _zz_151 = zz_io_sgWrite_cmd_payload_fragment_mask(1'b0);
  always @ (*) io_sgWrite_cmd_payload_fragment_mask = _zz_151;
  always @ (*) begin
    io_sgWrite_cmd_payload_fragment_data[63 : 32] = 32'h0;
    io_sgWrite_cmd_payload_fragment_data[31 : 0] = 32'h0;
    io_sgWrite_cmd_payload_fragment_data[26 : 0] = 27'h0;
    io_sgWrite_cmd_payload_fragment_data[30] = ll_cmd_endOfPacket;
    io_sgWrite_cmd_payload_fragment_data[31] = (! ll_cmd_isJustASink);
  end

  assign _zz_19[0] = 1'b1;
  assign ll_readRsp_oh_0 = _zz_19[0];
  assign io_sgRead_rsp_ready = 1'b1;
  assign _zz_20[0] = 1'b1;
  assign ll_writeRsp_oh_0 = _zz_20[0];
  assign io_sgWrite_rsp_ready = 1'b1;
  always @ (*) begin
    io_interrupts = 2'b00;
    if(channels_0_interrupts_completion_valid)begin
      io_interrupts[0] = 1'b1;
    end
    if(channels_0_interrupts_onChannelCompletion_valid)begin
      io_interrupts[0] = 1'b1;
    end
    if(channels_1_interrupts_completion_valid)begin
      io_interrupts[1] = 1'b1;
    end
    if(channels_1_interrupts_onChannelCompletion_valid)begin
      io_interrupts[1] = 1'b1;
    end
    if(channels_1_interrupts_onLinkedListUpdate_valid)begin
      io_interrupts[1] = 1'b1;
    end
  end

  always @ (*) begin
    _zz_21 = 1'b0;
    case(io_ctrl_cmd_payload_fragment_address)
      16'h002c : begin
        if(ctrl_doWrite)begin
          _zz_21 = 1'b1;
        end
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    _zz_22 = 1'b0;
    case(io_ctrl_cmd_payload_fragment_address)
      16'h002c : begin
        if(ctrl_doWrite)begin
          _zz_22 = 1'b1;
        end
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    _zz_23 = 1'b0;
    case(io_ctrl_cmd_payload_fragment_address)
      16'h0054 : begin
        if(ctrl_doWrite)begin
          _zz_23 = 1'b1;
        end
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    _zz_24 = 1'b0;
    case(io_ctrl_cmd_payload_fragment_address)
      16'h0054 : begin
        if(ctrl_doWrite)begin
          _zz_24 = 1'b1;
        end
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    _zz_25 = 1'b0;
    case(io_ctrl_cmd_payload_fragment_address)
      16'h00ac : begin
        if(ctrl_doWrite)begin
          _zz_25 = 1'b1;
        end
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    _zz_26 = 1'b0;
    case(io_ctrl_cmd_payload_fragment_address)
      16'h00ac : begin
        if(ctrl_doWrite)begin
          _zz_26 = 1'b1;
        end
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    _zz_27 = 1'b0;
    case(io_ctrl_cmd_payload_fragment_address)
      16'h00d4 : begin
        if(ctrl_doWrite)begin
          _zz_27 = 1'b1;
        end
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    _zz_28 = 1'b0;
    case(io_ctrl_cmd_payload_fragment_address)
      16'h00d4 : begin
        if(ctrl_doWrite)begin
          _zz_28 = 1'b1;
        end
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    _zz_29 = 1'b0;
    case(io_ctrl_cmd_payload_fragment_address)
      16'h00d4 : begin
        if(ctrl_doWrite)begin
          _zz_29 = 1'b1;
        end
      end
      default : begin
      end
    endcase
  end

  assign channels_0_fifo_push_ptrIncr_value = _zz_138;
  assign channels_0_fifo_pop_bytesIncr_value = _zz_140;
  assign channels_0_fifo_pop_bytesDecr_value = 11'h0;
  assign channels_0_fifo_pop_ptrIncr_value = _zz_143;
  assign channels_1_fifo_push_ptrIncr_value = _zz_145;
  assign channels_1_fifo_pop_bytesIncr_value = _zz_147;
  assign channels_1_fifo_pop_bytesDecr_value = 11'h0;
  assign channels_1_fifo_pop_ptrIncr_value = _zz_150;
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      _zz_4 <= 1'b0;
      channels_0_channelValid <= 1'b0;
      channels_0_descriptorValid <= 1'b0;
      channels_0_ctrl_kick <= 1'b0;
      channels_0_push_m2b_loadDone <= 1'b1;
      channels_0_push_m2b_memPending <= 4'b0000;
      channels_0_interrupts_completion_enable <= 1'b0;
      channels_0_interrupts_completion_valid <= 1'b0;
      channels_0_interrupts_onChannelCompletion_enable <= 1'b0;
      channels_0_interrupts_onChannelCompletion_valid <= 1'b0;
      channels_1_channelValid <= 1'b0;
      channels_1_descriptorValid <= 1'b0;
      channels_1_ll_valid <= 1'b0;
      channels_1_push_m2b_loadDone <= 1'b1;
      channels_1_push_m2b_memPending <= 4'b0000;
      channels_1_interrupts_completion_enable <= 1'b0;
      channels_1_interrupts_completion_valid <= 1'b0;
      channels_1_interrupts_onChannelCompletion_enable <= 1'b0;
      channels_1_interrupts_onChannelCompletion_valid <= 1'b0;
      channels_1_interrupts_onLinkedListUpdate_enable <= 1'b0;
      channels_1_interrupts_onLinkedListUpdate_valid <= 1'b0;
      m2b_cmd_s0_valid <= 1'b0;
      m2b_cmd_s1_valid <= 1'b0;
      m2b_rsp_first <= 1'b1;
      ll_cmd_valid <= 1'b0;
      ll_readRsp_beatCounter <= 2'b00;
    end else begin
      if(_zz_2)begin
        _zz_4 <= (ctrl_rsp_valid && _zz_1);
      end
      if(channels_0_channelStart)begin
        channels_0_channelValid <= 1'b1;
      end
      if(channels_0_channelCompletion)begin
        channels_0_channelValid <= 1'b0;
      end
      if(channels_0_descriptorStart)begin
        channels_0_descriptorValid <= 1'b1;
      end
      if(channels_0_descriptorCompletion)begin
        channels_0_descriptorValid <= 1'b0;
      end
      channels_0_ctrl_kick <= 1'b0;
      if(channels_0_channelCompletion)begin
        channels_0_ctrl_kick <= 1'b0;
      end
      channels_0_push_m2b_memPending <= (_zz_57 - _zz_61);
      if(channels_0_descriptorStart)begin
        channels_0_push_m2b_loadDone <= 1'b0;
      end
      if((channels_0_descriptorValid && channels_0_descriptorCompletion))begin
        channels_0_interrupts_completion_valid <= 1'b1;
      end
      if((! channels_0_interrupts_completion_enable))begin
        channels_0_interrupts_completion_valid <= 1'b0;
      end
      if((channels_0_channelValid && channels_0_channelCompletion))begin
        channels_0_interrupts_onChannelCompletion_valid <= 1'b1;
      end
      if((! channels_0_interrupts_onChannelCompletion_enable))begin
        channels_0_interrupts_onChannelCompletion_valid <= 1'b0;
      end
      if(channels_1_channelStart)begin
        channels_1_channelValid <= 1'b1;
      end
      if(channels_1_channelCompletion)begin
        channels_1_channelValid <= 1'b0;
      end
      if(channels_1_descriptorStart)begin
        channels_1_descriptorValid <= 1'b1;
      end
      if(channels_1_descriptorCompletion)begin
        channels_1_descriptorValid <= 1'b0;
      end
      if(_zz_50)begin
        if(_zz_51)begin
          if(! _zz_52) begin
            channels_1_ll_valid <= 1'b0;
          end
        end
      end
      if(channels_1_ll_sgStart)begin
        channels_1_ll_valid <= 1'b1;
      end
      if(channels_1_channelCompletion)begin
        channels_1_ll_valid <= 1'b0;
      end
      channels_1_push_m2b_memPending <= (_zz_69 - _zz_73);
      if(channels_1_descriptorStart)begin
        channels_1_push_m2b_loadDone <= 1'b0;
      end
      if((channels_1_descriptorValid && channels_1_descriptorCompletion))begin
        channels_1_interrupts_completion_valid <= 1'b1;
      end
      if((! channels_1_interrupts_completion_enable))begin
        channels_1_interrupts_completion_valid <= 1'b0;
      end
      if((channels_1_channelValid && channels_1_channelCompletion))begin
        channels_1_interrupts_onChannelCompletion_valid <= 1'b1;
      end
      if((! channels_1_interrupts_onChannelCompletion_enable))begin
        channels_1_interrupts_onChannelCompletion_valid <= 1'b0;
      end
      if(channels_1_ll_descriptorUpdated)begin
        channels_1_interrupts_onLinkedListUpdate_valid <= 1'b1;
      end
      if((! channels_1_interrupts_onLinkedListUpdate_enable))begin
        channels_1_interrupts_onLinkedListUpdate_valid <= 1'b0;
      end
      if(_zz_47)begin
        if(_zz_48)begin
          m2b_cmd_s0_valid <= 1'b1;
        end
      end
      if(m2b_cmd_s0_valid)begin
        m2b_cmd_s1_valid <= 1'b1;
      end
      if(m2b_cmd_s1_valid)begin
        if(io_read_cmd_ready)begin
          m2b_cmd_s0_valid <= 1'b0;
          m2b_cmd_s1_valid <= 1'b0;
          if(_zz_46)begin
            if(m2b_cmd_s1_lastBurst)begin
              channels_0_push_m2b_loadDone <= 1'b1;
            end
          end
          if(_zz_53)begin
            if(m2b_cmd_s1_lastBurst)begin
              channels_1_push_m2b_loadDone <= 1'b1;
            end
          end
        end
      end
      if((io_read_rsp_valid && io_read_rsp_ready))begin
        m2b_rsp_first <= io_read_rsp_payload_last;
      end
      if(_zz_54)begin
        if((channels_1_ll_requestLl != 1'b0))begin
          ll_cmd_valid <= 1'b1;
        end
      end else begin
        if((ll_cmd_writeFired && ll_cmd_readFired))begin
          ll_cmd_valid <= 1'b0;
        end
      end
      if(_zz_55)begin
        ll_readRsp_beatCounter <= (ll_readRsp_beatCounter + 2'b01);
      end
      if(_zz_22)begin
        if(_zz_105[0])begin
          channels_0_ctrl_kick <= _zz_106[0];
        end
      end
      if(_zz_23)begin
        if(_zz_107[0])begin
          channels_0_interrupts_completion_valid <= _zz_108[0];
        end
      end
      if(_zz_24)begin
        if(_zz_109[0])begin
          channels_0_interrupts_onChannelCompletion_valid <= _zz_110[0];
        end
      end
      if(_zz_27)begin
        if(_zz_115[0])begin
          channels_1_interrupts_completion_valid <= _zz_116[0];
        end
      end
      if(_zz_28)begin
        if(_zz_117[0])begin
          channels_1_interrupts_onChannelCompletion_valid <= _zz_118[0];
        end
      end
      if(_zz_29)begin
        if(_zz_119[0])begin
          channels_1_interrupts_onLinkedListUpdate_valid <= _zz_120[0];
        end
      end
      case(io_ctrl_cmd_payload_fragment_address)
        16'h0050 : begin
          if(ctrl_doWrite)begin
            channels_0_interrupts_completion_enable <= _zz_128[0];
            channels_0_interrupts_onChannelCompletion_enable <= _zz_129[0];
          end
        end
        16'h00d0 : begin
          if(ctrl_doWrite)begin
            channels_1_interrupts_completion_enable <= _zz_134[0];
            channels_1_interrupts_onChannelCompletion_enable <= _zz_135[0];
            channels_1_interrupts_onLinkedListUpdate_enable <= _zz_136[0];
          end
        end
        default : begin
        end
      endcase
    end
  end

  always @ (posedge CLKOUT0) begin
    if(_zz_2)begin
      _zz_5 <= ctrl_rsp_payload_last;
      _zz_6 <= ctrl_rsp_payload_fragment_source;
      _zz_7 <= ctrl_rsp_payload_fragment_opcode;
      _zz_8 <= ctrl_rsp_payload_fragment_data;
      _zz_9 <= ctrl_rsp_payload_fragment_context;
    end
    channels_0_fifo_push_ptr <= (channels_0_fifo_push_ptr + channels_0_fifo_push_ptrIncr_value);
    if(channels_0_channelStart)begin
      channels_0_fifo_push_ptr <= 9'h0;
    end
    channels_0_fifo_pop_ptr <= (channels_0_fifo_pop_ptr + channels_0_fifo_pop_ptrIncr_value);
    channels_0_fifo_pop_withoutOverride_exposed <= (_zz_56 - channels_0_fifo_pop_bytesDecr_value);
    if(channels_0_channelStart)begin
      channels_0_fifo_pop_withoutOverride_exposed <= 11'h0;
    end
    if(channels_0_descriptorStart)begin
      channels_0_push_m2b_bytesLeft <= channels_0_bytes;
    end
    if(channels_0_pop_b2s_veryLastTrigger)begin
      channels_0_pop_b2s_veryLastValid <= 1'b1;
    end
    if(channels_0_pop_b2s_veryLastTrigger)begin
      channels_0_pop_b2s_veryLastPtr <= channels_0_fifo_push_ptrWithBase;
      channels_0_pop_b2s_veryLastEndPacket <= channels_0_pop_b2s_last;
    end
    if(channels_0_channelStart)begin
      channels_0_pop_b2s_veryLastValid <= 1'b0;
    end
    if(channels_0_channelValid)begin
      if(! channels_0_channelStop) begin
        if(_zz_44)begin
          if(_zz_45)begin
            channels_0_push_m2b_address <= (_zz_65 - 32'h00000001);
          end
          if((_zz_10 && channels_0_readyForChannelCompletion))begin
            channels_0_channelStop <= 1'b1;
          end
        end
      end
    end
    channels_0_fifo_pop_ptrIncr_value_regNext <= channels_0_fifo_pop_ptrIncr_value;
    channels_0_fifo_push_available <= (_zz_67 - (channels_0_push_memory ? channels_0_fifo_push_availableDecr : channels_0_fifo_push_ptrIncr_value));
    if(channels_0_channelStart)begin
      channels_0_fifo_push_ptr <= 9'h0;
      channels_0_fifo_push_available <= (channels_0_fifo_words + 9'h001);
      channels_0_fifo_pop_ptr <= 9'h0;
    end
    if(channels_1_descriptorStart)begin
      channels_1_ll_packet <= 1'b0;
    end
    if(channels_1_descriptorStart)begin
      channels_1_ll_requireSync <= 1'b0;
    end
    if(_zz_50)begin
      channels_1_ll_waitDone <= 1'b0;
      if(_zz_51)begin
        channels_1_ll_head <= 1'b0;
      end
    end
    if(channels_1_channelStart)begin
      channels_1_ll_waitDone <= 1'b0;
      channels_1_ll_head <= 1'b1;
    end
    channels_1_fifo_push_ptr <= (channels_1_fifo_push_ptr + channels_1_fifo_push_ptrIncr_value);
    if(channels_1_channelStart)begin
      channels_1_fifo_push_ptr <= 9'h0;
    end
    channels_1_fifo_pop_ptr <= (channels_1_fifo_pop_ptr + channels_1_fifo_pop_ptrIncr_value);
    channels_1_fifo_pop_withoutOverride_exposed <= (_zz_68 - channels_1_fifo_pop_bytesDecr_value);
    if(channels_1_channelStart)begin
      channels_1_fifo_pop_withoutOverride_exposed <= 11'h0;
    end
    if(channels_1_descriptorStart)begin
      channels_1_push_m2b_bytesLeft <= channels_1_bytes;
    end
    if(channels_1_pop_b2s_veryLastTrigger)begin
      channels_1_pop_b2s_veryLastValid <= 1'b1;
    end
    if(channels_1_pop_b2s_veryLastTrigger)begin
      channels_1_pop_b2s_veryLastPtr <= channels_1_fifo_push_ptrWithBase;
      channels_1_pop_b2s_veryLastEndPacket <= channels_1_pop_b2s_last;
    end
    if(channels_1_channelStart)begin
      channels_1_pop_b2s_veryLastValid <= 1'b0;
    end
    if(channels_1_channelValid)begin
      if(! channels_1_channelStop) begin
        if((! channels_1_descriptorValid))begin
          if((_zz_11 && channels_1_readyForChannelCompletion))begin
            channels_1_channelStop <= 1'b1;
          end
        end
      end
    end
    channels_1_fifo_pop_ptrIncr_value_regNext <= channels_1_fifo_pop_ptrIncr_value;
    channels_1_fifo_push_available <= (_zz_77 - (channels_1_push_memory ? channels_1_fifo_push_availableDecr : channels_1_fifo_push_ptrIncr_value));
    if(channels_1_channelStart)begin
      channels_1_fifo_push_ptr <= 9'h0;
      channels_1_fifo_push_available <= (channels_1_fifo_words + 9'h001);
      channels_1_fifo_pop_ptr <= 9'h0;
    end
    if(((io_outputs_0_valid && io_outputs_0_ready) && b2s_0_rsp_context_veryLast))begin
      if(b2s_0_rsp_context_channel[0])begin
        channels_0_pop_b2s_veryLastValid <= 1'b0;
      end
    end
    if(((io_outputs_1_valid && io_outputs_1_ready) && b2s_1_rsp_context_veryLast))begin
      if(b2s_1_rsp_context_channel[0])begin
        channels_1_pop_b2s_veryLastValid <= 1'b0;
      end
    end
    if(_zz_47)begin
      m2b_cmd_s0_chosen <= m2b_cmd_arbiter_io_chosen;
    end
    m2b_cmd_s1_address <= m2b_cmd_s0_address;
    m2b_cmd_s1_length <= m2b_cmd_s0_length;
    m2b_cmd_s1_lastBurst <= m2b_cmd_s0_lastBurst;
    m2b_cmd_s1_bytesLeft <= m2b_cmd_s0_bytesLeft;
    if(m2b_cmd_s1_valid)begin
      if(io_read_cmd_ready)begin
        if(_zz_46)begin
          channels_0_push_m2b_address <= m2b_cmd_s1_addressNext;
          channels_0_push_m2b_bytesLeft <= m2b_cmd_s1_byteLeftNext;
        end
        if(_zz_53)begin
          channels_1_push_m2b_address <= m2b_cmd_s1_addressNext;
          channels_1_push_m2b_bytesLeft <= m2b_cmd_s1_byteLeftNext;
        end
      end
    end
    if((! ll_cmd_valid))begin
      ll_cmd_oh_0 <= channels_1_ll_requestLl;
    end
    if((! ll_cmd_valid))begin
      ll_cmd_ptr <= channels_1_ll_ptr;
    end
    if((! ll_cmd_valid))begin
      ll_cmd_ptrNext <= channels_1_ll_ptrNext;
    end
    if((! ll_cmd_valid))begin
      ll_cmd_endOfPacket <= channels_1_ll_packet;
    end
    if((! ll_cmd_valid))begin
      ll_cmd_isJustASink <= ll_arbiter_isJustASink;
    end
    if(_zz_54)begin
      ll_cmd_oh_0 <= channels_1_ll_requestLl;
      if(channels_1_ll_requestLl)begin
        channels_1_ll_waitDone <= 1'b1;
        channels_1_ll_writeDone <= ll_arbiter_head;
        channels_1_ll_justASync <= ll_arbiter_isJustASink;
        channels_1_ll_packet <= 1'b0;
        channels_1_ll_requireSync <= 1'b0;
        if((! ll_arbiter_isJustASink))begin
          channels_1_ll_ptr <= channels_1_ll_ptrNext;
        end
        channels_1_ll_readDone <= ll_arbiter_isJustASink;
      end
      ll_cmd_readFired <= ll_arbiter_isJustASink;
      ll_cmd_writeFired <= ll_arbiter_head;
    end
    if((io_sgRead_cmd_valid && io_sgRead_cmd_ready))begin
      ll_cmd_readFired <= 1'b1;
    end
    if((io_sgWrite_cmd_valid && io_sgWrite_cmd_ready))begin
      ll_cmd_writeFired <= 1'b1;
    end
    if(_zz_55)begin
      if((2'b01 == ll_readRsp_beatCounter))begin
        if(ll_readRsp_oh_0)begin
          channels_1_push_m2b_address <= io_sgRead_rsp_payload_fragment_data[31 : 0];
        end
      end
      if((2'b11 == ll_readRsp_beatCounter))begin
        if(ll_readRsp_oh_0)begin
          channels_1_ll_ptrNext <= io_sgRead_rsp_payload_fragment_data[31 : 0];
        end
      end
      if((2'b00 == ll_readRsp_beatCounter))begin
        if(ll_readRsp_oh_0)begin
          channels_1_bytes <= io_sgRead_rsp_payload_fragment_data[57 : 32];
        end
      end
      if((2'b00 == ll_readRsp_beatCounter))begin
        if(ll_readRsp_oh_0)begin
          channels_1_pop_b2s_last <= _zz_101[0];
        end
      end
      if((2'b00 == ll_readRsp_beatCounter))begin
        if(ll_readRsp_oh_0)begin
          channels_1_ll_gotDescriptorStall <= _zz_102[0];
        end
      end
      if(io_sgRead_rsp_payload_last)begin
        if(ll_readRsp_oh_0)begin
          channels_1_ll_readDone <= 1'b1;
        end
      end
    end
    if((io_sgWrite_rsp_valid && io_sgWrite_rsp_ready))begin
      if(ll_writeRsp_oh_0)begin
        channels_1_ll_writeDone <= 1'b1;
      end
    end
    case(io_ctrl_cmd_payload_fragment_address)
      16'h0 : begin
        if(ctrl_doWrite)begin
          channels_0_push_m2b_address[31 : 0] <= _zz_122;
        end
      end
      16'h000c : begin
        if(ctrl_doWrite)begin
          channels_0_push_memory <= _zz_123[0];
        end
      end
      16'h0018 : begin
        if(ctrl_doWrite)begin
          channels_0_pop_b2s_portId <= io_ctrl_cmd_payload_fragment_data[0 : 0];
        end
      end
      16'h001c : begin
        if(ctrl_doWrite)begin
          channels_0_pop_memory <= _zz_124[0];
          channels_0_pop_b2s_last <= _zz_125[0];
        end
      end
      16'h002c : begin
        if(ctrl_doWrite)begin
          channels_0_channelStop <= _zz_126[0];
          channels_0_selfRestart <= _zz_127[0];
        end
      end
      16'h0020 : begin
        if(ctrl_doWrite)begin
          channels_0_bytes <= io_ctrl_cmd_payload_fragment_data[25 : 0];
        end
      end
      16'h0044 : begin
        if(ctrl_doWrite)begin
          channels_0_priority <= io_ctrl_cmd_payload_fragment_data[1 : 0];
        end
      end
      16'h008c : begin
        if(ctrl_doWrite)begin
          channels_1_push_memory <= _zz_130[0];
        end
      end
      16'h0098 : begin
        if(ctrl_doWrite)begin
          channels_1_pop_b2s_portId <= io_ctrl_cmd_payload_fragment_data[0 : 0];
        end
      end
      16'h009c : begin
        if(ctrl_doWrite)begin
          channels_1_pop_memory <= _zz_131[0];
          channels_1_pop_b2s_last <= _zz_132[0];
        end
      end
      16'h00ac : begin
        if(ctrl_doWrite)begin
          channels_1_channelStop <= _zz_133[0];
        end
      end
      16'h00f0 : begin
        if(ctrl_doWrite)begin
          channels_1_ll_ptrNext <= io_ctrl_cmd_payload_fragment_data[31 : 0];
        end
      end
      16'h00c4 : begin
        if(ctrl_doWrite)begin
          channels_1_priority <= io_ctrl_cmd_payload_fragment_data[1 : 0];
        end
      end
      default : begin
      end
    endcase
  end


endmodule

module MacTxInterFrame (
  input               io_input_valid,
  output              io_input_ready,
  input               io_input_payload_last,
  input      [1:0]    io_input_payload_fragment_data,
  output              io_output_valid,
  output              io_output_payload_last,
  output     [1:0]    io_output_payload_fragment_data,
  input               CLKOUT5,
  input               txReset
);
  wire       [0:0]    _zz_2;
  wire       [5:0]    _zz_3;
  reg                 counter_willIncrement;
  wire                counter_willClear;
  reg        [5:0]    counter_valueNext;
  reg        [5:0]    counter_value;
  wire                counter_willOverflowIfInc;
  wire                counter_willOverflow;
  wire                _zz_1;

  assign _zz_2 = counter_willIncrement;
  assign _zz_3 = {5'd0, _zz_2};
  always @ (*) begin
    counter_willIncrement = 1'b0;
    if(((counter_value != 6'h0) || ((io_input_valid && io_input_ready) && io_input_payload_last)))begin
      counter_willIncrement = 1'b1;
    end
  end

  assign counter_willClear = 1'b0;
  assign counter_willOverflowIfInc = (counter_value == 6'h30);
  assign counter_willOverflow = (counter_willOverflowIfInc && counter_willIncrement);
  always @ (*) begin
    if(counter_willOverflow)begin
      counter_valueNext = 6'h0;
    end else begin
      counter_valueNext = (counter_value + _zz_3);
    end
    if(counter_willClear)begin
      counter_valueNext = 6'h0;
    end
  end

  assign _zz_1 = (! (counter_value != 6'h0));
  assign io_input_ready = (1'b1 && _zz_1);
  assign io_output_valid = (io_input_valid && _zz_1);
  assign io_output_payload_last = io_input_payload_last;
  assign io_output_payload_fragment_data = io_input_payload_fragment_data;
  always @ (posedge CLKOUT5) begin
    if(txReset) begin
      counter_value <= 6'h0;
    end else begin
      counter_value <= counter_valueNext;
    end
  end


endmodule

module BmbMacEth (
  input               io_bus_cmd_valid,
  output              io_bus_cmd_ready,
  input               io_bus_cmd_payload_last,
  input      [0:0]    io_bus_cmd_payload_fragment_source,
  input      [0:0]    io_bus_cmd_payload_fragment_opcode,
  input      [5:0]    io_bus_cmd_payload_fragment_address,
  input      [1:0]    io_bus_cmd_payload_fragment_length,
  input      [31:0]   io_bus_cmd_payload_fragment_data,
  input      [3:0]    io_bus_cmd_payload_fragment_mask,
  input      [6:0]    io_bus_cmd_payload_fragment_context,
  output              io_bus_rsp_valid,
  input               io_bus_rsp_ready,
  output              io_bus_rsp_payload_last,
  output     [0:0]    io_bus_rsp_payload_fragment_source,
  output     [0:0]    io_bus_rsp_payload_fragment_opcode,
  output     [31:0]   io_bus_rsp_payload_fragment_data,
  output     [6:0]    io_bus_rsp_payload_fragment_context,
  input               io_phy_rx_valid,
  output              io_phy_rx_ready,
  input               io_phy_rx_payload_last,
  input               io_phy_rx_payload_fragment_error,
  input      [1:0]    io_phy_rx_payload_fragment_data,
  output              io_phy_tx_valid,
  input               io_phy_tx_ready,
  output              io_phy_tx_payload_last,
  output     [1:0]    io_phy_tx_payload_fragment_data,
  input               io_phy_colision,
  input               io_phy_busy,
  output              io_interrupt,
  input               systemCd_logic_outputReset,
  output              txReset,
  input               CLKOUT0,
  input               CLKOUT5
);
  reg                 _zz_11;
  reg                 _zz_12;
  wire       [31:0]   _zz_13;
  wire                mac_io_phy_tx_valid;
  wire                mac_io_phy_tx_payload_last;
  wire       [1:0]    mac_io_phy_tx_payload_fragment_data;
  wire                mac_io_phy_rx_ready;
  wire                mac_io_ctrl_rx_stream_valid;
  wire       [31:0]   mac_io_ctrl_rx_stream_payload;
  wire       [7:0]    mac_io_ctrl_rx_stats_drops;
  wire       [7:0]    mac_io_ctrl_rx_stats_errors;
  wire                mac_io_ctrl_tx_stream_ready;
  wire       [10:0]   mac_io_ctrl_tx_availability;
  wire                mac_io_sim_drop;
  wire                mac_io_sim_error;
  wire                mac_io_sim_commit;
  wire                mac_txReset_1;
  wire       [0:0]    _zz_14;
  wire       [0:0]    _zz_15;
  wire       [0:0]    _zz_16;
  wire       [0:0]    _zz_17;
  wire                busCtrl_readHaltTrigger;
  wire                busCtrl_writeHaltTrigger;
  wire                busCtrl_rsp_valid;
  wire                busCtrl_rsp_ready;
  wire                busCtrl_rsp_payload_last;
  wire       [0:0]    busCtrl_rsp_payload_fragment_source;
  wire       [0:0]    busCtrl_rsp_payload_fragment_opcode;
  reg        [31:0]   busCtrl_rsp_payload_fragment_data;
  wire       [6:0]    busCtrl_rsp_payload_fragment_context;
  wire                _zz_1;
  wire                _zz_2;
  wire                _zz_3;
  reg                 _zz_4;
  reg                 _zz_5;
  reg        [0:0]    _zz_6;
  reg        [0:0]    _zz_7;
  reg        [31:0]   _zz_8;
  reg        [6:0]    _zz_9;
  wire                busCtrl_askWrite;
  wire                busCtrl_askRead;
  wire                busCtrl_doWrite;
  wire                busCtrl_doRead;
  reg                 mac_io_ctrl_tx_flush_driver;
  reg                 mac_io_ctrl_tx_alignerEnable_driver;
  reg                 mac_io_ctrl_rx_flush_driver;
  reg                 mac_io_ctrl_rx_alignerEnable_driver;
  reg                 _zz_10;
  reg                 bridge_interruptCtrl_pending;

  assign _zz_14 = io_bus_cmd_payload_fragment_data[0 : 0];
  assign _zz_15 = io_bus_cmd_payload_fragment_data[2 : 2];
  assign _zz_16 = io_bus_cmd_payload_fragment_data[4 : 4];
  assign _zz_17 = io_bus_cmd_payload_fragment_data[6 : 6];
  MacEth mac (
    .io_phy_rx_valid                     (io_phy_rx_valid                           ), //i
    .io_phy_rx_ready                     (mac_io_phy_rx_ready                       ), //o
    .io_phy_rx_payload_last              (io_phy_rx_payload_last                    ), //i
    .io_phy_rx_payload_fragment_error    (io_phy_rx_payload_fragment_error          ), //i
    .io_phy_rx_payload_fragment_data     (io_phy_rx_payload_fragment_data[1:0]      ), //i
    .io_phy_tx_valid                     (mac_io_phy_tx_valid                       ), //o
    .io_phy_tx_ready                     (io_phy_tx_ready                           ), //i
    .io_phy_tx_payload_last              (mac_io_phy_tx_payload_last                ), //o
    .io_phy_tx_payload_fragment_data     (mac_io_phy_tx_payload_fragment_data[1:0]  ), //o
    .io_phy_colision                     (io_phy_colision                           ), //i
    .io_phy_busy                         (io_phy_busy                               ), //i
    .io_ctrl_rx_stream_valid             (mac_io_ctrl_rx_stream_valid               ), //o
    .io_ctrl_rx_stream_ready             (_zz_11                                    ), //i
    .io_ctrl_rx_stream_payload           (mac_io_ctrl_rx_stream_payload[31:0]       ), //o
    .io_ctrl_rx_flush                    (mac_io_ctrl_rx_flush_driver               ), //i
    .io_ctrl_rx_alignerEnable            (mac_io_ctrl_rx_alignerEnable_driver       ), //i
    .io_ctrl_rx_stats_clear              (_zz_12                                    ), //i
    .io_ctrl_rx_stats_drops              (mac_io_ctrl_rx_stats_drops[7:0]           ), //o
    .io_ctrl_rx_stats_errors             (mac_io_ctrl_rx_stats_errors[7:0]          ), //o
    .io_ctrl_tx_stream_valid             (_zz_10                                    ), //i
    .io_ctrl_tx_stream_ready             (mac_io_ctrl_tx_stream_ready               ), //o
    .io_ctrl_tx_stream_payload           (_zz_13[31:0]                              ), //i
    .io_ctrl_tx_availability             (mac_io_ctrl_tx_availability[10:0]         ), //o
    .io_ctrl_tx_flush                    (mac_io_ctrl_tx_flush_driver               ), //i
    .io_ctrl_tx_alignerEnable            (mac_io_ctrl_tx_alignerEnable_driver       ), //i
    .io_sim_drop                         (mac_io_sim_drop                           ), //o
    .io_sim_error                        (mac_io_sim_error                          ), //o
    .io_sim_commit                       (mac_io_sim_commit                         ), //o
    .systemCd_logic_outputReset          (systemCd_logic_outputReset                ), //i
    .txReset_1                           (mac_txReset_1                             ), //o
    .CLKOUT5                             (CLKOUT5                                   ), //i
    .CLKOUT0                             (CLKOUT0                                   )  //i
  );
  assign io_phy_rx_ready = mac_io_phy_rx_ready;
  assign io_phy_tx_valid = mac_io_phy_tx_valid;
  assign io_phy_tx_payload_last = mac_io_phy_tx_payload_last;
  assign io_phy_tx_payload_fragment_data = mac_io_phy_tx_payload_fragment_data;
  assign busCtrl_readHaltTrigger = 1'b0;
  assign busCtrl_writeHaltTrigger = 1'b0;
  assign _zz_1 = (! (busCtrl_readHaltTrigger || busCtrl_writeHaltTrigger));
  assign busCtrl_rsp_ready = (_zz_2 && _zz_1);
  assign _zz_2 = ((1'b1 && (! _zz_3)) || io_bus_rsp_ready);
  assign _zz_3 = _zz_4;
  assign io_bus_rsp_valid = _zz_3;
  assign io_bus_rsp_payload_last = _zz_5;
  assign io_bus_rsp_payload_fragment_source = _zz_6;
  assign io_bus_rsp_payload_fragment_opcode = _zz_7;
  assign io_bus_rsp_payload_fragment_data = _zz_8;
  assign io_bus_rsp_payload_fragment_context = _zz_9;
  assign busCtrl_askWrite = (io_bus_cmd_valid && (io_bus_cmd_payload_fragment_opcode == 1'b1));
  assign busCtrl_askRead = (io_bus_cmd_valid && (io_bus_cmd_payload_fragment_opcode == 1'b0));
  assign busCtrl_doWrite = ((io_bus_cmd_valid && io_bus_cmd_ready) && (io_bus_cmd_payload_fragment_opcode == 1'b1));
  assign busCtrl_doRead = ((io_bus_cmd_valid && io_bus_cmd_ready) && (io_bus_cmd_payload_fragment_opcode == 1'b0));
  assign busCtrl_rsp_valid = io_bus_cmd_valid;
  assign io_bus_cmd_ready = busCtrl_rsp_ready;
  assign busCtrl_rsp_payload_last = 1'b1;
  assign busCtrl_rsp_payload_fragment_opcode = 1'b0;
  always @ (*) begin
    busCtrl_rsp_payload_fragment_data = 32'h0;
    case(io_bus_cmd_payload_fragment_address)
      6'h0 : begin
        busCtrl_rsp_payload_fragment_data[0 : 0] = mac_io_ctrl_tx_flush_driver;
        busCtrl_rsp_payload_fragment_data[1 : 1] = mac_io_ctrl_tx_stream_ready;
        busCtrl_rsp_payload_fragment_data[2 : 2] = mac_io_ctrl_tx_alignerEnable_driver;
        busCtrl_rsp_payload_fragment_data[4 : 4] = mac_io_ctrl_rx_flush_driver;
        busCtrl_rsp_payload_fragment_data[5 : 5] = mac_io_ctrl_rx_stream_valid;
        busCtrl_rsp_payload_fragment_data[6 : 6] = mac_io_ctrl_rx_alignerEnable_driver;
      end
      6'h14 : begin
        busCtrl_rsp_payload_fragment_data[10 : 0] = mac_io_ctrl_tx_availability;
      end
      6'h20 : begin
        busCtrl_rsp_payload_fragment_data[31 : 0] = mac_io_ctrl_rx_stream_payload;
      end
      6'h2c : begin
        busCtrl_rsp_payload_fragment_data[7 : 0] = mac_io_ctrl_rx_stats_errors;
        busCtrl_rsp_payload_fragment_data[15 : 8] = mac_io_ctrl_rx_stats_drops;
      end
      default : begin
      end
    endcase
  end

  assign busCtrl_rsp_payload_fragment_context = io_bus_cmd_payload_fragment_context;
  assign busCtrl_rsp_payload_fragment_source = io_bus_cmd_payload_fragment_source;
  always @ (*) begin
    _zz_10 = 1'b0;
    case(io_bus_cmd_payload_fragment_address)
      6'h10 : begin
        if(busCtrl_doWrite)begin
          _zz_10 = 1'b1;
        end
      end
      default : begin
      end
    endcase
  end

  assign _zz_13 = io_bus_cmd_payload_fragment_data[31 : 0];
  always @ (*) begin
    _zz_11 = 1'b0;
    case(io_bus_cmd_payload_fragment_address)
      6'h20 : begin
        if(busCtrl_doRead)begin
          _zz_11 = 1'b1;
        end
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    _zz_12 = 1'b0;
    case(io_bus_cmd_payload_fragment_address)
      6'h2c : begin
        if(busCtrl_doRead)begin
          _zz_12 = 1'b1;
        end
      end
      default : begin
      end
    endcase
  end

  assign io_interrupt = bridge_interruptCtrl_pending;
  assign txReset = mac_txReset_1;
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      _zz_4 <= 1'b0;
      mac_io_ctrl_tx_flush_driver <= 1'b1;
      mac_io_ctrl_tx_alignerEnable_driver <= 1'b0;
      mac_io_ctrl_rx_flush_driver <= 1'b1;
      mac_io_ctrl_rx_alignerEnable_driver <= 1'b0;
      bridge_interruptCtrl_pending <= 1'b0;
    end else begin
      if(_zz_2)begin
        _zz_4 <= (busCtrl_rsp_valid && _zz_1);
      end
      bridge_interruptCtrl_pending <= mac_io_ctrl_rx_stream_valid;
      case(io_bus_cmd_payload_fragment_address)
        6'h0 : begin
          if(busCtrl_doWrite)begin
            mac_io_ctrl_tx_flush_driver <= _zz_14[0];
            mac_io_ctrl_tx_alignerEnable_driver <= _zz_15[0];
            mac_io_ctrl_rx_flush_driver <= _zz_16[0];
            mac_io_ctrl_rx_alignerEnable_driver <= _zz_17[0];
          end
        end
        default : begin
        end
      endcase
    end
  end

  always @ (posedge CLKOUT0) begin
    if(_zz_2)begin
      _zz_5 <= busCtrl_rsp_payload_last;
      _zz_6 <= busCtrl_rsp_payload_fragment_source;
      _zz_7 <= busCtrl_rsp_payload_fragment_opcode;
      _zz_8 <= busCtrl_rsp_payload_fragment_data;
      _zz_9 <= busCtrl_rsp_payload_fragment_context;
    end
  end


endmodule

module BmbSpiXdrMasterCtrl (
  input               io_ctrl_cmd_valid,
  output              io_ctrl_cmd_ready,
  input               io_ctrl_cmd_payload_last,
  input      [0:0]    io_ctrl_cmd_payload_fragment_source,
  input      [0:0]    io_ctrl_cmd_payload_fragment_opcode,
  input      [11:0]   io_ctrl_cmd_payload_fragment_address,
  input      [1:0]    io_ctrl_cmd_payload_fragment_length,
  input      [31:0]   io_ctrl_cmd_payload_fragment_data,
  input      [3:0]    io_ctrl_cmd_payload_fragment_mask,
  input      [6:0]    io_ctrl_cmd_payload_fragment_context,
  output              io_ctrl_rsp_valid,
  input               io_ctrl_rsp_ready,
  output              io_ctrl_rsp_payload_last,
  output     [0:0]    io_ctrl_rsp_payload_fragment_source,
  output     [0:0]    io_ctrl_rsp_payload_fragment_opcode,
  output     [31:0]   io_ctrl_rsp_payload_fragment_data,
  output     [6:0]    io_ctrl_rsp_payload_fragment_context,
  output     [0:0]    io_spi_sclk_write,
  output              io_spi_data_0_writeEnable,
  input      [0:0]    io_spi_data_0_read,
  output     [0:0]    io_spi_data_0_write,
  output              io_spi_data_1_writeEnable,
  input      [0:0]    io_spi_data_1_read,
  output     [0:0]    io_spi_data_1_write,
  output     [2:0]    io_spi_ss,
  output              io_interrupt,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  wire                _zz_23;
  reg                 _zz_24;
  wire                _zz_25;
  wire                ctrl_io_cmd_ready;
  wire                ctrl_io_rsp_valid;
  wire       [7:0]    ctrl_io_rsp_payload_data;
  wire       [0:0]    ctrl_io_spi_sclk_write;
  wire       [2:0]    ctrl_io_spi_ss;
  wire       [0:0]    ctrl_io_spi_data_0_write;
  wire                ctrl_io_spi_data_0_writeEnable;
  wire       [0:0]    ctrl_io_spi_data_1_write;
  wire                ctrl_io_spi_data_1_writeEnable;
  wire                mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_push_ready;
  wire                mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_valid;
  wire                mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_payload_kind;
  wire                mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_payload_read;
  wire                mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_payload_write;
  wire       [7:0]    mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_payload_data;
  wire       [8:0]    mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_occupancy;
  wire       [8:0]    mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_availability;
  wire                ctrl_io_rsp_queueWithOccupancy_io_push_ready;
  wire                ctrl_io_rsp_queueWithOccupancy_io_pop_valid;
  wire       [7:0]    ctrl_io_rsp_queueWithOccupancy_io_pop_payload_data;
  wire       [8:0]    ctrl_io_rsp_queueWithOccupancy_io_occupancy;
  wire       [8:0]    ctrl_io_rsp_queueWithOccupancy_io_availability;
  wire       [0:0]    _zz_26;
  wire       [0:0]    _zz_27;
  wire       [0:0]    _zz_28;
  wire       [0:0]    _zz_29;
  wire       [0:0]    _zz_30;
  wire       [0:0]    _zz_31;
  wire       [0:0]    _zz_32;
  reg        [31:0]   _zz_1;
  wire                _zz_2;
  wire                _zz_3;
  wire                _zz_4;
  reg                 _zz_5;
  reg                 _zz_6;
  reg        [0:0]    _zz_7;
  reg        [0:0]    _zz_8;
  reg        [31:0]   _zz_9;
  reg        [6:0]    _zz_10;
  wire                _zz_11;
  wire                _zz_12;
  wire                mapping_cmdLogic_streamUnbuffered_valid;
  wire                mapping_cmdLogic_streamUnbuffered_ready;
  wire                mapping_cmdLogic_streamUnbuffered_payload_kind;
  wire                mapping_cmdLogic_streamUnbuffered_payload_read;
  wire                mapping_cmdLogic_streamUnbuffered_payload_write;
  wire       [7:0]    mapping_cmdLogic_streamUnbuffered_payload_data;
  reg                 _zz_13;
  reg                 mapping_interruptCtrl_cmdIntEnable;
  reg                 mapping_interruptCtrl_rspIntEnable;
  wire                mapping_interruptCtrl_cmdInt;
  wire                mapping_interruptCtrl_rspInt;
  wire                mapping_interruptCtrl_interrupt;
  reg                 _zz_14;
  reg                 _zz_15;
  reg        [0:0]    _zz_16;
  reg        [11:0]   _zz_17;
  reg        [11:0]   _zz_18;
  reg        [11:0]   _zz_19;
  reg        [11:0]   _zz_20;
  reg        [2:0]    _zz_21;
  wire       [1:0]    _zz_22;

  assign _zz_26 = io_ctrl_cmd_payload_fragment_data[8 : 8];
  assign _zz_27 = io_ctrl_cmd_payload_fragment_data[9 : 9];
  assign _zz_28 = io_ctrl_cmd_payload_fragment_data[11 : 11];
  assign _zz_29 = io_ctrl_cmd_payload_fragment_data[0 : 0];
  assign _zz_30 = io_ctrl_cmd_payload_fragment_data[1 : 1];
  assign _zz_31 = _zz_22[0 : 0];
  assign _zz_32 = _zz_22[1 : 1];
  SpiXdrMasterCtrl ctrl (
    .io_config_kind_cpol           (_zz_14                                                                            ), //i
    .io_config_kind_cpha           (_zz_15                                                                            ), //i
    .io_config_sclkToogle          (_zz_17[11:0]                                                                      ), //i
    .io_config_mod                 (_zz_16                                                                            ), //i
    .io_config_ss_activeHigh       (_zz_21[2:0]                                                                       ), //i
    .io_config_ss_setup            (_zz_18[11:0]                                                                      ), //i
    .io_config_ss_hold             (_zz_19[11:0]                                                                      ), //i
    .io_config_ss_disable          (_zz_20[11:0]                                                                      ), //i
    .io_cmd_valid                  (mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_valid              ), //i
    .io_cmd_ready                  (ctrl_io_cmd_ready                                                                 ), //o
    .io_cmd_payload_kind           (mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_payload_kind       ), //i
    .io_cmd_payload_read           (mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_payload_read       ), //i
    .io_cmd_payload_write          (mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_payload_write      ), //i
    .io_cmd_payload_data           (mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_payload_data[7:0]  ), //i
    .io_rsp_valid                  (ctrl_io_rsp_valid                                                                 ), //o
    .io_rsp_payload_data           (ctrl_io_rsp_payload_data[7:0]                                                     ), //o
    .io_spi_sclk_write             (ctrl_io_spi_sclk_write                                                            ), //o
    .io_spi_data_0_writeEnable     (ctrl_io_spi_data_0_writeEnable                                                    ), //o
    .io_spi_data_0_read            (io_spi_data_0_read                                                                ), //i
    .io_spi_data_0_write           (ctrl_io_spi_data_0_write                                                          ), //o
    .io_spi_data_1_writeEnable     (ctrl_io_spi_data_1_writeEnable                                                    ), //o
    .io_spi_data_1_read            (io_spi_data_1_read                                                                ), //i
    .io_spi_data_1_write           (ctrl_io_spi_data_1_write                                                          ), //o
    .io_spi_ss                     (ctrl_io_spi_ss[2:0]                                                               ), //o
    .CLKOUT0                       (CLKOUT0                                                                           ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset                                                        )  //i
  );
  StreamFifo_3 mapping_cmdLogic_streamUnbuffered_queueWithAvailability (
    .io_push_valid                 (mapping_cmdLogic_streamUnbuffered_valid                                           ), //i
    .io_push_ready                 (mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_push_ready             ), //o
    .io_push_payload_kind          (mapping_cmdLogic_streamUnbuffered_payload_kind                                    ), //i
    .io_push_payload_read          (mapping_cmdLogic_streamUnbuffered_payload_read                                    ), //i
    .io_push_payload_write         (mapping_cmdLogic_streamUnbuffered_payload_write                                   ), //i
    .io_push_payload_data          (mapping_cmdLogic_streamUnbuffered_payload_data[7:0]                               ), //i
    .io_pop_valid                  (mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_valid              ), //o
    .io_pop_ready                  (ctrl_io_cmd_ready                                                                 ), //i
    .io_pop_payload_kind           (mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_payload_kind       ), //o
    .io_pop_payload_read           (mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_payload_read       ), //o
    .io_pop_payload_write          (mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_payload_write      ), //o
    .io_pop_payload_data           (mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_payload_data[7:0]  ), //o
    .io_flush                      (_zz_23                                                                            ), //i
    .io_occupancy                  (mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_occupancy[8:0]         ), //o
    .io_availability               (mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_availability[8:0]      ), //o
    .CLKOUT0                       (CLKOUT0                                                                           ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset                                                        )  //i
  );
  StreamFifo_4 ctrl_io_rsp_queueWithOccupancy (
    .io_push_valid                 (ctrl_io_rsp_valid                                        ), //i
    .io_push_ready                 (ctrl_io_rsp_queueWithOccupancy_io_push_ready             ), //o
    .io_push_payload_data          (ctrl_io_rsp_payload_data[7:0]                            ), //i
    .io_pop_valid                  (ctrl_io_rsp_queueWithOccupancy_io_pop_valid              ), //o
    .io_pop_ready                  (_zz_24                                                   ), //i
    .io_pop_payload_data           (ctrl_io_rsp_queueWithOccupancy_io_pop_payload_data[7:0]  ), //o
    .io_flush                      (_zz_25                                                   ), //i
    .io_occupancy                  (ctrl_io_rsp_queueWithOccupancy_io_occupancy[8:0]         ), //o
    .io_availability               (ctrl_io_rsp_queueWithOccupancy_io_availability[8:0]      ), //o
    .CLKOUT0                       (CLKOUT0                                                  ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset                               )  //i
  );
  assign _zz_2 = (! (1'b0 || 1'b0));
  assign _zz_3 = ((1'b1 && (! _zz_4)) || io_ctrl_rsp_ready);
  assign _zz_4 = _zz_5;
  assign io_ctrl_rsp_valid = _zz_4;
  assign io_ctrl_rsp_payload_last = _zz_6;
  assign io_ctrl_rsp_payload_fragment_source = _zz_7;
  assign io_ctrl_rsp_payload_fragment_opcode = _zz_8;
  assign io_ctrl_rsp_payload_fragment_data = _zz_9;
  assign io_ctrl_rsp_payload_fragment_context = _zz_10;
  assign _zz_11 = ((io_ctrl_cmd_valid && io_ctrl_cmd_ready) && (io_ctrl_cmd_payload_fragment_opcode == 1'b1));
  assign _zz_12 = ((io_ctrl_cmd_valid && io_ctrl_cmd_ready) && (io_ctrl_cmd_payload_fragment_opcode == 1'b0));
  assign io_ctrl_cmd_ready = (_zz_3 && _zz_2);
  always @ (*) begin
    _zz_1 = 32'h0;
    case(io_ctrl_cmd_payload_fragment_address)
      12'h0 : begin
        _zz_1[31 : 31] = (ctrl_io_rsp_queueWithOccupancy_io_pop_valid ^ 1'b1);
        _zz_1[7 : 0] = ctrl_io_rsp_queueWithOccupancy_io_pop_payload_data;
      end
      12'h004 : begin
        _zz_1[8 : 0] = mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_availability;
        _zz_1[24 : 16] = ctrl_io_rsp_queueWithOccupancy_io_occupancy;
      end
      12'h00c : begin
        _zz_1[16 : 16] = mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_valid;
        _zz_1[0 : 0] = mapping_interruptCtrl_cmdIntEnable;
        _zz_1[1 : 1] = mapping_interruptCtrl_rspIntEnable;
        _zz_1[8 : 8] = mapping_interruptCtrl_cmdInt;
        _zz_1[9 : 9] = mapping_interruptCtrl_rspInt;
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    _zz_13 = 1'b0;
    case(io_ctrl_cmd_payload_fragment_address)
      12'h0 : begin
        if(_zz_11)begin
          _zz_13 = 1'b1;
        end
      end
      default : begin
      end
    endcase
  end

  assign mapping_cmdLogic_streamUnbuffered_valid = _zz_13;
  assign mapping_cmdLogic_streamUnbuffered_ready = mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_push_ready;
  always @ (*) begin
    _zz_24 = 1'b0;
    case(io_ctrl_cmd_payload_fragment_address)
      12'h0 : begin
        if(_zz_12)begin
          _zz_24 = 1'b1;
        end
      end
      default : begin
      end
    endcase
  end

  assign mapping_interruptCtrl_cmdInt = (mapping_interruptCtrl_cmdIntEnable && (! mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_valid));
  assign mapping_interruptCtrl_rspInt = (mapping_interruptCtrl_rspIntEnable && ctrl_io_rsp_queueWithOccupancy_io_pop_valid);
  assign mapping_interruptCtrl_interrupt = (mapping_interruptCtrl_rspInt || mapping_interruptCtrl_cmdInt);
  assign io_spi_sclk_write = ctrl_io_spi_sclk_write;
  assign io_spi_data_0_writeEnable = ctrl_io_spi_data_0_writeEnable;
  assign io_spi_data_0_write = ctrl_io_spi_data_0_write;
  assign io_spi_data_1_writeEnable = ctrl_io_spi_data_1_writeEnable;
  assign io_spi_data_1_write = ctrl_io_spi_data_1_write;
  assign io_spi_ss = ctrl_io_spi_ss;
  assign io_interrupt = mapping_interruptCtrl_interrupt;
  assign mapping_cmdLogic_streamUnbuffered_payload_data = io_ctrl_cmd_payload_fragment_data[7 : 0];
  assign mapping_cmdLogic_streamUnbuffered_payload_write = _zz_26[0];
  assign mapping_cmdLogic_streamUnbuffered_payload_read = _zz_27[0];
  assign mapping_cmdLogic_streamUnbuffered_payload_kind = _zz_28[0];
  assign _zz_22 = io_ctrl_cmd_payload_fragment_data[1 : 0];
  assign _zz_23 = 1'b0;
  assign _zz_25 = 1'b0;
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      _zz_5 <= 1'b0;
      mapping_interruptCtrl_cmdIntEnable <= 1'b0;
      mapping_interruptCtrl_rspIntEnable <= 1'b0;
      _zz_21 <= 3'b000;
    end else begin
      if(_zz_3)begin
        _zz_5 <= (io_ctrl_cmd_valid && _zz_2);
      end
      case(io_ctrl_cmd_payload_fragment_address)
        12'h00c : begin
          if(_zz_11)begin
            mapping_interruptCtrl_cmdIntEnable <= _zz_29[0];
            mapping_interruptCtrl_rspIntEnable <= _zz_30[0];
          end
        end
        12'h030 : begin
          if(_zz_11)begin
            _zz_21 <= io_ctrl_cmd_payload_fragment_data[2 : 0];
          end
        end
        default : begin
        end
      endcase
    end
  end

  always @ (posedge CLKOUT0) begin
    if(_zz_3)begin
      _zz_6 <= 1'b1;
      _zz_7 <= io_ctrl_cmd_payload_fragment_source;
      _zz_8 <= 1'b0;
      _zz_9 <= _zz_1;
      _zz_10 <= io_ctrl_cmd_payload_fragment_context;
    end
    case(io_ctrl_cmd_payload_fragment_address)
      12'h008 : begin
        if(_zz_11)begin
          _zz_14 <= _zz_31[0];
          _zz_15 <= _zz_32[0];
          _zz_16 <= io_ctrl_cmd_payload_fragment_data[4 : 4];
        end
      end
      12'h020 : begin
        if(_zz_11)begin
          _zz_17 <= io_ctrl_cmd_payload_fragment_data[11 : 0];
        end
      end
      12'h024 : begin
        if(_zz_11)begin
          _zz_18 <= io_ctrl_cmd_payload_fragment_data[11 : 0];
        end
      end
      12'h028 : begin
        if(_zz_11)begin
          _zz_19 <= io_ctrl_cmd_payload_fragment_data[11 : 0];
        end
      end
      12'h02c : begin
        if(_zz_11)begin
          _zz_20 <= io_ctrl_cmd_payload_fragment_data[11 : 0];
        end
      end
      default : begin
      end
    endcase
  end


endmodule

module BmbUartCtrl (
  input               io_bus_cmd_valid,
  output              io_bus_cmd_ready,
  input               io_bus_cmd_payload_last,
  input      [0:0]    io_bus_cmd_payload_fragment_source,
  input      [0:0]    io_bus_cmd_payload_fragment_opcode,
  input      [5:0]    io_bus_cmd_payload_fragment_address,
  input      [1:0]    io_bus_cmd_payload_fragment_length,
  input      [31:0]   io_bus_cmd_payload_fragment_data,
  input      [3:0]    io_bus_cmd_payload_fragment_mask,
  input      [6:0]    io_bus_cmd_payload_fragment_context,
  output              io_bus_rsp_valid,
  input               io_bus_rsp_ready,
  output              io_bus_rsp_payload_last,
  output     [0:0]    io_bus_rsp_payload_fragment_source,
  output     [0:0]    io_bus_rsp_payload_fragment_opcode,
  output     [31:0]   io_bus_rsp_payload_fragment_data,
  output     [6:0]    io_bus_rsp_payload_fragment_context,
  output              io_uart_txd,
  input               io_uart_rxd,
  output              io_interrupt,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  wire                _zz_16;
  reg                 _zz_17;
  wire                _zz_18;
  wire                uartCtrl_1_io_write_ready;
  wire                uartCtrl_1_io_read_valid;
  wire       [7:0]    uartCtrl_1_io_read_payload;
  wire                uartCtrl_1_io_uart_txd;
  wire                uartCtrl_1_io_readError;
  wire                uartCtrl_1_io_readBreak;
  wire                bridge_write_streamUnbuffered_queueWithOccupancy_io_push_ready;
  wire                bridge_write_streamUnbuffered_queueWithOccupancy_io_pop_valid;
  wire       [7:0]    bridge_write_streamUnbuffered_queueWithOccupancy_io_pop_payload;
  wire       [7:0]    bridge_write_streamUnbuffered_queueWithOccupancy_io_occupancy;
  wire       [7:0]    bridge_write_streamUnbuffered_queueWithOccupancy_io_availability;
  wire                uartCtrl_1_io_read_queueWithOccupancy_io_push_ready;
  wire                uartCtrl_1_io_read_queueWithOccupancy_io_pop_valid;
  wire       [7:0]    uartCtrl_1_io_read_queueWithOccupancy_io_pop_payload;
  wire       [7:0]    uartCtrl_1_io_read_queueWithOccupancy_io_occupancy;
  wire       [7:0]    uartCtrl_1_io_read_queueWithOccupancy_io_availability;
  wire       [0:0]    _zz_19;
  wire       [0:0]    _zz_20;
  wire       [0:0]    _zz_21;
  wire       [0:0]    _zz_22;
  wire       [0:0]    _zz_23;
  wire       [0:0]    _zz_24;
  wire       [0:0]    _zz_25;
  wire       [0:0]    _zz_26;
  wire       [0:0]    _zz_27;
  wire       [0:0]    _zz_28;
  wire       [0:0]    _zz_29;
  wire       [0:0]    _zz_30;
  wire       [7:0]    _zz_31;
  wire                busCtrl_readHaltTrigger;
  wire                busCtrl_writeHaltTrigger;
  wire                busCtrl_rsp_valid;
  wire                busCtrl_rsp_ready;
  wire                busCtrl_rsp_payload_last;
  wire       [0:0]    busCtrl_rsp_payload_fragment_source;
  wire       [0:0]    busCtrl_rsp_payload_fragment_opcode;
  reg        [31:0]   busCtrl_rsp_payload_fragment_data;
  wire       [6:0]    busCtrl_rsp_payload_fragment_context;
  wire                _zz_1;
  wire                _zz_2;
  wire                _zz_3;
  reg                 _zz_4;
  reg                 _zz_5;
  reg        [0:0]    _zz_6;
  reg        [0:0]    _zz_7;
  reg        [31:0]   _zz_8;
  reg        [6:0]    _zz_9;
  wire                busCtrl_askWrite;
  wire                busCtrl_askRead;
  wire                busCtrl_doWrite;
  wire                busCtrl_doRead;
  wire       [2:0]    bridge_uartConfigReg_frame_dataLength;
  wire       `UartStopType_defaultEncoding_type bridge_uartConfigReg_frame_stop;
  wire       `UartParityType_defaultEncoding_type bridge_uartConfigReg_frame_parity;
  reg        [11:0]   bridge_uartConfigReg_clockDivider;
  reg                 _zz_10;
  wire                bridge_write_streamUnbuffered_valid;
  wire                bridge_write_streamUnbuffered_ready;
  wire       [7:0]    bridge_write_streamUnbuffered_payload;
  reg                 bridge_read_streamBreaked_valid;
  reg                 bridge_read_streamBreaked_ready;
  wire       [7:0]    bridge_read_streamBreaked_payload;
  reg                 bridge_interruptCtrl_writeIntEnable;
  reg                 bridge_interruptCtrl_readIntEnable;
  wire                bridge_interruptCtrl_readInt;
  wire                bridge_interruptCtrl_writeInt;
  wire                bridge_interruptCtrl_interrupt;
  reg                 bridge_misc_readError;
  reg                 _zz_11;
  reg                 bridge_misc_readOverflowError;
  reg                 _zz_12;
  reg                 bridge_misc_breakDetected;
  reg                 uartCtrl_1_io_readBreak_regNext;
  reg                 _zz_13;
  reg                 bridge_misc_doBreak;
  reg                 _zz_14;
  reg                 _zz_15;
  `ifndef SYNTHESIS
  reg [23:0] bridge_uartConfigReg_frame_stop_string;
  reg [31:0] bridge_uartConfigReg_frame_parity_string;
  `endif

  function [11:0] zz_bridge_uartConfigReg_clockDivider(input dummy);
    begin
      zz_bridge_uartConfigReg_clockDivider = 12'h0;
      zz_bridge_uartConfigReg_clockDivider = 12'h0ac;
    end
  endfunction
  wire [11:0] _zz_32;

  assign _zz_19 = io_bus_cmd_payload_fragment_data[0 : 0];
  assign _zz_20 = 1'b0;
  assign _zz_21 = io_bus_cmd_payload_fragment_data[1 : 1];
  assign _zz_22 = 1'b0;
  assign _zz_23 = io_bus_cmd_payload_fragment_data[9 : 9];
  assign _zz_24 = 1'b0;
  assign _zz_25 = io_bus_cmd_payload_fragment_data[10 : 10];
  assign _zz_26 = 1'b1;
  assign _zz_27 = io_bus_cmd_payload_fragment_data[11 : 11];
  assign _zz_28 = 1'b0;
  assign _zz_29 = io_bus_cmd_payload_fragment_data[0 : 0];
  assign _zz_30 = io_bus_cmd_payload_fragment_data[1 : 1];
  assign _zz_31 = (8'h80 - bridge_write_streamUnbuffered_queueWithOccupancy_io_occupancy);
  UartCtrl uartCtrl_1 (
    .io_config_frame_dataLength    (bridge_uartConfigReg_frame_dataLength[2:0]                            ), //i
    .io_config_frame_stop          (bridge_uartConfigReg_frame_stop                                       ), //i
    .io_config_frame_parity        (bridge_uartConfigReg_frame_parity[1:0]                                ), //i
    .io_config_clockDivider        (bridge_uartConfigReg_clockDivider[11:0]                               ), //i
    .io_write_valid                (bridge_write_streamUnbuffered_queueWithOccupancy_io_pop_valid         ), //i
    .io_write_ready                (uartCtrl_1_io_write_ready                                             ), //o
    .io_write_payload              (bridge_write_streamUnbuffered_queueWithOccupancy_io_pop_payload[7:0]  ), //i
    .io_read_valid                 (uartCtrl_1_io_read_valid                                              ), //o
    .io_read_ready                 (uartCtrl_1_io_read_queueWithOccupancy_io_push_ready                   ), //i
    .io_read_payload               (uartCtrl_1_io_read_payload[7:0]                                       ), //o
    .io_uart_txd                   (uartCtrl_1_io_uart_txd                                                ), //o
    .io_uart_rxd                   (io_uart_rxd                                                           ), //i
    .io_readError                  (uartCtrl_1_io_readError                                               ), //o
    .io_writeBreak                 (bridge_misc_doBreak                                                   ), //i
    .io_readBreak                  (uartCtrl_1_io_readBreak                                               ), //o
    .CLKOUT0                       (CLKOUT0                                                               ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset                                            )  //i
  );
  StreamFifo_1 bridge_write_streamUnbuffered_queueWithOccupancy (
    .io_push_valid                 (bridge_write_streamUnbuffered_valid                                    ), //i
    .io_push_ready                 (bridge_write_streamUnbuffered_queueWithOccupancy_io_push_ready         ), //o
    .io_push_payload               (bridge_write_streamUnbuffered_payload[7:0]                             ), //i
    .io_pop_valid                  (bridge_write_streamUnbuffered_queueWithOccupancy_io_pop_valid          ), //o
    .io_pop_ready                  (uartCtrl_1_io_write_ready                                              ), //i
    .io_pop_payload                (bridge_write_streamUnbuffered_queueWithOccupancy_io_pop_payload[7:0]   ), //o
    .io_flush                      (_zz_16                                                                 ), //i
    .io_occupancy                  (bridge_write_streamUnbuffered_queueWithOccupancy_io_occupancy[7:0]     ), //o
    .io_availability               (bridge_write_streamUnbuffered_queueWithOccupancy_io_availability[7:0]  ), //o
    .CLKOUT0                       (CLKOUT0                                                                ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset                                             )  //i
  );
  StreamFifo_1 uartCtrl_1_io_read_queueWithOccupancy (
    .io_push_valid                 (uartCtrl_1_io_read_valid                                    ), //i
    .io_push_ready                 (uartCtrl_1_io_read_queueWithOccupancy_io_push_ready         ), //o
    .io_push_payload               (uartCtrl_1_io_read_payload[7:0]                             ), //i
    .io_pop_valid                  (uartCtrl_1_io_read_queueWithOccupancy_io_pop_valid          ), //o
    .io_pop_ready                  (_zz_17                                                      ), //i
    .io_pop_payload                (uartCtrl_1_io_read_queueWithOccupancy_io_pop_payload[7:0]   ), //o
    .io_flush                      (_zz_18                                                      ), //i
    .io_occupancy                  (uartCtrl_1_io_read_queueWithOccupancy_io_occupancy[7:0]     ), //o
    .io_availability               (uartCtrl_1_io_read_queueWithOccupancy_io_availability[7:0]  ), //o
    .CLKOUT0                       (CLKOUT0                                                     ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset                                  )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(bridge_uartConfigReg_frame_stop)
      `UartStopType_defaultEncoding_ONE : bridge_uartConfigReg_frame_stop_string = "ONE";
      `UartStopType_defaultEncoding_TWO : bridge_uartConfigReg_frame_stop_string = "TWO";
      default : bridge_uartConfigReg_frame_stop_string = "???";
    endcase
  end
  always @(*) begin
    case(bridge_uartConfigReg_frame_parity)
      `UartParityType_defaultEncoding_NONE : bridge_uartConfigReg_frame_parity_string = "NONE";
      `UartParityType_defaultEncoding_EVEN : bridge_uartConfigReg_frame_parity_string = "EVEN";
      `UartParityType_defaultEncoding_ODD : bridge_uartConfigReg_frame_parity_string = "ODD ";
      default : bridge_uartConfigReg_frame_parity_string = "????";
    endcase
  end
  `endif

  assign io_uart_txd = uartCtrl_1_io_uart_txd;
  assign busCtrl_readHaltTrigger = 1'b0;
  assign busCtrl_writeHaltTrigger = 1'b0;
  assign _zz_1 = (! (busCtrl_readHaltTrigger || busCtrl_writeHaltTrigger));
  assign busCtrl_rsp_ready = (_zz_2 && _zz_1);
  assign _zz_2 = ((1'b1 && (! _zz_3)) || io_bus_rsp_ready);
  assign _zz_3 = _zz_4;
  assign io_bus_rsp_valid = _zz_3;
  assign io_bus_rsp_payload_last = _zz_5;
  assign io_bus_rsp_payload_fragment_source = _zz_6;
  assign io_bus_rsp_payload_fragment_opcode = _zz_7;
  assign io_bus_rsp_payload_fragment_data = _zz_8;
  assign io_bus_rsp_payload_fragment_context = _zz_9;
  assign busCtrl_askWrite = (io_bus_cmd_valid && (io_bus_cmd_payload_fragment_opcode == 1'b1));
  assign busCtrl_askRead = (io_bus_cmd_valid && (io_bus_cmd_payload_fragment_opcode == 1'b0));
  assign busCtrl_doWrite = ((io_bus_cmd_valid && io_bus_cmd_ready) && (io_bus_cmd_payload_fragment_opcode == 1'b1));
  assign busCtrl_doRead = ((io_bus_cmd_valid && io_bus_cmd_ready) && (io_bus_cmd_payload_fragment_opcode == 1'b0));
  assign busCtrl_rsp_valid = io_bus_cmd_valid;
  assign io_bus_cmd_ready = busCtrl_rsp_ready;
  assign busCtrl_rsp_payload_last = 1'b1;
  assign busCtrl_rsp_payload_fragment_opcode = 1'b0;
  always @ (*) begin
    busCtrl_rsp_payload_fragment_data = 32'h0;
    case(io_bus_cmd_payload_fragment_address)
      6'h0 : begin
        busCtrl_rsp_payload_fragment_data[16 : 16] = (bridge_read_streamBreaked_valid ^ 1'b0);
        busCtrl_rsp_payload_fragment_data[7 : 0] = bridge_read_streamBreaked_payload;
      end
      6'h04 : begin
        busCtrl_rsp_payload_fragment_data[23 : 16] = _zz_31;
        busCtrl_rsp_payload_fragment_data[15 : 15] = bridge_write_streamUnbuffered_queueWithOccupancy_io_pop_valid;
        busCtrl_rsp_payload_fragment_data[31 : 24] = uartCtrl_1_io_read_queueWithOccupancy_io_occupancy;
        busCtrl_rsp_payload_fragment_data[0 : 0] = bridge_interruptCtrl_writeIntEnable;
        busCtrl_rsp_payload_fragment_data[1 : 1] = bridge_interruptCtrl_readIntEnable;
        busCtrl_rsp_payload_fragment_data[8 : 8] = bridge_interruptCtrl_writeInt;
        busCtrl_rsp_payload_fragment_data[9 : 9] = bridge_interruptCtrl_readInt;
      end
      6'h10 : begin
        busCtrl_rsp_payload_fragment_data[0 : 0] = bridge_misc_readError;
        busCtrl_rsp_payload_fragment_data[1 : 1] = bridge_misc_readOverflowError;
        busCtrl_rsp_payload_fragment_data[8 : 8] = uartCtrl_1_io_readBreak;
        busCtrl_rsp_payload_fragment_data[9 : 9] = bridge_misc_breakDetected;
      end
      default : begin
      end
    endcase
  end

  assign busCtrl_rsp_payload_fragment_context = io_bus_cmd_payload_fragment_context;
  assign busCtrl_rsp_payload_fragment_source = io_bus_cmd_payload_fragment_source;
  assign _zz_32 = zz_bridge_uartConfigReg_clockDivider(1'b0);
  always @ (*) bridge_uartConfigReg_clockDivider = _zz_32;
  assign bridge_uartConfigReg_frame_dataLength = 3'b111;
  assign bridge_uartConfigReg_frame_parity = `UartParityType_defaultEncoding_NONE;
  assign bridge_uartConfigReg_frame_stop = `UartStopType_defaultEncoding_ONE;
  always @ (*) begin
    _zz_10 = 1'b0;
    case(io_bus_cmd_payload_fragment_address)
      6'h0 : begin
        if(busCtrl_doWrite)begin
          _zz_10 = 1'b1;
        end
      end
      default : begin
      end
    endcase
  end

  assign bridge_write_streamUnbuffered_valid = _zz_10;
  assign bridge_write_streamUnbuffered_payload = io_bus_cmd_payload_fragment_data[7 : 0];
  assign bridge_write_streamUnbuffered_ready = bridge_write_streamUnbuffered_queueWithOccupancy_io_push_ready;
  always @ (*) begin
    bridge_read_streamBreaked_valid = uartCtrl_1_io_read_queueWithOccupancy_io_pop_valid;
    if(uartCtrl_1_io_readBreak)begin
      bridge_read_streamBreaked_valid = 1'b0;
    end
  end

  always @ (*) begin
    _zz_17 = bridge_read_streamBreaked_ready;
    if(uartCtrl_1_io_readBreak)begin
      _zz_17 = 1'b1;
    end
  end

  assign bridge_read_streamBreaked_payload = uartCtrl_1_io_read_queueWithOccupancy_io_pop_payload;
  always @ (*) begin
    bridge_read_streamBreaked_ready = 1'b0;
    case(io_bus_cmd_payload_fragment_address)
      6'h0 : begin
        if(busCtrl_doRead)begin
          bridge_read_streamBreaked_ready = 1'b1;
        end
      end
      default : begin
      end
    endcase
  end

  assign bridge_interruptCtrl_readInt = (bridge_interruptCtrl_readIntEnable && bridge_read_streamBreaked_valid);
  assign bridge_interruptCtrl_writeInt = (bridge_interruptCtrl_writeIntEnable && (! bridge_write_streamUnbuffered_queueWithOccupancy_io_pop_valid));
  assign bridge_interruptCtrl_interrupt = (bridge_interruptCtrl_readInt || bridge_interruptCtrl_writeInt);
  always @ (*) begin
    _zz_11 = 1'b0;
    case(io_bus_cmd_payload_fragment_address)
      6'h10 : begin
        if(busCtrl_doWrite)begin
          _zz_11 = 1'b1;
        end
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    _zz_12 = 1'b0;
    case(io_bus_cmd_payload_fragment_address)
      6'h10 : begin
        if(busCtrl_doWrite)begin
          _zz_12 = 1'b1;
        end
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    _zz_13 = 1'b0;
    case(io_bus_cmd_payload_fragment_address)
      6'h10 : begin
        if(busCtrl_doWrite)begin
          _zz_13 = 1'b1;
        end
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    _zz_14 = 1'b0;
    case(io_bus_cmd_payload_fragment_address)
      6'h10 : begin
        if(busCtrl_doWrite)begin
          _zz_14 = 1'b1;
        end
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    _zz_15 = 1'b0;
    case(io_bus_cmd_payload_fragment_address)
      6'h10 : begin
        if(busCtrl_doWrite)begin
          _zz_15 = 1'b1;
        end
      end
      default : begin
      end
    endcase
  end

  assign io_interrupt = bridge_interruptCtrl_interrupt;
  assign _zz_16 = 1'b0;
  assign _zz_18 = 1'b0;
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      _zz_4 <= 1'b0;
      bridge_interruptCtrl_writeIntEnable <= 1'b0;
      bridge_interruptCtrl_readIntEnable <= 1'b0;
      bridge_misc_readError <= 1'b0;
      bridge_misc_readOverflowError <= 1'b0;
      bridge_misc_breakDetected <= 1'b0;
      bridge_misc_doBreak <= 1'b0;
    end else begin
      if(_zz_2)begin
        _zz_4 <= (busCtrl_rsp_valid && _zz_1);
      end
      if(_zz_11)begin
        if(_zz_19[0])begin
          bridge_misc_readError <= _zz_20[0];
        end
      end
      if(uartCtrl_1_io_readError)begin
        bridge_misc_readError <= 1'b1;
      end
      if(_zz_12)begin
        if(_zz_21[0])begin
          bridge_misc_readOverflowError <= _zz_22[0];
        end
      end
      if((uartCtrl_1_io_read_valid && (! uartCtrl_1_io_read_queueWithOccupancy_io_push_ready)))begin
        bridge_misc_readOverflowError <= 1'b1;
      end
      if((uartCtrl_1_io_readBreak && (! uartCtrl_1_io_readBreak_regNext)))begin
        bridge_misc_breakDetected <= 1'b1;
      end
      if(_zz_13)begin
        if(_zz_23[0])begin
          bridge_misc_breakDetected <= _zz_24[0];
        end
      end
      if(_zz_14)begin
        if(_zz_25[0])begin
          bridge_misc_doBreak <= _zz_26[0];
        end
      end
      if(_zz_15)begin
        if(_zz_27[0])begin
          bridge_misc_doBreak <= _zz_28[0];
        end
      end
      case(io_bus_cmd_payload_fragment_address)
        6'h04 : begin
          if(busCtrl_doWrite)begin
            bridge_interruptCtrl_writeIntEnable <= _zz_29[0];
            bridge_interruptCtrl_readIntEnable <= _zz_30[0];
          end
        end
        default : begin
        end
      endcase
    end
  end

  always @ (posedge CLKOUT0) begin
    if(_zz_2)begin
      _zz_5 <= busCtrl_rsp_payload_last;
      _zz_6 <= busCtrl_rsp_payload_fragment_source;
      _zz_7 <= busCtrl_rsp_payload_fragment_opcode;
      _zz_8 <= busCtrl_rsp_payload_fragment_data;
      _zz_9 <= busCtrl_rsp_payload_fragment_context;
    end
    uartCtrl_1_io_readBreak_regNext <= uartCtrl_1_io_readBreak;
  end


endmodule

module BmbGpio2 (
  input      [31:0]   io_gpio_read,
  output reg [31:0]   io_gpio_write,
  output reg [31:0]   io_gpio_writeEnable,
  input               io_bus_cmd_valid,
  output              io_bus_cmd_ready,
  input               io_bus_cmd_payload_last,
  input      [0:0]    io_bus_cmd_payload_fragment_source,
  input      [0:0]    io_bus_cmd_payload_fragment_opcode,
  input      [7:0]    io_bus_cmd_payload_fragment_address,
  input      [1:0]    io_bus_cmd_payload_fragment_length,
  input      [31:0]   io_bus_cmd_payload_fragment_data,
  input      [3:0]    io_bus_cmd_payload_fragment_mask,
  input      [6:0]    io_bus_cmd_payload_fragment_context,
  output              io_bus_rsp_valid,
  input               io_bus_rsp_ready,
  output              io_bus_rsp_payload_last,
  output     [0:0]    io_bus_rsp_payload_fragment_source,
  output     [0:0]    io_bus_rsp_payload_fragment_opcode,
  output     [31:0]   io_bus_rsp_payload_fragment_data,
  output     [6:0]    io_bus_rsp_payload_fragment_context,
  output reg [31:0]   io_interrupt,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  wire       [31:0]   io_gpio_read_buffercc_io_dataOut;
  wire       [0:0]    _zz_90;
  wire       [0:0]    _zz_91;
  wire       [0:0]    _zz_92;
  wire       [0:0]    _zz_93;
  wire       [0:0]    _zz_94;
  wire       [0:0]    _zz_95;
  wire       [0:0]    _zz_96;
  wire       [0:0]    _zz_97;
  wire       [0:0]    _zz_98;
  wire       [0:0]    _zz_99;
  wire       [0:0]    _zz_100;
  wire       [0:0]    _zz_101;
  wire       [0:0]    _zz_102;
  wire       [0:0]    _zz_103;
  wire       [0:0]    _zz_104;
  wire       [0:0]    _zz_105;
  wire       [0:0]    _zz_106;
  wire       [0:0]    _zz_107;
  wire       [0:0]    _zz_108;
  wire       [0:0]    _zz_109;
  wire       [0:0]    _zz_110;
  wire       [0:0]    _zz_111;
  wire       [0:0]    _zz_112;
  wire       [0:0]    _zz_113;
  wire       [0:0]    _zz_114;
  wire       [0:0]    _zz_115;
  wire       [0:0]    _zz_116;
  wire       [0:0]    _zz_117;
  wire       [0:0]    _zz_118;
  wire       [0:0]    _zz_119;
  wire       [0:0]    _zz_120;
  wire       [0:0]    _zz_121;
  wire       [0:0]    _zz_122;
  wire       [0:0]    _zz_123;
  wire       [0:0]    _zz_124;
  wire       [0:0]    _zz_125;
  wire       [0:0]    _zz_126;
  wire       [0:0]    _zz_127;
  wire       [0:0]    _zz_128;
  wire       [0:0]    _zz_129;
  wire       [0:0]    _zz_130;
  wire       [0:0]    _zz_131;
  wire       [0:0]    _zz_132;
  wire       [0:0]    _zz_133;
  wire       [0:0]    _zz_134;
  wire       [0:0]    _zz_135;
  wire       [0:0]    _zz_136;
  wire       [0:0]    _zz_137;
  wire       [0:0]    _zz_138;
  wire       [0:0]    _zz_139;
  wire       [0:0]    _zz_140;
  wire       [0:0]    _zz_141;
  wire       [0:0]    _zz_142;
  wire       [0:0]    _zz_143;
  wire       [0:0]    _zz_144;
  wire       [0:0]    _zz_145;
  wire       [0:0]    _zz_146;
  wire       [0:0]    _zz_147;
  wire       [0:0]    _zz_148;
  wire       [0:0]    _zz_149;
  wire       [0:0]    _zz_150;
  wire       [0:0]    _zz_151;
  wire       [0:0]    _zz_152;
  wire       [0:0]    _zz_153;
  wire       [0:0]    _zz_154;
  wire       [0:0]    _zz_155;
  wire       [0:0]    _zz_156;
  wire       [0:0]    _zz_157;
  wire       [0:0]    _zz_158;
  wire       [0:0]    _zz_159;
  wire       [0:0]    _zz_160;
  wire       [0:0]    _zz_161;
  wire       [0:0]    _zz_162;
  wire       [0:0]    _zz_163;
  wire       [0:0]    _zz_164;
  wire       [0:0]    _zz_165;
  wire       [0:0]    _zz_166;
  wire       [0:0]    _zz_167;
  wire       [0:0]    _zz_168;
  wire       [0:0]    _zz_169;
  wire                mapper_readHaltTrigger;
  wire                mapper_writeHaltTrigger;
  wire                mapper_rsp_valid;
  wire                mapper_rsp_ready;
  wire                mapper_rsp_payload_last;
  wire       [0:0]    mapper_rsp_payload_fragment_source;
  wire       [0:0]    mapper_rsp_payload_fragment_opcode;
  reg        [31:0]   mapper_rsp_payload_fragment_data;
  wire       [6:0]    mapper_rsp_payload_fragment_context;
  wire                _zz_1;
  wire                _zz_2;
  wire                _zz_3;
  reg                 _zz_4;
  reg                 _zz_5;
  reg        [0:0]    _zz_6;
  reg        [0:0]    _zz_7;
  reg        [31:0]   _zz_8;
  reg        [6:0]    _zz_9;
  wire                mapper_askWrite;
  wire                mapper_askRead;
  wire                mapper_doWrite;
  wire                mapper_doRead;
  wire       [31:0]   syncronized;
  reg        [31:0]   last;
  reg                 _zz_10;
  reg                 _zz_11;
  reg                 _zz_12;
  reg                 _zz_13;
  reg                 _zz_14;
  reg                 _zz_15;
  reg                 _zz_16;
  reg                 _zz_17;
  reg                 _zz_18;
  reg                 _zz_19;
  reg                 _zz_20;
  reg                 _zz_21;
  reg                 _zz_22;
  reg                 _zz_23;
  reg                 _zz_24;
  reg                 _zz_25;
  reg                 _zz_26;
  reg                 _zz_27;
  reg                 _zz_28;
  reg                 _zz_29;
  reg                 _zz_30;
  reg                 _zz_31;
  reg                 _zz_32;
  reg                 _zz_33;
  reg                 _zz_34;
  reg                 _zz_35;
  reg                 _zz_36;
  reg                 _zz_37;
  reg                 _zz_38;
  reg                 _zz_39;
  reg                 _zz_40;
  reg                 _zz_41;
  reg                 _zz_42;
  reg                 _zz_43;
  reg                 _zz_44;
  reg                 _zz_45;
  reg                 _zz_46;
  reg                 _zz_47;
  reg                 _zz_48;
  reg                 _zz_49;
  reg                 _zz_50;
  reg                 _zz_51;
  reg                 _zz_52;
  reg                 _zz_53;
  reg                 _zz_54;
  reg                 _zz_55;
  reg                 _zz_56;
  reg                 _zz_57;
  reg                 _zz_58;
  reg                 _zz_59;
  reg                 _zz_60;
  reg                 _zz_61;
  reg                 _zz_62;
  reg                 _zz_63;
  reg                 _zz_64;
  reg                 _zz_65;
  reg                 _zz_66;
  reg                 _zz_67;
  reg                 _zz_68;
  reg                 _zz_69;
  reg                 _zz_70;
  reg                 _zz_71;
  reg                 _zz_72;
  reg                 _zz_73;
  reg        [31:0]   interrupt_enable_high;
  reg        [31:0]   interrupt_enable_low;
  reg        [31:0]   interrupt_enable_rise;
  reg        [31:0]   interrupt_enable_fall;
  wire       [31:0]   interrupt_valid;
  reg                 _zz_74;
  reg                 _zz_75;
  reg                 _zz_76;
  reg                 _zz_77;
  reg                 _zz_78;
  reg                 _zz_79;
  reg                 _zz_80;
  reg                 _zz_81;
  reg                 _zz_82;
  reg                 _zz_83;
  reg                 _zz_84;
  reg                 _zz_85;
  reg                 _zz_86;
  reg                 _zz_87;
  reg                 _zz_88;
  reg                 _zz_89;

  assign _zz_90 = io_bus_cmd_payload_fragment_data[0 : 0];
  assign _zz_91 = io_bus_cmd_payload_fragment_data[1 : 1];
  assign _zz_92 = io_bus_cmd_payload_fragment_data[2 : 2];
  assign _zz_93 = io_bus_cmd_payload_fragment_data[3 : 3];
  assign _zz_94 = io_bus_cmd_payload_fragment_data[4 : 4];
  assign _zz_95 = io_bus_cmd_payload_fragment_data[5 : 5];
  assign _zz_96 = io_bus_cmd_payload_fragment_data[6 : 6];
  assign _zz_97 = io_bus_cmd_payload_fragment_data[7 : 7];
  assign _zz_98 = io_bus_cmd_payload_fragment_data[8 : 8];
  assign _zz_99 = io_bus_cmd_payload_fragment_data[9 : 9];
  assign _zz_100 = io_bus_cmd_payload_fragment_data[10 : 10];
  assign _zz_101 = io_bus_cmd_payload_fragment_data[11 : 11];
  assign _zz_102 = io_bus_cmd_payload_fragment_data[12 : 12];
  assign _zz_103 = io_bus_cmd_payload_fragment_data[13 : 13];
  assign _zz_104 = io_bus_cmd_payload_fragment_data[14 : 14];
  assign _zz_105 = io_bus_cmd_payload_fragment_data[15 : 15];
  assign _zz_106 = io_bus_cmd_payload_fragment_data[16 : 16];
  assign _zz_107 = io_bus_cmd_payload_fragment_data[17 : 17];
  assign _zz_108 = io_bus_cmd_payload_fragment_data[18 : 18];
  assign _zz_109 = io_bus_cmd_payload_fragment_data[19 : 19];
  assign _zz_110 = io_bus_cmd_payload_fragment_data[20 : 20];
  assign _zz_111 = io_bus_cmd_payload_fragment_data[21 : 21];
  assign _zz_112 = io_bus_cmd_payload_fragment_data[22 : 22];
  assign _zz_113 = io_bus_cmd_payload_fragment_data[23 : 23];
  assign _zz_114 = io_bus_cmd_payload_fragment_data[24 : 24];
  assign _zz_115 = io_bus_cmd_payload_fragment_data[25 : 25];
  assign _zz_116 = io_bus_cmd_payload_fragment_data[26 : 26];
  assign _zz_117 = io_bus_cmd_payload_fragment_data[27 : 27];
  assign _zz_118 = io_bus_cmd_payload_fragment_data[28 : 28];
  assign _zz_119 = io_bus_cmd_payload_fragment_data[29 : 29];
  assign _zz_120 = io_bus_cmd_payload_fragment_data[30 : 30];
  assign _zz_121 = io_bus_cmd_payload_fragment_data[31 : 31];
  assign _zz_122 = io_bus_cmd_payload_fragment_data[0 : 0];
  assign _zz_123 = io_bus_cmd_payload_fragment_data[1 : 1];
  assign _zz_124 = io_bus_cmd_payload_fragment_data[2 : 2];
  assign _zz_125 = io_bus_cmd_payload_fragment_data[3 : 3];
  assign _zz_126 = io_bus_cmd_payload_fragment_data[4 : 4];
  assign _zz_127 = io_bus_cmd_payload_fragment_data[5 : 5];
  assign _zz_128 = io_bus_cmd_payload_fragment_data[6 : 6];
  assign _zz_129 = io_bus_cmd_payload_fragment_data[7 : 7];
  assign _zz_130 = io_bus_cmd_payload_fragment_data[8 : 8];
  assign _zz_131 = io_bus_cmd_payload_fragment_data[9 : 9];
  assign _zz_132 = io_bus_cmd_payload_fragment_data[10 : 10];
  assign _zz_133 = io_bus_cmd_payload_fragment_data[11 : 11];
  assign _zz_134 = io_bus_cmd_payload_fragment_data[12 : 12];
  assign _zz_135 = io_bus_cmd_payload_fragment_data[13 : 13];
  assign _zz_136 = io_bus_cmd_payload_fragment_data[14 : 14];
  assign _zz_137 = io_bus_cmd_payload_fragment_data[15 : 15];
  assign _zz_138 = io_bus_cmd_payload_fragment_data[16 : 16];
  assign _zz_139 = io_bus_cmd_payload_fragment_data[17 : 17];
  assign _zz_140 = io_bus_cmd_payload_fragment_data[18 : 18];
  assign _zz_141 = io_bus_cmd_payload_fragment_data[19 : 19];
  assign _zz_142 = io_bus_cmd_payload_fragment_data[20 : 20];
  assign _zz_143 = io_bus_cmd_payload_fragment_data[21 : 21];
  assign _zz_144 = io_bus_cmd_payload_fragment_data[22 : 22];
  assign _zz_145 = io_bus_cmd_payload_fragment_data[23 : 23];
  assign _zz_146 = io_bus_cmd_payload_fragment_data[24 : 24];
  assign _zz_147 = io_bus_cmd_payload_fragment_data[25 : 25];
  assign _zz_148 = io_bus_cmd_payload_fragment_data[26 : 26];
  assign _zz_149 = io_bus_cmd_payload_fragment_data[27 : 27];
  assign _zz_150 = io_bus_cmd_payload_fragment_data[28 : 28];
  assign _zz_151 = io_bus_cmd_payload_fragment_data[29 : 29];
  assign _zz_152 = io_bus_cmd_payload_fragment_data[30 : 30];
  assign _zz_153 = io_bus_cmd_payload_fragment_data[31 : 31];
  assign _zz_154 = io_bus_cmd_payload_fragment_data[24 : 24];
  assign _zz_155 = io_bus_cmd_payload_fragment_data[25 : 25];
  assign _zz_156 = io_bus_cmd_payload_fragment_data[26 : 26];
  assign _zz_157 = io_bus_cmd_payload_fragment_data[27 : 27];
  assign _zz_158 = io_bus_cmd_payload_fragment_data[24 : 24];
  assign _zz_159 = io_bus_cmd_payload_fragment_data[25 : 25];
  assign _zz_160 = io_bus_cmd_payload_fragment_data[26 : 26];
  assign _zz_161 = io_bus_cmd_payload_fragment_data[27 : 27];
  assign _zz_162 = io_bus_cmd_payload_fragment_data[24 : 24];
  assign _zz_163 = io_bus_cmd_payload_fragment_data[25 : 25];
  assign _zz_164 = io_bus_cmd_payload_fragment_data[26 : 26];
  assign _zz_165 = io_bus_cmd_payload_fragment_data[27 : 27];
  assign _zz_166 = io_bus_cmd_payload_fragment_data[24 : 24];
  assign _zz_167 = io_bus_cmd_payload_fragment_data[25 : 25];
  assign _zz_168 = io_bus_cmd_payload_fragment_data[26 : 26];
  assign _zz_169 = io_bus_cmd_payload_fragment_data[27 : 27];
  BufferCC_22 io_gpio_read_buffercc (
    .io_dataIn                     (io_gpio_read[31:0]                      ), //i
    .io_dataOut                    (io_gpio_read_buffercc_io_dataOut[31:0]  ), //o
    .CLKOUT0                       (CLKOUT0                                 ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset              )  //i
  );
  assign mapper_readHaltTrigger = 1'b0;
  assign mapper_writeHaltTrigger = 1'b0;
  assign _zz_1 = (! (mapper_readHaltTrigger || mapper_writeHaltTrigger));
  assign mapper_rsp_ready = (_zz_2 && _zz_1);
  assign _zz_2 = ((1'b1 && (! _zz_3)) || io_bus_rsp_ready);
  assign _zz_3 = _zz_4;
  assign io_bus_rsp_valid = _zz_3;
  assign io_bus_rsp_payload_last = _zz_5;
  assign io_bus_rsp_payload_fragment_source = _zz_6;
  assign io_bus_rsp_payload_fragment_opcode = _zz_7;
  assign io_bus_rsp_payload_fragment_data = _zz_8;
  assign io_bus_rsp_payload_fragment_context = _zz_9;
  assign mapper_askWrite = (io_bus_cmd_valid && (io_bus_cmd_payload_fragment_opcode == 1'b1));
  assign mapper_askRead = (io_bus_cmd_valid && (io_bus_cmd_payload_fragment_opcode == 1'b0));
  assign mapper_doWrite = ((io_bus_cmd_valid && io_bus_cmd_ready) && (io_bus_cmd_payload_fragment_opcode == 1'b1));
  assign mapper_doRead = ((io_bus_cmd_valid && io_bus_cmd_ready) && (io_bus_cmd_payload_fragment_opcode == 1'b0));
  assign mapper_rsp_valid = io_bus_cmd_valid;
  assign io_bus_cmd_ready = mapper_rsp_ready;
  assign mapper_rsp_payload_last = 1'b1;
  assign mapper_rsp_payload_fragment_opcode = 1'b0;
  always @ (*) begin
    mapper_rsp_payload_fragment_data = 32'h0;
    case(io_bus_cmd_payload_fragment_address)
      8'h0 : begin
        mapper_rsp_payload_fragment_data[0 : 0] = syncronized[0];
        mapper_rsp_payload_fragment_data[1 : 1] = syncronized[1];
        mapper_rsp_payload_fragment_data[2 : 2] = syncronized[2];
        mapper_rsp_payload_fragment_data[3 : 3] = syncronized[3];
        mapper_rsp_payload_fragment_data[4 : 4] = syncronized[4];
        mapper_rsp_payload_fragment_data[5 : 5] = syncronized[5];
        mapper_rsp_payload_fragment_data[6 : 6] = syncronized[6];
        mapper_rsp_payload_fragment_data[7 : 7] = syncronized[7];
        mapper_rsp_payload_fragment_data[8 : 8] = syncronized[8];
        mapper_rsp_payload_fragment_data[9 : 9] = syncronized[9];
        mapper_rsp_payload_fragment_data[10 : 10] = syncronized[10];
        mapper_rsp_payload_fragment_data[11 : 11] = syncronized[11];
        mapper_rsp_payload_fragment_data[12 : 12] = syncronized[12];
        mapper_rsp_payload_fragment_data[13 : 13] = syncronized[13];
        mapper_rsp_payload_fragment_data[14 : 14] = syncronized[14];
        mapper_rsp_payload_fragment_data[15 : 15] = syncronized[15];
        mapper_rsp_payload_fragment_data[16 : 16] = syncronized[16];
        mapper_rsp_payload_fragment_data[17 : 17] = syncronized[17];
        mapper_rsp_payload_fragment_data[18 : 18] = syncronized[18];
        mapper_rsp_payload_fragment_data[19 : 19] = syncronized[19];
        mapper_rsp_payload_fragment_data[20 : 20] = syncronized[20];
        mapper_rsp_payload_fragment_data[21 : 21] = syncronized[21];
        mapper_rsp_payload_fragment_data[22 : 22] = syncronized[22];
        mapper_rsp_payload_fragment_data[23 : 23] = syncronized[23];
        mapper_rsp_payload_fragment_data[24 : 24] = syncronized[24];
        mapper_rsp_payload_fragment_data[25 : 25] = syncronized[25];
        mapper_rsp_payload_fragment_data[26 : 26] = syncronized[26];
        mapper_rsp_payload_fragment_data[27 : 27] = syncronized[27];
        mapper_rsp_payload_fragment_data[28 : 28] = syncronized[28];
        mapper_rsp_payload_fragment_data[29 : 29] = syncronized[29];
        mapper_rsp_payload_fragment_data[30 : 30] = syncronized[30];
        mapper_rsp_payload_fragment_data[31 : 31] = syncronized[31];
      end
      8'h04 : begin
        mapper_rsp_payload_fragment_data[0 : 0] = _zz_10;
        mapper_rsp_payload_fragment_data[1 : 1] = _zz_12;
        mapper_rsp_payload_fragment_data[2 : 2] = _zz_14;
        mapper_rsp_payload_fragment_data[3 : 3] = _zz_16;
        mapper_rsp_payload_fragment_data[4 : 4] = _zz_18;
        mapper_rsp_payload_fragment_data[5 : 5] = _zz_20;
        mapper_rsp_payload_fragment_data[6 : 6] = _zz_22;
        mapper_rsp_payload_fragment_data[7 : 7] = _zz_24;
        mapper_rsp_payload_fragment_data[8 : 8] = _zz_26;
        mapper_rsp_payload_fragment_data[9 : 9] = _zz_28;
        mapper_rsp_payload_fragment_data[10 : 10] = _zz_30;
        mapper_rsp_payload_fragment_data[11 : 11] = _zz_32;
        mapper_rsp_payload_fragment_data[12 : 12] = _zz_34;
        mapper_rsp_payload_fragment_data[13 : 13] = _zz_36;
        mapper_rsp_payload_fragment_data[14 : 14] = _zz_38;
        mapper_rsp_payload_fragment_data[15 : 15] = _zz_40;
        mapper_rsp_payload_fragment_data[16 : 16] = _zz_42;
        mapper_rsp_payload_fragment_data[17 : 17] = _zz_44;
        mapper_rsp_payload_fragment_data[18 : 18] = _zz_46;
        mapper_rsp_payload_fragment_data[19 : 19] = _zz_48;
        mapper_rsp_payload_fragment_data[20 : 20] = _zz_50;
        mapper_rsp_payload_fragment_data[21 : 21] = _zz_52;
        mapper_rsp_payload_fragment_data[22 : 22] = _zz_54;
        mapper_rsp_payload_fragment_data[23 : 23] = _zz_56;
        mapper_rsp_payload_fragment_data[24 : 24] = _zz_58;
        mapper_rsp_payload_fragment_data[25 : 25] = _zz_60;
        mapper_rsp_payload_fragment_data[26 : 26] = _zz_62;
        mapper_rsp_payload_fragment_data[27 : 27] = _zz_64;
        mapper_rsp_payload_fragment_data[28 : 28] = _zz_66;
        mapper_rsp_payload_fragment_data[29 : 29] = _zz_68;
        mapper_rsp_payload_fragment_data[30 : 30] = _zz_70;
        mapper_rsp_payload_fragment_data[31 : 31] = _zz_72;
      end
      8'h08 : begin
        mapper_rsp_payload_fragment_data[0 : 0] = _zz_11;
        mapper_rsp_payload_fragment_data[1 : 1] = _zz_13;
        mapper_rsp_payload_fragment_data[2 : 2] = _zz_15;
        mapper_rsp_payload_fragment_data[3 : 3] = _zz_17;
        mapper_rsp_payload_fragment_data[4 : 4] = _zz_19;
        mapper_rsp_payload_fragment_data[5 : 5] = _zz_21;
        mapper_rsp_payload_fragment_data[6 : 6] = _zz_23;
        mapper_rsp_payload_fragment_data[7 : 7] = _zz_25;
        mapper_rsp_payload_fragment_data[8 : 8] = _zz_27;
        mapper_rsp_payload_fragment_data[9 : 9] = _zz_29;
        mapper_rsp_payload_fragment_data[10 : 10] = _zz_31;
        mapper_rsp_payload_fragment_data[11 : 11] = _zz_33;
        mapper_rsp_payload_fragment_data[12 : 12] = _zz_35;
        mapper_rsp_payload_fragment_data[13 : 13] = _zz_37;
        mapper_rsp_payload_fragment_data[14 : 14] = _zz_39;
        mapper_rsp_payload_fragment_data[15 : 15] = _zz_41;
        mapper_rsp_payload_fragment_data[16 : 16] = _zz_43;
        mapper_rsp_payload_fragment_data[17 : 17] = _zz_45;
        mapper_rsp_payload_fragment_data[18 : 18] = _zz_47;
        mapper_rsp_payload_fragment_data[19 : 19] = _zz_49;
        mapper_rsp_payload_fragment_data[20 : 20] = _zz_51;
        mapper_rsp_payload_fragment_data[21 : 21] = _zz_53;
        mapper_rsp_payload_fragment_data[22 : 22] = _zz_55;
        mapper_rsp_payload_fragment_data[23 : 23] = _zz_57;
        mapper_rsp_payload_fragment_data[24 : 24] = _zz_59;
        mapper_rsp_payload_fragment_data[25 : 25] = _zz_61;
        mapper_rsp_payload_fragment_data[26 : 26] = _zz_63;
        mapper_rsp_payload_fragment_data[27 : 27] = _zz_65;
        mapper_rsp_payload_fragment_data[28 : 28] = _zz_67;
        mapper_rsp_payload_fragment_data[29 : 29] = _zz_69;
        mapper_rsp_payload_fragment_data[30 : 30] = _zz_71;
        mapper_rsp_payload_fragment_data[31 : 31] = _zz_73;
      end
      8'h20 : begin
        mapper_rsp_payload_fragment_data[24 : 24] = _zz_74;
        mapper_rsp_payload_fragment_data[25 : 25] = _zz_78;
        mapper_rsp_payload_fragment_data[26 : 26] = _zz_82;
        mapper_rsp_payload_fragment_data[27 : 27] = _zz_86;
      end
      8'h24 : begin
        mapper_rsp_payload_fragment_data[24 : 24] = _zz_75;
        mapper_rsp_payload_fragment_data[25 : 25] = _zz_79;
        mapper_rsp_payload_fragment_data[26 : 26] = _zz_83;
        mapper_rsp_payload_fragment_data[27 : 27] = _zz_87;
      end
      8'h28 : begin
        mapper_rsp_payload_fragment_data[24 : 24] = _zz_76;
        mapper_rsp_payload_fragment_data[25 : 25] = _zz_80;
        mapper_rsp_payload_fragment_data[26 : 26] = _zz_84;
        mapper_rsp_payload_fragment_data[27 : 27] = _zz_88;
      end
      8'h2c : begin
        mapper_rsp_payload_fragment_data[24 : 24] = _zz_77;
        mapper_rsp_payload_fragment_data[25 : 25] = _zz_81;
        mapper_rsp_payload_fragment_data[26 : 26] = _zz_85;
        mapper_rsp_payload_fragment_data[27 : 27] = _zz_89;
      end
      default : begin
      end
    endcase
  end

  assign mapper_rsp_payload_fragment_context = io_bus_cmd_payload_fragment_context;
  assign mapper_rsp_payload_fragment_source = io_bus_cmd_payload_fragment_source;
  assign syncronized = io_gpio_read_buffercc_io_dataOut;
  always @ (*) begin
    io_gpio_write[0] = _zz_10;
    io_gpio_write[1] = _zz_12;
    io_gpio_write[2] = _zz_14;
    io_gpio_write[3] = _zz_16;
    io_gpio_write[4] = _zz_18;
    io_gpio_write[5] = _zz_20;
    io_gpio_write[6] = _zz_22;
    io_gpio_write[7] = _zz_24;
    io_gpio_write[8] = _zz_26;
    io_gpio_write[9] = _zz_28;
    io_gpio_write[10] = _zz_30;
    io_gpio_write[11] = _zz_32;
    io_gpio_write[12] = _zz_34;
    io_gpio_write[13] = _zz_36;
    io_gpio_write[14] = _zz_38;
    io_gpio_write[15] = _zz_40;
    io_gpio_write[16] = _zz_42;
    io_gpio_write[17] = _zz_44;
    io_gpio_write[18] = _zz_46;
    io_gpio_write[19] = _zz_48;
    io_gpio_write[20] = _zz_50;
    io_gpio_write[21] = _zz_52;
    io_gpio_write[22] = _zz_54;
    io_gpio_write[23] = _zz_56;
    io_gpio_write[24] = _zz_58;
    io_gpio_write[25] = _zz_60;
    io_gpio_write[26] = _zz_62;
    io_gpio_write[27] = _zz_64;
    io_gpio_write[28] = _zz_66;
    io_gpio_write[29] = _zz_68;
    io_gpio_write[30] = _zz_70;
    io_gpio_write[31] = _zz_72;
  end

  always @ (*) begin
    io_gpio_writeEnable[0] = _zz_11;
    io_gpio_writeEnable[1] = _zz_13;
    io_gpio_writeEnable[2] = _zz_15;
    io_gpio_writeEnable[3] = _zz_17;
    io_gpio_writeEnable[4] = _zz_19;
    io_gpio_writeEnable[5] = _zz_21;
    io_gpio_writeEnable[6] = _zz_23;
    io_gpio_writeEnable[7] = _zz_25;
    io_gpio_writeEnable[8] = _zz_27;
    io_gpio_writeEnable[9] = _zz_29;
    io_gpio_writeEnable[10] = _zz_31;
    io_gpio_writeEnable[11] = _zz_33;
    io_gpio_writeEnable[12] = _zz_35;
    io_gpio_writeEnable[13] = _zz_37;
    io_gpio_writeEnable[14] = _zz_39;
    io_gpio_writeEnable[15] = _zz_41;
    io_gpio_writeEnable[16] = _zz_43;
    io_gpio_writeEnable[17] = _zz_45;
    io_gpio_writeEnable[18] = _zz_47;
    io_gpio_writeEnable[19] = _zz_49;
    io_gpio_writeEnable[20] = _zz_51;
    io_gpio_writeEnable[21] = _zz_53;
    io_gpio_writeEnable[22] = _zz_55;
    io_gpio_writeEnable[23] = _zz_57;
    io_gpio_writeEnable[24] = _zz_59;
    io_gpio_writeEnable[25] = _zz_61;
    io_gpio_writeEnable[26] = _zz_63;
    io_gpio_writeEnable[27] = _zz_65;
    io_gpio_writeEnable[28] = _zz_67;
    io_gpio_writeEnable[29] = _zz_69;
    io_gpio_writeEnable[30] = _zz_71;
    io_gpio_writeEnable[31] = _zz_73;
  end

  assign interrupt_valid = ((((interrupt_enable_high & syncronized) | (interrupt_enable_low & (~ syncronized))) | (interrupt_enable_rise & (syncronized & (~ last)))) | (interrupt_enable_fall & ((~ syncronized) & last)));
  always @ (*) begin
    io_interrupt[0] = 1'b0;
    io_interrupt[1] = 1'b0;
    io_interrupt[2] = 1'b0;
    io_interrupt[3] = 1'b0;
    io_interrupt[4] = 1'b0;
    io_interrupt[5] = 1'b0;
    io_interrupt[6] = 1'b0;
    io_interrupt[7] = 1'b0;
    io_interrupt[8] = 1'b0;
    io_interrupt[9] = 1'b0;
    io_interrupt[10] = 1'b0;
    io_interrupt[11] = 1'b0;
    io_interrupt[12] = 1'b0;
    io_interrupt[13] = 1'b0;
    io_interrupt[14] = 1'b0;
    io_interrupt[15] = 1'b0;
    io_interrupt[16] = 1'b0;
    io_interrupt[17] = 1'b0;
    io_interrupt[18] = 1'b0;
    io_interrupt[19] = 1'b0;
    io_interrupt[20] = 1'b0;
    io_interrupt[21] = 1'b0;
    io_interrupt[22] = 1'b0;
    io_interrupt[23] = 1'b0;
    io_interrupt[24] = interrupt_valid[24];
    io_interrupt[25] = interrupt_valid[25];
    io_interrupt[26] = interrupt_valid[26];
    io_interrupt[27] = interrupt_valid[27];
    io_interrupt[28] = 1'b0;
    io_interrupt[29] = 1'b0;
    io_interrupt[30] = 1'b0;
    io_interrupt[31] = 1'b0;
  end

  always @ (*) begin
    interrupt_enable_rise[0] = 1'b0;
    interrupt_enable_rise[1] = 1'b0;
    interrupt_enable_rise[2] = 1'b0;
    interrupt_enable_rise[3] = 1'b0;
    interrupt_enable_rise[4] = 1'b0;
    interrupt_enable_rise[5] = 1'b0;
    interrupt_enable_rise[6] = 1'b0;
    interrupt_enable_rise[7] = 1'b0;
    interrupt_enable_rise[8] = 1'b0;
    interrupt_enable_rise[9] = 1'b0;
    interrupt_enable_rise[10] = 1'b0;
    interrupt_enable_rise[11] = 1'b0;
    interrupt_enable_rise[12] = 1'b0;
    interrupt_enable_rise[13] = 1'b0;
    interrupt_enable_rise[14] = 1'b0;
    interrupt_enable_rise[15] = 1'b0;
    interrupt_enable_rise[16] = 1'b0;
    interrupt_enable_rise[17] = 1'b0;
    interrupt_enable_rise[18] = 1'b0;
    interrupt_enable_rise[19] = 1'b0;
    interrupt_enable_rise[20] = 1'b0;
    interrupt_enable_rise[21] = 1'b0;
    interrupt_enable_rise[22] = 1'b0;
    interrupt_enable_rise[23] = 1'b0;
    interrupt_enable_rise[24] = _zz_74;
    interrupt_enable_rise[25] = _zz_78;
    interrupt_enable_rise[26] = _zz_82;
    interrupt_enable_rise[27] = _zz_86;
    interrupt_enable_rise[28] = 1'b0;
    interrupt_enable_rise[29] = 1'b0;
    interrupt_enable_rise[30] = 1'b0;
    interrupt_enable_rise[31] = 1'b0;
  end

  always @ (*) begin
    interrupt_enable_fall[0] = 1'b0;
    interrupt_enable_fall[1] = 1'b0;
    interrupt_enable_fall[2] = 1'b0;
    interrupt_enable_fall[3] = 1'b0;
    interrupt_enable_fall[4] = 1'b0;
    interrupt_enable_fall[5] = 1'b0;
    interrupt_enable_fall[6] = 1'b0;
    interrupt_enable_fall[7] = 1'b0;
    interrupt_enable_fall[8] = 1'b0;
    interrupt_enable_fall[9] = 1'b0;
    interrupt_enable_fall[10] = 1'b0;
    interrupt_enable_fall[11] = 1'b0;
    interrupt_enable_fall[12] = 1'b0;
    interrupt_enable_fall[13] = 1'b0;
    interrupt_enable_fall[14] = 1'b0;
    interrupt_enable_fall[15] = 1'b0;
    interrupt_enable_fall[16] = 1'b0;
    interrupt_enable_fall[17] = 1'b0;
    interrupt_enable_fall[18] = 1'b0;
    interrupt_enable_fall[19] = 1'b0;
    interrupt_enable_fall[20] = 1'b0;
    interrupt_enable_fall[21] = 1'b0;
    interrupt_enable_fall[22] = 1'b0;
    interrupt_enable_fall[23] = 1'b0;
    interrupt_enable_fall[24] = _zz_75;
    interrupt_enable_fall[25] = _zz_79;
    interrupt_enable_fall[26] = _zz_83;
    interrupt_enable_fall[27] = _zz_87;
    interrupt_enable_fall[28] = 1'b0;
    interrupt_enable_fall[29] = 1'b0;
    interrupt_enable_fall[30] = 1'b0;
    interrupt_enable_fall[31] = 1'b0;
  end

  always @ (*) begin
    interrupt_enable_high[0] = 1'b0;
    interrupt_enable_high[1] = 1'b0;
    interrupt_enable_high[2] = 1'b0;
    interrupt_enable_high[3] = 1'b0;
    interrupt_enable_high[4] = 1'b0;
    interrupt_enable_high[5] = 1'b0;
    interrupt_enable_high[6] = 1'b0;
    interrupt_enable_high[7] = 1'b0;
    interrupt_enable_high[8] = 1'b0;
    interrupt_enable_high[9] = 1'b0;
    interrupt_enable_high[10] = 1'b0;
    interrupt_enable_high[11] = 1'b0;
    interrupt_enable_high[12] = 1'b0;
    interrupt_enable_high[13] = 1'b0;
    interrupt_enable_high[14] = 1'b0;
    interrupt_enable_high[15] = 1'b0;
    interrupt_enable_high[16] = 1'b0;
    interrupt_enable_high[17] = 1'b0;
    interrupt_enable_high[18] = 1'b0;
    interrupt_enable_high[19] = 1'b0;
    interrupt_enable_high[20] = 1'b0;
    interrupt_enable_high[21] = 1'b0;
    interrupt_enable_high[22] = 1'b0;
    interrupt_enable_high[23] = 1'b0;
    interrupt_enable_high[24] = _zz_76;
    interrupt_enable_high[25] = _zz_80;
    interrupt_enable_high[26] = _zz_84;
    interrupt_enable_high[27] = _zz_88;
    interrupt_enable_high[28] = 1'b0;
    interrupt_enable_high[29] = 1'b0;
    interrupt_enable_high[30] = 1'b0;
    interrupt_enable_high[31] = 1'b0;
  end

  always @ (*) begin
    interrupt_enable_low[0] = 1'b0;
    interrupt_enable_low[1] = 1'b0;
    interrupt_enable_low[2] = 1'b0;
    interrupt_enable_low[3] = 1'b0;
    interrupt_enable_low[4] = 1'b0;
    interrupt_enable_low[5] = 1'b0;
    interrupt_enable_low[6] = 1'b0;
    interrupt_enable_low[7] = 1'b0;
    interrupt_enable_low[8] = 1'b0;
    interrupt_enable_low[9] = 1'b0;
    interrupt_enable_low[10] = 1'b0;
    interrupt_enable_low[11] = 1'b0;
    interrupt_enable_low[12] = 1'b0;
    interrupt_enable_low[13] = 1'b0;
    interrupt_enable_low[14] = 1'b0;
    interrupt_enable_low[15] = 1'b0;
    interrupt_enable_low[16] = 1'b0;
    interrupt_enable_low[17] = 1'b0;
    interrupt_enable_low[18] = 1'b0;
    interrupt_enable_low[19] = 1'b0;
    interrupt_enable_low[20] = 1'b0;
    interrupt_enable_low[21] = 1'b0;
    interrupt_enable_low[22] = 1'b0;
    interrupt_enable_low[23] = 1'b0;
    interrupt_enable_low[24] = _zz_77;
    interrupt_enable_low[25] = _zz_81;
    interrupt_enable_low[26] = _zz_85;
    interrupt_enable_low[27] = _zz_89;
    interrupt_enable_low[28] = 1'b0;
    interrupt_enable_low[29] = 1'b0;
    interrupt_enable_low[30] = 1'b0;
    interrupt_enable_low[31] = 1'b0;
  end

  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      _zz_4 <= 1'b0;
      _zz_11 <= 1'b0;
      _zz_13 <= 1'b0;
      _zz_15 <= 1'b0;
      _zz_17 <= 1'b0;
      _zz_19 <= 1'b0;
      _zz_21 <= 1'b0;
      _zz_23 <= 1'b0;
      _zz_25 <= 1'b0;
      _zz_27 <= 1'b0;
      _zz_29 <= 1'b0;
      _zz_31 <= 1'b0;
      _zz_33 <= 1'b0;
      _zz_35 <= 1'b0;
      _zz_37 <= 1'b0;
      _zz_39 <= 1'b0;
      _zz_41 <= 1'b0;
      _zz_43 <= 1'b0;
      _zz_45 <= 1'b0;
      _zz_47 <= 1'b0;
      _zz_49 <= 1'b0;
      _zz_51 <= 1'b0;
      _zz_53 <= 1'b0;
      _zz_55 <= 1'b0;
      _zz_57 <= 1'b0;
      _zz_59 <= 1'b0;
      _zz_61 <= 1'b0;
      _zz_63 <= 1'b0;
      _zz_65 <= 1'b0;
      _zz_67 <= 1'b0;
      _zz_69 <= 1'b0;
      _zz_71 <= 1'b0;
      _zz_73 <= 1'b0;
      _zz_74 <= 1'b0;
      _zz_75 <= 1'b0;
      _zz_76 <= 1'b0;
      _zz_77 <= 1'b0;
      _zz_78 <= 1'b0;
      _zz_79 <= 1'b0;
      _zz_80 <= 1'b0;
      _zz_81 <= 1'b0;
      _zz_82 <= 1'b0;
      _zz_83 <= 1'b0;
      _zz_84 <= 1'b0;
      _zz_85 <= 1'b0;
      _zz_86 <= 1'b0;
      _zz_87 <= 1'b0;
      _zz_88 <= 1'b0;
      _zz_89 <= 1'b0;
    end else begin
      if(_zz_2)begin
        _zz_4 <= (mapper_rsp_valid && _zz_1);
      end
      case(io_bus_cmd_payload_fragment_address)
        8'h08 : begin
          if(mapper_doWrite)begin
            _zz_11 <= _zz_122[0];
            _zz_13 <= _zz_123[0];
            _zz_15 <= _zz_124[0];
            _zz_17 <= _zz_125[0];
            _zz_19 <= _zz_126[0];
            _zz_21 <= _zz_127[0];
            _zz_23 <= _zz_128[0];
            _zz_25 <= _zz_129[0];
            _zz_27 <= _zz_130[0];
            _zz_29 <= _zz_131[0];
            _zz_31 <= _zz_132[0];
            _zz_33 <= _zz_133[0];
            _zz_35 <= _zz_134[0];
            _zz_37 <= _zz_135[0];
            _zz_39 <= _zz_136[0];
            _zz_41 <= _zz_137[0];
            _zz_43 <= _zz_138[0];
            _zz_45 <= _zz_139[0];
            _zz_47 <= _zz_140[0];
            _zz_49 <= _zz_141[0];
            _zz_51 <= _zz_142[0];
            _zz_53 <= _zz_143[0];
            _zz_55 <= _zz_144[0];
            _zz_57 <= _zz_145[0];
            _zz_59 <= _zz_146[0];
            _zz_61 <= _zz_147[0];
            _zz_63 <= _zz_148[0];
            _zz_65 <= _zz_149[0];
            _zz_67 <= _zz_150[0];
            _zz_69 <= _zz_151[0];
            _zz_71 <= _zz_152[0];
            _zz_73 <= _zz_153[0];
          end
        end
        8'h20 : begin
          if(mapper_doWrite)begin
            _zz_74 <= _zz_154[0];
            _zz_78 <= _zz_155[0];
            _zz_82 <= _zz_156[0];
            _zz_86 <= _zz_157[0];
          end
        end
        8'h24 : begin
          if(mapper_doWrite)begin
            _zz_75 <= _zz_158[0];
            _zz_79 <= _zz_159[0];
            _zz_83 <= _zz_160[0];
            _zz_87 <= _zz_161[0];
          end
        end
        8'h28 : begin
          if(mapper_doWrite)begin
            _zz_76 <= _zz_162[0];
            _zz_80 <= _zz_163[0];
            _zz_84 <= _zz_164[0];
            _zz_88 <= _zz_165[0];
          end
        end
        8'h2c : begin
          if(mapper_doWrite)begin
            _zz_77 <= _zz_166[0];
            _zz_81 <= _zz_167[0];
            _zz_85 <= _zz_168[0];
            _zz_89 <= _zz_169[0];
          end
        end
        default : begin
        end
      endcase
    end
  end

  always @ (posedge CLKOUT0) begin
    if(_zz_2)begin
      _zz_5 <= mapper_rsp_payload_last;
      _zz_6 <= mapper_rsp_payload_fragment_source;
      _zz_7 <= mapper_rsp_payload_fragment_opcode;
      _zz_8 <= mapper_rsp_payload_fragment_data;
      _zz_9 <= mapper_rsp_payload_fragment_context;
    end
    last <= syncronized;
    case(io_bus_cmd_payload_fragment_address)
      8'h04 : begin
        if(mapper_doWrite)begin
          _zz_10 <= _zz_90[0];
          _zz_12 <= _zz_91[0];
          _zz_14 <= _zz_92[0];
          _zz_16 <= _zz_93[0];
          _zz_18 <= _zz_94[0];
          _zz_20 <= _zz_95[0];
          _zz_22 <= _zz_96[0];
          _zz_24 <= _zz_97[0];
          _zz_26 <= _zz_98[0];
          _zz_28 <= _zz_99[0];
          _zz_30 <= _zz_100[0];
          _zz_32 <= _zz_101[0];
          _zz_34 <= _zz_102[0];
          _zz_36 <= _zz_103[0];
          _zz_38 <= _zz_104[0];
          _zz_40 <= _zz_105[0];
          _zz_42 <= _zz_106[0];
          _zz_44 <= _zz_107[0];
          _zz_46 <= _zz_108[0];
          _zz_48 <= _zz_109[0];
          _zz_50 <= _zz_110[0];
          _zz_52 <= _zz_111[0];
          _zz_54 <= _zz_112[0];
          _zz_56 <= _zz_113[0];
          _zz_58 <= _zz_114[0];
          _zz_60 <= _zz_115[0];
          _zz_62 <= _zz_116[0];
          _zz_64 <= _zz_117[0];
          _zz_66 <= _zz_118[0];
          _zz_68 <= _zz_119[0];
          _zz_70 <= _zz_120[0];
          _zz_72 <= _zz_121[0];
        end
      end
      default : begin
      end
    endcase
  end


endmodule

module BmbClint (
  input               io_bus_cmd_valid,
  output              io_bus_cmd_ready,
  input               io_bus_cmd_payload_last,
  input      [0:0]    io_bus_cmd_payload_fragment_source,
  input      [0:0]    io_bus_cmd_payload_fragment_opcode,
  input      [15:0]   io_bus_cmd_payload_fragment_address,
  input      [1:0]    io_bus_cmd_payload_fragment_length,
  input      [31:0]   io_bus_cmd_payload_fragment_data,
  input      [3:0]    io_bus_cmd_payload_fragment_mask,
  input      [6:0]    io_bus_cmd_payload_fragment_context,
  output              io_bus_rsp_valid,
  input               io_bus_rsp_ready,
  output              io_bus_rsp_payload_last,
  output     [0:0]    io_bus_rsp_payload_fragment_source,
  output     [0:0]    io_bus_rsp_payload_fragment_opcode,
  output     [31:0]   io_bus_rsp_payload_fragment_data,
  output     [6:0]    io_bus_rsp_payload_fragment_context,
  output reg [1:0]    io_timerInterrupt,
  output reg [1:0]    io_softwareInterrupt,
  output     [63:0]   io_time,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  wire       [63:0]   _zz_11;
  wire       [63:0]   _zz_12;
  wire       [31:0]   _zz_13;
  wire       [31:0]   _zz_14;
  wire       [31:0]   _zz_15;
  wire       [31:0]   _zz_16;
  wire       [0:0]    _zz_17;
  wire       [31:0]   _zz_18;
  wire       [31:0]   _zz_19;
  wire       [31:0]   _zz_20;
  wire       [31:0]   _zz_21;
  wire       [0:0]    _zz_22;
  wire                factory_readHaltTrigger;
  wire                factory_writeHaltTrigger;
  wire                factory_rsp_valid;
  wire                factory_rsp_ready;
  wire                factory_rsp_payload_last;
  wire       [0:0]    factory_rsp_payload_fragment_source;
  wire       [0:0]    factory_rsp_payload_fragment_opcode;
  reg        [31:0]   factory_rsp_payload_fragment_data;
  wire       [6:0]    factory_rsp_payload_fragment_context;
  wire                _zz_1;
  wire                _zz_2;
  wire                _zz_3;
  reg                 _zz_4;
  reg                 _zz_5;
  reg        [0:0]    _zz_6;
  reg        [0:0]    _zz_7;
  reg        [31:0]   _zz_8;
  reg        [6:0]    _zz_9;
  wire                factory_askWrite;
  wire                factory_askRead;
  wire                factory_doWrite;
  wire                factory_doRead;
  reg        [63:0]   logic_time;
  reg        [63:0]   logic_harts_0_cmp;
  reg                 logic_harts_0_timerInterrupt;
  reg                 logic_harts_0_softwareInterrupt;
  reg        [63:0]   logic_harts_1_cmp;
  reg                 logic_harts_1_timerInterrupt;
  reg                 logic_harts_1_softwareInterrupt;
  wire       [63:0]   _zz_10;

  assign _zz_11 = (logic_time - logic_harts_0_cmp);
  assign _zz_12 = (logic_time - logic_harts_1_cmp);
  assign _zz_13 = io_bus_cmd_payload_fragment_data[31 : 0];
  assign _zz_14 = _zz_13;
  assign _zz_15 = io_bus_cmd_payload_fragment_data[31 : 0];
  assign _zz_16 = _zz_15;
  assign _zz_17 = io_bus_cmd_payload_fragment_data[0 : 0];
  assign _zz_18 = io_bus_cmd_payload_fragment_data[31 : 0];
  assign _zz_19 = _zz_18;
  assign _zz_20 = io_bus_cmd_payload_fragment_data[31 : 0];
  assign _zz_21 = _zz_20;
  assign _zz_22 = io_bus_cmd_payload_fragment_data[0 : 0];
  assign factory_readHaltTrigger = 1'b0;
  assign factory_writeHaltTrigger = 1'b0;
  assign _zz_1 = (! (factory_readHaltTrigger || factory_writeHaltTrigger));
  assign factory_rsp_ready = (_zz_2 && _zz_1);
  assign _zz_2 = ((1'b1 && (! _zz_3)) || io_bus_rsp_ready);
  assign _zz_3 = _zz_4;
  assign io_bus_rsp_valid = _zz_3;
  assign io_bus_rsp_payload_last = _zz_5;
  assign io_bus_rsp_payload_fragment_source = _zz_6;
  assign io_bus_rsp_payload_fragment_opcode = _zz_7;
  assign io_bus_rsp_payload_fragment_data = _zz_8;
  assign io_bus_rsp_payload_fragment_context = _zz_9;
  assign factory_askWrite = (io_bus_cmd_valid && (io_bus_cmd_payload_fragment_opcode == 1'b1));
  assign factory_askRead = (io_bus_cmd_valid && (io_bus_cmd_payload_fragment_opcode == 1'b0));
  assign factory_doWrite = ((io_bus_cmd_valid && io_bus_cmd_ready) && (io_bus_cmd_payload_fragment_opcode == 1'b1));
  assign factory_doRead = ((io_bus_cmd_valid && io_bus_cmd_ready) && (io_bus_cmd_payload_fragment_opcode == 1'b0));
  assign factory_rsp_valid = io_bus_cmd_valid;
  assign io_bus_cmd_ready = factory_rsp_ready;
  assign factory_rsp_payload_last = 1'b1;
  assign factory_rsp_payload_fragment_opcode = 1'b0;
  always @ (*) begin
    factory_rsp_payload_fragment_data = 32'h0;
    case(io_bus_cmd_payload_fragment_address)
      16'hbff8 : begin
        factory_rsp_payload_fragment_data[31 : 0] = _zz_10[31 : 0];
      end
      16'hbffc : begin
        factory_rsp_payload_fragment_data[31 : 0] = _zz_10[63 : 32];
      end
      16'h0 : begin
        factory_rsp_payload_fragment_data[0 : 0] = logic_harts_0_softwareInterrupt;
      end
      16'h0004 : begin
        factory_rsp_payload_fragment_data[0 : 0] = logic_harts_1_softwareInterrupt;
      end
      default : begin
      end
    endcase
  end

  assign factory_rsp_payload_fragment_context = io_bus_cmd_payload_fragment_context;
  assign factory_rsp_payload_fragment_source = io_bus_cmd_payload_fragment_source;
  assign _zz_10 = logic_time;
  always @ (*) begin
    io_timerInterrupt[0] = logic_harts_0_timerInterrupt;
    io_timerInterrupt[1] = logic_harts_1_timerInterrupt;
  end

  always @ (*) begin
    io_softwareInterrupt[0] = logic_harts_0_softwareInterrupt;
    io_softwareInterrupt[1] = logic_harts_1_softwareInterrupt;
  end

  assign io_time = logic_time;
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      _zz_4 <= 1'b0;
      logic_time <= 64'h0;
      logic_harts_0_softwareInterrupt <= 1'b0;
      logic_harts_1_softwareInterrupt <= 1'b0;
    end else begin
      if(_zz_2)begin
        _zz_4 <= (factory_rsp_valid && _zz_1);
      end
      logic_time <= (logic_time + 64'h0000000000000001);
      case(io_bus_cmd_payload_fragment_address)
        16'h0 : begin
          if(factory_doWrite)begin
            logic_harts_0_softwareInterrupt <= _zz_17[0];
          end
        end
        16'h0004 : begin
          if(factory_doWrite)begin
            logic_harts_1_softwareInterrupt <= _zz_22[0];
          end
        end
        default : begin
        end
      endcase
    end
  end

  always @ (posedge CLKOUT0) begin
    if(_zz_2)begin
      _zz_5 <= factory_rsp_payload_last;
      _zz_6 <= factory_rsp_payload_fragment_source;
      _zz_7 <= factory_rsp_payload_fragment_opcode;
      _zz_8 <= factory_rsp_payload_fragment_data;
      _zz_9 <= factory_rsp_payload_fragment_context;
    end
    logic_harts_0_timerInterrupt <= (! _zz_11[63]);
    logic_harts_1_timerInterrupt <= (! _zz_12[63]);
    case(io_bus_cmd_payload_fragment_address)
      16'h4000 : begin
        if(factory_doWrite)begin
          logic_harts_0_cmp[31 : 0] <= _zz_14;
        end
      end
      16'h4004 : begin
        if(factory_doWrite)begin
          logic_harts_0_cmp[63 : 32] <= _zz_16;
        end
      end
      16'h4008 : begin
        if(factory_doWrite)begin
          logic_harts_1_cmp[31 : 0] <= _zz_19;
        end
      end
      16'h400c : begin
        if(factory_doWrite)begin
          logic_harts_1_cmp[63 : 32] <= _zz_21;
        end
      end
      default : begin
      end
    endcase
  end


endmodule

module BmbArbiter (
  input               io_inputs_0_cmd_valid,
  output              io_inputs_0_cmd_ready,
  input               io_inputs_0_cmd_payload_last,
  input      [0:0]    io_inputs_0_cmd_payload_fragment_opcode,
  input      [31:0]   io_inputs_0_cmd_payload_fragment_address,
  input      [1:0]    io_inputs_0_cmd_payload_fragment_length,
  input      [63:0]   io_inputs_0_cmd_payload_fragment_data,
  input      [7:0]    io_inputs_0_cmd_payload_fragment_mask,
  output              io_inputs_0_rsp_valid,
  input               io_inputs_0_rsp_ready,
  output              io_inputs_0_rsp_payload_last,
  output     [0:0]    io_inputs_0_rsp_payload_fragment_opcode,
  output     [63:0]   io_inputs_0_rsp_payload_fragment_data,
  output              io_inputs_0_sync_valid,
  input               io_inputs_0_sync_ready,
  input               io_inputs_1_cmd_valid,
  output              io_inputs_1_cmd_ready,
  input               io_inputs_1_cmd_payload_last,
  input      [0:0]    io_inputs_1_cmd_payload_fragment_opcode,
  input               io_inputs_1_cmd_payload_fragment_exclusive,
  input      [31:0]   io_inputs_1_cmd_payload_fragment_address,
  input      [5:0]    io_inputs_1_cmd_payload_fragment_length,
  input      [63:0]   io_inputs_1_cmd_payload_fragment_data,
  input      [7:0]    io_inputs_1_cmd_payload_fragment_mask,
  input      [2:0]    io_inputs_1_cmd_payload_fragment_context,
  output              io_inputs_1_rsp_valid,
  input               io_inputs_1_rsp_ready,
  output              io_inputs_1_rsp_payload_last,
  output     [0:0]    io_inputs_1_rsp_payload_fragment_opcode,
  output              io_inputs_1_rsp_payload_fragment_exclusive,
  output     [63:0]   io_inputs_1_rsp_payload_fragment_data,
  output     [2:0]    io_inputs_1_rsp_payload_fragment_context,
  output              io_inputs_1_inv_valid,
  input               io_inputs_1_inv_ready,
  output              io_inputs_1_inv_payload_all,
  output     [31:0]   io_inputs_1_inv_payload_address,
  output     [5:0]    io_inputs_1_inv_payload_length,
  input               io_inputs_1_ack_valid,
  output              io_inputs_1_ack_ready,
  output              io_inputs_1_sync_valid,
  input               io_inputs_1_sync_ready,
  input               io_inputs_2_cmd_valid,
  output              io_inputs_2_cmd_ready,
  input               io_inputs_2_cmd_payload_last,
  input      [0:0]    io_inputs_2_cmd_payload_fragment_opcode,
  input               io_inputs_2_cmd_payload_fragment_exclusive,
  input      [31:0]   io_inputs_2_cmd_payload_fragment_address,
  input      [5:0]    io_inputs_2_cmd_payload_fragment_length,
  input      [63:0]   io_inputs_2_cmd_payload_fragment_data,
  input      [7:0]    io_inputs_2_cmd_payload_fragment_mask,
  input      [2:0]    io_inputs_2_cmd_payload_fragment_context,
  output              io_inputs_2_rsp_valid,
  input               io_inputs_2_rsp_ready,
  output              io_inputs_2_rsp_payload_last,
  output     [0:0]    io_inputs_2_rsp_payload_fragment_opcode,
  output              io_inputs_2_rsp_payload_fragment_exclusive,
  output     [63:0]   io_inputs_2_rsp_payload_fragment_data,
  output     [2:0]    io_inputs_2_rsp_payload_fragment_context,
  output              io_inputs_2_inv_valid,
  input               io_inputs_2_inv_ready,
  output              io_inputs_2_inv_payload_all,
  output     [31:0]   io_inputs_2_inv_payload_address,
  output     [5:0]    io_inputs_2_inv_payload_length,
  input               io_inputs_2_ack_valid,
  output              io_inputs_2_ack_ready,
  output              io_inputs_2_sync_valid,
  input               io_inputs_2_sync_ready,
  output              io_output_cmd_valid,
  input               io_output_cmd_ready,
  output              io_output_cmd_payload_last,
  output     [1:0]    io_output_cmd_payload_fragment_source,
  output     [0:0]    io_output_cmd_payload_fragment_opcode,
  output              io_output_cmd_payload_fragment_exclusive,
  output     [31:0]   io_output_cmd_payload_fragment_address,
  output     [5:0]    io_output_cmd_payload_fragment_length,
  output     [63:0]   io_output_cmd_payload_fragment_data,
  output     [7:0]    io_output_cmd_payload_fragment_mask,
  output     [2:0]    io_output_cmd_payload_fragment_context,
  input               io_output_rsp_valid,
  output              io_output_rsp_ready,
  input               io_output_rsp_payload_last,
  input      [1:0]    io_output_rsp_payload_fragment_source,
  input      [0:0]    io_output_rsp_payload_fragment_opcode,
  input               io_output_rsp_payload_fragment_exclusive,
  input      [63:0]   io_output_rsp_payload_fragment_data,
  input      [2:0]    io_output_rsp_payload_fragment_context,
  input               io_output_inv_valid,
  output              io_output_inv_ready,
  input               io_output_inv_payload_all,
  input      [31:0]   io_output_inv_payload_address,
  input      [5:0]    io_output_inv_payload_length,
  input      [1:0]    io_output_inv_payload_source,
  output              io_output_ack_valid,
  input               io_output_ack_ready,
  input               io_output_sync_valid,
  output              io_output_sync_ready,
  input      [1:0]    io_output_sync_payload_source,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  wire       [1:0]    _zz_2;
  wire                _zz_3;
  wire       [5:0]    _zz_4;
  wire       [2:0]    _zz_5;
  wire       [1:0]    _zz_6;
  wire       [1:0]    _zz_7;
  wire                _zz_8;
  reg                 _zz_9;
  reg                 _zz_10;
  wire                memory_arbiter_io_inputs_0_ready;
  wire                memory_arbiter_io_inputs_1_ready;
  wire                memory_arbiter_io_inputs_2_ready;
  wire                memory_arbiter_io_output_valid;
  wire                memory_arbiter_io_output_payload_last;
  wire       [1:0]    memory_arbiter_io_output_payload_fragment_source;
  wire       [0:0]    memory_arbiter_io_output_payload_fragment_opcode;
  wire                memory_arbiter_io_output_payload_fragment_exclusive;
  wire       [31:0]   memory_arbiter_io_output_payload_fragment_address;
  wire       [5:0]    memory_arbiter_io_output_payload_fragment_length;
  wire       [63:0]   memory_arbiter_io_output_payload_fragment_data;
  wire       [7:0]    memory_arbiter_io_output_payload_fragment_mask;
  wire       [2:0]    memory_arbiter_io_output_payload_fragment_context;
  wire       [1:0]    memory_arbiter_io_chosen;
  wire       [2:0]    memory_arbiter_io_chosenOH;
  wire                streamFork_4_io_input_ready;
  wire                streamFork_4_io_outputs_0_valid;
  wire                streamFork_4_io_outputs_0_payload_all;
  wire       [31:0]   streamFork_4_io_outputs_0_payload_address;
  wire       [5:0]    streamFork_4_io_outputs_0_payload_length;
  wire       [1:0]    streamFork_4_io_outputs_0_payload_source;
  wire                streamFork_4_io_outputs_1_valid;
  wire                streamFork_4_io_outputs_1_payload_all;
  wire       [31:0]   streamFork_4_io_outputs_1_payload_address;
  wire       [5:0]    streamFork_4_io_outputs_1_payload_length;
  wire       [1:0]    streamFork_4_io_outputs_1_payload_source;
  wire       [3:0]    _zz_11;
  wire       [1:0]    memory_rspSel;
  reg                 invalidate_invCounter_incrementIt;
  reg                 invalidate_invCounter_decrementIt;
  wire       [2:0]    invalidate_invCounter_valueNext;
  reg        [2:0]    invalidate_invCounter_value;
  wire                invalidate_invCounter_willOverflowIfInc;
  wire                invalidate_invCounter_willOverflow;
  reg        [2:0]    invalidate_invCounter_finalIncrement;
  wire                invalidate_haltInv;
  wire                _zz_1;
  reg                 invalidate_logics_0_ackCounter_incrementIt;
  reg                 invalidate_logics_0_ackCounter_decrementIt;
  wire       [2:0]    invalidate_logics_0_ackCounter_valueNext;
  reg        [2:0]    invalidate_logics_0_ackCounter_value;
  wire                invalidate_logics_0_ackCounter_willOverflowIfInc;
  wire                invalidate_logics_0_ackCounter_willOverflow;
  reg        [2:0]    invalidate_logics_0_ackCounter_finalIncrement;
  reg                 invalidate_logics_1_ackCounter_incrementIt;
  reg                 invalidate_logics_1_ackCounter_decrementIt;
  wire       [2:0]    invalidate_logics_1_ackCounter_valueNext;
  reg        [2:0]    invalidate_logics_1_ackCounter_value;
  wire                invalidate_logics_1_ackCounter_willOverflowIfInc;
  wire                invalidate_logics_1_ackCounter_willOverflow;
  reg        [2:0]    invalidate_logics_1_ackCounter_finalIncrement;
  wire       [1:0]    sync_syncSel;

  assign _zz_11 = {memory_arbiter_io_output_payload_fragment_source,memory_arbiter_io_chosen};
  StreamArbiter_2 memory_arbiter (
    .io_inputs_0_valid                         (io_inputs_0_cmd_valid                                    ), //i
    .io_inputs_0_ready                         (memory_arbiter_io_inputs_0_ready                         ), //o
    .io_inputs_0_payload_last                  (io_inputs_0_cmd_payload_last                             ), //i
    .io_inputs_0_payload_fragment_source       (_zz_2[1:0]                                               ), //i
    .io_inputs_0_payload_fragment_opcode       (io_inputs_0_cmd_payload_fragment_opcode                  ), //i
    .io_inputs_0_payload_fragment_exclusive    (_zz_3                                                    ), //i
    .io_inputs_0_payload_fragment_address      (io_inputs_0_cmd_payload_fragment_address[31:0]           ), //i
    .io_inputs_0_payload_fragment_length       (_zz_4[5:0]                                               ), //i
    .io_inputs_0_payload_fragment_data         (io_inputs_0_cmd_payload_fragment_data[63:0]              ), //i
    .io_inputs_0_payload_fragment_mask         (io_inputs_0_cmd_payload_fragment_mask[7:0]               ), //i
    .io_inputs_0_payload_fragment_context      (_zz_5[2:0]                                               ), //i
    .io_inputs_1_valid                         (io_inputs_1_cmd_valid                                    ), //i
    .io_inputs_1_ready                         (memory_arbiter_io_inputs_1_ready                         ), //o
    .io_inputs_1_payload_last                  (io_inputs_1_cmd_payload_last                             ), //i
    .io_inputs_1_payload_fragment_source       (_zz_6[1:0]                                               ), //i
    .io_inputs_1_payload_fragment_opcode       (io_inputs_1_cmd_payload_fragment_opcode                  ), //i
    .io_inputs_1_payload_fragment_exclusive    (io_inputs_1_cmd_payload_fragment_exclusive               ), //i
    .io_inputs_1_payload_fragment_address      (io_inputs_1_cmd_payload_fragment_address[31:0]           ), //i
    .io_inputs_1_payload_fragment_length       (io_inputs_1_cmd_payload_fragment_length[5:0]             ), //i
    .io_inputs_1_payload_fragment_data         (io_inputs_1_cmd_payload_fragment_data[63:0]              ), //i
    .io_inputs_1_payload_fragment_mask         (io_inputs_1_cmd_payload_fragment_mask[7:0]               ), //i
    .io_inputs_1_payload_fragment_context      (io_inputs_1_cmd_payload_fragment_context[2:0]            ), //i
    .io_inputs_2_valid                         (io_inputs_2_cmd_valid                                    ), //i
    .io_inputs_2_ready                         (memory_arbiter_io_inputs_2_ready                         ), //o
    .io_inputs_2_payload_last                  (io_inputs_2_cmd_payload_last                             ), //i
    .io_inputs_2_payload_fragment_source       (_zz_7[1:0]                                               ), //i
    .io_inputs_2_payload_fragment_opcode       (io_inputs_2_cmd_payload_fragment_opcode                  ), //i
    .io_inputs_2_payload_fragment_exclusive    (io_inputs_2_cmd_payload_fragment_exclusive               ), //i
    .io_inputs_2_payload_fragment_address      (io_inputs_2_cmd_payload_fragment_address[31:0]           ), //i
    .io_inputs_2_payload_fragment_length       (io_inputs_2_cmd_payload_fragment_length[5:0]             ), //i
    .io_inputs_2_payload_fragment_data         (io_inputs_2_cmd_payload_fragment_data[63:0]              ), //i
    .io_inputs_2_payload_fragment_mask         (io_inputs_2_cmd_payload_fragment_mask[7:0]               ), //i
    .io_inputs_2_payload_fragment_context      (io_inputs_2_cmd_payload_fragment_context[2:0]            ), //i
    .io_output_valid                           (memory_arbiter_io_output_valid                           ), //o
    .io_output_ready                           (io_output_cmd_ready                                      ), //i
    .io_output_payload_last                    (memory_arbiter_io_output_payload_last                    ), //o
    .io_output_payload_fragment_source         (memory_arbiter_io_output_payload_fragment_source[1:0]    ), //o
    .io_output_payload_fragment_opcode         (memory_arbiter_io_output_payload_fragment_opcode         ), //o
    .io_output_payload_fragment_exclusive      (memory_arbiter_io_output_payload_fragment_exclusive      ), //o
    .io_output_payload_fragment_address        (memory_arbiter_io_output_payload_fragment_address[31:0]  ), //o
    .io_output_payload_fragment_length         (memory_arbiter_io_output_payload_fragment_length[5:0]    ), //o
    .io_output_payload_fragment_data           (memory_arbiter_io_output_payload_fragment_data[63:0]     ), //o
    .io_output_payload_fragment_mask           (memory_arbiter_io_output_payload_fragment_mask[7:0]      ), //o
    .io_output_payload_fragment_context        (memory_arbiter_io_output_payload_fragment_context[2:0]   ), //o
    .io_chosen                                 (memory_arbiter_io_chosen[1:0]                            ), //o
    .io_chosenOH                               (memory_arbiter_io_chosenOH[2:0]                          ), //o
    .CLKOUT0                                   (CLKOUT0                                                  ), //i
    .systemCd_logic_outputReset                (systemCd_logic_outputReset                               )  //i
  );
  StreamFork_1 streamFork_4 (
    .io_input_valid                  (_zz_8                                            ), //i
    .io_input_ready                  (streamFork_4_io_input_ready                      ), //o
    .io_input_payload_all            (io_output_inv_payload_all                        ), //i
    .io_input_payload_address        (io_output_inv_payload_address[31:0]              ), //i
    .io_input_payload_length         (io_output_inv_payload_length[5:0]                ), //i
    .io_input_payload_source         (io_output_inv_payload_source[1:0]                ), //i
    .io_outputs_0_valid              (streamFork_4_io_outputs_0_valid                  ), //o
    .io_outputs_0_ready              (io_inputs_1_inv_ready                            ), //i
    .io_outputs_0_payload_all        (streamFork_4_io_outputs_0_payload_all            ), //o
    .io_outputs_0_payload_address    (streamFork_4_io_outputs_0_payload_address[31:0]  ), //o
    .io_outputs_0_payload_length     (streamFork_4_io_outputs_0_payload_length[5:0]    ), //o
    .io_outputs_0_payload_source     (streamFork_4_io_outputs_0_payload_source[1:0]    ), //o
    .io_outputs_1_valid              (streamFork_4_io_outputs_1_valid                  ), //o
    .io_outputs_1_ready              (io_inputs_2_inv_ready                            ), //i
    .io_outputs_1_payload_all        (streamFork_4_io_outputs_1_payload_all            ), //o
    .io_outputs_1_payload_address    (streamFork_4_io_outputs_1_payload_address[31:0]  ), //o
    .io_outputs_1_payload_length     (streamFork_4_io_outputs_1_payload_length[5:0]    ), //o
    .io_outputs_1_payload_source     (streamFork_4_io_outputs_1_payload_source[1:0]    ), //o
    .CLKOUT0                         (CLKOUT0                                          ), //i
    .systemCd_logic_outputReset      (systemCd_logic_outputReset                       )  //i
  );
  always @(*) begin
    case(memory_rspSel)
      2'b00 : begin
        _zz_9 = io_inputs_0_rsp_ready;
      end
      2'b01 : begin
        _zz_9 = io_inputs_1_rsp_ready;
      end
      default : begin
        _zz_9 = io_inputs_2_rsp_ready;
      end
    endcase
  end

  always @(*) begin
    case(sync_syncSel)
      2'b00 : begin
        _zz_10 = io_inputs_0_sync_ready;
      end
      2'b01 : begin
        _zz_10 = io_inputs_1_sync_ready;
      end
      default : begin
        _zz_10 = io_inputs_2_sync_ready;
      end
    endcase
  end

  assign io_inputs_0_cmd_ready = memory_arbiter_io_inputs_0_ready;
  assign _zz_2 = 2'b00;
  assign _zz_4 = {4'd0, io_inputs_0_cmd_payload_fragment_length};
  assign _zz_5 = 3'b000;
  assign _zz_3 = 1'b0;
  assign io_inputs_1_cmd_ready = memory_arbiter_io_inputs_1_ready;
  assign _zz_6 = 2'b00;
  assign io_inputs_2_cmd_ready = memory_arbiter_io_inputs_2_ready;
  assign _zz_7 = 2'b00;
  assign io_output_cmd_valid = memory_arbiter_io_output_valid;
  assign io_output_cmd_payload_last = memory_arbiter_io_output_payload_last;
  assign io_output_cmd_payload_fragment_opcode = memory_arbiter_io_output_payload_fragment_opcode;
  assign io_output_cmd_payload_fragment_exclusive = memory_arbiter_io_output_payload_fragment_exclusive;
  assign io_output_cmd_payload_fragment_address = memory_arbiter_io_output_payload_fragment_address;
  assign io_output_cmd_payload_fragment_length = memory_arbiter_io_output_payload_fragment_length;
  assign io_output_cmd_payload_fragment_data = memory_arbiter_io_output_payload_fragment_data;
  assign io_output_cmd_payload_fragment_mask = memory_arbiter_io_output_payload_fragment_mask;
  assign io_output_cmd_payload_fragment_context = memory_arbiter_io_output_payload_fragment_context;
  assign io_output_cmd_payload_fragment_source = _zz_11[1:0];
  assign memory_rspSel = io_output_rsp_payload_fragment_source[1 : 0];
  assign io_inputs_0_rsp_valid = (io_output_rsp_valid && (memory_rspSel == 2'b00));
  assign io_inputs_0_rsp_payload_last = io_output_rsp_payload_last;
  assign io_inputs_0_rsp_payload_fragment_opcode = io_output_rsp_payload_fragment_opcode;
  assign io_inputs_0_rsp_payload_fragment_data = io_output_rsp_payload_fragment_data;
  assign io_inputs_1_rsp_valid = (io_output_rsp_valid && (memory_rspSel == 2'b01));
  assign io_inputs_1_rsp_payload_last = io_output_rsp_payload_last;
  assign io_inputs_1_rsp_payload_fragment_opcode = io_output_rsp_payload_fragment_opcode;
  assign io_inputs_1_rsp_payload_fragment_data = io_output_rsp_payload_fragment_data;
  assign io_inputs_1_rsp_payload_fragment_context = io_output_rsp_payload_fragment_context;
  assign io_inputs_1_rsp_payload_fragment_exclusive = io_output_rsp_payload_fragment_exclusive;
  assign io_inputs_2_rsp_valid = (io_output_rsp_valid && (memory_rspSel == 2'b10));
  assign io_inputs_2_rsp_payload_last = io_output_rsp_payload_last;
  assign io_inputs_2_rsp_payload_fragment_opcode = io_output_rsp_payload_fragment_opcode;
  assign io_inputs_2_rsp_payload_fragment_data = io_output_rsp_payload_fragment_data;
  assign io_inputs_2_rsp_payload_fragment_context = io_output_rsp_payload_fragment_context;
  assign io_inputs_2_rsp_payload_fragment_exclusive = io_output_rsp_payload_fragment_exclusive;
  assign io_output_rsp_ready = _zz_9;
  always @ (*) begin
    invalidate_invCounter_incrementIt = 1'b0;
    if((io_output_inv_valid && io_output_inv_ready))begin
      invalidate_invCounter_incrementIt = 1'b1;
    end
  end

  always @ (*) begin
    invalidate_invCounter_decrementIt = 1'b0;
    if((io_output_ack_valid && io_output_ack_ready))begin
      invalidate_invCounter_decrementIt = 1'b1;
    end
  end

  assign invalidate_invCounter_willOverflowIfInc = ((invalidate_invCounter_value == 3'b111) && (! invalidate_invCounter_decrementIt));
  assign invalidate_invCounter_willOverflow = (invalidate_invCounter_willOverflowIfInc && invalidate_invCounter_incrementIt);
  always @ (*) begin
    if((invalidate_invCounter_incrementIt && (! invalidate_invCounter_decrementIt)))begin
      invalidate_invCounter_finalIncrement = 3'b001;
    end else begin
      if(((! invalidate_invCounter_incrementIt) && invalidate_invCounter_decrementIt))begin
        invalidate_invCounter_finalIncrement = 3'b111;
      end else begin
        invalidate_invCounter_finalIncrement = 3'b000;
      end
    end
  end

  assign invalidate_invCounter_valueNext = (invalidate_invCounter_value + invalidate_invCounter_finalIncrement);
  assign invalidate_haltInv = invalidate_invCounter_value[2];
  assign _zz_1 = (! invalidate_haltInv);
  assign io_output_inv_ready = (streamFork_4_io_input_ready && _zz_1);
  assign _zz_8 = (io_output_inv_valid && _zz_1);
  always @ (*) begin
    invalidate_logics_0_ackCounter_incrementIt = 1'b0;
    if((io_inputs_1_ack_valid && io_inputs_1_ack_ready))begin
      invalidate_logics_0_ackCounter_incrementIt = 1'b1;
    end
  end

  always @ (*) begin
    invalidate_logics_0_ackCounter_decrementIt = 1'b0;
    if((io_output_ack_valid && io_output_ack_ready))begin
      invalidate_logics_0_ackCounter_decrementIt = 1'b1;
    end
  end

  assign invalidate_logics_0_ackCounter_willOverflowIfInc = ((invalidate_logics_0_ackCounter_value == 3'b111) && (! invalidate_logics_0_ackCounter_decrementIt));
  assign invalidate_logics_0_ackCounter_willOverflow = (invalidate_logics_0_ackCounter_willOverflowIfInc && invalidate_logics_0_ackCounter_incrementIt);
  always @ (*) begin
    if((invalidate_logics_0_ackCounter_incrementIt && (! invalidate_logics_0_ackCounter_decrementIt)))begin
      invalidate_logics_0_ackCounter_finalIncrement = 3'b001;
    end else begin
      if(((! invalidate_logics_0_ackCounter_incrementIt) && invalidate_logics_0_ackCounter_decrementIt))begin
        invalidate_logics_0_ackCounter_finalIncrement = 3'b111;
      end else begin
        invalidate_logics_0_ackCounter_finalIncrement = 3'b000;
      end
    end
  end

  assign invalidate_logics_0_ackCounter_valueNext = (invalidate_logics_0_ackCounter_value + invalidate_logics_0_ackCounter_finalIncrement);
  assign io_inputs_1_inv_valid = streamFork_4_io_outputs_0_valid;
  assign io_inputs_1_inv_payload_address = streamFork_4_io_outputs_0_payload_address;
  assign io_inputs_1_inv_payload_length = streamFork_4_io_outputs_0_payload_length;
  assign io_inputs_1_inv_payload_all = (io_output_inv_payload_all || (io_output_inv_payload_source[1 : 0] != 2'b01));
  assign io_inputs_1_ack_ready = 1'b1;
  always @ (*) begin
    invalidate_logics_1_ackCounter_incrementIt = 1'b0;
    if((io_inputs_2_ack_valid && io_inputs_2_ack_ready))begin
      invalidate_logics_1_ackCounter_incrementIt = 1'b1;
    end
  end

  always @ (*) begin
    invalidate_logics_1_ackCounter_decrementIt = 1'b0;
    if((io_output_ack_valid && io_output_ack_ready))begin
      invalidate_logics_1_ackCounter_decrementIt = 1'b1;
    end
  end

  assign invalidate_logics_1_ackCounter_willOverflowIfInc = ((invalidate_logics_1_ackCounter_value == 3'b111) && (! invalidate_logics_1_ackCounter_decrementIt));
  assign invalidate_logics_1_ackCounter_willOverflow = (invalidate_logics_1_ackCounter_willOverflowIfInc && invalidate_logics_1_ackCounter_incrementIt);
  always @ (*) begin
    if((invalidate_logics_1_ackCounter_incrementIt && (! invalidate_logics_1_ackCounter_decrementIt)))begin
      invalidate_logics_1_ackCounter_finalIncrement = 3'b001;
    end else begin
      if(((! invalidate_logics_1_ackCounter_incrementIt) && invalidate_logics_1_ackCounter_decrementIt))begin
        invalidate_logics_1_ackCounter_finalIncrement = 3'b111;
      end else begin
        invalidate_logics_1_ackCounter_finalIncrement = 3'b000;
      end
    end
  end

  assign invalidate_logics_1_ackCounter_valueNext = (invalidate_logics_1_ackCounter_value + invalidate_logics_1_ackCounter_finalIncrement);
  assign io_inputs_2_inv_valid = streamFork_4_io_outputs_1_valid;
  assign io_inputs_2_inv_payload_address = streamFork_4_io_outputs_1_payload_address;
  assign io_inputs_2_inv_payload_length = streamFork_4_io_outputs_1_payload_length;
  assign io_inputs_2_inv_payload_all = (io_output_inv_payload_all || (io_output_inv_payload_source[1 : 0] != 2'b10));
  assign io_inputs_2_ack_ready = 1'b1;
  assign io_output_ack_valid = ((invalidate_logics_0_ackCounter_value != 3'b000) && (invalidate_logics_1_ackCounter_value != 3'b000));
  assign sync_syncSel = io_output_sync_payload_source[1 : 0];
  assign io_inputs_0_sync_valid = (io_output_sync_valid && (sync_syncSel == 2'b00));
  assign io_inputs_1_sync_valid = (io_output_sync_valid && (sync_syncSel == 2'b01));
  assign io_inputs_2_sync_valid = (io_output_sync_valid && (sync_syncSel == 2'b10));
  assign io_output_sync_ready = _zz_10;
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      invalidate_invCounter_value <= 3'b000;
      invalidate_logics_0_ackCounter_value <= 3'b000;
      invalidate_logics_1_ackCounter_value <= 3'b000;
    end else begin
      invalidate_invCounter_value <= invalidate_invCounter_valueNext;
      invalidate_logics_0_ackCounter_value <= invalidate_logics_0_ackCounter_valueNext;
      invalidate_logics_1_ackCounter_value <= invalidate_logics_1_ackCounter_valueNext;
    end
  end


endmodule

module BmbExclusiveMonitor (
  input               io_input_cmd_valid,
  output              io_input_cmd_ready,
  input               io_input_cmd_payload_last,
  input      [1:0]    io_input_cmd_payload_fragment_source,
  input      [0:0]    io_input_cmd_payload_fragment_opcode,
  input               io_input_cmd_payload_fragment_exclusive,
  input      [31:0]   io_input_cmd_payload_fragment_address,
  input      [5:0]    io_input_cmd_payload_fragment_length,
  input      [63:0]   io_input_cmd_payload_fragment_data,
  input      [7:0]    io_input_cmd_payload_fragment_mask,
  input      [2:0]    io_input_cmd_payload_fragment_context,
  output              io_input_rsp_valid,
  input               io_input_rsp_ready,
  output              io_input_rsp_payload_last,
  output     [1:0]    io_input_rsp_payload_fragment_source,
  output     [0:0]    io_input_rsp_payload_fragment_opcode,
  output              io_input_rsp_payload_fragment_exclusive,
  output     [63:0]   io_input_rsp_payload_fragment_data,
  output     [2:0]    io_input_rsp_payload_fragment_context,
  output              io_input_inv_valid,
  input               io_input_inv_ready,
  output              io_input_inv_payload_all,
  output     [31:0]   io_input_inv_payload_address,
  output     [5:0]    io_input_inv_payload_length,
  output     [1:0]    io_input_inv_payload_source,
  input               io_input_ack_valid,
  output              io_input_ack_ready,
  output              io_input_sync_valid,
  input               io_input_sync_ready,
  output     [1:0]    io_input_sync_payload_source,
  output              io_output_cmd_valid,
  input               io_output_cmd_ready,
  output              io_output_cmd_payload_last,
  output     [1:0]    io_output_cmd_payload_fragment_source,
  output     [0:0]    io_output_cmd_payload_fragment_opcode,
  output     [31:0]   io_output_cmd_payload_fragment_address,
  output     [5:0]    io_output_cmd_payload_fragment_length,
  output     [63:0]   io_output_cmd_payload_fragment_data,
  output reg [7:0]    io_output_cmd_payload_fragment_mask,
  output     [3:0]    io_output_cmd_payload_fragment_context,
  input               io_output_rsp_valid,
  output              io_output_rsp_ready,
  input               io_output_rsp_payload_last,
  input      [1:0]    io_output_rsp_payload_fragment_source,
  input      [0:0]    io_output_rsp_payload_fragment_opcode,
  input      [63:0]   io_output_rsp_payload_fragment_data,
  input      [3:0]    io_output_rsp_payload_fragment_context,
  input               io_output_inv_valid,
  output              io_output_inv_ready,
  input               io_output_inv_payload_all,
  input      [31:0]   io_output_inv_payload_address,
  input      [5:0]    io_output_inv_payload_length,
  input      [1:0]    io_output_inv_payload_source,
  output              io_output_ack_valid,
  input               io_output_ack_ready,
  input               io_output_sync_valid,
  output              io_output_sync_ready,
  input      [1:0]    io_output_sync_payload_source,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  wire                _zz_36;
  wire       [1:0]    _zz_37;
  wire       [0:0]    _zz_38;
  wire                _zz_39;
  wire                _zz_40;
  wire       [1:0]    _zz_41;
  wire       [0:0]    _zz_42;
  wire                _zz_43;
  wire                _zz_44;
  wire                exclusiveReadArbiter_io_inputs_0_ready;
  wire                exclusiveReadArbiter_io_inputs_1_ready;
  wire                exclusiveReadArbiter_io_output_valid;
  wire                exclusiveReadArbiter_io_output_payload_last;
  wire       [1:0]    exclusiveReadArbiter_io_output_payload_fragment_source;
  wire       [0:0]    exclusiveReadArbiter_io_output_payload_fragment_opcode;
  wire                exclusiveReadArbiter_io_output_payload_fragment_exclusive;
  wire       [31:0]   exclusiveReadArbiter_io_output_payload_fragment_address;
  wire       [5:0]    exclusiveReadArbiter_io_output_payload_fragment_length;
  wire       [2:0]    exclusiveReadArbiter_io_output_payload_fragment_context;
  wire       [0:0]    exclusiveReadArbiter_io_chosen;
  wire       [1:0]    exclusiveReadArbiter_io_chosenOH;
  wire                cmdArbiter_io_inputs_0_ready;
  wire                cmdArbiter_io_inputs_1_ready;
  wire                cmdArbiter_io_output_valid;
  wire                cmdArbiter_io_output_payload_last;
  wire       [1:0]    cmdArbiter_io_output_payload_fragment_source;
  wire       [0:0]    cmdArbiter_io_output_payload_fragment_opcode;
  wire                cmdArbiter_io_output_payload_fragment_exclusive;
  wire       [31:0]   cmdArbiter_io_output_payload_fragment_address;
  wire       [5:0]    cmdArbiter_io_output_payload_fragment_length;
  wire       [2:0]    cmdArbiter_io_output_payload_fragment_context;
  wire       [0:0]    cmdArbiter_io_chosen;
  wire       [1:0]    cmdArbiter_io_chosenOH;
  wire                _zz_45;
  wire                _zz_46;
  wire                _zz_47;
  wire                _zz_48;
  wire                _zz_49;
  wire                _zz_50;
  wire                _zz_51;
  wire                _zz_52;
  wire       [11:0]   _zz_53;
  wire       [19:0]   _zz_54;
  wire       [19:0]   _zz_55;
  wire       [19:0]   _zz_56;
  wire       [19:0]   _zz_57;
  reg                 fence_start;
  reg                 fence_done;
  reg                 fence_busy;
  reg                 exclusiveWriteCancel;
  wire       [11:0]   inputAddressLow;
  wire       [11:0]   inputAddressLowEnd;
  reg                 _zz_1;
  reg        `BmbExclusiveMonitorState_defaultEncoding_type _zz_2;
  reg        [31:0]   _zz_3;
  reg        [5:0]    _zz_4;
  reg        [2:0]    _zz_5;
  reg        [11:0]   _zz_6;
  wire                _zz_7;
  wire                _zz_8;
  wire                _zz_9;
  reg                 _zz_10;
  reg                 _zz_11;
  reg        `BmbExclusiveMonitorState_defaultEncoding_type _zz_12;
  reg        [31:0]   _zz_13;
  reg        [5:0]    _zz_14;
  reg        [2:0]    _zz_15;
  reg        [11:0]   _zz_16;
  wire                _zz_17;
  wire                _zz_18;
  wire                _zz_19;
  reg                 _zz_20;
  reg        [6:0]    _zz_21;
  reg        [6:0]    _zz_22;
  reg                 io_output_cmd_payload_first;
  reg                 io_output_rsp_payload_first;
  reg        [6:0]    _zz_23;
  reg                 _zz_24;
  reg        [6:0]    _zz_25;
  reg        [6:0]    _zz_26;
  reg        [6:0]    _zz_27;
  reg                 _zz_28;
  reg        [6:0]    _zz_29;
  reg        [6:0]    _zz_30;
  reg        [6:0]    _zz_31;
  reg                 _zz_32;
  wire                _zz_33;
  reg                 _zz_34;
  reg                 inputCmdHalted_valid;
  wire                inputCmdHalted_ready;
  wire                inputCmdHalted_payload_last;
  wire       [1:0]    inputCmdHalted_payload_fragment_source;
  wire       [0:0]    inputCmdHalted_payload_fragment_opcode;
  wire                inputCmdHalted_payload_fragment_exclusive;
  wire       [31:0]   inputCmdHalted_payload_fragment_address;
  wire       [5:0]    inputCmdHalted_payload_fragment_length;
  wire       [63:0]   inputCmdHalted_payload_fragment_data;
  wire       [7:0]    inputCmdHalted_payload_fragment_mask;
  wire       [2:0]    inputCmdHalted_payload_fragment_context;
  wire                exclusiveSuccess;
  wire                _zz_35;
  `ifndef SYNTHESIS
  reg [87:0] _zz_2_string;
  reg [87:0] _zz_12_string;
  `endif


  assign _zz_45 = (! fence_busy);
  assign _zz_46 = (! fence_busy);
  assign _zz_47 = (io_input_cmd_payload_fragment_exclusive && (! exclusiveSuccess));
  assign _zz_48 = ((io_input_cmd_valid && (io_input_cmd_payload_fragment_opcode == 1'b0)) && io_input_cmd_payload_fragment_exclusive);
  assign _zz_49 = ((io_input_cmd_valid && (io_input_cmd_payload_fragment_opcode == 1'b0)) && io_input_cmd_payload_fragment_exclusive);
  assign _zz_50 = (_zz_8 && (! _zz_9));
  assign _zz_51 = ((io_input_cmd_valid && (io_input_cmd_payload_fragment_opcode == 1'b0)) && io_input_cmd_payload_fragment_exclusive);
  assign _zz_52 = (_zz_18 && (! _zz_19));
  assign _zz_53 = {6'd0, io_input_cmd_payload_fragment_length};
  assign _zz_54 = (_zz_3 >>> 12);
  assign _zz_55 = (io_input_cmd_payload_fragment_address >>> 12);
  assign _zz_56 = (_zz_13 >>> 12);
  assign _zz_57 = (io_input_cmd_payload_fragment_address >>> 12);
  StreamArbiter exclusiveReadArbiter (
    .io_inputs_0_valid                         (_zz_10                                                         ), //i
    .io_inputs_0_ready                         (exclusiveReadArbiter_io_inputs_0_ready                         ), //o
    .io_inputs_0_payload_last                  (_zz_36                                                         ), //i
    .io_inputs_0_payload_fragment_source       (_zz_37[1:0]                                                    ), //i
    .io_inputs_0_payload_fragment_opcode       (_zz_38                                                         ), //i
    .io_inputs_0_payload_fragment_exclusive    (_zz_39                                                         ), //i
    .io_inputs_0_payload_fragment_address      (_zz_3[31:0]                                                    ), //i
    .io_inputs_0_payload_fragment_length       (_zz_4[5:0]                                                     ), //i
    .io_inputs_0_payload_fragment_context      (_zz_5[2:0]                                                     ), //i
    .io_inputs_1_valid                         (_zz_20                                                         ), //i
    .io_inputs_1_ready                         (exclusiveReadArbiter_io_inputs_1_ready                         ), //o
    .io_inputs_1_payload_last                  (_zz_40                                                         ), //i
    .io_inputs_1_payload_fragment_source       (_zz_41[1:0]                                                    ), //i
    .io_inputs_1_payload_fragment_opcode       (_zz_42                                                         ), //i
    .io_inputs_1_payload_fragment_exclusive    (_zz_43                                                         ), //i
    .io_inputs_1_payload_fragment_address      (_zz_13[31:0]                                                   ), //i
    .io_inputs_1_payload_fragment_length       (_zz_14[5:0]                                                    ), //i
    .io_inputs_1_payload_fragment_context      (_zz_15[2:0]                                                    ), //i
    .io_output_valid                           (exclusiveReadArbiter_io_output_valid                           ), //o
    .io_output_ready                           (cmdArbiter_io_inputs_0_ready                                   ), //i
    .io_output_payload_last                    (exclusiveReadArbiter_io_output_payload_last                    ), //o
    .io_output_payload_fragment_source         (exclusiveReadArbiter_io_output_payload_fragment_source[1:0]    ), //o
    .io_output_payload_fragment_opcode         (exclusiveReadArbiter_io_output_payload_fragment_opcode         ), //o
    .io_output_payload_fragment_exclusive      (exclusiveReadArbiter_io_output_payload_fragment_exclusive      ), //o
    .io_output_payload_fragment_address        (exclusiveReadArbiter_io_output_payload_fragment_address[31:0]  ), //o
    .io_output_payload_fragment_length         (exclusiveReadArbiter_io_output_payload_fragment_length[5:0]    ), //o
    .io_output_payload_fragment_context        (exclusiveReadArbiter_io_output_payload_fragment_context[2:0]   ), //o
    .io_chosen                                 (exclusiveReadArbiter_io_chosen                                 ), //o
    .io_chosenOH                               (exclusiveReadArbiter_io_chosenOH[1:0]                          ), //o
    .CLKOUT0                                   (CLKOUT0                                                        ), //i
    .systemCd_logic_outputReset                (systemCd_logic_outputReset                                     )  //i
  );
  StreamArbiter_1 cmdArbiter (
    .io_inputs_0_valid                         (exclusiveReadArbiter_io_output_valid                           ), //i
    .io_inputs_0_ready                         (cmdArbiter_io_inputs_0_ready                                   ), //o
    .io_inputs_0_payload_last                  (exclusiveReadArbiter_io_output_payload_last                    ), //i
    .io_inputs_0_payload_fragment_source       (exclusiveReadArbiter_io_output_payload_fragment_source[1:0]    ), //i
    .io_inputs_0_payload_fragment_opcode       (exclusiveReadArbiter_io_output_payload_fragment_opcode         ), //i
    .io_inputs_0_payload_fragment_exclusive    (exclusiveReadArbiter_io_output_payload_fragment_exclusive      ), //i
    .io_inputs_0_payload_fragment_address      (exclusiveReadArbiter_io_output_payload_fragment_address[31:0]  ), //i
    .io_inputs_0_payload_fragment_length       (exclusiveReadArbiter_io_output_payload_fragment_length[5:0]    ), //i
    .io_inputs_0_payload_fragment_context      (exclusiveReadArbiter_io_output_payload_fragment_context[2:0]   ), //i
    .io_inputs_1_valid                         (inputCmdHalted_valid                                           ), //i
    .io_inputs_1_ready                         (cmdArbiter_io_inputs_1_ready                                   ), //o
    .io_inputs_1_payload_last                  (inputCmdHalted_payload_last                                    ), //i
    .io_inputs_1_payload_fragment_source       (inputCmdHalted_payload_fragment_source[1:0]                    ), //i
    .io_inputs_1_payload_fragment_opcode       (inputCmdHalted_payload_fragment_opcode                         ), //i
    .io_inputs_1_payload_fragment_exclusive    (inputCmdHalted_payload_fragment_exclusive                      ), //i
    .io_inputs_1_payload_fragment_address      (inputCmdHalted_payload_fragment_address[31:0]                  ), //i
    .io_inputs_1_payload_fragment_length       (inputCmdHalted_payload_fragment_length[5:0]                    ), //i
    .io_inputs_1_payload_fragment_context      (inputCmdHalted_payload_fragment_context[2:0]                   ), //i
    .io_output_valid                           (cmdArbiter_io_output_valid                                     ), //o
    .io_output_ready                           (_zz_44                                                         ), //i
    .io_output_payload_last                    (cmdArbiter_io_output_payload_last                              ), //o
    .io_output_payload_fragment_source         (cmdArbiter_io_output_payload_fragment_source[1:0]              ), //o
    .io_output_payload_fragment_opcode         (cmdArbiter_io_output_payload_fragment_opcode                   ), //o
    .io_output_payload_fragment_exclusive      (cmdArbiter_io_output_payload_fragment_exclusive                ), //o
    .io_output_payload_fragment_address        (cmdArbiter_io_output_payload_fragment_address[31:0]            ), //o
    .io_output_payload_fragment_length         (cmdArbiter_io_output_payload_fragment_length[5:0]              ), //o
    .io_output_payload_fragment_context        (cmdArbiter_io_output_payload_fragment_context[2:0]             ), //o
    .io_chosen                                 (cmdArbiter_io_chosen                                           ), //o
    .io_chosenOH                               (cmdArbiter_io_chosenOH[1:0]                                    ), //o
    .CLKOUT0                                   (CLKOUT0                                                        ), //i
    .systemCd_logic_outputReset                (systemCd_logic_outputReset                                     )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(_zz_2)
      `BmbExclusiveMonitorState_defaultEncoding_IDLE : _zz_2_string = "IDLE       ";
      `BmbExclusiveMonitorState_defaultEncoding_FENCE_START : _zz_2_string = "FENCE_START";
      `BmbExclusiveMonitorState_defaultEncoding_FENCE_BUSY : _zz_2_string = "FENCE_BUSY ";
      `BmbExclusiveMonitorState_defaultEncoding_EMIT : _zz_2_string = "EMIT       ";
      default : _zz_2_string = "???????????";
    endcase
  end
  always @(*) begin
    case(_zz_12)
      `BmbExclusiveMonitorState_defaultEncoding_IDLE : _zz_12_string = "IDLE       ";
      `BmbExclusiveMonitorState_defaultEncoding_FENCE_START : _zz_12_string = "FENCE_START";
      `BmbExclusiveMonitorState_defaultEncoding_FENCE_BUSY : _zz_12_string = "FENCE_BUSY ";
      `BmbExclusiveMonitorState_defaultEncoding_EMIT : _zz_12_string = "EMIT       ";
      default : _zz_12_string = "???????????";
    endcase
  end
  `endif

  always @ (*) begin
    fence_start = 1'b0;
    case(_zz_2)
      `BmbExclusiveMonitorState_defaultEncoding_FENCE_START : begin
        if(_zz_45)begin
          fence_start = 1'b1;
        end
      end
      default : begin
      end
    endcase
    case(_zz_12)
      `BmbExclusiveMonitorState_defaultEncoding_FENCE_START : begin
        if(_zz_46)begin
          fence_start = 1'b1;
        end
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    fence_done = 1'b1;
    if((! _zz_24))begin
      fence_done = 1'b0;
    end
    if((! _zz_28))begin
      fence_done = 1'b0;
    end
    if((! _zz_32))begin
      fence_done = 1'b0;
    end
  end

  always @ (*) begin
    exclusiveWriteCancel = 1'b0;
    if(_zz_47)begin
      exclusiveWriteCancel = 1'b1;
    end
  end

  assign inputAddressLow = io_input_cmd_payload_fragment_address[11 : 0];
  assign inputAddressLowEnd = (inputAddressLow + _zz_53);
  assign _zz_7 = (((_zz_3[11 : 0] <= inputAddressLowEnd) && (inputAddressLow <= _zz_6)) && (_zz_54 == _zz_55));
  assign _zz_8 = (io_input_cmd_payload_fragment_source == 2'b01);
  assign _zz_9 = (_zz_2 != `BmbExclusiveMonitorState_defaultEncoding_IDLE);
  always @ (*) begin
    _zz_10 = 1'b0;
    case(_zz_2)
      `BmbExclusiveMonitorState_defaultEncoding_EMIT : begin
        _zz_10 = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign _zz_17 = (((_zz_13[11 : 0] <= inputAddressLowEnd) && (inputAddressLow <= _zz_16)) && (_zz_56 == _zz_57));
  assign _zz_18 = (io_input_cmd_payload_fragment_source == 2'b10);
  assign _zz_19 = (_zz_12 != `BmbExclusiveMonitorState_defaultEncoding_IDLE);
  always @ (*) begin
    _zz_20 = 1'b0;
    case(_zz_12)
      `BmbExclusiveMonitorState_defaultEncoding_EMIT : begin
        _zz_20 = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign _zz_36 = 1'b1;
  assign _zz_37 = 2'b01;
  assign _zz_38 = 1'b0;
  assign _zz_39 = 1'b1;
  assign _zz_40 = 1'b1;
  assign _zz_41 = 2'b10;
  assign _zz_42 = 1'b0;
  assign _zz_43 = 1'b1;
  assign _zz_33 = (! ({(_zz_18 && _zz_19),(_zz_8 && _zz_9)} != 2'b00));
  assign io_input_cmd_ready = (_zz_34 && _zz_33);
  always @ (*) begin
    inputCmdHalted_valid = (io_input_cmd_valid && _zz_33);
    if(_zz_48)begin
      inputCmdHalted_valid = 1'b0;
    end
  end

  always @ (*) begin
    _zz_34 = inputCmdHalted_ready;
    if(_zz_48)begin
      _zz_34 = 1'b1;
    end
  end

  assign inputCmdHalted_payload_last = io_input_cmd_payload_last;
  assign inputCmdHalted_payload_fragment_source = io_input_cmd_payload_fragment_source;
  assign inputCmdHalted_payload_fragment_opcode = io_input_cmd_payload_fragment_opcode;
  assign inputCmdHalted_payload_fragment_exclusive = io_input_cmd_payload_fragment_exclusive;
  assign inputCmdHalted_payload_fragment_address = io_input_cmd_payload_fragment_address;
  assign inputCmdHalted_payload_fragment_length = io_input_cmd_payload_fragment_length;
  assign inputCmdHalted_payload_fragment_data = io_input_cmd_payload_fragment_data;
  assign inputCmdHalted_payload_fragment_mask = io_input_cmd_payload_fragment_mask;
  assign inputCmdHalted_payload_fragment_context = io_input_cmd_payload_fragment_context;
  assign inputCmdHalted_ready = cmdArbiter_io_inputs_1_ready;
  assign exclusiveSuccess = ({((_zz_11 && _zz_17) && _zz_18),((_zz_1 && _zz_7) && _zz_8)} != 2'b00);
  assign _zz_35 = (! ({((_zz_29[6] != _zz_30[6]) && (_zz_29[5 : 0] == _zz_30[5 : 0])),{((_zz_25[6] != _zz_26[6]) && (_zz_25[5 : 0] == _zz_26[5 : 0])),((_zz_21[6] != _zz_22[6]) && (_zz_21[5 : 0] == _zz_22[5 : 0]))}} != 3'b000));
  assign _zz_44 = (io_output_cmd_ready && _zz_35);
  assign io_output_cmd_valid = (cmdArbiter_io_output_valid && _zz_35);
  assign io_output_cmd_payload_last = cmdArbiter_io_output_payload_last;
  assign io_output_cmd_payload_fragment_source = cmdArbiter_io_output_payload_fragment_source;
  assign io_output_cmd_payload_fragment_opcode = cmdArbiter_io_output_payload_fragment_opcode;
  assign io_output_cmd_payload_fragment_address = cmdArbiter_io_output_payload_fragment_address;
  assign io_output_cmd_payload_fragment_length = cmdArbiter_io_output_payload_fragment_length;
  assign io_output_cmd_payload_fragment_context = {(io_input_cmd_payload_fragment_exclusive && exclusiveSuccess),cmdArbiter_io_output_payload_fragment_context};
  assign io_output_cmd_payload_fragment_data = io_input_cmd_payload_fragment_data;
  always @ (*) begin
    io_output_cmd_payload_fragment_mask = io_input_cmd_payload_fragment_mask;
    if(_zz_47)begin
      io_output_cmd_payload_fragment_mask = 8'h0;
    end
  end

  assign io_input_rsp_valid = io_output_rsp_valid;
  assign io_output_rsp_ready = io_input_rsp_ready;
  assign io_input_rsp_payload_last = io_output_rsp_payload_last;
  assign io_input_rsp_payload_fragment_source = io_output_rsp_payload_fragment_source;
  assign io_input_rsp_payload_fragment_opcode = io_output_rsp_payload_fragment_opcode;
  assign io_input_rsp_payload_fragment_data = io_output_rsp_payload_fragment_data;
  assign io_input_rsp_payload_fragment_context = io_output_rsp_payload_fragment_context[2:0];
  assign io_input_rsp_payload_fragment_exclusive = io_output_rsp_payload_fragment_context[3];
  assign io_input_inv_valid = io_output_inv_valid;
  assign io_output_inv_ready = io_input_inv_ready;
  assign io_input_inv_payload_all = io_output_inv_payload_all;
  assign io_input_inv_payload_address = io_output_inv_payload_address;
  assign io_input_inv_payload_length = io_output_inv_payload_length;
  assign io_input_inv_payload_source = io_output_inv_payload_source;
  assign io_output_ack_valid = io_input_ack_valid;
  assign io_input_ack_ready = io_output_ack_ready;
  assign io_input_sync_valid = io_output_sync_valid;
  assign io_output_sync_ready = io_input_sync_ready;
  assign io_input_sync_payload_source = io_output_sync_payload_source;
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      fence_busy <= 1'b0;
      _zz_1 <= 1'b0;
      _zz_2 <= `BmbExclusiveMonitorState_defaultEncoding_IDLE;
      _zz_11 <= 1'b0;
      _zz_12 <= `BmbExclusiveMonitorState_defaultEncoding_IDLE;
      _zz_21 <= 7'h0;
      _zz_22 <= 7'h0;
      io_output_cmd_payload_first <= 1'b1;
      io_output_rsp_payload_first <= 1'b1;
      _zz_25 <= 7'h0;
      _zz_26 <= 7'h0;
      _zz_29 <= 7'h0;
      _zz_30 <= 7'h0;
    end else begin
      if(fence_done)begin
        fence_busy <= 1'b0;
      end
      if(fence_start)begin
        fence_busy <= 1'b1;
      end
      if(_zz_49)begin
        if(_zz_50)begin
          _zz_1 <= 1'b1;
          _zz_2 <= `BmbExclusiveMonitorState_defaultEncoding_FENCE_START;
        end
      end
      if(((_zz_7 && ((io_input_cmd_valid && io_input_cmd_ready) && io_input_cmd_payload_last)) && (io_input_cmd_payload_fragment_opcode == 1'b1)))begin
        if((! exclusiveWriteCancel))begin
          _zz_1 <= 1'b0;
        end
      end
      case(_zz_2)
        `BmbExclusiveMonitorState_defaultEncoding_FENCE_START : begin
          if(_zz_45)begin
            _zz_2 <= `BmbExclusiveMonitorState_defaultEncoding_FENCE_BUSY;
          end
        end
        `BmbExclusiveMonitorState_defaultEncoding_FENCE_BUSY : begin
          if(fence_done)begin
            _zz_2 <= `BmbExclusiveMonitorState_defaultEncoding_EMIT;
          end
        end
        `BmbExclusiveMonitorState_defaultEncoding_EMIT : begin
          if(exclusiveReadArbiter_io_inputs_0_ready)begin
            _zz_2 <= `BmbExclusiveMonitorState_defaultEncoding_IDLE;
          end
        end
        default : begin
        end
      endcase
      if(_zz_51)begin
        if(_zz_52)begin
          _zz_11 <= 1'b1;
          _zz_12 <= `BmbExclusiveMonitorState_defaultEncoding_FENCE_START;
        end
      end
      if(((_zz_17 && ((io_input_cmd_valid && io_input_cmd_ready) && io_input_cmd_payload_last)) && (io_input_cmd_payload_fragment_opcode == 1'b1)))begin
        if((! exclusiveWriteCancel))begin
          _zz_11 <= 1'b0;
        end
      end
      case(_zz_12)
        `BmbExclusiveMonitorState_defaultEncoding_FENCE_START : begin
          if(_zz_46)begin
            _zz_12 <= `BmbExclusiveMonitorState_defaultEncoding_FENCE_BUSY;
          end
        end
        `BmbExclusiveMonitorState_defaultEncoding_FENCE_BUSY : begin
          if(fence_done)begin
            _zz_12 <= `BmbExclusiveMonitorState_defaultEncoding_EMIT;
          end
        end
        `BmbExclusiveMonitorState_defaultEncoding_EMIT : begin
          if(exclusiveReadArbiter_io_inputs_1_ready)begin
            _zz_12 <= `BmbExclusiveMonitorState_defaultEncoding_IDLE;
          end
        end
        default : begin
        end
      endcase
      if((io_output_cmd_valid && io_output_cmd_ready))begin
        io_output_cmd_payload_first <= io_output_cmd_payload_last;
      end
      if((((io_output_cmd_valid && io_output_cmd_ready) && io_output_cmd_payload_first) && (io_output_cmd_payload_fragment_source == 2'b00)))begin
        _zz_21 <= (_zz_21 + 7'h01);
      end
      if((io_output_rsp_valid && io_output_rsp_ready))begin
        io_output_rsp_payload_first <= io_output_rsp_payload_last;
      end
      if((((io_output_rsp_valid && io_output_rsp_ready) && io_output_rsp_payload_first) && (io_output_rsp_payload_fragment_source == 2'b00)))begin
        _zz_22 <= (_zz_22 + 7'h01);
      end
      if((((io_output_cmd_valid && io_output_cmd_ready) && io_output_cmd_payload_first) && (io_output_cmd_payload_fragment_source == 2'b01)))begin
        _zz_25 <= (_zz_25 + 7'h01);
      end
      if((((io_output_rsp_valid && io_output_rsp_ready) && io_output_rsp_payload_first) && (io_output_rsp_payload_fragment_source == 2'b01)))begin
        _zz_26 <= (_zz_26 + 7'h01);
      end
      if((((io_output_cmd_valid && io_output_cmd_ready) && io_output_cmd_payload_first) && (io_output_cmd_payload_fragment_source == 2'b10)))begin
        _zz_29 <= (_zz_29 + 7'h01);
      end
      if((((io_output_rsp_valid && io_output_rsp_ready) && io_output_rsp_payload_first) && (io_output_rsp_payload_fragment_source == 2'b10)))begin
        _zz_30 <= (_zz_30 + 7'h01);
      end
    end
  end

  always @ (posedge CLKOUT0) begin
    if(_zz_49)begin
      if(_zz_50)begin
        _zz_3 <= io_input_cmd_payload_fragment_address;
        _zz_4 <= io_input_cmd_payload_fragment_length;
        _zz_6 <= inputAddressLowEnd;
        _zz_5 <= io_input_cmd_payload_fragment_context;
      end
    end
    if(_zz_51)begin
      if(_zz_52)begin
        _zz_13 <= io_input_cmd_payload_fragment_address;
        _zz_14 <= io_input_cmd_payload_fragment_length;
        _zz_16 <= inputAddressLowEnd;
        _zz_15 <= io_input_cmd_payload_fragment_context;
      end
    end
    if((_zz_23 == _zz_22))begin
      _zz_24 <= 1'b1;
    end
    if(fence_start)begin
      _zz_23 <= _zz_21;
      _zz_24 <= 1'b0;
    end
    if((_zz_27 == _zz_26))begin
      _zz_28 <= 1'b1;
    end
    if(fence_start)begin
      _zz_27 <= _zz_25;
      _zz_28 <= 1'b0;
    end
    if((_zz_31 == _zz_30))begin
      _zz_32 <= 1'b1;
    end
    if(fence_start)begin
      _zz_31 <= _zz_29;
      _zz_32 <= 1'b0;
    end
  end


endmodule

module BmbInvalidateMonitor (
  input               io_input_cmd_valid,
  output              io_input_cmd_ready,
  input               io_input_cmd_payload_last,
  input      [1:0]    io_input_cmd_payload_fragment_source,
  input      [0:0]    io_input_cmd_payload_fragment_opcode,
  input      [31:0]   io_input_cmd_payload_fragment_address,
  input      [5:0]    io_input_cmd_payload_fragment_length,
  input      [63:0]   io_input_cmd_payload_fragment_data,
  input      [7:0]    io_input_cmd_payload_fragment_mask,
  input      [3:0]    io_input_cmd_payload_fragment_context,
  output              io_input_rsp_valid,
  input               io_input_rsp_ready,
  output              io_input_rsp_payload_last,
  output     [1:0]    io_input_rsp_payload_fragment_source,
  output     [0:0]    io_input_rsp_payload_fragment_opcode,
  output     [63:0]   io_input_rsp_payload_fragment_data,
  output     [3:0]    io_input_rsp_payload_fragment_context,
  output              io_input_inv_valid,
  input               io_input_inv_ready,
  output              io_input_inv_payload_all,
  output     [31:0]   io_input_inv_payload_address,
  output     [5:0]    io_input_inv_payload_length,
  output     [1:0]    io_input_inv_payload_source,
  input               io_input_ack_valid,
  output              io_input_ack_ready,
  output              io_input_sync_valid,
  input               io_input_sync_ready,
  output     [1:0]    io_input_sync_payload_source,
  output              io_output_cmd_valid,
  input               io_output_cmd_ready,
  output              io_output_cmd_payload_last,
  output     [1:0]    io_output_cmd_payload_fragment_source,
  output     [0:0]    io_output_cmd_payload_fragment_opcode,
  output     [31:0]   io_output_cmd_payload_fragment_address,
  output     [5:0]    io_output_cmd_payload_fragment_length,
  output     [63:0]   io_output_cmd_payload_fragment_data,
  output     [7:0]    io_output_cmd_payload_fragment_mask,
  output     [42:0]   io_output_cmd_payload_fragment_context,
  input               io_output_rsp_valid,
  output              io_output_rsp_ready,
  input               io_output_rsp_payload_last,
  input      [1:0]    io_output_rsp_payload_fragment_source,
  input      [0:0]    io_output_rsp_payload_fragment_opcode,
  input      [63:0]   io_output_rsp_payload_fragment_data,
  input      [42:0]   io_output_rsp_payload_fragment_context,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  reg                 _zz_2;
  wire                _zz_3;
  wire                _zz_4;
  wire                io_output_rsp_fork_io_input_ready;
  wire                io_output_rsp_fork_io_outputs_0_valid;
  wire                io_output_rsp_fork_io_outputs_0_payload_last;
  wire       [1:0]    io_output_rsp_fork_io_outputs_0_payload_fragment_source;
  wire       [0:0]    io_output_rsp_fork_io_outputs_0_payload_fragment_opcode;
  wire       [63:0]   io_output_rsp_fork_io_outputs_0_payload_fragment_data;
  wire       [42:0]   io_output_rsp_fork_io_outputs_0_payload_fragment_context;
  wire                io_output_rsp_fork_io_outputs_1_valid;
  wire                io_output_rsp_fork_io_outputs_1_payload_last;
  wire       [1:0]    io_output_rsp_fork_io_outputs_1_payload_fragment_source;
  wire       [0:0]    io_output_rsp_fork_io_outputs_1_payload_fragment_opcode;
  wire       [63:0]   io_output_rsp_fork_io_outputs_1_payload_fragment_data;
  wire       [42:0]   io_output_rsp_fork_io_outputs_1_payload_fragment_context;
  wire                io_output_rsp_fork_io_outputs_2_valid;
  wire                io_output_rsp_fork_io_outputs_2_payload_last;
  wire       [1:0]    io_output_rsp_fork_io_outputs_2_payload_fragment_source;
  wire       [0:0]    io_output_rsp_fork_io_outputs_2_payload_fragment_opcode;
  wire       [63:0]   io_output_rsp_fork_io_outputs_2_payload_fragment_data;
  wire       [42:0]   io_output_rsp_fork_io_outputs_2_payload_fragment_context;
  wire                rspLogic_rspToSyncFiltred_fifo_io_push_ready;
  wire                rspLogic_rspToSyncFiltred_fifo_io_pop_valid;
  wire       [1:0]    rspLogic_rspToSyncFiltred_fifo_io_pop_payload;
  wire       [4:0]    rspLogic_rspToSyncFiltred_fifo_io_occupancy;
  wire       [4:0]    rspLogic_rspToSyncFiltred_fifo_io_availability;
  wire                _zz_5;
  wire                _zz_6;
  wire       [0:0]    _zz_7;
  wire       [3:0]    cmdLogic_cmdContext_context;
  wire       [31:0]   cmdLogic_cmdContext_address;
  wire       [5:0]    cmdLogic_cmdContext_length;
  wire                cmdLogic_cmdContext_write;
  wire       [3:0]    rspLogic_rspContext_context;
  wire       [31:0]   rspLogic_rspContext_address;
  wire       [5:0]    rspLogic_rspContext_length;
  wire                rspLogic_rspContext_write;
  wire       [42:0]   _zz_1;
  reg                 rspLogic_rspToInvFiltred_valid;
  wire                rspLogic_rspToInvFiltred_ready;
  wire                rspLogic_rspToInvFiltred_payload_last;
  wire       [1:0]    rspLogic_rspToInvFiltred_payload_fragment_source;
  wire       [0:0]    rspLogic_rspToInvFiltred_payload_fragment_opcode;
  wire       [63:0]   rspLogic_rspToInvFiltred_payload_fragment_data;
  wire       [42:0]   rspLogic_rspToInvFiltred_payload_fragment_context;
  wire                io_output_rsp_fork_io_outputs_2_translated_valid;
  reg                 io_output_rsp_fork_io_outputs_2_translated_ready;
  wire       [1:0]    io_output_rsp_fork_io_outputs_2_translated_payload;
  reg                 rspLogic_rspToSyncFiltred_valid;
  wire                rspLogic_rspToSyncFiltred_ready;
  wire       [1:0]    rspLogic_rspToSyncFiltred_payload;

  assign _zz_5 = (! rspLogic_rspContext_write);
  assign _zz_6 = (! rspLogic_rspContext_write);
  assign _zz_7 = _zz_1[42 : 42];
  StreamFork io_output_rsp_fork (
    .io_input_valid                           (io_output_rsp_valid                                             ), //i
    .io_input_ready                           (io_output_rsp_fork_io_input_ready                               ), //o
    .io_input_payload_last                    (io_output_rsp_payload_last                                      ), //i
    .io_input_payload_fragment_source         (io_output_rsp_payload_fragment_source[1:0]                      ), //i
    .io_input_payload_fragment_opcode         (io_output_rsp_payload_fragment_opcode                           ), //i
    .io_input_payload_fragment_data           (io_output_rsp_payload_fragment_data[63:0]                       ), //i
    .io_input_payload_fragment_context        (io_output_rsp_payload_fragment_context[42:0]                    ), //i
    .io_outputs_0_valid                       (io_output_rsp_fork_io_outputs_0_valid                           ), //o
    .io_outputs_0_ready                       (io_input_rsp_ready                                              ), //i
    .io_outputs_0_payload_last                (io_output_rsp_fork_io_outputs_0_payload_last                    ), //o
    .io_outputs_0_payload_fragment_source     (io_output_rsp_fork_io_outputs_0_payload_fragment_source[1:0]    ), //o
    .io_outputs_0_payload_fragment_opcode     (io_output_rsp_fork_io_outputs_0_payload_fragment_opcode         ), //o
    .io_outputs_0_payload_fragment_data       (io_output_rsp_fork_io_outputs_0_payload_fragment_data[63:0]     ), //o
    .io_outputs_0_payload_fragment_context    (io_output_rsp_fork_io_outputs_0_payload_fragment_context[42:0]  ), //o
    .io_outputs_1_valid                       (io_output_rsp_fork_io_outputs_1_valid                           ), //o
    .io_outputs_1_ready                       (_zz_2                                                           ), //i
    .io_outputs_1_payload_last                (io_output_rsp_fork_io_outputs_1_payload_last                    ), //o
    .io_outputs_1_payload_fragment_source     (io_output_rsp_fork_io_outputs_1_payload_fragment_source[1:0]    ), //o
    .io_outputs_1_payload_fragment_opcode     (io_output_rsp_fork_io_outputs_1_payload_fragment_opcode         ), //o
    .io_outputs_1_payload_fragment_data       (io_output_rsp_fork_io_outputs_1_payload_fragment_data[63:0]     ), //o
    .io_outputs_1_payload_fragment_context    (io_output_rsp_fork_io_outputs_1_payload_fragment_context[42:0]  ), //o
    .io_outputs_2_valid                       (io_output_rsp_fork_io_outputs_2_valid                           ), //o
    .io_outputs_2_ready                       (io_output_rsp_fork_io_outputs_2_translated_ready                ), //i
    .io_outputs_2_payload_last                (io_output_rsp_fork_io_outputs_2_payload_last                    ), //o
    .io_outputs_2_payload_fragment_source     (io_output_rsp_fork_io_outputs_2_payload_fragment_source[1:0]    ), //o
    .io_outputs_2_payload_fragment_opcode     (io_output_rsp_fork_io_outputs_2_payload_fragment_opcode         ), //o
    .io_outputs_2_payload_fragment_data       (io_output_rsp_fork_io_outputs_2_payload_fragment_data[63:0]     ), //o
    .io_outputs_2_payload_fragment_context    (io_output_rsp_fork_io_outputs_2_payload_fragment_context[42:0]  ), //o
    .CLKOUT0                                  (CLKOUT0                                                         ), //i
    .systemCd_logic_outputReset               (systemCd_logic_outputReset                                      )  //i
  );
  StreamFifo rspLogic_rspToSyncFiltred_fifo (
    .io_push_valid                 (rspLogic_rspToSyncFiltred_valid                      ), //i
    .io_push_ready                 (rspLogic_rspToSyncFiltred_fifo_io_push_ready         ), //o
    .io_push_payload               (rspLogic_rspToSyncFiltred_payload[1:0]               ), //i
    .io_pop_valid                  (rspLogic_rspToSyncFiltred_fifo_io_pop_valid          ), //o
    .io_pop_ready                  (_zz_3                                                ), //i
    .io_pop_payload                (rspLogic_rspToSyncFiltred_fifo_io_pop_payload[1:0]   ), //o
    .io_flush                      (_zz_4                                                ), //i
    .io_occupancy                  (rspLogic_rspToSyncFiltred_fifo_io_occupancy[4:0]     ), //o
    .io_availability               (rspLogic_rspToSyncFiltred_fifo_io_availability[4:0]  ), //o
    .CLKOUT0                       (CLKOUT0                                              ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset                           )  //i
  );
  assign cmdLogic_cmdContext_context = io_input_cmd_payload_fragment_context;
  assign cmdLogic_cmdContext_write = (io_input_cmd_payload_fragment_opcode == 1'b1);
  assign cmdLogic_cmdContext_address = io_input_cmd_payload_fragment_address;
  assign cmdLogic_cmdContext_length = io_input_cmd_payload_fragment_length;
  assign io_output_cmd_valid = io_input_cmd_valid;
  assign io_input_cmd_ready = io_output_cmd_ready;
  assign io_output_cmd_payload_last = io_input_cmd_payload_last;
  assign io_output_cmd_payload_fragment_source = io_input_cmd_payload_fragment_source;
  assign io_output_cmd_payload_fragment_opcode = io_input_cmd_payload_fragment_opcode;
  assign io_output_cmd_payload_fragment_address = io_input_cmd_payload_fragment_address;
  assign io_output_cmd_payload_fragment_length = io_input_cmd_payload_fragment_length;
  assign io_output_cmd_payload_fragment_data = io_input_cmd_payload_fragment_data;
  assign io_output_cmd_payload_fragment_mask = io_input_cmd_payload_fragment_mask;
  assign io_output_cmd_payload_fragment_context = {cmdLogic_cmdContext_write,{cmdLogic_cmdContext_length,{cmdLogic_cmdContext_address,cmdLogic_cmdContext_context}}};
  assign _zz_1 = io_output_rsp_payload_fragment_context;
  assign rspLogic_rspContext_context = _zz_1[3 : 0];
  assign rspLogic_rspContext_address = _zz_1[35 : 4];
  assign rspLogic_rspContext_length = _zz_1[41 : 36];
  assign rspLogic_rspContext_write = _zz_7[0];
  assign io_output_rsp_ready = io_output_rsp_fork_io_input_ready;
  assign io_input_rsp_valid = io_output_rsp_fork_io_outputs_0_valid;
  assign io_input_rsp_payload_last = io_output_rsp_fork_io_outputs_0_payload_last;
  assign io_input_rsp_payload_fragment_source = io_output_rsp_fork_io_outputs_0_payload_fragment_source;
  assign io_input_rsp_payload_fragment_opcode = io_output_rsp_fork_io_outputs_0_payload_fragment_opcode;
  assign io_input_rsp_payload_fragment_data = io_output_rsp_fork_io_outputs_0_payload_fragment_data;
  assign io_input_rsp_payload_fragment_context = rspLogic_rspContext_context;
  always @ (*) begin
    rspLogic_rspToInvFiltred_valid = io_output_rsp_fork_io_outputs_1_valid;
    if(_zz_5)begin
      rspLogic_rspToInvFiltred_valid = 1'b0;
    end
  end

  always @ (*) begin
    _zz_2 = rspLogic_rspToInvFiltred_ready;
    if(_zz_5)begin
      _zz_2 = 1'b1;
    end
  end

  assign rspLogic_rspToInvFiltred_payload_last = io_output_rsp_fork_io_outputs_1_payload_last;
  assign rspLogic_rspToInvFiltred_payload_fragment_source = io_output_rsp_fork_io_outputs_1_payload_fragment_source;
  assign rspLogic_rspToInvFiltred_payload_fragment_opcode = io_output_rsp_fork_io_outputs_1_payload_fragment_opcode;
  assign rspLogic_rspToInvFiltred_payload_fragment_data = io_output_rsp_fork_io_outputs_1_payload_fragment_data;
  assign rspLogic_rspToInvFiltred_payload_fragment_context = io_output_rsp_fork_io_outputs_1_payload_fragment_context;
  assign io_input_inv_valid = rspLogic_rspToInvFiltred_valid;
  assign rspLogic_rspToInvFiltred_ready = io_input_inv_ready;
  assign io_input_inv_payload_address = rspLogic_rspContext_address;
  assign io_input_inv_payload_length = rspLogic_rspContext_length;
  assign io_input_inv_payload_source = rspLogic_rspToInvFiltred_payload_fragment_source;
  assign io_input_inv_payload_all = 1'b0;
  assign io_output_rsp_fork_io_outputs_2_translated_valid = io_output_rsp_fork_io_outputs_2_valid;
  assign io_output_rsp_fork_io_outputs_2_translated_payload = io_output_rsp_fork_io_outputs_1_payload_fragment_source;
  always @ (*) begin
    rspLogic_rspToSyncFiltred_valid = io_output_rsp_fork_io_outputs_2_translated_valid;
    if(_zz_6)begin
      rspLogic_rspToSyncFiltred_valid = 1'b0;
    end
  end

  always @ (*) begin
    io_output_rsp_fork_io_outputs_2_translated_ready = rspLogic_rspToSyncFiltred_ready;
    if(_zz_6)begin
      io_output_rsp_fork_io_outputs_2_translated_ready = 1'b1;
    end
  end

  assign rspLogic_rspToSyncFiltred_payload = io_output_rsp_fork_io_outputs_2_translated_payload;
  assign rspLogic_rspToSyncFiltred_ready = rspLogic_rspToSyncFiltred_fifo_io_push_ready;
  assign _zz_3 = (io_input_ack_valid && io_input_ack_ready);
  assign io_input_sync_valid = io_input_ack_valid;
  assign io_input_ack_ready = io_input_sync_ready;
  assign io_input_sync_payload_source = rspLogic_rspToSyncFiltred_fifo_io_pop_payload;
  assign _zz_4 = 1'b0;

endmodule

module BmbDecoder (
  input               io_input_cmd_valid,
  output reg          io_input_cmd_ready,
  input               io_input_cmd_payload_last,
  input      [0:0]    io_input_cmd_payload_fragment_opcode,
  input      [31:0]   io_input_cmd_payload_fragment_address,
  input      [1:0]    io_input_cmd_payload_fragment_length,
  input      [31:0]   io_input_cmd_payload_fragment_data,
  input      [3:0]    io_input_cmd_payload_fragment_mask,
  output reg          io_input_rsp_valid,
  input               io_input_rsp_ready,
  output reg          io_input_rsp_payload_last,
  output reg [0:0]    io_input_rsp_payload_fragment_opcode,
  output     [31:0]   io_input_rsp_payload_fragment_data,
  output reg          io_outputs_0_cmd_valid,
  input               io_outputs_0_cmd_ready,
  output              io_outputs_0_cmd_payload_last,
  output     [0:0]    io_outputs_0_cmd_payload_fragment_opcode,
  output     [31:0]   io_outputs_0_cmd_payload_fragment_address,
  output     [1:0]    io_outputs_0_cmd_payload_fragment_length,
  output     [31:0]   io_outputs_0_cmd_payload_fragment_data,
  output     [3:0]    io_outputs_0_cmd_payload_fragment_mask,
  input               io_outputs_0_rsp_valid,
  output              io_outputs_0_rsp_ready,
  input               io_outputs_0_rsp_payload_last,
  input      [0:0]    io_outputs_0_rsp_payload_fragment_opcode,
  input      [31:0]   io_outputs_0_rsp_payload_fragment_data,
  output reg          io_outputs_1_cmd_valid,
  input               io_outputs_1_cmd_ready,
  output              io_outputs_1_cmd_payload_last,
  output     [0:0]    io_outputs_1_cmd_payload_fragment_opcode,
  output     [31:0]   io_outputs_1_cmd_payload_fragment_address,
  output     [1:0]    io_outputs_1_cmd_payload_fragment_length,
  output     [31:0]   io_outputs_1_cmd_payload_fragment_data,
  output     [3:0]    io_outputs_1_cmd_payload_fragment_mask,
  input               io_outputs_1_rsp_valid,
  output              io_outputs_1_rsp_ready,
  input               io_outputs_1_rsp_payload_last,
  input      [0:0]    io_outputs_1_rsp_payload_fragment_opcode,
  input      [31:0]   io_outputs_1_rsp_payload_fragment_data,
  input               CLKOUT0,
  input               debugCd_logic_outputReset
);
  reg                 _zz_4;
  reg        [0:0]    _zz_5;
  reg        [31:0]   _zz_6;
  wire       [3:0]    _zz_7;
  wire       [0:0]    _zz_8;
  wire       [3:0]    _zz_9;
  wire       [0:0]    _zz_10;
  wire       [3:0]    _zz_11;
  wire                logic_hits_0;
  wire                logic_hits_1;
  wire                _zz_1;
  wire                _zz_2;
  wire                logic_noHit;
  reg        [3:0]    logic_rspPendingCounter;
  wire                logic_cmdWait;
  reg                 logic_rspHits_0;
  reg                 logic_rspHits_1;
  wire                logic_rspPending;
  wire                logic_rspNoHitValid;
  reg                 logic_rspNoHit_doIt;
  reg                 logic_rspNoHit_singleBeatRsp;
  wire       [0:0]    _zz_3;

  assign _zz_7 = (logic_rspPendingCounter + _zz_9);
  assign _zz_8 = ((io_input_cmd_valid && io_input_cmd_ready) && io_input_cmd_payload_last);
  assign _zz_9 = {3'd0, _zz_8};
  assign _zz_10 = ((io_input_rsp_valid && io_input_rsp_ready) && io_input_rsp_payload_last);
  assign _zz_11 = {3'd0, _zz_10};
  always @(*) begin
    case(_zz_3)
      1'b0 : begin
        _zz_4 = io_outputs_0_rsp_payload_last;
        _zz_5 = io_outputs_0_rsp_payload_fragment_opcode;
        _zz_6 = io_outputs_0_rsp_payload_fragment_data;
      end
      default : begin
        _zz_4 = io_outputs_1_rsp_payload_last;
        _zz_5 = io_outputs_1_rsp_payload_fragment_opcode;
        _zz_6 = io_outputs_1_rsp_payload_fragment_data;
      end
    endcase
  end

  assign logic_hits_0 = ((io_input_cmd_payload_fragment_address & (~ 32'h00000fff)) == 32'h10b80000);
  always @ (*) begin
    io_outputs_0_cmd_valid = (io_input_cmd_valid && logic_hits_0);
    if(logic_cmdWait)begin
      io_outputs_0_cmd_valid = 1'b0;
    end
  end

  assign _zz_1 = io_input_cmd_payload_last;
  assign io_outputs_0_cmd_payload_last = _zz_1;
  assign io_outputs_0_cmd_payload_fragment_opcode = io_input_cmd_payload_fragment_opcode;
  assign io_outputs_0_cmd_payload_fragment_address = io_input_cmd_payload_fragment_address;
  assign io_outputs_0_cmd_payload_fragment_length = io_input_cmd_payload_fragment_length;
  assign io_outputs_0_cmd_payload_fragment_data = io_input_cmd_payload_fragment_data;
  assign io_outputs_0_cmd_payload_fragment_mask = io_input_cmd_payload_fragment_mask;
  assign logic_hits_1 = ((io_input_cmd_payload_fragment_address & (~ 32'h00000fff)) == 32'h10b81000);
  always @ (*) begin
    io_outputs_1_cmd_valid = (io_input_cmd_valid && logic_hits_1);
    if(logic_cmdWait)begin
      io_outputs_1_cmd_valid = 1'b0;
    end
  end

  assign _zz_2 = io_input_cmd_payload_last;
  assign io_outputs_1_cmd_payload_last = _zz_2;
  assign io_outputs_1_cmd_payload_fragment_opcode = io_input_cmd_payload_fragment_opcode;
  assign io_outputs_1_cmd_payload_fragment_address = io_input_cmd_payload_fragment_address;
  assign io_outputs_1_cmd_payload_fragment_length = io_input_cmd_payload_fragment_length;
  assign io_outputs_1_cmd_payload_fragment_data = io_input_cmd_payload_fragment_data;
  assign io_outputs_1_cmd_payload_fragment_mask = io_input_cmd_payload_fragment_mask;
  assign logic_noHit = (! ({logic_hits_1,logic_hits_0} != 2'b00));
  always @ (*) begin
    io_input_cmd_ready = (({(logic_hits_1 && io_outputs_1_cmd_ready),(logic_hits_0 && io_outputs_0_cmd_ready)} != 2'b00) || logic_noHit);
    if(logic_cmdWait)begin
      io_input_cmd_ready = 1'b0;
    end
  end

  assign logic_rspPending = (logic_rspPendingCounter != 4'b0000);
  assign logic_rspNoHitValid = (! ({logic_rspHits_1,logic_rspHits_0} != 2'b00));
  always @ (*) begin
    io_input_rsp_valid = (({io_outputs_1_rsp_valid,io_outputs_0_rsp_valid} != 2'b00) || (logic_rspPending && logic_rspNoHitValid));
    if(logic_rspNoHit_doIt)begin
      io_input_rsp_valid = 1'b1;
    end
  end

  assign _zz_3 = logic_rspHits_1;
  always @ (*) begin
    io_input_rsp_payload_last = _zz_4;
    if(logic_rspNoHit_doIt)begin
      io_input_rsp_payload_last = 1'b1;
    end
  end

  always @ (*) begin
    io_input_rsp_payload_fragment_opcode = _zz_5;
    if(logic_rspNoHit_doIt)begin
      io_input_rsp_payload_fragment_opcode = 1'b1;
    end
  end

  assign io_input_rsp_payload_fragment_data = _zz_6;
  assign io_outputs_0_rsp_ready = io_input_rsp_ready;
  assign io_outputs_1_rsp_ready = io_input_rsp_ready;
  assign logic_cmdWait = ((logic_rspPending && (((logic_hits_0 != logic_rspHits_0) || (logic_hits_1 != logic_rspHits_1)) || logic_rspNoHitValid)) || (logic_rspPendingCounter == 4'b1111));
  always @ (posedge CLKOUT0) begin
    if(debugCd_logic_outputReset) begin
      logic_rspPendingCounter <= 4'b0000;
      logic_rspNoHit_doIt <= 1'b0;
    end else begin
      logic_rspPendingCounter <= (_zz_7 - _zz_11);
      if(((io_input_rsp_valid && io_input_rsp_ready) && io_input_rsp_payload_last))begin
        logic_rspNoHit_doIt <= 1'b0;
      end
      if((((io_input_cmd_valid && io_input_cmd_ready) && logic_noHit) && io_input_cmd_payload_last))begin
        logic_rspNoHit_doIt <= 1'b1;
      end
    end
  end

  always @ (posedge CLKOUT0) begin
    if((io_input_cmd_valid && (! logic_cmdWait)))begin
      logic_rspHits_0 <= logic_hits_0;
      logic_rspHits_1 <= logic_hits_1;
    end
    if((io_input_cmd_valid && io_input_cmd_ready))begin
      logic_rspNoHit_singleBeatRsp <= (io_input_cmd_payload_fragment_opcode == 1'b1);
    end
  end


endmodule

module BufferCC_32 (
  input               io_dataIn,
  output              io_dataOut,
  input               CLKOUT1,
  input               system_cores_1_debugReset
);
  reg                 buffers_0;
  reg                 buffers_1;

  assign io_dataOut = buffers_1;
  always @ (posedge CLKOUT1 or posedge system_cores_1_debugReset) begin
    if (system_cores_1_debugReset) begin
      buffers_0 <= 1'b1;
      buffers_1 <= 1'b1;
    end else begin
      buffers_0 <= io_dataIn;
      buffers_1 <= buffers_0;
    end
  end


endmodule

module BufferCC_31 (
  input               io_dataIn,
  output              io_dataOut,
  input               CLKOUT1,
  input               system_cores_0_debugReset
);
  reg                 buffers_0;
  reg                 buffers_1;

  assign io_dataOut = buffers_1;
  always @ (posedge CLKOUT1 or posedge system_cores_0_debugReset) begin
    if (system_cores_0_debugReset) begin
      buffers_0 <= 1'b1;
      buffers_1 <= 1'b1;
    end else begin
      buffers_0 <= io_dataIn;
      buffers_1 <= buffers_0;
    end
  end


endmodule

//StreamFifoLowLatency_3 replaced by StreamFifoLowLatency_3

module VexRiscv_1 (
  output              dBus_cmd_valid,
  input               dBus_cmd_ready,
  output              dBus_cmd_payload_wr,
  output              dBus_cmd_payload_uncached,
  output     [31:0]   dBus_cmd_payload_address,
  output     [31:0]   dBus_cmd_payload_data,
  output     [3:0]    dBus_cmd_payload_mask,
  output     [3:0]    dBus_cmd_payload_length,
  output              dBus_cmd_payload_exclusive,
  output              dBus_cmd_payload_last,
  input               dBus_rsp_valid,
  input      [2:0]    dBus_rsp_payload_aggregated,
  input               dBus_rsp_payload_last,
  input      [63:0]   dBus_rsp_payload_data,
  input               dBus_rsp_payload_error,
  input               dBus_rsp_payload_exclusive,
  input               dBus_inv_valid,
  output              dBus_inv_ready,
  input               dBus_inv_payload_last,
  input               dBus_inv_payload_fragment_enable,
  input      [31:0]   dBus_inv_payload_fragment_address,
  output              dBus_ack_valid,
  input               dBus_ack_ready,
  output              dBus_ack_payload_last,
  output              dBus_ack_payload_fragment_hit,
  input               dBus_sync_valid,
  output              dBus_sync_ready,
  input      [2:0]    dBus_sync_payload_aggregated,
  input               timerInterrupt,
  input               externalInterrupt,
  input               softwareInterrupt,
  input               externalInterruptS,
  input      [63:0]   utime,
  input               debug_bus_cmd_valid,
  output reg          debug_bus_cmd_ready,
  input               debug_bus_cmd_payload_wr,
  input      [7:0]    debug_bus_cmd_payload_address,
  input      [31:0]   debug_bus_cmd_payload_data,
  output reg [31:0]   debug_bus_rsp_data,
  output              debug_resetOut,
  output              iBus_cmd_valid,
  input               iBus_cmd_ready,
  output reg [31:0]   iBus_cmd_payload_address,
  output     [2:0]    iBus_cmd_payload_size,
  input               iBus_rsp_valid,
  input      [63:0]   iBus_rsp_payload_data,
  input               iBus_rsp_payload_error,
  input               CLKOUT0,
  input               systemCd_logic_outputReset,
  input               debugCd_logic_outputReset
);
  wire                _zz_172;
  wire                _zz_173;
  wire                _zz_174;
  wire                _zz_175;
  wire                _zz_176;
  wire                _zz_177;
  wire                _zz_178;
  wire                _zz_179;
  reg                 _zz_180;
  reg                 _zz_181;
  reg        [31:0]   _zz_182;
  reg                 _zz_183;
  reg        [31:0]   _zz_184;
  reg        [1:0]    _zz_185;
  reg                 _zz_186;
  reg                 _zz_187;
  wire                _zz_188;
  wire       [2:0]    _zz_189;
  reg                 _zz_190;
  reg                 _zz_191;
  reg                 _zz_192;
  wire                _zz_193;
  wire       [31:0]   _zz_194;
  reg                 _zz_195;
  reg                 _zz_196;
  reg                 _zz_197;
  reg                 _zz_198;
  reg                 _zz_199;
  reg                 _zz_200;
  reg                 _zz_201;
  reg                 _zz_202;
  wire       [3:0]    _zz_203;
  wire                _zz_204;
  wire                _zz_205;
  wire       [31:0]   _zz_206;
  wire       [31:0]   _zz_207;
  reg        [31:0]   _zz_208;
  reg                 _zz_209;
  reg                 _zz_210;
  reg                 _zz_211;
  reg        [9:0]    _zz_212;
  reg        [9:0]    _zz_213;
  reg        [9:0]    _zz_214;
  reg        [9:0]    _zz_215;
  reg                 _zz_216;
  reg                 _zz_217;
  reg                 _zz_218;
  reg                 _zz_219;
  reg                 _zz_220;
  reg                 _zz_221;
  reg                 _zz_222;
  reg        [9:0]    _zz_223;
  reg        [9:0]    _zz_224;
  reg        [9:0]    _zz_225;
  reg        [9:0]    _zz_226;
  reg                 _zz_227;
  reg                 _zz_228;
  reg                 _zz_229;
  reg                 _zz_230;
  reg        [31:0]   _zz_231;
  reg        [7:0]    _zz_232;
  reg        [1:0]    _zz_233;
  reg        [1:0]    _zz_234;
  reg        [1:0]    _zz_235;
  reg        [1:0]    _zz_236;
  reg        [7:0]    _zz_237;
  reg        [7:0]    _zz_238;
  reg        [7:0]    _zz_239;
  reg        [7:0]    _zz_240;
  wire                IBusCachedPlugin_cache_io_cpu_prefetch_haltIt;
  wire       [31:0]   IBusCachedPlugin_cache_io_cpu_fetch_data;
  wire       [31:0]   IBusCachedPlugin_cache_io_cpu_fetch_physicalAddress;
  wire                IBusCachedPlugin_cache_io_cpu_decode_error;
  wire                IBusCachedPlugin_cache_io_cpu_decode_mmuRefilling;
  wire                IBusCachedPlugin_cache_io_cpu_decode_mmuException;
  wire       [31:0]   IBusCachedPlugin_cache_io_cpu_decode_data;
  wire                IBusCachedPlugin_cache_io_cpu_decode_cacheMiss;
  wire       [31:0]   IBusCachedPlugin_cache_io_cpu_decode_physicalAddress;
  wire                IBusCachedPlugin_cache_io_mem_cmd_valid;
  wire       [31:0]   IBusCachedPlugin_cache_io_mem_cmd_payload_address;
  wire       [2:0]    IBusCachedPlugin_cache_io_mem_cmd_payload_size;
  wire                dataCache_2_io_cpu_execute_haltIt;
  wire                dataCache_2_io_cpu_execute_refilling;
  wire                dataCache_2_io_cpu_memory_isWrite;
  wire                dataCache_2_io_cpu_writeBack_haltIt;
  wire       [31:0]   dataCache_2_io_cpu_writeBack_data;
  wire                dataCache_2_io_cpu_writeBack_mmuException;
  wire                dataCache_2_io_cpu_writeBack_unalignedAccess;
  wire                dataCache_2_io_cpu_writeBack_accessError;
  wire                dataCache_2_io_cpu_writeBack_isWrite;
  wire                dataCache_2_io_cpu_writeBack_keepMemRspData;
  wire                dataCache_2_io_cpu_flush_ready;
  wire                dataCache_2_io_cpu_redo;
  wire                dataCache_2_io_mem_cmd_valid;
  wire                dataCache_2_io_mem_cmd_payload_wr;
  wire                dataCache_2_io_mem_cmd_payload_uncached;
  wire       [31:0]   dataCache_2_io_mem_cmd_payload_address;
  wire       [31:0]   dataCache_2_io_mem_cmd_payload_data;
  wire       [3:0]    dataCache_2_io_mem_cmd_payload_mask;
  wire       [3:0]    dataCache_2_io_mem_cmd_payload_length;
  wire                dataCache_2_io_mem_cmd_payload_exclusive;
  wire                dataCache_2_io_mem_cmd_payload_last;
  wire                dataCache_2_io_mem_inv_ready;
  wire                dataCache_2_io_mem_ack_valid;
  wire                dataCache_2_io_mem_ack_payload_last;
  wire                dataCache_2_io_mem_ack_payload_fragment_hit;
  wire                dataCache_2_io_mem_sync_ready;
  wire                _zz_241;
  wire                _zz_242;
  wire                _zz_243;
  wire                _zz_244;
  wire                _zz_245;
  wire                _zz_246;
  wire                _zz_247;
  wire                _zz_248;
  wire                _zz_249;
  wire                _zz_250;
  wire                _zz_251;
  wire                _zz_252;
  wire                _zz_253;
  wire                _zz_254;
  wire                _zz_255;
  wire                _zz_256;
  wire                _zz_257;
  wire       [1:0]    _zz_258;
  wire                _zz_259;
  wire                _zz_260;
  wire                _zz_261;
  wire                _zz_262;
  wire                _zz_263;
  wire                _zz_264;
  wire                _zz_265;
  wire                _zz_266;
  wire                _zz_267;
  wire                _zz_268;
  wire                _zz_269;
  wire                _zz_270;
  wire                _zz_271;
  wire       [1:0]    _zz_272;
  wire                _zz_273;
  wire                _zz_274;
  wire                _zz_275;
  wire                _zz_276;
  wire                _zz_277;
  wire       [5:0]    _zz_278;
  wire                _zz_279;
  wire                _zz_280;
  wire                _zz_281;
  wire                _zz_282;
  wire                _zz_283;
  wire                _zz_284;
  wire                _zz_285;
  wire                _zz_286;
  wire                _zz_287;
  wire                _zz_288;
  wire                _zz_289;
  wire                _zz_290;
  wire                _zz_291;
  wire                _zz_292;
  wire                _zz_293;
  wire                _zz_294;
  wire                _zz_295;
  wire                _zz_296;
  wire                _zz_297;
  wire                _zz_298;
  wire                _zz_299;
  wire       [1:0]    _zz_300;
  wire       [1:0]    _zz_301;
  wire                _zz_302;
  wire       [51:0]   _zz_303;
  wire       [51:0]   _zz_304;
  wire       [51:0]   _zz_305;
  wire       [32:0]   _zz_306;
  wire       [51:0]   _zz_307;
  wire       [49:0]   _zz_308;
  wire       [51:0]   _zz_309;
  wire       [49:0]   _zz_310;
  wire       [51:0]   _zz_311;
  wire       [0:0]    _zz_312;
  wire       [0:0]    _zz_313;
  wire       [0:0]    _zz_314;
  wire       [0:0]    _zz_315;
  wire       [0:0]    _zz_316;
  wire       [0:0]    _zz_317;
  wire       [0:0]    _zz_318;
  wire       [0:0]    _zz_319;
  wire       [0:0]    _zz_320;
  wire       [0:0]    _zz_321;
  wire       [0:0]    _zz_322;
  wire       [0:0]    _zz_323;
  wire       [0:0]    _zz_324;
  wire       [0:0]    _zz_325;
  wire       [0:0]    _zz_326;
  wire       [0:0]    _zz_327;
  wire       [32:0]   _zz_328;
  wire       [31:0]   _zz_329;
  wire       [32:0]   _zz_330;
  wire       [0:0]    _zz_331;
  wire       [0:0]    _zz_332;
  wire       [0:0]    _zz_333;
  wire       [0:0]    _zz_334;
  wire       [0:0]    _zz_335;
  wire       [0:0]    _zz_336;
  wire       [0:0]    _zz_337;
  wire       [0:0]    _zz_338;
  wire       [1:0]    _zz_339;
  wire       [0:0]    _zz_340;
  wire       [1:0]    _zz_341;
  wire       [0:0]    _zz_342;
  wire       [0:0]    _zz_343;
  wire       [0:0]    _zz_344;
  wire       [0:0]    _zz_345;
  wire       [0:0]    _zz_346;
  wire       [0:0]    _zz_347;
  wire       [0:0]    _zz_348;
  wire       [0:0]    _zz_349;
  wire       [1:0]    _zz_350;
  wire       [3:0]    _zz_351;
  wire       [2:0]    _zz_352;
  wire       [31:0]   _zz_353;
  wire       [0:0]    _zz_354;
  wire       [0:0]    _zz_355;
  wire       [0:0]    _zz_356;
  wire       [0:0]    _zz_357;
  wire       [0:0]    _zz_358;
  wire       [0:0]    _zz_359;
  wire       [0:0]    _zz_360;
  wire       [0:0]    _zz_361;
  wire       [2:0]    _zz_362;
  wire       [2:0]    _zz_363;
  wire       [0:0]    _zz_364;
  wire       [2:0]    _zz_365;
  wire       [4:0]    _zz_366;
  wire       [11:0]   _zz_367;
  wire       [11:0]   _zz_368;
  wire       [31:0]   _zz_369;
  wire       [31:0]   _zz_370;
  wire       [31:0]   _zz_371;
  wire       [31:0]   _zz_372;
  wire       [31:0]   _zz_373;
  wire       [31:0]   _zz_374;
  wire       [31:0]   _zz_375;
  wire       [65:0]   _zz_376;
  wire       [65:0]   _zz_377;
  wire       [31:0]   _zz_378;
  wire       [31:0]   _zz_379;
  wire       [0:0]    _zz_380;
  wire       [5:0]    _zz_381;
  wire       [32:0]   _zz_382;
  wire       [31:0]   _zz_383;
  wire       [31:0]   _zz_384;
  wire       [32:0]   _zz_385;
  wire       [32:0]   _zz_386;
  wire       [32:0]   _zz_387;
  wire       [32:0]   _zz_388;
  wire       [0:0]    _zz_389;
  wire       [32:0]   _zz_390;
  wire       [0:0]    _zz_391;
  wire       [32:0]   _zz_392;
  wire       [0:0]    _zz_393;
  wire       [31:0]   _zz_394;
  wire       [1:0]    _zz_395;
  wire       [1:0]    _zz_396;
  wire       [19:0]   _zz_397;
  wire       [11:0]   _zz_398;
  wire       [11:0]   _zz_399;
  wire       [0:0]    _zz_400;
  wire       [0:0]    _zz_401;
  wire       [0:0]    _zz_402;
  wire       [0:0]    _zz_403;
  wire       [0:0]    _zz_404;
  wire       [0:0]    _zz_405;
  wire       [0:0]    _zz_406;
  wire       [0:0]    _zz_407;
  wire       [0:0]    _zz_408;
  wire       [0:0]    _zz_409;
  wire       [0:0]    _zz_410;
  wire       [0:0]    _zz_411;
  wire       [0:0]    _zz_412;
  wire       [0:0]    _zz_413;
  wire       [0:0]    _zz_414;
  wire       [0:0]    _zz_415;
  wire       [0:0]    _zz_416;
  wire       [0:0]    _zz_417;
  wire       [0:0]    _zz_418;
  wire       [0:0]    _zz_419;
  wire       [0:0]    _zz_420;
  wire       [0:0]    _zz_421;
  wire       [0:0]    _zz_422;
  wire       [0:0]    _zz_423;
  wire       [0:0]    _zz_424;
  wire       [0:0]    _zz_425;
  wire       [0:0]    _zz_426;
  wire       [0:0]    _zz_427;
  wire       [0:0]    _zz_428;
  wire       [0:0]    _zz_429;
  wire       [0:0]    _zz_430;
  wire       [0:0]    _zz_431;
  wire       [0:0]    _zz_432;
  wire       [0:0]    _zz_433;
  wire       [0:0]    _zz_434;
  wire       [0:0]    _zz_435;
  wire       [0:0]    _zz_436;
  wire       [0:0]    _zz_437;
  wire       [0:0]    _zz_438;
  wire       [0:0]    _zz_439;
  wire       [0:0]    _zz_440;
  wire       [0:0]    _zz_441;
  wire       [0:0]    _zz_442;
  wire       [0:0]    _zz_443;
  wire       [0:0]    _zz_444;
  wire       [1:0]    _zz_445;
  wire       [31:0]   _zz_446;
  wire       [31:0]   _zz_447;
  wire       [31:0]   _zz_448;
  wire                _zz_449;
  wire       [0:0]    _zz_450;
  wire       [18:0]   _zz_451;
  wire       [31:0]   _zz_452;
  wire       [31:0]   _zz_453;
  wire       [31:0]   _zz_454;
  wire                _zz_455;
  wire       [0:0]    _zz_456;
  wire       [12:0]   _zz_457;
  wire       [31:0]   _zz_458;
  wire       [31:0]   _zz_459;
  wire       [31:0]   _zz_460;
  wire                _zz_461;
  wire       [0:0]    _zz_462;
  wire       [6:0]    _zz_463;
  wire       [31:0]   _zz_464;
  wire       [31:0]   _zz_465;
  wire       [31:0]   _zz_466;
  wire                _zz_467;
  wire       [0:0]    _zz_468;
  wire       [0:0]    _zz_469;
  wire       [31:0]   _zz_470;
  wire       [0:0]    _zz_471;
  wire       [0:0]    _zz_472;
  wire       [0:0]    _zz_473;
  wire       [0:0]    _zz_474;
  wire                _zz_475;
  wire       [0:0]    _zz_476;
  wire       [31:0]   _zz_477;
  wire       [31:0]   _zz_478;
  wire       [31:0]   _zz_479;
  wire       [31:0]   _zz_480;
  wire       [31:0]   _zz_481;
  wire       [31:0]   _zz_482;
  wire       [31:0]   _zz_483;
  wire       [0:0]    _zz_484;
  wire       [0:0]    _zz_485;
  wire       [0:0]    _zz_486;
  wire       [0:0]    _zz_487;
  wire                _zz_488;
  wire       [0:0]    _zz_489;
  wire       [27:0]   _zz_490;
  wire       [31:0]   _zz_491;
  wire       [31:0]   _zz_492;
  wire                _zz_493;
  wire       [1:0]    _zz_494;
  wire       [1:0]    _zz_495;
  wire                _zz_496;
  wire       [0:0]    _zz_497;
  wire       [23:0]   _zz_498;
  wire       [31:0]   _zz_499;
  wire       [31:0]   _zz_500;
  wire       [31:0]   _zz_501;
  wire       [31:0]   _zz_502;
  wire                _zz_503;
  wire       [0:0]    _zz_504;
  wire       [0:0]    _zz_505;
  wire                _zz_506;
  wire       [0:0]    _zz_507;
  wire       [0:0]    _zz_508;
  wire                _zz_509;
  wire       [0:0]    _zz_510;
  wire       [20:0]   _zz_511;
  wire       [31:0]   _zz_512;
  wire       [31:0]   _zz_513;
  wire       [31:0]   _zz_514;
  wire                _zz_515;
  wire                _zz_516;
  wire                _zz_517;
  wire       [0:0]    _zz_518;
  wire       [0:0]    _zz_519;
  wire                _zz_520;
  wire       [0:0]    _zz_521;
  wire       [17:0]   _zz_522;
  wire       [31:0]   _zz_523;
  wire       [31:0]   _zz_524;
  wire       [31:0]   _zz_525;
  wire       [0:0]    _zz_526;
  wire       [3:0]    _zz_527;
  wire       [0:0]    _zz_528;
  wire       [0:0]    _zz_529;
  wire                _zz_530;
  wire       [0:0]    _zz_531;
  wire       [14:0]   _zz_532;
  wire       [31:0]   _zz_533;
  wire       [31:0]   _zz_534;
  wire                _zz_535;
  wire       [0:0]    _zz_536;
  wire       [0:0]    _zz_537;
  wire       [31:0]   _zz_538;
  wire       [31:0]   _zz_539;
  wire       [31:0]   _zz_540;
  wire       [0:0]    _zz_541;
  wire       [4:0]    _zz_542;
  wire       [2:0]    _zz_543;
  wire       [2:0]    _zz_544;
  wire                _zz_545;
  wire       [0:0]    _zz_546;
  wire       [11:0]   _zz_547;
  wire       [31:0]   _zz_548;
  wire       [31:0]   _zz_549;
  wire       [31:0]   _zz_550;
  wire       [31:0]   _zz_551;
  wire       [31:0]   _zz_552;
  wire       [31:0]   _zz_553;
  wire       [31:0]   _zz_554;
  wire                _zz_555;
  wire       [0:0]    _zz_556;
  wire       [2:0]    _zz_557;
  wire                _zz_558;
  wire       [0:0]    _zz_559;
  wire       [0:0]    _zz_560;
  wire       [0:0]    _zz_561;
  wire       [3:0]    _zz_562;
  wire       [2:0]    _zz_563;
  wire       [2:0]    _zz_564;
  wire                _zz_565;
  wire       [0:0]    _zz_566;
  wire       [9:0]    _zz_567;
  wire       [31:0]   _zz_568;
  wire       [31:0]   _zz_569;
  wire       [31:0]   _zz_570;
  wire                _zz_571;
  wire       [0:0]    _zz_572;
  wire       [0:0]    _zz_573;
  wire       [31:0]   _zz_574;
  wire       [31:0]   _zz_575;
  wire       [31:0]   _zz_576;
  wire       [31:0]   _zz_577;
  wire       [31:0]   _zz_578;
  wire       [31:0]   _zz_579;
  wire       [31:0]   _zz_580;
  wire                _zz_581;
  wire       [0:0]    _zz_582;
  wire       [1:0]    _zz_583;
  wire       [0:0]    _zz_584;
  wire       [0:0]    _zz_585;
  wire       [0:0]    _zz_586;
  wire       [5:0]    _zz_587;
  wire       [1:0]    _zz_588;
  wire       [1:0]    _zz_589;
  wire                _zz_590;
  wire       [0:0]    _zz_591;
  wire       [7:0]    _zz_592;
  wire       [31:0]   _zz_593;
  wire       [31:0]   _zz_594;
  wire       [31:0]   _zz_595;
  wire       [31:0]   _zz_596;
  wire       [31:0]   _zz_597;
  wire       [31:0]   _zz_598;
  wire                _zz_599;
  wire       [31:0]   _zz_600;
  wire       [31:0]   _zz_601;
  wire                _zz_602;
  wire       [0:0]    _zz_603;
  wire       [3:0]    _zz_604;
  wire                _zz_605;
  wire       [0:0]    _zz_606;
  wire       [0:0]    _zz_607;
  wire       [0:0]    _zz_608;
  wire       [0:0]    _zz_609;
  wire                _zz_610;
  wire       [0:0]    _zz_611;
  wire       [5:0]    _zz_612;
  wire       [31:0]   _zz_613;
  wire       [31:0]   _zz_614;
  wire       [31:0]   _zz_615;
  wire       [31:0]   _zz_616;
  wire                _zz_617;
  wire       [0:0]    _zz_618;
  wire       [1:0]    _zz_619;
  wire       [31:0]   _zz_620;
  wire       [31:0]   _zz_621;
  wire       [31:0]   _zz_622;
  wire       [31:0]   _zz_623;
  wire       [31:0]   _zz_624;
  wire                _zz_625;
  wire       [4:0]    _zz_626;
  wire       [4:0]    _zz_627;
  wire                _zz_628;
  wire       [0:0]    _zz_629;
  wire       [3:0]    _zz_630;
  wire       [31:0]   _zz_631;
  wire       [31:0]   _zz_632;
  wire       [31:0]   _zz_633;
  wire                _zz_634;
  wire       [31:0]   _zz_635;
  wire                _zz_636;
  wire       [0:0]    _zz_637;
  wire       [2:0]    _zz_638;
  wire       [0:0]    _zz_639;
  wire       [0:0]    _zz_640;
  wire       [2:0]    _zz_641;
  wire       [2:0]    _zz_642;
  wire                _zz_643;
  wire       [0:0]    _zz_644;
  wire       [1:0]    _zz_645;
  wire       [31:0]   _zz_646;
  wire       [31:0]   _zz_647;
  wire       [31:0]   _zz_648;
  wire       [31:0]   _zz_649;
  wire                _zz_650;
  wire       [0:0]    _zz_651;
  wire       [0:0]    _zz_652;
  wire       [31:0]   _zz_653;
  wire       [31:0]   _zz_654;
  wire                _zz_655;
  wire       [0:0]    _zz_656;
  wire       [0:0]    _zz_657;
  wire       [0:0]    _zz_658;
  wire       [1:0]    _zz_659;
  wire       [1:0]    _zz_660;
  wire       [1:0]    _zz_661;
  wire                _zz_662;
  wire                _zz_663;
  wire       [31:0]   _zz_664;
  wire       [31:0]   _zz_665;
  wire       [31:0]   _zz_666;
  wire       [31:0]   _zz_667;
  wire       [31:0]   _zz_668;
  wire       [31:0]   _zz_669;
  wire       [31:0]   _zz_670;
  wire       [31:0]   _zz_671;
  wire                _zz_672;
  wire                _zz_673;
  wire                _zz_674;
  wire                _zz_675;
  wire       [31:0]   _zz_676;
  wire       [31:0]   _zz_677;
  wire       [31:0]   _zz_678;
  wire       [31:0]   memory_CALC;
  wire       [51:0]   memory_MUL_LOW;
  wire       [31:0]   execute_BRANCH_CALC;
  wire                execute_BRANCH_DO;
  wire       [33:0]   memory_MUL_HH;
  wire       [33:0]   execute_MUL_HH;
  wire       [33:0]   execute_MUL_HL;
  wire       [33:0]   execute_MUL_LH;
  wire       [31:0]   execute_MUL_LL;
  wire       [31:0]   memory_REGFILE_WRITE_DATA;
  wire       [31:0]   execute_REGFILE_WRITE_DATA;
  wire       [31:0]   execute_MEMORY_VIRTUAL_ADDRESS;
  wire       [1:0]    memory_MEMORY_ADDRESS_LOW;
  wire       [1:0]    execute_MEMORY_ADDRESS_LOW;
  wire                decode_DO_EBREAK;
  wire                decode_CSR_READ_OPCODE;
  wire                decode_CSR_WRITE_OPCODE;
  wire       [31:0]   decode_SRC2;
  wire       [31:0]   decode_SRC1;
  wire                decode_SRC2_FORCE_ZERO;
  wire                memory_IS_AES;
  wire                execute_IS_AES;
  wire                decode_IS_AES;
  wire       `BranchCtrlEnum_defaultEncoding_type decode_BRANCH_CTRL;
  wire       `BranchCtrlEnum_defaultEncoding_type _zz_1;
  wire       `BranchCtrlEnum_defaultEncoding_type _zz_2;
  wire       `BranchCtrlEnum_defaultEncoding_type _zz_3;
  wire       `EnvCtrlEnum_1_defaultEncoding_type _zz_4;
  wire       `EnvCtrlEnum_1_defaultEncoding_type _zz_5;
  wire       `EnvCtrlEnum_1_defaultEncoding_type _zz_6;
  wire       `EnvCtrlEnum_1_defaultEncoding_type _zz_7;
  wire       `EnvCtrlEnum_1_defaultEncoding_type decode_ENV_CTRL;
  wire       `EnvCtrlEnum_1_defaultEncoding_type _zz_8;
  wire       `EnvCtrlEnum_1_defaultEncoding_type _zz_9;
  wire       `EnvCtrlEnum_1_defaultEncoding_type _zz_10;
  wire                decode_IS_CSR;
  wire                decode_IS_RS2_SIGNED;
  wire                decode_IS_RS1_SIGNED;
  wire                decode_IS_DIV;
  wire                memory_IS_MUL;
  wire                execute_IS_MUL;
  wire                decode_IS_MUL;
  wire       `ShiftCtrlEnum_1_defaultEncoding_type decode_SHIFT_CTRL;
  wire       `ShiftCtrlEnum_1_defaultEncoding_type _zz_11;
  wire       `ShiftCtrlEnum_1_defaultEncoding_type _zz_12;
  wire       `ShiftCtrlEnum_1_defaultEncoding_type _zz_13;
  wire       `AluBitwiseCtrlEnum_defaultEncoding_type decode_ALU_BITWISE_CTRL;
  wire       `AluBitwiseCtrlEnum_defaultEncoding_type _zz_14;
  wire       `AluBitwiseCtrlEnum_defaultEncoding_type _zz_15;
  wire       `AluBitwiseCtrlEnum_defaultEncoding_type _zz_16;
  wire                decode_SRC_LESS_UNSIGNED;
  wire                memory_MEMORY_FENCE;
  wire                execute_MEMORY_FENCE;
  wire                decode_MEMORY_FENCE;
  wire                decode_MEMORY_MANAGMENT;
  wire                memory_MEMORY_AMO;
  wire                memory_MEMORY_LRSC;
  wire                memory_MEMORY_WR;
  wire                decode_MEMORY_WR;
  wire                execute_BYPASSABLE_MEMORY_STAGE;
  wire                decode_BYPASSABLE_MEMORY_STAGE;
  wire                decode_BYPASSABLE_EXECUTE_STAGE;
  wire       `AluCtrlEnum_defaultEncoding_type decode_ALU_CTRL;
  wire       `AluCtrlEnum_defaultEncoding_type _zz_17;
  wire       `AluCtrlEnum_defaultEncoding_type _zz_18;
  wire       `AluCtrlEnum_defaultEncoding_type _zz_19;
  wire                memory_IS_SFENCE_VMA;
  wire                execute_IS_SFENCE_VMA;
  wire                decode_IS_SFENCE_VMA;
  wire                decode_MEMORY_FORCE_CONSTISTENCY;
  wire       [31:0]   writeBack_FORMAL_PC_NEXT;
  wire       [31:0]   memory_FORMAL_PC_NEXT;
  wire       [31:0]   execute_FORMAL_PC_NEXT;
  wire       [31:0]   decode_FORMAL_PC_NEXT;
  wire       [31:0]   memory_PC;
  wire                execute_DO_EBREAK;
  wire                decode_IS_EBREAK;
  wire       [31:0]   writeBack_CALC;
  wire                writeBack_IS_AES;
  wire       [31:0]   memory_RS1;
  wire       [31:0]   memory_BRANCH_CALC;
  wire                memory_BRANCH_DO;
  wire       [31:0]   execute_PC;
  wire       `BranchCtrlEnum_defaultEncoding_type execute_BRANCH_CTRL;
  wire       `BranchCtrlEnum_defaultEncoding_type _zz_20;
  wire                execute_CSR_READ_OPCODE;
  wire                execute_CSR_WRITE_OPCODE;
  wire                execute_IS_CSR;
  wire       `EnvCtrlEnum_1_defaultEncoding_type memory_ENV_CTRL;
  wire       `EnvCtrlEnum_1_defaultEncoding_type _zz_21;
  wire       `EnvCtrlEnum_1_defaultEncoding_type execute_ENV_CTRL;
  wire       `EnvCtrlEnum_1_defaultEncoding_type _zz_22;
  wire       `EnvCtrlEnum_1_defaultEncoding_type writeBack_ENV_CTRL;
  wire       `EnvCtrlEnum_1_defaultEncoding_type _zz_23;
  wire                execute_IS_RS1_SIGNED;
  wire                execute_IS_DIV;
  wire                execute_IS_RS2_SIGNED;
  wire                memory_IS_DIV;
  wire                writeBack_IS_MUL;
  wire       [33:0]   writeBack_MUL_HH;
  wire       [51:0]   writeBack_MUL_LOW;
  wire       [33:0]   memory_MUL_HL;
  wire       [33:0]   memory_MUL_LH;
  wire       [31:0]   memory_MUL_LL;
  (* keep , syn_keep *) wire       [31:0]   execute_RS1 /* synthesis syn_keep = 1 */ ;
  wire                decode_RS2_USE;
  wire                decode_RS1_USE;
  wire                execute_REGFILE_WRITE_VALID;
  wire                execute_BYPASSABLE_EXECUTE_STAGE;
  reg        [31:0]   _zz_24;
  wire                memory_REGFILE_WRITE_VALID;
  wire       [31:0]   memory_INSTRUCTION;
  wire                memory_BYPASSABLE_MEMORY_STAGE;
  wire                writeBack_REGFILE_WRITE_VALID;
  reg        [31:0]   decode_RS2;
  reg        [31:0]   decode_RS1;
  wire       [31:0]   execute_SHIFT_RIGHT;
  reg        [31:0]   _zz_25;
  wire       `ShiftCtrlEnum_1_defaultEncoding_type execute_SHIFT_CTRL;
  wire       `ShiftCtrlEnum_1_defaultEncoding_type _zz_26;
  wire                execute_SRC_LESS_UNSIGNED;
  wire                execute_SRC2_FORCE_ZERO;
  wire                execute_SRC_USE_SUB_LESS;
  wire       [31:0]   _zz_27;
  wire       [31:0]   _zz_28;
  wire       `Src2CtrlEnum_1_defaultEncoding_type decode_SRC2_CTRL;
  wire       `Src2CtrlEnum_1_defaultEncoding_type _zz_29;
  wire       [31:0]   _zz_30;
  wire       `Src1CtrlEnum_1_defaultEncoding_type decode_SRC1_CTRL;
  wire       `Src1CtrlEnum_1_defaultEncoding_type _zz_31;
  wire                decode_SRC_USE_SUB_LESS;
  wire                decode_SRC_ADD_ZERO;
  wire       [31:0]   execute_SRC_ADD_SUB;
  wire                execute_SRC_LESS;
  wire       `AluCtrlEnum_defaultEncoding_type execute_ALU_CTRL;
  wire       `AluCtrlEnum_defaultEncoding_type _zz_32;
  wire       [31:0]   execute_SRC2;
  wire       [31:0]   execute_SRC1;
  wire       `AluBitwiseCtrlEnum_defaultEncoding_type execute_ALU_BITWISE_CTRL;
  wire       `AluBitwiseCtrlEnum_defaultEncoding_type _zz_33;
  wire       [31:0]   _zz_34;
  wire                _zz_35;
  reg                 _zz_36;
  reg                 decode_REGFILE_WRITE_VALID;
  wire                decode_LEGAL_INSTRUCTION;
  wire       `BranchCtrlEnum_defaultEncoding_type _zz_37;
  wire       `EnvCtrlEnum_1_defaultEncoding_type _zz_38;
  wire       `ShiftCtrlEnum_1_defaultEncoding_type _zz_39;
  wire       `AluBitwiseCtrlEnum_defaultEncoding_type _zz_40;
  wire       `Src2CtrlEnum_1_defaultEncoding_type _zz_41;
  wire       `AluCtrlEnum_defaultEncoding_type _zz_42;
  wire       `Src1CtrlEnum_1_defaultEncoding_type _zz_43;
  wire                writeBack_IS_DBUS_SHARING;
  wire                execute_IS_DBUS_SHARING;
  wire                memory_IS_DBUS_SHARING;
  reg        [31:0]   _zz_44;
  wire       [1:0]    writeBack_MEMORY_ADDRESS_LOW;
  wire                writeBack_MEMORY_WR;
  wire                writeBack_MEMORY_FENCE;
  wire                writeBack_MEMORY_AMO;
  wire                writeBack_MEMORY_LRSC;
  wire       [31:0]   writeBack_REGFILE_WRITE_DATA;
  wire                writeBack_MEMORY_ENABLE;
  wire                memory_MEMORY_ENABLE;
  wire       [31:0]   memory_MEMORY_VIRTUAL_ADDRESS;
  wire                execute_MEMORY_AMO;
  wire                execute_MEMORY_LRSC;
  wire                execute_MEMORY_FORCE_CONSTISTENCY;
  wire                execute_MEMORY_MANAGMENT;
  (* keep , syn_keep *) wire       [31:0]   execute_RS2 /* synthesis syn_keep = 1 */ ;
  wire                execute_MEMORY_WR;
  wire       [31:0]   execute_SRC_ADD;
  wire                execute_MEMORY_ENABLE;
  wire       [31:0]   execute_INSTRUCTION;
  wire                decode_MEMORY_AMO;
  wire                decode_MEMORY_LRSC;
  reg                 _zz_45;
  wire                decode_MEMORY_ENABLE;
  wire                decode_FLUSH_ALL;
  reg                 IBusCachedPlugin_rsp_issueDetected_4;
  reg                 IBusCachedPlugin_rsp_issueDetected_3;
  reg                 IBusCachedPlugin_rsp_issueDetected_2;
  reg                 IBusCachedPlugin_rsp_issueDetected_1;
  wire       [31:0]   decode_INSTRUCTION;
  reg        [31:0]   _zz_46;
  reg        [31:0]   _zz_47;
  wire       [31:0]   decode_PC;
  wire                writeBack_IS_SFENCE_VMA;
  wire       [31:0]   writeBack_PC;
  wire       [31:0]   writeBack_INSTRUCTION;
  reg                 decode_arbitration_haltItself;
  reg                 decode_arbitration_haltByOther;
  reg                 decode_arbitration_removeIt;
  wire                decode_arbitration_flushIt;
  reg                 decode_arbitration_flushNext;
  reg                 decode_arbitration_isValid;
  wire                decode_arbitration_isStuck;
  wire                decode_arbitration_isStuckByOthers;
  wire                decode_arbitration_isFlushed;
  wire                decode_arbitration_isMoving;
  wire                decode_arbitration_isFiring;
  reg                 execute_arbitration_haltItself;
  reg                 execute_arbitration_haltByOther;
  reg                 execute_arbitration_removeIt;
  reg                 execute_arbitration_flushIt;
  reg                 execute_arbitration_flushNext;
  reg                 execute_arbitration_isValid;
  wire                execute_arbitration_isStuck;
  wire                execute_arbitration_isStuckByOthers;
  wire                execute_arbitration_isFlushed;
  wire                execute_arbitration_isMoving;
  wire                execute_arbitration_isFiring;
  reg                 memory_arbitration_haltItself;
  reg                 memory_arbitration_haltByOther;
  reg                 memory_arbitration_removeIt;
  wire                memory_arbitration_flushIt;
  reg                 memory_arbitration_flushNext;
  reg                 memory_arbitration_isValid;
  wire                memory_arbitration_isStuck;
  wire                memory_arbitration_isStuckByOthers;
  wire                memory_arbitration_isFlushed;
  wire                memory_arbitration_isMoving;
  wire                memory_arbitration_isFiring;
  reg                 writeBack_arbitration_haltItself;
  wire                writeBack_arbitration_haltByOther;
  reg                 writeBack_arbitration_removeIt;
  reg                 writeBack_arbitration_flushIt;
  reg                 writeBack_arbitration_flushNext;
  reg                 writeBack_arbitration_isValid;
  wire                writeBack_arbitration_isStuck;
  wire                writeBack_arbitration_isStuckByOthers;
  wire                writeBack_arbitration_isFlushed;
  wire                writeBack_arbitration_isMoving;
  wire                writeBack_arbitration_isFiring;
  wire       [31:0]   lastStageInstruction /* verilator public */ ;
  wire       [31:0]   lastStagePc /* verilator public */ ;
  wire                lastStageIsValid /* verilator public */ ;
  wire                lastStageIsFiring /* verilator public */ ;
  reg                 MmuPlugin_dBusAccess_cmd_valid;
  reg                 MmuPlugin_dBusAccess_cmd_ready;
  reg        [31:0]   MmuPlugin_dBusAccess_cmd_payload_address;
  wire       [1:0]    MmuPlugin_dBusAccess_cmd_payload_size;
  wire                MmuPlugin_dBusAccess_cmd_payload_write;
  wire       [31:0]   MmuPlugin_dBusAccess_cmd_payload_data;
  wire       [3:0]    MmuPlugin_dBusAccess_cmd_payload_writeMask;
  wire                MmuPlugin_dBusAccess_rsp_valid;
  wire       [31:0]   MmuPlugin_dBusAccess_rsp_payload_data;
  wire                MmuPlugin_dBusAccess_rsp_payload_error;
  wire                MmuPlugin_dBusAccess_rsp_payload_redo;
  reg                 IBusCachedPlugin_fetcherHalt;
  reg                 IBusCachedPlugin_incomingInstruction;
  wire                IBusCachedPlugin_pcValids_0;
  wire                IBusCachedPlugin_pcValids_1;
  wire                IBusCachedPlugin_pcValids_2;
  wire                IBusCachedPlugin_pcValids_3;
  reg                 IBusCachedPlugin_decodeExceptionPort_valid;
  reg        [3:0]    IBusCachedPlugin_decodeExceptionPort_payload_code;
  wire       [31:0]   IBusCachedPlugin_decodeExceptionPort_payload_badAddr;
  wire                IBusCachedPlugin_mmuBus_cmd_0_isValid;
  wire                IBusCachedPlugin_mmuBus_cmd_0_isStuck;
  wire       [31:0]   IBusCachedPlugin_mmuBus_cmd_0_virtualAddress;
  wire                IBusCachedPlugin_mmuBus_cmd_0_bypassTranslation;
  wire                IBusCachedPlugin_mmuBus_cmd_1_isValid;
  wire                IBusCachedPlugin_mmuBus_cmd_1_isStuck;
  wire       [31:0]   IBusCachedPlugin_mmuBus_cmd_1_virtualAddress;
  wire                IBusCachedPlugin_mmuBus_cmd_1_bypassTranslation;
  reg        [31:0]   IBusCachedPlugin_mmuBus_rsp_physicalAddress;
  wire                IBusCachedPlugin_mmuBus_rsp_isIoAccess;
  reg                 IBusCachedPlugin_mmuBus_rsp_allowRead;
  reg                 IBusCachedPlugin_mmuBus_rsp_allowWrite;
  reg                 IBusCachedPlugin_mmuBus_rsp_allowExecute;
  reg                 IBusCachedPlugin_mmuBus_rsp_exception;
  reg                 IBusCachedPlugin_mmuBus_rsp_refilling;
  wire                IBusCachedPlugin_mmuBus_rsp_bypassTranslation;
  wire                IBusCachedPlugin_mmuBus_rsp_ways_0_sel;
  wire       [31:0]   IBusCachedPlugin_mmuBus_rsp_ways_0_physical;
  wire                IBusCachedPlugin_mmuBus_rsp_ways_1_sel;
  wire       [31:0]   IBusCachedPlugin_mmuBus_rsp_ways_1_physical;
  wire                IBusCachedPlugin_mmuBus_rsp_ways_2_sel;
  wire       [31:0]   IBusCachedPlugin_mmuBus_rsp_ways_2_physical;
  wire                IBusCachedPlugin_mmuBus_rsp_ways_3_sel;
  wire       [31:0]   IBusCachedPlugin_mmuBus_rsp_ways_3_physical;
  wire                IBusCachedPlugin_mmuBus_end;
  wire                IBusCachedPlugin_mmuBus_busy;
  wire                DBusCachedPlugin_mmuBus_cmd_0_isValid;
  wire                DBusCachedPlugin_mmuBus_cmd_0_isStuck;
  wire       [31:0]   DBusCachedPlugin_mmuBus_cmd_0_virtualAddress;
  reg                 DBusCachedPlugin_mmuBus_cmd_0_bypassTranslation;
  wire                DBusCachedPlugin_mmuBus_cmd_1_isValid;
  wire                DBusCachedPlugin_mmuBus_cmd_1_isStuck;
  wire       [31:0]   DBusCachedPlugin_mmuBus_cmd_1_virtualAddress;
  reg                 DBusCachedPlugin_mmuBus_cmd_1_bypassTranslation;
  reg        [31:0]   DBusCachedPlugin_mmuBus_rsp_physicalAddress;
  wire                DBusCachedPlugin_mmuBus_rsp_isIoAccess;
  reg                 DBusCachedPlugin_mmuBus_rsp_allowRead;
  reg                 DBusCachedPlugin_mmuBus_rsp_allowWrite;
  reg                 DBusCachedPlugin_mmuBus_rsp_allowExecute;
  reg                 DBusCachedPlugin_mmuBus_rsp_exception;
  reg                 DBusCachedPlugin_mmuBus_rsp_refilling;
  wire                DBusCachedPlugin_mmuBus_rsp_bypassTranslation;
  wire                DBusCachedPlugin_mmuBus_rsp_ways_0_sel;
  wire       [31:0]   DBusCachedPlugin_mmuBus_rsp_ways_0_physical;
  wire                DBusCachedPlugin_mmuBus_rsp_ways_1_sel;
  wire       [31:0]   DBusCachedPlugin_mmuBus_rsp_ways_1_physical;
  wire                DBusCachedPlugin_mmuBus_rsp_ways_2_sel;
  wire       [31:0]   DBusCachedPlugin_mmuBus_rsp_ways_2_physical;
  wire                DBusCachedPlugin_mmuBus_rsp_ways_3_sel;
  wire       [31:0]   DBusCachedPlugin_mmuBus_rsp_ways_3_physical;
  wire                DBusCachedPlugin_mmuBus_end;
  wire                DBusCachedPlugin_mmuBus_busy;
  reg                 DBusCachedPlugin_redoBranch_valid;
  wire       [31:0]   DBusCachedPlugin_redoBranch_payload;
  reg                 DBusCachedPlugin_exceptionBus_valid;
  reg        [3:0]    DBusCachedPlugin_exceptionBus_payload_code;
  wire       [31:0]   DBusCachedPlugin_exceptionBus_payload_badAddr;
  reg                 _zz_48;
  wire                decodeExceptionPort_valid;
  wire       [3:0]    decodeExceptionPort_payload_code;
  wire       [31:0]   decodeExceptionPort_payload_badAddr;
  reg                 CsrPlugin_inWfi /* verilator public */ ;
  reg                 CsrPlugin_thirdPartyWake;
  reg                 CsrPlugin_jumpInterface_valid;
  reg        [31:0]   CsrPlugin_jumpInterface_payload;
  reg                 CsrPlugin_redoInterface_valid;
  wire       [31:0]   CsrPlugin_redoInterface_payload;
  wire                CsrPlugin_exceptionPendings_0;
  wire                CsrPlugin_exceptionPendings_1;
  wire                CsrPlugin_exceptionPendings_2;
  wire                CsrPlugin_exceptionPendings_3;
  wire                contextSwitching;
  reg        [1:0]    CsrPlugin_privilege;
  reg                 CsrPlugin_forceMachineWire;
  reg                 CsrPlugin_selfException_valid;
  reg        [3:0]    CsrPlugin_selfException_payload_code;
  wire       [31:0]   CsrPlugin_selfException_payload_badAddr;
  reg                 CsrPlugin_allowInterrupts;
  reg                 CsrPlugin_allowException;
  wire                BranchPlugin_jumpInterface_valid;
  wire       [31:0]   BranchPlugin_jumpInterface_payload;
  wire                BranchPlugin_branchExceptionPort_valid;
  wire       [3:0]    BranchPlugin_branchExceptionPort_payload_code;
  wire       [31:0]   BranchPlugin_branchExceptionPort_payload_badAddr;
  reg                 IBusCachedPlugin_injectionPort_valid;
  reg                 IBusCachedPlugin_injectionPort_ready;
  wire       [31:0]   IBusCachedPlugin_injectionPort_payload;
  reg                 MmuPlugin_status_sum;
  reg                 MmuPlugin_status_mxr;
  reg                 MmuPlugin_status_mprv;
  reg                 MmuPlugin_satp_mode;
  reg        [8:0]    MmuPlugin_satp_asid;
  reg        [19:0]   MmuPlugin_satp_ppn;
  reg                 MmuPlugin_ports_0_cache_0_valid;
  reg                 MmuPlugin_ports_0_cache_0_exception;
  reg                 MmuPlugin_ports_0_cache_0_superPage;
  reg        [9:0]    MmuPlugin_ports_0_cache_0_virtualAddress_0;
  reg        [9:0]    MmuPlugin_ports_0_cache_0_virtualAddress_1;
  reg        [9:0]    MmuPlugin_ports_0_cache_0_physicalAddress_0;
  reg        [9:0]    MmuPlugin_ports_0_cache_0_physicalAddress_1;
  reg                 MmuPlugin_ports_0_cache_0_allowRead;
  reg                 MmuPlugin_ports_0_cache_0_allowWrite;
  reg                 MmuPlugin_ports_0_cache_0_allowExecute;
  reg                 MmuPlugin_ports_0_cache_0_allowUser;
  reg                 MmuPlugin_ports_0_cache_1_valid;
  reg                 MmuPlugin_ports_0_cache_1_exception;
  reg                 MmuPlugin_ports_0_cache_1_superPage;
  reg        [9:0]    MmuPlugin_ports_0_cache_1_virtualAddress_0;
  reg        [9:0]    MmuPlugin_ports_0_cache_1_virtualAddress_1;
  reg        [9:0]    MmuPlugin_ports_0_cache_1_physicalAddress_0;
  reg        [9:0]    MmuPlugin_ports_0_cache_1_physicalAddress_1;
  reg                 MmuPlugin_ports_0_cache_1_allowRead;
  reg                 MmuPlugin_ports_0_cache_1_allowWrite;
  reg                 MmuPlugin_ports_0_cache_1_allowExecute;
  reg                 MmuPlugin_ports_0_cache_1_allowUser;
  reg                 MmuPlugin_ports_0_cache_2_valid;
  reg                 MmuPlugin_ports_0_cache_2_exception;
  reg                 MmuPlugin_ports_0_cache_2_superPage;
  reg        [9:0]    MmuPlugin_ports_0_cache_2_virtualAddress_0;
  reg        [9:0]    MmuPlugin_ports_0_cache_2_virtualAddress_1;
  reg        [9:0]    MmuPlugin_ports_0_cache_2_physicalAddress_0;
  reg        [9:0]    MmuPlugin_ports_0_cache_2_physicalAddress_1;
  reg                 MmuPlugin_ports_0_cache_2_allowRead;
  reg                 MmuPlugin_ports_0_cache_2_allowWrite;
  reg                 MmuPlugin_ports_0_cache_2_allowExecute;
  reg                 MmuPlugin_ports_0_cache_2_allowUser;
  reg                 MmuPlugin_ports_0_cache_3_valid;
  reg                 MmuPlugin_ports_0_cache_3_exception;
  reg                 MmuPlugin_ports_0_cache_3_superPage;
  reg        [9:0]    MmuPlugin_ports_0_cache_3_virtualAddress_0;
  reg        [9:0]    MmuPlugin_ports_0_cache_3_virtualAddress_1;
  reg        [9:0]    MmuPlugin_ports_0_cache_3_physicalAddress_0;
  reg        [9:0]    MmuPlugin_ports_0_cache_3_physicalAddress_1;
  reg                 MmuPlugin_ports_0_cache_3_allowRead;
  reg                 MmuPlugin_ports_0_cache_3_allowWrite;
  reg                 MmuPlugin_ports_0_cache_3_allowExecute;
  reg                 MmuPlugin_ports_0_cache_3_allowUser;
  reg                 MmuPlugin_ports_0_dirty;
  reg                 MmuPlugin_ports_0_requireMmuLockupCalc;
  reg        [3:0]    MmuPlugin_ports_0_cacheHitsCalc;
  reg                 MmuPlugin_ports_0_requireMmuLockup;
  reg        [3:0]    MmuPlugin_ports_0_cacheHits;
  wire                MmuPlugin_ports_0_cacheHit;
  wire                _zz_49;
  wire                _zz_50;
  wire                _zz_51;
  wire       [1:0]    _zz_52;
  wire                MmuPlugin_ports_0_cacheLine_valid;
  wire                MmuPlugin_ports_0_cacheLine_exception;
  wire                MmuPlugin_ports_0_cacheLine_superPage;
  wire       [9:0]    MmuPlugin_ports_0_cacheLine_virtualAddress_0;
  wire       [9:0]    MmuPlugin_ports_0_cacheLine_virtualAddress_1;
  wire       [9:0]    MmuPlugin_ports_0_cacheLine_physicalAddress_0;
  wire       [9:0]    MmuPlugin_ports_0_cacheLine_physicalAddress_1;
  wire                MmuPlugin_ports_0_cacheLine_allowRead;
  wire                MmuPlugin_ports_0_cacheLine_allowWrite;
  wire                MmuPlugin_ports_0_cacheLine_allowExecute;
  wire                MmuPlugin_ports_0_cacheLine_allowUser;
  reg                 MmuPlugin_ports_0_entryToReplace_willIncrement;
  wire                MmuPlugin_ports_0_entryToReplace_willClear;
  reg        [1:0]    MmuPlugin_ports_0_entryToReplace_valueNext;
  reg        [1:0]    MmuPlugin_ports_0_entryToReplace_value;
  wire                MmuPlugin_ports_0_entryToReplace_willOverflowIfInc;
  wire                MmuPlugin_ports_0_entryToReplace_willOverflow;
  reg                 MmuPlugin_ports_1_cache_0_valid;
  reg                 MmuPlugin_ports_1_cache_0_exception;
  reg                 MmuPlugin_ports_1_cache_0_superPage;
  reg        [9:0]    MmuPlugin_ports_1_cache_0_virtualAddress_0;
  reg        [9:0]    MmuPlugin_ports_1_cache_0_virtualAddress_1;
  reg        [9:0]    MmuPlugin_ports_1_cache_0_physicalAddress_0;
  reg        [9:0]    MmuPlugin_ports_1_cache_0_physicalAddress_1;
  reg                 MmuPlugin_ports_1_cache_0_allowRead;
  reg                 MmuPlugin_ports_1_cache_0_allowWrite;
  reg                 MmuPlugin_ports_1_cache_0_allowExecute;
  reg                 MmuPlugin_ports_1_cache_0_allowUser;
  reg                 MmuPlugin_ports_1_cache_1_valid;
  reg                 MmuPlugin_ports_1_cache_1_exception;
  reg                 MmuPlugin_ports_1_cache_1_superPage;
  reg        [9:0]    MmuPlugin_ports_1_cache_1_virtualAddress_0;
  reg        [9:0]    MmuPlugin_ports_1_cache_1_virtualAddress_1;
  reg        [9:0]    MmuPlugin_ports_1_cache_1_physicalAddress_0;
  reg        [9:0]    MmuPlugin_ports_1_cache_1_physicalAddress_1;
  reg                 MmuPlugin_ports_1_cache_1_allowRead;
  reg                 MmuPlugin_ports_1_cache_1_allowWrite;
  reg                 MmuPlugin_ports_1_cache_1_allowExecute;
  reg                 MmuPlugin_ports_1_cache_1_allowUser;
  reg                 MmuPlugin_ports_1_cache_2_valid;
  reg                 MmuPlugin_ports_1_cache_2_exception;
  reg                 MmuPlugin_ports_1_cache_2_superPage;
  reg        [9:0]    MmuPlugin_ports_1_cache_2_virtualAddress_0;
  reg        [9:0]    MmuPlugin_ports_1_cache_2_virtualAddress_1;
  reg        [9:0]    MmuPlugin_ports_1_cache_2_physicalAddress_0;
  reg        [9:0]    MmuPlugin_ports_1_cache_2_physicalAddress_1;
  reg                 MmuPlugin_ports_1_cache_2_allowRead;
  reg                 MmuPlugin_ports_1_cache_2_allowWrite;
  reg                 MmuPlugin_ports_1_cache_2_allowExecute;
  reg                 MmuPlugin_ports_1_cache_2_allowUser;
  reg                 MmuPlugin_ports_1_cache_3_valid;
  reg                 MmuPlugin_ports_1_cache_3_exception;
  reg                 MmuPlugin_ports_1_cache_3_superPage;
  reg        [9:0]    MmuPlugin_ports_1_cache_3_virtualAddress_0;
  reg        [9:0]    MmuPlugin_ports_1_cache_3_virtualAddress_1;
  reg        [9:0]    MmuPlugin_ports_1_cache_3_physicalAddress_0;
  reg        [9:0]    MmuPlugin_ports_1_cache_3_physicalAddress_1;
  reg                 MmuPlugin_ports_1_cache_3_allowRead;
  reg                 MmuPlugin_ports_1_cache_3_allowWrite;
  reg                 MmuPlugin_ports_1_cache_3_allowExecute;
  reg                 MmuPlugin_ports_1_cache_3_allowUser;
  reg                 MmuPlugin_ports_1_dirty;
  reg                 MmuPlugin_ports_1_requireMmuLockupCalc;
  reg        [3:0]    MmuPlugin_ports_1_cacheHitsCalc;
  reg                 MmuPlugin_ports_1_requireMmuLockup;
  reg        [3:0]    MmuPlugin_ports_1_cacheHits;
  wire                MmuPlugin_ports_1_cacheHit;
  wire                _zz_53;
  wire                _zz_54;
  wire                _zz_55;
  wire       [1:0]    _zz_56;
  wire                MmuPlugin_ports_1_cacheLine_valid;
  wire                MmuPlugin_ports_1_cacheLine_exception;
  wire                MmuPlugin_ports_1_cacheLine_superPage;
  wire       [9:0]    MmuPlugin_ports_1_cacheLine_virtualAddress_0;
  wire       [9:0]    MmuPlugin_ports_1_cacheLine_virtualAddress_1;
  wire       [9:0]    MmuPlugin_ports_1_cacheLine_physicalAddress_0;
  wire       [9:0]    MmuPlugin_ports_1_cacheLine_physicalAddress_1;
  wire                MmuPlugin_ports_1_cacheLine_allowRead;
  wire                MmuPlugin_ports_1_cacheLine_allowWrite;
  wire                MmuPlugin_ports_1_cacheLine_allowExecute;
  wire                MmuPlugin_ports_1_cacheLine_allowUser;
  reg                 MmuPlugin_ports_1_entryToReplace_willIncrement;
  wire                MmuPlugin_ports_1_entryToReplace_willClear;
  reg        [1:0]    MmuPlugin_ports_1_entryToReplace_valueNext;
  reg        [1:0]    MmuPlugin_ports_1_entryToReplace_value;
  wire                MmuPlugin_ports_1_entryToReplace_willOverflowIfInc;
  wire                MmuPlugin_ports_1_entryToReplace_willOverflow;
  reg        `MmuPlugin_shared_State_1_defaultEncoding_type MmuPlugin_shared_state_1;
  reg        [9:0]    MmuPlugin_shared_vpn_0;
  reg        [9:0]    MmuPlugin_shared_vpn_1;
  reg        [1:0]    MmuPlugin_shared_portSortedOh;
  reg                 MmuPlugin_shared_dBusRspStaged_valid;
  reg        [31:0]   MmuPlugin_shared_dBusRspStaged_payload_data;
  reg                 MmuPlugin_shared_dBusRspStaged_payload_error;
  reg                 MmuPlugin_shared_dBusRspStaged_payload_redo;
  wire                MmuPlugin_shared_dBusRsp_pte_V;
  wire                MmuPlugin_shared_dBusRsp_pte_R;
  wire                MmuPlugin_shared_dBusRsp_pte_W;
  wire                MmuPlugin_shared_dBusRsp_pte_X;
  wire                MmuPlugin_shared_dBusRsp_pte_U;
  wire                MmuPlugin_shared_dBusRsp_pte_G;
  wire                MmuPlugin_shared_dBusRsp_pte_A;
  wire                MmuPlugin_shared_dBusRsp_pte_D;
  wire       [1:0]    MmuPlugin_shared_dBusRsp_pte_RSW;
  wire       [9:0]    MmuPlugin_shared_dBusRsp_pte_PPN0;
  wire       [11:0]   MmuPlugin_shared_dBusRsp_pte_PPN1;
  wire                MmuPlugin_shared_dBusRsp_exception;
  wire                MmuPlugin_shared_dBusRsp_leaf;
  reg                 MmuPlugin_shared_pteBuffer_V;
  reg                 MmuPlugin_shared_pteBuffer_R;
  reg                 MmuPlugin_shared_pteBuffer_W;
  reg                 MmuPlugin_shared_pteBuffer_X;
  reg                 MmuPlugin_shared_pteBuffer_U;
  reg                 MmuPlugin_shared_pteBuffer_G;
  reg                 MmuPlugin_shared_pteBuffer_A;
  reg                 MmuPlugin_shared_pteBuffer_D;
  reg        [1:0]    MmuPlugin_shared_pteBuffer_RSW;
  reg        [9:0]    MmuPlugin_shared_pteBuffer_PPN0;
  reg        [11:0]   MmuPlugin_shared_pteBuffer_PPN1;
  reg        [1:0]    _zz_57;
  wire       [1:0]    _zz_58;
  reg        [1:0]    _zz_59;
  wire       [1:0]    MmuPlugin_shared_refills;
  wire       [1:0]    _zz_60;
  reg        [1:0]    _zz_61;
  wire       [31:0]   _zz_62;
  wire                IBusCachedPlugin_externalFlush;
  wire                IBusCachedPlugin_jump_pcLoad_valid;
  wire       [31:0]   IBusCachedPlugin_jump_pcLoad_payload;
  wire       [3:0]    _zz_63;
  wire       [3:0]    _zz_64;
  wire                _zz_65;
  wire                _zz_66;
  wire                _zz_67;
  wire                IBusCachedPlugin_fetchPc_output_valid;
  wire                IBusCachedPlugin_fetchPc_output_ready;
  wire       [31:0]   IBusCachedPlugin_fetchPc_output_payload;
  reg        [31:0]   IBusCachedPlugin_fetchPc_pcReg /* verilator public */ ;
  reg                 IBusCachedPlugin_fetchPc_correction;
  reg                 IBusCachedPlugin_fetchPc_correctionReg;
  wire                IBusCachedPlugin_fetchPc_corrected;
  reg                 IBusCachedPlugin_fetchPc_pcRegPropagate;
  reg                 IBusCachedPlugin_fetchPc_booted;
  reg                 IBusCachedPlugin_fetchPc_inc;
  reg        [31:0]   IBusCachedPlugin_fetchPc_pc;
  wire                IBusCachedPlugin_fetchPc_redo_valid;
  wire       [31:0]   IBusCachedPlugin_fetchPc_redo_payload;
  reg                 IBusCachedPlugin_fetchPc_flushed;
  reg                 IBusCachedPlugin_iBusRsp_redoFetch;
  wire                IBusCachedPlugin_iBusRsp_stages_0_input_valid;
  wire                IBusCachedPlugin_iBusRsp_stages_0_input_ready;
  wire       [31:0]   IBusCachedPlugin_iBusRsp_stages_0_input_payload;
  wire                IBusCachedPlugin_iBusRsp_stages_0_output_valid;
  wire                IBusCachedPlugin_iBusRsp_stages_0_output_ready;
  wire       [31:0]   IBusCachedPlugin_iBusRsp_stages_0_output_payload;
  reg                 IBusCachedPlugin_iBusRsp_stages_0_halt;
  wire                IBusCachedPlugin_iBusRsp_stages_1_input_valid;
  wire                IBusCachedPlugin_iBusRsp_stages_1_input_ready;
  wire       [31:0]   IBusCachedPlugin_iBusRsp_stages_1_input_payload;
  wire                IBusCachedPlugin_iBusRsp_stages_1_output_valid;
  wire                IBusCachedPlugin_iBusRsp_stages_1_output_ready;
  wire       [31:0]   IBusCachedPlugin_iBusRsp_stages_1_output_payload;
  wire                IBusCachedPlugin_iBusRsp_stages_1_halt;
  wire                IBusCachedPlugin_iBusRsp_stages_2_input_valid;
  wire                IBusCachedPlugin_iBusRsp_stages_2_input_ready;
  wire       [31:0]   IBusCachedPlugin_iBusRsp_stages_2_input_payload;
  wire                IBusCachedPlugin_iBusRsp_stages_2_output_valid;
  wire                IBusCachedPlugin_iBusRsp_stages_2_output_ready;
  wire       [31:0]   IBusCachedPlugin_iBusRsp_stages_2_output_payload;
  reg                 IBusCachedPlugin_iBusRsp_stages_2_halt;
  wire                _zz_68;
  wire                _zz_69;
  wire                _zz_70;
  wire                IBusCachedPlugin_iBusRsp_flush;
  wire                _zz_71;
  wire                _zz_72;
  reg                 _zz_73;
  wire                _zz_74;
  reg                 _zz_75;
  reg        [31:0]   _zz_76;
  reg                 IBusCachedPlugin_iBusRsp_readyForError;
  wire                IBusCachedPlugin_iBusRsp_output_valid;
  wire                IBusCachedPlugin_iBusRsp_output_ready;
  wire       [31:0]   IBusCachedPlugin_iBusRsp_output_payload_pc;
  wire                IBusCachedPlugin_iBusRsp_output_payload_rsp_error;
  wire       [31:0]   IBusCachedPlugin_iBusRsp_output_payload_rsp_inst;
  wire                IBusCachedPlugin_iBusRsp_output_payload_isRvc;
  reg                 IBusCachedPlugin_injector_nextPcCalc_valids_0;
  reg                 IBusCachedPlugin_injector_nextPcCalc_valids_1;
  reg                 IBusCachedPlugin_injector_nextPcCalc_valids_2;
  reg                 IBusCachedPlugin_injector_nextPcCalc_valids_3;
  reg                 IBusCachedPlugin_injector_nextPcCalc_valids_4;
  wire       [31:0]   _zz_77;
  reg        [31:0]   IBusCachedPlugin_rspCounter;
  wire                IBusCachedPlugin_s0_tightlyCoupledHit;
  reg                 IBusCachedPlugin_s1_tightlyCoupledHit;
  reg                 IBusCachedPlugin_s2_tightlyCoupledHit;
  wire                IBusCachedPlugin_rsp_iBusRspOutputHalt;
  wire                IBusCachedPlugin_rsp_issueDetected;
  reg                 IBusCachedPlugin_rsp_redoFetch;
  wire                dataCache_2_io_mem_cmd_s2mPipe_valid;
  wire                dataCache_2_io_mem_cmd_s2mPipe_ready;
  wire                dataCache_2_io_mem_cmd_s2mPipe_payload_wr;
  wire                dataCache_2_io_mem_cmd_s2mPipe_payload_uncached;
  wire       [31:0]   dataCache_2_io_mem_cmd_s2mPipe_payload_address;
  wire       [31:0]   dataCache_2_io_mem_cmd_s2mPipe_payload_data;
  wire       [3:0]    dataCache_2_io_mem_cmd_s2mPipe_payload_mask;
  wire       [3:0]    dataCache_2_io_mem_cmd_s2mPipe_payload_length;
  wire                dataCache_2_io_mem_cmd_s2mPipe_payload_exclusive;
  wire                dataCache_2_io_mem_cmd_s2mPipe_payload_last;
  reg                 dataCache_2_io_mem_cmd_s2mPipe_rValid;
  reg                 dataCache_2_io_mem_cmd_s2mPipe_rData_wr;
  reg                 dataCache_2_io_mem_cmd_s2mPipe_rData_uncached;
  reg        [31:0]   dataCache_2_io_mem_cmd_s2mPipe_rData_address;
  reg        [31:0]   dataCache_2_io_mem_cmd_s2mPipe_rData_data;
  reg        [3:0]    dataCache_2_io_mem_cmd_s2mPipe_rData_mask;
  reg        [3:0]    dataCache_2_io_mem_cmd_s2mPipe_rData_length;
  reg                 dataCache_2_io_mem_cmd_s2mPipe_rData_exclusive;
  reg                 dataCache_2_io_mem_cmd_s2mPipe_rData_last;
  reg                 dBus_rsp_valid_regNext;
  reg                 dBus_rsp_payload_exclusive_regNext;
  reg                 dBus_rsp_payload_error_regNext;
  reg                 dBus_rsp_payload_last_regNext;
  reg        [2:0]    dBus_rsp_payload_aggregated_regNext;
  reg        [63:0]   dBus_rsp_payload_data_regNextWhen;
  wire       [31:0]   _zz_78;
  reg        [31:0]   DBusCachedPlugin_rspCounter;
  wire       [1:0]    execute_DBusCachedPlugin_size;
  reg        [31:0]   _zz_79;
  wire       [11:0]   _zz_80;
  reg                 writeBack_DBusCachedPlugin_fence_aquire;
  reg        [31:0]   writeBack_DBusCachedPlugin_rspShifted;
  wire                _zz_81;
  reg        [31:0]   _zz_82;
  wire                _zz_83;
  reg        [31:0]   _zz_84;
  reg        [31:0]   writeBack_DBusCachedPlugin_rspFormated;
  reg                 DBusCachedPlugin_forceDatapath;
  wire       [37:0]   _zz_85;
  wire                _zz_86;
  wire                _zz_87;
  wire                _zz_88;
  wire                _zz_89;
  wire                _zz_90;
  wire                _zz_91;
  wire                _zz_92;
  wire                _zz_93;
  wire       `Src1CtrlEnum_1_defaultEncoding_type _zz_94;
  wire       `AluCtrlEnum_defaultEncoding_type _zz_95;
  wire       `Src2CtrlEnum_1_defaultEncoding_type _zz_96;
  wire       `AluBitwiseCtrlEnum_defaultEncoding_type _zz_97;
  wire       `ShiftCtrlEnum_1_defaultEncoding_type _zz_98;
  wire       `EnvCtrlEnum_1_defaultEncoding_type _zz_99;
  wire       `BranchCtrlEnum_defaultEncoding_type _zz_100;
  wire       [4:0]    decode_RegFilePlugin_regFileReadAddress1;
  wire       [4:0]    decode_RegFilePlugin_regFileReadAddress2;
  wire       [31:0]   decode_RegFilePlugin_rs1Data;
  wire       [31:0]   decode_RegFilePlugin_rs2Data;
  reg                 lastStageRegFileWrite_valid /* verilator public */ ;
  reg        [4:0]    lastStageRegFileWrite_payload_address /* verilator public */ ;
  reg        [31:0]   lastStageRegFileWrite_payload_data /* verilator public */ ;
  reg                 _zz_101;
  reg        [31:0]   execute_IntAluPlugin_bitwise;
  reg        [31:0]   _zz_102;
  reg        [31:0]   _zz_103;
  wire                _zz_104;
  reg        [19:0]   _zz_105;
  wire                _zz_106;
  reg        [19:0]   _zz_107;
  reg        [31:0]   _zz_108;
  reg        [31:0]   execute_SrcPlugin_addSub;
  wire                execute_SrcPlugin_less;
  wire       [4:0]    execute_FullBarrelShifterPlugin_amplitude;
  reg        [31:0]   _zz_109;
  wire       [31:0]   execute_FullBarrelShifterPlugin_reversed;
  reg        [31:0]   _zz_110;
  reg                 _zz_111;
  reg                 _zz_112;
  reg                 _zz_113;
  reg        [4:0]    _zz_114;
  reg        [31:0]   _zz_115;
  wire                _zz_116;
  wire                _zz_117;
  wire                _zz_118;
  wire                _zz_119;
  wire                _zz_120;
  wire                _zz_121;
  reg                 execute_MulPlugin_aSigned;
  reg                 execute_MulPlugin_bSigned;
  wire       [31:0]   execute_MulPlugin_a;
  wire       [31:0]   execute_MulPlugin_b;
  wire       [15:0]   execute_MulPlugin_aULow;
  wire       [15:0]   execute_MulPlugin_bULow;
  wire       [16:0]   execute_MulPlugin_aSLow;
  wire       [16:0]   execute_MulPlugin_bSLow;
  wire       [16:0]   execute_MulPlugin_aHigh;
  wire       [16:0]   execute_MulPlugin_bHigh;
  wire       [65:0]   writeBack_MulPlugin_result;
  reg        [32:0]   memory_MulDivIterativePlugin_rs1;
  reg        [31:0]   memory_MulDivIterativePlugin_rs2;
  reg        [64:0]   memory_MulDivIterativePlugin_accumulator;
  wire                memory_MulDivIterativePlugin_frontendOk;
  reg                 memory_MulDivIterativePlugin_div_needRevert;
  reg                 memory_MulDivIterativePlugin_div_counter_willIncrement;
  reg                 memory_MulDivIterativePlugin_div_counter_willClear;
  reg        [5:0]    memory_MulDivIterativePlugin_div_counter_valueNext;
  reg        [5:0]    memory_MulDivIterativePlugin_div_counter_value;
  wire                memory_MulDivIterativePlugin_div_counter_willOverflowIfInc;
  wire                memory_MulDivIterativePlugin_div_counter_willOverflow;
  reg                 memory_MulDivIterativePlugin_div_done;
  reg        [31:0]   memory_MulDivIterativePlugin_div_result;
  wire       [31:0]   _zz_122;
  wire       [32:0]   memory_MulDivIterativePlugin_div_stage_0_remainderShifted;
  wire       [32:0]   memory_MulDivIterativePlugin_div_stage_0_remainderMinusDenominator;
  wire       [31:0]   memory_MulDivIterativePlugin_div_stage_0_outRemainder;
  wire       [31:0]   memory_MulDivIterativePlugin_div_stage_0_outNumerator;
  wire       [31:0]   _zz_123;
  wire                _zz_124;
  wire                _zz_125;
  reg        [32:0]   _zz_126;
  reg        [1:0]    _zz_127;
  wire       [1:0]    CsrPlugin_misa_base;
  wire       [25:0]   CsrPlugin_misa_extensions;
  reg        [1:0]    CsrPlugin_mtvec_mode;
  reg        [29:0]   CsrPlugin_mtvec_base;
  reg        [31:0]   CsrPlugin_mepc;
  reg                 CsrPlugin_mstatus_MIE;
  reg                 CsrPlugin_mstatus_MPIE;
  reg        [1:0]    CsrPlugin_mstatus_MPP;
  reg                 CsrPlugin_mip_MEIP;
  reg                 CsrPlugin_mip_MTIP;
  reg                 CsrPlugin_mip_MSIP;
  reg                 CsrPlugin_mie_MEIE;
  reg                 CsrPlugin_mie_MTIE;
  reg                 CsrPlugin_mie_MSIE;
  reg        [31:0]   CsrPlugin_mscratch;
  reg                 CsrPlugin_mcause_interrupt;
  reg        [3:0]    CsrPlugin_mcause_exceptionCode;
  reg        [31:0]   CsrPlugin_mtval;
  reg        [63:0]   CsrPlugin_mcycle = 64'b0000000000000000000000000000000000000000000000000000000000000000;
  reg        [63:0]   CsrPlugin_minstret = 64'b0000000000000000000000000000000000000000000000000000000000000000;
  reg                 CsrPlugin_medeleg_IAM;
  reg                 CsrPlugin_medeleg_IAF;
  reg                 CsrPlugin_medeleg_II;
  reg                 CsrPlugin_medeleg_LAM;
  reg                 CsrPlugin_medeleg_LAF;
  reg                 CsrPlugin_medeleg_SAM;
  reg                 CsrPlugin_medeleg_SAF;
  reg                 CsrPlugin_medeleg_EU;
  reg                 CsrPlugin_medeleg_ES;
  reg                 CsrPlugin_medeleg_IPF;
  reg                 CsrPlugin_medeleg_LPF;
  reg                 CsrPlugin_medeleg_SPF;
  reg                 CsrPlugin_mideleg_ST;
  reg                 CsrPlugin_mideleg_SE;
  reg                 CsrPlugin_mideleg_SS;
  reg                 CsrPlugin_sstatus_SIE;
  reg                 CsrPlugin_sstatus_SPIE;
  reg        [0:0]    CsrPlugin_sstatus_SPP;
  reg                 CsrPlugin_sip_SEIP_SOFT;
  reg                 CsrPlugin_sip_SEIP_INPUT;
  wire                CsrPlugin_sip_SEIP_OR;
  reg                 CsrPlugin_sip_STIP;
  reg                 CsrPlugin_sip_SSIP;
  reg                 CsrPlugin_sie_SEIE;
  reg                 CsrPlugin_sie_STIE;
  reg                 CsrPlugin_sie_SSIE;
  reg        [1:0]    CsrPlugin_stvec_mode;
  reg        [29:0]   CsrPlugin_stvec_base;
  reg        [31:0]   CsrPlugin_sscratch;
  reg                 CsrPlugin_scause_interrupt;
  reg        [3:0]    CsrPlugin_scause_exceptionCode;
  reg        [31:0]   CsrPlugin_stval;
  reg        [31:0]   CsrPlugin_sepc;
  reg        [21:0]   CsrPlugin_satp_PPN;
  reg        [8:0]    CsrPlugin_satp_ASID;
  reg        [0:0]    CsrPlugin_satp_MODE;
  wire                _zz_128;
  wire                _zz_129;
  wire                _zz_130;
  wire                _zz_131;
  wire                _zz_132;
  wire                _zz_133;
  reg                 CsrPlugin_exceptionPortCtrl_exceptionValids_decode;
  reg                 CsrPlugin_exceptionPortCtrl_exceptionValids_execute;
  reg                 CsrPlugin_exceptionPortCtrl_exceptionValids_memory;
  reg                 CsrPlugin_exceptionPortCtrl_exceptionValids_writeBack;
  reg                 CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_decode;
  reg                 CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_execute;
  reg                 CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_memory;
  reg                 CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_writeBack;
  reg        [3:0]    CsrPlugin_exceptionPortCtrl_exceptionContext_code;
  reg        [31:0]   CsrPlugin_exceptionPortCtrl_exceptionContext_badAddr;
  reg        [1:0]    CsrPlugin_exceptionPortCtrl_exceptionTargetPrivilegeUncapped;
  wire       [1:0]    CsrPlugin_exceptionPortCtrl_exceptionTargetPrivilege;
  wire       [1:0]    _zz_134;
  wire                _zz_135;
  reg                 CsrPlugin_interrupt_valid;
  reg        [3:0]    CsrPlugin_interrupt_code /* verilator public */ ;
  reg        [1:0]    CsrPlugin_interrupt_targetPrivilege;
  wire                CsrPlugin_exception;
  reg                 CsrPlugin_lastStageWasWfi;
  reg                 CsrPlugin_pipelineLiberator_pcValids_0;
  reg                 CsrPlugin_pipelineLiberator_pcValids_1;
  reg                 CsrPlugin_pipelineLiberator_pcValids_2;
  wire                CsrPlugin_pipelineLiberator_active;
  reg                 CsrPlugin_pipelineLiberator_done;
  wire                CsrPlugin_interruptJump /* verilator public */ ;
  reg                 CsrPlugin_hadException /* verilator public */ ;
  reg        [1:0]    CsrPlugin_targetPrivilege;
  reg        [3:0]    CsrPlugin_trapCause;
  reg        [1:0]    CsrPlugin_xtvec_mode;
  reg        [29:0]   CsrPlugin_xtvec_base;
  reg                 execute_CsrPlugin_wfiWake;
  wire                execute_CsrPlugin_blockedBySideEffects;
  reg                 execute_CsrPlugin_illegalAccess;
  reg                 execute_CsrPlugin_illegalInstruction;
  wire       [31:0]   execute_CsrPlugin_readData;
  reg                 execute_CsrPlugin_writeInstruction;
  reg                 execute_CsrPlugin_readInstruction;
  wire                execute_CsrPlugin_writeEnable;
  wire                execute_CsrPlugin_readEnable;
  reg        [31:0]   execute_CsrPlugin_readToWriteData;
  reg        [31:0]   execute_CsrPlugin_writeData;
  wire       [11:0]   execute_CsrPlugin_csrAddress;
  wire                execute_BranchPlugin_eq;
  wire       [2:0]    _zz_136;
  reg                 _zz_137;
  reg                 _zz_138;
  wire       [31:0]   execute_BranchPlugin_branch_src1;
  wire                _zz_139;
  reg        [10:0]   _zz_140;
  wire                _zz_141;
  reg        [19:0]   _zz_142;
  wire                _zz_143;
  reg        [18:0]   _zz_144;
  reg        [31:0]   _zz_145;
  wire       [31:0]   execute_BranchPlugin_branch_src2;
  wire       [31:0]   execute_BranchPlugin_branchAdder;
  wire       [1:0]    execute_AesPlugin_byteSel;
  wire                execute_AesPlugin_bankSel;
  wire       [8:0]    execute_AesPlugin_romAddress;
  wire                _zz_146;
  wire       [31:0]   memory_AesPlugin_rom_data;
  wire       [7:0]    memory_AesPlugin_rom_bytes_0;
  wire       [7:0]    memory_AesPlugin_rom_bytes_1;
  wire       [7:0]    memory_AesPlugin_rom_bytes_2;
  wire       [7:0]    memory_AesPlugin_rom_bytes_3;
  wire       [1:0]    memory_AesPlugin_rom_remap_0_0;
  wire       [1:0]    memory_AesPlugin_rom_remap_0_1;
  wire       [1:0]    memory_AesPlugin_rom_remap_0_2;
  wire       [1:0]    memory_AesPlugin_rom_remap_0_3;
  wire       [1:0]    memory_AesPlugin_rom_remap_1_0;
  wire       [1:0]    memory_AesPlugin_rom_remap_1_1;
  wire       [1:0]    memory_AesPlugin_rom_remap_1_2;
  wire       [1:0]    memory_AesPlugin_rom_remap_1_3;
  wire       [1:0]    memory_AesPlugin_rom_remap_2_0;
  wire       [1:0]    memory_AesPlugin_rom_remap_2_1;
  wire       [1:0]    memory_AesPlugin_rom_remap_2_2;
  wire       [1:0]    memory_AesPlugin_rom_remap_2_3;
  wire       [1:0]    memory_AesPlugin_rom_remap_3_0;
  wire       [1:0]    memory_AesPlugin_rom_remap_3_1;
  wire       [1:0]    memory_AesPlugin_rom_remap_3_2;
  wire       [1:0]    memory_AesPlugin_rom_remap_3_3;
  wire       [1:0]    memory_AesPlugin_rom_address;
  wire       [1:0]    memory_AesPlugin_rom_output_0;
  wire       [1:0]    memory_AesPlugin_rom_output_1;
  wire       [1:0]    memory_AesPlugin_rom_output_2;
  wire       [1:0]    memory_AesPlugin_rom_output_3;
  reg        [3:0]    memory_AesPlugin_wordDesuffle_zero;
  wire       [1:0]    memory_AesPlugin_wordDesuffle_byteSel;
  reg        [7:0]    memory_AesPlugin_wordDesuffle_output_0;
  reg        [7:0]    memory_AesPlugin_wordDesuffle_output_1;
  reg        [7:0]    memory_AesPlugin_wordDesuffle_output_2;
  reg        [7:0]    memory_AesPlugin_wordDesuffle_output_3;
  reg        [1:0]    memory_AesPlugin_wordDesuffle_sel_0;
  reg        [1:0]    memory_AesPlugin_wordDesuffle_sel_1;
  reg        [1:0]    memory_AesPlugin_wordDesuffle_sel_2;
  reg        [1:0]    memory_AesPlugin_wordDesuffle_sel_3;
  wire       [31:0]   memory_AesPlugin_xored;
  reg                 DebugPlugin_firstCycle;
  reg                 DebugPlugin_secondCycle;
  reg                 DebugPlugin_resetIt;
  reg                 DebugPlugin_haltIt;
  reg                 DebugPlugin_stepIt;
  reg                 DebugPlugin_isPipBusy;
  reg                 DebugPlugin_godmode;
  reg                 DebugPlugin_haltedByBreak;
  reg        [31:0]   DebugPlugin_busReadDataReg;
  reg                 _zz_147;
  wire                DebugPlugin_allowEBreak;
  reg                 DebugPlugin_resetIt_regNext;
  reg        [31:0]   decode_to_execute_PC;
  reg        [31:0]   execute_to_memory_PC;
  reg        [31:0]   memory_to_writeBack_PC;
  reg        [31:0]   decode_to_execute_INSTRUCTION;
  reg        [31:0]   execute_to_memory_INSTRUCTION;
  reg        [31:0]   memory_to_writeBack_INSTRUCTION;
  reg        [31:0]   decode_to_execute_FORMAL_PC_NEXT;
  reg        [31:0]   execute_to_memory_FORMAL_PC_NEXT;
  reg        [31:0]   memory_to_writeBack_FORMAL_PC_NEXT;
  reg                 decode_to_execute_MEMORY_FORCE_CONSTISTENCY;
  reg                 decode_to_execute_IS_SFENCE_VMA;
  reg                 execute_to_memory_IS_SFENCE_VMA;
  reg                 memory_to_writeBack_IS_SFENCE_VMA;
  reg                 decode_to_execute_SRC_USE_SUB_LESS;
  reg                 decode_to_execute_MEMORY_ENABLE;
  reg                 execute_to_memory_MEMORY_ENABLE;
  reg                 memory_to_writeBack_MEMORY_ENABLE;
  reg        `AluCtrlEnum_defaultEncoding_type decode_to_execute_ALU_CTRL;
  reg                 decode_to_execute_REGFILE_WRITE_VALID;
  reg                 execute_to_memory_REGFILE_WRITE_VALID;
  reg                 memory_to_writeBack_REGFILE_WRITE_VALID;
  reg                 decode_to_execute_BYPASSABLE_EXECUTE_STAGE;
  reg                 decode_to_execute_BYPASSABLE_MEMORY_STAGE;
  reg                 execute_to_memory_BYPASSABLE_MEMORY_STAGE;
  reg                 decode_to_execute_MEMORY_WR;
  reg                 execute_to_memory_MEMORY_WR;
  reg                 memory_to_writeBack_MEMORY_WR;
  reg                 decode_to_execute_MEMORY_LRSC;
  reg                 execute_to_memory_MEMORY_LRSC;
  reg                 memory_to_writeBack_MEMORY_LRSC;
  reg                 decode_to_execute_MEMORY_AMO;
  reg                 execute_to_memory_MEMORY_AMO;
  reg                 memory_to_writeBack_MEMORY_AMO;
  reg                 decode_to_execute_MEMORY_MANAGMENT;
  reg                 decode_to_execute_MEMORY_FENCE;
  reg                 execute_to_memory_MEMORY_FENCE;
  reg                 memory_to_writeBack_MEMORY_FENCE;
  reg                 decode_to_execute_SRC_LESS_UNSIGNED;
  reg        `AluBitwiseCtrlEnum_defaultEncoding_type decode_to_execute_ALU_BITWISE_CTRL;
  reg        `ShiftCtrlEnum_1_defaultEncoding_type decode_to_execute_SHIFT_CTRL;
  reg                 decode_to_execute_IS_MUL;
  reg                 execute_to_memory_IS_MUL;
  reg                 memory_to_writeBack_IS_MUL;
  reg                 decode_to_execute_IS_DIV;
  reg                 execute_to_memory_IS_DIV;
  reg                 decode_to_execute_IS_RS1_SIGNED;
  reg                 decode_to_execute_IS_RS2_SIGNED;
  reg                 decode_to_execute_IS_CSR;
  reg        `EnvCtrlEnum_1_defaultEncoding_type decode_to_execute_ENV_CTRL;
  reg        `EnvCtrlEnum_1_defaultEncoding_type execute_to_memory_ENV_CTRL;
  reg        `EnvCtrlEnum_1_defaultEncoding_type memory_to_writeBack_ENV_CTRL;
  reg        `BranchCtrlEnum_defaultEncoding_type decode_to_execute_BRANCH_CTRL;
  reg                 decode_to_execute_IS_AES;
  reg                 execute_to_memory_IS_AES;
  reg                 memory_to_writeBack_IS_AES;
  reg        [31:0]   decode_to_execute_RS1;
  reg        [31:0]   execute_to_memory_RS1;
  reg        [31:0]   decode_to_execute_RS2;
  reg                 decode_to_execute_SRC2_FORCE_ZERO;
  reg        [31:0]   decode_to_execute_SRC1;
  reg        [31:0]   decode_to_execute_SRC2;
  reg                 decode_to_execute_CSR_WRITE_OPCODE;
  reg                 decode_to_execute_CSR_READ_OPCODE;
  reg                 decode_to_execute_DO_EBREAK;
  reg        [1:0]    execute_to_memory_MEMORY_ADDRESS_LOW;
  reg        [1:0]    memory_to_writeBack_MEMORY_ADDRESS_LOW;
  (* keep , syn_keep *) reg        [31:0]   execute_to_memory_MEMORY_VIRTUAL_ADDRESS /* synthesis syn_keep = 1 */ ;
  reg                 execute_to_memory_IS_DBUS_SHARING;
  reg                 memory_to_writeBack_IS_DBUS_SHARING;
  reg        [31:0]   execute_to_memory_REGFILE_WRITE_DATA;
  reg        [31:0]   memory_to_writeBack_REGFILE_WRITE_DATA;
  reg        [31:0]   execute_to_memory_MUL_LL;
  reg        [33:0]   execute_to_memory_MUL_LH;
  reg        [33:0]   execute_to_memory_MUL_HL;
  reg        [33:0]   execute_to_memory_MUL_HH;
  reg        [33:0]   memory_to_writeBack_MUL_HH;
  reg                 execute_to_memory_BRANCH_DO;
  reg        [31:0]   execute_to_memory_BRANCH_CALC;
  reg        [51:0]   memory_to_writeBack_MUL_LOW;
  reg        [31:0]   memory_to_writeBack_CALC;
  reg        [2:0]    _zz_148;
  reg                 execute_CsrPlugin_csr_768;
  reg                 execute_CsrPlugin_csr_256;
  reg                 execute_CsrPlugin_csr_384;
  reg                 execute_CsrPlugin_csr_3857;
  reg                 execute_CsrPlugin_csr_3858;
  reg                 execute_CsrPlugin_csr_3859;
  reg                 execute_CsrPlugin_csr_3860;
  reg                 execute_CsrPlugin_csr_769;
  reg                 execute_CsrPlugin_csr_836;
  reg                 execute_CsrPlugin_csr_772;
  reg                 execute_CsrPlugin_csr_773;
  reg                 execute_CsrPlugin_csr_833;
  reg                 execute_CsrPlugin_csr_832;
  reg                 execute_CsrPlugin_csr_834;
  reg                 execute_CsrPlugin_csr_835;
  reg                 execute_CsrPlugin_csr_770;
  reg                 execute_CsrPlugin_csr_771;
  reg                 execute_CsrPlugin_csr_3073;
  reg                 execute_CsrPlugin_csr_3201;
  reg                 execute_CsrPlugin_csr_324;
  reg                 execute_CsrPlugin_csr_260;
  reg                 execute_CsrPlugin_csr_261;
  reg                 execute_CsrPlugin_csr_321;
  reg                 execute_CsrPlugin_csr_320;
  reg                 execute_CsrPlugin_csr_322;
  reg                 execute_CsrPlugin_csr_323;
  reg        [31:0]   _zz_149;
  reg        [31:0]   _zz_150;
  reg        [31:0]   _zz_151;
  reg        [31:0]   _zz_152;
  reg        [31:0]   _zz_153;
  reg        [31:0]   _zz_154;
  reg        [31:0]   _zz_155;
  reg        [31:0]   _zz_156;
  reg        [31:0]   _zz_157;
  reg        [31:0]   _zz_158;
  reg        [31:0]   _zz_159;
  reg        [31:0]   _zz_160;
  reg        [31:0]   _zz_161;
  reg        [31:0]   _zz_162;
  reg        [31:0]   _zz_163;
  reg        [31:0]   _zz_164;
  reg        [31:0]   _zz_165;
  reg        [31:0]   _zz_166;
  reg        [31:0]   _zz_167;
  reg        [31:0]   _zz_168;
  reg        [31:0]   _zz_169;
  reg        [31:0]   _zz_170;
  reg        [31:0]   _zz_171;
  `ifndef SYNTHESIS
  reg [31:0] decode_BRANCH_CTRL_string;
  reg [31:0] _zz_1_string;
  reg [31:0] _zz_2_string;
  reg [31:0] _zz_3_string;
  reg [39:0] _zz_4_string;
  reg [39:0] _zz_5_string;
  reg [39:0] _zz_6_string;
  reg [39:0] _zz_7_string;
  reg [39:0] decode_ENV_CTRL_string;
  reg [39:0] _zz_8_string;
  reg [39:0] _zz_9_string;
  reg [39:0] _zz_10_string;
  reg [71:0] decode_SHIFT_CTRL_string;
  reg [71:0] _zz_11_string;
  reg [71:0] _zz_12_string;
  reg [71:0] _zz_13_string;
  reg [39:0] decode_ALU_BITWISE_CTRL_string;
  reg [39:0] _zz_14_string;
  reg [39:0] _zz_15_string;
  reg [39:0] _zz_16_string;
  reg [63:0] decode_ALU_CTRL_string;
  reg [63:0] _zz_17_string;
  reg [63:0] _zz_18_string;
  reg [63:0] _zz_19_string;
  reg [31:0] execute_BRANCH_CTRL_string;
  reg [31:0] _zz_20_string;
  reg [39:0] memory_ENV_CTRL_string;
  reg [39:0] _zz_21_string;
  reg [39:0] execute_ENV_CTRL_string;
  reg [39:0] _zz_22_string;
  reg [39:0] writeBack_ENV_CTRL_string;
  reg [39:0] _zz_23_string;
  reg [71:0] execute_SHIFT_CTRL_string;
  reg [71:0] _zz_26_string;
  reg [23:0] decode_SRC2_CTRL_string;
  reg [23:0] _zz_29_string;
  reg [95:0] decode_SRC1_CTRL_string;
  reg [95:0] _zz_31_string;
  reg [63:0] execute_ALU_CTRL_string;
  reg [63:0] _zz_32_string;
  reg [39:0] execute_ALU_BITWISE_CTRL_string;
  reg [39:0] _zz_33_string;
  reg [31:0] _zz_37_string;
  reg [39:0] _zz_38_string;
  reg [71:0] _zz_39_string;
  reg [39:0] _zz_40_string;
  reg [23:0] _zz_41_string;
  reg [63:0] _zz_42_string;
  reg [95:0] _zz_43_string;
  reg [47:0] MmuPlugin_shared_state_1_string;
  reg [95:0] _zz_94_string;
  reg [63:0] _zz_95_string;
  reg [23:0] _zz_96_string;
  reg [39:0] _zz_97_string;
  reg [71:0] _zz_98_string;
  reg [39:0] _zz_99_string;
  reg [31:0] _zz_100_string;
  reg [63:0] decode_to_execute_ALU_CTRL_string;
  reg [39:0] decode_to_execute_ALU_BITWISE_CTRL_string;
  reg [71:0] decode_to_execute_SHIFT_CTRL_string;
  reg [39:0] decode_to_execute_ENV_CTRL_string;
  reg [39:0] execute_to_memory_ENV_CTRL_string;
  reg [39:0] memory_to_writeBack_ENV_CTRL_string;
  reg [31:0] decode_to_execute_BRANCH_CTRL_string;
  `endif

  (* ram_style = "distributed" *) reg [31:0] RegFilePlugin_regFile [0:31] /* verilator public */ ;
  reg [31:0] memory_AesPlugin_rom_storage [0:511];

  assign _zz_241 = (memory_arbitration_isValid && memory_IS_DIV);
  assign _zz_242 = (writeBack_arbitration_isValid && writeBack_REGFILE_WRITE_VALID);
  assign _zz_243 = 1'b1;
  assign _zz_244 = (memory_arbitration_isValid && memory_REGFILE_WRITE_VALID);
  assign _zz_245 = (execute_arbitration_isValid && execute_REGFILE_WRITE_VALID);
  assign _zz_246 = (execute_arbitration_isValid && execute_IS_CSR);
  assign _zz_247 = ((_zz_177 && IBusCachedPlugin_cache_io_cpu_decode_error) && (! IBusCachedPlugin_rsp_issueDetected_3));
  assign _zz_248 = ((_zz_177 && IBusCachedPlugin_cache_io_cpu_decode_cacheMiss) && (! IBusCachedPlugin_rsp_issueDetected_2));
  assign _zz_249 = ((_zz_177 && IBusCachedPlugin_cache_io_cpu_decode_mmuException) && (! IBusCachedPlugin_rsp_issueDetected_1));
  assign _zz_250 = ((_zz_177 && IBusCachedPlugin_cache_io_cpu_decode_mmuRefilling) && (! IBusCachedPlugin_rsp_issueDetected));
  assign _zz_251 = ({decodeExceptionPort_valid,IBusCachedPlugin_decodeExceptionPort_valid} != 2'b00);
  assign _zz_252 = (execute_arbitration_isValid && (execute_ENV_CTRL == `EnvCtrlEnum_1_defaultEncoding_WFI));
  assign _zz_253 = (execute_arbitration_isValid && execute_DO_EBREAK);
  assign _zz_254 = (({writeBack_arbitration_isValid,memory_arbitration_isValid} != 2'b00) == 1'b0);
  assign _zz_255 = (CsrPlugin_hadException || CsrPlugin_interruptJump);
  assign _zz_256 = (writeBack_arbitration_isValid && (writeBack_ENV_CTRL == `EnvCtrlEnum_1_defaultEncoding_XRET));
  assign _zz_257 = (DebugPlugin_stepIt && IBusCachedPlugin_incomingInstruction);
  assign _zz_258 = writeBack_INSTRUCTION[29 : 28];
  assign _zz_259 = ((MmuPlugin_shared_dBusRspStaged_valid && (! MmuPlugin_shared_dBusRspStaged_payload_redo)) && (MmuPlugin_shared_dBusRsp_leaf || MmuPlugin_shared_dBusRsp_exception));
  assign _zz_260 = MmuPlugin_shared_portSortedOh[0];
  assign _zz_261 = MmuPlugin_shared_portSortedOh[1];
  assign _zz_262 = (! ({(writeBack_arbitration_isValid || CsrPlugin_exceptionPendings_3),{(memory_arbitration_isValid || CsrPlugin_exceptionPendings_2),(execute_arbitration_isValid || CsrPlugin_exceptionPendings_1)}} != 3'b000));
  assign _zz_263 = (! dataCache_2_io_cpu_execute_refilling);
  assign _zz_264 = ((! writeBack_MEMORY_FENCE) || (! writeBack_arbitration_isFiring));
  assign _zz_265 = (writeBack_arbitration_isValid && writeBack_MEMORY_ENABLE);
  assign _zz_266 = (writeBack_arbitration_isValid && writeBack_REGFILE_WRITE_VALID);
  assign _zz_267 = (1'b0 || (! 1'b1));
  assign _zz_268 = (memory_arbitration_isValid && memory_REGFILE_WRITE_VALID);
  assign _zz_269 = (1'b0 || (! memory_BYPASSABLE_MEMORY_STAGE));
  assign _zz_270 = (execute_arbitration_isValid && execute_REGFILE_WRITE_VALID);
  assign _zz_271 = (1'b0 || (! execute_BYPASSABLE_EXECUTE_STAGE));
  assign _zz_272 = execute_INSTRUCTION[13 : 12];
  assign _zz_273 = (memory_MulDivIterativePlugin_frontendOk && (! memory_MulDivIterativePlugin_div_done));
  assign _zz_274 = (! memory_arbitration_isStuck);
  assign _zz_275 = (CsrPlugin_privilege < execute_CsrPlugin_csrAddress[9 : 8]);
  assign _zz_276 = (execute_CsrPlugin_illegalAccess || execute_CsrPlugin_illegalInstruction);
  assign _zz_277 = (execute_arbitration_isValid && (execute_ENV_CTRL == `EnvCtrlEnum_1_defaultEncoding_ECALL));
  assign _zz_278 = debug_bus_cmd_payload_address[7 : 2];
  assign _zz_279 = (MmuPlugin_shared_refills != 2'b00);
  assign _zz_280 = (MmuPlugin_ports_0_entryToReplace_value == 2'b00);
  assign _zz_281 = (MmuPlugin_ports_0_entryToReplace_value == 2'b01);
  assign _zz_282 = (MmuPlugin_ports_0_entryToReplace_value == 2'b10);
  assign _zz_283 = (MmuPlugin_ports_0_entryToReplace_value == 2'b11);
  assign _zz_284 = (MmuPlugin_ports_1_entryToReplace_value == 2'b00);
  assign _zz_285 = (MmuPlugin_ports_1_entryToReplace_value == 2'b01);
  assign _zz_286 = (MmuPlugin_ports_1_entryToReplace_value == 2'b10);
  assign _zz_287 = (MmuPlugin_ports_1_entryToReplace_value == 2'b11);
  assign _zz_288 = (_zz_205 && (! dataCache_2_io_mem_cmd_s2mPipe_ready));
  assign _zz_289 = ((CsrPlugin_sstatus_SIE && (CsrPlugin_privilege == 2'b01)) || (CsrPlugin_privilege < 2'b01));
  assign _zz_290 = ((_zz_128 && (1'b1 && CsrPlugin_mideleg_ST)) && (! 1'b0));
  assign _zz_291 = ((_zz_129 && (1'b1 && CsrPlugin_mideleg_SS)) && (! 1'b0));
  assign _zz_292 = ((_zz_130 && (1'b1 && CsrPlugin_mideleg_SE)) && (! 1'b0));
  assign _zz_293 = (CsrPlugin_mstatus_MIE || (CsrPlugin_privilege < 2'b11));
  assign _zz_294 = ((_zz_128 && 1'b1) && (! (CsrPlugin_mideleg_ST != 1'b0)));
  assign _zz_295 = ((_zz_129 && 1'b1) && (! (CsrPlugin_mideleg_SS != 1'b0)));
  assign _zz_296 = ((_zz_130 && 1'b1) && (! (CsrPlugin_mideleg_SE != 1'b0)));
  assign _zz_297 = ((_zz_131 && 1'b1) && (! 1'b0));
  assign _zz_298 = ((_zz_132 && 1'b1) && (! 1'b0));
  assign _zz_299 = ((_zz_133 && 1'b1) && (! 1'b0));
  assign _zz_300 = writeBack_INSTRUCTION[13 : 12];
  assign _zz_301 = writeBack_INSTRUCTION[13 : 12];
  assign _zz_302 = execute_INSTRUCTION[13];
  assign _zz_303 = ($signed(_zz_304) + $signed(_zz_309));
  assign _zz_304 = ($signed(_zz_305) + $signed(_zz_307));
  assign _zz_305 = 52'h0;
  assign _zz_306 = {1'b0,memory_MUL_LL};
  assign _zz_307 = {{19{_zz_306[32]}}, _zz_306};
  assign _zz_308 = ({16'd0,memory_MUL_LH} <<< 16);
  assign _zz_309 = {{2{_zz_308[49]}}, _zz_308};
  assign _zz_310 = ({16'd0,memory_MUL_HL} <<< 16);
  assign _zz_311 = {{2{_zz_310[49]}}, _zz_310};
  assign _zz_312 = _zz_85[36 : 36];
  assign _zz_313 = _zz_85[31 : 31];
  assign _zz_314 = _zz_85[30 : 30];
  assign _zz_315 = _zz_85[29 : 29];
  assign _zz_316 = _zz_85[28 : 28];
  assign _zz_317 = _zz_85[27 : 27];
  assign _zz_318 = _zz_85[22 : 22];
  assign _zz_319 = _zz_85[21 : 21];
  assign _zz_320 = _zz_85[20 : 20];
  assign _zz_321 = _zz_85[14 : 14];
  assign _zz_322 = _zz_85[13 : 13];
  assign _zz_323 = _zz_85[12 : 12];
  assign _zz_324 = _zz_85[0 : 0];
  assign _zz_325 = _zz_85[37 : 37];
  assign _zz_326 = _zz_85[18 : 18];
  assign _zz_327 = _zz_85[6 : 6];
  assign _zz_328 = ($signed(_zz_330) >>> execute_FullBarrelShifterPlugin_amplitude);
  assign _zz_329 = _zz_328[31 : 0];
  assign _zz_330 = {((execute_SHIFT_CTRL == `ShiftCtrlEnum_1_defaultEncoding_SRA_1) && execute_FullBarrelShifterPlugin_reversed[31]),execute_FullBarrelShifterPlugin_reversed};
  assign _zz_331 = _zz_85[4 : 4];
  assign _zz_332 = _zz_85[19 : 19];
  assign _zz_333 = _zz_85[11 : 11];
  assign _zz_334 = _zz_85[17 : 17];
  assign _zz_335 = _zz_85[16 : 16];
  assign _zz_336 = _zz_85[5 : 5];
  assign _zz_337 = _zz_85[1 : 1];
  assign _zz_338 = MmuPlugin_ports_0_entryToReplace_willIncrement;
  assign _zz_339 = {1'd0, _zz_338};
  assign _zz_340 = MmuPlugin_ports_1_entryToReplace_willIncrement;
  assign _zz_341 = {1'd0, _zz_340};
  assign _zz_342 = MmuPlugin_shared_dBusRspStaged_payload_data[0 : 0];
  assign _zz_343 = MmuPlugin_shared_dBusRspStaged_payload_data[1 : 1];
  assign _zz_344 = MmuPlugin_shared_dBusRspStaged_payload_data[2 : 2];
  assign _zz_345 = MmuPlugin_shared_dBusRspStaged_payload_data[3 : 3];
  assign _zz_346 = MmuPlugin_shared_dBusRspStaged_payload_data[4 : 4];
  assign _zz_347 = MmuPlugin_shared_dBusRspStaged_payload_data[5 : 5];
  assign _zz_348 = MmuPlugin_shared_dBusRspStaged_payload_data[6 : 6];
  assign _zz_349 = MmuPlugin_shared_dBusRspStaged_payload_data[7 : 7];
  assign _zz_350 = (_zz_59 - 2'b01);
  assign _zz_351 = (_zz_63 - 4'b0001);
  assign _zz_352 = {IBusCachedPlugin_fetchPc_inc,2'b00};
  assign _zz_353 = {29'd0, _zz_352};
  assign _zz_354 = _zz_80[0 : 0];
  assign _zz_355 = _zz_80[1 : 1];
  assign _zz_356 = _zz_80[2 : 2];
  assign _zz_357 = _zz_80[3 : 3];
  assign _zz_358 = _zz_80[4 : 4];
  assign _zz_359 = _zz_80[5 : 5];
  assign _zz_360 = _zz_80[6 : 6];
  assign _zz_361 = _zz_80[7 : 7];
  assign _zz_362 = (writeBack_MEMORY_WR ? 3'b111 : 3'b101);
  assign _zz_363 = (writeBack_MEMORY_WR ? 3'b110 : 3'b100);
  assign _zz_364 = execute_SRC_LESS;
  assign _zz_365 = 3'b100;
  assign _zz_366 = decode_INSTRUCTION[19 : 15];
  assign _zz_367 = decode_INSTRUCTION[31 : 20];
  assign _zz_368 = {decode_INSTRUCTION[31 : 25],decode_INSTRUCTION[11 : 7]};
  assign _zz_369 = ($signed(_zz_370) + $signed(_zz_373));
  assign _zz_370 = ($signed(_zz_371) + $signed(_zz_372));
  assign _zz_371 = execute_SRC1;
  assign _zz_372 = (execute_SRC_USE_SUB_LESS ? (~ execute_SRC2) : execute_SRC2);
  assign _zz_373 = (execute_SRC_USE_SUB_LESS ? _zz_374 : _zz_375);
  assign _zz_374 = 32'h00000001;
  assign _zz_375 = 32'h0;
  assign _zz_376 = {{14{writeBack_MUL_LOW[51]}}, writeBack_MUL_LOW};
  assign _zz_377 = ({32'd0,writeBack_MUL_HH} <<< 32);
  assign _zz_378 = writeBack_MUL_LOW[31 : 0];
  assign _zz_379 = writeBack_MulPlugin_result[63 : 32];
  assign _zz_380 = memory_MulDivIterativePlugin_div_counter_willIncrement;
  assign _zz_381 = {5'd0, _zz_380};
  assign _zz_382 = {1'd0, memory_MulDivIterativePlugin_rs2};
  assign _zz_383 = memory_MulDivIterativePlugin_div_stage_0_remainderMinusDenominator[31:0];
  assign _zz_384 = memory_MulDivIterativePlugin_div_stage_0_remainderShifted[31:0];
  assign _zz_385 = {_zz_122,(! memory_MulDivIterativePlugin_div_stage_0_remainderMinusDenominator[32])};
  assign _zz_386 = _zz_387;
  assign _zz_387 = _zz_388;
  assign _zz_388 = ({1'b0,(memory_MulDivIterativePlugin_div_needRevert ? (~ _zz_123) : _zz_123)} + _zz_390);
  assign _zz_389 = memory_MulDivIterativePlugin_div_needRevert;
  assign _zz_390 = {32'd0, _zz_389};
  assign _zz_391 = _zz_125;
  assign _zz_392 = {32'd0, _zz_391};
  assign _zz_393 = _zz_124;
  assign _zz_394 = {31'd0, _zz_393};
  assign _zz_395 = (_zz_134 & (~ _zz_396));
  assign _zz_396 = (_zz_134 - 2'b01);
  assign _zz_397 = {{{execute_INSTRUCTION[31],execute_INSTRUCTION[19 : 12]},execute_INSTRUCTION[20]},execute_INSTRUCTION[30 : 21]};
  assign _zz_398 = execute_INSTRUCTION[31 : 20];
  assign _zz_399 = {{{execute_INSTRUCTION[31],execute_INSTRUCTION[7]},execute_INSTRUCTION[30 : 25]},execute_INSTRUCTION[11 : 8]};
  assign _zz_400 = execute_CsrPlugin_writeData[19 : 19];
  assign _zz_401 = execute_CsrPlugin_writeData[18 : 18];
  assign _zz_402 = execute_CsrPlugin_writeData[17 : 17];
  assign _zz_403 = execute_CsrPlugin_writeData[7 : 7];
  assign _zz_404 = execute_CsrPlugin_writeData[3 : 3];
  assign _zz_405 = execute_CsrPlugin_writeData[5 : 5];
  assign _zz_406 = execute_CsrPlugin_writeData[1 : 1];
  assign _zz_407 = execute_CsrPlugin_writeData[19 : 19];
  assign _zz_408 = execute_CsrPlugin_writeData[18 : 18];
  assign _zz_409 = execute_CsrPlugin_writeData[17 : 17];
  assign _zz_410 = execute_CsrPlugin_writeData[5 : 5];
  assign _zz_411 = execute_CsrPlugin_writeData[1 : 1];
  assign _zz_412 = execute_CsrPlugin_writeData[31 : 31];
  assign _zz_413 = execute_CsrPlugin_writeData[3 : 3];
  assign _zz_414 = execute_CsrPlugin_writeData[5 : 5];
  assign _zz_415 = execute_CsrPlugin_writeData[1 : 1];
  assign _zz_416 = execute_CsrPlugin_writeData[9 : 9];
  assign _zz_417 = execute_CsrPlugin_writeData[11 : 11];
  assign _zz_418 = execute_CsrPlugin_writeData[7 : 7];
  assign _zz_419 = execute_CsrPlugin_writeData[3 : 3];
  assign _zz_420 = execute_CsrPlugin_writeData[9 : 9];
  assign _zz_421 = execute_CsrPlugin_writeData[5 : 5];
  assign _zz_422 = execute_CsrPlugin_writeData[1 : 1];
  assign _zz_423 = execute_CsrPlugin_writeData[0 : 0];
  assign _zz_424 = execute_CsrPlugin_writeData[1 : 1];
  assign _zz_425 = execute_CsrPlugin_writeData[2 : 2];
  assign _zz_426 = execute_CsrPlugin_writeData[4 : 4];
  assign _zz_427 = execute_CsrPlugin_writeData[5 : 5];
  assign _zz_428 = execute_CsrPlugin_writeData[6 : 6];
  assign _zz_429 = execute_CsrPlugin_writeData[7 : 7];
  assign _zz_430 = execute_CsrPlugin_writeData[8 : 8];
  assign _zz_431 = execute_CsrPlugin_writeData[9 : 9];
  assign _zz_432 = execute_CsrPlugin_writeData[12 : 12];
  assign _zz_433 = execute_CsrPlugin_writeData[13 : 13];
  assign _zz_434 = execute_CsrPlugin_writeData[15 : 15];
  assign _zz_435 = execute_CsrPlugin_writeData[9 : 9];
  assign _zz_436 = execute_CsrPlugin_writeData[5 : 5];
  assign _zz_437 = execute_CsrPlugin_writeData[1 : 1];
  assign _zz_438 = execute_CsrPlugin_writeData[5 : 5];
  assign _zz_439 = execute_CsrPlugin_writeData[1 : 1];
  assign _zz_440 = execute_CsrPlugin_writeData[9 : 9];
  assign _zz_441 = execute_CsrPlugin_writeData[9 : 9];
  assign _zz_442 = execute_CsrPlugin_writeData[5 : 5];
  assign _zz_443 = execute_CsrPlugin_writeData[1 : 1];
  assign _zz_444 = execute_CsrPlugin_writeData[31 : 31];
  assign _zz_445 = {_zz_67,_zz_66};
  assign _zz_446 = 32'h0000107f;
  assign _zz_447 = (decode_INSTRUCTION & 32'h0000207f);
  assign _zz_448 = 32'h00002073;
  assign _zz_449 = ((decode_INSTRUCTION & 32'h0000407f) == 32'h00004063);
  assign _zz_450 = ((decode_INSTRUCTION & 32'h0000207f) == 32'h00002013);
  assign _zz_451 = {((decode_INSTRUCTION & 32'h0000603f) == 32'h00000023),{((decode_INSTRUCTION & 32'h0000207f) == 32'h00000003),{((decode_INSTRUCTION & _zz_452) == 32'h00000003),{(_zz_453 == _zz_454),{_zz_455,{_zz_456,_zz_457}}}}}};
  assign _zz_452 = 32'h0000505f;
  assign _zz_453 = (decode_INSTRUCTION & 32'h0000707b);
  assign _zz_454 = 32'h00000063;
  assign _zz_455 = ((decode_INSTRUCTION & 32'h0000607f) == 32'h0000000f);
  assign _zz_456 = ((decode_INSTRUCTION & 32'h0000707b) == 32'h0000000b);
  assign _zz_457 = {((decode_INSTRUCTION & 32'h1800707f) == 32'h0000202f),{((decode_INSTRUCTION & 32'hfc00007f) == 32'h00000033),{((decode_INSTRUCTION & _zz_458) == 32'h0800202f),{(_zz_459 == _zz_460),{_zz_461,{_zz_462,_zz_463}}}}}};
  assign _zz_458 = 32'he800707f;
  assign _zz_459 = (decode_INSTRUCTION & 32'h01f0707f);
  assign _zz_460 = 32'h0000500f;
  assign _zz_461 = ((decode_INSTRUCTION & 32'hbc00707f) == 32'h00005013);
  assign _zz_462 = ((decode_INSTRUCTION & 32'hfc00307f) == 32'h00001013);
  assign _zz_463 = {((decode_INSTRUCTION & 32'hbe00707f) == 32'h00005033),{((decode_INSTRUCTION & 32'hbe00707f) == 32'h00000033),{((decode_INSTRUCTION & _zz_464) == 32'h1000202f),{(_zz_465 == _zz_466),{_zz_467,{_zz_468,_zz_469}}}}}};
  assign _zz_464 = 32'hf9f0707f;
  assign _zz_465 = (decode_INSTRUCTION & 32'hfe007fff);
  assign _zz_466 = 32'h12000073;
  assign _zz_467 = ((decode_INSTRUCTION & 32'hdfffffff) == 32'h10200073);
  assign _zz_468 = ((decode_INSTRUCTION & 32'hffefffff) == 32'h00000073);
  assign _zz_469 = ((decode_INSTRUCTION & 32'hffffffff) == 32'h10500073);
  assign _zz_470 = 32'h10103050;
  assign _zz_471 = _zz_87;
  assign _zz_472 = ((decode_INSTRUCTION & 32'h0000001c) == 32'h00000004);
  assign _zz_473 = ((decode_INSTRUCTION & 32'h00000058) == 32'h00000040);
  assign _zz_474 = 1'b0;
  assign _zz_475 = ({(_zz_478 == _zz_479),(_zz_480 == _zz_481)} != 2'b00);
  assign _zz_476 = ((_zz_482 == _zz_483) != 1'b0);
  assign _zz_477 = {({_zz_484,_zz_485} != 2'b00),{(_zz_486 != _zz_487),{_zz_488,{_zz_489,_zz_490}}}};
  assign _zz_478 = (decode_INSTRUCTION & 32'h10103050);
  assign _zz_479 = 32'h00000050;
  assign _zz_480 = (decode_INSTRUCTION & 32'h12203050);
  assign _zz_481 = 32'h10000050;
  assign _zz_482 = (decode_INSTRUCTION & 32'h02103050);
  assign _zz_483 = 32'h00000050;
  assign _zz_484 = ((decode_INSTRUCTION & 32'h00001050) == 32'h00001050);
  assign _zz_485 = ((decode_INSTRUCTION & 32'h00002050) == 32'h00002050);
  assign _zz_486 = _zz_93;
  assign _zz_487 = 1'b0;
  assign _zz_488 = (_zz_93 != 1'b0);
  assign _zz_489 = ((_zz_491 == _zz_492) != 1'b0);
  assign _zz_490 = {(_zz_493 != 1'b0),{(_zz_494 != _zz_495),{_zz_496,{_zz_497,_zz_498}}}};
  assign _zz_491 = (decode_INSTRUCTION & 32'h02004064);
  assign _zz_492 = 32'h02004020;
  assign _zz_493 = ((decode_INSTRUCTION & 32'h02004074) == 32'h02000030);
  assign _zz_494 = {(_zz_499 == _zz_500),(_zz_501 == _zz_502)};
  assign _zz_495 = 2'b00;
  assign _zz_496 = ({_zz_503,{_zz_504,_zz_505}} != 3'b000);
  assign _zz_497 = (_zz_506 != 1'b0);
  assign _zz_498 = {(_zz_507 != _zz_508),{_zz_509,{_zz_510,_zz_511}}};
  assign _zz_499 = (decode_INSTRUCTION & 32'h00007034);
  assign _zz_500 = 32'h00005010;
  assign _zz_501 = (decode_INSTRUCTION & 32'h02007064);
  assign _zz_502 = 32'h00005020;
  assign _zz_503 = ((decode_INSTRUCTION & 32'h40003054) == 32'h40001010);
  assign _zz_504 = ((decode_INSTRUCTION & _zz_512) == 32'h00001010);
  assign _zz_505 = ((decode_INSTRUCTION & _zz_513) == 32'h00001010);
  assign _zz_506 = ((decode_INSTRUCTION & 32'h00001000) == 32'h00001000);
  assign _zz_507 = ((decode_INSTRUCTION & _zz_514) == 32'h00002000);
  assign _zz_508 = 1'b0;
  assign _zz_509 = ({_zz_515,_zz_516} != 2'b00);
  assign _zz_510 = (_zz_517 != 1'b0);
  assign _zz_511 = {(_zz_518 != _zz_519),{_zz_520,{_zz_521,_zz_522}}};
  assign _zz_512 = 32'h00007034;
  assign _zz_513 = 32'h02007054;
  assign _zz_514 = 32'h00003000;
  assign _zz_515 = ((decode_INSTRUCTION & 32'h00002010) == 32'h00002000);
  assign _zz_516 = ((decode_INSTRUCTION & 32'h00005000) == 32'h00001000);
  assign _zz_517 = ((decode_INSTRUCTION & 32'h00003054) == 32'h00000004);
  assign _zz_518 = ((decode_INSTRUCTION & _zz_523) == 32'h00004008);
  assign _zz_519 = 1'b0;
  assign _zz_520 = ((_zz_524 == _zz_525) != 1'b0);
  assign _zz_521 = ({_zz_526,_zz_527} != 5'h0);
  assign _zz_522 = {(_zz_528 != _zz_529),{_zz_530,{_zz_531,_zz_532}}};
  assign _zz_523 = 32'h00004048;
  assign _zz_524 = (decode_INSTRUCTION & 32'h00000064);
  assign _zz_525 = 32'h00000024;
  assign _zz_526 = _zz_92;
  assign _zz_527 = {(_zz_533 == _zz_534),{_zz_535,{_zz_536,_zz_537}}};
  assign _zz_528 = ((decode_INSTRUCTION & _zz_538) == 32'h00000008);
  assign _zz_529 = 1'b0;
  assign _zz_530 = ((_zz_539 == _zz_540) != 1'b0);
  assign _zz_531 = ({_zz_541,_zz_542} != 6'h0);
  assign _zz_532 = {(_zz_543 != _zz_544),{_zz_545,{_zz_546,_zz_547}}};
  assign _zz_533 = (decode_INSTRUCTION & 32'h00000034);
  assign _zz_534 = 32'h00000020;
  assign _zz_535 = ((decode_INSTRUCTION & _zz_548) == 32'h00000020);
  assign _zz_536 = (_zz_549 == _zz_550);
  assign _zz_537 = (_zz_551 == _zz_552);
  assign _zz_538 = 32'h10000008;
  assign _zz_539 = (decode_INSTRUCTION & 32'h10000008);
  assign _zz_540 = 32'h10000008;
  assign _zz_541 = (_zz_553 == _zz_554);
  assign _zz_542 = {_zz_555,{_zz_556,_zz_557}};
  assign _zz_543 = {_zz_558,{_zz_559,_zz_560}};
  assign _zz_544 = 3'b000;
  assign _zz_545 = ({_zz_561,_zz_562} != 5'h0);
  assign _zz_546 = (_zz_563 != _zz_564);
  assign _zz_547 = {_zz_565,{_zz_566,_zz_567}};
  assign _zz_548 = 32'h00000064;
  assign _zz_549 = (decode_INSTRUCTION & 32'h08000070);
  assign _zz_550 = 32'h08000020;
  assign _zz_551 = (decode_INSTRUCTION & 32'h10000070);
  assign _zz_552 = 32'h00000020;
  assign _zz_553 = (decode_INSTRUCTION & 32'h00002040);
  assign _zz_554 = 32'h00002040;
  assign _zz_555 = ((decode_INSTRUCTION & _zz_568) == 32'h00001040);
  assign _zz_556 = (_zz_569 == _zz_570);
  assign _zz_557 = {_zz_571,{_zz_572,_zz_573}};
  assign _zz_558 = ((decode_INSTRUCTION & _zz_574) == 32'h08000020);
  assign _zz_559 = (_zz_575 == _zz_576);
  assign _zz_560 = (_zz_577 == _zz_578);
  assign _zz_561 = (_zz_579 == _zz_580);
  assign _zz_562 = {_zz_581,{_zz_582,_zz_583}};
  assign _zz_563 = {_zz_91,{_zz_584,_zz_585}};
  assign _zz_564 = 3'b000;
  assign _zz_565 = ({_zz_586,_zz_587} != 7'h0);
  assign _zz_566 = (_zz_588 != _zz_589);
  assign _zz_567 = {_zz_590,{_zz_591,_zz_592}};
  assign _zz_568 = 32'h00001040;
  assign _zz_569 = (decode_INSTRUCTION & 32'h00000050);
  assign _zz_570 = 32'h00000040;
  assign _zz_571 = ((decode_INSTRUCTION & _zz_593) == 32'h00000040);
  assign _zz_572 = (_zz_594 == _zz_595);
  assign _zz_573 = (_zz_596 == _zz_597);
  assign _zz_574 = 32'h08000020;
  assign _zz_575 = (decode_INSTRUCTION & 32'h10000020);
  assign _zz_576 = 32'h00000020;
  assign _zz_577 = (decode_INSTRUCTION & 32'h00000028);
  assign _zz_578 = 32'h00000020;
  assign _zz_579 = (decode_INSTRUCTION & 32'h00000040);
  assign _zz_580 = 32'h00000040;
  assign _zz_581 = ((decode_INSTRUCTION & _zz_598) == 32'h00004020);
  assign _zz_582 = _zz_91;
  assign _zz_583 = {_zz_90,_zz_599};
  assign _zz_584 = _zz_90;
  assign _zz_585 = (_zz_600 == _zz_601);
  assign _zz_586 = _zz_87;
  assign _zz_587 = {_zz_602,{_zz_603,_zz_604}};
  assign _zz_588 = {_zz_89,_zz_605};
  assign _zz_589 = 2'b00;
  assign _zz_590 = ({_zz_606,_zz_607} != 2'b00);
  assign _zz_591 = (_zz_608 != _zz_609);
  assign _zz_592 = {_zz_610,{_zz_611,_zz_612}};
  assign _zz_593 = 32'h02100040;
  assign _zz_594 = (decode_INSTRUCTION & 32'h00000038);
  assign _zz_595 = 32'h0;
  assign _zz_596 = (decode_INSTRUCTION & 32'h18002008);
  assign _zz_597 = 32'h10002008;
  assign _zz_598 = 32'h00004020;
  assign _zz_599 = ((decode_INSTRUCTION & _zz_613) == 32'h00000020);
  assign _zz_600 = (decode_INSTRUCTION & 32'h02000068);
  assign _zz_601 = 32'h00000020;
  assign _zz_602 = ((decode_INSTRUCTION & _zz_614) == 32'h00001010);
  assign _zz_603 = (_zz_615 == _zz_616);
  assign _zz_604 = {_zz_617,{_zz_618,_zz_619}};
  assign _zz_605 = ((decode_INSTRUCTION & _zz_620) == 32'h00000020);
  assign _zz_606 = _zz_89;
  assign _zz_607 = (_zz_621 == _zz_622);
  assign _zz_608 = (_zz_623 == _zz_624);
  assign _zz_609 = 1'b0;
  assign _zz_610 = (_zz_625 != 1'b0);
  assign _zz_611 = (_zz_626 != _zz_627);
  assign _zz_612 = {_zz_628,{_zz_629,_zz_630}};
  assign _zz_613 = 32'h02000028;
  assign _zz_614 = 32'h00001010;
  assign _zz_615 = (decode_INSTRUCTION & 32'h00002010);
  assign _zz_616 = 32'h00002010;
  assign _zz_617 = ((decode_INSTRUCTION & _zz_631) == 32'h00002008);
  assign _zz_618 = (_zz_632 == _zz_633);
  assign _zz_619 = {_zz_90,_zz_634};
  assign _zz_620 = 32'h00000070;
  assign _zz_621 = (decode_INSTRUCTION & 32'h00000020);
  assign _zz_622 = 32'h0;
  assign _zz_623 = (decode_INSTRUCTION & 32'h00004014);
  assign _zz_624 = 32'h00004010;
  assign _zz_625 = ((decode_INSTRUCTION & _zz_635) == 32'h00002010);
  assign _zz_626 = {_zz_636,{_zz_637,_zz_638}};
  assign _zz_627 = 5'h0;
  assign _zz_628 = ({_zz_639,_zz_640} != 2'b00);
  assign _zz_629 = (_zz_641 != _zz_642);
  assign _zz_630 = {_zz_643,{_zz_644,_zz_645}};
  assign _zz_631 = 32'h00002008;
  assign _zz_632 = (decode_INSTRUCTION & 32'h00000050);
  assign _zz_633 = 32'h00000010;
  assign _zz_634 = ((decode_INSTRUCTION & _zz_646) == 32'h0);
  assign _zz_635 = 32'h00006014;
  assign _zz_636 = ((decode_INSTRUCTION & _zz_647) == 32'h0);
  assign _zz_637 = (_zz_648 == _zz_649);
  assign _zz_638 = {_zz_650,{_zz_651,_zz_652}};
  assign _zz_639 = _zz_88;
  assign _zz_640 = (_zz_653 == _zz_654);
  assign _zz_641 = {_zz_655,{_zz_656,_zz_657}};
  assign _zz_642 = 3'b000;
  assign _zz_643 = ({_zz_658,_zz_659} != 3'b000);
  assign _zz_644 = (_zz_660 != _zz_661);
  assign _zz_645 = {_zz_662,_zz_663};
  assign _zz_646 = 32'h00000024;
  assign _zz_647 = 32'h00000044;
  assign _zz_648 = (decode_INSTRUCTION & 32'h00000018);
  assign _zz_649 = 32'h0;
  assign _zz_650 = ((decode_INSTRUCTION & _zz_664) == 32'h00002000);
  assign _zz_651 = (_zz_665 == _zz_666);
  assign _zz_652 = _zz_88;
  assign _zz_653 = (decode_INSTRUCTION & 32'h00000058);
  assign _zz_654 = 32'h0;
  assign _zz_655 = ((decode_INSTRUCTION & _zz_667) == 32'h00000040);
  assign _zz_656 = (_zz_668 == _zz_669);
  assign _zz_657 = (_zz_670 == _zz_671);
  assign _zz_658 = _zz_87;
  assign _zz_659 = {_zz_86,_zz_672};
  assign _zz_660 = {_zz_86,_zz_673};
  assign _zz_661 = 2'b00;
  assign _zz_662 = (_zz_674 != 1'b0);
  assign _zz_663 = (_zz_675 != 1'b0);
  assign _zz_664 = 32'h00006004;
  assign _zz_665 = (decode_INSTRUCTION & 32'h00005004);
  assign _zz_666 = 32'h00001000;
  assign _zz_667 = 32'h00000044;
  assign _zz_668 = (decode_INSTRUCTION & 32'h00002014);
  assign _zz_669 = 32'h00002010;
  assign _zz_670 = (decode_INSTRUCTION & 32'h40000034);
  assign _zz_671 = 32'h40000030;
  assign _zz_672 = ((decode_INSTRUCTION & 32'h00002014) == 32'h00000004);
  assign _zz_673 = ((decode_INSTRUCTION & 32'h0000004c) == 32'h00000004);
  assign _zz_674 = ((decode_INSTRUCTION & 32'h00005048) == 32'h00001008);
  assign _zz_675 = ((decode_INSTRUCTION & 32'h02003050) == 32'h02000050);
  assign _zz_676 = 32'h0;
  assign _zz_677 = 32'h0;
  assign _zz_678 = 32'h0;
  assign _zz_206 = RegFilePlugin_regFile[decode_RegFilePlugin_regFileReadAddress1];
  assign _zz_207 = RegFilePlugin_regFile[decode_RegFilePlugin_regFileReadAddress2];
  always @ (posedge CLKOUT0) begin
    if(_zz_36) begin
      RegFilePlugin_regFile[lastStageRegFileWrite_payload_address] <= lastStageRegFileWrite_payload_data;
    end
  end

  initial begin
    memory_AesPlugin_rom_storage[0] = 32'b01010010101001011100011001100011;
    memory_AesPlugin_rom_storage[1] = 32'b00001001100001001111100001111100;
    memory_AesPlugin_rom_storage[2] = 32'b01101010100110011110111001110111;
    memory_AesPlugin_rom_storage[3] = 32'b11010101100011011111011001111011;
    memory_AesPlugin_rom_storage[4] = 32'b00110000000011011111111111110010;
    memory_AesPlugin_rom_storage[5] = 32'b00110110101111011101011001101011;
    memory_AesPlugin_rom_storage[6] = 32'b10100101101100011101111001101111;
    memory_AesPlugin_rom_storage[7] = 32'b00111000010101001001000111000101;
    memory_AesPlugin_rom_storage[8] = 32'b10111111010100000110000000110000;
    memory_AesPlugin_rom_storage[9] = 32'b01000000000000110000001000000001;
    memory_AesPlugin_rom_storage[10] = 32'b10100011101010011100111001100111;
    memory_AesPlugin_rom_storage[11] = 32'b10011110011111010101011000101011;
    memory_AesPlugin_rom_storage[12] = 32'b10000001000110011110011111111110;
    memory_AesPlugin_rom_storage[13] = 32'b11110011011000101011010111010111;
    memory_AesPlugin_rom_storage[14] = 32'b11010111111001100100110110101011;
    memory_AesPlugin_rom_storage[15] = 32'b11111011100110101110110001110110;
    memory_AesPlugin_rom_storage[16] = 32'b01111100010001011000111111001010;
    memory_AesPlugin_rom_storage[17] = 32'b11100011100111010001111110000010;
    memory_AesPlugin_rom_storage[18] = 32'b00111001010000001000100111001001;
    memory_AesPlugin_rom_storage[19] = 32'b10000010100001111111101001111101;
    memory_AesPlugin_rom_storage[20] = 32'b10011011000101011110111111111010;
    memory_AesPlugin_rom_storage[21] = 32'b00101111111010111011001001011001;
    memory_AesPlugin_rom_storage[22] = 32'b11111111110010011000111001000111;
    memory_AesPlugin_rom_storage[23] = 32'b10000111000010111111101111110000;
    memory_AesPlugin_rom_storage[24] = 32'b00110100111011000100000110101101;
    memory_AesPlugin_rom_storage[25] = 32'b10001110011001111011001111010100;
    memory_AesPlugin_rom_storage[26] = 32'b01000011111111010101111110100010;
    memory_AesPlugin_rom_storage[27] = 32'b01000100111010100100010110101111;
    memory_AesPlugin_rom_storage[28] = 32'b11000100101111110010001110011100;
    memory_AesPlugin_rom_storage[29] = 32'b11011110111101110101001110100100;
    memory_AesPlugin_rom_storage[30] = 32'b11101001100101101110010001110010;
    memory_AesPlugin_rom_storage[31] = 32'b11001011010110111001101111000000;
    memory_AesPlugin_rom_storage[32] = 32'b01010100110000100111010110110111;
    memory_AesPlugin_rom_storage[33] = 32'b01111011000111001110000111111101;
    memory_AesPlugin_rom_storage[34] = 32'b10010100101011100011110110010011;
    memory_AesPlugin_rom_storage[35] = 32'b00110010011010100100110000100110;
    memory_AesPlugin_rom_storage[36] = 32'b10100110010110100110110000110110;
    memory_AesPlugin_rom_storage[37] = 32'b11000010010000010111111000111111;
    memory_AesPlugin_rom_storage[38] = 32'b00100011000000101111010111110111;
    memory_AesPlugin_rom_storage[39] = 32'b00111101010011111000001111001100;
    memory_AesPlugin_rom_storage[40] = 32'b11101110010111000110100000110100;
    memory_AesPlugin_rom_storage[41] = 32'b01001100111101000101000110100101;
    memory_AesPlugin_rom_storage[42] = 32'b10010101001101001101000111100101;
    memory_AesPlugin_rom_storage[43] = 32'b00001011000010001111100111110001;
    memory_AesPlugin_rom_storage[44] = 32'b01000010100100111110001001110001;
    memory_AesPlugin_rom_storage[45] = 32'b11111010011100111010101111011000;
    memory_AesPlugin_rom_storage[46] = 32'b11000011010100110110001000110001;
    memory_AesPlugin_rom_storage[47] = 32'b01001110001111110010101000010101;
    memory_AesPlugin_rom_storage[48] = 32'b00001000000011000000100000000100;
    memory_AesPlugin_rom_storage[49] = 32'b00101110010100101001010111000111;
    memory_AesPlugin_rom_storage[50] = 32'b10100001011001010100011000100011;
    memory_AesPlugin_rom_storage[51] = 32'b01100110010111101001110111000011;
    memory_AesPlugin_rom_storage[52] = 32'b00101000001010000011000000011000;
    memory_AesPlugin_rom_storage[53] = 32'b11011001101000010011011110010110;
    memory_AesPlugin_rom_storage[54] = 32'b00100100000011110000101000000101;
    memory_AesPlugin_rom_storage[55] = 32'b10110010101101010010111110011010;
    memory_AesPlugin_rom_storage[56] = 32'b01110110000010010000111000000111;
    memory_AesPlugin_rom_storage[57] = 32'b01011011001101100010010000010010;
    memory_AesPlugin_rom_storage[58] = 32'b10100010100110110001101110000000;
    memory_AesPlugin_rom_storage[59] = 32'b01001001001111011101111111100010;
    memory_AesPlugin_rom_storage[60] = 32'b01101101001001101100110111101011;
    memory_AesPlugin_rom_storage[61] = 32'b10001011011010010100111000100111;
    memory_AesPlugin_rom_storage[62] = 32'b11010001110011010111111110110010;
    memory_AesPlugin_rom_storage[63] = 32'b00100101100111111110101001110101;
    memory_AesPlugin_rom_storage[64] = 32'b01110010000110110001001000001001;
    memory_AesPlugin_rom_storage[65] = 32'b11111000100111100001110110000011;
    memory_AesPlugin_rom_storage[66] = 32'b11110110011101000101100000101100;
    memory_AesPlugin_rom_storage[67] = 32'b01100100001011100011010000011010;
    memory_AesPlugin_rom_storage[68] = 32'b10000110001011010011011000011011;
    memory_AesPlugin_rom_storage[69] = 32'b01101000101100101101110001101110;
    memory_AesPlugin_rom_storage[70] = 32'b10011000111011101011010001011010;
    memory_AesPlugin_rom_storage[71] = 32'b00010110111110110101101110100000;
    memory_AesPlugin_rom_storage[72] = 32'b11010100111101101010010001010010;
    memory_AesPlugin_rom_storage[73] = 32'b10100100010011010111011000111011;
    memory_AesPlugin_rom_storage[74] = 32'b01011100011000011011011111010110;
    memory_AesPlugin_rom_storage[75] = 32'b11001100110011100111110110110011;
    memory_AesPlugin_rom_storage[76] = 32'b01011101011110110101001000101001;
    memory_AesPlugin_rom_storage[77] = 32'b01100101001111101101110111100011;
    memory_AesPlugin_rom_storage[78] = 32'b10110110011100010101111000101111;
    memory_AesPlugin_rom_storage[79] = 32'b10010010100101110001001110000100;
    memory_AesPlugin_rom_storage[80] = 32'b01101100111101011010011001010011;
    memory_AesPlugin_rom_storage[81] = 32'b01110000011010001011100111010001;
    memory_AesPlugin_rom_storage[82] = 32'b01001000000000000000000000000000;
    memory_AesPlugin_rom_storage[83] = 32'b01010000001011001100000111101101;
    memory_AesPlugin_rom_storage[84] = 32'b11111101011000000100000000100000;
    memory_AesPlugin_rom_storage[85] = 32'b11101101000111111110001111111100;
    memory_AesPlugin_rom_storage[86] = 32'b10111001110010000111100110110001;
    memory_AesPlugin_rom_storage[87] = 32'b11011010111011011011011001011011;
    memory_AesPlugin_rom_storage[88] = 32'b01011110101111101101010001101010;
    memory_AesPlugin_rom_storage[89] = 32'b00010101010001101000110111001011;
    memory_AesPlugin_rom_storage[90] = 32'b01000110110110010110011110111110;
    memory_AesPlugin_rom_storage[91] = 32'b01010111010010110111001000111001;
    memory_AesPlugin_rom_storage[92] = 32'b10100111110111101001010001001010;
    memory_AesPlugin_rom_storage[93] = 32'b10001101110101001001100001001100;
    memory_AesPlugin_rom_storage[94] = 32'b10011101111010001011000001011000;
    memory_AesPlugin_rom_storage[95] = 32'b10000100010010101000010111001111;
    memory_AesPlugin_rom_storage[96] = 32'b10010000011010111011101111010000;
    memory_AesPlugin_rom_storage[97] = 32'b11011000001010101100010111101111;
    memory_AesPlugin_rom_storage[98] = 32'b10101011111001010100111110101010;
    memory_AesPlugin_rom_storage[99] = 32'b00000000000101101110110111111011;
    memory_AesPlugin_rom_storage[100] = 32'b10001100110001011000011001000011;
    memory_AesPlugin_rom_storage[101] = 32'b10111100110101111001101001001101;
    memory_AesPlugin_rom_storage[102] = 32'b11010011010101010110011000110011;
    memory_AesPlugin_rom_storage[103] = 32'b00001010100101000001000110000101;
    memory_AesPlugin_rom_storage[104] = 32'b11110111110011111000101001000101;
    memory_AesPlugin_rom_storage[105] = 32'b11100100000100001110100111111001;
    memory_AesPlugin_rom_storage[106] = 32'b01011000000001100000010000000010;
    memory_AesPlugin_rom_storage[107] = 32'b00000101100000011111111001111111;
    memory_AesPlugin_rom_storage[108] = 32'b10111000111100001010000001010000;
    memory_AesPlugin_rom_storage[109] = 32'b10110011010001000111100000111100;
    memory_AesPlugin_rom_storage[110] = 32'b01000101101110100010010110011111;
    memory_AesPlugin_rom_storage[111] = 32'b00000110111000110100101110101000;
    memory_AesPlugin_rom_storage[112] = 32'b11010000111100111010001001010001;
    memory_AesPlugin_rom_storage[113] = 32'b00101100111111100101110110100011;
    memory_AesPlugin_rom_storage[114] = 32'b00011110110000001000000001000000;
    memory_AesPlugin_rom_storage[115] = 32'b10001111100010100000010110001111;
    memory_AesPlugin_rom_storage[116] = 32'b11001010101011010011111110010010;
    memory_AesPlugin_rom_storage[117] = 32'b00111111101111000010000110011101;
    memory_AesPlugin_rom_storage[118] = 32'b00001111010010000111000000111000;
    memory_AesPlugin_rom_storage[119] = 32'b00000010000001001111000111110101;
    memory_AesPlugin_rom_storage[120] = 32'b11000001110111110110001110111100;
    memory_AesPlugin_rom_storage[121] = 32'b10101111110000010111011110110110;
    memory_AesPlugin_rom_storage[122] = 32'b10111101011101011010111111011010;
    memory_AesPlugin_rom_storage[123] = 32'b00000011011000110100001000100001;
    memory_AesPlugin_rom_storage[124] = 32'b00000001001100000010000000010000;
    memory_AesPlugin_rom_storage[125] = 32'b00010011000110101110010111111111;
    memory_AesPlugin_rom_storage[126] = 32'b10001010000011101111110111110011;
    memory_AesPlugin_rom_storage[127] = 32'b01101011011011011011111111010010;
    memory_AesPlugin_rom_storage[128] = 32'b00111010010011001000000111001101;
    memory_AesPlugin_rom_storage[129] = 32'b10010001000101000001100000001100;
    memory_AesPlugin_rom_storage[130] = 32'b00010001001101010010011000010011;
    memory_AesPlugin_rom_storage[131] = 32'b01000001001011111100001111101100;
    memory_AesPlugin_rom_storage[132] = 32'b01001111111000011011111001011111;
    memory_AesPlugin_rom_storage[133] = 32'b01100111101000100011010110010111;
    memory_AesPlugin_rom_storage[134] = 32'b11011100110011001000100001000100;
    memory_AesPlugin_rom_storage[135] = 32'b11101010001110010010111000010111;
    memory_AesPlugin_rom_storage[136] = 32'b10010111010101111001001111000100;
    memory_AesPlugin_rom_storage[137] = 32'b11110010111100100101010110100111;
    memory_AesPlugin_rom_storage[138] = 32'b11001111100000101111110001111110;
    memory_AesPlugin_rom_storage[139] = 32'b11001110010001110111101000111101;
    memory_AesPlugin_rom_storage[140] = 32'b11110000101011001100100001100100;
    memory_AesPlugin_rom_storage[141] = 32'b10110100111001111011101001011101;
    memory_AesPlugin_rom_storage[142] = 32'b11100110001010110011001000011001;
    memory_AesPlugin_rom_storage[143] = 32'b01110011100101011110011001110011;
    memory_AesPlugin_rom_storage[144] = 32'b10010110101000001100000001100000;
    memory_AesPlugin_rom_storage[145] = 32'b10101100100110000001100110000001;
    memory_AesPlugin_rom_storage[146] = 32'b01110100110100011001111001001111;
    memory_AesPlugin_rom_storage[147] = 32'b00100010011111111010001111011100;
    memory_AesPlugin_rom_storage[148] = 32'b11100111011001100100010000100010;
    memory_AesPlugin_rom_storage[149] = 32'b10101101011111100101010000101010;
    memory_AesPlugin_rom_storage[150] = 32'b00110101101010110011101110010000;
    memory_AesPlugin_rom_storage[151] = 32'b10000101100000110000101110001000;
    memory_AesPlugin_rom_storage[152] = 32'b11100010110010101000110001000110;
    memory_AesPlugin_rom_storage[153] = 32'b11111001001010011100011111101110;
    memory_AesPlugin_rom_storage[154] = 32'b00110111110100110110101110111000;
    memory_AesPlugin_rom_storage[155] = 32'b11101000001111000010100000010100;
    memory_AesPlugin_rom_storage[156] = 32'b00011100011110011010011111011110;
    memory_AesPlugin_rom_storage[157] = 32'b01110101111000101011110001011110;
    memory_AesPlugin_rom_storage[158] = 32'b11011111000111010001011000001011;
    memory_AesPlugin_rom_storage[159] = 32'b01101110011101101010110111011011;
    memory_AesPlugin_rom_storage[160] = 32'b01000111001110111101101111100000;
    memory_AesPlugin_rom_storage[161] = 32'b11110001010101100110010000110010;
    memory_AesPlugin_rom_storage[162] = 32'b00011010010011100111010000111010;
    memory_AesPlugin_rom_storage[163] = 32'b01110001000111100001010000001010;
    memory_AesPlugin_rom_storage[164] = 32'b00011101110110111001001001001001;
    memory_AesPlugin_rom_storage[165] = 32'b00101001000010100000110000000110;
    memory_AesPlugin_rom_storage[166] = 32'b11000101011011000100100000100100;
    memory_AesPlugin_rom_storage[167] = 32'b10001001111001001011100001011100;
    memory_AesPlugin_rom_storage[168] = 32'b01101111010111011001111111000010;
    memory_AesPlugin_rom_storage[169] = 32'b10110111011011101011110111010011;
    memory_AesPlugin_rom_storage[170] = 32'b01100010111011110100001110101100;
    memory_AesPlugin_rom_storage[171] = 32'b00001110101001101100010001100010;
    memory_AesPlugin_rom_storage[172] = 32'b10101010101010000011100110010001;
    memory_AesPlugin_rom_storage[173] = 32'b00011000101001000011000110010101;
    memory_AesPlugin_rom_storage[174] = 32'b10111110001101111101001111100100;
    memory_AesPlugin_rom_storage[175] = 32'b00011011100010111111001001111001;
    memory_AesPlugin_rom_storage[176] = 32'b11111100001100101101010111100111;
    memory_AesPlugin_rom_storage[177] = 32'b01010110010000111000101111001000;
    memory_AesPlugin_rom_storage[178] = 32'b00111110010110010110111000110111;
    memory_AesPlugin_rom_storage[179] = 32'b01001011101101111101101001101101;
    memory_AesPlugin_rom_storage[180] = 32'b11000110100011000000000110001101;
    memory_AesPlugin_rom_storage[181] = 32'b11010010011001001011000111010101;
    memory_AesPlugin_rom_storage[182] = 32'b01111001110100101001110001001110;
    memory_AesPlugin_rom_storage[183] = 32'b00100000111000000100100110101001;
    memory_AesPlugin_rom_storage[184] = 32'b10011010101101001101100001101100;
    memory_AesPlugin_rom_storage[185] = 32'b11011011111110101010110001010110;
    memory_AesPlugin_rom_storage[186] = 32'b11000000000001111111001111110100;
    memory_AesPlugin_rom_storage[187] = 32'b11111110001001011100111111101010;
    memory_AesPlugin_rom_storage[188] = 32'b01111000101011111100101001100101;
    memory_AesPlugin_rom_storage[189] = 32'b11001101100011101111010001111010;
    memory_AesPlugin_rom_storage[190] = 32'b01011010111010010100011110101110;
    memory_AesPlugin_rom_storage[191] = 32'b11110100000110000001000000001000;
    memory_AesPlugin_rom_storage[192] = 32'b00011111110101010110111110111010;
    memory_AesPlugin_rom_storage[193] = 32'b11011101100010001111000001111000;
    memory_AesPlugin_rom_storage[194] = 32'b10101000011011110100101000100101;
    memory_AesPlugin_rom_storage[195] = 32'b00110011011100100101110000101110;
    memory_AesPlugin_rom_storage[196] = 32'b10001000001001000011100000011100;
    memory_AesPlugin_rom_storage[197] = 32'b00000111111100010101011110100110;
    memory_AesPlugin_rom_storage[198] = 32'b11000111110001110111001110110100;
    memory_AesPlugin_rom_storage[199] = 32'b00110001010100011001011111000110;
    memory_AesPlugin_rom_storage[200] = 32'b10110001001000111100101111101000;
    memory_AesPlugin_rom_storage[201] = 32'b00010010011111001010000111011101;
    memory_AesPlugin_rom_storage[202] = 32'b00010000100111001110100001110100;
    memory_AesPlugin_rom_storage[203] = 32'b01011001001000010011111000011111;
    memory_AesPlugin_rom_storage[204] = 32'b00100111110111011001011001001011;
    memory_AesPlugin_rom_storage[205] = 32'b10000000110111000110000110111101;
    memory_AesPlugin_rom_storage[206] = 32'b11101100100001100000110110001011;
    memory_AesPlugin_rom_storage[207] = 32'b01011111100001010000111110001010;
    memory_AesPlugin_rom_storage[208] = 32'b01100000100100001110000001110000;
    memory_AesPlugin_rom_storage[209] = 32'b01010001010000100111110000111110;
    memory_AesPlugin_rom_storage[210] = 32'b01111111110001000111000110110101;
    memory_AesPlugin_rom_storage[211] = 32'b10101001101010101100110001100110;
    memory_AesPlugin_rom_storage[212] = 32'b00011001110110001001000001001000;
    memory_AesPlugin_rom_storage[213] = 32'b10110101000001010000011000000011;
    memory_AesPlugin_rom_storage[214] = 32'b01001010000000011111011111110110;
    memory_AesPlugin_rom_storage[215] = 32'b00001101000100100001110000001110;
    memory_AesPlugin_rom_storage[216] = 32'b00101101101000111100001001100001;
    memory_AesPlugin_rom_storage[217] = 32'b11100101010111110110101000110101;
    memory_AesPlugin_rom_storage[218] = 32'b01111010111110011010111001010111;
    memory_AesPlugin_rom_storage[219] = 32'b10011111110100000110100110111001;
    memory_AesPlugin_rom_storage[220] = 32'b10010011100100010001011110000110;
    memory_AesPlugin_rom_storage[221] = 32'b11001001010110001001100111000001;
    memory_AesPlugin_rom_storage[222] = 32'b10011100001001110011101000011101;
    memory_AesPlugin_rom_storage[223] = 32'b11101111101110010010011110011110;
    memory_AesPlugin_rom_storage[224] = 32'b10100000001110001101100111100001;
    memory_AesPlugin_rom_storage[225] = 32'b11100000000100111110101111111000;
    memory_AesPlugin_rom_storage[226] = 32'b00111011101100110010101110011000;
    memory_AesPlugin_rom_storage[227] = 32'b01001101001100110010001000010001;
    memory_AesPlugin_rom_storage[228] = 32'b10101110101110111101001001101001;
    memory_AesPlugin_rom_storage[229] = 32'b00101010011100001010100111011001;
    memory_AesPlugin_rom_storage[230] = 32'b11110101100010010000011110001110;
    memory_AesPlugin_rom_storage[231] = 32'b10110000101001110011001110010100;
    memory_AesPlugin_rom_storage[232] = 32'b11001000101101100010110110011011;
    memory_AesPlugin_rom_storage[233] = 32'b11101011001000100011110000011110;
    memory_AesPlugin_rom_storage[234] = 32'b10111011100100100001010110000111;
    memory_AesPlugin_rom_storage[235] = 32'b00111100001000001100100111101001;
    memory_AesPlugin_rom_storage[236] = 32'b10000011010010011000011111001110;
    memory_AesPlugin_rom_storage[237] = 32'b01010011111111111010101001010101;
    memory_AesPlugin_rom_storage[238] = 32'b10011001011110000101000000101000;
    memory_AesPlugin_rom_storage[239] = 32'b01100001011110101010010111011111;
    memory_AesPlugin_rom_storage[240] = 32'b00010111100011110000001110001100;
    memory_AesPlugin_rom_storage[241] = 32'b00101011111110000101100110100001;
    memory_AesPlugin_rom_storage[242] = 32'b00000100100000000000100110001001;
    memory_AesPlugin_rom_storage[243] = 32'b01111110000101110001101000001101;
    memory_AesPlugin_rom_storage[244] = 32'b10111010110110100110010110111111;
    memory_AesPlugin_rom_storage[245] = 32'b01110111001100011101011111100110;
    memory_AesPlugin_rom_storage[246] = 32'b11010110110001101000010001000010;
    memory_AesPlugin_rom_storage[247] = 32'b00100110101110001101000001101000;
    memory_AesPlugin_rom_storage[248] = 32'b11100001110000111000001001000001;
    memory_AesPlugin_rom_storage[249] = 32'b01101001101100000010100110011001;
    memory_AesPlugin_rom_storage[250] = 32'b00010100011101110101101000101101;
    memory_AesPlugin_rom_storage[251] = 32'b01100011000100010001111000001111;
    memory_AesPlugin_rom_storage[252] = 32'b01010101110010110111101110110000;
    memory_AesPlugin_rom_storage[253] = 32'b00100001111111001010100001010100;
    memory_AesPlugin_rom_storage[254] = 32'b00001100110101100110110110111011;
    memory_AesPlugin_rom_storage[255] = 32'b01111101001110100010110000010110;
    memory_AesPlugin_rom_storage[256] = 32'b01010000101001111111010001010001;
    memory_AesPlugin_rom_storage[257] = 32'b01010011011001010100000101111110;
    memory_AesPlugin_rom_storage[258] = 32'b11000011101001000001011100011010;
    memory_AesPlugin_rom_storage[259] = 32'b10010110010111100010011100111010;
    memory_AesPlugin_rom_storage[260] = 32'b11001011011010111010101100111011;
    memory_AesPlugin_rom_storage[261] = 32'b11110001010001011001110100011111;
    memory_AesPlugin_rom_storage[262] = 32'b10101011010110001111101010101100;
    memory_AesPlugin_rom_storage[263] = 32'b10010011000000111110001101001011;
    memory_AesPlugin_rom_storage[264] = 32'b01010101111110100011000000100000;
    memory_AesPlugin_rom_storage[265] = 32'b11110110011011010111011010101101;
    memory_AesPlugin_rom_storage[266] = 32'b10010001011101101100110010001000;
    memory_AesPlugin_rom_storage[267] = 32'b00100101010011000000001011110101;
    memory_AesPlugin_rom_storage[268] = 32'b11111100110101111110010101001111;
    memory_AesPlugin_rom_storage[269] = 32'b11010111110010110010101011000101;
    memory_AesPlugin_rom_storage[270] = 32'b10000000010001000011010100100110;
    memory_AesPlugin_rom_storage[271] = 32'b10001111101000110110001010110101;
    memory_AesPlugin_rom_storage[272] = 32'b01001001010110101011000111011110;
    memory_AesPlugin_rom_storage[273] = 32'b01100111000110111011101000100101;
    memory_AesPlugin_rom_storage[274] = 32'b10011000000011101110101001000101;
    memory_AesPlugin_rom_storage[275] = 32'b11100001110000001111111001011101;
    memory_AesPlugin_rom_storage[276] = 32'b00000010011101010010111111000011;
    memory_AesPlugin_rom_storage[277] = 32'b00010010111100000100110010000001;
    memory_AesPlugin_rom_storage[278] = 32'b10100011100101110100011010001101;
    memory_AesPlugin_rom_storage[279] = 32'b11000110111110011101001101101011;
    memory_AesPlugin_rom_storage[280] = 32'b11100111010111111000111100000011;
    memory_AesPlugin_rom_storage[281] = 32'b10010101100111001001001000010101;
    memory_AesPlugin_rom_storage[282] = 32'b11101011011110100110110110111111;
    memory_AesPlugin_rom_storage[283] = 32'b11011010010110010101001010010101;
    memory_AesPlugin_rom_storage[284] = 32'b00101101100000111011111011010100;
    memory_AesPlugin_rom_storage[285] = 32'b11010011001000010111010001011000;
    memory_AesPlugin_rom_storage[286] = 32'b00101001011010011110000001001001;
    memory_AesPlugin_rom_storage[287] = 32'b01000100110010001100100110001110;
    memory_AesPlugin_rom_storage[288] = 32'b01101010100010011100001001110101;
    memory_AesPlugin_rom_storage[289] = 32'b01111000011110011000111011110100;
    memory_AesPlugin_rom_storage[290] = 32'b01101011001111100101100010011001;
    memory_AesPlugin_rom_storage[291] = 32'b11011101011100011011100100100111;
    memory_AesPlugin_rom_storage[292] = 32'b10110110010011111110000110111110;
    memory_AesPlugin_rom_storage[293] = 32'b00010111101011011000100011110000;
    memory_AesPlugin_rom_storage[294] = 32'b01100110101011000010000011001001;
    memory_AesPlugin_rom_storage[295] = 32'b10110100001110101100111001111101;
    memory_AesPlugin_rom_storage[296] = 32'b00011000010010101101111101100011;
    memory_AesPlugin_rom_storage[297] = 32'b10000010001100010001101011100101;
    memory_AesPlugin_rom_storage[298] = 32'b01100000001100110101000110010111;
    memory_AesPlugin_rom_storage[299] = 32'b01000101011111110101001101100010;
    memory_AesPlugin_rom_storage[300] = 32'b11100000011101110110010010110001;
    memory_AesPlugin_rom_storage[301] = 32'b10000100101011100110101110111011;
    memory_AesPlugin_rom_storage[302] = 32'b00011100101000001000000111111110;
    memory_AesPlugin_rom_storage[303] = 32'b10010100001010110000100011111001;
    memory_AesPlugin_rom_storage[304] = 32'b01011000011010000100100001110000;
    memory_AesPlugin_rom_storage[305] = 32'b00011001111111010100010110001111;
    memory_AesPlugin_rom_storage[306] = 32'b10000111011011001101111010010100;
    memory_AesPlugin_rom_storage[307] = 32'b10110111111110000111101101010010;
    memory_AesPlugin_rom_storage[308] = 32'b00100011110100110111001110101011;
    memory_AesPlugin_rom_storage[309] = 32'b11100010000000100100101101110010;
    memory_AesPlugin_rom_storage[310] = 32'b01010111100011110001111111100011;
    memory_AesPlugin_rom_storage[311] = 32'b00101010101010110101010101100110;
    memory_AesPlugin_rom_storage[312] = 32'b00000111001010001110101110110010;
    memory_AesPlugin_rom_storage[313] = 32'b00000011110000101011010100101111;
    memory_AesPlugin_rom_storage[314] = 32'b10011010011110111100010110000110;
    memory_AesPlugin_rom_storage[315] = 32'b10100101000010000011011111010011;
    memory_AesPlugin_rom_storage[316] = 32'b11110010100001110010100000110000;
    memory_AesPlugin_rom_storage[317] = 32'b10110010101001011011111100100011;
    memory_AesPlugin_rom_storage[318] = 32'b10111010011010100000001100000010;
    memory_AesPlugin_rom_storage[319] = 32'b01011100100000100001011011101101;
    memory_AesPlugin_rom_storage[320] = 32'b00101011000111001100111110001010;
    memory_AesPlugin_rom_storage[321] = 32'b10010010101101000111100110100111;
    memory_AesPlugin_rom_storage[322] = 32'b11110000111100100000011111110011;
    memory_AesPlugin_rom_storage[323] = 32'b10100001111000100110100101001110;
    memory_AesPlugin_rom_storage[324] = 32'b11001101111101001101101001100101;
    memory_AesPlugin_rom_storage[325] = 32'b11010101101111100000010100000110;
    memory_AesPlugin_rom_storage[326] = 32'b00011111011000100011010011010001;
    memory_AesPlugin_rom_storage[327] = 32'b10001010111111101010011011000100;
    memory_AesPlugin_rom_storage[328] = 32'b10011101010100110010111000110100;
    memory_AesPlugin_rom_storage[329] = 32'b10100000010101011111001110100010;
    memory_AesPlugin_rom_storage[330] = 32'b00110010111000011000101000000101;
    memory_AesPlugin_rom_storage[331] = 32'b01110101111010111111011010100100;
    memory_AesPlugin_rom_storage[332] = 32'b00111001111011001000001100001011;
    memory_AesPlugin_rom_storage[333] = 32'b10101010111011110110000001000000;
    memory_AesPlugin_rom_storage[334] = 32'b00000110100111110111000101011110;
    memory_AesPlugin_rom_storage[335] = 32'b01010001000100000110111010111101;
    memory_AesPlugin_rom_storage[336] = 32'b11111001100010100010000100111110;
    memory_AesPlugin_rom_storage[337] = 32'b00111101000001101101110110010110;
    memory_AesPlugin_rom_storage[338] = 32'b10101110000001010011111011011101;
    memory_AesPlugin_rom_storage[339] = 32'b01000110101111011110011001001101;
    memory_AesPlugin_rom_storage[340] = 32'b10110101100011010101010010010001;
    memory_AesPlugin_rom_storage[341] = 32'b00000101010111011100010001110001;
    memory_AesPlugin_rom_storage[342] = 32'b01101111110101000000011000000100;
    memory_AesPlugin_rom_storage[343] = 32'b11111111000101010101000001100000;
    memory_AesPlugin_rom_storage[344] = 32'b00100100111110111001100000011001;
    memory_AesPlugin_rom_storage[345] = 32'b10010111111010011011110111010110;
    memory_AesPlugin_rom_storage[346] = 32'b11001100010000110100000010001001;
    memory_AesPlugin_rom_storage[347] = 32'b01110111100111101101100101100111;
    memory_AesPlugin_rom_storage[348] = 32'b10111101010000101110100010110000;
    memory_AesPlugin_rom_storage[349] = 32'b10001000100010111000100100000111;
    memory_AesPlugin_rom_storage[350] = 32'b00111000010110110001100111100111;
    memory_AesPlugin_rom_storage[351] = 32'b11011011111011101100100001111001;
    memory_AesPlugin_rom_storage[352] = 32'b01000111000010100111110010100001;
    memory_AesPlugin_rom_storage[353] = 32'b11101001000011110100001001111100;
    memory_AesPlugin_rom_storage[354] = 32'b11001001000111101000010011111000;
    memory_AesPlugin_rom_storage[355] = 32'b00000000000000000000000000000000;
    memory_AesPlugin_rom_storage[356] = 32'b10000011100001101000000000001001;
    memory_AesPlugin_rom_storage[357] = 32'b01001000111011010010101100110010;
    memory_AesPlugin_rom_storage[358] = 32'b10101100011100000001000100011110;
    memory_AesPlugin_rom_storage[359] = 32'b01001110011100100101101001101100;
    memory_AesPlugin_rom_storage[360] = 32'b11111011111111110000111011111101;
    memory_AesPlugin_rom_storage[361] = 32'b01010110001110001000010100001111;
    memory_AesPlugin_rom_storage[362] = 32'b00011110110101011010111000111101;
    memory_AesPlugin_rom_storage[363] = 32'b00100111001110010010110100110110;
    memory_AesPlugin_rom_storage[364] = 32'b01100100110110010000111100001010;
    memory_AesPlugin_rom_storage[365] = 32'b00100001101001100101110001101000;
    memory_AesPlugin_rom_storage[366] = 32'b11010001010101000101101110011011;
    memory_AesPlugin_rom_storage[367] = 32'b00111010001011100011011000100100;
    memory_AesPlugin_rom_storage[368] = 32'b10110001011001110000101000001100;
    memory_AesPlugin_rom_storage[369] = 32'b00001111111001110101011110010011;
    memory_AesPlugin_rom_storage[370] = 32'b11010010100101101110111010110100;
    memory_AesPlugin_rom_storage[371] = 32'b10011110100100011001101100011011;
    memory_AesPlugin_rom_storage[372] = 32'b01001111110001011100000010000000;
    memory_AesPlugin_rom_storage[373] = 32'b10100010001000001101110001100001;
    memory_AesPlugin_rom_storage[374] = 32'b01101001010010110111011101011010;
    memory_AesPlugin_rom_storage[375] = 32'b00010110000110100001001000011100;
    memory_AesPlugin_rom_storage[376] = 32'b00001010101110101001001111100010;
    memory_AesPlugin_rom_storage[377] = 32'b11100101001010101010000011000000;
    memory_AesPlugin_rom_storage[378] = 32'b01000011111000000010001000111100;
    memory_AesPlugin_rom_storage[379] = 32'b00011101000101110001101100010010;
    memory_AesPlugin_rom_storage[380] = 32'b00001011000011010000100100001110;
    memory_AesPlugin_rom_storage[381] = 32'b10101101110001111000101111110010;
    memory_AesPlugin_rom_storage[382] = 32'b10111001101010001011011000101101;
    memory_AesPlugin_rom_storage[383] = 32'b11001000101010010001111000010100;
    memory_AesPlugin_rom_storage[384] = 32'b10000101000110011111000101010111;
    memory_AesPlugin_rom_storage[385] = 32'b01001100000001110111010110101111;
    memory_AesPlugin_rom_storage[386] = 32'b10111011110111011001100111101110;
    memory_AesPlugin_rom_storage[387] = 32'b11111101011000000111111110100011;
    memory_AesPlugin_rom_storage[388] = 32'b10011111001001100000000111110111;
    memory_AesPlugin_rom_storage[389] = 32'b10111100111101010111001001011100;
    memory_AesPlugin_rom_storage[390] = 32'b11000101001110110110011001000100;
    memory_AesPlugin_rom_storage[391] = 32'b00110100011111101111101101011011;
    memory_AesPlugin_rom_storage[392] = 32'b01110110001010010100001110001011;
    memory_AesPlugin_rom_storage[393] = 32'b11011100110001100010001111001011;
    memory_AesPlugin_rom_storage[394] = 32'b01101000111111001110110110110110;
    memory_AesPlugin_rom_storage[395] = 32'b01100011111100011110010010111000;
    memory_AesPlugin_rom_storage[396] = 32'b11001010110111000011000111010111;
    memory_AesPlugin_rom_storage[397] = 32'b00010000100001010110001101000010;
    memory_AesPlugin_rom_storage[398] = 32'b01000000001000101001011100010011;
    memory_AesPlugin_rom_storage[399] = 32'b00100000000100011100011010000100;
    memory_AesPlugin_rom_storage[400] = 32'b01111101001001000100101010000101;
    memory_AesPlugin_rom_storage[401] = 32'b11111000001111011011101111010010;
    memory_AesPlugin_rom_storage[402] = 32'b00010001001100101111100110101110;
    memory_AesPlugin_rom_storage[403] = 32'b01101101101000010010100111000111;
    memory_AesPlugin_rom_storage[404] = 32'b01001011001011111001111000011101;
    memory_AesPlugin_rom_storage[405] = 32'b11110011001100001011001011011100;
    memory_AesPlugin_rom_storage[406] = 32'b11101100010100101000011000001101;
    memory_AesPlugin_rom_storage[407] = 32'b11010000111000111100000101110111;
    memory_AesPlugin_rom_storage[408] = 32'b01101100000101101011001100101011;
    memory_AesPlugin_rom_storage[409] = 32'b10011001101110010111000010101001;
    memory_AesPlugin_rom_storage[410] = 32'b11111010010010001001010000010001;
    memory_AesPlugin_rom_storage[411] = 32'b00100010011001001110100101000111;
    memory_AesPlugin_rom_storage[412] = 32'b11000100100011001111110010101000;
    memory_AesPlugin_rom_storage[413] = 32'b00011010001111111111000010100000;
    memory_AesPlugin_rom_storage[414] = 32'b11011000001011000111110101010110;
    memory_AesPlugin_rom_storage[415] = 32'b11101111100100000011001100100010;
    memory_AesPlugin_rom_storage[416] = 32'b11000111010011100100100110000111;
    memory_AesPlugin_rom_storage[417] = 32'b11000001110100010011100011011001;
    memory_AesPlugin_rom_storage[418] = 32'b11111110101000101100101010001100;
    memory_AesPlugin_rom_storage[419] = 32'b00110110000010111101010010011000;
    memory_AesPlugin_rom_storage[420] = 32'b11001111100000011111010110100110;
    memory_AesPlugin_rom_storage[421] = 32'b00101000110111100111101010100101;
    memory_AesPlugin_rom_storage[422] = 32'b00100110100011101011011111011010;
    memory_AesPlugin_rom_storage[423] = 32'b10100100101111111010110100111111;
    memory_AesPlugin_rom_storage[424] = 32'b11100100100111010011101000101100;
    memory_AesPlugin_rom_storage[425] = 32'b00001101100100100111100001010000;
    memory_AesPlugin_rom_storage[426] = 32'b10011011110011000101111101101010;
    memory_AesPlugin_rom_storage[427] = 32'b01100010010001100111111001010100;
    memory_AesPlugin_rom_storage[428] = 32'b11000010000100111000110111110110;
    memory_AesPlugin_rom_storage[429] = 32'b11101000101110001101100010010000;
    memory_AesPlugin_rom_storage[430] = 32'b01011110111101110011100100101110;
    memory_AesPlugin_rom_storage[431] = 32'b11110101101011111100001110000010;
    memory_AesPlugin_rom_storage[432] = 32'b10111110100000000101110110011111;
    memory_AesPlugin_rom_storage[433] = 32'b01111100100100111101000001101001;
    memory_AesPlugin_rom_storage[434] = 32'b10101001001011011101010101101111;
    memory_AesPlugin_rom_storage[435] = 32'b10110011000100100010010111001111;
    memory_AesPlugin_rom_storage[436] = 32'b00111011100110011010110011001000;
    memory_AesPlugin_rom_storage[437] = 32'b10100111011111010001100000010000;
    memory_AesPlugin_rom_storage[438] = 32'b01101110011000111001110011101000;
    memory_AesPlugin_rom_storage[439] = 32'b01111011101110110011101111011011;
    memory_AesPlugin_rom_storage[440] = 32'b00001001011110000010011011001101;
    memory_AesPlugin_rom_storage[441] = 32'b11110100000110000101100101101110;
    memory_AesPlugin_rom_storage[442] = 32'b00000001101101111001101011101100;
    memory_AesPlugin_rom_storage[443] = 32'b10101000100110100100111110000011;
    memory_AesPlugin_rom_storage[444] = 32'b01100101011011101001010111100110;
    memory_AesPlugin_rom_storage[445] = 32'b01111110111001101111111110101010;
    memory_AesPlugin_rom_storage[446] = 32'b00001000110011111011110000100001;
    memory_AesPlugin_rom_storage[447] = 32'b11100110111010000001010111101111;
    memory_AesPlugin_rom_storage[448] = 32'b11011001100110111110011110111010;
    memory_AesPlugin_rom_storage[449] = 32'b11001110001101100110111101001010;
    memory_AesPlugin_rom_storage[450] = 32'b11010100000010011001111111101010;
    memory_AesPlugin_rom_storage[451] = 32'b11010110011111001011000000101001;
    memory_AesPlugin_rom_storage[452] = 32'b10101111101100101010010000110001;
    memory_AesPlugin_rom_storage[453] = 32'b00110001001000110011111100101010;
    memory_AesPlugin_rom_storage[454] = 32'b00110000100101001010010111000110;
    memory_AesPlugin_rom_storage[455] = 32'b11000000011001101010001000110101;
    memory_AesPlugin_rom_storage[456] = 32'b00110111101111000100111001110100;
    memory_AesPlugin_rom_storage[457] = 32'b10100110110010101000001011111100;
    memory_AesPlugin_rom_storage[458] = 32'b10110000110100001001000011100000;
    memory_AesPlugin_rom_storage[459] = 32'b00010101110110001010011100110011;
    memory_AesPlugin_rom_storage[460] = 32'b01001010100110000000010011110001;
    memory_AesPlugin_rom_storage[461] = 32'b11110111110110101110110001000001;
    memory_AesPlugin_rom_storage[462] = 32'b00001110010100001100110101111111;
    memory_AesPlugin_rom_storage[463] = 32'b00101111111101101001000100010111;
    memory_AesPlugin_rom_storage[464] = 32'b10001101110101100100110101110110;
    memory_AesPlugin_rom_storage[465] = 32'b01001101101100001110111101000011;
    memory_AesPlugin_rom_storage[466] = 32'b01010100010011011010101011001100;
    memory_AesPlugin_rom_storage[467] = 32'b11011111000001001001011011100100;
    memory_AesPlugin_rom_storage[468] = 32'b11100011101101011101000110011110;
    memory_AesPlugin_rom_storage[469] = 32'b00011011100010000110101001001100;
    memory_AesPlugin_rom_storage[470] = 32'b10111000000111110010110011000001;
    memory_AesPlugin_rom_storage[471] = 32'b01111111010100010110010101000110;
    memory_AesPlugin_rom_storage[472] = 32'b00000100111010100101111010011101;
    memory_AesPlugin_rom_storage[473] = 32'b01011101001101011000110000000001;
    memory_AesPlugin_rom_storage[474] = 32'b01110011011101001000011111111010;
    memory_AesPlugin_rom_storage[475] = 32'b00101110010000010000101111111011;
    memory_AesPlugin_rom_storage[476] = 32'b01011010000111010110011110110011;
    memory_AesPlugin_rom_storage[477] = 32'b01010010110100101101101110010010;
    memory_AesPlugin_rom_storage[478] = 32'b00110011010101100001000011101001;
    memory_AesPlugin_rom_storage[479] = 32'b00010011010001111101011001101101;
    memory_AesPlugin_rom_storage[480] = 32'b10001100011000011101011110011010;
    memory_AesPlugin_rom_storage[481] = 32'b01111010000011001010000100110111;
    memory_AesPlugin_rom_storage[482] = 32'b10001110000101001111100001011001;
    memory_AesPlugin_rom_storage[483] = 32'b10001001001111000001001111101011;
    memory_AesPlugin_rom_storage[484] = 32'b11101110001001111010100111001110;
    memory_AesPlugin_rom_storage[485] = 32'b00110101110010010110000110110111;
    memory_AesPlugin_rom_storage[486] = 32'b11101101111001010001110011100001;
    memory_AesPlugin_rom_storage[487] = 32'b00111100101100010100011101111010;
    memory_AesPlugin_rom_storage[488] = 32'b01011001110111111101001010011100;
    memory_AesPlugin_rom_storage[489] = 32'b00111111011100111111001001010101;
    memory_AesPlugin_rom_storage[490] = 32'b01111001110011100001010000011000;
    memory_AesPlugin_rom_storage[491] = 32'b10111111001101111100011101110011;
    memory_AesPlugin_rom_storage[492] = 32'b11101010110011011111011101010011;
    memory_AesPlugin_rom_storage[493] = 32'b01011011101010101111110101011111;
    memory_AesPlugin_rom_storage[494] = 32'b00010100011011110011110111011111;
    memory_AesPlugin_rom_storage[495] = 32'b10000110110110110100010001111000;
    memory_AesPlugin_rom_storage[496] = 32'b10000001111100111010111111001010;
    memory_AesPlugin_rom_storage[497] = 32'b00111110110001000110100010111001;
    memory_AesPlugin_rom_storage[498] = 32'b00101100001101000010010000111000;
    memory_AesPlugin_rom_storage[499] = 32'b01011111010000001010001111000010;
    memory_AesPlugin_rom_storage[500] = 32'b01110010110000110001110100010110;
    memory_AesPlugin_rom_storage[501] = 32'b00001100001001011110001010111100;
    memory_AesPlugin_rom_storage[502] = 32'b10001011010010010011110000101000;
    memory_AesPlugin_rom_storage[503] = 32'b01000001100101010000110111111111;
    memory_AesPlugin_rom_storage[504] = 32'b01110001000000011010100000111001;
    memory_AesPlugin_rom_storage[505] = 32'b11011110101100110000110000001000;
    memory_AesPlugin_rom_storage[506] = 32'b10011100111001001011010011011000;
    memory_AesPlugin_rom_storage[507] = 32'b10010000110000010101011001100100;
    memory_AesPlugin_rom_storage[508] = 32'b01100001100001001100101101111011;
    memory_AesPlugin_rom_storage[509] = 32'b01110000101101100011001011010101;
    memory_AesPlugin_rom_storage[510] = 32'b01110100010111000110110001001000;
    memory_AesPlugin_rom_storage[511] = 32'b01000010010101111011100011010000;
  end
  always @ (posedge CLKOUT0) begin
    if(_zz_146) begin
      _zz_208 <= memory_AesPlugin_rom_storage[execute_AesPlugin_romAddress];
    end
  end

  InstructionCache IBusCachedPlugin_cache (
    .io_flush                                 (_zz_172                                                     ), //i
    .io_cpu_prefetch_isValid                  (_zz_173                                                     ), //i
    .io_cpu_prefetch_haltIt                   (IBusCachedPlugin_cache_io_cpu_prefetch_haltIt               ), //o
    .io_cpu_prefetch_pc                       (IBusCachedPlugin_iBusRsp_stages_0_input_payload[31:0]       ), //i
    .io_cpu_fetch_isValid                     (_zz_174                                                     ), //i
    .io_cpu_fetch_isStuck                     (_zz_175                                                     ), //i
    .io_cpu_fetch_isRemoved                   (_zz_176                                                     ), //i
    .io_cpu_fetch_pc                          (IBusCachedPlugin_iBusRsp_stages_1_input_payload[31:0]       ), //i
    .io_cpu_fetch_data                        (IBusCachedPlugin_cache_io_cpu_fetch_data[31:0]              ), //o
    .io_cpu_fetch_mmuRsp_physicalAddress      (IBusCachedPlugin_mmuBus_rsp_physicalAddress[31:0]           ), //i
    .io_cpu_fetch_mmuRsp_isIoAccess           (IBusCachedPlugin_mmuBus_rsp_isIoAccess                      ), //i
    .io_cpu_fetch_mmuRsp_allowRead            (IBusCachedPlugin_mmuBus_rsp_allowRead                       ), //i
    .io_cpu_fetch_mmuRsp_allowWrite           (IBusCachedPlugin_mmuBus_rsp_allowWrite                      ), //i
    .io_cpu_fetch_mmuRsp_allowExecute         (IBusCachedPlugin_mmuBus_rsp_allowExecute                    ), //i
    .io_cpu_fetch_mmuRsp_exception            (IBusCachedPlugin_mmuBus_rsp_exception                       ), //i
    .io_cpu_fetch_mmuRsp_refilling            (IBusCachedPlugin_mmuBus_rsp_refilling                       ), //i
    .io_cpu_fetch_mmuRsp_bypassTranslation    (IBusCachedPlugin_mmuBus_rsp_bypassTranslation               ), //i
    .io_cpu_fetch_mmuRsp_ways_0_sel           (IBusCachedPlugin_mmuBus_rsp_ways_0_sel                      ), //i
    .io_cpu_fetch_mmuRsp_ways_0_physical      (IBusCachedPlugin_mmuBus_rsp_ways_0_physical[31:0]           ), //i
    .io_cpu_fetch_mmuRsp_ways_1_sel           (IBusCachedPlugin_mmuBus_rsp_ways_1_sel                      ), //i
    .io_cpu_fetch_mmuRsp_ways_1_physical      (IBusCachedPlugin_mmuBus_rsp_ways_1_physical[31:0]           ), //i
    .io_cpu_fetch_mmuRsp_ways_2_sel           (IBusCachedPlugin_mmuBus_rsp_ways_2_sel                      ), //i
    .io_cpu_fetch_mmuRsp_ways_2_physical      (IBusCachedPlugin_mmuBus_rsp_ways_2_physical[31:0]           ), //i
    .io_cpu_fetch_mmuRsp_ways_3_sel           (IBusCachedPlugin_mmuBus_rsp_ways_3_sel                      ), //i
    .io_cpu_fetch_mmuRsp_ways_3_physical      (IBusCachedPlugin_mmuBus_rsp_ways_3_physical[31:0]           ), //i
    .io_cpu_fetch_physicalAddress             (IBusCachedPlugin_cache_io_cpu_fetch_physicalAddress[31:0]   ), //o
    .io_cpu_decode_isValid                    (_zz_177                                                     ), //i
    .io_cpu_decode_isStuck                    (_zz_178                                                     ), //i
    .io_cpu_decode_pc                         (IBusCachedPlugin_iBusRsp_stages_2_input_payload[31:0]       ), //i
    .io_cpu_decode_physicalAddress            (IBusCachedPlugin_cache_io_cpu_decode_physicalAddress[31:0]  ), //o
    .io_cpu_decode_data                       (IBusCachedPlugin_cache_io_cpu_decode_data[31:0]             ), //o
    .io_cpu_decode_cacheMiss                  (IBusCachedPlugin_cache_io_cpu_decode_cacheMiss              ), //o
    .io_cpu_decode_error                      (IBusCachedPlugin_cache_io_cpu_decode_error                  ), //o
    .io_cpu_decode_mmuRefilling               (IBusCachedPlugin_cache_io_cpu_decode_mmuRefilling           ), //o
    .io_cpu_decode_mmuException               (IBusCachedPlugin_cache_io_cpu_decode_mmuException           ), //o
    .io_cpu_decode_isUser                     (_zz_179                                                     ), //i
    .io_cpu_fill_valid                        (_zz_180                                                     ), //i
    .io_cpu_fill_payload                      (IBusCachedPlugin_cache_io_cpu_decode_physicalAddress[31:0]  ), //i
    .io_mem_cmd_valid                         (IBusCachedPlugin_cache_io_mem_cmd_valid                     ), //o
    .io_mem_cmd_ready                         (iBus_cmd_ready                                              ), //i
    .io_mem_cmd_payload_address               (IBusCachedPlugin_cache_io_mem_cmd_payload_address[31:0]     ), //o
    .io_mem_cmd_payload_size                  (IBusCachedPlugin_cache_io_mem_cmd_payload_size[2:0]         ), //o
    .io_mem_rsp_valid                         (iBus_rsp_valid                                              ), //i
    .io_mem_rsp_payload_data                  (iBus_rsp_payload_data[63:0]                                 ), //i
    .io_mem_rsp_payload_error                 (iBus_rsp_payload_error                                      ), //i
    ._zz_18                                   (_zz_148[2:0]                                                ), //i
    ._zz_19                                   (IBusCachedPlugin_injectionPort_payload[31:0]                ), //i
    .CLKOUT0                                  (CLKOUT0                                                     ), //i
    .systemCd_logic_outputReset               (systemCd_logic_outputReset                                  )  //i
  );
  DataCache dataCache_2 (
    .io_cpu_execute_isValid                    (_zz_181                                            ), //i
    .io_cpu_execute_address                    (_zz_182[31:0]                                      ), //i
    .io_cpu_execute_haltIt                     (dataCache_2_io_cpu_execute_haltIt                  ), //o
    .io_cpu_execute_args_wr                    (_zz_183                                            ), //i
    .io_cpu_execute_args_data                  (_zz_184[31:0]                                      ), //i
    .io_cpu_execute_args_size                  (_zz_185[1:0]                                       ), //i
    .io_cpu_execute_args_isLrsc                (_zz_186                                            ), //i
    .io_cpu_execute_args_isAmo                 (_zz_187                                            ), //i
    .io_cpu_execute_args_amoCtrl_swap          (_zz_188                                            ), //i
    .io_cpu_execute_args_amoCtrl_alu           (_zz_189[2:0]                                       ), //i
    .io_cpu_execute_args_totalyConsistent      (execute_MEMORY_FORCE_CONSTISTENCY                  ), //i
    .io_cpu_execute_refilling                  (dataCache_2_io_cpu_execute_refilling               ), //o
    .io_cpu_memory_isValid                     (_zz_190                                            ), //i
    .io_cpu_memory_isStuck                     (memory_arbitration_isStuck                         ), //i
    .io_cpu_memory_isWrite                     (dataCache_2_io_cpu_memory_isWrite                  ), //o
    .io_cpu_memory_address                     (memory_MEMORY_VIRTUAL_ADDRESS[31:0]                ), //i
    .io_cpu_memory_mmuRsp_physicalAddress      (DBusCachedPlugin_mmuBus_rsp_physicalAddress[31:0]  ), //i
    .io_cpu_memory_mmuRsp_isIoAccess           (_zz_191                                            ), //i
    .io_cpu_memory_mmuRsp_allowRead            (DBusCachedPlugin_mmuBus_rsp_allowRead              ), //i
    .io_cpu_memory_mmuRsp_allowWrite           (DBusCachedPlugin_mmuBus_rsp_allowWrite             ), //i
    .io_cpu_memory_mmuRsp_allowExecute         (DBusCachedPlugin_mmuBus_rsp_allowExecute           ), //i
    .io_cpu_memory_mmuRsp_exception            (DBusCachedPlugin_mmuBus_rsp_exception              ), //i
    .io_cpu_memory_mmuRsp_refilling            (DBusCachedPlugin_mmuBus_rsp_refilling              ), //i
    .io_cpu_memory_mmuRsp_bypassTranslation    (DBusCachedPlugin_mmuBus_rsp_bypassTranslation      ), //i
    .io_cpu_memory_mmuRsp_ways_0_sel           (DBusCachedPlugin_mmuBus_rsp_ways_0_sel             ), //i
    .io_cpu_memory_mmuRsp_ways_0_physical      (DBusCachedPlugin_mmuBus_rsp_ways_0_physical[31:0]  ), //i
    .io_cpu_memory_mmuRsp_ways_1_sel           (DBusCachedPlugin_mmuBus_rsp_ways_1_sel             ), //i
    .io_cpu_memory_mmuRsp_ways_1_physical      (DBusCachedPlugin_mmuBus_rsp_ways_1_physical[31:0]  ), //i
    .io_cpu_memory_mmuRsp_ways_2_sel           (DBusCachedPlugin_mmuBus_rsp_ways_2_sel             ), //i
    .io_cpu_memory_mmuRsp_ways_2_physical      (DBusCachedPlugin_mmuBus_rsp_ways_2_physical[31:0]  ), //i
    .io_cpu_memory_mmuRsp_ways_3_sel           (DBusCachedPlugin_mmuBus_rsp_ways_3_sel             ), //i
    .io_cpu_memory_mmuRsp_ways_3_physical      (DBusCachedPlugin_mmuBus_rsp_ways_3_physical[31:0]  ), //i
    .io_cpu_writeBack_isValid                  (_zz_192                                            ), //i
    .io_cpu_writeBack_isStuck                  (writeBack_arbitration_isStuck                      ), //i
    .io_cpu_writeBack_isUser                   (_zz_193                                            ), //i
    .io_cpu_writeBack_haltIt                   (dataCache_2_io_cpu_writeBack_haltIt                ), //o
    .io_cpu_writeBack_isWrite                  (dataCache_2_io_cpu_writeBack_isWrite               ), //o
    .io_cpu_writeBack_data                     (dataCache_2_io_cpu_writeBack_data[31:0]            ), //o
    .io_cpu_writeBack_address                  (_zz_194[31:0]                                      ), //i
    .io_cpu_writeBack_mmuException             (dataCache_2_io_cpu_writeBack_mmuException          ), //o
    .io_cpu_writeBack_unalignedAccess          (dataCache_2_io_cpu_writeBack_unalignedAccess       ), //o
    .io_cpu_writeBack_accessError              (dataCache_2_io_cpu_writeBack_accessError           ), //o
    .io_cpu_writeBack_keepMemRspData           (dataCache_2_io_cpu_writeBack_keepMemRspData        ), //o
    .io_cpu_writeBack_fence_SW                 (_zz_195                                            ), //i
    .io_cpu_writeBack_fence_SR                 (_zz_196                                            ), //i
    .io_cpu_writeBack_fence_SO                 (_zz_197                                            ), //i
    .io_cpu_writeBack_fence_SI                 (_zz_198                                            ), //i
    .io_cpu_writeBack_fence_PW                 (_zz_199                                            ), //i
    .io_cpu_writeBack_fence_PR                 (_zz_200                                            ), //i
    .io_cpu_writeBack_fence_PO                 (_zz_201                                            ), //i
    .io_cpu_writeBack_fence_PI                 (_zz_202                                            ), //i
    .io_cpu_writeBack_fence_FM                 (_zz_203[3:0]                                       ), //i
    .io_cpu_redo                               (dataCache_2_io_cpu_redo                            ), //o
    .io_cpu_flush_valid                        (_zz_204                                            ), //i
    .io_cpu_flush_ready                        (dataCache_2_io_cpu_flush_ready                     ), //o
    .io_mem_cmd_valid                          (dataCache_2_io_mem_cmd_valid                       ), //o
    .io_mem_cmd_ready                          (_zz_205                                            ), //i
    .io_mem_cmd_payload_wr                     (dataCache_2_io_mem_cmd_payload_wr                  ), //o
    .io_mem_cmd_payload_uncached               (dataCache_2_io_mem_cmd_payload_uncached            ), //o
    .io_mem_cmd_payload_address                (dataCache_2_io_mem_cmd_payload_address[31:0]       ), //o
    .io_mem_cmd_payload_data                   (dataCache_2_io_mem_cmd_payload_data[31:0]          ), //o
    .io_mem_cmd_payload_mask                   (dataCache_2_io_mem_cmd_payload_mask[3:0]           ), //o
    .io_mem_cmd_payload_length                 (dataCache_2_io_mem_cmd_payload_length[3:0]         ), //o
    .io_mem_cmd_payload_exclusive              (dataCache_2_io_mem_cmd_payload_exclusive           ), //o
    .io_mem_cmd_payload_last                   (dataCache_2_io_mem_cmd_payload_last                ), //o
    .io_mem_rsp_valid                          (dBus_rsp_valid_regNext                             ), //i
    .io_mem_rsp_payload_aggregated             (dBus_rsp_payload_aggregated_regNext[2:0]           ), //i
    .io_mem_rsp_payload_last                   (dBus_rsp_payload_last_regNext                      ), //i
    .io_mem_rsp_payload_data                   (dBus_rsp_payload_data_regNextWhen[63:0]            ), //i
    .io_mem_rsp_payload_error                  (dBus_rsp_payload_error_regNext                     ), //i
    .io_mem_rsp_payload_exclusive              (dBus_rsp_payload_exclusive_regNext                 ), //i
    .io_mem_inv_valid                          (dBus_inv_valid                                     ), //i
    .io_mem_inv_ready                          (dataCache_2_io_mem_inv_ready                       ), //o
    .io_mem_inv_payload_last                   (dBus_inv_payload_last                              ), //i
    .io_mem_inv_payload_fragment_enable        (dBus_inv_payload_fragment_enable                   ), //i
    .io_mem_inv_payload_fragment_address       (dBus_inv_payload_fragment_address[31:0]            ), //i
    .io_mem_ack_valid                          (dataCache_2_io_mem_ack_valid                       ), //o
    .io_mem_ack_ready                          (dBus_ack_ready                                     ), //i
    .io_mem_ack_payload_last                   (dataCache_2_io_mem_ack_payload_last                ), //o
    .io_mem_ack_payload_fragment_hit           (dataCache_2_io_mem_ack_payload_fragment_hit        ), //o
    .io_mem_sync_valid                         (dBus_sync_valid                                    ), //i
    .io_mem_sync_ready                         (dataCache_2_io_mem_sync_ready                      ), //o
    .io_mem_sync_payload_aggregated            (dBus_sync_payload_aggregated[2:0]                  ), //i
    .CLKOUT0                                   (CLKOUT0                                            ), //i
    .systemCd_logic_outputReset                (systemCd_logic_outputReset                         )  //i
  );
  always @(*) begin
    case(_zz_52)
      2'b00 : begin
        _zz_209 = MmuPlugin_ports_0_cache_0_valid;
        _zz_210 = MmuPlugin_ports_0_cache_0_exception;
        _zz_211 = MmuPlugin_ports_0_cache_0_superPage;
        _zz_212 = MmuPlugin_ports_0_cache_0_virtualAddress_0;
        _zz_213 = MmuPlugin_ports_0_cache_0_virtualAddress_1;
        _zz_214 = MmuPlugin_ports_0_cache_0_physicalAddress_0;
        _zz_215 = MmuPlugin_ports_0_cache_0_physicalAddress_1;
        _zz_216 = MmuPlugin_ports_0_cache_0_allowRead;
        _zz_217 = MmuPlugin_ports_0_cache_0_allowWrite;
        _zz_218 = MmuPlugin_ports_0_cache_0_allowExecute;
        _zz_219 = MmuPlugin_ports_0_cache_0_allowUser;
      end
      2'b01 : begin
        _zz_209 = MmuPlugin_ports_0_cache_1_valid;
        _zz_210 = MmuPlugin_ports_0_cache_1_exception;
        _zz_211 = MmuPlugin_ports_0_cache_1_superPage;
        _zz_212 = MmuPlugin_ports_0_cache_1_virtualAddress_0;
        _zz_213 = MmuPlugin_ports_0_cache_1_virtualAddress_1;
        _zz_214 = MmuPlugin_ports_0_cache_1_physicalAddress_0;
        _zz_215 = MmuPlugin_ports_0_cache_1_physicalAddress_1;
        _zz_216 = MmuPlugin_ports_0_cache_1_allowRead;
        _zz_217 = MmuPlugin_ports_0_cache_1_allowWrite;
        _zz_218 = MmuPlugin_ports_0_cache_1_allowExecute;
        _zz_219 = MmuPlugin_ports_0_cache_1_allowUser;
      end
      2'b10 : begin
        _zz_209 = MmuPlugin_ports_0_cache_2_valid;
        _zz_210 = MmuPlugin_ports_0_cache_2_exception;
        _zz_211 = MmuPlugin_ports_0_cache_2_superPage;
        _zz_212 = MmuPlugin_ports_0_cache_2_virtualAddress_0;
        _zz_213 = MmuPlugin_ports_0_cache_2_virtualAddress_1;
        _zz_214 = MmuPlugin_ports_0_cache_2_physicalAddress_0;
        _zz_215 = MmuPlugin_ports_0_cache_2_physicalAddress_1;
        _zz_216 = MmuPlugin_ports_0_cache_2_allowRead;
        _zz_217 = MmuPlugin_ports_0_cache_2_allowWrite;
        _zz_218 = MmuPlugin_ports_0_cache_2_allowExecute;
        _zz_219 = MmuPlugin_ports_0_cache_2_allowUser;
      end
      default : begin
        _zz_209 = MmuPlugin_ports_0_cache_3_valid;
        _zz_210 = MmuPlugin_ports_0_cache_3_exception;
        _zz_211 = MmuPlugin_ports_0_cache_3_superPage;
        _zz_212 = MmuPlugin_ports_0_cache_3_virtualAddress_0;
        _zz_213 = MmuPlugin_ports_0_cache_3_virtualAddress_1;
        _zz_214 = MmuPlugin_ports_0_cache_3_physicalAddress_0;
        _zz_215 = MmuPlugin_ports_0_cache_3_physicalAddress_1;
        _zz_216 = MmuPlugin_ports_0_cache_3_allowRead;
        _zz_217 = MmuPlugin_ports_0_cache_3_allowWrite;
        _zz_218 = MmuPlugin_ports_0_cache_3_allowExecute;
        _zz_219 = MmuPlugin_ports_0_cache_3_allowUser;
      end
    endcase
  end

  always @(*) begin
    case(_zz_56)
      2'b00 : begin
        _zz_220 = MmuPlugin_ports_1_cache_0_valid;
        _zz_221 = MmuPlugin_ports_1_cache_0_exception;
        _zz_222 = MmuPlugin_ports_1_cache_0_superPage;
        _zz_223 = MmuPlugin_ports_1_cache_0_virtualAddress_0;
        _zz_224 = MmuPlugin_ports_1_cache_0_virtualAddress_1;
        _zz_225 = MmuPlugin_ports_1_cache_0_physicalAddress_0;
        _zz_226 = MmuPlugin_ports_1_cache_0_physicalAddress_1;
        _zz_227 = MmuPlugin_ports_1_cache_0_allowRead;
        _zz_228 = MmuPlugin_ports_1_cache_0_allowWrite;
        _zz_229 = MmuPlugin_ports_1_cache_0_allowExecute;
        _zz_230 = MmuPlugin_ports_1_cache_0_allowUser;
      end
      2'b01 : begin
        _zz_220 = MmuPlugin_ports_1_cache_1_valid;
        _zz_221 = MmuPlugin_ports_1_cache_1_exception;
        _zz_222 = MmuPlugin_ports_1_cache_1_superPage;
        _zz_223 = MmuPlugin_ports_1_cache_1_virtualAddress_0;
        _zz_224 = MmuPlugin_ports_1_cache_1_virtualAddress_1;
        _zz_225 = MmuPlugin_ports_1_cache_1_physicalAddress_0;
        _zz_226 = MmuPlugin_ports_1_cache_1_physicalAddress_1;
        _zz_227 = MmuPlugin_ports_1_cache_1_allowRead;
        _zz_228 = MmuPlugin_ports_1_cache_1_allowWrite;
        _zz_229 = MmuPlugin_ports_1_cache_1_allowExecute;
        _zz_230 = MmuPlugin_ports_1_cache_1_allowUser;
      end
      2'b10 : begin
        _zz_220 = MmuPlugin_ports_1_cache_2_valid;
        _zz_221 = MmuPlugin_ports_1_cache_2_exception;
        _zz_222 = MmuPlugin_ports_1_cache_2_superPage;
        _zz_223 = MmuPlugin_ports_1_cache_2_virtualAddress_0;
        _zz_224 = MmuPlugin_ports_1_cache_2_virtualAddress_1;
        _zz_225 = MmuPlugin_ports_1_cache_2_physicalAddress_0;
        _zz_226 = MmuPlugin_ports_1_cache_2_physicalAddress_1;
        _zz_227 = MmuPlugin_ports_1_cache_2_allowRead;
        _zz_228 = MmuPlugin_ports_1_cache_2_allowWrite;
        _zz_229 = MmuPlugin_ports_1_cache_2_allowExecute;
        _zz_230 = MmuPlugin_ports_1_cache_2_allowUser;
      end
      default : begin
        _zz_220 = MmuPlugin_ports_1_cache_3_valid;
        _zz_221 = MmuPlugin_ports_1_cache_3_exception;
        _zz_222 = MmuPlugin_ports_1_cache_3_superPage;
        _zz_223 = MmuPlugin_ports_1_cache_3_virtualAddress_0;
        _zz_224 = MmuPlugin_ports_1_cache_3_virtualAddress_1;
        _zz_225 = MmuPlugin_ports_1_cache_3_physicalAddress_0;
        _zz_226 = MmuPlugin_ports_1_cache_3_physicalAddress_1;
        _zz_227 = MmuPlugin_ports_1_cache_3_allowRead;
        _zz_228 = MmuPlugin_ports_1_cache_3_allowWrite;
        _zz_229 = MmuPlugin_ports_1_cache_3_allowExecute;
        _zz_230 = MmuPlugin_ports_1_cache_3_allowUser;
      end
    endcase
  end

  always @(*) begin
    case(_zz_445)
      2'b00 : begin
        _zz_231 = DBusCachedPlugin_redoBranch_payload;
      end
      2'b01 : begin
        _zz_231 = CsrPlugin_jumpInterface_payload;
      end
      2'b10 : begin
        _zz_231 = BranchPlugin_jumpInterface_payload;
      end
      default : begin
        _zz_231 = CsrPlugin_redoInterface_payload;
      end
    endcase
  end

  always @(*) begin
    case(execute_AesPlugin_byteSel)
      2'b00 : begin
        _zz_232 = execute_RS2[7 : 0];
      end
      2'b01 : begin
        _zz_232 = execute_RS2[15 : 8];
      end
      2'b10 : begin
        _zz_232 = execute_RS2[23 : 16];
      end
      default : begin
        _zz_232 = execute_RS2[31 : 24];
      end
    endcase
  end

  always @(*) begin
    case(memory_AesPlugin_rom_address)
      2'b00 : begin
        _zz_233 = memory_AesPlugin_rom_remap_0_0;
        _zz_234 = memory_AesPlugin_rom_remap_0_1;
        _zz_235 = memory_AesPlugin_rom_remap_0_2;
        _zz_236 = memory_AesPlugin_rom_remap_0_3;
      end
      2'b01 : begin
        _zz_233 = memory_AesPlugin_rom_remap_1_0;
        _zz_234 = memory_AesPlugin_rom_remap_1_1;
        _zz_235 = memory_AesPlugin_rom_remap_1_2;
        _zz_236 = memory_AesPlugin_rom_remap_1_3;
      end
      2'b10 : begin
        _zz_233 = memory_AesPlugin_rom_remap_2_0;
        _zz_234 = memory_AesPlugin_rom_remap_2_1;
        _zz_235 = memory_AesPlugin_rom_remap_2_2;
        _zz_236 = memory_AesPlugin_rom_remap_2_3;
      end
      default : begin
        _zz_233 = memory_AesPlugin_rom_remap_3_0;
        _zz_234 = memory_AesPlugin_rom_remap_3_1;
        _zz_235 = memory_AesPlugin_rom_remap_3_2;
        _zz_236 = memory_AesPlugin_rom_remap_3_3;
      end
    endcase
  end

  always @(*) begin
    case(memory_AesPlugin_wordDesuffle_sel_0)
      2'b00 : begin
        _zz_237 = memory_AesPlugin_rom_bytes_0;
      end
      2'b01 : begin
        _zz_237 = memory_AesPlugin_rom_bytes_1;
      end
      2'b10 : begin
        _zz_237 = memory_AesPlugin_rom_bytes_2;
      end
      default : begin
        _zz_237 = memory_AesPlugin_rom_bytes_3;
      end
    endcase
  end

  always @(*) begin
    case(memory_AesPlugin_wordDesuffle_sel_1)
      2'b00 : begin
        _zz_238 = memory_AesPlugin_rom_bytes_0;
      end
      2'b01 : begin
        _zz_238 = memory_AesPlugin_rom_bytes_1;
      end
      2'b10 : begin
        _zz_238 = memory_AesPlugin_rom_bytes_2;
      end
      default : begin
        _zz_238 = memory_AesPlugin_rom_bytes_3;
      end
    endcase
  end

  always @(*) begin
    case(memory_AesPlugin_wordDesuffle_sel_2)
      2'b00 : begin
        _zz_239 = memory_AesPlugin_rom_bytes_0;
      end
      2'b01 : begin
        _zz_239 = memory_AesPlugin_rom_bytes_1;
      end
      2'b10 : begin
        _zz_239 = memory_AesPlugin_rom_bytes_2;
      end
      default : begin
        _zz_239 = memory_AesPlugin_rom_bytes_3;
      end
    endcase
  end

  always @(*) begin
    case(memory_AesPlugin_wordDesuffle_sel_3)
      2'b00 : begin
        _zz_240 = memory_AesPlugin_rom_bytes_0;
      end
      2'b01 : begin
        _zz_240 = memory_AesPlugin_rom_bytes_1;
      end
      2'b10 : begin
        _zz_240 = memory_AesPlugin_rom_bytes_2;
      end
      default : begin
        _zz_240 = memory_AesPlugin_rom_bytes_3;
      end
    endcase
  end

  `ifndef SYNTHESIS
  always @(*) begin
    case(decode_BRANCH_CTRL)
      `BranchCtrlEnum_defaultEncoding_INC : decode_BRANCH_CTRL_string = "INC ";
      `BranchCtrlEnum_defaultEncoding_B : decode_BRANCH_CTRL_string = "B   ";
      `BranchCtrlEnum_defaultEncoding_JAL : decode_BRANCH_CTRL_string = "JAL ";
      `BranchCtrlEnum_defaultEncoding_JALR : decode_BRANCH_CTRL_string = "JALR";
      default : decode_BRANCH_CTRL_string = "????";
    endcase
  end
  always @(*) begin
    case(_zz_1)
      `BranchCtrlEnum_defaultEncoding_INC : _zz_1_string = "INC ";
      `BranchCtrlEnum_defaultEncoding_B : _zz_1_string = "B   ";
      `BranchCtrlEnum_defaultEncoding_JAL : _zz_1_string = "JAL ";
      `BranchCtrlEnum_defaultEncoding_JALR : _zz_1_string = "JALR";
      default : _zz_1_string = "????";
    endcase
  end
  always @(*) begin
    case(_zz_2)
      `BranchCtrlEnum_defaultEncoding_INC : _zz_2_string = "INC ";
      `BranchCtrlEnum_defaultEncoding_B : _zz_2_string = "B   ";
      `BranchCtrlEnum_defaultEncoding_JAL : _zz_2_string = "JAL ";
      `BranchCtrlEnum_defaultEncoding_JALR : _zz_2_string = "JALR";
      default : _zz_2_string = "????";
    endcase
  end
  always @(*) begin
    case(_zz_3)
      `BranchCtrlEnum_defaultEncoding_INC : _zz_3_string = "INC ";
      `BranchCtrlEnum_defaultEncoding_B : _zz_3_string = "B   ";
      `BranchCtrlEnum_defaultEncoding_JAL : _zz_3_string = "JAL ";
      `BranchCtrlEnum_defaultEncoding_JALR : _zz_3_string = "JALR";
      default : _zz_3_string = "????";
    endcase
  end
  always @(*) begin
    case(_zz_4)
      `EnvCtrlEnum_1_defaultEncoding_NONE : _zz_4_string = "NONE ";
      `EnvCtrlEnum_1_defaultEncoding_XRET : _zz_4_string = "XRET ";
      `EnvCtrlEnum_1_defaultEncoding_WFI : _zz_4_string = "WFI  ";
      `EnvCtrlEnum_1_defaultEncoding_ECALL : _zz_4_string = "ECALL";
      default : _zz_4_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_5)
      `EnvCtrlEnum_1_defaultEncoding_NONE : _zz_5_string = "NONE ";
      `EnvCtrlEnum_1_defaultEncoding_XRET : _zz_5_string = "XRET ";
      `EnvCtrlEnum_1_defaultEncoding_WFI : _zz_5_string = "WFI  ";
      `EnvCtrlEnum_1_defaultEncoding_ECALL : _zz_5_string = "ECALL";
      default : _zz_5_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_6)
      `EnvCtrlEnum_1_defaultEncoding_NONE : _zz_6_string = "NONE ";
      `EnvCtrlEnum_1_defaultEncoding_XRET : _zz_6_string = "XRET ";
      `EnvCtrlEnum_1_defaultEncoding_WFI : _zz_6_string = "WFI  ";
      `EnvCtrlEnum_1_defaultEncoding_ECALL : _zz_6_string = "ECALL";
      default : _zz_6_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_7)
      `EnvCtrlEnum_1_defaultEncoding_NONE : _zz_7_string = "NONE ";
      `EnvCtrlEnum_1_defaultEncoding_XRET : _zz_7_string = "XRET ";
      `EnvCtrlEnum_1_defaultEncoding_WFI : _zz_7_string = "WFI  ";
      `EnvCtrlEnum_1_defaultEncoding_ECALL : _zz_7_string = "ECALL";
      default : _zz_7_string = "?????";
    endcase
  end
  always @(*) begin
    case(decode_ENV_CTRL)
      `EnvCtrlEnum_1_defaultEncoding_NONE : decode_ENV_CTRL_string = "NONE ";
      `EnvCtrlEnum_1_defaultEncoding_XRET : decode_ENV_CTRL_string = "XRET ";
      `EnvCtrlEnum_1_defaultEncoding_WFI : decode_ENV_CTRL_string = "WFI  ";
      `EnvCtrlEnum_1_defaultEncoding_ECALL : decode_ENV_CTRL_string = "ECALL";
      default : decode_ENV_CTRL_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_8)
      `EnvCtrlEnum_1_defaultEncoding_NONE : _zz_8_string = "NONE ";
      `EnvCtrlEnum_1_defaultEncoding_XRET : _zz_8_string = "XRET ";
      `EnvCtrlEnum_1_defaultEncoding_WFI : _zz_8_string = "WFI  ";
      `EnvCtrlEnum_1_defaultEncoding_ECALL : _zz_8_string = "ECALL";
      default : _zz_8_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_9)
      `EnvCtrlEnum_1_defaultEncoding_NONE : _zz_9_string = "NONE ";
      `EnvCtrlEnum_1_defaultEncoding_XRET : _zz_9_string = "XRET ";
      `EnvCtrlEnum_1_defaultEncoding_WFI : _zz_9_string = "WFI  ";
      `EnvCtrlEnum_1_defaultEncoding_ECALL : _zz_9_string = "ECALL";
      default : _zz_9_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_10)
      `EnvCtrlEnum_1_defaultEncoding_NONE : _zz_10_string = "NONE ";
      `EnvCtrlEnum_1_defaultEncoding_XRET : _zz_10_string = "XRET ";
      `EnvCtrlEnum_1_defaultEncoding_WFI : _zz_10_string = "WFI  ";
      `EnvCtrlEnum_1_defaultEncoding_ECALL : _zz_10_string = "ECALL";
      default : _zz_10_string = "?????";
    endcase
  end
  always @(*) begin
    case(decode_SHIFT_CTRL)
      `ShiftCtrlEnum_1_defaultEncoding_DISABLE_1 : decode_SHIFT_CTRL_string = "DISABLE_1";
      `ShiftCtrlEnum_1_defaultEncoding_SLL_1 : decode_SHIFT_CTRL_string = "SLL_1    ";
      `ShiftCtrlEnum_1_defaultEncoding_SRL_1 : decode_SHIFT_CTRL_string = "SRL_1    ";
      `ShiftCtrlEnum_1_defaultEncoding_SRA_1 : decode_SHIFT_CTRL_string = "SRA_1    ";
      default : decode_SHIFT_CTRL_string = "?????????";
    endcase
  end
  always @(*) begin
    case(_zz_11)
      `ShiftCtrlEnum_1_defaultEncoding_DISABLE_1 : _zz_11_string = "DISABLE_1";
      `ShiftCtrlEnum_1_defaultEncoding_SLL_1 : _zz_11_string = "SLL_1    ";
      `ShiftCtrlEnum_1_defaultEncoding_SRL_1 : _zz_11_string = "SRL_1    ";
      `ShiftCtrlEnum_1_defaultEncoding_SRA_1 : _zz_11_string = "SRA_1    ";
      default : _zz_11_string = "?????????";
    endcase
  end
  always @(*) begin
    case(_zz_12)
      `ShiftCtrlEnum_1_defaultEncoding_DISABLE_1 : _zz_12_string = "DISABLE_1";
      `ShiftCtrlEnum_1_defaultEncoding_SLL_1 : _zz_12_string = "SLL_1    ";
      `ShiftCtrlEnum_1_defaultEncoding_SRL_1 : _zz_12_string = "SRL_1    ";
      `ShiftCtrlEnum_1_defaultEncoding_SRA_1 : _zz_12_string = "SRA_1    ";
      default : _zz_12_string = "?????????";
    endcase
  end
  always @(*) begin
    case(_zz_13)
      `ShiftCtrlEnum_1_defaultEncoding_DISABLE_1 : _zz_13_string = "DISABLE_1";
      `ShiftCtrlEnum_1_defaultEncoding_SLL_1 : _zz_13_string = "SLL_1    ";
      `ShiftCtrlEnum_1_defaultEncoding_SRL_1 : _zz_13_string = "SRL_1    ";
      `ShiftCtrlEnum_1_defaultEncoding_SRA_1 : _zz_13_string = "SRA_1    ";
      default : _zz_13_string = "?????????";
    endcase
  end
  always @(*) begin
    case(decode_ALU_BITWISE_CTRL)
      `AluBitwiseCtrlEnum_defaultEncoding_XOR_1 : decode_ALU_BITWISE_CTRL_string = "XOR_1";
      `AluBitwiseCtrlEnum_defaultEncoding_OR_1 : decode_ALU_BITWISE_CTRL_string = "OR_1 ";
      `AluBitwiseCtrlEnum_defaultEncoding_AND_1 : decode_ALU_BITWISE_CTRL_string = "AND_1";
      default : decode_ALU_BITWISE_CTRL_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_14)
      `AluBitwiseCtrlEnum_defaultEncoding_XOR_1 : _zz_14_string = "XOR_1";
      `AluBitwiseCtrlEnum_defaultEncoding_OR_1 : _zz_14_string = "OR_1 ";
      `AluBitwiseCtrlEnum_defaultEncoding_AND_1 : _zz_14_string = "AND_1";
      default : _zz_14_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_15)
      `AluBitwiseCtrlEnum_defaultEncoding_XOR_1 : _zz_15_string = "XOR_1";
      `AluBitwiseCtrlEnum_defaultEncoding_OR_1 : _zz_15_string = "OR_1 ";
      `AluBitwiseCtrlEnum_defaultEncoding_AND_1 : _zz_15_string = "AND_1";
      default : _zz_15_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_16)
      `AluBitwiseCtrlEnum_defaultEncoding_XOR_1 : _zz_16_string = "XOR_1";
      `AluBitwiseCtrlEnum_defaultEncoding_OR_1 : _zz_16_string = "OR_1 ";
      `AluBitwiseCtrlEnum_defaultEncoding_AND_1 : _zz_16_string = "AND_1";
      default : _zz_16_string = "?????";
    endcase
  end
  always @(*) begin
    case(decode_ALU_CTRL)
      `AluCtrlEnum_defaultEncoding_ADD_SUB : decode_ALU_CTRL_string = "ADD_SUB ";
      `AluCtrlEnum_defaultEncoding_SLT_SLTU : decode_ALU_CTRL_string = "SLT_SLTU";
      `AluCtrlEnum_defaultEncoding_BITWISE : decode_ALU_CTRL_string = "BITWISE ";
      default : decode_ALU_CTRL_string = "????????";
    endcase
  end
  always @(*) begin
    case(_zz_17)
      `AluCtrlEnum_defaultEncoding_ADD_SUB : _zz_17_string = "ADD_SUB ";
      `AluCtrlEnum_defaultEncoding_SLT_SLTU : _zz_17_string = "SLT_SLTU";
      `AluCtrlEnum_defaultEncoding_BITWISE : _zz_17_string = "BITWISE ";
      default : _zz_17_string = "????????";
    endcase
  end
  always @(*) begin
    case(_zz_18)
      `AluCtrlEnum_defaultEncoding_ADD_SUB : _zz_18_string = "ADD_SUB ";
      `AluCtrlEnum_defaultEncoding_SLT_SLTU : _zz_18_string = "SLT_SLTU";
      `AluCtrlEnum_defaultEncoding_BITWISE : _zz_18_string = "BITWISE ";
      default : _zz_18_string = "????????";
    endcase
  end
  always @(*) begin
    case(_zz_19)
      `AluCtrlEnum_defaultEncoding_ADD_SUB : _zz_19_string = "ADD_SUB ";
      `AluCtrlEnum_defaultEncoding_SLT_SLTU : _zz_19_string = "SLT_SLTU";
      `AluCtrlEnum_defaultEncoding_BITWISE : _zz_19_string = "BITWISE ";
      default : _zz_19_string = "????????";
    endcase
  end
  always @(*) begin
    case(execute_BRANCH_CTRL)
      `BranchCtrlEnum_defaultEncoding_INC : execute_BRANCH_CTRL_string = "INC ";
      `BranchCtrlEnum_defaultEncoding_B : execute_BRANCH_CTRL_string = "B   ";
      `BranchCtrlEnum_defaultEncoding_JAL : execute_BRANCH_CTRL_string = "JAL ";
      `BranchCtrlEnum_defaultEncoding_JALR : execute_BRANCH_CTRL_string = "JALR";
      default : execute_BRANCH_CTRL_string = "????";
    endcase
  end
  always @(*) begin
    case(_zz_20)
      `BranchCtrlEnum_defaultEncoding_INC : _zz_20_string = "INC ";
      `BranchCtrlEnum_defaultEncoding_B : _zz_20_string = "B   ";
      `BranchCtrlEnum_defaultEncoding_JAL : _zz_20_string = "JAL ";
      `BranchCtrlEnum_defaultEncoding_JALR : _zz_20_string = "JALR";
      default : _zz_20_string = "????";
    endcase
  end
  always @(*) begin
    case(memory_ENV_CTRL)
      `EnvCtrlEnum_1_defaultEncoding_NONE : memory_ENV_CTRL_string = "NONE ";
      `EnvCtrlEnum_1_defaultEncoding_XRET : memory_ENV_CTRL_string = "XRET ";
      `EnvCtrlEnum_1_defaultEncoding_WFI : memory_ENV_CTRL_string = "WFI  ";
      `EnvCtrlEnum_1_defaultEncoding_ECALL : memory_ENV_CTRL_string = "ECALL";
      default : memory_ENV_CTRL_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_21)
      `EnvCtrlEnum_1_defaultEncoding_NONE : _zz_21_string = "NONE ";
      `EnvCtrlEnum_1_defaultEncoding_XRET : _zz_21_string = "XRET ";
      `EnvCtrlEnum_1_defaultEncoding_WFI : _zz_21_string = "WFI  ";
      `EnvCtrlEnum_1_defaultEncoding_ECALL : _zz_21_string = "ECALL";
      default : _zz_21_string = "?????";
    endcase
  end
  always @(*) begin
    case(execute_ENV_CTRL)
      `EnvCtrlEnum_1_defaultEncoding_NONE : execute_ENV_CTRL_string = "NONE ";
      `EnvCtrlEnum_1_defaultEncoding_XRET : execute_ENV_CTRL_string = "XRET ";
      `EnvCtrlEnum_1_defaultEncoding_WFI : execute_ENV_CTRL_string = "WFI  ";
      `EnvCtrlEnum_1_defaultEncoding_ECALL : execute_ENV_CTRL_string = "ECALL";
      default : execute_ENV_CTRL_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_22)
      `EnvCtrlEnum_1_defaultEncoding_NONE : _zz_22_string = "NONE ";
      `EnvCtrlEnum_1_defaultEncoding_XRET : _zz_22_string = "XRET ";
      `EnvCtrlEnum_1_defaultEncoding_WFI : _zz_22_string = "WFI  ";
      `EnvCtrlEnum_1_defaultEncoding_ECALL : _zz_22_string = "ECALL";
      default : _zz_22_string = "?????";
    endcase
  end
  always @(*) begin
    case(writeBack_ENV_CTRL)
      `EnvCtrlEnum_1_defaultEncoding_NONE : writeBack_ENV_CTRL_string = "NONE ";
      `EnvCtrlEnum_1_defaultEncoding_XRET : writeBack_ENV_CTRL_string = "XRET ";
      `EnvCtrlEnum_1_defaultEncoding_WFI : writeBack_ENV_CTRL_string = "WFI  ";
      `EnvCtrlEnum_1_defaultEncoding_ECALL : writeBack_ENV_CTRL_string = "ECALL";
      default : writeBack_ENV_CTRL_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_23)
      `EnvCtrlEnum_1_defaultEncoding_NONE : _zz_23_string = "NONE ";
      `EnvCtrlEnum_1_defaultEncoding_XRET : _zz_23_string = "XRET ";
      `EnvCtrlEnum_1_defaultEncoding_WFI : _zz_23_string = "WFI  ";
      `EnvCtrlEnum_1_defaultEncoding_ECALL : _zz_23_string = "ECALL";
      default : _zz_23_string = "?????";
    endcase
  end
  always @(*) begin
    case(execute_SHIFT_CTRL)
      `ShiftCtrlEnum_1_defaultEncoding_DISABLE_1 : execute_SHIFT_CTRL_string = "DISABLE_1";
      `ShiftCtrlEnum_1_defaultEncoding_SLL_1 : execute_SHIFT_CTRL_string = "SLL_1    ";
      `ShiftCtrlEnum_1_defaultEncoding_SRL_1 : execute_SHIFT_CTRL_string = "SRL_1    ";
      `ShiftCtrlEnum_1_defaultEncoding_SRA_1 : execute_SHIFT_CTRL_string = "SRA_1    ";
      default : execute_SHIFT_CTRL_string = "?????????";
    endcase
  end
  always @(*) begin
    case(_zz_26)
      `ShiftCtrlEnum_1_defaultEncoding_DISABLE_1 : _zz_26_string = "DISABLE_1";
      `ShiftCtrlEnum_1_defaultEncoding_SLL_1 : _zz_26_string = "SLL_1    ";
      `ShiftCtrlEnum_1_defaultEncoding_SRL_1 : _zz_26_string = "SRL_1    ";
      `ShiftCtrlEnum_1_defaultEncoding_SRA_1 : _zz_26_string = "SRA_1    ";
      default : _zz_26_string = "?????????";
    endcase
  end
  always @(*) begin
    case(decode_SRC2_CTRL)
      `Src2CtrlEnum_1_defaultEncoding_RS : decode_SRC2_CTRL_string = "RS ";
      `Src2CtrlEnum_1_defaultEncoding_IMI : decode_SRC2_CTRL_string = "IMI";
      `Src2CtrlEnum_1_defaultEncoding_IMS : decode_SRC2_CTRL_string = "IMS";
      `Src2CtrlEnum_1_defaultEncoding_PC : decode_SRC2_CTRL_string = "PC ";
      default : decode_SRC2_CTRL_string = "???";
    endcase
  end
  always @(*) begin
    case(_zz_29)
      `Src2CtrlEnum_1_defaultEncoding_RS : _zz_29_string = "RS ";
      `Src2CtrlEnum_1_defaultEncoding_IMI : _zz_29_string = "IMI";
      `Src2CtrlEnum_1_defaultEncoding_IMS : _zz_29_string = "IMS";
      `Src2CtrlEnum_1_defaultEncoding_PC : _zz_29_string = "PC ";
      default : _zz_29_string = "???";
    endcase
  end
  always @(*) begin
    case(decode_SRC1_CTRL)
      `Src1CtrlEnum_1_defaultEncoding_RS : decode_SRC1_CTRL_string = "RS          ";
      `Src1CtrlEnum_1_defaultEncoding_IMU : decode_SRC1_CTRL_string = "IMU         ";
      `Src1CtrlEnum_1_defaultEncoding_PC_INCREMENT : decode_SRC1_CTRL_string = "PC_INCREMENT";
      `Src1CtrlEnum_1_defaultEncoding_URS1 : decode_SRC1_CTRL_string = "URS1        ";
      default : decode_SRC1_CTRL_string = "????????????";
    endcase
  end
  always @(*) begin
    case(_zz_31)
      `Src1CtrlEnum_1_defaultEncoding_RS : _zz_31_string = "RS          ";
      `Src1CtrlEnum_1_defaultEncoding_IMU : _zz_31_string = "IMU         ";
      `Src1CtrlEnum_1_defaultEncoding_PC_INCREMENT : _zz_31_string = "PC_INCREMENT";
      `Src1CtrlEnum_1_defaultEncoding_URS1 : _zz_31_string = "URS1        ";
      default : _zz_31_string = "????????????";
    endcase
  end
  always @(*) begin
    case(execute_ALU_CTRL)
      `AluCtrlEnum_defaultEncoding_ADD_SUB : execute_ALU_CTRL_string = "ADD_SUB ";
      `AluCtrlEnum_defaultEncoding_SLT_SLTU : execute_ALU_CTRL_string = "SLT_SLTU";
      `AluCtrlEnum_defaultEncoding_BITWISE : execute_ALU_CTRL_string = "BITWISE ";
      default : execute_ALU_CTRL_string = "????????";
    endcase
  end
  always @(*) begin
    case(_zz_32)
      `AluCtrlEnum_defaultEncoding_ADD_SUB : _zz_32_string = "ADD_SUB ";
      `AluCtrlEnum_defaultEncoding_SLT_SLTU : _zz_32_string = "SLT_SLTU";
      `AluCtrlEnum_defaultEncoding_BITWISE : _zz_32_string = "BITWISE ";
      default : _zz_32_string = "????????";
    endcase
  end
  always @(*) begin
    case(execute_ALU_BITWISE_CTRL)
      `AluBitwiseCtrlEnum_defaultEncoding_XOR_1 : execute_ALU_BITWISE_CTRL_string = "XOR_1";
      `AluBitwiseCtrlEnum_defaultEncoding_OR_1 : execute_ALU_BITWISE_CTRL_string = "OR_1 ";
      `AluBitwiseCtrlEnum_defaultEncoding_AND_1 : execute_ALU_BITWISE_CTRL_string = "AND_1";
      default : execute_ALU_BITWISE_CTRL_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_33)
      `AluBitwiseCtrlEnum_defaultEncoding_XOR_1 : _zz_33_string = "XOR_1";
      `AluBitwiseCtrlEnum_defaultEncoding_OR_1 : _zz_33_string = "OR_1 ";
      `AluBitwiseCtrlEnum_defaultEncoding_AND_1 : _zz_33_string = "AND_1";
      default : _zz_33_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_37)
      `BranchCtrlEnum_defaultEncoding_INC : _zz_37_string = "INC ";
      `BranchCtrlEnum_defaultEncoding_B : _zz_37_string = "B   ";
      `BranchCtrlEnum_defaultEncoding_JAL : _zz_37_string = "JAL ";
      `BranchCtrlEnum_defaultEncoding_JALR : _zz_37_string = "JALR";
      default : _zz_37_string = "????";
    endcase
  end
  always @(*) begin
    case(_zz_38)
      `EnvCtrlEnum_1_defaultEncoding_NONE : _zz_38_string = "NONE ";
      `EnvCtrlEnum_1_defaultEncoding_XRET : _zz_38_string = "XRET ";
      `EnvCtrlEnum_1_defaultEncoding_WFI : _zz_38_string = "WFI  ";
      `EnvCtrlEnum_1_defaultEncoding_ECALL : _zz_38_string = "ECALL";
      default : _zz_38_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_39)
      `ShiftCtrlEnum_1_defaultEncoding_DISABLE_1 : _zz_39_string = "DISABLE_1";
      `ShiftCtrlEnum_1_defaultEncoding_SLL_1 : _zz_39_string = "SLL_1    ";
      `ShiftCtrlEnum_1_defaultEncoding_SRL_1 : _zz_39_string = "SRL_1    ";
      `ShiftCtrlEnum_1_defaultEncoding_SRA_1 : _zz_39_string = "SRA_1    ";
      default : _zz_39_string = "?????????";
    endcase
  end
  always @(*) begin
    case(_zz_40)
      `AluBitwiseCtrlEnum_defaultEncoding_XOR_1 : _zz_40_string = "XOR_1";
      `AluBitwiseCtrlEnum_defaultEncoding_OR_1 : _zz_40_string = "OR_1 ";
      `AluBitwiseCtrlEnum_defaultEncoding_AND_1 : _zz_40_string = "AND_1";
      default : _zz_40_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_41)
      `Src2CtrlEnum_1_defaultEncoding_RS : _zz_41_string = "RS ";
      `Src2CtrlEnum_1_defaultEncoding_IMI : _zz_41_string = "IMI";
      `Src2CtrlEnum_1_defaultEncoding_IMS : _zz_41_string = "IMS";
      `Src2CtrlEnum_1_defaultEncoding_PC : _zz_41_string = "PC ";
      default : _zz_41_string = "???";
    endcase
  end
  always @(*) begin
    case(_zz_42)
      `AluCtrlEnum_defaultEncoding_ADD_SUB : _zz_42_string = "ADD_SUB ";
      `AluCtrlEnum_defaultEncoding_SLT_SLTU : _zz_42_string = "SLT_SLTU";
      `AluCtrlEnum_defaultEncoding_BITWISE : _zz_42_string = "BITWISE ";
      default : _zz_42_string = "????????";
    endcase
  end
  always @(*) begin
    case(_zz_43)
      `Src1CtrlEnum_1_defaultEncoding_RS : _zz_43_string = "RS          ";
      `Src1CtrlEnum_1_defaultEncoding_IMU : _zz_43_string = "IMU         ";
      `Src1CtrlEnum_1_defaultEncoding_PC_INCREMENT : _zz_43_string = "PC_INCREMENT";
      `Src1CtrlEnum_1_defaultEncoding_URS1 : _zz_43_string = "URS1        ";
      default : _zz_43_string = "????????????";
    endcase
  end
  always @(*) begin
    case(MmuPlugin_shared_state_1)
      `MmuPlugin_shared_State_1_defaultEncoding_IDLE : MmuPlugin_shared_state_1_string = "IDLE  ";
      `MmuPlugin_shared_State_1_defaultEncoding_L1_CMD : MmuPlugin_shared_state_1_string = "L1_CMD";
      `MmuPlugin_shared_State_1_defaultEncoding_L1_RSP : MmuPlugin_shared_state_1_string = "L1_RSP";
      `MmuPlugin_shared_State_1_defaultEncoding_L0_CMD : MmuPlugin_shared_state_1_string = "L0_CMD";
      `MmuPlugin_shared_State_1_defaultEncoding_L0_RSP : MmuPlugin_shared_state_1_string = "L0_RSP";
      default : MmuPlugin_shared_state_1_string = "??????";
    endcase
  end
  always @(*) begin
    case(_zz_94)
      `Src1CtrlEnum_1_defaultEncoding_RS : _zz_94_string = "RS          ";
      `Src1CtrlEnum_1_defaultEncoding_IMU : _zz_94_string = "IMU         ";
      `Src1CtrlEnum_1_defaultEncoding_PC_INCREMENT : _zz_94_string = "PC_INCREMENT";
      `Src1CtrlEnum_1_defaultEncoding_URS1 : _zz_94_string = "URS1        ";
      default : _zz_94_string = "????????????";
    endcase
  end
  always @(*) begin
    case(_zz_95)
      `AluCtrlEnum_defaultEncoding_ADD_SUB : _zz_95_string = "ADD_SUB ";
      `AluCtrlEnum_defaultEncoding_SLT_SLTU : _zz_95_string = "SLT_SLTU";
      `AluCtrlEnum_defaultEncoding_BITWISE : _zz_95_string = "BITWISE ";
      default : _zz_95_string = "????????";
    endcase
  end
  always @(*) begin
    case(_zz_96)
      `Src2CtrlEnum_1_defaultEncoding_RS : _zz_96_string = "RS ";
      `Src2CtrlEnum_1_defaultEncoding_IMI : _zz_96_string = "IMI";
      `Src2CtrlEnum_1_defaultEncoding_IMS : _zz_96_string = "IMS";
      `Src2CtrlEnum_1_defaultEncoding_PC : _zz_96_string = "PC ";
      default : _zz_96_string = "???";
    endcase
  end
  always @(*) begin
    case(_zz_97)
      `AluBitwiseCtrlEnum_defaultEncoding_XOR_1 : _zz_97_string = "XOR_1";
      `AluBitwiseCtrlEnum_defaultEncoding_OR_1 : _zz_97_string = "OR_1 ";
      `AluBitwiseCtrlEnum_defaultEncoding_AND_1 : _zz_97_string = "AND_1";
      default : _zz_97_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_98)
      `ShiftCtrlEnum_1_defaultEncoding_DISABLE_1 : _zz_98_string = "DISABLE_1";
      `ShiftCtrlEnum_1_defaultEncoding_SLL_1 : _zz_98_string = "SLL_1    ";
      `ShiftCtrlEnum_1_defaultEncoding_SRL_1 : _zz_98_string = "SRL_1    ";
      `ShiftCtrlEnum_1_defaultEncoding_SRA_1 : _zz_98_string = "SRA_1    ";
      default : _zz_98_string = "?????????";
    endcase
  end
  always @(*) begin
    case(_zz_99)
      `EnvCtrlEnum_1_defaultEncoding_NONE : _zz_99_string = "NONE ";
      `EnvCtrlEnum_1_defaultEncoding_XRET : _zz_99_string = "XRET ";
      `EnvCtrlEnum_1_defaultEncoding_WFI : _zz_99_string = "WFI  ";
      `EnvCtrlEnum_1_defaultEncoding_ECALL : _zz_99_string = "ECALL";
      default : _zz_99_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_100)
      `BranchCtrlEnum_defaultEncoding_INC : _zz_100_string = "INC ";
      `BranchCtrlEnum_defaultEncoding_B : _zz_100_string = "B   ";
      `BranchCtrlEnum_defaultEncoding_JAL : _zz_100_string = "JAL ";
      `BranchCtrlEnum_defaultEncoding_JALR : _zz_100_string = "JALR";
      default : _zz_100_string = "????";
    endcase
  end
  always @(*) begin
    case(decode_to_execute_ALU_CTRL)
      `AluCtrlEnum_defaultEncoding_ADD_SUB : decode_to_execute_ALU_CTRL_string = "ADD_SUB ";
      `AluCtrlEnum_defaultEncoding_SLT_SLTU : decode_to_execute_ALU_CTRL_string = "SLT_SLTU";
      `AluCtrlEnum_defaultEncoding_BITWISE : decode_to_execute_ALU_CTRL_string = "BITWISE ";
      default : decode_to_execute_ALU_CTRL_string = "????????";
    endcase
  end
  always @(*) begin
    case(decode_to_execute_ALU_BITWISE_CTRL)
      `AluBitwiseCtrlEnum_defaultEncoding_XOR_1 : decode_to_execute_ALU_BITWISE_CTRL_string = "XOR_1";
      `AluBitwiseCtrlEnum_defaultEncoding_OR_1 : decode_to_execute_ALU_BITWISE_CTRL_string = "OR_1 ";
      `AluBitwiseCtrlEnum_defaultEncoding_AND_1 : decode_to_execute_ALU_BITWISE_CTRL_string = "AND_1";
      default : decode_to_execute_ALU_BITWISE_CTRL_string = "?????";
    endcase
  end
  always @(*) begin
    case(decode_to_execute_SHIFT_CTRL)
      `ShiftCtrlEnum_1_defaultEncoding_DISABLE_1 : decode_to_execute_SHIFT_CTRL_string = "DISABLE_1";
      `ShiftCtrlEnum_1_defaultEncoding_SLL_1 : decode_to_execute_SHIFT_CTRL_string = "SLL_1    ";
      `ShiftCtrlEnum_1_defaultEncoding_SRL_1 : decode_to_execute_SHIFT_CTRL_string = "SRL_1    ";
      `ShiftCtrlEnum_1_defaultEncoding_SRA_1 : decode_to_execute_SHIFT_CTRL_string = "SRA_1    ";
      default : decode_to_execute_SHIFT_CTRL_string = "?????????";
    endcase
  end
  always @(*) begin
    case(decode_to_execute_ENV_CTRL)
      `EnvCtrlEnum_1_defaultEncoding_NONE : decode_to_execute_ENV_CTRL_string = "NONE ";
      `EnvCtrlEnum_1_defaultEncoding_XRET : decode_to_execute_ENV_CTRL_string = "XRET ";
      `EnvCtrlEnum_1_defaultEncoding_WFI : decode_to_execute_ENV_CTRL_string = "WFI  ";
      `EnvCtrlEnum_1_defaultEncoding_ECALL : decode_to_execute_ENV_CTRL_string = "ECALL";
      default : decode_to_execute_ENV_CTRL_string = "?????";
    endcase
  end
  always @(*) begin
    case(execute_to_memory_ENV_CTRL)
      `EnvCtrlEnum_1_defaultEncoding_NONE : execute_to_memory_ENV_CTRL_string = "NONE ";
      `EnvCtrlEnum_1_defaultEncoding_XRET : execute_to_memory_ENV_CTRL_string = "XRET ";
      `EnvCtrlEnum_1_defaultEncoding_WFI : execute_to_memory_ENV_CTRL_string = "WFI  ";
      `EnvCtrlEnum_1_defaultEncoding_ECALL : execute_to_memory_ENV_CTRL_string = "ECALL";
      default : execute_to_memory_ENV_CTRL_string = "?????";
    endcase
  end
  always @(*) begin
    case(memory_to_writeBack_ENV_CTRL)
      `EnvCtrlEnum_1_defaultEncoding_NONE : memory_to_writeBack_ENV_CTRL_string = "NONE ";
      `EnvCtrlEnum_1_defaultEncoding_XRET : memory_to_writeBack_ENV_CTRL_string = "XRET ";
      `EnvCtrlEnum_1_defaultEncoding_WFI : memory_to_writeBack_ENV_CTRL_string = "WFI  ";
      `EnvCtrlEnum_1_defaultEncoding_ECALL : memory_to_writeBack_ENV_CTRL_string = "ECALL";
      default : memory_to_writeBack_ENV_CTRL_string = "?????";
    endcase
  end
  always @(*) begin
    case(decode_to_execute_BRANCH_CTRL)
      `BranchCtrlEnum_defaultEncoding_INC : decode_to_execute_BRANCH_CTRL_string = "INC ";
      `BranchCtrlEnum_defaultEncoding_B : decode_to_execute_BRANCH_CTRL_string = "B   ";
      `BranchCtrlEnum_defaultEncoding_JAL : decode_to_execute_BRANCH_CTRL_string = "JAL ";
      `BranchCtrlEnum_defaultEncoding_JALR : decode_to_execute_BRANCH_CTRL_string = "JALR";
      default : decode_to_execute_BRANCH_CTRL_string = "????";
    endcase
  end
  `endif

  assign memory_CALC = memory_AesPlugin_xored;
  assign memory_MUL_LOW = ($signed(_zz_303) + $signed(_zz_311));
  assign execute_BRANCH_CALC = {execute_BranchPlugin_branchAdder[31 : 1],1'b0};
  assign execute_BRANCH_DO = _zz_138;
  assign memory_MUL_HH = execute_to_memory_MUL_HH;
  assign execute_MUL_HH = ($signed(execute_MulPlugin_aHigh) * $signed(execute_MulPlugin_bHigh));
  assign execute_MUL_HL = ($signed(execute_MulPlugin_aHigh) * $signed(execute_MulPlugin_bSLow));
  assign execute_MUL_LH = ($signed(execute_MulPlugin_aSLow) * $signed(execute_MulPlugin_bHigh));
  assign execute_MUL_LL = (execute_MulPlugin_aULow * execute_MulPlugin_bULow);
  assign memory_REGFILE_WRITE_DATA = execute_to_memory_REGFILE_WRITE_DATA;
  assign execute_REGFILE_WRITE_DATA = _zz_102;
  assign execute_MEMORY_VIRTUAL_ADDRESS = _zz_182;
  assign memory_MEMORY_ADDRESS_LOW = execute_to_memory_MEMORY_ADDRESS_LOW;
  assign execute_MEMORY_ADDRESS_LOW = _zz_182[1 : 0];
  assign decode_DO_EBREAK = (((! DebugPlugin_haltIt) && (decode_IS_EBREAK || 1'b0)) && DebugPlugin_allowEBreak);
  assign decode_CSR_READ_OPCODE = (decode_INSTRUCTION[13 : 7] != 7'h20);
  assign decode_CSR_WRITE_OPCODE = (! (((decode_INSTRUCTION[14 : 13] == 2'b01) && (decode_INSTRUCTION[19 : 15] == 5'h0)) || ((decode_INSTRUCTION[14 : 13] == 2'b11) && (decode_INSTRUCTION[19 : 15] == 5'h0))));
  assign decode_SRC2 = _zz_108;
  assign decode_SRC1 = _zz_103;
  assign decode_SRC2_FORCE_ZERO = (decode_SRC_ADD_ZERO && (! decode_SRC_USE_SUB_LESS));
  assign memory_IS_AES = execute_to_memory_IS_AES;
  assign execute_IS_AES = decode_to_execute_IS_AES;
  assign decode_IS_AES = _zz_312[0];
  assign decode_BRANCH_CTRL = _zz_1;
  assign _zz_2 = _zz_3;
  assign _zz_4 = _zz_5;
  assign _zz_6 = _zz_7;
  assign decode_ENV_CTRL = _zz_8;
  assign _zz_9 = _zz_10;
  assign decode_IS_CSR = _zz_313[0];
  assign decode_IS_RS2_SIGNED = _zz_314[0];
  assign decode_IS_RS1_SIGNED = _zz_315[0];
  assign decode_IS_DIV = _zz_316[0];
  assign memory_IS_MUL = execute_to_memory_IS_MUL;
  assign execute_IS_MUL = decode_to_execute_IS_MUL;
  assign decode_IS_MUL = _zz_317[0];
  assign decode_SHIFT_CTRL = _zz_11;
  assign _zz_12 = _zz_13;
  assign decode_ALU_BITWISE_CTRL = _zz_14;
  assign _zz_15 = _zz_16;
  assign decode_SRC_LESS_UNSIGNED = _zz_318[0];
  assign memory_MEMORY_FENCE = execute_to_memory_MEMORY_FENCE;
  assign execute_MEMORY_FENCE = decode_to_execute_MEMORY_FENCE;
  assign decode_MEMORY_FENCE = _zz_319[0];
  assign decode_MEMORY_MANAGMENT = _zz_320[0];
  assign memory_MEMORY_AMO = execute_to_memory_MEMORY_AMO;
  assign memory_MEMORY_LRSC = execute_to_memory_MEMORY_LRSC;
  assign memory_MEMORY_WR = execute_to_memory_MEMORY_WR;
  assign decode_MEMORY_WR = _zz_321[0];
  assign execute_BYPASSABLE_MEMORY_STAGE = decode_to_execute_BYPASSABLE_MEMORY_STAGE;
  assign decode_BYPASSABLE_MEMORY_STAGE = _zz_322[0];
  assign decode_BYPASSABLE_EXECUTE_STAGE = _zz_323[0];
  assign decode_ALU_CTRL = _zz_17;
  assign _zz_18 = _zz_19;
  assign memory_IS_SFENCE_VMA = execute_to_memory_IS_SFENCE_VMA;
  assign execute_IS_SFENCE_VMA = decode_to_execute_IS_SFENCE_VMA;
  assign decode_IS_SFENCE_VMA = _zz_324[0];
  assign decode_MEMORY_FORCE_CONSTISTENCY = _zz_45;
  assign writeBack_FORMAL_PC_NEXT = memory_to_writeBack_FORMAL_PC_NEXT;
  assign memory_FORMAL_PC_NEXT = execute_to_memory_FORMAL_PC_NEXT;
  assign execute_FORMAL_PC_NEXT = decode_to_execute_FORMAL_PC_NEXT;
  assign decode_FORMAL_PC_NEXT = (decode_PC + 32'h00000004);
  assign memory_PC = execute_to_memory_PC;
  assign execute_DO_EBREAK = decode_to_execute_DO_EBREAK;
  assign decode_IS_EBREAK = _zz_325[0];
  assign writeBack_CALC = memory_to_writeBack_CALC;
  assign writeBack_IS_AES = memory_to_writeBack_IS_AES;
  assign memory_RS1 = execute_to_memory_RS1;
  assign memory_BRANCH_CALC = execute_to_memory_BRANCH_CALC;
  assign memory_BRANCH_DO = execute_to_memory_BRANCH_DO;
  assign execute_PC = decode_to_execute_PC;
  assign execute_BRANCH_CTRL = _zz_20;
  assign execute_CSR_READ_OPCODE = decode_to_execute_CSR_READ_OPCODE;
  assign execute_CSR_WRITE_OPCODE = decode_to_execute_CSR_WRITE_OPCODE;
  assign execute_IS_CSR = decode_to_execute_IS_CSR;
  assign memory_ENV_CTRL = _zz_21;
  assign execute_ENV_CTRL = _zz_22;
  assign writeBack_ENV_CTRL = _zz_23;
  assign execute_IS_RS1_SIGNED = decode_to_execute_IS_RS1_SIGNED;
  assign execute_IS_DIV = decode_to_execute_IS_DIV;
  assign execute_IS_RS2_SIGNED = decode_to_execute_IS_RS2_SIGNED;
  assign memory_IS_DIV = execute_to_memory_IS_DIV;
  assign writeBack_IS_MUL = memory_to_writeBack_IS_MUL;
  assign writeBack_MUL_HH = memory_to_writeBack_MUL_HH;
  assign writeBack_MUL_LOW = memory_to_writeBack_MUL_LOW;
  assign memory_MUL_HL = execute_to_memory_MUL_HL;
  assign memory_MUL_LH = execute_to_memory_MUL_LH;
  assign memory_MUL_LL = execute_to_memory_MUL_LL;
  assign execute_RS1 = decode_to_execute_RS1;
  assign decode_RS2_USE = _zz_326[0];
  assign decode_RS1_USE = _zz_327[0];
  assign execute_REGFILE_WRITE_VALID = decode_to_execute_REGFILE_WRITE_VALID;
  assign execute_BYPASSABLE_EXECUTE_STAGE = decode_to_execute_BYPASSABLE_EXECUTE_STAGE;
  always @ (*) begin
    _zz_24 = memory_REGFILE_WRITE_DATA;
    if(_zz_241)begin
      _zz_24 = memory_MulDivIterativePlugin_div_result;
    end
  end

  assign memory_REGFILE_WRITE_VALID = execute_to_memory_REGFILE_WRITE_VALID;
  assign memory_INSTRUCTION = execute_to_memory_INSTRUCTION;
  assign memory_BYPASSABLE_MEMORY_STAGE = execute_to_memory_BYPASSABLE_MEMORY_STAGE;
  assign writeBack_REGFILE_WRITE_VALID = memory_to_writeBack_REGFILE_WRITE_VALID;
  always @ (*) begin
    decode_RS2 = decode_RegFilePlugin_rs2Data;
    if(_zz_113)begin
      if((_zz_114 == decode_INSTRUCTION[24 : 20]))begin
        decode_RS2 = _zz_115;
      end
    end
    if(_zz_242)begin
      if(_zz_243)begin
        if(_zz_117)begin
          decode_RS2 = _zz_44;
        end
      end
    end
    if(_zz_244)begin
      if(memory_BYPASSABLE_MEMORY_STAGE)begin
        if(_zz_119)begin
          decode_RS2 = _zz_24;
        end
      end
    end
    if(_zz_245)begin
      if(execute_BYPASSABLE_EXECUTE_STAGE)begin
        if(_zz_121)begin
          decode_RS2 = _zz_25;
        end
      end
    end
  end

  always @ (*) begin
    decode_RS1 = decode_RegFilePlugin_rs1Data;
    if(_zz_113)begin
      if((_zz_114 == decode_INSTRUCTION[19 : 15]))begin
        decode_RS1 = _zz_115;
      end
    end
    if(_zz_242)begin
      if(_zz_243)begin
        if(_zz_116)begin
          decode_RS1 = _zz_44;
        end
      end
    end
    if(_zz_244)begin
      if(memory_BYPASSABLE_MEMORY_STAGE)begin
        if(_zz_118)begin
          decode_RS1 = _zz_24;
        end
      end
    end
    if(_zz_245)begin
      if(execute_BYPASSABLE_EXECUTE_STAGE)begin
        if(_zz_120)begin
          decode_RS1 = _zz_25;
        end
      end
    end
  end

  assign execute_SHIFT_RIGHT = _zz_329;
  always @ (*) begin
    _zz_25 = execute_REGFILE_WRITE_DATA;
    if(execute_arbitration_isValid)begin
      case(execute_SHIFT_CTRL)
        `ShiftCtrlEnum_1_defaultEncoding_SLL_1 : begin
          _zz_25 = _zz_110;
        end
        `ShiftCtrlEnum_1_defaultEncoding_SRL_1, `ShiftCtrlEnum_1_defaultEncoding_SRA_1 : begin
          _zz_25 = execute_SHIFT_RIGHT;
        end
        default : begin
        end
      endcase
    end
    if(_zz_246)begin
      _zz_25 = execute_CsrPlugin_readData;
    end
    if(DBusCachedPlugin_forceDatapath)begin
      _zz_25 = MmuPlugin_dBusAccess_cmd_payload_address;
    end
  end

  assign execute_SHIFT_CTRL = _zz_26;
  assign execute_SRC_LESS_UNSIGNED = decode_to_execute_SRC_LESS_UNSIGNED;
  assign execute_SRC2_FORCE_ZERO = decode_to_execute_SRC2_FORCE_ZERO;
  assign execute_SRC_USE_SUB_LESS = decode_to_execute_SRC_USE_SUB_LESS;
  assign _zz_27 = decode_PC;
  assign _zz_28 = decode_RS2;
  assign decode_SRC2_CTRL = _zz_29;
  assign _zz_30 = decode_RS1;
  assign decode_SRC1_CTRL = _zz_31;
  assign decode_SRC_USE_SUB_LESS = _zz_331[0];
  assign decode_SRC_ADD_ZERO = _zz_332[0];
  assign execute_SRC_ADD_SUB = execute_SrcPlugin_addSub;
  assign execute_SRC_LESS = execute_SrcPlugin_less;
  assign execute_ALU_CTRL = _zz_32;
  assign execute_SRC2 = decode_to_execute_SRC2;
  assign execute_SRC1 = decode_to_execute_SRC1;
  assign execute_ALU_BITWISE_CTRL = _zz_33;
  assign _zz_34 = writeBack_INSTRUCTION;
  assign _zz_35 = writeBack_REGFILE_WRITE_VALID;
  always @ (*) begin
    _zz_36 = 1'b0;
    if(lastStageRegFileWrite_valid)begin
      _zz_36 = 1'b1;
    end
  end

  always @ (*) begin
    decode_REGFILE_WRITE_VALID = _zz_333[0];
    if((decode_INSTRUCTION[11 : 7] == 5'h0))begin
      decode_REGFILE_WRITE_VALID = 1'b0;
    end
  end

  assign decode_LEGAL_INSTRUCTION = ({((decode_INSTRUCTION & 32'h0000005f) == 32'h00000017),{((decode_INSTRUCTION & 32'h0000007f) == 32'h0000006f),{((decode_INSTRUCTION & 32'h0000106f) == 32'h00000003),{((decode_INSTRUCTION & _zz_446) == 32'h00001073),{(_zz_447 == _zz_448),{_zz_449,{_zz_450,_zz_451}}}}}}} != 26'h0);
  assign writeBack_IS_DBUS_SHARING = memory_to_writeBack_IS_DBUS_SHARING;
  assign execute_IS_DBUS_SHARING = (MmuPlugin_dBusAccess_cmd_valid && MmuPlugin_dBusAccess_cmd_ready);
  assign memory_IS_DBUS_SHARING = execute_to_memory_IS_DBUS_SHARING;
  always @ (*) begin
    _zz_44 = writeBack_REGFILE_WRITE_DATA;
    if((writeBack_arbitration_isValid && writeBack_MEMORY_ENABLE))begin
      _zz_44 = writeBack_DBusCachedPlugin_rspFormated;
    end
    if((writeBack_arbitration_isValid && writeBack_IS_MUL))begin
      case(_zz_301)
        2'b00 : begin
          _zz_44 = _zz_378;
        end
        default : begin
          _zz_44 = _zz_379;
        end
      endcase
    end
    if(writeBack_IS_AES)begin
      _zz_44 = writeBack_CALC;
    end
  end

  assign writeBack_MEMORY_ADDRESS_LOW = memory_to_writeBack_MEMORY_ADDRESS_LOW;
  assign writeBack_MEMORY_WR = memory_to_writeBack_MEMORY_WR;
  assign writeBack_MEMORY_FENCE = memory_to_writeBack_MEMORY_FENCE;
  assign writeBack_MEMORY_AMO = memory_to_writeBack_MEMORY_AMO;
  assign writeBack_MEMORY_LRSC = memory_to_writeBack_MEMORY_LRSC;
  assign writeBack_REGFILE_WRITE_DATA = memory_to_writeBack_REGFILE_WRITE_DATA;
  assign writeBack_MEMORY_ENABLE = memory_to_writeBack_MEMORY_ENABLE;
  assign memory_MEMORY_ENABLE = execute_to_memory_MEMORY_ENABLE;
  assign memory_MEMORY_VIRTUAL_ADDRESS = execute_to_memory_MEMORY_VIRTUAL_ADDRESS;
  assign execute_MEMORY_AMO = decode_to_execute_MEMORY_AMO;
  assign execute_MEMORY_LRSC = decode_to_execute_MEMORY_LRSC;
  assign execute_MEMORY_FORCE_CONSTISTENCY = decode_to_execute_MEMORY_FORCE_CONSTISTENCY;
  assign execute_MEMORY_MANAGMENT = decode_to_execute_MEMORY_MANAGMENT;
  assign execute_RS2 = decode_to_execute_RS2;
  assign execute_MEMORY_WR = decode_to_execute_MEMORY_WR;
  assign execute_SRC_ADD = execute_SrcPlugin_addSub;
  assign execute_MEMORY_ENABLE = decode_to_execute_MEMORY_ENABLE;
  assign execute_INSTRUCTION = decode_to_execute_INSTRUCTION;
  assign decode_MEMORY_AMO = _zz_334[0];
  assign decode_MEMORY_LRSC = _zz_335[0];
  assign decode_MEMORY_ENABLE = _zz_336[0];
  assign decode_FLUSH_ALL = _zz_337[0];
  always @ (*) begin
    IBusCachedPlugin_rsp_issueDetected_4 = IBusCachedPlugin_rsp_issueDetected_3;
    if(_zz_247)begin
      IBusCachedPlugin_rsp_issueDetected_4 = 1'b1;
    end
  end

  always @ (*) begin
    IBusCachedPlugin_rsp_issueDetected_3 = IBusCachedPlugin_rsp_issueDetected_2;
    if(_zz_248)begin
      IBusCachedPlugin_rsp_issueDetected_3 = 1'b1;
    end
  end

  always @ (*) begin
    IBusCachedPlugin_rsp_issueDetected_2 = IBusCachedPlugin_rsp_issueDetected_1;
    if(_zz_249)begin
      IBusCachedPlugin_rsp_issueDetected_2 = 1'b1;
    end
  end

  always @ (*) begin
    IBusCachedPlugin_rsp_issueDetected_1 = IBusCachedPlugin_rsp_issueDetected;
    if(_zz_250)begin
      IBusCachedPlugin_rsp_issueDetected_1 = 1'b1;
    end
  end

  assign decode_INSTRUCTION = IBusCachedPlugin_iBusRsp_output_payload_rsp_inst;
  always @ (*) begin
    _zz_46 = memory_FORMAL_PC_NEXT;
    if(BranchPlugin_jumpInterface_valid)begin
      _zz_46 = BranchPlugin_jumpInterface_payload;
    end
  end

  always @ (*) begin
    _zz_47 = execute_FORMAL_PC_NEXT;
    if(CsrPlugin_redoInterface_valid)begin
      _zz_47 = CsrPlugin_redoInterface_payload;
    end
  end

  assign decode_PC = IBusCachedPlugin_iBusRsp_output_payload_pc;
  assign writeBack_IS_SFENCE_VMA = memory_to_writeBack_IS_SFENCE_VMA;
  assign writeBack_PC = memory_to_writeBack_PC;
  assign writeBack_INSTRUCTION = memory_to_writeBack_INSTRUCTION;
  always @ (*) begin
    decode_arbitration_haltItself = 1'b0;
    if(((DBusCachedPlugin_mmuBus_busy && decode_arbitration_isValid) && decode_MEMORY_ENABLE))begin
      decode_arbitration_haltItself = 1'b1;
    end
    case(_zz_148)
      3'b010 : begin
        decode_arbitration_haltItself = 1'b1;
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    decode_arbitration_haltByOther = 1'b0;
    if(MmuPlugin_dBusAccess_cmd_valid)begin
      decode_arbitration_haltByOther = 1'b1;
    end
    if((decode_arbitration_isValid && (_zz_111 || _zz_112)))begin
      decode_arbitration_haltByOther = 1'b1;
    end
    if(CsrPlugin_pipelineLiberator_active)begin
      decode_arbitration_haltByOther = 1'b1;
    end
    if(({(writeBack_arbitration_isValid && (writeBack_ENV_CTRL == `EnvCtrlEnum_1_defaultEncoding_XRET)),{(memory_arbitration_isValid && (memory_ENV_CTRL == `EnvCtrlEnum_1_defaultEncoding_XRET)),(execute_arbitration_isValid && (execute_ENV_CTRL == `EnvCtrlEnum_1_defaultEncoding_XRET))}} != 3'b000))begin
      decode_arbitration_haltByOther = 1'b1;
    end
  end

  always @ (*) begin
    decode_arbitration_removeIt = 1'b0;
    if(_zz_251)begin
      decode_arbitration_removeIt = 1'b1;
    end
    if(decode_arbitration_isFlushed)begin
      decode_arbitration_removeIt = 1'b1;
    end
  end

  assign decode_arbitration_flushIt = 1'b0;
  always @ (*) begin
    decode_arbitration_flushNext = 1'b0;
    if(_zz_251)begin
      decode_arbitration_flushNext = 1'b1;
    end
  end

  always @ (*) begin
    execute_arbitration_haltItself = 1'b0;
    if(((_zz_204 && (! dataCache_2_io_cpu_flush_ready)) || dataCache_2_io_cpu_execute_haltIt))begin
      execute_arbitration_haltItself = 1'b1;
    end
    if(_zz_252)begin
      if((! execute_CsrPlugin_wfiWake))begin
        execute_arbitration_haltItself = 1'b1;
      end
    end
    if(_zz_246)begin
      if(execute_CsrPlugin_blockedBySideEffects)begin
        execute_arbitration_haltItself = 1'b1;
      end
    end
  end

  always @ (*) begin
    execute_arbitration_haltByOther = 1'b0;
    if((dataCache_2_io_cpu_execute_refilling && execute_arbitration_isValid))begin
      execute_arbitration_haltByOther = 1'b1;
    end
    if(_zz_253)begin
      execute_arbitration_haltByOther = 1'b1;
    end
  end

  always @ (*) begin
    execute_arbitration_removeIt = 1'b0;
    if(CsrPlugin_selfException_valid)begin
      execute_arbitration_removeIt = 1'b1;
    end
    if(execute_arbitration_isFlushed)begin
      execute_arbitration_removeIt = 1'b1;
    end
  end

  always @ (*) begin
    execute_arbitration_flushIt = 1'b0;
    if(_zz_253)begin
      if(_zz_254)begin
        execute_arbitration_flushIt = 1'b1;
      end
    end
  end

  always @ (*) begin
    execute_arbitration_flushNext = 1'b0;
    if(CsrPlugin_selfException_valid)begin
      execute_arbitration_flushNext = 1'b1;
    end
    if(_zz_253)begin
      if(_zz_254)begin
        execute_arbitration_flushNext = 1'b1;
      end
    end
    if(execute_CsrPlugin_csr_384)begin
      if(execute_CsrPlugin_writeInstruction)begin
        execute_arbitration_flushNext = 1'b1;
      end
    end
  end

  always @ (*) begin
    memory_arbitration_haltItself = 1'b0;
    if(_zz_241)begin
      if(((! memory_MulDivIterativePlugin_frontendOk) || (! memory_MulDivIterativePlugin_div_done)))begin
        memory_arbitration_haltItself = 1'b1;
      end
    end
  end

  always @ (*) begin
    memory_arbitration_haltByOther = 1'b0;
    if((writeBack_arbitration_isValid && (writeBack_MEMORY_FENCE || writeBack_DBusCachedPlugin_fence_aquire)))begin
      memory_arbitration_haltByOther = 1'b1;
    end
  end

  always @ (*) begin
    memory_arbitration_removeIt = 1'b0;
    if(BranchPlugin_branchExceptionPort_valid)begin
      memory_arbitration_removeIt = 1'b1;
    end
    if(memory_arbitration_isFlushed)begin
      memory_arbitration_removeIt = 1'b1;
    end
  end

  assign memory_arbitration_flushIt = 1'b0;
  always @ (*) begin
    memory_arbitration_flushNext = 1'b0;
    if(BranchPlugin_branchExceptionPort_valid)begin
      memory_arbitration_flushNext = 1'b1;
    end
    if(BranchPlugin_jumpInterface_valid)begin
      memory_arbitration_flushNext = 1'b1;
    end
  end

  always @ (*) begin
    writeBack_arbitration_haltItself = 1'b0;
    if(dataCache_2_io_cpu_writeBack_haltIt)begin
      writeBack_arbitration_haltItself = 1'b1;
    end
  end

  assign writeBack_arbitration_haltByOther = 1'b0;
  always @ (*) begin
    writeBack_arbitration_removeIt = 1'b0;
    if(DBusCachedPlugin_exceptionBus_valid)begin
      writeBack_arbitration_removeIt = 1'b1;
    end
    if(writeBack_arbitration_isFlushed)begin
      writeBack_arbitration_removeIt = 1'b1;
    end
  end

  always @ (*) begin
    writeBack_arbitration_flushIt = 1'b0;
    if(DBusCachedPlugin_redoBranch_valid)begin
      writeBack_arbitration_flushIt = 1'b1;
    end
  end

  always @ (*) begin
    writeBack_arbitration_flushNext = 1'b0;
    if(DBusCachedPlugin_redoBranch_valid)begin
      writeBack_arbitration_flushNext = 1'b1;
    end
    if(DBusCachedPlugin_exceptionBus_valid)begin
      writeBack_arbitration_flushNext = 1'b1;
    end
    if(_zz_255)begin
      writeBack_arbitration_flushNext = 1'b1;
    end
    if(_zz_256)begin
      writeBack_arbitration_flushNext = 1'b1;
    end
  end

  assign lastStageInstruction = writeBack_INSTRUCTION;
  assign lastStagePc = writeBack_PC;
  assign lastStageIsValid = writeBack_arbitration_isValid;
  assign lastStageIsFiring = writeBack_arbitration_isFiring;
  always @ (*) begin
    IBusCachedPlugin_fetcherHalt = 1'b0;
    if(({CsrPlugin_exceptionPortCtrl_exceptionValids_writeBack,{CsrPlugin_exceptionPortCtrl_exceptionValids_memory,{CsrPlugin_exceptionPortCtrl_exceptionValids_execute,CsrPlugin_exceptionPortCtrl_exceptionValids_decode}}} != 4'b0000))begin
      IBusCachedPlugin_fetcherHalt = 1'b1;
    end
    if(_zz_255)begin
      IBusCachedPlugin_fetcherHalt = 1'b1;
    end
    if(_zz_256)begin
      IBusCachedPlugin_fetcherHalt = 1'b1;
    end
    if(_zz_253)begin
      if(_zz_254)begin
        IBusCachedPlugin_fetcherHalt = 1'b1;
      end
    end
    if(DebugPlugin_haltIt)begin
      IBusCachedPlugin_fetcherHalt = 1'b1;
    end
    if(_zz_257)begin
      IBusCachedPlugin_fetcherHalt = 1'b1;
    end
  end

  always @ (*) begin
    IBusCachedPlugin_incomingInstruction = 1'b0;
    if((IBusCachedPlugin_iBusRsp_stages_1_input_valid || IBusCachedPlugin_iBusRsp_stages_2_input_valid))begin
      IBusCachedPlugin_incomingInstruction = 1'b1;
    end
  end

  always @ (*) begin
    _zz_48 = 1'b0;
    if(DebugPlugin_godmode)begin
      _zz_48 = 1'b1;
    end
  end

  always @ (*) begin
    CsrPlugin_inWfi = 1'b0;
    if(_zz_252)begin
      CsrPlugin_inWfi = 1'b1;
    end
  end

  always @ (*) begin
    CsrPlugin_thirdPartyWake = 1'b0;
    if(DebugPlugin_haltIt)begin
      CsrPlugin_thirdPartyWake = 1'b1;
    end
  end

  always @ (*) begin
    CsrPlugin_jumpInterface_valid = 1'b0;
    if(_zz_255)begin
      CsrPlugin_jumpInterface_valid = 1'b1;
    end
    if(_zz_256)begin
      CsrPlugin_jumpInterface_valid = 1'b1;
    end
  end

  always @ (*) begin
    CsrPlugin_jumpInterface_payload = 32'h0;
    if(_zz_255)begin
      CsrPlugin_jumpInterface_payload = {CsrPlugin_xtvec_base,2'b00};
    end
    if(_zz_256)begin
      case(_zz_258)
        2'b11 : begin
          CsrPlugin_jumpInterface_payload = CsrPlugin_mepc;
        end
        2'b01 : begin
          CsrPlugin_jumpInterface_payload = CsrPlugin_sepc;
        end
        default : begin
        end
      endcase
    end
  end

  always @ (*) begin
    CsrPlugin_forceMachineWire = 1'b0;
    if(DebugPlugin_godmode)begin
      CsrPlugin_forceMachineWire = 1'b1;
    end
  end

  always @ (*) begin
    CsrPlugin_allowInterrupts = 1'b1;
    if((DebugPlugin_haltIt || DebugPlugin_stepIt))begin
      CsrPlugin_allowInterrupts = 1'b0;
    end
  end

  always @ (*) begin
    CsrPlugin_allowException = 1'b1;
    if(DebugPlugin_godmode)begin
      CsrPlugin_allowException = 1'b0;
    end
  end

  always @ (*) begin
    MmuPlugin_ports_0_requireMmuLockupCalc = ((1'b1 && (! IBusCachedPlugin_mmuBus_cmd_0_bypassTranslation)) && MmuPlugin_satp_mode);
    if(((! MmuPlugin_status_mprv) && (CsrPlugin_privilege == 2'b11)))begin
      MmuPlugin_ports_0_requireMmuLockupCalc = 1'b0;
    end
    if((CsrPlugin_privilege == 2'b11))begin
      MmuPlugin_ports_0_requireMmuLockupCalc = 1'b0;
    end
  end

  always @ (*) begin
    MmuPlugin_ports_0_cacheHitsCalc[0] = ((MmuPlugin_ports_0_cache_0_valid && (MmuPlugin_ports_0_cache_0_virtualAddress_1 == IBusCachedPlugin_mmuBus_cmd_0_virtualAddress[31 : 22])) && (MmuPlugin_ports_0_cache_0_superPage || (MmuPlugin_ports_0_cache_0_virtualAddress_0 == IBusCachedPlugin_mmuBus_cmd_0_virtualAddress[21 : 12])));
    MmuPlugin_ports_0_cacheHitsCalc[1] = ((MmuPlugin_ports_0_cache_1_valid && (MmuPlugin_ports_0_cache_1_virtualAddress_1 == IBusCachedPlugin_mmuBus_cmd_0_virtualAddress[31 : 22])) && (MmuPlugin_ports_0_cache_1_superPage || (MmuPlugin_ports_0_cache_1_virtualAddress_0 == IBusCachedPlugin_mmuBus_cmd_0_virtualAddress[21 : 12])));
    MmuPlugin_ports_0_cacheHitsCalc[2] = ((MmuPlugin_ports_0_cache_2_valid && (MmuPlugin_ports_0_cache_2_virtualAddress_1 == IBusCachedPlugin_mmuBus_cmd_0_virtualAddress[31 : 22])) && (MmuPlugin_ports_0_cache_2_superPage || (MmuPlugin_ports_0_cache_2_virtualAddress_0 == IBusCachedPlugin_mmuBus_cmd_0_virtualAddress[21 : 12])));
    MmuPlugin_ports_0_cacheHitsCalc[3] = ((MmuPlugin_ports_0_cache_3_valid && (MmuPlugin_ports_0_cache_3_virtualAddress_1 == IBusCachedPlugin_mmuBus_cmd_0_virtualAddress[31 : 22])) && (MmuPlugin_ports_0_cache_3_superPage || (MmuPlugin_ports_0_cache_3_virtualAddress_0 == IBusCachedPlugin_mmuBus_cmd_0_virtualAddress[21 : 12])));
  end

  assign MmuPlugin_ports_0_cacheHit = (MmuPlugin_ports_0_cacheHits != 4'b0000);
  assign _zz_49 = MmuPlugin_ports_0_cacheHits[3];
  assign _zz_50 = (MmuPlugin_ports_0_cacheHits[1] || _zz_49);
  assign _zz_51 = (MmuPlugin_ports_0_cacheHits[2] || _zz_49);
  assign _zz_52 = {_zz_51,_zz_50};
  assign MmuPlugin_ports_0_cacheLine_valid = _zz_209;
  assign MmuPlugin_ports_0_cacheLine_exception = _zz_210;
  assign MmuPlugin_ports_0_cacheLine_superPage = _zz_211;
  assign MmuPlugin_ports_0_cacheLine_virtualAddress_0 = _zz_212;
  assign MmuPlugin_ports_0_cacheLine_virtualAddress_1 = _zz_213;
  assign MmuPlugin_ports_0_cacheLine_physicalAddress_0 = _zz_214;
  assign MmuPlugin_ports_0_cacheLine_physicalAddress_1 = _zz_215;
  assign MmuPlugin_ports_0_cacheLine_allowRead = _zz_216;
  assign MmuPlugin_ports_0_cacheLine_allowWrite = _zz_217;
  assign MmuPlugin_ports_0_cacheLine_allowExecute = _zz_218;
  assign MmuPlugin_ports_0_cacheLine_allowUser = _zz_219;
  always @ (*) begin
    MmuPlugin_ports_0_entryToReplace_willIncrement = 1'b0;
    if(_zz_259)begin
      if(_zz_260)begin
        MmuPlugin_ports_0_entryToReplace_willIncrement = 1'b1;
      end
    end
  end

  assign MmuPlugin_ports_0_entryToReplace_willClear = 1'b0;
  assign MmuPlugin_ports_0_entryToReplace_willOverflowIfInc = (MmuPlugin_ports_0_entryToReplace_value == 2'b11);
  assign MmuPlugin_ports_0_entryToReplace_willOverflow = (MmuPlugin_ports_0_entryToReplace_willOverflowIfInc && MmuPlugin_ports_0_entryToReplace_willIncrement);
  always @ (*) begin
    MmuPlugin_ports_0_entryToReplace_valueNext = (MmuPlugin_ports_0_entryToReplace_value + _zz_339);
    if(MmuPlugin_ports_0_entryToReplace_willClear)begin
      MmuPlugin_ports_0_entryToReplace_valueNext = 2'b00;
    end
  end

  always @ (*) begin
    if(MmuPlugin_ports_0_requireMmuLockup)begin
      IBusCachedPlugin_mmuBus_rsp_physicalAddress = {{MmuPlugin_ports_0_cacheLine_physicalAddress_1,(MmuPlugin_ports_0_cacheLine_superPage ? IBusCachedPlugin_mmuBus_cmd_1_virtualAddress[21 : 12] : MmuPlugin_ports_0_cacheLine_physicalAddress_0)},IBusCachedPlugin_mmuBus_cmd_1_virtualAddress[11 : 0]};
    end else begin
      IBusCachedPlugin_mmuBus_rsp_physicalAddress = IBusCachedPlugin_mmuBus_cmd_1_virtualAddress;
    end
  end

  always @ (*) begin
    if(MmuPlugin_ports_0_requireMmuLockup)begin
      IBusCachedPlugin_mmuBus_rsp_allowRead = (MmuPlugin_ports_0_cacheLine_allowRead || (MmuPlugin_status_mxr && MmuPlugin_ports_0_cacheLine_allowExecute));
    end else begin
      IBusCachedPlugin_mmuBus_rsp_allowRead = 1'b1;
    end
  end

  always @ (*) begin
    if(MmuPlugin_ports_0_requireMmuLockup)begin
      IBusCachedPlugin_mmuBus_rsp_allowWrite = MmuPlugin_ports_0_cacheLine_allowWrite;
    end else begin
      IBusCachedPlugin_mmuBus_rsp_allowWrite = 1'b1;
    end
  end

  always @ (*) begin
    if(MmuPlugin_ports_0_requireMmuLockup)begin
      IBusCachedPlugin_mmuBus_rsp_allowExecute = MmuPlugin_ports_0_cacheLine_allowExecute;
    end else begin
      IBusCachedPlugin_mmuBus_rsp_allowExecute = 1'b1;
    end
  end

  always @ (*) begin
    if(MmuPlugin_ports_0_requireMmuLockup)begin
      IBusCachedPlugin_mmuBus_rsp_exception = (((! MmuPlugin_ports_0_dirty) && MmuPlugin_ports_0_cacheHit) && ((MmuPlugin_ports_0_cacheLine_exception || ((MmuPlugin_ports_0_cacheLine_allowUser && (CsrPlugin_privilege == 2'b01)) && (! MmuPlugin_status_sum))) || ((! MmuPlugin_ports_0_cacheLine_allowUser) && (CsrPlugin_privilege == 2'b00))));
    end else begin
      IBusCachedPlugin_mmuBus_rsp_exception = 1'b0;
    end
  end

  always @ (*) begin
    if(MmuPlugin_ports_0_requireMmuLockup)begin
      IBusCachedPlugin_mmuBus_rsp_refilling = (MmuPlugin_ports_0_dirty || (! MmuPlugin_ports_0_cacheHit));
    end else begin
      IBusCachedPlugin_mmuBus_rsp_refilling = 1'b0;
    end
  end

  assign IBusCachedPlugin_mmuBus_rsp_isIoAccess = (IBusCachedPlugin_mmuBus_rsp_physicalAddress[31 : 28] == 4'b0001);
  assign IBusCachedPlugin_mmuBus_rsp_bypassTranslation = (! MmuPlugin_ports_0_requireMmuLockup);
  assign IBusCachedPlugin_mmuBus_rsp_ways_0_sel = MmuPlugin_ports_0_cacheHits[0];
  assign IBusCachedPlugin_mmuBus_rsp_ways_0_physical = {{MmuPlugin_ports_0_cache_0_physicalAddress_1,(MmuPlugin_ports_0_cache_0_superPage ? IBusCachedPlugin_mmuBus_cmd_1_virtualAddress[21 : 12] : MmuPlugin_ports_0_cache_0_physicalAddress_0)},IBusCachedPlugin_mmuBus_cmd_1_virtualAddress[11 : 0]};
  assign IBusCachedPlugin_mmuBus_rsp_ways_1_sel = MmuPlugin_ports_0_cacheHits[1];
  assign IBusCachedPlugin_mmuBus_rsp_ways_1_physical = {{MmuPlugin_ports_0_cache_1_physicalAddress_1,(MmuPlugin_ports_0_cache_1_superPage ? IBusCachedPlugin_mmuBus_cmd_1_virtualAddress[21 : 12] : MmuPlugin_ports_0_cache_1_physicalAddress_0)},IBusCachedPlugin_mmuBus_cmd_1_virtualAddress[11 : 0]};
  assign IBusCachedPlugin_mmuBus_rsp_ways_2_sel = MmuPlugin_ports_0_cacheHits[2];
  assign IBusCachedPlugin_mmuBus_rsp_ways_2_physical = {{MmuPlugin_ports_0_cache_2_physicalAddress_1,(MmuPlugin_ports_0_cache_2_superPage ? IBusCachedPlugin_mmuBus_cmd_1_virtualAddress[21 : 12] : MmuPlugin_ports_0_cache_2_physicalAddress_0)},IBusCachedPlugin_mmuBus_cmd_1_virtualAddress[11 : 0]};
  assign IBusCachedPlugin_mmuBus_rsp_ways_3_sel = MmuPlugin_ports_0_cacheHits[3];
  assign IBusCachedPlugin_mmuBus_rsp_ways_3_physical = {{MmuPlugin_ports_0_cache_3_physicalAddress_1,(MmuPlugin_ports_0_cache_3_superPage ? IBusCachedPlugin_mmuBus_cmd_1_virtualAddress[21 : 12] : MmuPlugin_ports_0_cache_3_physicalAddress_0)},IBusCachedPlugin_mmuBus_cmd_1_virtualAddress[11 : 0]};
  always @ (*) begin
    MmuPlugin_ports_1_requireMmuLockupCalc = ((1'b1 && (! DBusCachedPlugin_mmuBus_cmd_0_bypassTranslation)) && MmuPlugin_satp_mode);
    if(((! MmuPlugin_status_mprv) && (CsrPlugin_privilege == 2'b11)))begin
      MmuPlugin_ports_1_requireMmuLockupCalc = 1'b0;
    end
    if((CsrPlugin_privilege == 2'b11))begin
      if(((! MmuPlugin_status_mprv) || (CsrPlugin_mstatus_MPP == 2'b11)))begin
        MmuPlugin_ports_1_requireMmuLockupCalc = 1'b0;
      end
    end
  end

  always @ (*) begin
    MmuPlugin_ports_1_cacheHitsCalc[0] = ((MmuPlugin_ports_1_cache_0_valid && (MmuPlugin_ports_1_cache_0_virtualAddress_1 == DBusCachedPlugin_mmuBus_cmd_0_virtualAddress[31 : 22])) && (MmuPlugin_ports_1_cache_0_superPage || (MmuPlugin_ports_1_cache_0_virtualAddress_0 == DBusCachedPlugin_mmuBus_cmd_0_virtualAddress[21 : 12])));
    MmuPlugin_ports_1_cacheHitsCalc[1] = ((MmuPlugin_ports_1_cache_1_valid && (MmuPlugin_ports_1_cache_1_virtualAddress_1 == DBusCachedPlugin_mmuBus_cmd_0_virtualAddress[31 : 22])) && (MmuPlugin_ports_1_cache_1_superPage || (MmuPlugin_ports_1_cache_1_virtualAddress_0 == DBusCachedPlugin_mmuBus_cmd_0_virtualAddress[21 : 12])));
    MmuPlugin_ports_1_cacheHitsCalc[2] = ((MmuPlugin_ports_1_cache_2_valid && (MmuPlugin_ports_1_cache_2_virtualAddress_1 == DBusCachedPlugin_mmuBus_cmd_0_virtualAddress[31 : 22])) && (MmuPlugin_ports_1_cache_2_superPage || (MmuPlugin_ports_1_cache_2_virtualAddress_0 == DBusCachedPlugin_mmuBus_cmd_0_virtualAddress[21 : 12])));
    MmuPlugin_ports_1_cacheHitsCalc[3] = ((MmuPlugin_ports_1_cache_3_valid && (MmuPlugin_ports_1_cache_3_virtualAddress_1 == DBusCachedPlugin_mmuBus_cmd_0_virtualAddress[31 : 22])) && (MmuPlugin_ports_1_cache_3_superPage || (MmuPlugin_ports_1_cache_3_virtualAddress_0 == DBusCachedPlugin_mmuBus_cmd_0_virtualAddress[21 : 12])));
  end

  assign MmuPlugin_ports_1_cacheHit = (MmuPlugin_ports_1_cacheHits != 4'b0000);
  assign _zz_53 = MmuPlugin_ports_1_cacheHits[3];
  assign _zz_54 = (MmuPlugin_ports_1_cacheHits[1] || _zz_53);
  assign _zz_55 = (MmuPlugin_ports_1_cacheHits[2] || _zz_53);
  assign _zz_56 = {_zz_55,_zz_54};
  assign MmuPlugin_ports_1_cacheLine_valid = _zz_220;
  assign MmuPlugin_ports_1_cacheLine_exception = _zz_221;
  assign MmuPlugin_ports_1_cacheLine_superPage = _zz_222;
  assign MmuPlugin_ports_1_cacheLine_virtualAddress_0 = _zz_223;
  assign MmuPlugin_ports_1_cacheLine_virtualAddress_1 = _zz_224;
  assign MmuPlugin_ports_1_cacheLine_physicalAddress_0 = _zz_225;
  assign MmuPlugin_ports_1_cacheLine_physicalAddress_1 = _zz_226;
  assign MmuPlugin_ports_1_cacheLine_allowRead = _zz_227;
  assign MmuPlugin_ports_1_cacheLine_allowWrite = _zz_228;
  assign MmuPlugin_ports_1_cacheLine_allowExecute = _zz_229;
  assign MmuPlugin_ports_1_cacheLine_allowUser = _zz_230;
  always @ (*) begin
    MmuPlugin_ports_1_entryToReplace_willIncrement = 1'b0;
    if(_zz_259)begin
      if(_zz_261)begin
        MmuPlugin_ports_1_entryToReplace_willIncrement = 1'b1;
      end
    end
  end

  assign MmuPlugin_ports_1_entryToReplace_willClear = 1'b0;
  assign MmuPlugin_ports_1_entryToReplace_willOverflowIfInc = (MmuPlugin_ports_1_entryToReplace_value == 2'b11);
  assign MmuPlugin_ports_1_entryToReplace_willOverflow = (MmuPlugin_ports_1_entryToReplace_willOverflowIfInc && MmuPlugin_ports_1_entryToReplace_willIncrement);
  always @ (*) begin
    MmuPlugin_ports_1_entryToReplace_valueNext = (MmuPlugin_ports_1_entryToReplace_value + _zz_341);
    if(MmuPlugin_ports_1_entryToReplace_willClear)begin
      MmuPlugin_ports_1_entryToReplace_valueNext = 2'b00;
    end
  end

  always @ (*) begin
    if(MmuPlugin_ports_1_requireMmuLockup)begin
      DBusCachedPlugin_mmuBus_rsp_physicalAddress = {{MmuPlugin_ports_1_cacheLine_physicalAddress_1,(MmuPlugin_ports_1_cacheLine_superPage ? DBusCachedPlugin_mmuBus_cmd_1_virtualAddress[21 : 12] : MmuPlugin_ports_1_cacheLine_physicalAddress_0)},DBusCachedPlugin_mmuBus_cmd_1_virtualAddress[11 : 0]};
    end else begin
      DBusCachedPlugin_mmuBus_rsp_physicalAddress = DBusCachedPlugin_mmuBus_cmd_1_virtualAddress;
    end
  end

  always @ (*) begin
    if(MmuPlugin_ports_1_requireMmuLockup)begin
      DBusCachedPlugin_mmuBus_rsp_allowRead = (MmuPlugin_ports_1_cacheLine_allowRead || (MmuPlugin_status_mxr && MmuPlugin_ports_1_cacheLine_allowExecute));
    end else begin
      DBusCachedPlugin_mmuBus_rsp_allowRead = 1'b1;
    end
  end

  always @ (*) begin
    if(MmuPlugin_ports_1_requireMmuLockup)begin
      DBusCachedPlugin_mmuBus_rsp_allowWrite = MmuPlugin_ports_1_cacheLine_allowWrite;
    end else begin
      DBusCachedPlugin_mmuBus_rsp_allowWrite = 1'b1;
    end
  end

  always @ (*) begin
    if(MmuPlugin_ports_1_requireMmuLockup)begin
      DBusCachedPlugin_mmuBus_rsp_allowExecute = MmuPlugin_ports_1_cacheLine_allowExecute;
    end else begin
      DBusCachedPlugin_mmuBus_rsp_allowExecute = 1'b1;
    end
  end

  always @ (*) begin
    if(MmuPlugin_ports_1_requireMmuLockup)begin
      DBusCachedPlugin_mmuBus_rsp_exception = (((! MmuPlugin_ports_1_dirty) && MmuPlugin_ports_1_cacheHit) && ((MmuPlugin_ports_1_cacheLine_exception || ((MmuPlugin_ports_1_cacheLine_allowUser && (CsrPlugin_privilege == 2'b01)) && (! MmuPlugin_status_sum))) || ((! MmuPlugin_ports_1_cacheLine_allowUser) && (CsrPlugin_privilege == 2'b00))));
    end else begin
      DBusCachedPlugin_mmuBus_rsp_exception = 1'b0;
    end
  end

  always @ (*) begin
    if(MmuPlugin_ports_1_requireMmuLockup)begin
      DBusCachedPlugin_mmuBus_rsp_refilling = (MmuPlugin_ports_1_dirty || (! MmuPlugin_ports_1_cacheHit));
    end else begin
      DBusCachedPlugin_mmuBus_rsp_refilling = 1'b0;
    end
  end

  assign DBusCachedPlugin_mmuBus_rsp_isIoAccess = (DBusCachedPlugin_mmuBus_rsp_physicalAddress[31 : 28] == 4'b0001);
  assign DBusCachedPlugin_mmuBus_rsp_bypassTranslation = (! MmuPlugin_ports_1_requireMmuLockup);
  assign DBusCachedPlugin_mmuBus_rsp_ways_0_sel = MmuPlugin_ports_1_cacheHits[0];
  assign DBusCachedPlugin_mmuBus_rsp_ways_0_physical = {{MmuPlugin_ports_1_cache_0_physicalAddress_1,(MmuPlugin_ports_1_cache_0_superPage ? DBusCachedPlugin_mmuBus_cmd_1_virtualAddress[21 : 12] : MmuPlugin_ports_1_cache_0_physicalAddress_0)},DBusCachedPlugin_mmuBus_cmd_1_virtualAddress[11 : 0]};
  assign DBusCachedPlugin_mmuBus_rsp_ways_1_sel = MmuPlugin_ports_1_cacheHits[1];
  assign DBusCachedPlugin_mmuBus_rsp_ways_1_physical = {{MmuPlugin_ports_1_cache_1_physicalAddress_1,(MmuPlugin_ports_1_cache_1_superPage ? DBusCachedPlugin_mmuBus_cmd_1_virtualAddress[21 : 12] : MmuPlugin_ports_1_cache_1_physicalAddress_0)},DBusCachedPlugin_mmuBus_cmd_1_virtualAddress[11 : 0]};
  assign DBusCachedPlugin_mmuBus_rsp_ways_2_sel = MmuPlugin_ports_1_cacheHits[2];
  assign DBusCachedPlugin_mmuBus_rsp_ways_2_physical = {{MmuPlugin_ports_1_cache_2_physicalAddress_1,(MmuPlugin_ports_1_cache_2_superPage ? DBusCachedPlugin_mmuBus_cmd_1_virtualAddress[21 : 12] : MmuPlugin_ports_1_cache_2_physicalAddress_0)},DBusCachedPlugin_mmuBus_cmd_1_virtualAddress[11 : 0]};
  assign DBusCachedPlugin_mmuBus_rsp_ways_3_sel = MmuPlugin_ports_1_cacheHits[3];
  assign DBusCachedPlugin_mmuBus_rsp_ways_3_physical = {{MmuPlugin_ports_1_cache_3_physicalAddress_1,(MmuPlugin_ports_1_cache_3_superPage ? DBusCachedPlugin_mmuBus_cmd_1_virtualAddress[21 : 12] : MmuPlugin_ports_1_cache_3_physicalAddress_0)},DBusCachedPlugin_mmuBus_cmd_1_virtualAddress[11 : 0]};
  assign MmuPlugin_shared_dBusRsp_pte_V = _zz_342[0];
  assign MmuPlugin_shared_dBusRsp_pte_R = _zz_343[0];
  assign MmuPlugin_shared_dBusRsp_pte_W = _zz_344[0];
  assign MmuPlugin_shared_dBusRsp_pte_X = _zz_345[0];
  assign MmuPlugin_shared_dBusRsp_pte_U = _zz_346[0];
  assign MmuPlugin_shared_dBusRsp_pte_G = _zz_347[0];
  assign MmuPlugin_shared_dBusRsp_pte_A = _zz_348[0];
  assign MmuPlugin_shared_dBusRsp_pte_D = _zz_349[0];
  assign MmuPlugin_shared_dBusRsp_pte_RSW = MmuPlugin_shared_dBusRspStaged_payload_data[9 : 8];
  assign MmuPlugin_shared_dBusRsp_pte_PPN0 = MmuPlugin_shared_dBusRspStaged_payload_data[19 : 10];
  assign MmuPlugin_shared_dBusRsp_pte_PPN1 = MmuPlugin_shared_dBusRspStaged_payload_data[31 : 20];
  assign MmuPlugin_shared_dBusRsp_exception = (((! MmuPlugin_shared_dBusRsp_pte_V) || ((! MmuPlugin_shared_dBusRsp_pte_R) && MmuPlugin_shared_dBusRsp_pte_W)) || MmuPlugin_shared_dBusRspStaged_payload_error);
  assign MmuPlugin_shared_dBusRsp_leaf = (MmuPlugin_shared_dBusRsp_pte_R || MmuPlugin_shared_dBusRsp_pte_X);
  always @ (*) begin
    MmuPlugin_dBusAccess_cmd_valid = 1'b0;
    case(MmuPlugin_shared_state_1)
      `MmuPlugin_shared_State_1_defaultEncoding_IDLE : begin
      end
      `MmuPlugin_shared_State_1_defaultEncoding_L1_CMD : begin
        MmuPlugin_dBusAccess_cmd_valid = 1'b1;
      end
      `MmuPlugin_shared_State_1_defaultEncoding_L1_RSP : begin
      end
      `MmuPlugin_shared_State_1_defaultEncoding_L0_CMD : begin
        MmuPlugin_dBusAccess_cmd_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign MmuPlugin_dBusAccess_cmd_payload_write = 1'b0;
  assign MmuPlugin_dBusAccess_cmd_payload_size = 2'b10;
  always @ (*) begin
    MmuPlugin_dBusAccess_cmd_payload_address = 32'h0;
    case(MmuPlugin_shared_state_1)
      `MmuPlugin_shared_State_1_defaultEncoding_IDLE : begin
      end
      `MmuPlugin_shared_State_1_defaultEncoding_L1_CMD : begin
        MmuPlugin_dBusAccess_cmd_payload_address = {{MmuPlugin_satp_ppn,MmuPlugin_shared_vpn_1},2'b00};
      end
      `MmuPlugin_shared_State_1_defaultEncoding_L1_RSP : begin
      end
      `MmuPlugin_shared_State_1_defaultEncoding_L0_CMD : begin
        MmuPlugin_dBusAccess_cmd_payload_address = {{{MmuPlugin_shared_pteBuffer_PPN1[9 : 0],MmuPlugin_shared_pteBuffer_PPN0},MmuPlugin_shared_vpn_0},2'b00};
      end
      default : begin
      end
    endcase
  end

  assign MmuPlugin_dBusAccess_cmd_payload_data = 32'h0;
  assign MmuPlugin_dBusAccess_cmd_payload_writeMask = 4'bxxxx;
  always @ (*) begin
    _zz_57[0] = (((IBusCachedPlugin_mmuBus_cmd_1_isValid && MmuPlugin_ports_0_requireMmuLockup) && (! MmuPlugin_ports_0_dirty)) && (! MmuPlugin_ports_0_cacheHit));
    _zz_57[1] = (((DBusCachedPlugin_mmuBus_cmd_1_isValid && MmuPlugin_ports_1_requireMmuLockup) && (! MmuPlugin_ports_1_dirty)) && (! MmuPlugin_ports_1_cacheHit));
  end

  assign _zz_58 = _zz_57;
  always @ (*) begin
    _zz_59[0] = _zz_58[1];
    _zz_59[1] = _zz_58[0];
  end

  assign _zz_60 = (_zz_59 & (~ _zz_350));
  always @ (*) begin
    _zz_61[0] = _zz_60[1];
    _zz_61[1] = _zz_60[0];
  end

  assign MmuPlugin_shared_refills = _zz_61;
  assign _zz_62 = (MmuPlugin_shared_refills[0] ? IBusCachedPlugin_mmuBus_cmd_1_virtualAddress : DBusCachedPlugin_mmuBus_cmd_1_virtualAddress);
  assign IBusCachedPlugin_mmuBus_busy = ((MmuPlugin_shared_state_1 != `MmuPlugin_shared_State_1_defaultEncoding_IDLE) && MmuPlugin_shared_portSortedOh[0]);
  assign DBusCachedPlugin_mmuBus_busy = ((MmuPlugin_shared_state_1 != `MmuPlugin_shared_State_1_defaultEncoding_IDLE) && MmuPlugin_shared_portSortedOh[1]);
  assign IBusCachedPlugin_externalFlush = ({writeBack_arbitration_flushNext,{memory_arbitration_flushNext,{execute_arbitration_flushNext,decode_arbitration_flushNext}}} != 4'b0000);
  assign IBusCachedPlugin_jump_pcLoad_valid = ({BranchPlugin_jumpInterface_valid,{CsrPlugin_redoInterface_valid,{CsrPlugin_jumpInterface_valid,DBusCachedPlugin_redoBranch_valid}}} != 4'b0000);
  assign _zz_63 = {CsrPlugin_redoInterface_valid,{BranchPlugin_jumpInterface_valid,{CsrPlugin_jumpInterface_valid,DBusCachedPlugin_redoBranch_valid}}};
  assign _zz_64 = (_zz_63 & (~ _zz_351));
  assign _zz_65 = _zz_64[3];
  assign _zz_66 = (_zz_64[1] || _zz_65);
  assign _zz_67 = (_zz_64[2] || _zz_65);
  assign IBusCachedPlugin_jump_pcLoad_payload = _zz_231;
  always @ (*) begin
    IBusCachedPlugin_fetchPc_correction = 1'b0;
    if(IBusCachedPlugin_fetchPc_redo_valid)begin
      IBusCachedPlugin_fetchPc_correction = 1'b1;
    end
    if(IBusCachedPlugin_jump_pcLoad_valid)begin
      IBusCachedPlugin_fetchPc_correction = 1'b1;
    end
  end

  assign IBusCachedPlugin_fetchPc_corrected = (IBusCachedPlugin_fetchPc_correction || IBusCachedPlugin_fetchPc_correctionReg);
  always @ (*) begin
    IBusCachedPlugin_fetchPc_pcRegPropagate = 1'b0;
    if(IBusCachedPlugin_iBusRsp_stages_1_input_ready)begin
      IBusCachedPlugin_fetchPc_pcRegPropagate = 1'b1;
    end
  end

  always @ (*) begin
    IBusCachedPlugin_fetchPc_pc = (IBusCachedPlugin_fetchPc_pcReg + _zz_353);
    if(IBusCachedPlugin_fetchPc_redo_valid)begin
      IBusCachedPlugin_fetchPc_pc = IBusCachedPlugin_fetchPc_redo_payload;
    end
    if(IBusCachedPlugin_jump_pcLoad_valid)begin
      IBusCachedPlugin_fetchPc_pc = IBusCachedPlugin_jump_pcLoad_payload;
    end
    IBusCachedPlugin_fetchPc_pc[0] = 1'b0;
    IBusCachedPlugin_fetchPc_pc[1] = 1'b0;
  end

  always @ (*) begin
    IBusCachedPlugin_fetchPc_flushed = 1'b0;
    if(IBusCachedPlugin_fetchPc_redo_valid)begin
      IBusCachedPlugin_fetchPc_flushed = 1'b1;
    end
    if(IBusCachedPlugin_jump_pcLoad_valid)begin
      IBusCachedPlugin_fetchPc_flushed = 1'b1;
    end
  end

  assign IBusCachedPlugin_fetchPc_output_valid = ((! IBusCachedPlugin_fetcherHalt) && IBusCachedPlugin_fetchPc_booted);
  assign IBusCachedPlugin_fetchPc_output_payload = IBusCachedPlugin_fetchPc_pc;
  always @ (*) begin
    IBusCachedPlugin_iBusRsp_redoFetch = 1'b0;
    if(IBusCachedPlugin_rsp_redoFetch)begin
      IBusCachedPlugin_iBusRsp_redoFetch = 1'b1;
    end
  end

  assign IBusCachedPlugin_iBusRsp_stages_0_input_valid = IBusCachedPlugin_fetchPc_output_valid;
  assign IBusCachedPlugin_fetchPc_output_ready = IBusCachedPlugin_iBusRsp_stages_0_input_ready;
  assign IBusCachedPlugin_iBusRsp_stages_0_input_payload = IBusCachedPlugin_fetchPc_output_payload;
  always @ (*) begin
    IBusCachedPlugin_iBusRsp_stages_0_halt = 1'b0;
    if(IBusCachedPlugin_cache_io_cpu_prefetch_haltIt)begin
      IBusCachedPlugin_iBusRsp_stages_0_halt = 1'b1;
    end
    if(IBusCachedPlugin_mmuBus_busy)begin
      IBusCachedPlugin_iBusRsp_stages_0_halt = 1'b1;
    end
  end

  assign _zz_68 = (! IBusCachedPlugin_iBusRsp_stages_0_halt);
  assign IBusCachedPlugin_iBusRsp_stages_0_input_ready = (IBusCachedPlugin_iBusRsp_stages_0_output_ready && _zz_68);
  assign IBusCachedPlugin_iBusRsp_stages_0_output_valid = (IBusCachedPlugin_iBusRsp_stages_0_input_valid && _zz_68);
  assign IBusCachedPlugin_iBusRsp_stages_0_output_payload = IBusCachedPlugin_iBusRsp_stages_0_input_payload;
  assign IBusCachedPlugin_iBusRsp_stages_1_halt = 1'b0;
  assign _zz_69 = (! IBusCachedPlugin_iBusRsp_stages_1_halt);
  assign IBusCachedPlugin_iBusRsp_stages_1_input_ready = (IBusCachedPlugin_iBusRsp_stages_1_output_ready && _zz_69);
  assign IBusCachedPlugin_iBusRsp_stages_1_output_valid = (IBusCachedPlugin_iBusRsp_stages_1_input_valid && _zz_69);
  assign IBusCachedPlugin_iBusRsp_stages_1_output_payload = IBusCachedPlugin_iBusRsp_stages_1_input_payload;
  always @ (*) begin
    IBusCachedPlugin_iBusRsp_stages_2_halt = 1'b0;
    if((IBusCachedPlugin_rsp_issueDetected_4 || IBusCachedPlugin_rsp_iBusRspOutputHalt))begin
      IBusCachedPlugin_iBusRsp_stages_2_halt = 1'b1;
    end
  end

  assign _zz_70 = (! IBusCachedPlugin_iBusRsp_stages_2_halt);
  assign IBusCachedPlugin_iBusRsp_stages_2_input_ready = (IBusCachedPlugin_iBusRsp_stages_2_output_ready && _zz_70);
  assign IBusCachedPlugin_iBusRsp_stages_2_output_valid = (IBusCachedPlugin_iBusRsp_stages_2_input_valid && _zz_70);
  assign IBusCachedPlugin_iBusRsp_stages_2_output_payload = IBusCachedPlugin_iBusRsp_stages_2_input_payload;
  assign IBusCachedPlugin_fetchPc_redo_valid = IBusCachedPlugin_iBusRsp_redoFetch;
  assign IBusCachedPlugin_fetchPc_redo_payload = IBusCachedPlugin_iBusRsp_stages_2_input_payload;
  assign IBusCachedPlugin_iBusRsp_flush = ((decode_arbitration_removeIt || (decode_arbitration_flushNext && (! decode_arbitration_isStuck))) || IBusCachedPlugin_iBusRsp_redoFetch);
  assign IBusCachedPlugin_iBusRsp_stages_0_output_ready = _zz_71;
  assign _zz_71 = ((1'b0 && (! _zz_72)) || IBusCachedPlugin_iBusRsp_stages_1_input_ready);
  assign _zz_72 = _zz_73;
  assign IBusCachedPlugin_iBusRsp_stages_1_input_valid = _zz_72;
  assign IBusCachedPlugin_iBusRsp_stages_1_input_payload = IBusCachedPlugin_fetchPc_pcReg;
  assign IBusCachedPlugin_iBusRsp_stages_1_output_ready = ((1'b0 && (! _zz_74)) || IBusCachedPlugin_iBusRsp_stages_2_input_ready);
  assign _zz_74 = _zz_75;
  assign IBusCachedPlugin_iBusRsp_stages_2_input_valid = _zz_74;
  assign IBusCachedPlugin_iBusRsp_stages_2_input_payload = _zz_76;
  always @ (*) begin
    IBusCachedPlugin_iBusRsp_readyForError = 1'b1;
    if((! IBusCachedPlugin_pcValids_0))begin
      IBusCachedPlugin_iBusRsp_readyForError = 1'b0;
    end
  end

  assign IBusCachedPlugin_pcValids_0 = IBusCachedPlugin_injector_nextPcCalc_valids_1;
  assign IBusCachedPlugin_pcValids_1 = IBusCachedPlugin_injector_nextPcCalc_valids_2;
  assign IBusCachedPlugin_pcValids_2 = IBusCachedPlugin_injector_nextPcCalc_valids_3;
  assign IBusCachedPlugin_pcValids_3 = IBusCachedPlugin_injector_nextPcCalc_valids_4;
  assign IBusCachedPlugin_iBusRsp_output_ready = (! decode_arbitration_isStuck);
  always @ (*) begin
    decode_arbitration_isValid = IBusCachedPlugin_iBusRsp_output_valid;
    case(_zz_148)
      3'b010 : begin
        decode_arbitration_isValid = 1'b1;
      end
      3'b011 : begin
        decode_arbitration_isValid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign iBus_cmd_valid = IBusCachedPlugin_cache_io_mem_cmd_valid;
  always @ (*) begin
    iBus_cmd_payload_address = IBusCachedPlugin_cache_io_mem_cmd_payload_address;
    iBus_cmd_payload_address = IBusCachedPlugin_cache_io_mem_cmd_payload_address;
  end

  assign iBus_cmd_payload_size = IBusCachedPlugin_cache_io_mem_cmd_payload_size;
  assign IBusCachedPlugin_s0_tightlyCoupledHit = 1'b0;
  assign _zz_173 = (IBusCachedPlugin_iBusRsp_stages_0_input_valid && (! IBusCachedPlugin_s0_tightlyCoupledHit));
  assign IBusCachedPlugin_mmuBus_cmd_0_isValid = _zz_173;
  assign IBusCachedPlugin_mmuBus_cmd_0_isStuck = (! IBusCachedPlugin_iBusRsp_stages_0_input_ready);
  assign IBusCachedPlugin_mmuBus_cmd_0_virtualAddress = IBusCachedPlugin_iBusRsp_stages_0_input_payload;
  assign IBusCachedPlugin_mmuBus_cmd_0_bypassTranslation = 1'b0;
  assign _zz_174 = (IBusCachedPlugin_iBusRsp_stages_1_input_valid && (! IBusCachedPlugin_s1_tightlyCoupledHit));
  assign _zz_175 = (! IBusCachedPlugin_iBusRsp_stages_1_input_ready);
  assign IBusCachedPlugin_mmuBus_cmd_1_isValid = _zz_174;
  assign IBusCachedPlugin_mmuBus_cmd_1_isStuck = (! IBusCachedPlugin_iBusRsp_stages_1_input_ready);
  assign IBusCachedPlugin_mmuBus_cmd_1_virtualAddress = IBusCachedPlugin_iBusRsp_stages_1_input_payload;
  assign IBusCachedPlugin_mmuBus_cmd_1_bypassTranslation = 1'b0;
  assign IBusCachedPlugin_mmuBus_end = (IBusCachedPlugin_iBusRsp_stages_1_input_ready || IBusCachedPlugin_externalFlush);
  assign _zz_177 = (IBusCachedPlugin_iBusRsp_stages_2_input_valid && (! IBusCachedPlugin_s2_tightlyCoupledHit));
  assign _zz_178 = (! IBusCachedPlugin_iBusRsp_stages_2_input_ready);
  assign _zz_179 = (CsrPlugin_privilege == 2'b00);
  assign IBusCachedPlugin_rsp_iBusRspOutputHalt = 1'b0;
  assign IBusCachedPlugin_rsp_issueDetected = 1'b0;
  always @ (*) begin
    IBusCachedPlugin_rsp_redoFetch = 1'b0;
    if(_zz_250)begin
      IBusCachedPlugin_rsp_redoFetch = 1'b1;
    end
    if(_zz_248)begin
      IBusCachedPlugin_rsp_redoFetch = 1'b1;
    end
  end

  always @ (*) begin
    _zz_180 = (IBusCachedPlugin_rsp_redoFetch && (! IBusCachedPlugin_cache_io_cpu_decode_mmuRefilling));
    if(_zz_248)begin
      _zz_180 = 1'b1;
    end
  end

  always @ (*) begin
    IBusCachedPlugin_decodeExceptionPort_valid = 1'b0;
    if(_zz_249)begin
      IBusCachedPlugin_decodeExceptionPort_valid = IBusCachedPlugin_iBusRsp_readyForError;
    end
    if(_zz_247)begin
      IBusCachedPlugin_decodeExceptionPort_valid = IBusCachedPlugin_iBusRsp_readyForError;
    end
  end

  always @ (*) begin
    IBusCachedPlugin_decodeExceptionPort_payload_code = 4'bxxxx;
    if(_zz_249)begin
      IBusCachedPlugin_decodeExceptionPort_payload_code = 4'b1100;
    end
    if(_zz_247)begin
      IBusCachedPlugin_decodeExceptionPort_payload_code = 4'b0001;
    end
  end

  assign IBusCachedPlugin_decodeExceptionPort_payload_badAddr = {IBusCachedPlugin_iBusRsp_stages_2_input_payload[31 : 2],2'b00};
  assign IBusCachedPlugin_iBusRsp_output_valid = IBusCachedPlugin_iBusRsp_stages_2_output_valid;
  assign IBusCachedPlugin_iBusRsp_stages_2_output_ready = IBusCachedPlugin_iBusRsp_output_ready;
  assign IBusCachedPlugin_iBusRsp_output_payload_rsp_inst = IBusCachedPlugin_cache_io_cpu_decode_data;
  assign IBusCachedPlugin_iBusRsp_output_payload_pc = IBusCachedPlugin_iBusRsp_stages_2_output_payload;
  assign _zz_172 = (decode_arbitration_isValid && decode_FLUSH_ALL);
  assign dataCache_2_io_mem_cmd_s2mPipe_valid = (dataCache_2_io_mem_cmd_valid || dataCache_2_io_mem_cmd_s2mPipe_rValid);
  assign _zz_205 = (! dataCache_2_io_mem_cmd_s2mPipe_rValid);
  assign dataCache_2_io_mem_cmd_s2mPipe_payload_wr = (dataCache_2_io_mem_cmd_s2mPipe_rValid ? dataCache_2_io_mem_cmd_s2mPipe_rData_wr : dataCache_2_io_mem_cmd_payload_wr);
  assign dataCache_2_io_mem_cmd_s2mPipe_payload_uncached = (dataCache_2_io_mem_cmd_s2mPipe_rValid ? dataCache_2_io_mem_cmd_s2mPipe_rData_uncached : dataCache_2_io_mem_cmd_payload_uncached);
  assign dataCache_2_io_mem_cmd_s2mPipe_payload_address = (dataCache_2_io_mem_cmd_s2mPipe_rValid ? dataCache_2_io_mem_cmd_s2mPipe_rData_address : dataCache_2_io_mem_cmd_payload_address);
  assign dataCache_2_io_mem_cmd_s2mPipe_payload_data = (dataCache_2_io_mem_cmd_s2mPipe_rValid ? dataCache_2_io_mem_cmd_s2mPipe_rData_data : dataCache_2_io_mem_cmd_payload_data);
  assign dataCache_2_io_mem_cmd_s2mPipe_payload_mask = (dataCache_2_io_mem_cmd_s2mPipe_rValid ? dataCache_2_io_mem_cmd_s2mPipe_rData_mask : dataCache_2_io_mem_cmd_payload_mask);
  assign dataCache_2_io_mem_cmd_s2mPipe_payload_length = (dataCache_2_io_mem_cmd_s2mPipe_rValid ? dataCache_2_io_mem_cmd_s2mPipe_rData_length : dataCache_2_io_mem_cmd_payload_length);
  assign dataCache_2_io_mem_cmd_s2mPipe_payload_exclusive = (dataCache_2_io_mem_cmd_s2mPipe_rValid ? dataCache_2_io_mem_cmd_s2mPipe_rData_exclusive : dataCache_2_io_mem_cmd_payload_exclusive);
  assign dataCache_2_io_mem_cmd_s2mPipe_payload_last = (dataCache_2_io_mem_cmd_s2mPipe_rValid ? dataCache_2_io_mem_cmd_s2mPipe_rData_last : dataCache_2_io_mem_cmd_payload_last);
  assign dBus_cmd_valid = dataCache_2_io_mem_cmd_s2mPipe_valid;
  assign dataCache_2_io_mem_cmd_s2mPipe_ready = dBus_cmd_ready;
  assign dBus_cmd_payload_wr = dataCache_2_io_mem_cmd_s2mPipe_payload_wr;
  assign dBus_cmd_payload_uncached = dataCache_2_io_mem_cmd_s2mPipe_payload_uncached;
  assign dBus_cmd_payload_address = dataCache_2_io_mem_cmd_s2mPipe_payload_address;
  assign dBus_cmd_payload_data = dataCache_2_io_mem_cmd_s2mPipe_payload_data;
  assign dBus_cmd_payload_mask = dataCache_2_io_mem_cmd_s2mPipe_payload_mask;
  assign dBus_cmd_payload_length = dataCache_2_io_mem_cmd_s2mPipe_payload_length;
  assign dBus_cmd_payload_exclusive = dataCache_2_io_mem_cmd_s2mPipe_payload_exclusive;
  assign dBus_cmd_payload_last = dataCache_2_io_mem_cmd_s2mPipe_payload_last;
  assign dBus_inv_ready = dataCache_2_io_mem_inv_ready;
  assign dBus_ack_valid = dataCache_2_io_mem_ack_valid;
  assign dBus_ack_payload_last = dataCache_2_io_mem_ack_payload_last;
  assign dBus_ack_payload_fragment_hit = dataCache_2_io_mem_ack_payload_fragment_hit;
  assign dBus_sync_ready = dataCache_2_io_mem_sync_ready;
  always @ (*) begin
    _zz_45 = 1'b0;
    if(decode_INSTRUCTION[25])begin
      if(decode_MEMORY_LRSC)begin
        _zz_45 = 1'b1;
      end
      if(decode_MEMORY_AMO)begin
        _zz_45 = 1'b1;
      end
    end
  end

  assign execute_DBusCachedPlugin_size = execute_INSTRUCTION[13 : 12];
  always @ (*) begin
    _zz_181 = (execute_arbitration_isValid && execute_MEMORY_ENABLE);
    if(MmuPlugin_dBusAccess_cmd_valid)begin
      if(_zz_262)begin
        if(_zz_263)begin
          _zz_181 = 1'b1;
        end
      end
    end
  end

  always @ (*) begin
    _zz_182 = execute_SRC_ADD;
    if(MmuPlugin_dBusAccess_cmd_valid)begin
      if(_zz_262)begin
        _zz_182 = MmuPlugin_dBusAccess_cmd_payload_address;
      end
    end
  end

  always @ (*) begin
    _zz_183 = execute_MEMORY_WR;
    if(MmuPlugin_dBusAccess_cmd_valid)begin
      if(_zz_262)begin
        _zz_183 = MmuPlugin_dBusAccess_cmd_payload_write;
      end
    end
  end

  always @ (*) begin
    case(execute_DBusCachedPlugin_size)
      2'b00 : begin
        _zz_79 = {{{execute_RS2[7 : 0],execute_RS2[7 : 0]},execute_RS2[7 : 0]},execute_RS2[7 : 0]};
      end
      2'b01 : begin
        _zz_79 = {execute_RS2[15 : 0],execute_RS2[15 : 0]};
      end
      default : begin
        _zz_79 = execute_RS2[31 : 0];
      end
    endcase
  end

  always @ (*) begin
    _zz_184 = _zz_79;
    if(MmuPlugin_dBusAccess_cmd_valid)begin
      if(_zz_262)begin
        _zz_184 = MmuPlugin_dBusAccess_cmd_payload_data;
      end
    end
  end

  always @ (*) begin
    _zz_185 = execute_DBusCachedPlugin_size;
    if(MmuPlugin_dBusAccess_cmd_valid)begin
      if(_zz_262)begin
        _zz_185 = MmuPlugin_dBusAccess_cmd_payload_size;
      end
    end
  end

  assign DBusCachedPlugin_mmuBus_cmd_0_isValid = _zz_181;
  assign DBusCachedPlugin_mmuBus_cmd_0_isStuck = execute_arbitration_isStuck;
  assign DBusCachedPlugin_mmuBus_cmd_0_virtualAddress = execute_SRC_ADD;
  always @ (*) begin
    DBusCachedPlugin_mmuBus_cmd_0_bypassTranslation = 1'b0;
    if(execute_IS_DBUS_SHARING)begin
      DBusCachedPlugin_mmuBus_cmd_0_bypassTranslation = 1'b1;
    end
  end

  assign _zz_204 = (execute_arbitration_isValid && execute_MEMORY_MANAGMENT);
  always @ (*) begin
    _zz_186 = 1'b0;
    if(execute_MEMORY_LRSC)begin
      _zz_186 = 1'b1;
    end
    if(MmuPlugin_dBusAccess_cmd_valid)begin
      if(_zz_262)begin
        _zz_186 = 1'b0;
      end
    end
  end

  always @ (*) begin
    _zz_187 = execute_MEMORY_AMO;
    if(MmuPlugin_dBusAccess_cmd_valid)begin
      if(_zz_262)begin
        _zz_187 = 1'b0;
      end
    end
  end

  assign _zz_189 = execute_INSTRUCTION[31 : 29];
  assign _zz_188 = execute_INSTRUCTION[27];
  always @ (*) begin
    _zz_190 = (memory_arbitration_isValid && memory_MEMORY_ENABLE);
    if(memory_IS_DBUS_SHARING)begin
      _zz_190 = 1'b1;
    end
  end

  assign DBusCachedPlugin_mmuBus_cmd_1_isValid = _zz_190;
  assign DBusCachedPlugin_mmuBus_cmd_1_isStuck = memory_arbitration_isStuck;
  assign DBusCachedPlugin_mmuBus_cmd_1_virtualAddress = memory_MEMORY_VIRTUAL_ADDRESS;
  always @ (*) begin
    DBusCachedPlugin_mmuBus_cmd_1_bypassTranslation = 1'b0;
    if(memory_IS_DBUS_SHARING)begin
      DBusCachedPlugin_mmuBus_cmd_1_bypassTranslation = 1'b1;
    end
  end

  assign DBusCachedPlugin_mmuBus_end = ((! memory_arbitration_isStuck) || memory_arbitration_removeIt);
  always @ (*) begin
    _zz_191 = DBusCachedPlugin_mmuBus_rsp_isIoAccess;
    if((_zz_48 && (! dataCache_2_io_cpu_memory_isWrite)))begin
      _zz_191 = 1'b1;
    end
  end

  always @ (*) begin
    _zz_192 = (writeBack_arbitration_isValid && writeBack_MEMORY_ENABLE);
    if(writeBack_IS_DBUS_SHARING)begin
      _zz_192 = 1'b1;
    end
  end

  assign _zz_193 = (CsrPlugin_privilege == 2'b00);
  assign _zz_194 = writeBack_REGFILE_WRITE_DATA;
  assign _zz_80 = writeBack_INSTRUCTION[31 : 20];
  always @ (*) begin
    _zz_195 = _zz_354[0];
    if(writeBack_DBusCachedPlugin_fence_aquire)begin
      _zz_195 = 1'b1;
    end
    if(_zz_264)begin
      _zz_195 = 1'b0;
    end
  end

  always @ (*) begin
    _zz_196 = _zz_355[0];
    if(writeBack_DBusCachedPlugin_fence_aquire)begin
      _zz_196 = 1'b1;
    end
    if(_zz_264)begin
      _zz_196 = 1'b0;
    end
  end

  always @ (*) begin
    _zz_197 = _zz_356[0];
    if(writeBack_DBusCachedPlugin_fence_aquire)begin
      _zz_197 = 1'b1;
    end
    if(_zz_264)begin
      _zz_197 = 1'b0;
    end
  end

  always @ (*) begin
    _zz_198 = _zz_357[0];
    if(writeBack_DBusCachedPlugin_fence_aquire)begin
      _zz_198 = 1'b1;
    end
    if(_zz_264)begin
      _zz_198 = 1'b0;
    end
  end

  always @ (*) begin
    _zz_199 = _zz_358[0];
    if(writeBack_DBusCachedPlugin_fence_aquire)begin
      _zz_199 = 1'b1;
    end
    if(_zz_264)begin
      _zz_199 = 1'b0;
    end
  end

  always @ (*) begin
    _zz_200 = _zz_359[0];
    if(writeBack_DBusCachedPlugin_fence_aquire)begin
      _zz_200 = 1'b1;
    end
    if(_zz_264)begin
      _zz_200 = 1'b0;
    end
  end

  always @ (*) begin
    _zz_201 = _zz_360[0];
    if(writeBack_DBusCachedPlugin_fence_aquire)begin
      _zz_201 = 1'b1;
    end
    if(_zz_264)begin
      _zz_201 = 1'b0;
    end
  end

  always @ (*) begin
    _zz_202 = _zz_361[0];
    if(writeBack_DBusCachedPlugin_fence_aquire)begin
      _zz_202 = 1'b1;
    end
    if(_zz_264)begin
      _zz_202 = 1'b0;
    end
  end

  assign _zz_203 = _zz_80[11 : 8];
  always @ (*) begin
    writeBack_DBusCachedPlugin_fence_aquire = 1'b0;
    if((writeBack_MEMORY_ENABLE && writeBack_INSTRUCTION[26]))begin
      if(writeBack_MEMORY_LRSC)begin
        writeBack_DBusCachedPlugin_fence_aquire = 1'b1;
      end
      if(writeBack_MEMORY_AMO)begin
        writeBack_DBusCachedPlugin_fence_aquire = 1'b1;
      end
    end
  end

  always @ (*) begin
    DBusCachedPlugin_redoBranch_valid = 1'b0;
    if(_zz_265)begin
      if(dataCache_2_io_cpu_redo)begin
        DBusCachedPlugin_redoBranch_valid = 1'b1;
      end
    end
  end

  assign DBusCachedPlugin_redoBranch_payload = writeBack_PC;
  always @ (*) begin
    DBusCachedPlugin_exceptionBus_valid = 1'b0;
    if(_zz_265)begin
      if(dataCache_2_io_cpu_writeBack_accessError)begin
        DBusCachedPlugin_exceptionBus_valid = 1'b1;
      end
      if(dataCache_2_io_cpu_writeBack_unalignedAccess)begin
        DBusCachedPlugin_exceptionBus_valid = 1'b1;
      end
      if(dataCache_2_io_cpu_writeBack_mmuException)begin
        DBusCachedPlugin_exceptionBus_valid = 1'b1;
      end
      if(dataCache_2_io_cpu_redo)begin
        DBusCachedPlugin_exceptionBus_valid = 1'b0;
      end
    end
  end

  assign DBusCachedPlugin_exceptionBus_payload_badAddr = writeBack_REGFILE_WRITE_DATA;
  always @ (*) begin
    DBusCachedPlugin_exceptionBus_payload_code = 4'bxxxx;
    if(_zz_265)begin
      if(dataCache_2_io_cpu_writeBack_accessError)begin
        DBusCachedPlugin_exceptionBus_payload_code = {1'd0, _zz_362};
      end
      if(dataCache_2_io_cpu_writeBack_unalignedAccess)begin
        DBusCachedPlugin_exceptionBus_payload_code = {1'd0, _zz_363};
      end
      if(dataCache_2_io_cpu_writeBack_mmuException)begin
        DBusCachedPlugin_exceptionBus_payload_code = (writeBack_MEMORY_WR ? 4'b1111 : 4'b1101);
      end
    end
  end

  always @ (*) begin
    writeBack_DBusCachedPlugin_rspShifted = dataCache_2_io_cpu_writeBack_data;
    case(writeBack_MEMORY_ADDRESS_LOW)
      2'b01 : begin
        writeBack_DBusCachedPlugin_rspShifted[7 : 0] = dataCache_2_io_cpu_writeBack_data[15 : 8];
      end
      2'b10 : begin
        writeBack_DBusCachedPlugin_rspShifted[15 : 0] = dataCache_2_io_cpu_writeBack_data[31 : 16];
      end
      2'b11 : begin
        writeBack_DBusCachedPlugin_rspShifted[7 : 0] = dataCache_2_io_cpu_writeBack_data[31 : 24];
      end
      default : begin
      end
    endcase
  end

  assign _zz_81 = (writeBack_DBusCachedPlugin_rspShifted[7] && (! writeBack_INSTRUCTION[14]));
  always @ (*) begin
    _zz_82[31] = _zz_81;
    _zz_82[30] = _zz_81;
    _zz_82[29] = _zz_81;
    _zz_82[28] = _zz_81;
    _zz_82[27] = _zz_81;
    _zz_82[26] = _zz_81;
    _zz_82[25] = _zz_81;
    _zz_82[24] = _zz_81;
    _zz_82[23] = _zz_81;
    _zz_82[22] = _zz_81;
    _zz_82[21] = _zz_81;
    _zz_82[20] = _zz_81;
    _zz_82[19] = _zz_81;
    _zz_82[18] = _zz_81;
    _zz_82[17] = _zz_81;
    _zz_82[16] = _zz_81;
    _zz_82[15] = _zz_81;
    _zz_82[14] = _zz_81;
    _zz_82[13] = _zz_81;
    _zz_82[12] = _zz_81;
    _zz_82[11] = _zz_81;
    _zz_82[10] = _zz_81;
    _zz_82[9] = _zz_81;
    _zz_82[8] = _zz_81;
    _zz_82[7 : 0] = writeBack_DBusCachedPlugin_rspShifted[7 : 0];
  end

  assign _zz_83 = (writeBack_DBusCachedPlugin_rspShifted[15] && (! writeBack_INSTRUCTION[14]));
  always @ (*) begin
    _zz_84[31] = _zz_83;
    _zz_84[30] = _zz_83;
    _zz_84[29] = _zz_83;
    _zz_84[28] = _zz_83;
    _zz_84[27] = _zz_83;
    _zz_84[26] = _zz_83;
    _zz_84[25] = _zz_83;
    _zz_84[24] = _zz_83;
    _zz_84[23] = _zz_83;
    _zz_84[22] = _zz_83;
    _zz_84[21] = _zz_83;
    _zz_84[20] = _zz_83;
    _zz_84[19] = _zz_83;
    _zz_84[18] = _zz_83;
    _zz_84[17] = _zz_83;
    _zz_84[16] = _zz_83;
    _zz_84[15 : 0] = writeBack_DBusCachedPlugin_rspShifted[15 : 0];
  end

  always @ (*) begin
    case(_zz_300)
      2'b00 : begin
        writeBack_DBusCachedPlugin_rspFormated = _zz_82;
      end
      2'b01 : begin
        writeBack_DBusCachedPlugin_rspFormated = _zz_84;
      end
      default : begin
        writeBack_DBusCachedPlugin_rspFormated = writeBack_DBusCachedPlugin_rspShifted;
      end
    endcase
  end

  always @ (*) begin
    MmuPlugin_dBusAccess_cmd_ready = 1'b0;
    if(MmuPlugin_dBusAccess_cmd_valid)begin
      if(_zz_262)begin
        if(_zz_263)begin
          MmuPlugin_dBusAccess_cmd_ready = (! execute_arbitration_isStuck);
        end
      end
    end
  end

  always @ (*) begin
    DBusCachedPlugin_forceDatapath = 1'b0;
    if(MmuPlugin_dBusAccess_cmd_valid)begin
      if(_zz_262)begin
        DBusCachedPlugin_forceDatapath = 1'b1;
      end
    end
  end

  assign MmuPlugin_dBusAccess_rsp_valid = ((writeBack_IS_DBUS_SHARING && (! dataCache_2_io_cpu_writeBack_isWrite)) && (dataCache_2_io_cpu_redo || (! dataCache_2_io_cpu_writeBack_haltIt)));
  assign MmuPlugin_dBusAccess_rsp_payload_data = dataCache_2_io_cpu_writeBack_data;
  assign MmuPlugin_dBusAccess_rsp_payload_error = (dataCache_2_io_cpu_writeBack_unalignedAccess || dataCache_2_io_cpu_writeBack_accessError);
  assign MmuPlugin_dBusAccess_rsp_payload_redo = dataCache_2_io_cpu_redo;
  assign _zz_86 = ((decode_INSTRUCTION & 32'h00004050) == 32'h00004050);
  assign _zz_87 = ((decode_INSTRUCTION & 32'h00000048) == 32'h00000048);
  assign _zz_88 = ((decode_INSTRUCTION & 32'h00002050) == 32'h00002000);
  assign _zz_89 = ((decode_INSTRUCTION & 32'h00000004) == 32'h00000004);
  assign _zz_90 = ((decode_INSTRUCTION & 32'h0000000c) == 32'h00000004);
  assign _zz_91 = ((decode_INSTRUCTION & 32'h00000030) == 32'h00000010);
  assign _zz_92 = ((decode_INSTRUCTION & 32'h0000000c) == 32'h00000008);
  assign _zz_93 = ((decode_INSTRUCTION & 32'h00001000) == 32'h0);
  assign _zz_85 = {(((decode_INSTRUCTION & _zz_470) == 32'h00100050) != 1'b0),{(_zz_92 != 1'b0),{({_zz_471,_zz_472} != 2'b00),{(_zz_473 != _zz_474),{_zz_475,{_zz_476,_zz_477}}}}}};
  assign _zz_94 = _zz_85[3 : 2];
  assign _zz_43 = _zz_94;
  assign _zz_95 = _zz_85[8 : 7];
  assign _zz_42 = _zz_95;
  assign _zz_96 = _zz_85[10 : 9];
  assign _zz_41 = _zz_96;
  assign _zz_97 = _zz_85[24 : 23];
  assign _zz_40 = _zz_97;
  assign _zz_98 = _zz_85[26 : 25];
  assign _zz_39 = _zz_98;
  assign _zz_99 = _zz_85[33 : 32];
  assign _zz_38 = _zz_99;
  assign _zz_100 = _zz_85[35 : 34];
  assign _zz_37 = _zz_100;
  assign decodeExceptionPort_valid = (decode_arbitration_isValid && (! decode_LEGAL_INSTRUCTION));
  assign decodeExceptionPort_payload_code = 4'b0010;
  assign decodeExceptionPort_payload_badAddr = decode_INSTRUCTION;
  assign decode_RegFilePlugin_regFileReadAddress1 = decode_INSTRUCTION[19 : 15];
  assign decode_RegFilePlugin_regFileReadAddress2 = decode_INSTRUCTION[24 : 20];
  assign decode_RegFilePlugin_rs1Data = _zz_206;
  assign decode_RegFilePlugin_rs2Data = _zz_207;
  always @ (*) begin
    lastStageRegFileWrite_valid = (_zz_35 && writeBack_arbitration_isFiring);
    if(_zz_101)begin
      lastStageRegFileWrite_valid = 1'b1;
    end
  end

  always @ (*) begin
    lastStageRegFileWrite_payload_address = _zz_34[11 : 7];
    if(_zz_101)begin
      lastStageRegFileWrite_payload_address = 5'h0;
    end
  end

  always @ (*) begin
    lastStageRegFileWrite_payload_data = _zz_44;
    if(_zz_101)begin
      lastStageRegFileWrite_payload_data = 32'h0;
    end
  end

  always @ (*) begin
    case(execute_ALU_BITWISE_CTRL)
      `AluBitwiseCtrlEnum_defaultEncoding_AND_1 : begin
        execute_IntAluPlugin_bitwise = (execute_SRC1 & execute_SRC2);
      end
      `AluBitwiseCtrlEnum_defaultEncoding_OR_1 : begin
        execute_IntAluPlugin_bitwise = (execute_SRC1 | execute_SRC2);
      end
      default : begin
        execute_IntAluPlugin_bitwise = (execute_SRC1 ^ execute_SRC2);
      end
    endcase
  end

  always @ (*) begin
    case(execute_ALU_CTRL)
      `AluCtrlEnum_defaultEncoding_BITWISE : begin
        _zz_102 = execute_IntAluPlugin_bitwise;
      end
      `AluCtrlEnum_defaultEncoding_SLT_SLTU : begin
        _zz_102 = {31'd0, _zz_364};
      end
      default : begin
        _zz_102 = execute_SRC_ADD_SUB;
      end
    endcase
  end

  always @ (*) begin
    case(decode_SRC1_CTRL)
      `Src1CtrlEnum_1_defaultEncoding_RS : begin
        _zz_103 = _zz_30;
      end
      `Src1CtrlEnum_1_defaultEncoding_PC_INCREMENT : begin
        _zz_103 = {29'd0, _zz_365};
      end
      `Src1CtrlEnum_1_defaultEncoding_IMU : begin
        _zz_103 = {decode_INSTRUCTION[31 : 12],12'h0};
      end
      default : begin
        _zz_103 = {27'd0, _zz_366};
      end
    endcase
  end

  assign _zz_104 = _zz_367[11];
  always @ (*) begin
    _zz_105[19] = _zz_104;
    _zz_105[18] = _zz_104;
    _zz_105[17] = _zz_104;
    _zz_105[16] = _zz_104;
    _zz_105[15] = _zz_104;
    _zz_105[14] = _zz_104;
    _zz_105[13] = _zz_104;
    _zz_105[12] = _zz_104;
    _zz_105[11] = _zz_104;
    _zz_105[10] = _zz_104;
    _zz_105[9] = _zz_104;
    _zz_105[8] = _zz_104;
    _zz_105[7] = _zz_104;
    _zz_105[6] = _zz_104;
    _zz_105[5] = _zz_104;
    _zz_105[4] = _zz_104;
    _zz_105[3] = _zz_104;
    _zz_105[2] = _zz_104;
    _zz_105[1] = _zz_104;
    _zz_105[0] = _zz_104;
  end

  assign _zz_106 = _zz_368[11];
  always @ (*) begin
    _zz_107[19] = _zz_106;
    _zz_107[18] = _zz_106;
    _zz_107[17] = _zz_106;
    _zz_107[16] = _zz_106;
    _zz_107[15] = _zz_106;
    _zz_107[14] = _zz_106;
    _zz_107[13] = _zz_106;
    _zz_107[12] = _zz_106;
    _zz_107[11] = _zz_106;
    _zz_107[10] = _zz_106;
    _zz_107[9] = _zz_106;
    _zz_107[8] = _zz_106;
    _zz_107[7] = _zz_106;
    _zz_107[6] = _zz_106;
    _zz_107[5] = _zz_106;
    _zz_107[4] = _zz_106;
    _zz_107[3] = _zz_106;
    _zz_107[2] = _zz_106;
    _zz_107[1] = _zz_106;
    _zz_107[0] = _zz_106;
  end

  always @ (*) begin
    case(decode_SRC2_CTRL)
      `Src2CtrlEnum_1_defaultEncoding_RS : begin
        _zz_108 = _zz_28;
      end
      `Src2CtrlEnum_1_defaultEncoding_IMI : begin
        _zz_108 = {_zz_105,decode_INSTRUCTION[31 : 20]};
      end
      `Src2CtrlEnum_1_defaultEncoding_IMS : begin
        _zz_108 = {_zz_107,{decode_INSTRUCTION[31 : 25],decode_INSTRUCTION[11 : 7]}};
      end
      default : begin
        _zz_108 = _zz_27;
      end
    endcase
  end

  always @ (*) begin
    execute_SrcPlugin_addSub = _zz_369;
    if(execute_SRC2_FORCE_ZERO)begin
      execute_SrcPlugin_addSub = execute_SRC1;
    end
  end

  assign execute_SrcPlugin_less = ((execute_SRC1[31] == execute_SRC2[31]) ? execute_SrcPlugin_addSub[31] : (execute_SRC_LESS_UNSIGNED ? execute_SRC2[31] : execute_SRC1[31]));
  assign execute_FullBarrelShifterPlugin_amplitude = execute_SRC2[4 : 0];
  always @ (*) begin
    _zz_109[0] = execute_SRC1[31];
    _zz_109[1] = execute_SRC1[30];
    _zz_109[2] = execute_SRC1[29];
    _zz_109[3] = execute_SRC1[28];
    _zz_109[4] = execute_SRC1[27];
    _zz_109[5] = execute_SRC1[26];
    _zz_109[6] = execute_SRC1[25];
    _zz_109[7] = execute_SRC1[24];
    _zz_109[8] = execute_SRC1[23];
    _zz_109[9] = execute_SRC1[22];
    _zz_109[10] = execute_SRC1[21];
    _zz_109[11] = execute_SRC1[20];
    _zz_109[12] = execute_SRC1[19];
    _zz_109[13] = execute_SRC1[18];
    _zz_109[14] = execute_SRC1[17];
    _zz_109[15] = execute_SRC1[16];
    _zz_109[16] = execute_SRC1[15];
    _zz_109[17] = execute_SRC1[14];
    _zz_109[18] = execute_SRC1[13];
    _zz_109[19] = execute_SRC1[12];
    _zz_109[20] = execute_SRC1[11];
    _zz_109[21] = execute_SRC1[10];
    _zz_109[22] = execute_SRC1[9];
    _zz_109[23] = execute_SRC1[8];
    _zz_109[24] = execute_SRC1[7];
    _zz_109[25] = execute_SRC1[6];
    _zz_109[26] = execute_SRC1[5];
    _zz_109[27] = execute_SRC1[4];
    _zz_109[28] = execute_SRC1[3];
    _zz_109[29] = execute_SRC1[2];
    _zz_109[30] = execute_SRC1[1];
    _zz_109[31] = execute_SRC1[0];
  end

  assign execute_FullBarrelShifterPlugin_reversed = ((execute_SHIFT_CTRL == `ShiftCtrlEnum_1_defaultEncoding_SLL_1) ? _zz_109 : execute_SRC1);
  always @ (*) begin
    _zz_110[0] = execute_SHIFT_RIGHT[31];
    _zz_110[1] = execute_SHIFT_RIGHT[30];
    _zz_110[2] = execute_SHIFT_RIGHT[29];
    _zz_110[3] = execute_SHIFT_RIGHT[28];
    _zz_110[4] = execute_SHIFT_RIGHT[27];
    _zz_110[5] = execute_SHIFT_RIGHT[26];
    _zz_110[6] = execute_SHIFT_RIGHT[25];
    _zz_110[7] = execute_SHIFT_RIGHT[24];
    _zz_110[8] = execute_SHIFT_RIGHT[23];
    _zz_110[9] = execute_SHIFT_RIGHT[22];
    _zz_110[10] = execute_SHIFT_RIGHT[21];
    _zz_110[11] = execute_SHIFT_RIGHT[20];
    _zz_110[12] = execute_SHIFT_RIGHT[19];
    _zz_110[13] = execute_SHIFT_RIGHT[18];
    _zz_110[14] = execute_SHIFT_RIGHT[17];
    _zz_110[15] = execute_SHIFT_RIGHT[16];
    _zz_110[16] = execute_SHIFT_RIGHT[15];
    _zz_110[17] = execute_SHIFT_RIGHT[14];
    _zz_110[18] = execute_SHIFT_RIGHT[13];
    _zz_110[19] = execute_SHIFT_RIGHT[12];
    _zz_110[20] = execute_SHIFT_RIGHT[11];
    _zz_110[21] = execute_SHIFT_RIGHT[10];
    _zz_110[22] = execute_SHIFT_RIGHT[9];
    _zz_110[23] = execute_SHIFT_RIGHT[8];
    _zz_110[24] = execute_SHIFT_RIGHT[7];
    _zz_110[25] = execute_SHIFT_RIGHT[6];
    _zz_110[26] = execute_SHIFT_RIGHT[5];
    _zz_110[27] = execute_SHIFT_RIGHT[4];
    _zz_110[28] = execute_SHIFT_RIGHT[3];
    _zz_110[29] = execute_SHIFT_RIGHT[2];
    _zz_110[30] = execute_SHIFT_RIGHT[1];
    _zz_110[31] = execute_SHIFT_RIGHT[0];
  end

  always @ (*) begin
    _zz_111 = 1'b0;
    if(_zz_266)begin
      if(_zz_267)begin
        if(_zz_116)begin
          _zz_111 = 1'b1;
        end
      end
    end
    if(_zz_268)begin
      if(_zz_269)begin
        if(_zz_118)begin
          _zz_111 = 1'b1;
        end
      end
    end
    if(_zz_270)begin
      if(_zz_271)begin
        if(_zz_120)begin
          _zz_111 = 1'b1;
        end
      end
    end
    if((! decode_RS1_USE))begin
      _zz_111 = 1'b0;
    end
  end

  always @ (*) begin
    _zz_112 = 1'b0;
    if(_zz_266)begin
      if(_zz_267)begin
        if(_zz_117)begin
          _zz_112 = 1'b1;
        end
      end
    end
    if(_zz_268)begin
      if(_zz_269)begin
        if(_zz_119)begin
          _zz_112 = 1'b1;
        end
      end
    end
    if(_zz_270)begin
      if(_zz_271)begin
        if(_zz_121)begin
          _zz_112 = 1'b1;
        end
      end
    end
    if((! decode_RS2_USE))begin
      _zz_112 = 1'b0;
    end
  end

  assign _zz_116 = (writeBack_INSTRUCTION[11 : 7] == decode_INSTRUCTION[19 : 15]);
  assign _zz_117 = (writeBack_INSTRUCTION[11 : 7] == decode_INSTRUCTION[24 : 20]);
  assign _zz_118 = (memory_INSTRUCTION[11 : 7] == decode_INSTRUCTION[19 : 15]);
  assign _zz_119 = (memory_INSTRUCTION[11 : 7] == decode_INSTRUCTION[24 : 20]);
  assign _zz_120 = (execute_INSTRUCTION[11 : 7] == decode_INSTRUCTION[19 : 15]);
  assign _zz_121 = (execute_INSTRUCTION[11 : 7] == decode_INSTRUCTION[24 : 20]);
  assign execute_MulPlugin_a = execute_RS1;
  assign execute_MulPlugin_b = execute_RS2;
  always @ (*) begin
    case(_zz_272)
      2'b01 : begin
        execute_MulPlugin_aSigned = 1'b1;
      end
      2'b10 : begin
        execute_MulPlugin_aSigned = 1'b1;
      end
      default : begin
        execute_MulPlugin_aSigned = 1'b0;
      end
    endcase
  end

  always @ (*) begin
    case(_zz_272)
      2'b01 : begin
        execute_MulPlugin_bSigned = 1'b1;
      end
      2'b10 : begin
        execute_MulPlugin_bSigned = 1'b0;
      end
      default : begin
        execute_MulPlugin_bSigned = 1'b0;
      end
    endcase
  end

  assign execute_MulPlugin_aULow = execute_MulPlugin_a[15 : 0];
  assign execute_MulPlugin_bULow = execute_MulPlugin_b[15 : 0];
  assign execute_MulPlugin_aSLow = {1'b0,execute_MulPlugin_a[15 : 0]};
  assign execute_MulPlugin_bSLow = {1'b0,execute_MulPlugin_b[15 : 0]};
  assign execute_MulPlugin_aHigh = {(execute_MulPlugin_aSigned && execute_MulPlugin_a[31]),execute_MulPlugin_a[31 : 16]};
  assign execute_MulPlugin_bHigh = {(execute_MulPlugin_bSigned && execute_MulPlugin_b[31]),execute_MulPlugin_b[31 : 16]};
  assign writeBack_MulPlugin_result = ($signed(_zz_376) + $signed(_zz_377));
  assign memory_MulDivIterativePlugin_frontendOk = 1'b1;
  always @ (*) begin
    memory_MulDivIterativePlugin_div_counter_willIncrement = 1'b0;
    if(_zz_241)begin
      if(_zz_273)begin
        memory_MulDivIterativePlugin_div_counter_willIncrement = 1'b1;
      end
    end
  end

  always @ (*) begin
    memory_MulDivIterativePlugin_div_counter_willClear = 1'b0;
    if(_zz_274)begin
      memory_MulDivIterativePlugin_div_counter_willClear = 1'b1;
    end
  end

  assign memory_MulDivIterativePlugin_div_counter_willOverflowIfInc = (memory_MulDivIterativePlugin_div_counter_value == 6'h21);
  assign memory_MulDivIterativePlugin_div_counter_willOverflow = (memory_MulDivIterativePlugin_div_counter_willOverflowIfInc && memory_MulDivIterativePlugin_div_counter_willIncrement);
  always @ (*) begin
    if(memory_MulDivIterativePlugin_div_counter_willOverflow)begin
      memory_MulDivIterativePlugin_div_counter_valueNext = 6'h0;
    end else begin
      memory_MulDivIterativePlugin_div_counter_valueNext = (memory_MulDivIterativePlugin_div_counter_value + _zz_381);
    end
    if(memory_MulDivIterativePlugin_div_counter_willClear)begin
      memory_MulDivIterativePlugin_div_counter_valueNext = 6'h0;
    end
  end

  assign _zz_122 = memory_MulDivIterativePlugin_rs1[31 : 0];
  assign memory_MulDivIterativePlugin_div_stage_0_remainderShifted = {memory_MulDivIterativePlugin_accumulator[31 : 0],_zz_122[31]};
  assign memory_MulDivIterativePlugin_div_stage_0_remainderMinusDenominator = (memory_MulDivIterativePlugin_div_stage_0_remainderShifted - _zz_382);
  assign memory_MulDivIterativePlugin_div_stage_0_outRemainder = ((! memory_MulDivIterativePlugin_div_stage_0_remainderMinusDenominator[32]) ? _zz_383 : _zz_384);
  assign memory_MulDivIterativePlugin_div_stage_0_outNumerator = _zz_385[31:0];
  assign _zz_123 = (memory_INSTRUCTION[13] ? memory_MulDivIterativePlugin_accumulator[31 : 0] : memory_MulDivIterativePlugin_rs1[31 : 0]);
  assign _zz_124 = (execute_RS2[31] && execute_IS_RS2_SIGNED);
  assign _zz_125 = (1'b0 || ((execute_IS_DIV && execute_RS1[31]) && execute_IS_RS1_SIGNED));
  always @ (*) begin
    _zz_126[32] = (execute_IS_RS1_SIGNED && execute_RS1[31]);
    _zz_126[31 : 0] = execute_RS1;
  end

  always @ (*) begin
    CsrPlugin_privilege = _zz_127;
    if(CsrPlugin_forceMachineWire)begin
      CsrPlugin_privilege = 2'b11;
    end
  end

  assign CsrPlugin_misa_base = 2'b01;
  assign CsrPlugin_misa_extensions = 26'h0041101;
  assign CsrPlugin_sip_SEIP_OR = (CsrPlugin_sip_SEIP_SOFT || CsrPlugin_sip_SEIP_INPUT);
  always @ (*) begin
    CsrPlugin_redoInterface_valid = 1'b0;
    if(execute_CsrPlugin_csr_384)begin
      if(execute_CsrPlugin_writeInstruction)begin
        CsrPlugin_redoInterface_valid = 1'b1;
      end
    end
  end

  assign CsrPlugin_redoInterface_payload = decode_PC;
  assign _zz_128 = (CsrPlugin_sip_STIP && CsrPlugin_sie_STIE);
  assign _zz_129 = (CsrPlugin_sip_SSIP && CsrPlugin_sie_SSIE);
  assign _zz_130 = (CsrPlugin_sip_SEIP_OR && CsrPlugin_sie_SEIE);
  assign _zz_131 = (CsrPlugin_mip_MTIP && CsrPlugin_mie_MTIE);
  assign _zz_132 = (CsrPlugin_mip_MSIP && CsrPlugin_mie_MSIE);
  assign _zz_133 = (CsrPlugin_mip_MEIP && CsrPlugin_mie_MEIE);
  always @ (*) begin
    CsrPlugin_exceptionPortCtrl_exceptionTargetPrivilegeUncapped = 2'b11;
    case(CsrPlugin_exceptionPortCtrl_exceptionContext_code)
      4'b0000 : begin
        if(((1'b1 && CsrPlugin_medeleg_IAM) && (! 1'b0)))begin
          CsrPlugin_exceptionPortCtrl_exceptionTargetPrivilegeUncapped = 2'b01;
        end
      end
      4'b0001 : begin
        if(((1'b1 && CsrPlugin_medeleg_IAF) && (! 1'b0)))begin
          CsrPlugin_exceptionPortCtrl_exceptionTargetPrivilegeUncapped = 2'b01;
        end
      end
      4'b0010 : begin
        if(((1'b1 && CsrPlugin_medeleg_II) && (! 1'b0)))begin
          CsrPlugin_exceptionPortCtrl_exceptionTargetPrivilegeUncapped = 2'b01;
        end
      end
      4'b0100 : begin
        if(((1'b1 && CsrPlugin_medeleg_LAM) && (! 1'b0)))begin
          CsrPlugin_exceptionPortCtrl_exceptionTargetPrivilegeUncapped = 2'b01;
        end
      end
      4'b0101 : begin
        if(((1'b1 && CsrPlugin_medeleg_LAF) && (! 1'b0)))begin
          CsrPlugin_exceptionPortCtrl_exceptionTargetPrivilegeUncapped = 2'b01;
        end
      end
      4'b0110 : begin
        if(((1'b1 && CsrPlugin_medeleg_SAM) && (! 1'b0)))begin
          CsrPlugin_exceptionPortCtrl_exceptionTargetPrivilegeUncapped = 2'b01;
        end
      end
      4'b0111 : begin
        if(((1'b1 && CsrPlugin_medeleg_SAF) && (! 1'b0)))begin
          CsrPlugin_exceptionPortCtrl_exceptionTargetPrivilegeUncapped = 2'b01;
        end
      end
      4'b1000 : begin
        if(((1'b1 && CsrPlugin_medeleg_EU) && (! 1'b0)))begin
          CsrPlugin_exceptionPortCtrl_exceptionTargetPrivilegeUncapped = 2'b01;
        end
      end
      4'b1001 : begin
        if(((1'b1 && CsrPlugin_medeleg_ES) && (! 1'b0)))begin
          CsrPlugin_exceptionPortCtrl_exceptionTargetPrivilegeUncapped = 2'b01;
        end
      end
      4'b1100 : begin
        if(((1'b1 && CsrPlugin_medeleg_IPF) && (! 1'b0)))begin
          CsrPlugin_exceptionPortCtrl_exceptionTargetPrivilegeUncapped = 2'b01;
        end
      end
      4'b1101 : begin
        if(((1'b1 && CsrPlugin_medeleg_LPF) && (! 1'b0)))begin
          CsrPlugin_exceptionPortCtrl_exceptionTargetPrivilegeUncapped = 2'b01;
        end
      end
      4'b1111 : begin
        if(((1'b1 && CsrPlugin_medeleg_SPF) && (! 1'b0)))begin
          CsrPlugin_exceptionPortCtrl_exceptionTargetPrivilegeUncapped = 2'b01;
        end
      end
      default : begin
      end
    endcase
  end

  assign CsrPlugin_exceptionPortCtrl_exceptionTargetPrivilege = ((CsrPlugin_privilege < CsrPlugin_exceptionPortCtrl_exceptionTargetPrivilegeUncapped) ? CsrPlugin_exceptionPortCtrl_exceptionTargetPrivilegeUncapped : CsrPlugin_privilege);
  assign _zz_134 = {decodeExceptionPort_valid,IBusCachedPlugin_decodeExceptionPort_valid};
  assign _zz_135 = _zz_395[0];
  always @ (*) begin
    CsrPlugin_exceptionPortCtrl_exceptionValids_decode = CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_decode;
    if(_zz_251)begin
      CsrPlugin_exceptionPortCtrl_exceptionValids_decode = 1'b1;
    end
    if(decode_arbitration_isFlushed)begin
      CsrPlugin_exceptionPortCtrl_exceptionValids_decode = 1'b0;
    end
  end

  always @ (*) begin
    CsrPlugin_exceptionPortCtrl_exceptionValids_execute = CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_execute;
    if(CsrPlugin_selfException_valid)begin
      CsrPlugin_exceptionPortCtrl_exceptionValids_execute = 1'b1;
    end
    if(execute_arbitration_isFlushed)begin
      CsrPlugin_exceptionPortCtrl_exceptionValids_execute = 1'b0;
    end
  end

  always @ (*) begin
    CsrPlugin_exceptionPortCtrl_exceptionValids_memory = CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_memory;
    if(BranchPlugin_branchExceptionPort_valid)begin
      CsrPlugin_exceptionPortCtrl_exceptionValids_memory = 1'b1;
    end
    if(memory_arbitration_isFlushed)begin
      CsrPlugin_exceptionPortCtrl_exceptionValids_memory = 1'b0;
    end
  end

  always @ (*) begin
    CsrPlugin_exceptionPortCtrl_exceptionValids_writeBack = CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_writeBack;
    if(DBusCachedPlugin_exceptionBus_valid)begin
      CsrPlugin_exceptionPortCtrl_exceptionValids_writeBack = 1'b1;
    end
    if(writeBack_arbitration_isFlushed)begin
      CsrPlugin_exceptionPortCtrl_exceptionValids_writeBack = 1'b0;
    end
  end

  assign CsrPlugin_exceptionPendings_0 = CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_decode;
  assign CsrPlugin_exceptionPendings_1 = CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_execute;
  assign CsrPlugin_exceptionPendings_2 = CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_memory;
  assign CsrPlugin_exceptionPendings_3 = CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_writeBack;
  assign CsrPlugin_exception = (CsrPlugin_exceptionPortCtrl_exceptionValids_writeBack && CsrPlugin_allowException);
  assign CsrPlugin_pipelineLiberator_active = ((CsrPlugin_interrupt_valid && CsrPlugin_allowInterrupts) && decode_arbitration_isValid);
  always @ (*) begin
    CsrPlugin_pipelineLiberator_done = CsrPlugin_pipelineLiberator_pcValids_2;
    if(({CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_writeBack,{CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_memory,CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_execute}} != 3'b000))begin
      CsrPlugin_pipelineLiberator_done = 1'b0;
    end
    if(CsrPlugin_hadException)begin
      CsrPlugin_pipelineLiberator_done = 1'b0;
    end
  end

  assign CsrPlugin_interruptJump = ((CsrPlugin_interrupt_valid && CsrPlugin_pipelineLiberator_done) && CsrPlugin_allowInterrupts);
  always @ (*) begin
    CsrPlugin_targetPrivilege = CsrPlugin_interrupt_targetPrivilege;
    if(CsrPlugin_hadException)begin
      CsrPlugin_targetPrivilege = CsrPlugin_exceptionPortCtrl_exceptionTargetPrivilege;
    end
  end

  always @ (*) begin
    CsrPlugin_trapCause = CsrPlugin_interrupt_code;
    if(CsrPlugin_hadException)begin
      CsrPlugin_trapCause = CsrPlugin_exceptionPortCtrl_exceptionContext_code;
    end
  end

  always @ (*) begin
    CsrPlugin_xtvec_mode = 2'bxx;
    case(CsrPlugin_targetPrivilege)
      2'b01 : begin
        CsrPlugin_xtvec_mode = CsrPlugin_stvec_mode;
      end
      2'b11 : begin
        CsrPlugin_xtvec_mode = CsrPlugin_mtvec_mode;
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    CsrPlugin_xtvec_base = 30'h0;
    case(CsrPlugin_targetPrivilege)
      2'b01 : begin
        CsrPlugin_xtvec_base = CsrPlugin_stvec_base;
      end
      2'b11 : begin
        CsrPlugin_xtvec_base = CsrPlugin_mtvec_base;
      end
      default : begin
      end
    endcase
  end

  assign contextSwitching = CsrPlugin_jumpInterface_valid;
  assign execute_CsrPlugin_blockedBySideEffects = (({writeBack_arbitration_isValid,memory_arbitration_isValid} != 2'b00) || 1'b0);
  always @ (*) begin
    execute_CsrPlugin_illegalAccess = 1'b1;
    if(execute_CsrPlugin_csr_768)begin
      execute_CsrPlugin_illegalAccess = 1'b0;
    end
    if(execute_CsrPlugin_csr_256)begin
      execute_CsrPlugin_illegalAccess = 1'b0;
    end
    if(execute_CsrPlugin_csr_384)begin
      execute_CsrPlugin_illegalAccess = 1'b0;
    end
    if(execute_CsrPlugin_csr_3857)begin
      if(execute_CSR_READ_OPCODE)begin
        execute_CsrPlugin_illegalAccess = 1'b0;
      end
    end
    if(execute_CsrPlugin_csr_3858)begin
      if(execute_CSR_READ_OPCODE)begin
        execute_CsrPlugin_illegalAccess = 1'b0;
      end
    end
    if(execute_CsrPlugin_csr_3859)begin
      if(execute_CSR_READ_OPCODE)begin
        execute_CsrPlugin_illegalAccess = 1'b0;
      end
    end
    if(execute_CsrPlugin_csr_3860)begin
      if(execute_CSR_READ_OPCODE)begin
        execute_CsrPlugin_illegalAccess = 1'b0;
      end
    end
    if(execute_CsrPlugin_csr_769)begin
      if(execute_CSR_READ_OPCODE)begin
        execute_CsrPlugin_illegalAccess = 1'b0;
      end
    end
    if(execute_CsrPlugin_csr_836)begin
      execute_CsrPlugin_illegalAccess = 1'b0;
    end
    if(execute_CsrPlugin_csr_772)begin
      execute_CsrPlugin_illegalAccess = 1'b0;
    end
    if(execute_CsrPlugin_csr_773)begin
      execute_CsrPlugin_illegalAccess = 1'b0;
    end
    if(execute_CsrPlugin_csr_833)begin
      execute_CsrPlugin_illegalAccess = 1'b0;
    end
    if(execute_CsrPlugin_csr_832)begin
      execute_CsrPlugin_illegalAccess = 1'b0;
    end
    if(execute_CsrPlugin_csr_834)begin
      if(execute_CSR_READ_OPCODE)begin
        execute_CsrPlugin_illegalAccess = 1'b0;
      end
    end
    if(execute_CsrPlugin_csr_835)begin
      if(execute_CSR_READ_OPCODE)begin
        execute_CsrPlugin_illegalAccess = 1'b0;
      end
    end
    if(execute_CsrPlugin_csr_770)begin
      execute_CsrPlugin_illegalAccess = 1'b0;
    end
    if(execute_CsrPlugin_csr_771)begin
      execute_CsrPlugin_illegalAccess = 1'b0;
    end
    if(execute_CsrPlugin_csr_3073)begin
      if(execute_CSR_READ_OPCODE)begin
        execute_CsrPlugin_illegalAccess = 1'b0;
      end
    end
    if(execute_CsrPlugin_csr_3201)begin
      if(execute_CSR_READ_OPCODE)begin
        execute_CsrPlugin_illegalAccess = 1'b0;
      end
    end
    if(execute_CsrPlugin_csr_324)begin
      execute_CsrPlugin_illegalAccess = 1'b0;
    end
    if(execute_CsrPlugin_csr_260)begin
      execute_CsrPlugin_illegalAccess = 1'b0;
    end
    if(execute_CsrPlugin_csr_261)begin
      execute_CsrPlugin_illegalAccess = 1'b0;
    end
    if(execute_CsrPlugin_csr_321)begin
      execute_CsrPlugin_illegalAccess = 1'b0;
    end
    if(execute_CsrPlugin_csr_320)begin
      execute_CsrPlugin_illegalAccess = 1'b0;
    end
    if(execute_CsrPlugin_csr_322)begin
      execute_CsrPlugin_illegalAccess = 1'b0;
    end
    if(execute_CsrPlugin_csr_323)begin
      execute_CsrPlugin_illegalAccess = 1'b0;
    end
    if(_zz_275)begin
      execute_CsrPlugin_illegalAccess = 1'b1;
    end
    if(((! execute_arbitration_isValid) || (! execute_IS_CSR)))begin
      execute_CsrPlugin_illegalAccess = 1'b0;
    end
  end

  always @ (*) begin
    execute_CsrPlugin_illegalInstruction = 1'b0;
    if((execute_arbitration_isValid && (execute_ENV_CTRL == `EnvCtrlEnum_1_defaultEncoding_XRET)))begin
      if((CsrPlugin_privilege < execute_INSTRUCTION[29 : 28]))begin
        execute_CsrPlugin_illegalInstruction = 1'b1;
      end
    end
  end

  always @ (*) begin
    CsrPlugin_selfException_valid = 1'b0;
    if(_zz_276)begin
      CsrPlugin_selfException_valid = 1'b1;
    end
    if(_zz_277)begin
      CsrPlugin_selfException_valid = 1'b1;
    end
  end

  always @ (*) begin
    CsrPlugin_selfException_payload_code = 4'bxxxx;
    if(_zz_276)begin
      CsrPlugin_selfException_payload_code = 4'b0010;
    end
    if(_zz_277)begin
      case(CsrPlugin_privilege)
        2'b00 : begin
          CsrPlugin_selfException_payload_code = 4'b1000;
        end
        2'b01 : begin
          CsrPlugin_selfException_payload_code = 4'b1001;
        end
        default : begin
          CsrPlugin_selfException_payload_code = 4'b1011;
        end
      endcase
    end
  end

  assign CsrPlugin_selfException_payload_badAddr = execute_INSTRUCTION;
  always @ (*) begin
    execute_CsrPlugin_writeInstruction = ((execute_arbitration_isValid && execute_IS_CSR) && execute_CSR_WRITE_OPCODE);
    if(_zz_275)begin
      execute_CsrPlugin_writeInstruction = 1'b0;
    end
  end

  always @ (*) begin
    execute_CsrPlugin_readInstruction = ((execute_arbitration_isValid && execute_IS_CSR) && execute_CSR_READ_OPCODE);
    if(_zz_275)begin
      execute_CsrPlugin_readInstruction = 1'b0;
    end
  end

  assign execute_CsrPlugin_writeEnable = (execute_CsrPlugin_writeInstruction && (! execute_arbitration_isStuck));
  assign execute_CsrPlugin_readEnable = (execute_CsrPlugin_readInstruction && (! execute_arbitration_isStuck));
  always @ (*) begin
    execute_CsrPlugin_readToWriteData = execute_CsrPlugin_readData;
    if(execute_CsrPlugin_csr_836)begin
      execute_CsrPlugin_readToWriteData[9 : 9] = CsrPlugin_sip_SEIP_SOFT;
    end
    if(execute_CsrPlugin_csr_324)begin
      execute_CsrPlugin_readToWriteData[9 : 9] = CsrPlugin_sip_SEIP_SOFT;
    end
  end

  always @ (*) begin
    case(_zz_302)
      1'b0 : begin
        execute_CsrPlugin_writeData = execute_SRC1;
      end
      default : begin
        execute_CsrPlugin_writeData = (execute_INSTRUCTION[12] ? (execute_CsrPlugin_readToWriteData & (~ execute_SRC1)) : (execute_CsrPlugin_readToWriteData | execute_SRC1));
      end
    endcase
  end

  assign execute_CsrPlugin_csrAddress = execute_INSTRUCTION[31 : 20];
  assign execute_BranchPlugin_eq = (execute_SRC1 == execute_SRC2);
  assign _zz_136 = execute_INSTRUCTION[14 : 12];
  always @ (*) begin
    if((_zz_136 == 3'b000)) begin
        _zz_137 = execute_BranchPlugin_eq;
    end else if((_zz_136 == 3'b001)) begin
        _zz_137 = (! execute_BranchPlugin_eq);
    end else if((((_zz_136 & 3'b101) == 3'b101))) begin
        _zz_137 = (! execute_SRC_LESS);
    end else begin
        _zz_137 = execute_SRC_LESS;
    end
  end

  always @ (*) begin
    case(execute_BRANCH_CTRL)
      `BranchCtrlEnum_defaultEncoding_INC : begin
        _zz_138 = 1'b0;
      end
      `BranchCtrlEnum_defaultEncoding_JAL : begin
        _zz_138 = 1'b1;
      end
      `BranchCtrlEnum_defaultEncoding_JALR : begin
        _zz_138 = 1'b1;
      end
      default : begin
        _zz_138 = _zz_137;
      end
    endcase
  end

  assign execute_BranchPlugin_branch_src1 = ((execute_BRANCH_CTRL == `BranchCtrlEnum_defaultEncoding_JALR) ? execute_RS1 : execute_PC);
  assign _zz_139 = _zz_397[19];
  always @ (*) begin
    _zz_140[10] = _zz_139;
    _zz_140[9] = _zz_139;
    _zz_140[8] = _zz_139;
    _zz_140[7] = _zz_139;
    _zz_140[6] = _zz_139;
    _zz_140[5] = _zz_139;
    _zz_140[4] = _zz_139;
    _zz_140[3] = _zz_139;
    _zz_140[2] = _zz_139;
    _zz_140[1] = _zz_139;
    _zz_140[0] = _zz_139;
  end

  assign _zz_141 = _zz_398[11];
  always @ (*) begin
    _zz_142[19] = _zz_141;
    _zz_142[18] = _zz_141;
    _zz_142[17] = _zz_141;
    _zz_142[16] = _zz_141;
    _zz_142[15] = _zz_141;
    _zz_142[14] = _zz_141;
    _zz_142[13] = _zz_141;
    _zz_142[12] = _zz_141;
    _zz_142[11] = _zz_141;
    _zz_142[10] = _zz_141;
    _zz_142[9] = _zz_141;
    _zz_142[8] = _zz_141;
    _zz_142[7] = _zz_141;
    _zz_142[6] = _zz_141;
    _zz_142[5] = _zz_141;
    _zz_142[4] = _zz_141;
    _zz_142[3] = _zz_141;
    _zz_142[2] = _zz_141;
    _zz_142[1] = _zz_141;
    _zz_142[0] = _zz_141;
  end

  assign _zz_143 = _zz_399[11];
  always @ (*) begin
    _zz_144[18] = _zz_143;
    _zz_144[17] = _zz_143;
    _zz_144[16] = _zz_143;
    _zz_144[15] = _zz_143;
    _zz_144[14] = _zz_143;
    _zz_144[13] = _zz_143;
    _zz_144[12] = _zz_143;
    _zz_144[11] = _zz_143;
    _zz_144[10] = _zz_143;
    _zz_144[9] = _zz_143;
    _zz_144[8] = _zz_143;
    _zz_144[7] = _zz_143;
    _zz_144[6] = _zz_143;
    _zz_144[5] = _zz_143;
    _zz_144[4] = _zz_143;
    _zz_144[3] = _zz_143;
    _zz_144[2] = _zz_143;
    _zz_144[1] = _zz_143;
    _zz_144[0] = _zz_143;
  end

  always @ (*) begin
    case(execute_BRANCH_CTRL)
      `BranchCtrlEnum_defaultEncoding_JAL : begin
        _zz_145 = {{_zz_140,{{{execute_INSTRUCTION[31],execute_INSTRUCTION[19 : 12]},execute_INSTRUCTION[20]},execute_INSTRUCTION[30 : 21]}},1'b0};
      end
      `BranchCtrlEnum_defaultEncoding_JALR : begin
        _zz_145 = {_zz_142,execute_INSTRUCTION[31 : 20]};
      end
      default : begin
        _zz_145 = {{_zz_144,{{{execute_INSTRUCTION[31],execute_INSTRUCTION[7]},execute_INSTRUCTION[30 : 25]},execute_INSTRUCTION[11 : 8]}},1'b0};
      end
    endcase
  end

  assign execute_BranchPlugin_branch_src2 = _zz_145;
  assign execute_BranchPlugin_branchAdder = (execute_BranchPlugin_branch_src1 + execute_BranchPlugin_branch_src2);
  assign BranchPlugin_jumpInterface_valid = ((memory_arbitration_isValid && memory_BRANCH_DO) && (! 1'b0));
  assign BranchPlugin_jumpInterface_payload = memory_BRANCH_CALC;
  assign BranchPlugin_branchExceptionPort_valid = ((memory_arbitration_isValid && memory_BRANCH_DO) && BranchPlugin_jumpInterface_payload[1]);
  assign BranchPlugin_branchExceptionPort_payload_code = 4'b0000;
  assign BranchPlugin_branchExceptionPort_payload_badAddr = BranchPlugin_jumpInterface_payload;
  assign execute_AesPlugin_byteSel = execute_INSTRUCTION[29 : 28];
  assign execute_AesPlugin_bankSel = (execute_INSTRUCTION[25] && (! execute_INSTRUCTION[26]));
  assign execute_AesPlugin_romAddress = {execute_AesPlugin_bankSel,_zz_232};
  assign _zz_146 = (! memory_arbitration_isStuck);
  assign memory_AesPlugin_rom_data = _zz_208;
  assign memory_AesPlugin_rom_bytes_0 = memory_AesPlugin_rom_data[7 : 0];
  assign memory_AesPlugin_rom_bytes_1 = memory_AesPlugin_rom_data[15 : 8];
  assign memory_AesPlugin_rom_bytes_2 = memory_AesPlugin_rom_data[23 : 16];
  assign memory_AesPlugin_rom_bytes_3 = memory_AesPlugin_rom_data[31 : 24];
  assign memory_AesPlugin_rom_remap_0_0 = 2'b10;
  assign memory_AesPlugin_rom_remap_0_1 = 2'b00;
  assign memory_AesPlugin_rom_remap_0_2 = 2'b00;
  assign memory_AesPlugin_rom_remap_0_3 = 2'b01;
  assign memory_AesPlugin_rom_remap_1_0 = 2'b00;
  assign memory_AesPlugin_rom_remap_1_1 = 2'b00;
  assign memory_AesPlugin_rom_remap_1_2 = 2'b00;
  assign memory_AesPlugin_rom_remap_1_3 = 2'b00;
  assign memory_AesPlugin_rom_remap_2_0 = 2'b11;
  assign memory_AesPlugin_rom_remap_2_1 = 2'b10;
  assign memory_AesPlugin_rom_remap_2_2 = 2'b01;
  assign memory_AesPlugin_rom_remap_2_3 = 2'b00;
  assign memory_AesPlugin_rom_remap_3_0 = 2'b11;
  assign memory_AesPlugin_rom_remap_3_1 = 2'b11;
  assign memory_AesPlugin_rom_remap_3_2 = 2'b11;
  assign memory_AesPlugin_rom_remap_3_3 = 2'b11;
  assign memory_AesPlugin_rom_address = {memory_INSTRUCTION[25],memory_INSTRUCTION[26]};
  assign memory_AesPlugin_rom_output_0 = _zz_233;
  assign memory_AesPlugin_rom_output_1 = _zz_234;
  assign memory_AesPlugin_rom_output_2 = _zz_235;
  assign memory_AesPlugin_rom_output_3 = _zz_236;
  always @ (*) begin
    memory_AesPlugin_wordDesuffle_zero = 4'b0000;
    if(memory_INSTRUCTION[26])begin
      memory_AesPlugin_wordDesuffle_zero = 4'b1111;
      memory_AesPlugin_wordDesuffle_zero[memory_AesPlugin_wordDesuffle_byteSel] = 1'b0;
    end
  end

  assign memory_AesPlugin_wordDesuffle_byteSel = memory_INSTRUCTION[29 : 28];
  always @ (*) begin
    case(memory_AesPlugin_wordDesuffle_byteSel)
      2'b00 : begin
        memory_AesPlugin_wordDesuffle_sel_0 = memory_AesPlugin_rom_output_3;
      end
      2'b01 : begin
        memory_AesPlugin_wordDesuffle_sel_0 = memory_AesPlugin_rom_output_0;
      end
      2'b10 : begin
        memory_AesPlugin_wordDesuffle_sel_0 = memory_AesPlugin_rom_output_1;
      end
      default : begin
        memory_AesPlugin_wordDesuffle_sel_0 = memory_AesPlugin_rom_output_2;
      end
    endcase
  end

  always @ (*) begin
    case(memory_AesPlugin_wordDesuffle_byteSel)
      2'b00 : begin
        memory_AesPlugin_wordDesuffle_sel_1 = memory_AesPlugin_rom_output_2;
      end
      2'b01 : begin
        memory_AesPlugin_wordDesuffle_sel_1 = memory_AesPlugin_rom_output_3;
      end
      2'b10 : begin
        memory_AesPlugin_wordDesuffle_sel_1 = memory_AesPlugin_rom_output_0;
      end
      default : begin
        memory_AesPlugin_wordDesuffle_sel_1 = memory_AesPlugin_rom_output_1;
      end
    endcase
  end

  always @ (*) begin
    case(memory_AesPlugin_wordDesuffle_byteSel)
      2'b00 : begin
        memory_AesPlugin_wordDesuffle_sel_2 = memory_AesPlugin_rom_output_1;
      end
      2'b01 : begin
        memory_AesPlugin_wordDesuffle_sel_2 = memory_AesPlugin_rom_output_2;
      end
      2'b10 : begin
        memory_AesPlugin_wordDesuffle_sel_2 = memory_AesPlugin_rom_output_3;
      end
      default : begin
        memory_AesPlugin_wordDesuffle_sel_2 = memory_AesPlugin_rom_output_0;
      end
    endcase
  end

  always @ (*) begin
    case(memory_AesPlugin_wordDesuffle_byteSel)
      2'b00 : begin
        memory_AesPlugin_wordDesuffle_sel_3 = memory_AesPlugin_rom_output_0;
      end
      2'b01 : begin
        memory_AesPlugin_wordDesuffle_sel_3 = memory_AesPlugin_rom_output_1;
      end
      2'b10 : begin
        memory_AesPlugin_wordDesuffle_sel_3 = memory_AesPlugin_rom_output_2;
      end
      default : begin
        memory_AesPlugin_wordDesuffle_sel_3 = memory_AesPlugin_rom_output_3;
      end
    endcase
  end

  always @ (*) begin
    memory_AesPlugin_wordDesuffle_output_0 = _zz_237;
    if(memory_AesPlugin_wordDesuffle_zero[0])begin
      memory_AesPlugin_wordDesuffle_output_0 = 8'h0;
    end
  end

  always @ (*) begin
    memory_AesPlugin_wordDesuffle_output_1 = _zz_238;
    if(memory_AesPlugin_wordDesuffle_zero[1])begin
      memory_AesPlugin_wordDesuffle_output_1 = 8'h0;
    end
  end

  always @ (*) begin
    memory_AesPlugin_wordDesuffle_output_2 = _zz_239;
    if(memory_AesPlugin_wordDesuffle_zero[2])begin
      memory_AesPlugin_wordDesuffle_output_2 = 8'h0;
    end
  end

  always @ (*) begin
    memory_AesPlugin_wordDesuffle_output_3 = _zz_240;
    if(memory_AesPlugin_wordDesuffle_zero[3])begin
      memory_AesPlugin_wordDesuffle_output_3 = 8'h0;
    end
  end

  assign memory_AesPlugin_xored = ({memory_AesPlugin_wordDesuffle_output_3,{memory_AesPlugin_wordDesuffle_output_2,{memory_AesPlugin_wordDesuffle_output_1,memory_AesPlugin_wordDesuffle_output_0}}} ^ memory_RS1);
  always @ (*) begin
    debug_bus_cmd_ready = 1'b1;
    if(debug_bus_cmd_valid)begin
      case(_zz_278)
        6'h01 : begin
          if(debug_bus_cmd_payload_wr)begin
            debug_bus_cmd_ready = IBusCachedPlugin_injectionPort_ready;
          end
        end
        default : begin
        end
      endcase
    end
  end

  always @ (*) begin
    debug_bus_rsp_data = DebugPlugin_busReadDataReg;
    if((! _zz_147))begin
      debug_bus_rsp_data[0] = DebugPlugin_resetIt;
      debug_bus_rsp_data[1] = DebugPlugin_haltIt;
      debug_bus_rsp_data[2] = DebugPlugin_isPipBusy;
      debug_bus_rsp_data[3] = DebugPlugin_haltedByBreak;
      debug_bus_rsp_data[4] = DebugPlugin_stepIt;
    end
  end

  always @ (*) begin
    IBusCachedPlugin_injectionPort_valid = 1'b0;
    if(debug_bus_cmd_valid)begin
      case(_zz_278)
        6'h01 : begin
          if(debug_bus_cmd_payload_wr)begin
            IBusCachedPlugin_injectionPort_valid = 1'b1;
          end
        end
        default : begin
        end
      endcase
    end
  end

  assign IBusCachedPlugin_injectionPort_payload = debug_bus_cmd_payload_data;
  assign DebugPlugin_allowEBreak = (CsrPlugin_privilege == 2'b11);
  assign debug_resetOut = DebugPlugin_resetIt_regNext;
  assign _zz_31 = _zz_43;
  assign _zz_19 = decode_ALU_CTRL;
  assign _zz_17 = _zz_42;
  assign _zz_32 = decode_to_execute_ALU_CTRL;
  assign _zz_29 = _zz_41;
  assign _zz_16 = decode_ALU_BITWISE_CTRL;
  assign _zz_14 = _zz_40;
  assign _zz_33 = decode_to_execute_ALU_BITWISE_CTRL;
  assign _zz_13 = decode_SHIFT_CTRL;
  assign _zz_11 = _zz_39;
  assign _zz_26 = decode_to_execute_SHIFT_CTRL;
  assign _zz_10 = decode_ENV_CTRL;
  assign _zz_7 = execute_ENV_CTRL;
  assign _zz_5 = memory_ENV_CTRL;
  assign _zz_8 = _zz_38;
  assign _zz_22 = decode_to_execute_ENV_CTRL;
  assign _zz_21 = execute_to_memory_ENV_CTRL;
  assign _zz_23 = memory_to_writeBack_ENV_CTRL;
  assign _zz_3 = decode_BRANCH_CTRL;
  assign _zz_1 = _zz_37;
  assign _zz_20 = decode_to_execute_BRANCH_CTRL;
  assign decode_arbitration_isFlushed = (({writeBack_arbitration_flushNext,{memory_arbitration_flushNext,execute_arbitration_flushNext}} != 3'b000) || ({writeBack_arbitration_flushIt,{memory_arbitration_flushIt,{execute_arbitration_flushIt,decode_arbitration_flushIt}}} != 4'b0000));
  assign execute_arbitration_isFlushed = (({writeBack_arbitration_flushNext,memory_arbitration_flushNext} != 2'b00) || ({writeBack_arbitration_flushIt,{memory_arbitration_flushIt,execute_arbitration_flushIt}} != 3'b000));
  assign memory_arbitration_isFlushed = ((writeBack_arbitration_flushNext != 1'b0) || ({writeBack_arbitration_flushIt,memory_arbitration_flushIt} != 2'b00));
  assign writeBack_arbitration_isFlushed = (1'b0 || (writeBack_arbitration_flushIt != 1'b0));
  assign decode_arbitration_isStuckByOthers = (decode_arbitration_haltByOther || (((1'b0 || execute_arbitration_isStuck) || memory_arbitration_isStuck) || writeBack_arbitration_isStuck));
  assign decode_arbitration_isStuck = (decode_arbitration_haltItself || decode_arbitration_isStuckByOthers);
  assign decode_arbitration_isMoving = ((! decode_arbitration_isStuck) && (! decode_arbitration_removeIt));
  assign decode_arbitration_isFiring = ((decode_arbitration_isValid && (! decode_arbitration_isStuck)) && (! decode_arbitration_removeIt));
  assign execute_arbitration_isStuckByOthers = (execute_arbitration_haltByOther || ((1'b0 || memory_arbitration_isStuck) || writeBack_arbitration_isStuck));
  assign execute_arbitration_isStuck = (execute_arbitration_haltItself || execute_arbitration_isStuckByOthers);
  assign execute_arbitration_isMoving = ((! execute_arbitration_isStuck) && (! execute_arbitration_removeIt));
  assign execute_arbitration_isFiring = ((execute_arbitration_isValid && (! execute_arbitration_isStuck)) && (! execute_arbitration_removeIt));
  assign memory_arbitration_isStuckByOthers = (memory_arbitration_haltByOther || (1'b0 || writeBack_arbitration_isStuck));
  assign memory_arbitration_isStuck = (memory_arbitration_haltItself || memory_arbitration_isStuckByOthers);
  assign memory_arbitration_isMoving = ((! memory_arbitration_isStuck) && (! memory_arbitration_removeIt));
  assign memory_arbitration_isFiring = ((memory_arbitration_isValid && (! memory_arbitration_isStuck)) && (! memory_arbitration_removeIt));
  assign writeBack_arbitration_isStuckByOthers = (writeBack_arbitration_haltByOther || 1'b0);
  assign writeBack_arbitration_isStuck = (writeBack_arbitration_haltItself || writeBack_arbitration_isStuckByOthers);
  assign writeBack_arbitration_isMoving = ((! writeBack_arbitration_isStuck) && (! writeBack_arbitration_removeIt));
  assign writeBack_arbitration_isFiring = ((writeBack_arbitration_isValid && (! writeBack_arbitration_isStuck)) && (! writeBack_arbitration_removeIt));
  always @ (*) begin
    IBusCachedPlugin_injectionPort_ready = 1'b0;
    case(_zz_148)
      3'b100 : begin
        IBusCachedPlugin_injectionPort_ready = 1'b1;
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    _zz_149 = 32'h0;
    if(execute_CsrPlugin_csr_768)begin
      _zz_149[19 : 19] = MmuPlugin_status_mxr;
      _zz_149[18 : 18] = MmuPlugin_status_sum;
      _zz_149[17 : 17] = MmuPlugin_status_mprv;
      _zz_149[12 : 11] = CsrPlugin_mstatus_MPP;
      _zz_149[7 : 7] = CsrPlugin_mstatus_MPIE;
      _zz_149[3 : 3] = CsrPlugin_mstatus_MIE;
      _zz_149[8 : 8] = CsrPlugin_sstatus_SPP;
      _zz_149[5 : 5] = CsrPlugin_sstatus_SPIE;
      _zz_149[1 : 1] = CsrPlugin_sstatus_SIE;
    end
  end

  always @ (*) begin
    _zz_150 = 32'h0;
    if(execute_CsrPlugin_csr_256)begin
      _zz_150[19 : 19] = MmuPlugin_status_mxr;
      _zz_150[18 : 18] = MmuPlugin_status_sum;
      _zz_150[17 : 17] = MmuPlugin_status_mprv;
      _zz_150[8 : 8] = CsrPlugin_sstatus_SPP;
      _zz_150[5 : 5] = CsrPlugin_sstatus_SPIE;
      _zz_150[1 : 1] = CsrPlugin_sstatus_SIE;
    end
  end

  always @ (*) begin
    _zz_151 = 32'h0;
    if(execute_CsrPlugin_csr_384)begin
      _zz_151[31 : 31] = MmuPlugin_satp_mode;
      _zz_151[30 : 22] = MmuPlugin_satp_asid;
      _zz_151[19 : 0] = MmuPlugin_satp_ppn;
    end
  end

  always @ (*) begin
    _zz_152 = 32'h0;
    if(execute_CsrPlugin_csr_3860)begin
      _zz_152[0 : 0] = 1'b1;
    end
  end

  always @ (*) begin
    _zz_153 = 32'h0;
    if(execute_CsrPlugin_csr_769)begin
      _zz_153[31 : 30] = CsrPlugin_misa_base;
      _zz_153[25 : 0] = CsrPlugin_misa_extensions;
    end
  end

  always @ (*) begin
    _zz_154 = 32'h0;
    if(execute_CsrPlugin_csr_836)begin
      _zz_154[11 : 11] = CsrPlugin_mip_MEIP;
      _zz_154[7 : 7] = CsrPlugin_mip_MTIP;
      _zz_154[3 : 3] = CsrPlugin_mip_MSIP;
      _zz_154[5 : 5] = CsrPlugin_sip_STIP;
      _zz_154[1 : 1] = CsrPlugin_sip_SSIP;
      _zz_154[9 : 9] = CsrPlugin_sip_SEIP_OR;
    end
  end

  always @ (*) begin
    _zz_155 = 32'h0;
    if(execute_CsrPlugin_csr_772)begin
      _zz_155[11 : 11] = CsrPlugin_mie_MEIE;
      _zz_155[7 : 7] = CsrPlugin_mie_MTIE;
      _zz_155[3 : 3] = CsrPlugin_mie_MSIE;
      _zz_155[9 : 9] = CsrPlugin_sie_SEIE;
      _zz_155[5 : 5] = CsrPlugin_sie_STIE;
      _zz_155[1 : 1] = CsrPlugin_sie_SSIE;
    end
  end

  always @ (*) begin
    _zz_156 = 32'h0;
    if(execute_CsrPlugin_csr_773)begin
      _zz_156[31 : 2] = CsrPlugin_mtvec_base;
      _zz_156[1 : 0] = CsrPlugin_mtvec_mode;
    end
  end

  always @ (*) begin
    _zz_157 = 32'h0;
    if(execute_CsrPlugin_csr_833)begin
      _zz_157[31 : 0] = CsrPlugin_mepc;
    end
  end

  always @ (*) begin
    _zz_158 = 32'h0;
    if(execute_CsrPlugin_csr_832)begin
      _zz_158[31 : 0] = CsrPlugin_mscratch;
    end
  end

  always @ (*) begin
    _zz_159 = 32'h0;
    if(execute_CsrPlugin_csr_834)begin
      _zz_159[31 : 31] = CsrPlugin_mcause_interrupt;
      _zz_159[3 : 0] = CsrPlugin_mcause_exceptionCode;
    end
  end

  always @ (*) begin
    _zz_160 = 32'h0;
    if(execute_CsrPlugin_csr_835)begin
      _zz_160[31 : 0] = CsrPlugin_mtval;
    end
  end

  always @ (*) begin
    _zz_161 = 32'h0;
    if(execute_CsrPlugin_csr_770)begin
      _zz_161[0 : 0] = CsrPlugin_medeleg_IAM;
      _zz_161[1 : 1] = CsrPlugin_medeleg_IAF;
      _zz_161[2 : 2] = CsrPlugin_medeleg_II;
      _zz_161[4 : 4] = CsrPlugin_medeleg_LAM;
      _zz_161[5 : 5] = CsrPlugin_medeleg_LAF;
      _zz_161[6 : 6] = CsrPlugin_medeleg_SAM;
      _zz_161[7 : 7] = CsrPlugin_medeleg_SAF;
      _zz_161[8 : 8] = CsrPlugin_medeleg_EU;
      _zz_161[9 : 9] = CsrPlugin_medeleg_ES;
      _zz_161[12 : 12] = CsrPlugin_medeleg_IPF;
      _zz_161[13 : 13] = CsrPlugin_medeleg_LPF;
      _zz_161[15 : 15] = CsrPlugin_medeleg_SPF;
    end
  end

  always @ (*) begin
    _zz_162 = 32'h0;
    if(execute_CsrPlugin_csr_771)begin
      _zz_162[9 : 9] = CsrPlugin_mideleg_SE;
      _zz_162[5 : 5] = CsrPlugin_mideleg_ST;
      _zz_162[1 : 1] = CsrPlugin_mideleg_SS;
    end
  end

  always @ (*) begin
    _zz_163 = 32'h0;
    if(execute_CsrPlugin_csr_3073)begin
      _zz_163[31 : 0] = utime[31 : 0];
    end
  end

  always @ (*) begin
    _zz_164 = 32'h0;
    if(execute_CsrPlugin_csr_3201)begin
      _zz_164[31 : 0] = utime[63 : 32];
    end
  end

  always @ (*) begin
    _zz_165 = 32'h0;
    if(execute_CsrPlugin_csr_324)begin
      _zz_165[5 : 5] = CsrPlugin_sip_STIP;
      _zz_165[1 : 1] = CsrPlugin_sip_SSIP;
      _zz_165[9 : 9] = CsrPlugin_sip_SEIP_OR;
    end
  end

  always @ (*) begin
    _zz_166 = 32'h0;
    if(execute_CsrPlugin_csr_260)begin
      _zz_166[9 : 9] = CsrPlugin_sie_SEIE;
      _zz_166[5 : 5] = CsrPlugin_sie_STIE;
      _zz_166[1 : 1] = CsrPlugin_sie_SSIE;
    end
  end

  always @ (*) begin
    _zz_167 = 32'h0;
    if(execute_CsrPlugin_csr_261)begin
      _zz_167[31 : 2] = CsrPlugin_stvec_base;
      _zz_167[1 : 0] = CsrPlugin_stvec_mode;
    end
  end

  always @ (*) begin
    _zz_168 = 32'h0;
    if(execute_CsrPlugin_csr_321)begin
      _zz_168[31 : 0] = CsrPlugin_sepc;
    end
  end

  always @ (*) begin
    _zz_169 = 32'h0;
    if(execute_CsrPlugin_csr_320)begin
      _zz_169[31 : 0] = CsrPlugin_sscratch;
    end
  end

  always @ (*) begin
    _zz_170 = 32'h0;
    if(execute_CsrPlugin_csr_322)begin
      _zz_170[31 : 31] = CsrPlugin_scause_interrupt;
      _zz_170[3 : 0] = CsrPlugin_scause_exceptionCode;
    end
  end

  always @ (*) begin
    _zz_171 = 32'h0;
    if(execute_CsrPlugin_csr_323)begin
      _zz_171[31 : 0] = CsrPlugin_stval;
    end
  end

  assign execute_CsrPlugin_readData = (((((_zz_149 | _zz_150) | (_zz_151 | _zz_676)) | ((_zz_677 | _zz_678) | (_zz_152 | _zz_153))) | (((_zz_154 | _zz_155) | (_zz_156 | _zz_157)) | ((_zz_158 | _zz_159) | (_zz_160 | _zz_161)))) | ((((_zz_162 | _zz_163) | (_zz_164 | _zz_165)) | ((_zz_166 | _zz_167) | (_zz_168 | _zz_169))) | (_zz_170 | _zz_171)));
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      MmuPlugin_status_sum <= 1'b0;
      MmuPlugin_status_mxr <= 1'b0;
      MmuPlugin_status_mprv <= 1'b0;
      MmuPlugin_satp_mode <= 1'b0;
      MmuPlugin_ports_0_cache_0_valid <= 1'b0;
      MmuPlugin_ports_0_cache_1_valid <= 1'b0;
      MmuPlugin_ports_0_cache_2_valid <= 1'b0;
      MmuPlugin_ports_0_cache_3_valid <= 1'b0;
      MmuPlugin_ports_0_dirty <= 1'b0;
      MmuPlugin_ports_0_entryToReplace_value <= 2'b00;
      MmuPlugin_ports_1_cache_0_valid <= 1'b0;
      MmuPlugin_ports_1_cache_1_valid <= 1'b0;
      MmuPlugin_ports_1_cache_2_valid <= 1'b0;
      MmuPlugin_ports_1_cache_3_valid <= 1'b0;
      MmuPlugin_ports_1_dirty <= 1'b0;
      MmuPlugin_ports_1_entryToReplace_value <= 2'b00;
      MmuPlugin_shared_state_1 <= `MmuPlugin_shared_State_1_defaultEncoding_IDLE;
      MmuPlugin_shared_dBusRspStaged_valid <= 1'b0;
      IBusCachedPlugin_fetchPc_pcReg <= 32'h10a00000;
      IBusCachedPlugin_fetchPc_correctionReg <= 1'b0;
      IBusCachedPlugin_fetchPc_booted <= 1'b0;
      IBusCachedPlugin_fetchPc_inc <= 1'b0;
      _zz_73 <= 1'b0;
      _zz_75 <= 1'b0;
      IBusCachedPlugin_injector_nextPcCalc_valids_0 <= 1'b0;
      IBusCachedPlugin_injector_nextPcCalc_valids_1 <= 1'b0;
      IBusCachedPlugin_injector_nextPcCalc_valids_2 <= 1'b0;
      IBusCachedPlugin_injector_nextPcCalc_valids_3 <= 1'b0;
      IBusCachedPlugin_injector_nextPcCalc_valids_4 <= 1'b0;
      IBusCachedPlugin_rspCounter <= _zz_77;
      IBusCachedPlugin_rspCounter <= 32'h0;
      dataCache_2_io_mem_cmd_s2mPipe_rValid <= 1'b0;
      dBus_rsp_valid_regNext <= 1'b0;
      DBusCachedPlugin_rspCounter <= _zz_78;
      DBusCachedPlugin_rspCounter <= 32'h0;
      _zz_101 <= 1'b1;
      _zz_113 <= 1'b0;
      memory_MulDivIterativePlugin_div_counter_value <= 6'h0;
      _zz_127 <= 2'b11;
      CsrPlugin_mstatus_MIE <= 1'b0;
      CsrPlugin_mstatus_MPIE <= 1'b0;
      CsrPlugin_mstatus_MPP <= 2'b11;
      CsrPlugin_mie_MEIE <= 1'b0;
      CsrPlugin_mie_MTIE <= 1'b0;
      CsrPlugin_mie_MSIE <= 1'b0;
      CsrPlugin_medeleg_IAM <= 1'b0;
      CsrPlugin_medeleg_IAF <= 1'b0;
      CsrPlugin_medeleg_II <= 1'b0;
      CsrPlugin_medeleg_LAM <= 1'b0;
      CsrPlugin_medeleg_LAF <= 1'b0;
      CsrPlugin_medeleg_SAM <= 1'b0;
      CsrPlugin_medeleg_SAF <= 1'b0;
      CsrPlugin_medeleg_EU <= 1'b0;
      CsrPlugin_medeleg_ES <= 1'b0;
      CsrPlugin_medeleg_IPF <= 1'b0;
      CsrPlugin_medeleg_LPF <= 1'b0;
      CsrPlugin_medeleg_SPF <= 1'b0;
      CsrPlugin_mideleg_ST <= 1'b0;
      CsrPlugin_mideleg_SE <= 1'b0;
      CsrPlugin_mideleg_SS <= 1'b0;
      CsrPlugin_sstatus_SIE <= 1'b0;
      CsrPlugin_sstatus_SPIE <= 1'b0;
      CsrPlugin_sstatus_SPP <= 1'b1;
      CsrPlugin_sip_SEIP_SOFT <= 1'b0;
      CsrPlugin_sip_STIP <= 1'b0;
      CsrPlugin_sip_SSIP <= 1'b0;
      CsrPlugin_sie_SEIE <= 1'b0;
      CsrPlugin_sie_STIE <= 1'b0;
      CsrPlugin_sie_SSIE <= 1'b0;
      CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_decode <= 1'b0;
      CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_execute <= 1'b0;
      CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_memory <= 1'b0;
      CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_writeBack <= 1'b0;
      CsrPlugin_interrupt_valid <= 1'b0;
      CsrPlugin_lastStageWasWfi <= 1'b0;
      CsrPlugin_pipelineLiberator_pcValids_0 <= 1'b0;
      CsrPlugin_pipelineLiberator_pcValids_1 <= 1'b0;
      CsrPlugin_pipelineLiberator_pcValids_2 <= 1'b0;
      CsrPlugin_hadException <= 1'b0;
      execute_CsrPlugin_wfiWake <= 1'b0;
      execute_arbitration_isValid <= 1'b0;
      memory_arbitration_isValid <= 1'b0;
      writeBack_arbitration_isValid <= 1'b0;
      _zz_148 <= 3'b000;
      execute_to_memory_IS_DBUS_SHARING <= 1'b0;
      memory_to_writeBack_IS_DBUS_SHARING <= 1'b0;
    end else begin
      if((! IBusCachedPlugin_mmuBus_cmd_1_isStuck))begin
        MmuPlugin_ports_0_dirty <= 1'b0;
      end
      MmuPlugin_ports_0_entryToReplace_value <= MmuPlugin_ports_0_entryToReplace_valueNext;
      if(contextSwitching)begin
        if(MmuPlugin_ports_0_cache_0_exception)begin
          MmuPlugin_ports_0_cache_0_valid <= 1'b0;
        end
        if(MmuPlugin_ports_0_cache_1_exception)begin
          MmuPlugin_ports_0_cache_1_valid <= 1'b0;
        end
        if(MmuPlugin_ports_0_cache_2_exception)begin
          MmuPlugin_ports_0_cache_2_valid <= 1'b0;
        end
        if(MmuPlugin_ports_0_cache_3_exception)begin
          MmuPlugin_ports_0_cache_3_valid <= 1'b0;
        end
      end
      if((! DBusCachedPlugin_mmuBus_cmd_1_isStuck))begin
        MmuPlugin_ports_1_dirty <= 1'b0;
      end
      MmuPlugin_ports_1_entryToReplace_value <= MmuPlugin_ports_1_entryToReplace_valueNext;
      if(contextSwitching)begin
        if(MmuPlugin_ports_1_cache_0_exception)begin
          MmuPlugin_ports_1_cache_0_valid <= 1'b0;
        end
        if(MmuPlugin_ports_1_cache_1_exception)begin
          MmuPlugin_ports_1_cache_1_valid <= 1'b0;
        end
        if(MmuPlugin_ports_1_cache_2_exception)begin
          MmuPlugin_ports_1_cache_2_valid <= 1'b0;
        end
        if(MmuPlugin_ports_1_cache_3_exception)begin
          MmuPlugin_ports_1_cache_3_valid <= 1'b0;
        end
      end
      MmuPlugin_shared_dBusRspStaged_valid <= MmuPlugin_dBusAccess_rsp_valid;
      case(MmuPlugin_shared_state_1)
        `MmuPlugin_shared_State_1_defaultEncoding_IDLE : begin
          if(_zz_279)begin
            MmuPlugin_shared_state_1 <= `MmuPlugin_shared_State_1_defaultEncoding_L1_CMD;
          end
        end
        `MmuPlugin_shared_State_1_defaultEncoding_L1_CMD : begin
          if(MmuPlugin_dBusAccess_cmd_ready)begin
            MmuPlugin_shared_state_1 <= `MmuPlugin_shared_State_1_defaultEncoding_L1_RSP;
          end
        end
        `MmuPlugin_shared_State_1_defaultEncoding_L1_RSP : begin
          if(MmuPlugin_shared_dBusRspStaged_valid)begin
            MmuPlugin_shared_state_1 <= `MmuPlugin_shared_State_1_defaultEncoding_L0_CMD;
            if((MmuPlugin_shared_dBusRsp_leaf || MmuPlugin_shared_dBusRsp_exception))begin
              MmuPlugin_shared_state_1 <= `MmuPlugin_shared_State_1_defaultEncoding_IDLE;
            end
            if(MmuPlugin_shared_dBusRspStaged_payload_redo)begin
              MmuPlugin_shared_state_1 <= `MmuPlugin_shared_State_1_defaultEncoding_L1_CMD;
            end
          end
        end
        `MmuPlugin_shared_State_1_defaultEncoding_L0_CMD : begin
          if(MmuPlugin_dBusAccess_cmd_ready)begin
            MmuPlugin_shared_state_1 <= `MmuPlugin_shared_State_1_defaultEncoding_L0_RSP;
          end
        end
        default : begin
          if(MmuPlugin_shared_dBusRspStaged_valid)begin
            MmuPlugin_shared_state_1 <= `MmuPlugin_shared_State_1_defaultEncoding_IDLE;
            if(MmuPlugin_shared_dBusRspStaged_payload_redo)begin
              MmuPlugin_shared_state_1 <= `MmuPlugin_shared_State_1_defaultEncoding_L0_CMD;
            end
          end
        end
      endcase
      if(_zz_259)begin
        if(_zz_260)begin
          MmuPlugin_ports_0_dirty <= 1'b1;
          if(_zz_280)begin
            MmuPlugin_ports_0_cache_0_valid <= 1'b1;
          end
          if(_zz_281)begin
            MmuPlugin_ports_0_cache_1_valid <= 1'b1;
          end
          if(_zz_282)begin
            MmuPlugin_ports_0_cache_2_valid <= 1'b1;
          end
          if(_zz_283)begin
            MmuPlugin_ports_0_cache_3_valid <= 1'b1;
          end
        end
        if(_zz_261)begin
          MmuPlugin_ports_1_dirty <= 1'b1;
          if(_zz_284)begin
            MmuPlugin_ports_1_cache_0_valid <= 1'b1;
          end
          if(_zz_285)begin
            MmuPlugin_ports_1_cache_1_valid <= 1'b1;
          end
          if(_zz_286)begin
            MmuPlugin_ports_1_cache_2_valid <= 1'b1;
          end
          if(_zz_287)begin
            MmuPlugin_ports_1_cache_3_valid <= 1'b1;
          end
        end
      end
      if((writeBack_arbitration_isValid && writeBack_IS_SFENCE_VMA))begin
        MmuPlugin_ports_0_cache_0_valid <= 1'b0;
        MmuPlugin_ports_0_cache_1_valid <= 1'b0;
        MmuPlugin_ports_0_cache_2_valid <= 1'b0;
        MmuPlugin_ports_0_cache_3_valid <= 1'b0;
        MmuPlugin_ports_1_cache_0_valid <= 1'b0;
        MmuPlugin_ports_1_cache_1_valid <= 1'b0;
        MmuPlugin_ports_1_cache_2_valid <= 1'b0;
        MmuPlugin_ports_1_cache_3_valid <= 1'b0;
      end
      if(IBusCachedPlugin_fetchPc_correction)begin
        IBusCachedPlugin_fetchPc_correctionReg <= 1'b1;
      end
      if((IBusCachedPlugin_fetchPc_output_valid && IBusCachedPlugin_fetchPc_output_ready))begin
        IBusCachedPlugin_fetchPc_correctionReg <= 1'b0;
      end
      IBusCachedPlugin_fetchPc_booted <= 1'b1;
      if((IBusCachedPlugin_fetchPc_correction || IBusCachedPlugin_fetchPc_pcRegPropagate))begin
        IBusCachedPlugin_fetchPc_inc <= 1'b0;
      end
      if((IBusCachedPlugin_fetchPc_output_valid && IBusCachedPlugin_fetchPc_output_ready))begin
        IBusCachedPlugin_fetchPc_inc <= 1'b1;
      end
      if(((! IBusCachedPlugin_fetchPc_output_valid) && IBusCachedPlugin_fetchPc_output_ready))begin
        IBusCachedPlugin_fetchPc_inc <= 1'b0;
      end
      if((IBusCachedPlugin_fetchPc_booted && ((IBusCachedPlugin_fetchPc_output_ready || IBusCachedPlugin_fetchPc_correction) || IBusCachedPlugin_fetchPc_pcRegPropagate)))begin
        IBusCachedPlugin_fetchPc_pcReg <= IBusCachedPlugin_fetchPc_pc;
      end
      if(IBusCachedPlugin_iBusRsp_flush)begin
        _zz_73 <= 1'b0;
      end
      if(_zz_71)begin
        _zz_73 <= (IBusCachedPlugin_iBusRsp_stages_0_output_valid && (! 1'b0));
      end
      if(IBusCachedPlugin_iBusRsp_flush)begin
        _zz_75 <= 1'b0;
      end
      if(IBusCachedPlugin_iBusRsp_stages_1_output_ready)begin
        _zz_75 <= (IBusCachedPlugin_iBusRsp_stages_1_output_valid && (! IBusCachedPlugin_iBusRsp_flush));
      end
      if(IBusCachedPlugin_fetchPc_flushed)begin
        IBusCachedPlugin_injector_nextPcCalc_valids_0 <= 1'b0;
      end
      if((! (! IBusCachedPlugin_iBusRsp_stages_1_input_ready)))begin
        IBusCachedPlugin_injector_nextPcCalc_valids_0 <= 1'b1;
      end
      if(IBusCachedPlugin_fetchPc_flushed)begin
        IBusCachedPlugin_injector_nextPcCalc_valids_1 <= 1'b0;
      end
      if((! (! IBusCachedPlugin_iBusRsp_stages_2_input_ready)))begin
        IBusCachedPlugin_injector_nextPcCalc_valids_1 <= IBusCachedPlugin_injector_nextPcCalc_valids_0;
      end
      if(IBusCachedPlugin_fetchPc_flushed)begin
        IBusCachedPlugin_injector_nextPcCalc_valids_1 <= 1'b0;
      end
      if(IBusCachedPlugin_fetchPc_flushed)begin
        IBusCachedPlugin_injector_nextPcCalc_valids_2 <= 1'b0;
      end
      if((! execute_arbitration_isStuck))begin
        IBusCachedPlugin_injector_nextPcCalc_valids_2 <= IBusCachedPlugin_injector_nextPcCalc_valids_1;
      end
      if(IBusCachedPlugin_fetchPc_flushed)begin
        IBusCachedPlugin_injector_nextPcCalc_valids_2 <= 1'b0;
      end
      if(IBusCachedPlugin_fetchPc_flushed)begin
        IBusCachedPlugin_injector_nextPcCalc_valids_3 <= 1'b0;
      end
      if((! memory_arbitration_isStuck))begin
        IBusCachedPlugin_injector_nextPcCalc_valids_3 <= IBusCachedPlugin_injector_nextPcCalc_valids_2;
      end
      if(IBusCachedPlugin_fetchPc_flushed)begin
        IBusCachedPlugin_injector_nextPcCalc_valids_3 <= 1'b0;
      end
      if(IBusCachedPlugin_fetchPc_flushed)begin
        IBusCachedPlugin_injector_nextPcCalc_valids_4 <= 1'b0;
      end
      if((! writeBack_arbitration_isStuck))begin
        IBusCachedPlugin_injector_nextPcCalc_valids_4 <= IBusCachedPlugin_injector_nextPcCalc_valids_3;
      end
      if(IBusCachedPlugin_fetchPc_flushed)begin
        IBusCachedPlugin_injector_nextPcCalc_valids_4 <= 1'b0;
      end
      if(iBus_rsp_valid)begin
        IBusCachedPlugin_rspCounter <= (IBusCachedPlugin_rspCounter + 32'h00000001);
      end
      if(dataCache_2_io_mem_cmd_s2mPipe_ready)begin
        dataCache_2_io_mem_cmd_s2mPipe_rValid <= 1'b0;
      end
      if(_zz_288)begin
        dataCache_2_io_mem_cmd_s2mPipe_rValid <= dataCache_2_io_mem_cmd_valid;
      end
      dBus_rsp_valid_regNext <= dBus_rsp_valid;
      if(dBus_rsp_valid)begin
        DBusCachedPlugin_rspCounter <= (DBusCachedPlugin_rspCounter + 32'h00000001);
      end
      _zz_101 <= 1'b0;
      _zz_113 <= (_zz_35 && writeBack_arbitration_isFiring);
      memory_MulDivIterativePlugin_div_counter_value <= memory_MulDivIterativePlugin_div_counter_valueNext;
      if((! decode_arbitration_isStuck))begin
        CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_decode <= 1'b0;
      end else begin
        CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_decode <= CsrPlugin_exceptionPortCtrl_exceptionValids_decode;
      end
      if((! execute_arbitration_isStuck))begin
        CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_execute <= (CsrPlugin_exceptionPortCtrl_exceptionValids_decode && (! decode_arbitration_isStuck));
      end else begin
        CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_execute <= CsrPlugin_exceptionPortCtrl_exceptionValids_execute;
      end
      if((! memory_arbitration_isStuck))begin
        CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_memory <= (CsrPlugin_exceptionPortCtrl_exceptionValids_execute && (! execute_arbitration_isStuck));
      end else begin
        CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_memory <= CsrPlugin_exceptionPortCtrl_exceptionValids_memory;
      end
      if((! writeBack_arbitration_isStuck))begin
        CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_writeBack <= (CsrPlugin_exceptionPortCtrl_exceptionValids_memory && (! memory_arbitration_isStuck));
      end else begin
        CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_writeBack <= 1'b0;
      end
      CsrPlugin_interrupt_valid <= 1'b0;
      if(_zz_289)begin
        if(_zz_290)begin
          CsrPlugin_interrupt_valid <= 1'b1;
        end
        if(_zz_291)begin
          CsrPlugin_interrupt_valid <= 1'b1;
        end
        if(_zz_292)begin
          CsrPlugin_interrupt_valid <= 1'b1;
        end
      end
      if(_zz_293)begin
        if(_zz_294)begin
          CsrPlugin_interrupt_valid <= 1'b1;
        end
        if(_zz_295)begin
          CsrPlugin_interrupt_valid <= 1'b1;
        end
        if(_zz_296)begin
          CsrPlugin_interrupt_valid <= 1'b1;
        end
        if(_zz_297)begin
          CsrPlugin_interrupt_valid <= 1'b1;
        end
        if(_zz_298)begin
          CsrPlugin_interrupt_valid <= 1'b1;
        end
        if(_zz_299)begin
          CsrPlugin_interrupt_valid <= 1'b1;
        end
      end
      CsrPlugin_lastStageWasWfi <= (writeBack_arbitration_isFiring && (writeBack_ENV_CTRL == `EnvCtrlEnum_1_defaultEncoding_WFI));
      if(CsrPlugin_pipelineLiberator_active)begin
        if((! execute_arbitration_isStuck))begin
          CsrPlugin_pipelineLiberator_pcValids_0 <= 1'b1;
        end
        if((! memory_arbitration_isStuck))begin
          CsrPlugin_pipelineLiberator_pcValids_1 <= CsrPlugin_pipelineLiberator_pcValids_0;
        end
        if((! writeBack_arbitration_isStuck))begin
          CsrPlugin_pipelineLiberator_pcValids_2 <= CsrPlugin_pipelineLiberator_pcValids_1;
        end
      end
      if(((! CsrPlugin_pipelineLiberator_active) || decode_arbitration_removeIt))begin
        CsrPlugin_pipelineLiberator_pcValids_0 <= 1'b0;
        CsrPlugin_pipelineLiberator_pcValids_1 <= 1'b0;
        CsrPlugin_pipelineLiberator_pcValids_2 <= 1'b0;
      end
      if(CsrPlugin_interruptJump)begin
        CsrPlugin_interrupt_valid <= 1'b0;
      end
      CsrPlugin_hadException <= CsrPlugin_exception;
      if(_zz_255)begin
        _zz_127 <= CsrPlugin_targetPrivilege;
        case(CsrPlugin_targetPrivilege)
          2'b01 : begin
            CsrPlugin_sstatus_SIE <= 1'b0;
            CsrPlugin_sstatus_SPIE <= CsrPlugin_sstatus_SIE;
            CsrPlugin_sstatus_SPP <= CsrPlugin_privilege[0 : 0];
          end
          2'b11 : begin
            CsrPlugin_mstatus_MIE <= 1'b0;
            CsrPlugin_mstatus_MPIE <= CsrPlugin_mstatus_MIE;
            CsrPlugin_mstatus_MPP <= CsrPlugin_privilege;
          end
          default : begin
          end
        endcase
      end
      if(_zz_256)begin
        case(_zz_258)
          2'b11 : begin
            CsrPlugin_mstatus_MPP <= 2'b00;
            CsrPlugin_mstatus_MIE <= CsrPlugin_mstatus_MPIE;
            CsrPlugin_mstatus_MPIE <= 1'b1;
            _zz_127 <= CsrPlugin_mstatus_MPP;
          end
          2'b01 : begin
            CsrPlugin_sstatus_SPP <= 1'b0;
            CsrPlugin_sstatus_SIE <= CsrPlugin_sstatus_SPIE;
            CsrPlugin_sstatus_SPIE <= 1'b1;
            _zz_127 <= {1'b0,CsrPlugin_sstatus_SPP};
          end
          default : begin
          end
        endcase
      end
      execute_CsrPlugin_wfiWake <= (({_zz_133,{_zz_132,{_zz_131,{_zz_130,{_zz_129,_zz_128}}}}} != 6'h0) || CsrPlugin_thirdPartyWake);
      if((! memory_arbitration_isStuck))begin
        execute_to_memory_IS_DBUS_SHARING <= execute_IS_DBUS_SHARING;
      end
      if((! writeBack_arbitration_isStuck))begin
        memory_to_writeBack_IS_DBUS_SHARING <= memory_IS_DBUS_SHARING;
      end
      if(((! execute_arbitration_isStuck) || execute_arbitration_removeIt))begin
        execute_arbitration_isValid <= 1'b0;
      end
      if(((! decode_arbitration_isStuck) && (! decode_arbitration_removeIt)))begin
        execute_arbitration_isValid <= decode_arbitration_isValid;
      end
      if(((! memory_arbitration_isStuck) || memory_arbitration_removeIt))begin
        memory_arbitration_isValid <= 1'b0;
      end
      if(((! execute_arbitration_isStuck) && (! execute_arbitration_removeIt)))begin
        memory_arbitration_isValid <= execute_arbitration_isValid;
      end
      if(((! writeBack_arbitration_isStuck) || writeBack_arbitration_removeIt))begin
        writeBack_arbitration_isValid <= 1'b0;
      end
      if(((! memory_arbitration_isStuck) && (! memory_arbitration_removeIt)))begin
        writeBack_arbitration_isValid <= memory_arbitration_isValid;
      end
      case(_zz_148)
        3'b000 : begin
          if(IBusCachedPlugin_injectionPort_valid)begin
            _zz_148 <= 3'b001;
          end
        end
        3'b001 : begin
          _zz_148 <= 3'b010;
        end
        3'b010 : begin
          _zz_148 <= 3'b011;
        end
        3'b011 : begin
          if((! decode_arbitration_isStuck))begin
            _zz_148 <= 3'b100;
          end
        end
        3'b100 : begin
          _zz_148 <= 3'b000;
        end
        default : begin
        end
      endcase
      if(MmuPlugin_dBusAccess_rsp_valid)begin
        memory_to_writeBack_IS_DBUS_SHARING <= 1'b0;
      end
      if(execute_CsrPlugin_csr_768)begin
        if(execute_CsrPlugin_writeEnable)begin
          MmuPlugin_status_mxr <= _zz_400[0];
          MmuPlugin_status_sum <= _zz_401[0];
          MmuPlugin_status_mprv <= _zz_402[0];
          CsrPlugin_mstatus_MPP <= execute_CsrPlugin_writeData[12 : 11];
          CsrPlugin_mstatus_MPIE <= _zz_403[0];
          CsrPlugin_mstatus_MIE <= _zz_404[0];
          CsrPlugin_sstatus_SPP <= execute_CsrPlugin_writeData[8 : 8];
          CsrPlugin_sstatus_SPIE <= _zz_405[0];
          CsrPlugin_sstatus_SIE <= _zz_406[0];
        end
      end
      if(execute_CsrPlugin_csr_256)begin
        if(execute_CsrPlugin_writeEnable)begin
          MmuPlugin_status_mxr <= _zz_407[0];
          MmuPlugin_status_sum <= _zz_408[0];
          MmuPlugin_status_mprv <= _zz_409[0];
          CsrPlugin_sstatus_SPP <= execute_CsrPlugin_writeData[8 : 8];
          CsrPlugin_sstatus_SPIE <= _zz_410[0];
          CsrPlugin_sstatus_SIE <= _zz_411[0];
        end
      end
      if(execute_CsrPlugin_csr_384)begin
        if(execute_CsrPlugin_writeInstruction)begin
          MmuPlugin_ports_0_cache_0_valid <= 1'b0;
          MmuPlugin_ports_0_cache_1_valid <= 1'b0;
          MmuPlugin_ports_0_cache_2_valid <= 1'b0;
          MmuPlugin_ports_0_cache_3_valid <= 1'b0;
          MmuPlugin_ports_1_cache_0_valid <= 1'b0;
          MmuPlugin_ports_1_cache_1_valid <= 1'b0;
          MmuPlugin_ports_1_cache_2_valid <= 1'b0;
          MmuPlugin_ports_1_cache_3_valid <= 1'b0;
          MmuPlugin_ports_0_dirty <= 1'b1;
          MmuPlugin_ports_1_dirty <= 1'b1;
        end
        if(execute_CsrPlugin_writeEnable)begin
          MmuPlugin_satp_mode <= _zz_412[0];
        end
      end
      if(execute_CsrPlugin_csr_836)begin
        if(execute_CsrPlugin_writeEnable)begin
          CsrPlugin_sip_STIP <= _zz_414[0];
          CsrPlugin_sip_SSIP <= _zz_415[0];
          CsrPlugin_sip_SEIP_SOFT <= _zz_416[0];
        end
      end
      if(execute_CsrPlugin_csr_772)begin
        if(execute_CsrPlugin_writeEnable)begin
          CsrPlugin_mie_MEIE <= _zz_417[0];
          CsrPlugin_mie_MTIE <= _zz_418[0];
          CsrPlugin_mie_MSIE <= _zz_419[0];
          CsrPlugin_sie_SEIE <= _zz_420[0];
          CsrPlugin_sie_STIE <= _zz_421[0];
          CsrPlugin_sie_SSIE <= _zz_422[0];
        end
      end
      if(execute_CsrPlugin_csr_770)begin
        if(execute_CsrPlugin_writeEnable)begin
          CsrPlugin_medeleg_IAM <= _zz_423[0];
          CsrPlugin_medeleg_IAF <= _zz_424[0];
          CsrPlugin_medeleg_II <= _zz_425[0];
          CsrPlugin_medeleg_LAM <= _zz_426[0];
          CsrPlugin_medeleg_LAF <= _zz_427[0];
          CsrPlugin_medeleg_SAM <= _zz_428[0];
          CsrPlugin_medeleg_SAF <= _zz_429[0];
          CsrPlugin_medeleg_EU <= _zz_430[0];
          CsrPlugin_medeleg_ES <= _zz_431[0];
          CsrPlugin_medeleg_IPF <= _zz_432[0];
          CsrPlugin_medeleg_LPF <= _zz_433[0];
          CsrPlugin_medeleg_SPF <= _zz_434[0];
        end
      end
      if(execute_CsrPlugin_csr_771)begin
        if(execute_CsrPlugin_writeEnable)begin
          CsrPlugin_mideleg_SE <= _zz_435[0];
          CsrPlugin_mideleg_ST <= _zz_436[0];
          CsrPlugin_mideleg_SS <= _zz_437[0];
        end
      end
      if(execute_CsrPlugin_csr_324)begin
        if(execute_CsrPlugin_writeEnable)begin
          CsrPlugin_sip_STIP <= _zz_438[0];
          CsrPlugin_sip_SSIP <= _zz_439[0];
          CsrPlugin_sip_SEIP_SOFT <= _zz_440[0];
        end
      end
      if(execute_CsrPlugin_csr_260)begin
        if(execute_CsrPlugin_writeEnable)begin
          CsrPlugin_sie_SEIE <= _zz_441[0];
          CsrPlugin_sie_STIE <= _zz_442[0];
          CsrPlugin_sie_SSIE <= _zz_443[0];
        end
      end
    end
  end

  always @ (posedge CLKOUT0) begin
    if((! IBusCachedPlugin_mmuBus_cmd_1_isStuck))begin
      MmuPlugin_ports_0_requireMmuLockup <= MmuPlugin_ports_0_requireMmuLockupCalc;
    end
    if((! IBusCachedPlugin_mmuBus_cmd_1_isStuck))begin
      MmuPlugin_ports_0_cacheHits <= MmuPlugin_ports_0_cacheHitsCalc;
    end
    if((! DBusCachedPlugin_mmuBus_cmd_1_isStuck))begin
      MmuPlugin_ports_1_requireMmuLockup <= MmuPlugin_ports_1_requireMmuLockupCalc;
    end
    if((! DBusCachedPlugin_mmuBus_cmd_1_isStuck))begin
      MmuPlugin_ports_1_cacheHits <= MmuPlugin_ports_1_cacheHitsCalc;
    end
    MmuPlugin_shared_dBusRspStaged_payload_data <= MmuPlugin_dBusAccess_rsp_payload_data;
    MmuPlugin_shared_dBusRspStaged_payload_error <= MmuPlugin_dBusAccess_rsp_payload_error;
    MmuPlugin_shared_dBusRspStaged_payload_redo <= MmuPlugin_dBusAccess_rsp_payload_redo;
    if((MmuPlugin_shared_dBusRspStaged_valid && (! MmuPlugin_shared_dBusRspStaged_payload_redo)))begin
      MmuPlugin_shared_pteBuffer_V <= MmuPlugin_shared_dBusRsp_pte_V;
      MmuPlugin_shared_pteBuffer_R <= MmuPlugin_shared_dBusRsp_pte_R;
      MmuPlugin_shared_pteBuffer_W <= MmuPlugin_shared_dBusRsp_pte_W;
      MmuPlugin_shared_pteBuffer_X <= MmuPlugin_shared_dBusRsp_pte_X;
      MmuPlugin_shared_pteBuffer_U <= MmuPlugin_shared_dBusRsp_pte_U;
      MmuPlugin_shared_pteBuffer_G <= MmuPlugin_shared_dBusRsp_pte_G;
      MmuPlugin_shared_pteBuffer_A <= MmuPlugin_shared_dBusRsp_pte_A;
      MmuPlugin_shared_pteBuffer_D <= MmuPlugin_shared_dBusRsp_pte_D;
      MmuPlugin_shared_pteBuffer_RSW <= MmuPlugin_shared_dBusRsp_pte_RSW;
      MmuPlugin_shared_pteBuffer_PPN0 <= MmuPlugin_shared_dBusRsp_pte_PPN0;
      MmuPlugin_shared_pteBuffer_PPN1 <= MmuPlugin_shared_dBusRsp_pte_PPN1;
    end
    case(MmuPlugin_shared_state_1)
      `MmuPlugin_shared_State_1_defaultEncoding_IDLE : begin
        if(_zz_279)begin
          MmuPlugin_shared_portSortedOh <= MmuPlugin_shared_refills;
          MmuPlugin_shared_vpn_1 <= _zz_62[31 : 22];
          MmuPlugin_shared_vpn_0 <= _zz_62[21 : 12];
        end
      end
      `MmuPlugin_shared_State_1_defaultEncoding_L1_CMD : begin
      end
      `MmuPlugin_shared_State_1_defaultEncoding_L1_RSP : begin
      end
      `MmuPlugin_shared_State_1_defaultEncoding_L0_CMD : begin
      end
      default : begin
      end
    endcase
    if(_zz_259)begin
      if(_zz_260)begin
        if(_zz_280)begin
          MmuPlugin_ports_0_cache_0_exception <= (MmuPlugin_shared_dBusRsp_exception || ((MmuPlugin_shared_state_1 == `MmuPlugin_shared_State_1_defaultEncoding_L1_RSP) && (MmuPlugin_shared_dBusRsp_pte_PPN0 != 10'h0)));
          MmuPlugin_ports_0_cache_0_virtualAddress_0 <= MmuPlugin_shared_vpn_0;
          MmuPlugin_ports_0_cache_0_virtualAddress_1 <= MmuPlugin_shared_vpn_1;
          MmuPlugin_ports_0_cache_0_physicalAddress_0 <= MmuPlugin_shared_dBusRsp_pte_PPN0;
          MmuPlugin_ports_0_cache_0_physicalAddress_1 <= MmuPlugin_shared_dBusRsp_pte_PPN1[9 : 0];
          MmuPlugin_ports_0_cache_0_allowRead <= MmuPlugin_shared_dBusRsp_pte_R;
          MmuPlugin_ports_0_cache_0_allowWrite <= MmuPlugin_shared_dBusRsp_pte_W;
          MmuPlugin_ports_0_cache_0_allowExecute <= MmuPlugin_shared_dBusRsp_pte_X;
          MmuPlugin_ports_0_cache_0_allowUser <= MmuPlugin_shared_dBusRsp_pte_U;
          MmuPlugin_ports_0_cache_0_superPage <= (MmuPlugin_shared_state_1 == `MmuPlugin_shared_State_1_defaultEncoding_L1_RSP);
        end
        if(_zz_281)begin
          MmuPlugin_ports_0_cache_1_exception <= (MmuPlugin_shared_dBusRsp_exception || ((MmuPlugin_shared_state_1 == `MmuPlugin_shared_State_1_defaultEncoding_L1_RSP) && (MmuPlugin_shared_dBusRsp_pte_PPN0 != 10'h0)));
          MmuPlugin_ports_0_cache_1_virtualAddress_0 <= MmuPlugin_shared_vpn_0;
          MmuPlugin_ports_0_cache_1_virtualAddress_1 <= MmuPlugin_shared_vpn_1;
          MmuPlugin_ports_0_cache_1_physicalAddress_0 <= MmuPlugin_shared_dBusRsp_pte_PPN0;
          MmuPlugin_ports_0_cache_1_physicalAddress_1 <= MmuPlugin_shared_dBusRsp_pte_PPN1[9 : 0];
          MmuPlugin_ports_0_cache_1_allowRead <= MmuPlugin_shared_dBusRsp_pte_R;
          MmuPlugin_ports_0_cache_1_allowWrite <= MmuPlugin_shared_dBusRsp_pte_W;
          MmuPlugin_ports_0_cache_1_allowExecute <= MmuPlugin_shared_dBusRsp_pte_X;
          MmuPlugin_ports_0_cache_1_allowUser <= MmuPlugin_shared_dBusRsp_pte_U;
          MmuPlugin_ports_0_cache_1_superPage <= (MmuPlugin_shared_state_1 == `MmuPlugin_shared_State_1_defaultEncoding_L1_RSP);
        end
        if(_zz_282)begin
          MmuPlugin_ports_0_cache_2_exception <= (MmuPlugin_shared_dBusRsp_exception || ((MmuPlugin_shared_state_1 == `MmuPlugin_shared_State_1_defaultEncoding_L1_RSP) && (MmuPlugin_shared_dBusRsp_pte_PPN0 != 10'h0)));
          MmuPlugin_ports_0_cache_2_virtualAddress_0 <= MmuPlugin_shared_vpn_0;
          MmuPlugin_ports_0_cache_2_virtualAddress_1 <= MmuPlugin_shared_vpn_1;
          MmuPlugin_ports_0_cache_2_physicalAddress_0 <= MmuPlugin_shared_dBusRsp_pte_PPN0;
          MmuPlugin_ports_0_cache_2_physicalAddress_1 <= MmuPlugin_shared_dBusRsp_pte_PPN1[9 : 0];
          MmuPlugin_ports_0_cache_2_allowRead <= MmuPlugin_shared_dBusRsp_pte_R;
          MmuPlugin_ports_0_cache_2_allowWrite <= MmuPlugin_shared_dBusRsp_pte_W;
          MmuPlugin_ports_0_cache_2_allowExecute <= MmuPlugin_shared_dBusRsp_pte_X;
          MmuPlugin_ports_0_cache_2_allowUser <= MmuPlugin_shared_dBusRsp_pte_U;
          MmuPlugin_ports_0_cache_2_superPage <= (MmuPlugin_shared_state_1 == `MmuPlugin_shared_State_1_defaultEncoding_L1_RSP);
        end
        if(_zz_283)begin
          MmuPlugin_ports_0_cache_3_exception <= (MmuPlugin_shared_dBusRsp_exception || ((MmuPlugin_shared_state_1 == `MmuPlugin_shared_State_1_defaultEncoding_L1_RSP) && (MmuPlugin_shared_dBusRsp_pte_PPN0 != 10'h0)));
          MmuPlugin_ports_0_cache_3_virtualAddress_0 <= MmuPlugin_shared_vpn_0;
          MmuPlugin_ports_0_cache_3_virtualAddress_1 <= MmuPlugin_shared_vpn_1;
          MmuPlugin_ports_0_cache_3_physicalAddress_0 <= MmuPlugin_shared_dBusRsp_pte_PPN0;
          MmuPlugin_ports_0_cache_3_physicalAddress_1 <= MmuPlugin_shared_dBusRsp_pte_PPN1[9 : 0];
          MmuPlugin_ports_0_cache_3_allowRead <= MmuPlugin_shared_dBusRsp_pte_R;
          MmuPlugin_ports_0_cache_3_allowWrite <= MmuPlugin_shared_dBusRsp_pte_W;
          MmuPlugin_ports_0_cache_3_allowExecute <= MmuPlugin_shared_dBusRsp_pte_X;
          MmuPlugin_ports_0_cache_3_allowUser <= MmuPlugin_shared_dBusRsp_pte_U;
          MmuPlugin_ports_0_cache_3_superPage <= (MmuPlugin_shared_state_1 == `MmuPlugin_shared_State_1_defaultEncoding_L1_RSP);
        end
      end
      if(_zz_261)begin
        if(_zz_284)begin
          MmuPlugin_ports_1_cache_0_exception <= (MmuPlugin_shared_dBusRsp_exception || ((MmuPlugin_shared_state_1 == `MmuPlugin_shared_State_1_defaultEncoding_L1_RSP) && (MmuPlugin_shared_dBusRsp_pte_PPN0 != 10'h0)));
          MmuPlugin_ports_1_cache_0_virtualAddress_0 <= MmuPlugin_shared_vpn_0;
          MmuPlugin_ports_1_cache_0_virtualAddress_1 <= MmuPlugin_shared_vpn_1;
          MmuPlugin_ports_1_cache_0_physicalAddress_0 <= MmuPlugin_shared_dBusRsp_pte_PPN0;
          MmuPlugin_ports_1_cache_0_physicalAddress_1 <= MmuPlugin_shared_dBusRsp_pte_PPN1[9 : 0];
          MmuPlugin_ports_1_cache_0_allowRead <= MmuPlugin_shared_dBusRsp_pte_R;
          MmuPlugin_ports_1_cache_0_allowWrite <= MmuPlugin_shared_dBusRsp_pte_W;
          MmuPlugin_ports_1_cache_0_allowExecute <= MmuPlugin_shared_dBusRsp_pte_X;
          MmuPlugin_ports_1_cache_0_allowUser <= MmuPlugin_shared_dBusRsp_pte_U;
          MmuPlugin_ports_1_cache_0_superPage <= (MmuPlugin_shared_state_1 == `MmuPlugin_shared_State_1_defaultEncoding_L1_RSP);
        end
        if(_zz_285)begin
          MmuPlugin_ports_1_cache_1_exception <= (MmuPlugin_shared_dBusRsp_exception || ((MmuPlugin_shared_state_1 == `MmuPlugin_shared_State_1_defaultEncoding_L1_RSP) && (MmuPlugin_shared_dBusRsp_pte_PPN0 != 10'h0)));
          MmuPlugin_ports_1_cache_1_virtualAddress_0 <= MmuPlugin_shared_vpn_0;
          MmuPlugin_ports_1_cache_1_virtualAddress_1 <= MmuPlugin_shared_vpn_1;
          MmuPlugin_ports_1_cache_1_physicalAddress_0 <= MmuPlugin_shared_dBusRsp_pte_PPN0;
          MmuPlugin_ports_1_cache_1_physicalAddress_1 <= MmuPlugin_shared_dBusRsp_pte_PPN1[9 : 0];
          MmuPlugin_ports_1_cache_1_allowRead <= MmuPlugin_shared_dBusRsp_pte_R;
          MmuPlugin_ports_1_cache_1_allowWrite <= MmuPlugin_shared_dBusRsp_pte_W;
          MmuPlugin_ports_1_cache_1_allowExecute <= MmuPlugin_shared_dBusRsp_pte_X;
          MmuPlugin_ports_1_cache_1_allowUser <= MmuPlugin_shared_dBusRsp_pte_U;
          MmuPlugin_ports_1_cache_1_superPage <= (MmuPlugin_shared_state_1 == `MmuPlugin_shared_State_1_defaultEncoding_L1_RSP);
        end
        if(_zz_286)begin
          MmuPlugin_ports_1_cache_2_exception <= (MmuPlugin_shared_dBusRsp_exception || ((MmuPlugin_shared_state_1 == `MmuPlugin_shared_State_1_defaultEncoding_L1_RSP) && (MmuPlugin_shared_dBusRsp_pte_PPN0 != 10'h0)));
          MmuPlugin_ports_1_cache_2_virtualAddress_0 <= MmuPlugin_shared_vpn_0;
          MmuPlugin_ports_1_cache_2_virtualAddress_1 <= MmuPlugin_shared_vpn_1;
          MmuPlugin_ports_1_cache_2_physicalAddress_0 <= MmuPlugin_shared_dBusRsp_pte_PPN0;
          MmuPlugin_ports_1_cache_2_physicalAddress_1 <= MmuPlugin_shared_dBusRsp_pte_PPN1[9 : 0];
          MmuPlugin_ports_1_cache_2_allowRead <= MmuPlugin_shared_dBusRsp_pte_R;
          MmuPlugin_ports_1_cache_2_allowWrite <= MmuPlugin_shared_dBusRsp_pte_W;
          MmuPlugin_ports_1_cache_2_allowExecute <= MmuPlugin_shared_dBusRsp_pte_X;
          MmuPlugin_ports_1_cache_2_allowUser <= MmuPlugin_shared_dBusRsp_pte_U;
          MmuPlugin_ports_1_cache_2_superPage <= (MmuPlugin_shared_state_1 == `MmuPlugin_shared_State_1_defaultEncoding_L1_RSP);
        end
        if(_zz_287)begin
          MmuPlugin_ports_1_cache_3_exception <= (MmuPlugin_shared_dBusRsp_exception || ((MmuPlugin_shared_state_1 == `MmuPlugin_shared_State_1_defaultEncoding_L1_RSP) && (MmuPlugin_shared_dBusRsp_pte_PPN0 != 10'h0)));
          MmuPlugin_ports_1_cache_3_virtualAddress_0 <= MmuPlugin_shared_vpn_0;
          MmuPlugin_ports_1_cache_3_virtualAddress_1 <= MmuPlugin_shared_vpn_1;
          MmuPlugin_ports_1_cache_3_physicalAddress_0 <= MmuPlugin_shared_dBusRsp_pte_PPN0;
          MmuPlugin_ports_1_cache_3_physicalAddress_1 <= MmuPlugin_shared_dBusRsp_pte_PPN1[9 : 0];
          MmuPlugin_ports_1_cache_3_allowRead <= MmuPlugin_shared_dBusRsp_pte_R;
          MmuPlugin_ports_1_cache_3_allowWrite <= MmuPlugin_shared_dBusRsp_pte_W;
          MmuPlugin_ports_1_cache_3_allowExecute <= MmuPlugin_shared_dBusRsp_pte_X;
          MmuPlugin_ports_1_cache_3_allowUser <= MmuPlugin_shared_dBusRsp_pte_U;
          MmuPlugin_ports_1_cache_3_superPage <= (MmuPlugin_shared_state_1 == `MmuPlugin_shared_State_1_defaultEncoding_L1_RSP);
        end
      end
    end
    if(IBusCachedPlugin_iBusRsp_stages_1_output_ready)begin
      _zz_76 <= IBusCachedPlugin_iBusRsp_stages_1_output_payload;
    end
    if(IBusCachedPlugin_iBusRsp_stages_1_input_ready)begin
      IBusCachedPlugin_s1_tightlyCoupledHit <= IBusCachedPlugin_s0_tightlyCoupledHit;
    end
    if(IBusCachedPlugin_iBusRsp_stages_2_input_ready)begin
      IBusCachedPlugin_s2_tightlyCoupledHit <= IBusCachedPlugin_s1_tightlyCoupledHit;
    end
    if(_zz_288)begin
      dataCache_2_io_mem_cmd_s2mPipe_rData_wr <= dataCache_2_io_mem_cmd_payload_wr;
      dataCache_2_io_mem_cmd_s2mPipe_rData_uncached <= dataCache_2_io_mem_cmd_payload_uncached;
      dataCache_2_io_mem_cmd_s2mPipe_rData_address <= dataCache_2_io_mem_cmd_payload_address;
      dataCache_2_io_mem_cmd_s2mPipe_rData_data <= dataCache_2_io_mem_cmd_payload_data;
      dataCache_2_io_mem_cmd_s2mPipe_rData_mask <= dataCache_2_io_mem_cmd_payload_mask;
      dataCache_2_io_mem_cmd_s2mPipe_rData_length <= dataCache_2_io_mem_cmd_payload_length;
      dataCache_2_io_mem_cmd_s2mPipe_rData_exclusive <= dataCache_2_io_mem_cmd_payload_exclusive;
      dataCache_2_io_mem_cmd_s2mPipe_rData_last <= dataCache_2_io_mem_cmd_payload_last;
    end
    dBus_rsp_payload_exclusive_regNext <= dBus_rsp_payload_exclusive;
    dBus_rsp_payload_error_regNext <= dBus_rsp_payload_error;
    dBus_rsp_payload_last_regNext <= dBus_rsp_payload_last;
    dBus_rsp_payload_aggregated_regNext <= dBus_rsp_payload_aggregated;
    if((dBus_rsp_valid && (! dataCache_2_io_cpu_writeBack_keepMemRspData)))begin
      dBus_rsp_payload_data_regNextWhen <= dBus_rsp_payload_data;
    end
    _zz_114 <= _zz_34[11 : 7];
    _zz_115 <= _zz_44;
    if((memory_MulDivIterativePlugin_div_counter_value == 6'h20))begin
      memory_MulDivIterativePlugin_div_done <= 1'b1;
    end
    if((! memory_arbitration_isStuck))begin
      memory_MulDivIterativePlugin_div_done <= 1'b0;
    end
    if(_zz_241)begin
      if(_zz_273)begin
        memory_MulDivIterativePlugin_rs1[31 : 0] <= memory_MulDivIterativePlugin_div_stage_0_outNumerator;
        memory_MulDivIterativePlugin_accumulator[31 : 0] <= memory_MulDivIterativePlugin_div_stage_0_outRemainder;
        if((memory_MulDivIterativePlugin_div_counter_value == 6'h20))begin
          memory_MulDivIterativePlugin_div_result <= _zz_386[31:0];
        end
      end
    end
    if(_zz_274)begin
      memory_MulDivIterativePlugin_accumulator <= 65'h0;
      memory_MulDivIterativePlugin_rs1 <= ((_zz_125 ? (~ _zz_126) : _zz_126) + _zz_392);
      memory_MulDivIterativePlugin_rs2 <= ((_zz_124 ? (~ execute_RS2) : execute_RS2) + _zz_394);
      memory_MulDivIterativePlugin_div_needRevert <= ((_zz_125 ^ (_zz_124 && (! execute_INSTRUCTION[13]))) && (! (((execute_RS2 == 32'h0) && execute_IS_RS2_SIGNED) && (! execute_INSTRUCTION[13]))));
    end
    CsrPlugin_mip_MEIP <= externalInterrupt;
    CsrPlugin_mip_MTIP <= timerInterrupt;
    CsrPlugin_mip_MSIP <= softwareInterrupt;
    CsrPlugin_sip_SEIP_INPUT <= externalInterruptS;
    CsrPlugin_mcycle <= (CsrPlugin_mcycle + 64'h0000000000000001);
    if(writeBack_arbitration_isFiring)begin
      CsrPlugin_minstret <= (CsrPlugin_minstret + 64'h0000000000000001);
    end
    if(_zz_251)begin
      CsrPlugin_exceptionPortCtrl_exceptionContext_code <= (_zz_135 ? IBusCachedPlugin_decodeExceptionPort_payload_code : decodeExceptionPort_payload_code);
      CsrPlugin_exceptionPortCtrl_exceptionContext_badAddr <= (_zz_135 ? IBusCachedPlugin_decodeExceptionPort_payload_badAddr : decodeExceptionPort_payload_badAddr);
    end
    if(CsrPlugin_selfException_valid)begin
      CsrPlugin_exceptionPortCtrl_exceptionContext_code <= CsrPlugin_selfException_payload_code;
      CsrPlugin_exceptionPortCtrl_exceptionContext_badAddr <= CsrPlugin_selfException_payload_badAddr;
    end
    if(BranchPlugin_branchExceptionPort_valid)begin
      CsrPlugin_exceptionPortCtrl_exceptionContext_code <= BranchPlugin_branchExceptionPort_payload_code;
      CsrPlugin_exceptionPortCtrl_exceptionContext_badAddr <= BranchPlugin_branchExceptionPort_payload_badAddr;
    end
    if(DBusCachedPlugin_exceptionBus_valid)begin
      CsrPlugin_exceptionPortCtrl_exceptionContext_code <= DBusCachedPlugin_exceptionBus_payload_code;
      CsrPlugin_exceptionPortCtrl_exceptionContext_badAddr <= DBusCachedPlugin_exceptionBus_payload_badAddr;
    end
    if(_zz_289)begin
      if(_zz_290)begin
        CsrPlugin_interrupt_code <= 4'b0101;
        CsrPlugin_interrupt_targetPrivilege <= 2'b01;
      end
      if(_zz_291)begin
        CsrPlugin_interrupt_code <= 4'b0001;
        CsrPlugin_interrupt_targetPrivilege <= 2'b01;
      end
      if(_zz_292)begin
        CsrPlugin_interrupt_code <= 4'b1001;
        CsrPlugin_interrupt_targetPrivilege <= 2'b01;
      end
    end
    if(_zz_293)begin
      if(_zz_294)begin
        CsrPlugin_interrupt_code <= 4'b0101;
        CsrPlugin_interrupt_targetPrivilege <= 2'b11;
      end
      if(_zz_295)begin
        CsrPlugin_interrupt_code <= 4'b0001;
        CsrPlugin_interrupt_targetPrivilege <= 2'b11;
      end
      if(_zz_296)begin
        CsrPlugin_interrupt_code <= 4'b1001;
        CsrPlugin_interrupt_targetPrivilege <= 2'b11;
      end
      if(_zz_297)begin
        CsrPlugin_interrupt_code <= 4'b0111;
        CsrPlugin_interrupt_targetPrivilege <= 2'b11;
      end
      if(_zz_298)begin
        CsrPlugin_interrupt_code <= 4'b0011;
        CsrPlugin_interrupt_targetPrivilege <= 2'b11;
      end
      if(_zz_299)begin
        CsrPlugin_interrupt_code <= 4'b1011;
        CsrPlugin_interrupt_targetPrivilege <= 2'b11;
      end
    end
    if(_zz_255)begin
      case(CsrPlugin_targetPrivilege)
        2'b01 : begin
          CsrPlugin_scause_interrupt <= (! CsrPlugin_hadException);
          CsrPlugin_scause_exceptionCode <= CsrPlugin_trapCause;
          CsrPlugin_sepc <= writeBack_PC;
          if(CsrPlugin_hadException)begin
            CsrPlugin_stval <= CsrPlugin_exceptionPortCtrl_exceptionContext_badAddr;
          end
        end
        2'b11 : begin
          CsrPlugin_mcause_interrupt <= (! CsrPlugin_hadException);
          CsrPlugin_mcause_exceptionCode <= CsrPlugin_trapCause;
          CsrPlugin_mepc <= writeBack_PC;
          if(CsrPlugin_hadException)begin
            CsrPlugin_mtval <= CsrPlugin_exceptionPortCtrl_exceptionContext_badAddr;
          end
        end
        default : begin
        end
      endcase
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_PC <= _zz_27;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_PC <= execute_PC;
    end
    if(((! writeBack_arbitration_isStuck) && (! CsrPlugin_exceptionPortCtrl_exceptionValids_writeBack)))begin
      memory_to_writeBack_PC <= memory_PC;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_INSTRUCTION <= decode_INSTRUCTION;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_INSTRUCTION <= execute_INSTRUCTION;
    end
    if((! writeBack_arbitration_isStuck))begin
      memory_to_writeBack_INSTRUCTION <= memory_INSTRUCTION;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_FORMAL_PC_NEXT <= decode_FORMAL_PC_NEXT;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_FORMAL_PC_NEXT <= _zz_47;
    end
    if((! writeBack_arbitration_isStuck))begin
      memory_to_writeBack_FORMAL_PC_NEXT <= _zz_46;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_MEMORY_FORCE_CONSTISTENCY <= decode_MEMORY_FORCE_CONSTISTENCY;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_IS_SFENCE_VMA <= decode_IS_SFENCE_VMA;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_IS_SFENCE_VMA <= execute_IS_SFENCE_VMA;
    end
    if((! writeBack_arbitration_isStuck))begin
      memory_to_writeBack_IS_SFENCE_VMA <= memory_IS_SFENCE_VMA;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_SRC_USE_SUB_LESS <= decode_SRC_USE_SUB_LESS;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_MEMORY_ENABLE <= decode_MEMORY_ENABLE;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_MEMORY_ENABLE <= execute_MEMORY_ENABLE;
    end
    if((! writeBack_arbitration_isStuck))begin
      memory_to_writeBack_MEMORY_ENABLE <= memory_MEMORY_ENABLE;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_ALU_CTRL <= _zz_18;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_REGFILE_WRITE_VALID <= decode_REGFILE_WRITE_VALID;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_REGFILE_WRITE_VALID <= execute_REGFILE_WRITE_VALID;
    end
    if((! writeBack_arbitration_isStuck))begin
      memory_to_writeBack_REGFILE_WRITE_VALID <= memory_REGFILE_WRITE_VALID;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_BYPASSABLE_EXECUTE_STAGE <= decode_BYPASSABLE_EXECUTE_STAGE;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_BYPASSABLE_MEMORY_STAGE <= decode_BYPASSABLE_MEMORY_STAGE;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_BYPASSABLE_MEMORY_STAGE <= execute_BYPASSABLE_MEMORY_STAGE;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_MEMORY_WR <= decode_MEMORY_WR;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_MEMORY_WR <= execute_MEMORY_WR;
    end
    if((! writeBack_arbitration_isStuck))begin
      memory_to_writeBack_MEMORY_WR <= memory_MEMORY_WR;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_MEMORY_LRSC <= decode_MEMORY_LRSC;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_MEMORY_LRSC <= execute_MEMORY_LRSC;
    end
    if((! writeBack_arbitration_isStuck))begin
      memory_to_writeBack_MEMORY_LRSC <= memory_MEMORY_LRSC;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_MEMORY_AMO <= decode_MEMORY_AMO;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_MEMORY_AMO <= execute_MEMORY_AMO;
    end
    if((! writeBack_arbitration_isStuck))begin
      memory_to_writeBack_MEMORY_AMO <= memory_MEMORY_AMO;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_MEMORY_MANAGMENT <= decode_MEMORY_MANAGMENT;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_MEMORY_FENCE <= decode_MEMORY_FENCE;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_MEMORY_FENCE <= execute_MEMORY_FENCE;
    end
    if((! writeBack_arbitration_isStuck))begin
      memory_to_writeBack_MEMORY_FENCE <= memory_MEMORY_FENCE;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_SRC_LESS_UNSIGNED <= decode_SRC_LESS_UNSIGNED;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_ALU_BITWISE_CTRL <= _zz_15;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_SHIFT_CTRL <= _zz_12;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_IS_MUL <= decode_IS_MUL;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_IS_MUL <= execute_IS_MUL;
    end
    if((! writeBack_arbitration_isStuck))begin
      memory_to_writeBack_IS_MUL <= memory_IS_MUL;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_IS_DIV <= decode_IS_DIV;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_IS_DIV <= execute_IS_DIV;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_IS_RS1_SIGNED <= decode_IS_RS1_SIGNED;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_IS_RS2_SIGNED <= decode_IS_RS2_SIGNED;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_IS_CSR <= decode_IS_CSR;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_ENV_CTRL <= _zz_9;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_ENV_CTRL <= _zz_6;
    end
    if((! writeBack_arbitration_isStuck))begin
      memory_to_writeBack_ENV_CTRL <= _zz_4;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_BRANCH_CTRL <= _zz_2;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_IS_AES <= decode_IS_AES;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_IS_AES <= execute_IS_AES;
    end
    if((! writeBack_arbitration_isStuck))begin
      memory_to_writeBack_IS_AES <= memory_IS_AES;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_RS1 <= _zz_30;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_RS1 <= execute_RS1;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_RS2 <= _zz_28;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_SRC2_FORCE_ZERO <= decode_SRC2_FORCE_ZERO;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_SRC1 <= decode_SRC1;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_SRC2 <= decode_SRC2;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_CSR_WRITE_OPCODE <= decode_CSR_WRITE_OPCODE;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_CSR_READ_OPCODE <= decode_CSR_READ_OPCODE;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_DO_EBREAK <= decode_DO_EBREAK;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_MEMORY_ADDRESS_LOW <= execute_MEMORY_ADDRESS_LOW;
    end
    if((! writeBack_arbitration_isStuck))begin
      memory_to_writeBack_MEMORY_ADDRESS_LOW <= memory_MEMORY_ADDRESS_LOW;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_MEMORY_VIRTUAL_ADDRESS <= execute_MEMORY_VIRTUAL_ADDRESS;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_REGFILE_WRITE_DATA <= _zz_25;
    end
    if((! writeBack_arbitration_isStuck))begin
      memory_to_writeBack_REGFILE_WRITE_DATA <= _zz_24;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_MUL_LL <= execute_MUL_LL;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_MUL_LH <= execute_MUL_LH;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_MUL_HL <= execute_MUL_HL;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_MUL_HH <= execute_MUL_HH;
    end
    if((! writeBack_arbitration_isStuck))begin
      memory_to_writeBack_MUL_HH <= memory_MUL_HH;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_BRANCH_DO <= execute_BRANCH_DO;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_BRANCH_CALC <= execute_BRANCH_CALC;
    end
    if((! writeBack_arbitration_isStuck))begin
      memory_to_writeBack_MUL_LOW <= memory_MUL_LOW;
    end
    if((! writeBack_arbitration_isStuck))begin
      memory_to_writeBack_CALC <= memory_CALC;
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_768 <= (decode_INSTRUCTION[31 : 20] == 12'h300);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_256 <= (decode_INSTRUCTION[31 : 20] == 12'h100);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_384 <= (decode_INSTRUCTION[31 : 20] == 12'h180);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_3857 <= (decode_INSTRUCTION[31 : 20] == 12'hf11);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_3858 <= (decode_INSTRUCTION[31 : 20] == 12'hf12);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_3859 <= (decode_INSTRUCTION[31 : 20] == 12'hf13);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_3860 <= (decode_INSTRUCTION[31 : 20] == 12'hf14);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_769 <= (decode_INSTRUCTION[31 : 20] == 12'h301);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_836 <= (decode_INSTRUCTION[31 : 20] == 12'h344);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_772 <= (decode_INSTRUCTION[31 : 20] == 12'h304);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_773 <= (decode_INSTRUCTION[31 : 20] == 12'h305);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_833 <= (decode_INSTRUCTION[31 : 20] == 12'h341);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_832 <= (decode_INSTRUCTION[31 : 20] == 12'h340);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_834 <= (decode_INSTRUCTION[31 : 20] == 12'h342);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_835 <= (decode_INSTRUCTION[31 : 20] == 12'h343);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_770 <= (decode_INSTRUCTION[31 : 20] == 12'h302);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_771 <= (decode_INSTRUCTION[31 : 20] == 12'h303);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_3073 <= (decode_INSTRUCTION[31 : 20] == 12'hc01);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_3201 <= (decode_INSTRUCTION[31 : 20] == 12'hc81);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_324 <= (decode_INSTRUCTION[31 : 20] == 12'h144);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_260 <= (decode_INSTRUCTION[31 : 20] == 12'h104);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_261 <= (decode_INSTRUCTION[31 : 20] == 12'h105);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_321 <= (decode_INSTRUCTION[31 : 20] == 12'h141);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_320 <= (decode_INSTRUCTION[31 : 20] == 12'h140);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_322 <= (decode_INSTRUCTION[31 : 20] == 12'h142);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_323 <= (decode_INSTRUCTION[31 : 20] == 12'h143);
    end
    if(execute_CsrPlugin_csr_384)begin
      if(execute_CsrPlugin_writeEnable)begin
        MmuPlugin_satp_asid <= execute_CsrPlugin_writeData[30 : 22];
        MmuPlugin_satp_ppn <= execute_CsrPlugin_writeData[19 : 0];
      end
    end
    if(execute_CsrPlugin_csr_836)begin
      if(execute_CsrPlugin_writeEnable)begin
        CsrPlugin_mip_MSIP <= _zz_413[0];
      end
    end
    if(execute_CsrPlugin_csr_773)begin
      if(execute_CsrPlugin_writeEnable)begin
        CsrPlugin_mtvec_base <= execute_CsrPlugin_writeData[31 : 2];
        CsrPlugin_mtvec_mode <= execute_CsrPlugin_writeData[1 : 0];
      end
    end
    if(execute_CsrPlugin_csr_833)begin
      if(execute_CsrPlugin_writeEnable)begin
        CsrPlugin_mepc <= execute_CsrPlugin_writeData[31 : 0];
      end
    end
    if(execute_CsrPlugin_csr_832)begin
      if(execute_CsrPlugin_writeEnable)begin
        CsrPlugin_mscratch <= execute_CsrPlugin_writeData[31 : 0];
      end
    end
    if(execute_CsrPlugin_csr_261)begin
      if(execute_CsrPlugin_writeEnable)begin
        CsrPlugin_stvec_base <= execute_CsrPlugin_writeData[31 : 2];
        CsrPlugin_stvec_mode <= execute_CsrPlugin_writeData[1 : 0];
      end
    end
    if(execute_CsrPlugin_csr_321)begin
      if(execute_CsrPlugin_writeEnable)begin
        CsrPlugin_sepc <= execute_CsrPlugin_writeData[31 : 0];
      end
    end
    if(execute_CsrPlugin_csr_320)begin
      if(execute_CsrPlugin_writeEnable)begin
        CsrPlugin_sscratch <= execute_CsrPlugin_writeData[31 : 0];
      end
    end
    if(execute_CsrPlugin_csr_322)begin
      if(execute_CsrPlugin_writeEnable)begin
        CsrPlugin_scause_interrupt <= _zz_444[0];
        CsrPlugin_scause_exceptionCode <= execute_CsrPlugin_writeData[3 : 0];
      end
    end
    if(execute_CsrPlugin_csr_323)begin
      if(execute_CsrPlugin_writeEnable)begin
        CsrPlugin_stval <= execute_CsrPlugin_writeData[31 : 0];
      end
    end
  end

  always @ (posedge CLKOUT0) begin
    DebugPlugin_firstCycle <= 1'b0;
    if(debug_bus_cmd_ready)begin
      DebugPlugin_firstCycle <= 1'b1;
    end
    DebugPlugin_secondCycle <= DebugPlugin_firstCycle;
    DebugPlugin_isPipBusy <= (({writeBack_arbitration_isValid,{memory_arbitration_isValid,{execute_arbitration_isValid,decode_arbitration_isValid}}} != 4'b0000) || IBusCachedPlugin_incomingInstruction);
    if(writeBack_arbitration_isValid)begin
      DebugPlugin_busReadDataReg <= _zz_44;
    end
    _zz_147 <= debug_bus_cmd_payload_address[2];
    if(_zz_253)begin
      DebugPlugin_busReadDataReg <= execute_PC;
    end
    DebugPlugin_resetIt_regNext <= DebugPlugin_resetIt;
  end

  always @ (posedge CLKOUT0) begin
    if(debugCd_logic_outputReset) begin
      DebugPlugin_resetIt <= 1'b0;
      DebugPlugin_haltIt <= 1'b0;
      DebugPlugin_stepIt <= 1'b0;
      DebugPlugin_godmode <= 1'b0;
      DebugPlugin_haltedByBreak <= 1'b0;
    end else begin
      if((DebugPlugin_haltIt && (! DebugPlugin_isPipBusy)))begin
        DebugPlugin_godmode <= 1'b1;
      end
      if(debug_bus_cmd_valid)begin
        case(_zz_278)
          6'h0 : begin
            if(debug_bus_cmd_payload_wr)begin
              DebugPlugin_stepIt <= debug_bus_cmd_payload_data[4];
              if(debug_bus_cmd_payload_data[16])begin
                DebugPlugin_resetIt <= 1'b1;
              end
              if(debug_bus_cmd_payload_data[24])begin
                DebugPlugin_resetIt <= 1'b0;
              end
              if(debug_bus_cmd_payload_data[17])begin
                DebugPlugin_haltIt <= 1'b1;
              end
              if(debug_bus_cmd_payload_data[25])begin
                DebugPlugin_haltIt <= 1'b0;
              end
              if(debug_bus_cmd_payload_data[25])begin
                DebugPlugin_haltedByBreak <= 1'b0;
              end
              if(debug_bus_cmd_payload_data[25])begin
                DebugPlugin_godmode <= 1'b0;
              end
            end
          end
          default : begin
          end
        endcase
      end
      if(_zz_253)begin
        if(_zz_254)begin
          DebugPlugin_haltIt <= 1'b1;
          DebugPlugin_haltedByBreak <= 1'b1;
        end
      end
      if(_zz_257)begin
        if(decode_arbitration_isValid)begin
          DebugPlugin_haltIt <= 1'b1;
        end
      end
    end
  end


endmodule

module StreamFifoLowLatency_3 (
  input               io_push_valid,
  output              io_push_ready,
  input      [2:0]    io_push_payload,
  output              io_pop_valid,
  input               io_pop_ready,
  output     [2:0]    io_pop_payload,
  input               io_flush,
  output     [4:0]    io_occupancy,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  wire       [2:0]    _zz_2;
  wire       [0:0]    _zz_3;
  wire       [3:0]    _zz_4;
  wire       [0:0]    _zz_5;
  wire       [3:0]    _zz_6;
  wire       [2:0]    _zz_7;
  reg                 _zz_1;
  reg                 pushPtr_willIncrement;
  reg                 pushPtr_willClear;
  reg        [3:0]    pushPtr_valueNext;
  reg        [3:0]    pushPtr_value;
  wire                pushPtr_willOverflowIfInc;
  wire                pushPtr_willOverflow;
  reg                 popPtr_willIncrement;
  reg                 popPtr_willClear;
  reg        [3:0]    popPtr_valueNext;
  reg        [3:0]    popPtr_value;
  wire                popPtr_willOverflowIfInc;
  wire                popPtr_willOverflow;
  wire                ptrMatch;
  reg                 risingOccupancy;
  wire                empty;
  wire                full;
  wire                pushing;
  wire                popping;
  wire       [3:0]    ptrDif;
  (* ram_style = "distributed" *) reg [2:0] ram [0:15];

  assign _zz_3 = pushPtr_willIncrement;
  assign _zz_4 = {3'd0, _zz_3};
  assign _zz_5 = popPtr_willIncrement;
  assign _zz_6 = {3'd0, _zz_5};
  assign _zz_7 = io_push_payload;
  assign _zz_2 = ram[popPtr_value];
  always @ (posedge CLKOUT0) begin
    if(_zz_1) begin
      ram[pushPtr_value] <= _zz_7;
    end
  end

  always @ (*) begin
    _zz_1 = 1'b0;
    if(pushing)begin
      _zz_1 = 1'b1;
    end
  end

  always @ (*) begin
    pushPtr_willIncrement = 1'b0;
    if(pushing)begin
      pushPtr_willIncrement = 1'b1;
    end
  end

  always @ (*) begin
    pushPtr_willClear = 1'b0;
    if(io_flush)begin
      pushPtr_willClear = 1'b1;
    end
  end

  assign pushPtr_willOverflowIfInc = (pushPtr_value == 4'b1111);
  assign pushPtr_willOverflow = (pushPtr_willOverflowIfInc && pushPtr_willIncrement);
  always @ (*) begin
    pushPtr_valueNext = (pushPtr_value + _zz_4);
    if(pushPtr_willClear)begin
      pushPtr_valueNext = 4'b0000;
    end
  end

  always @ (*) begin
    popPtr_willIncrement = 1'b0;
    if(popping)begin
      popPtr_willIncrement = 1'b1;
    end
  end

  always @ (*) begin
    popPtr_willClear = 1'b0;
    if(io_flush)begin
      popPtr_willClear = 1'b1;
    end
  end

  assign popPtr_willOverflowIfInc = (popPtr_value == 4'b1111);
  assign popPtr_willOverflow = (popPtr_willOverflowIfInc && popPtr_willIncrement);
  always @ (*) begin
    popPtr_valueNext = (popPtr_value + _zz_6);
    if(popPtr_willClear)begin
      popPtr_valueNext = 4'b0000;
    end
  end

  assign ptrMatch = (pushPtr_value == popPtr_value);
  assign empty = (ptrMatch && (! risingOccupancy));
  assign full = (ptrMatch && risingOccupancy);
  assign pushing = (io_push_valid && io_push_ready);
  assign popping = (io_pop_valid && io_pop_ready);
  assign io_push_ready = (! full);
  assign io_pop_valid = (! empty);
  assign io_pop_payload = _zz_2;
  assign ptrDif = (pushPtr_value - popPtr_value);
  assign io_occupancy = {(risingOccupancy && ptrMatch),ptrDif};
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      pushPtr_value <= 4'b0000;
      popPtr_value <= 4'b0000;
      risingOccupancy <= 1'b0;
    end else begin
      pushPtr_value <= pushPtr_valueNext;
      popPtr_value <= popPtr_valueNext;
      if((pushing != popping))begin
        risingOccupancy <= pushing;
      end
      if(io_flush)begin
        risingOccupancy <= 1'b0;
      end
    end
  end


endmodule

module VexRiscv (
  output              dBus_cmd_valid,
  input               dBus_cmd_ready,
  output              dBus_cmd_payload_wr,
  output              dBus_cmd_payload_uncached,
  output     [31:0]   dBus_cmd_payload_address,
  output     [31:0]   dBus_cmd_payload_data,
  output     [3:0]    dBus_cmd_payload_mask,
  output     [3:0]    dBus_cmd_payload_length,
  output              dBus_cmd_payload_exclusive,
  output              dBus_cmd_payload_last,
  input               dBus_rsp_valid,
  input      [2:0]    dBus_rsp_payload_aggregated,
  input               dBus_rsp_payload_last,
  input      [63:0]   dBus_rsp_payload_data,
  input               dBus_rsp_payload_error,
  input               dBus_rsp_payload_exclusive,
  input               dBus_inv_valid,
  output              dBus_inv_ready,
  input               dBus_inv_payload_last,
  input               dBus_inv_payload_fragment_enable,
  input      [31:0]   dBus_inv_payload_fragment_address,
  output              dBus_ack_valid,
  input               dBus_ack_ready,
  output              dBus_ack_payload_last,
  output              dBus_ack_payload_fragment_hit,
  input               dBus_sync_valid,
  output              dBus_sync_ready,
  input      [2:0]    dBus_sync_payload_aggregated,
  input               timerInterrupt,
  input               externalInterrupt,
  input               softwareInterrupt,
  input               externalInterruptS,
  input      [63:0]   utime,
  input               debug_bus_cmd_valid,
  output reg          debug_bus_cmd_ready,
  input               debug_bus_cmd_payload_wr,
  input      [7:0]    debug_bus_cmd_payload_address,
  input      [31:0]   debug_bus_cmd_payload_data,
  output reg [31:0]   debug_bus_rsp_data,
  output              debug_resetOut,
  output              iBus_cmd_valid,
  input               iBus_cmd_ready,
  output reg [31:0]   iBus_cmd_payload_address,
  output     [2:0]    iBus_cmd_payload_size,
  input               iBus_rsp_valid,
  input      [63:0]   iBus_rsp_payload_data,
  input               iBus_rsp_payload_error,
  input               CLKOUT0,
  input               systemCd_logic_outputReset,
  input               debugCd_logic_outputReset
);
  wire                _zz_171;
  wire                _zz_172;
  wire                _zz_173;
  wire                _zz_174;
  wire                _zz_175;
  wire                _zz_176;
  wire                _zz_177;
  wire                _zz_178;
  reg                 _zz_179;
  reg                 _zz_180;
  reg        [31:0]   _zz_181;
  reg                 _zz_182;
  reg        [31:0]   _zz_183;
  reg        [1:0]    _zz_184;
  reg                 _zz_185;
  reg                 _zz_186;
  wire                _zz_187;
  wire       [2:0]    _zz_188;
  reg                 _zz_189;
  reg                 _zz_190;
  reg                 _zz_191;
  wire                _zz_192;
  wire       [31:0]   _zz_193;
  reg                 _zz_194;
  reg                 _zz_195;
  reg                 _zz_196;
  reg                 _zz_197;
  reg                 _zz_198;
  reg                 _zz_199;
  reg                 _zz_200;
  reg                 _zz_201;
  wire       [3:0]    _zz_202;
  wire                _zz_203;
  wire                _zz_204;
  wire       [31:0]   _zz_205;
  wire       [31:0]   _zz_206;
  reg        [31:0]   _zz_207;
  reg                 _zz_208;
  reg                 _zz_209;
  reg                 _zz_210;
  reg        [9:0]    _zz_211;
  reg        [9:0]    _zz_212;
  reg        [9:0]    _zz_213;
  reg        [9:0]    _zz_214;
  reg                 _zz_215;
  reg                 _zz_216;
  reg                 _zz_217;
  reg                 _zz_218;
  reg                 _zz_219;
  reg                 _zz_220;
  reg                 _zz_221;
  reg        [9:0]    _zz_222;
  reg        [9:0]    _zz_223;
  reg        [9:0]    _zz_224;
  reg        [9:0]    _zz_225;
  reg                 _zz_226;
  reg                 _zz_227;
  reg                 _zz_228;
  reg                 _zz_229;
  reg        [31:0]   _zz_230;
  reg        [7:0]    _zz_231;
  reg        [1:0]    _zz_232;
  reg        [1:0]    _zz_233;
  reg        [1:0]    _zz_234;
  reg        [1:0]    _zz_235;
  reg        [7:0]    _zz_236;
  reg        [7:0]    _zz_237;
  reg        [7:0]    _zz_238;
  reg        [7:0]    _zz_239;
  wire                IBusCachedPlugin_cache_io_cpu_prefetch_haltIt;
  wire       [31:0]   IBusCachedPlugin_cache_io_cpu_fetch_data;
  wire       [31:0]   IBusCachedPlugin_cache_io_cpu_fetch_physicalAddress;
  wire                IBusCachedPlugin_cache_io_cpu_decode_error;
  wire                IBusCachedPlugin_cache_io_cpu_decode_mmuRefilling;
  wire                IBusCachedPlugin_cache_io_cpu_decode_mmuException;
  wire       [31:0]   IBusCachedPlugin_cache_io_cpu_decode_data;
  wire                IBusCachedPlugin_cache_io_cpu_decode_cacheMiss;
  wire       [31:0]   IBusCachedPlugin_cache_io_cpu_decode_physicalAddress;
  wire                IBusCachedPlugin_cache_io_mem_cmd_valid;
  wire       [31:0]   IBusCachedPlugin_cache_io_mem_cmd_payload_address;
  wire       [2:0]    IBusCachedPlugin_cache_io_mem_cmd_payload_size;
  wire                dataCache_2_io_cpu_execute_haltIt;
  wire                dataCache_2_io_cpu_execute_refilling;
  wire                dataCache_2_io_cpu_memory_isWrite;
  wire                dataCache_2_io_cpu_writeBack_haltIt;
  wire       [31:0]   dataCache_2_io_cpu_writeBack_data;
  wire                dataCache_2_io_cpu_writeBack_mmuException;
  wire                dataCache_2_io_cpu_writeBack_unalignedAccess;
  wire                dataCache_2_io_cpu_writeBack_accessError;
  wire                dataCache_2_io_cpu_writeBack_isWrite;
  wire                dataCache_2_io_cpu_writeBack_keepMemRspData;
  wire                dataCache_2_io_cpu_flush_ready;
  wire                dataCache_2_io_cpu_redo;
  wire                dataCache_2_io_mem_cmd_valid;
  wire                dataCache_2_io_mem_cmd_payload_wr;
  wire                dataCache_2_io_mem_cmd_payload_uncached;
  wire       [31:0]   dataCache_2_io_mem_cmd_payload_address;
  wire       [31:0]   dataCache_2_io_mem_cmd_payload_data;
  wire       [3:0]    dataCache_2_io_mem_cmd_payload_mask;
  wire       [3:0]    dataCache_2_io_mem_cmd_payload_length;
  wire                dataCache_2_io_mem_cmd_payload_exclusive;
  wire                dataCache_2_io_mem_cmd_payload_last;
  wire                dataCache_2_io_mem_inv_ready;
  wire                dataCache_2_io_mem_ack_valid;
  wire                dataCache_2_io_mem_ack_payload_last;
  wire                dataCache_2_io_mem_ack_payload_fragment_hit;
  wire                dataCache_2_io_mem_sync_ready;
  wire                _zz_240;
  wire                _zz_241;
  wire                _zz_242;
  wire                _zz_243;
  wire                _zz_244;
  wire                _zz_245;
  wire                _zz_246;
  wire                _zz_247;
  wire                _zz_248;
  wire                _zz_249;
  wire                _zz_250;
  wire                _zz_251;
  wire                _zz_252;
  wire                _zz_253;
  wire                _zz_254;
  wire                _zz_255;
  wire                _zz_256;
  wire       [1:0]    _zz_257;
  wire                _zz_258;
  wire                _zz_259;
  wire                _zz_260;
  wire                _zz_261;
  wire                _zz_262;
  wire                _zz_263;
  wire                _zz_264;
  wire                _zz_265;
  wire                _zz_266;
  wire                _zz_267;
  wire                _zz_268;
  wire                _zz_269;
  wire                _zz_270;
  wire       [1:0]    _zz_271;
  wire                _zz_272;
  wire                _zz_273;
  wire                _zz_274;
  wire                _zz_275;
  wire                _zz_276;
  wire       [5:0]    _zz_277;
  wire                _zz_278;
  wire                _zz_279;
  wire                _zz_280;
  wire                _zz_281;
  wire                _zz_282;
  wire                _zz_283;
  wire                _zz_284;
  wire                _zz_285;
  wire                _zz_286;
  wire                _zz_287;
  wire                _zz_288;
  wire                _zz_289;
  wire                _zz_290;
  wire                _zz_291;
  wire                _zz_292;
  wire                _zz_293;
  wire                _zz_294;
  wire                _zz_295;
  wire                _zz_296;
  wire                _zz_297;
  wire                _zz_298;
  wire       [1:0]    _zz_299;
  wire       [1:0]    _zz_300;
  wire                _zz_301;
  wire       [51:0]   _zz_302;
  wire       [51:0]   _zz_303;
  wire       [51:0]   _zz_304;
  wire       [32:0]   _zz_305;
  wire       [51:0]   _zz_306;
  wire       [49:0]   _zz_307;
  wire       [51:0]   _zz_308;
  wire       [49:0]   _zz_309;
  wire       [51:0]   _zz_310;
  wire       [0:0]    _zz_311;
  wire       [0:0]    _zz_312;
  wire       [0:0]    _zz_313;
  wire       [0:0]    _zz_314;
  wire       [0:0]    _zz_315;
  wire       [0:0]    _zz_316;
  wire       [0:0]    _zz_317;
  wire       [0:0]    _zz_318;
  wire       [0:0]    _zz_319;
  wire       [0:0]    _zz_320;
  wire       [0:0]    _zz_321;
  wire       [0:0]    _zz_322;
  wire       [0:0]    _zz_323;
  wire       [0:0]    _zz_324;
  wire       [0:0]    _zz_325;
  wire       [0:0]    _zz_326;
  wire       [32:0]   _zz_327;
  wire       [31:0]   _zz_328;
  wire       [32:0]   _zz_329;
  wire       [0:0]    _zz_330;
  wire       [0:0]    _zz_331;
  wire       [0:0]    _zz_332;
  wire       [0:0]    _zz_333;
  wire       [0:0]    _zz_334;
  wire       [0:0]    _zz_335;
  wire       [0:0]    _zz_336;
  wire       [0:0]    _zz_337;
  wire       [1:0]    _zz_338;
  wire       [0:0]    _zz_339;
  wire       [1:0]    _zz_340;
  wire       [0:0]    _zz_341;
  wire       [0:0]    _zz_342;
  wire       [0:0]    _zz_343;
  wire       [0:0]    _zz_344;
  wire       [0:0]    _zz_345;
  wire       [0:0]    _zz_346;
  wire       [0:0]    _zz_347;
  wire       [0:0]    _zz_348;
  wire       [1:0]    _zz_349;
  wire       [3:0]    _zz_350;
  wire       [2:0]    _zz_351;
  wire       [31:0]   _zz_352;
  wire       [0:0]    _zz_353;
  wire       [0:0]    _zz_354;
  wire       [0:0]    _zz_355;
  wire       [0:0]    _zz_356;
  wire       [0:0]    _zz_357;
  wire       [0:0]    _zz_358;
  wire       [0:0]    _zz_359;
  wire       [0:0]    _zz_360;
  wire       [2:0]    _zz_361;
  wire       [2:0]    _zz_362;
  wire       [0:0]    _zz_363;
  wire       [2:0]    _zz_364;
  wire       [4:0]    _zz_365;
  wire       [11:0]   _zz_366;
  wire       [11:0]   _zz_367;
  wire       [31:0]   _zz_368;
  wire       [31:0]   _zz_369;
  wire       [31:0]   _zz_370;
  wire       [31:0]   _zz_371;
  wire       [31:0]   _zz_372;
  wire       [31:0]   _zz_373;
  wire       [31:0]   _zz_374;
  wire       [65:0]   _zz_375;
  wire       [65:0]   _zz_376;
  wire       [31:0]   _zz_377;
  wire       [31:0]   _zz_378;
  wire       [0:0]    _zz_379;
  wire       [5:0]    _zz_380;
  wire       [32:0]   _zz_381;
  wire       [31:0]   _zz_382;
  wire       [31:0]   _zz_383;
  wire       [32:0]   _zz_384;
  wire       [32:0]   _zz_385;
  wire       [32:0]   _zz_386;
  wire       [32:0]   _zz_387;
  wire       [0:0]    _zz_388;
  wire       [32:0]   _zz_389;
  wire       [0:0]    _zz_390;
  wire       [32:0]   _zz_391;
  wire       [0:0]    _zz_392;
  wire       [31:0]   _zz_393;
  wire       [1:0]    _zz_394;
  wire       [1:0]    _zz_395;
  wire       [19:0]   _zz_396;
  wire       [11:0]   _zz_397;
  wire       [11:0]   _zz_398;
  wire       [0:0]    _zz_399;
  wire       [0:0]    _zz_400;
  wire       [0:0]    _zz_401;
  wire       [0:0]    _zz_402;
  wire       [0:0]    _zz_403;
  wire       [0:0]    _zz_404;
  wire       [0:0]    _zz_405;
  wire       [0:0]    _zz_406;
  wire       [0:0]    _zz_407;
  wire       [0:0]    _zz_408;
  wire       [0:0]    _zz_409;
  wire       [0:0]    _zz_410;
  wire       [0:0]    _zz_411;
  wire       [0:0]    _zz_412;
  wire       [0:0]    _zz_413;
  wire       [0:0]    _zz_414;
  wire       [0:0]    _zz_415;
  wire       [0:0]    _zz_416;
  wire       [0:0]    _zz_417;
  wire       [0:0]    _zz_418;
  wire       [0:0]    _zz_419;
  wire       [0:0]    _zz_420;
  wire       [0:0]    _zz_421;
  wire       [0:0]    _zz_422;
  wire       [0:0]    _zz_423;
  wire       [0:0]    _zz_424;
  wire       [0:0]    _zz_425;
  wire       [0:0]    _zz_426;
  wire       [0:0]    _zz_427;
  wire       [0:0]    _zz_428;
  wire       [0:0]    _zz_429;
  wire       [0:0]    _zz_430;
  wire       [0:0]    _zz_431;
  wire       [0:0]    _zz_432;
  wire       [0:0]    _zz_433;
  wire       [0:0]    _zz_434;
  wire       [0:0]    _zz_435;
  wire       [0:0]    _zz_436;
  wire       [0:0]    _zz_437;
  wire       [0:0]    _zz_438;
  wire       [0:0]    _zz_439;
  wire       [0:0]    _zz_440;
  wire       [0:0]    _zz_441;
  wire       [0:0]    _zz_442;
  wire       [0:0]    _zz_443;
  wire       [1:0]    _zz_444;
  wire       [31:0]   _zz_445;
  wire       [31:0]   _zz_446;
  wire       [31:0]   _zz_447;
  wire                _zz_448;
  wire       [0:0]    _zz_449;
  wire       [18:0]   _zz_450;
  wire       [31:0]   _zz_451;
  wire       [31:0]   _zz_452;
  wire       [31:0]   _zz_453;
  wire                _zz_454;
  wire       [0:0]    _zz_455;
  wire       [12:0]   _zz_456;
  wire       [31:0]   _zz_457;
  wire       [31:0]   _zz_458;
  wire       [31:0]   _zz_459;
  wire                _zz_460;
  wire       [0:0]    _zz_461;
  wire       [6:0]    _zz_462;
  wire       [31:0]   _zz_463;
  wire       [31:0]   _zz_464;
  wire       [31:0]   _zz_465;
  wire                _zz_466;
  wire       [0:0]    _zz_467;
  wire       [0:0]    _zz_468;
  wire       [31:0]   _zz_469;
  wire       [0:0]    _zz_470;
  wire       [0:0]    _zz_471;
  wire       [0:0]    _zz_472;
  wire       [0:0]    _zz_473;
  wire                _zz_474;
  wire       [0:0]    _zz_475;
  wire       [31:0]   _zz_476;
  wire       [31:0]   _zz_477;
  wire       [31:0]   _zz_478;
  wire       [31:0]   _zz_479;
  wire       [31:0]   _zz_480;
  wire       [31:0]   _zz_481;
  wire       [31:0]   _zz_482;
  wire       [0:0]    _zz_483;
  wire       [0:0]    _zz_484;
  wire       [0:0]    _zz_485;
  wire       [0:0]    _zz_486;
  wire                _zz_487;
  wire       [0:0]    _zz_488;
  wire       [27:0]   _zz_489;
  wire       [31:0]   _zz_490;
  wire       [31:0]   _zz_491;
  wire                _zz_492;
  wire       [1:0]    _zz_493;
  wire       [1:0]    _zz_494;
  wire                _zz_495;
  wire       [0:0]    _zz_496;
  wire       [23:0]   _zz_497;
  wire       [31:0]   _zz_498;
  wire       [31:0]   _zz_499;
  wire       [31:0]   _zz_500;
  wire       [31:0]   _zz_501;
  wire                _zz_502;
  wire       [0:0]    _zz_503;
  wire       [0:0]    _zz_504;
  wire                _zz_505;
  wire       [0:0]    _zz_506;
  wire       [0:0]    _zz_507;
  wire                _zz_508;
  wire       [0:0]    _zz_509;
  wire       [20:0]   _zz_510;
  wire       [31:0]   _zz_511;
  wire       [31:0]   _zz_512;
  wire       [31:0]   _zz_513;
  wire                _zz_514;
  wire                _zz_515;
  wire                _zz_516;
  wire       [0:0]    _zz_517;
  wire       [0:0]    _zz_518;
  wire                _zz_519;
  wire       [0:0]    _zz_520;
  wire       [17:0]   _zz_521;
  wire       [31:0]   _zz_522;
  wire       [31:0]   _zz_523;
  wire       [31:0]   _zz_524;
  wire       [0:0]    _zz_525;
  wire       [3:0]    _zz_526;
  wire       [0:0]    _zz_527;
  wire       [0:0]    _zz_528;
  wire                _zz_529;
  wire       [0:0]    _zz_530;
  wire       [14:0]   _zz_531;
  wire       [31:0]   _zz_532;
  wire       [31:0]   _zz_533;
  wire                _zz_534;
  wire       [0:0]    _zz_535;
  wire       [0:0]    _zz_536;
  wire       [31:0]   _zz_537;
  wire       [31:0]   _zz_538;
  wire       [31:0]   _zz_539;
  wire       [0:0]    _zz_540;
  wire       [4:0]    _zz_541;
  wire       [2:0]    _zz_542;
  wire       [2:0]    _zz_543;
  wire                _zz_544;
  wire       [0:0]    _zz_545;
  wire       [11:0]   _zz_546;
  wire       [31:0]   _zz_547;
  wire       [31:0]   _zz_548;
  wire       [31:0]   _zz_549;
  wire       [31:0]   _zz_550;
  wire       [31:0]   _zz_551;
  wire       [31:0]   _zz_552;
  wire       [31:0]   _zz_553;
  wire                _zz_554;
  wire       [0:0]    _zz_555;
  wire       [2:0]    _zz_556;
  wire                _zz_557;
  wire       [0:0]    _zz_558;
  wire       [0:0]    _zz_559;
  wire       [0:0]    _zz_560;
  wire       [3:0]    _zz_561;
  wire       [2:0]    _zz_562;
  wire       [2:0]    _zz_563;
  wire                _zz_564;
  wire       [0:0]    _zz_565;
  wire       [9:0]    _zz_566;
  wire       [31:0]   _zz_567;
  wire       [31:0]   _zz_568;
  wire       [31:0]   _zz_569;
  wire                _zz_570;
  wire       [0:0]    _zz_571;
  wire       [0:0]    _zz_572;
  wire       [31:0]   _zz_573;
  wire       [31:0]   _zz_574;
  wire       [31:0]   _zz_575;
  wire       [31:0]   _zz_576;
  wire       [31:0]   _zz_577;
  wire       [31:0]   _zz_578;
  wire       [31:0]   _zz_579;
  wire                _zz_580;
  wire       [0:0]    _zz_581;
  wire       [1:0]    _zz_582;
  wire       [0:0]    _zz_583;
  wire       [0:0]    _zz_584;
  wire       [0:0]    _zz_585;
  wire       [5:0]    _zz_586;
  wire       [1:0]    _zz_587;
  wire       [1:0]    _zz_588;
  wire                _zz_589;
  wire       [0:0]    _zz_590;
  wire       [7:0]    _zz_591;
  wire       [31:0]   _zz_592;
  wire       [31:0]   _zz_593;
  wire       [31:0]   _zz_594;
  wire       [31:0]   _zz_595;
  wire       [31:0]   _zz_596;
  wire       [31:0]   _zz_597;
  wire                _zz_598;
  wire       [31:0]   _zz_599;
  wire       [31:0]   _zz_600;
  wire                _zz_601;
  wire       [0:0]    _zz_602;
  wire       [3:0]    _zz_603;
  wire                _zz_604;
  wire       [0:0]    _zz_605;
  wire       [0:0]    _zz_606;
  wire       [0:0]    _zz_607;
  wire       [0:0]    _zz_608;
  wire                _zz_609;
  wire       [0:0]    _zz_610;
  wire       [5:0]    _zz_611;
  wire       [31:0]   _zz_612;
  wire       [31:0]   _zz_613;
  wire       [31:0]   _zz_614;
  wire       [31:0]   _zz_615;
  wire                _zz_616;
  wire       [0:0]    _zz_617;
  wire       [1:0]    _zz_618;
  wire       [31:0]   _zz_619;
  wire       [31:0]   _zz_620;
  wire       [31:0]   _zz_621;
  wire       [31:0]   _zz_622;
  wire       [31:0]   _zz_623;
  wire                _zz_624;
  wire       [4:0]    _zz_625;
  wire       [4:0]    _zz_626;
  wire                _zz_627;
  wire       [0:0]    _zz_628;
  wire       [3:0]    _zz_629;
  wire       [31:0]   _zz_630;
  wire       [31:0]   _zz_631;
  wire       [31:0]   _zz_632;
  wire                _zz_633;
  wire       [31:0]   _zz_634;
  wire                _zz_635;
  wire       [0:0]    _zz_636;
  wire       [2:0]    _zz_637;
  wire       [0:0]    _zz_638;
  wire       [0:0]    _zz_639;
  wire       [2:0]    _zz_640;
  wire       [2:0]    _zz_641;
  wire                _zz_642;
  wire       [0:0]    _zz_643;
  wire       [1:0]    _zz_644;
  wire       [31:0]   _zz_645;
  wire       [31:0]   _zz_646;
  wire       [31:0]   _zz_647;
  wire       [31:0]   _zz_648;
  wire                _zz_649;
  wire       [0:0]    _zz_650;
  wire       [0:0]    _zz_651;
  wire       [31:0]   _zz_652;
  wire       [31:0]   _zz_653;
  wire                _zz_654;
  wire       [0:0]    _zz_655;
  wire       [0:0]    _zz_656;
  wire       [0:0]    _zz_657;
  wire       [1:0]    _zz_658;
  wire       [1:0]    _zz_659;
  wire       [1:0]    _zz_660;
  wire                _zz_661;
  wire                _zz_662;
  wire       [31:0]   _zz_663;
  wire       [31:0]   _zz_664;
  wire       [31:0]   _zz_665;
  wire       [31:0]   _zz_666;
  wire       [31:0]   _zz_667;
  wire       [31:0]   _zz_668;
  wire       [31:0]   _zz_669;
  wire       [31:0]   _zz_670;
  wire                _zz_671;
  wire                _zz_672;
  wire                _zz_673;
  wire                _zz_674;
  wire       [31:0]   _zz_675;
  wire       [31:0]   _zz_676;
  wire       [31:0]   _zz_677;
  wire       [31:0]   _zz_678;
  wire       [31:0]   memory_CALC;
  wire       [51:0]   memory_MUL_LOW;
  wire       [31:0]   execute_BRANCH_CALC;
  wire                execute_BRANCH_DO;
  wire       [33:0]   memory_MUL_HH;
  wire       [33:0]   execute_MUL_HH;
  wire       [33:0]   execute_MUL_HL;
  wire       [33:0]   execute_MUL_LH;
  wire       [31:0]   execute_MUL_LL;
  wire       [31:0]   memory_REGFILE_WRITE_DATA;
  wire       [31:0]   execute_REGFILE_WRITE_DATA;
  wire       [31:0]   execute_MEMORY_VIRTUAL_ADDRESS;
  wire       [1:0]    memory_MEMORY_ADDRESS_LOW;
  wire       [1:0]    execute_MEMORY_ADDRESS_LOW;
  wire                decode_DO_EBREAK;
  wire                decode_CSR_READ_OPCODE;
  wire                decode_CSR_WRITE_OPCODE;
  wire       [31:0]   decode_SRC2;
  wire       [31:0]   decode_SRC1;
  wire                decode_SRC2_FORCE_ZERO;
  wire                memory_IS_AES;
  wire                execute_IS_AES;
  wire                decode_IS_AES;
  wire       `BranchCtrlEnum_defaultEncoding_type decode_BRANCH_CTRL;
  wire       `BranchCtrlEnum_defaultEncoding_type _zz_1;
  wire       `BranchCtrlEnum_defaultEncoding_type _zz_2;
  wire       `BranchCtrlEnum_defaultEncoding_type _zz_3;
  wire       `EnvCtrlEnum_defaultEncoding_type _zz_4;
  wire       `EnvCtrlEnum_defaultEncoding_type _zz_5;
  wire       `EnvCtrlEnum_defaultEncoding_type _zz_6;
  wire       `EnvCtrlEnum_defaultEncoding_type _zz_7;
  wire       `EnvCtrlEnum_defaultEncoding_type decode_ENV_CTRL;
  wire       `EnvCtrlEnum_defaultEncoding_type _zz_8;
  wire       `EnvCtrlEnum_defaultEncoding_type _zz_9;
  wire       `EnvCtrlEnum_defaultEncoding_type _zz_10;
  wire                decode_IS_CSR;
  wire                decode_IS_RS2_SIGNED;
  wire                decode_IS_RS1_SIGNED;
  wire                decode_IS_DIV;
  wire                memory_IS_MUL;
  wire                execute_IS_MUL;
  wire                decode_IS_MUL;
  wire       `ShiftCtrlEnum_defaultEncoding_type decode_SHIFT_CTRL;
  wire       `ShiftCtrlEnum_defaultEncoding_type _zz_11;
  wire       `ShiftCtrlEnum_defaultEncoding_type _zz_12;
  wire       `ShiftCtrlEnum_defaultEncoding_type _zz_13;
  wire       `AluBitwiseCtrlEnum_defaultEncoding_type decode_ALU_BITWISE_CTRL;
  wire       `AluBitwiseCtrlEnum_defaultEncoding_type _zz_14;
  wire       `AluBitwiseCtrlEnum_defaultEncoding_type _zz_15;
  wire       `AluBitwiseCtrlEnum_defaultEncoding_type _zz_16;
  wire                decode_SRC_LESS_UNSIGNED;
  wire                memory_MEMORY_FENCE;
  wire                execute_MEMORY_FENCE;
  wire                decode_MEMORY_FENCE;
  wire                decode_MEMORY_MANAGMENT;
  wire                memory_MEMORY_AMO;
  wire                memory_MEMORY_LRSC;
  wire                memory_MEMORY_WR;
  wire                decode_MEMORY_WR;
  wire                execute_BYPASSABLE_MEMORY_STAGE;
  wire                decode_BYPASSABLE_MEMORY_STAGE;
  wire                decode_BYPASSABLE_EXECUTE_STAGE;
  wire       `AluCtrlEnum_defaultEncoding_type decode_ALU_CTRL;
  wire       `AluCtrlEnum_defaultEncoding_type _zz_17;
  wire       `AluCtrlEnum_defaultEncoding_type _zz_18;
  wire       `AluCtrlEnum_defaultEncoding_type _zz_19;
  wire                memory_IS_SFENCE_VMA;
  wire                execute_IS_SFENCE_VMA;
  wire                decode_IS_SFENCE_VMA;
  wire                decode_MEMORY_FORCE_CONSTISTENCY;
  wire       [31:0]   writeBack_FORMAL_PC_NEXT;
  wire       [31:0]   memory_FORMAL_PC_NEXT;
  wire       [31:0]   execute_FORMAL_PC_NEXT;
  wire       [31:0]   decode_FORMAL_PC_NEXT;
  wire       [31:0]   memory_PC;
  wire                execute_DO_EBREAK;
  wire                decode_IS_EBREAK;
  wire       [31:0]   writeBack_CALC;
  wire                writeBack_IS_AES;
  wire       [31:0]   memory_RS1;
  wire       [31:0]   memory_BRANCH_CALC;
  wire                memory_BRANCH_DO;
  wire       [31:0]   execute_PC;
  wire       `BranchCtrlEnum_defaultEncoding_type execute_BRANCH_CTRL;
  wire       `BranchCtrlEnum_defaultEncoding_type _zz_20;
  wire                execute_CSR_READ_OPCODE;
  wire                execute_CSR_WRITE_OPCODE;
  wire                execute_IS_CSR;
  wire       `EnvCtrlEnum_defaultEncoding_type memory_ENV_CTRL;
  wire       `EnvCtrlEnum_defaultEncoding_type _zz_21;
  wire       `EnvCtrlEnum_defaultEncoding_type execute_ENV_CTRL;
  wire       `EnvCtrlEnum_defaultEncoding_type _zz_22;
  wire       `EnvCtrlEnum_defaultEncoding_type writeBack_ENV_CTRL;
  wire       `EnvCtrlEnum_defaultEncoding_type _zz_23;
  wire                execute_IS_RS1_SIGNED;
  wire                execute_IS_DIV;
  wire                execute_IS_RS2_SIGNED;
  wire                memory_IS_DIV;
  wire                writeBack_IS_MUL;
  wire       [33:0]   writeBack_MUL_HH;
  wire       [51:0]   writeBack_MUL_LOW;
  wire       [33:0]   memory_MUL_HL;
  wire       [33:0]   memory_MUL_LH;
  wire       [31:0]   memory_MUL_LL;
  (* keep , syn_keep *) wire       [31:0]   execute_RS1 /* synthesis syn_keep = 1 */ ;
  wire                decode_RS2_USE;
  wire                decode_RS1_USE;
  wire                execute_REGFILE_WRITE_VALID;
  wire                execute_BYPASSABLE_EXECUTE_STAGE;
  reg        [31:0]   _zz_24;
  wire                memory_REGFILE_WRITE_VALID;
  wire       [31:0]   memory_INSTRUCTION;
  wire                memory_BYPASSABLE_MEMORY_STAGE;
  wire                writeBack_REGFILE_WRITE_VALID;
  reg        [31:0]   decode_RS2;
  reg        [31:0]   decode_RS1;
  wire       [31:0]   execute_SHIFT_RIGHT;
  reg        [31:0]   _zz_25;
  wire       `ShiftCtrlEnum_defaultEncoding_type execute_SHIFT_CTRL;
  wire       `ShiftCtrlEnum_defaultEncoding_type _zz_26;
  wire                execute_SRC_LESS_UNSIGNED;
  wire                execute_SRC2_FORCE_ZERO;
  wire                execute_SRC_USE_SUB_LESS;
  wire       [31:0]   _zz_27;
  wire       [31:0]   _zz_28;
  wire       `Src2CtrlEnum_defaultEncoding_type decode_SRC2_CTRL;
  wire       `Src2CtrlEnum_defaultEncoding_type _zz_29;
  wire       [31:0]   _zz_30;
  wire       `Src1CtrlEnum_defaultEncoding_type decode_SRC1_CTRL;
  wire       `Src1CtrlEnum_defaultEncoding_type _zz_31;
  wire                decode_SRC_USE_SUB_LESS;
  wire                decode_SRC_ADD_ZERO;
  wire       [31:0]   execute_SRC_ADD_SUB;
  wire                execute_SRC_LESS;
  wire       `AluCtrlEnum_defaultEncoding_type execute_ALU_CTRL;
  wire       `AluCtrlEnum_defaultEncoding_type _zz_32;
  wire       [31:0]   execute_SRC2;
  wire       [31:0]   execute_SRC1;
  wire       `AluBitwiseCtrlEnum_defaultEncoding_type execute_ALU_BITWISE_CTRL;
  wire       `AluBitwiseCtrlEnum_defaultEncoding_type _zz_33;
  wire       [31:0]   _zz_34;
  wire                _zz_35;
  reg                 _zz_36;
  reg                 decode_REGFILE_WRITE_VALID;
  wire                decode_LEGAL_INSTRUCTION;
  wire       `BranchCtrlEnum_defaultEncoding_type _zz_37;
  wire       `EnvCtrlEnum_defaultEncoding_type _zz_38;
  wire       `ShiftCtrlEnum_defaultEncoding_type _zz_39;
  wire       `AluBitwiseCtrlEnum_defaultEncoding_type _zz_40;
  wire       `Src2CtrlEnum_defaultEncoding_type _zz_41;
  wire       `AluCtrlEnum_defaultEncoding_type _zz_42;
  wire       `Src1CtrlEnum_defaultEncoding_type _zz_43;
  wire                writeBack_IS_DBUS_SHARING;
  wire                execute_IS_DBUS_SHARING;
  wire                memory_IS_DBUS_SHARING;
  reg        [31:0]   _zz_44;
  wire       [1:0]    writeBack_MEMORY_ADDRESS_LOW;
  wire                writeBack_MEMORY_WR;
  wire                writeBack_MEMORY_FENCE;
  wire                writeBack_MEMORY_AMO;
  wire                writeBack_MEMORY_LRSC;
  wire       [31:0]   writeBack_REGFILE_WRITE_DATA;
  wire                writeBack_MEMORY_ENABLE;
  wire                memory_MEMORY_ENABLE;
  wire       [31:0]   memory_MEMORY_VIRTUAL_ADDRESS;
  wire                execute_MEMORY_AMO;
  wire                execute_MEMORY_LRSC;
  wire                execute_MEMORY_FORCE_CONSTISTENCY;
  wire                execute_MEMORY_MANAGMENT;
  (* keep , syn_keep *) wire       [31:0]   execute_RS2 /* synthesis syn_keep = 1 */ ;
  wire                execute_MEMORY_WR;
  wire       [31:0]   execute_SRC_ADD;
  wire                execute_MEMORY_ENABLE;
  wire       [31:0]   execute_INSTRUCTION;
  wire                decode_MEMORY_AMO;
  wire                decode_MEMORY_LRSC;
  reg                 _zz_45;
  wire                decode_MEMORY_ENABLE;
  wire                decode_FLUSH_ALL;
  reg                 IBusCachedPlugin_rsp_issueDetected_4;
  reg                 IBusCachedPlugin_rsp_issueDetected_3;
  reg                 IBusCachedPlugin_rsp_issueDetected_2;
  reg                 IBusCachedPlugin_rsp_issueDetected_1;
  wire       [31:0]   decode_INSTRUCTION;
  reg        [31:0]   _zz_46;
  reg        [31:0]   _zz_47;
  wire       [31:0]   decode_PC;
  wire                writeBack_IS_SFENCE_VMA;
  wire       [31:0]   writeBack_PC;
  wire       [31:0]   writeBack_INSTRUCTION;
  reg                 decode_arbitration_haltItself;
  reg                 decode_arbitration_haltByOther;
  reg                 decode_arbitration_removeIt;
  wire                decode_arbitration_flushIt;
  reg                 decode_arbitration_flushNext;
  reg                 decode_arbitration_isValid;
  wire                decode_arbitration_isStuck;
  wire                decode_arbitration_isStuckByOthers;
  wire                decode_arbitration_isFlushed;
  wire                decode_arbitration_isMoving;
  wire                decode_arbitration_isFiring;
  reg                 execute_arbitration_haltItself;
  reg                 execute_arbitration_haltByOther;
  reg                 execute_arbitration_removeIt;
  reg                 execute_arbitration_flushIt;
  reg                 execute_arbitration_flushNext;
  reg                 execute_arbitration_isValid;
  wire                execute_arbitration_isStuck;
  wire                execute_arbitration_isStuckByOthers;
  wire                execute_arbitration_isFlushed;
  wire                execute_arbitration_isMoving;
  wire                execute_arbitration_isFiring;
  reg                 memory_arbitration_haltItself;
  reg                 memory_arbitration_haltByOther;
  reg                 memory_arbitration_removeIt;
  wire                memory_arbitration_flushIt;
  reg                 memory_arbitration_flushNext;
  reg                 memory_arbitration_isValid;
  wire                memory_arbitration_isStuck;
  wire                memory_arbitration_isStuckByOthers;
  wire                memory_arbitration_isFlushed;
  wire                memory_arbitration_isMoving;
  wire                memory_arbitration_isFiring;
  reg                 writeBack_arbitration_haltItself;
  wire                writeBack_arbitration_haltByOther;
  reg                 writeBack_arbitration_removeIt;
  reg                 writeBack_arbitration_flushIt;
  reg                 writeBack_arbitration_flushNext;
  reg                 writeBack_arbitration_isValid;
  wire                writeBack_arbitration_isStuck;
  wire                writeBack_arbitration_isStuckByOthers;
  wire                writeBack_arbitration_isFlushed;
  wire                writeBack_arbitration_isMoving;
  wire                writeBack_arbitration_isFiring;
  wire       [31:0]   lastStageInstruction /* verilator public */ ;
  wire       [31:0]   lastStagePc /* verilator public */ ;
  wire                lastStageIsValid /* verilator public */ ;
  wire                lastStageIsFiring /* verilator public */ ;
  reg                 MmuPlugin_dBusAccess_cmd_valid;
  reg                 MmuPlugin_dBusAccess_cmd_ready;
  reg        [31:0]   MmuPlugin_dBusAccess_cmd_payload_address;
  wire       [1:0]    MmuPlugin_dBusAccess_cmd_payload_size;
  wire                MmuPlugin_dBusAccess_cmd_payload_write;
  wire       [31:0]   MmuPlugin_dBusAccess_cmd_payload_data;
  wire       [3:0]    MmuPlugin_dBusAccess_cmd_payload_writeMask;
  wire                MmuPlugin_dBusAccess_rsp_valid;
  wire       [31:0]   MmuPlugin_dBusAccess_rsp_payload_data;
  wire                MmuPlugin_dBusAccess_rsp_payload_error;
  wire                MmuPlugin_dBusAccess_rsp_payload_redo;
  reg                 IBusCachedPlugin_fetcherHalt;
  reg                 IBusCachedPlugin_incomingInstruction;
  wire                IBusCachedPlugin_pcValids_0;
  wire                IBusCachedPlugin_pcValids_1;
  wire                IBusCachedPlugin_pcValids_2;
  wire                IBusCachedPlugin_pcValids_3;
  reg                 IBusCachedPlugin_decodeExceptionPort_valid;
  reg        [3:0]    IBusCachedPlugin_decodeExceptionPort_payload_code;
  wire       [31:0]   IBusCachedPlugin_decodeExceptionPort_payload_badAddr;
  wire                IBusCachedPlugin_mmuBus_cmd_0_isValid;
  wire                IBusCachedPlugin_mmuBus_cmd_0_isStuck;
  wire       [31:0]   IBusCachedPlugin_mmuBus_cmd_0_virtualAddress;
  wire                IBusCachedPlugin_mmuBus_cmd_0_bypassTranslation;
  wire                IBusCachedPlugin_mmuBus_cmd_1_isValid;
  wire                IBusCachedPlugin_mmuBus_cmd_1_isStuck;
  wire       [31:0]   IBusCachedPlugin_mmuBus_cmd_1_virtualAddress;
  wire                IBusCachedPlugin_mmuBus_cmd_1_bypassTranslation;
  reg        [31:0]   IBusCachedPlugin_mmuBus_rsp_physicalAddress;
  wire                IBusCachedPlugin_mmuBus_rsp_isIoAccess;
  reg                 IBusCachedPlugin_mmuBus_rsp_allowRead;
  reg                 IBusCachedPlugin_mmuBus_rsp_allowWrite;
  reg                 IBusCachedPlugin_mmuBus_rsp_allowExecute;
  reg                 IBusCachedPlugin_mmuBus_rsp_exception;
  reg                 IBusCachedPlugin_mmuBus_rsp_refilling;
  wire                IBusCachedPlugin_mmuBus_rsp_bypassTranslation;
  wire                IBusCachedPlugin_mmuBus_rsp_ways_0_sel;
  wire       [31:0]   IBusCachedPlugin_mmuBus_rsp_ways_0_physical;
  wire                IBusCachedPlugin_mmuBus_rsp_ways_1_sel;
  wire       [31:0]   IBusCachedPlugin_mmuBus_rsp_ways_1_physical;
  wire                IBusCachedPlugin_mmuBus_rsp_ways_2_sel;
  wire       [31:0]   IBusCachedPlugin_mmuBus_rsp_ways_2_physical;
  wire                IBusCachedPlugin_mmuBus_rsp_ways_3_sel;
  wire       [31:0]   IBusCachedPlugin_mmuBus_rsp_ways_3_physical;
  wire                IBusCachedPlugin_mmuBus_end;
  wire                IBusCachedPlugin_mmuBus_busy;
  wire                DBusCachedPlugin_mmuBus_cmd_0_isValid;
  wire                DBusCachedPlugin_mmuBus_cmd_0_isStuck;
  wire       [31:0]   DBusCachedPlugin_mmuBus_cmd_0_virtualAddress;
  reg                 DBusCachedPlugin_mmuBus_cmd_0_bypassTranslation;
  wire                DBusCachedPlugin_mmuBus_cmd_1_isValid;
  wire                DBusCachedPlugin_mmuBus_cmd_1_isStuck;
  wire       [31:0]   DBusCachedPlugin_mmuBus_cmd_1_virtualAddress;
  reg                 DBusCachedPlugin_mmuBus_cmd_1_bypassTranslation;
  reg        [31:0]   DBusCachedPlugin_mmuBus_rsp_physicalAddress;
  wire                DBusCachedPlugin_mmuBus_rsp_isIoAccess;
  reg                 DBusCachedPlugin_mmuBus_rsp_allowRead;
  reg                 DBusCachedPlugin_mmuBus_rsp_allowWrite;
  reg                 DBusCachedPlugin_mmuBus_rsp_allowExecute;
  reg                 DBusCachedPlugin_mmuBus_rsp_exception;
  reg                 DBusCachedPlugin_mmuBus_rsp_refilling;
  wire                DBusCachedPlugin_mmuBus_rsp_bypassTranslation;
  wire                DBusCachedPlugin_mmuBus_rsp_ways_0_sel;
  wire       [31:0]   DBusCachedPlugin_mmuBus_rsp_ways_0_physical;
  wire                DBusCachedPlugin_mmuBus_rsp_ways_1_sel;
  wire       [31:0]   DBusCachedPlugin_mmuBus_rsp_ways_1_physical;
  wire                DBusCachedPlugin_mmuBus_rsp_ways_2_sel;
  wire       [31:0]   DBusCachedPlugin_mmuBus_rsp_ways_2_physical;
  wire                DBusCachedPlugin_mmuBus_rsp_ways_3_sel;
  wire       [31:0]   DBusCachedPlugin_mmuBus_rsp_ways_3_physical;
  wire                DBusCachedPlugin_mmuBus_end;
  wire                DBusCachedPlugin_mmuBus_busy;
  reg                 DBusCachedPlugin_redoBranch_valid;
  wire       [31:0]   DBusCachedPlugin_redoBranch_payload;
  reg                 DBusCachedPlugin_exceptionBus_valid;
  reg        [3:0]    DBusCachedPlugin_exceptionBus_payload_code;
  wire       [31:0]   DBusCachedPlugin_exceptionBus_payload_badAddr;
  reg                 _zz_48;
  wire                decodeExceptionPort_valid;
  wire       [3:0]    decodeExceptionPort_payload_code;
  wire       [31:0]   decodeExceptionPort_payload_badAddr;
  reg                 CsrPlugin_inWfi /* verilator public */ ;
  reg                 CsrPlugin_thirdPartyWake;
  reg                 CsrPlugin_jumpInterface_valid;
  reg        [31:0]   CsrPlugin_jumpInterface_payload;
  reg                 CsrPlugin_redoInterface_valid;
  wire       [31:0]   CsrPlugin_redoInterface_payload;
  wire                CsrPlugin_exceptionPendings_0;
  wire                CsrPlugin_exceptionPendings_1;
  wire                CsrPlugin_exceptionPendings_2;
  wire                CsrPlugin_exceptionPendings_3;
  wire                contextSwitching;
  reg        [1:0]    CsrPlugin_privilege;
  reg                 CsrPlugin_forceMachineWire;
  reg                 CsrPlugin_selfException_valid;
  reg        [3:0]    CsrPlugin_selfException_payload_code;
  wire       [31:0]   CsrPlugin_selfException_payload_badAddr;
  reg                 CsrPlugin_allowInterrupts;
  reg                 CsrPlugin_allowException;
  wire                BranchPlugin_jumpInterface_valid;
  wire       [31:0]   BranchPlugin_jumpInterface_payload;
  wire                BranchPlugin_branchExceptionPort_valid;
  wire       [3:0]    BranchPlugin_branchExceptionPort_payload_code;
  wire       [31:0]   BranchPlugin_branchExceptionPort_payload_badAddr;
  reg                 IBusCachedPlugin_injectionPort_valid;
  reg                 IBusCachedPlugin_injectionPort_ready;
  wire       [31:0]   IBusCachedPlugin_injectionPort_payload;
  reg                 MmuPlugin_status_sum;
  reg                 MmuPlugin_status_mxr;
  reg                 MmuPlugin_status_mprv;
  reg                 MmuPlugin_satp_mode;
  reg        [8:0]    MmuPlugin_satp_asid;
  reg        [19:0]   MmuPlugin_satp_ppn;
  reg                 MmuPlugin_ports_0_cache_0_valid;
  reg                 MmuPlugin_ports_0_cache_0_exception;
  reg                 MmuPlugin_ports_0_cache_0_superPage;
  reg        [9:0]    MmuPlugin_ports_0_cache_0_virtualAddress_0;
  reg        [9:0]    MmuPlugin_ports_0_cache_0_virtualAddress_1;
  reg        [9:0]    MmuPlugin_ports_0_cache_0_physicalAddress_0;
  reg        [9:0]    MmuPlugin_ports_0_cache_0_physicalAddress_1;
  reg                 MmuPlugin_ports_0_cache_0_allowRead;
  reg                 MmuPlugin_ports_0_cache_0_allowWrite;
  reg                 MmuPlugin_ports_0_cache_0_allowExecute;
  reg                 MmuPlugin_ports_0_cache_0_allowUser;
  reg                 MmuPlugin_ports_0_cache_1_valid;
  reg                 MmuPlugin_ports_0_cache_1_exception;
  reg                 MmuPlugin_ports_0_cache_1_superPage;
  reg        [9:0]    MmuPlugin_ports_0_cache_1_virtualAddress_0;
  reg        [9:0]    MmuPlugin_ports_0_cache_1_virtualAddress_1;
  reg        [9:0]    MmuPlugin_ports_0_cache_1_physicalAddress_0;
  reg        [9:0]    MmuPlugin_ports_0_cache_1_physicalAddress_1;
  reg                 MmuPlugin_ports_0_cache_1_allowRead;
  reg                 MmuPlugin_ports_0_cache_1_allowWrite;
  reg                 MmuPlugin_ports_0_cache_1_allowExecute;
  reg                 MmuPlugin_ports_0_cache_1_allowUser;
  reg                 MmuPlugin_ports_0_cache_2_valid;
  reg                 MmuPlugin_ports_0_cache_2_exception;
  reg                 MmuPlugin_ports_0_cache_2_superPage;
  reg        [9:0]    MmuPlugin_ports_0_cache_2_virtualAddress_0;
  reg        [9:0]    MmuPlugin_ports_0_cache_2_virtualAddress_1;
  reg        [9:0]    MmuPlugin_ports_0_cache_2_physicalAddress_0;
  reg        [9:0]    MmuPlugin_ports_0_cache_2_physicalAddress_1;
  reg                 MmuPlugin_ports_0_cache_2_allowRead;
  reg                 MmuPlugin_ports_0_cache_2_allowWrite;
  reg                 MmuPlugin_ports_0_cache_2_allowExecute;
  reg                 MmuPlugin_ports_0_cache_2_allowUser;
  reg                 MmuPlugin_ports_0_cache_3_valid;
  reg                 MmuPlugin_ports_0_cache_3_exception;
  reg                 MmuPlugin_ports_0_cache_3_superPage;
  reg        [9:0]    MmuPlugin_ports_0_cache_3_virtualAddress_0;
  reg        [9:0]    MmuPlugin_ports_0_cache_3_virtualAddress_1;
  reg        [9:0]    MmuPlugin_ports_0_cache_3_physicalAddress_0;
  reg        [9:0]    MmuPlugin_ports_0_cache_3_physicalAddress_1;
  reg                 MmuPlugin_ports_0_cache_3_allowRead;
  reg                 MmuPlugin_ports_0_cache_3_allowWrite;
  reg                 MmuPlugin_ports_0_cache_3_allowExecute;
  reg                 MmuPlugin_ports_0_cache_3_allowUser;
  reg                 MmuPlugin_ports_0_dirty;
  reg                 MmuPlugin_ports_0_requireMmuLockupCalc;
  reg        [3:0]    MmuPlugin_ports_0_cacheHitsCalc;
  reg                 MmuPlugin_ports_0_requireMmuLockup;
  reg        [3:0]    MmuPlugin_ports_0_cacheHits;
  wire                MmuPlugin_ports_0_cacheHit;
  wire                _zz_49;
  wire                _zz_50;
  wire                _zz_51;
  wire       [1:0]    _zz_52;
  wire                MmuPlugin_ports_0_cacheLine_valid;
  wire                MmuPlugin_ports_0_cacheLine_exception;
  wire                MmuPlugin_ports_0_cacheLine_superPage;
  wire       [9:0]    MmuPlugin_ports_0_cacheLine_virtualAddress_0;
  wire       [9:0]    MmuPlugin_ports_0_cacheLine_virtualAddress_1;
  wire       [9:0]    MmuPlugin_ports_0_cacheLine_physicalAddress_0;
  wire       [9:0]    MmuPlugin_ports_0_cacheLine_physicalAddress_1;
  wire                MmuPlugin_ports_0_cacheLine_allowRead;
  wire                MmuPlugin_ports_0_cacheLine_allowWrite;
  wire                MmuPlugin_ports_0_cacheLine_allowExecute;
  wire                MmuPlugin_ports_0_cacheLine_allowUser;
  reg                 MmuPlugin_ports_0_entryToReplace_willIncrement;
  wire                MmuPlugin_ports_0_entryToReplace_willClear;
  reg        [1:0]    MmuPlugin_ports_0_entryToReplace_valueNext;
  reg        [1:0]    MmuPlugin_ports_0_entryToReplace_value;
  wire                MmuPlugin_ports_0_entryToReplace_willOverflowIfInc;
  wire                MmuPlugin_ports_0_entryToReplace_willOverflow;
  reg                 MmuPlugin_ports_1_cache_0_valid;
  reg                 MmuPlugin_ports_1_cache_0_exception;
  reg                 MmuPlugin_ports_1_cache_0_superPage;
  reg        [9:0]    MmuPlugin_ports_1_cache_0_virtualAddress_0;
  reg        [9:0]    MmuPlugin_ports_1_cache_0_virtualAddress_1;
  reg        [9:0]    MmuPlugin_ports_1_cache_0_physicalAddress_0;
  reg        [9:0]    MmuPlugin_ports_1_cache_0_physicalAddress_1;
  reg                 MmuPlugin_ports_1_cache_0_allowRead;
  reg                 MmuPlugin_ports_1_cache_0_allowWrite;
  reg                 MmuPlugin_ports_1_cache_0_allowExecute;
  reg                 MmuPlugin_ports_1_cache_0_allowUser;
  reg                 MmuPlugin_ports_1_cache_1_valid;
  reg                 MmuPlugin_ports_1_cache_1_exception;
  reg                 MmuPlugin_ports_1_cache_1_superPage;
  reg        [9:0]    MmuPlugin_ports_1_cache_1_virtualAddress_0;
  reg        [9:0]    MmuPlugin_ports_1_cache_1_virtualAddress_1;
  reg        [9:0]    MmuPlugin_ports_1_cache_1_physicalAddress_0;
  reg        [9:0]    MmuPlugin_ports_1_cache_1_physicalAddress_1;
  reg                 MmuPlugin_ports_1_cache_1_allowRead;
  reg                 MmuPlugin_ports_1_cache_1_allowWrite;
  reg                 MmuPlugin_ports_1_cache_1_allowExecute;
  reg                 MmuPlugin_ports_1_cache_1_allowUser;
  reg                 MmuPlugin_ports_1_cache_2_valid;
  reg                 MmuPlugin_ports_1_cache_2_exception;
  reg                 MmuPlugin_ports_1_cache_2_superPage;
  reg        [9:0]    MmuPlugin_ports_1_cache_2_virtualAddress_0;
  reg        [9:0]    MmuPlugin_ports_1_cache_2_virtualAddress_1;
  reg        [9:0]    MmuPlugin_ports_1_cache_2_physicalAddress_0;
  reg        [9:0]    MmuPlugin_ports_1_cache_2_physicalAddress_1;
  reg                 MmuPlugin_ports_1_cache_2_allowRead;
  reg                 MmuPlugin_ports_1_cache_2_allowWrite;
  reg                 MmuPlugin_ports_1_cache_2_allowExecute;
  reg                 MmuPlugin_ports_1_cache_2_allowUser;
  reg                 MmuPlugin_ports_1_cache_3_valid;
  reg                 MmuPlugin_ports_1_cache_3_exception;
  reg                 MmuPlugin_ports_1_cache_3_superPage;
  reg        [9:0]    MmuPlugin_ports_1_cache_3_virtualAddress_0;
  reg        [9:0]    MmuPlugin_ports_1_cache_3_virtualAddress_1;
  reg        [9:0]    MmuPlugin_ports_1_cache_3_physicalAddress_0;
  reg        [9:0]    MmuPlugin_ports_1_cache_3_physicalAddress_1;
  reg                 MmuPlugin_ports_1_cache_3_allowRead;
  reg                 MmuPlugin_ports_1_cache_3_allowWrite;
  reg                 MmuPlugin_ports_1_cache_3_allowExecute;
  reg                 MmuPlugin_ports_1_cache_3_allowUser;
  reg                 MmuPlugin_ports_1_dirty;
  reg                 MmuPlugin_ports_1_requireMmuLockupCalc;
  reg        [3:0]    MmuPlugin_ports_1_cacheHitsCalc;
  reg                 MmuPlugin_ports_1_requireMmuLockup;
  reg        [3:0]    MmuPlugin_ports_1_cacheHits;
  wire                MmuPlugin_ports_1_cacheHit;
  wire                _zz_53;
  wire                _zz_54;
  wire                _zz_55;
  wire       [1:0]    _zz_56;
  wire                MmuPlugin_ports_1_cacheLine_valid;
  wire                MmuPlugin_ports_1_cacheLine_exception;
  wire                MmuPlugin_ports_1_cacheLine_superPage;
  wire       [9:0]    MmuPlugin_ports_1_cacheLine_virtualAddress_0;
  wire       [9:0]    MmuPlugin_ports_1_cacheLine_virtualAddress_1;
  wire       [9:0]    MmuPlugin_ports_1_cacheLine_physicalAddress_0;
  wire       [9:0]    MmuPlugin_ports_1_cacheLine_physicalAddress_1;
  wire                MmuPlugin_ports_1_cacheLine_allowRead;
  wire                MmuPlugin_ports_1_cacheLine_allowWrite;
  wire                MmuPlugin_ports_1_cacheLine_allowExecute;
  wire                MmuPlugin_ports_1_cacheLine_allowUser;
  reg                 MmuPlugin_ports_1_entryToReplace_willIncrement;
  wire                MmuPlugin_ports_1_entryToReplace_willClear;
  reg        [1:0]    MmuPlugin_ports_1_entryToReplace_valueNext;
  reg        [1:0]    MmuPlugin_ports_1_entryToReplace_value;
  wire                MmuPlugin_ports_1_entryToReplace_willOverflowIfInc;
  wire                MmuPlugin_ports_1_entryToReplace_willOverflow;
  reg        `MmuPlugin_shared_State_defaultEncoding_type MmuPlugin_shared_state_1;
  reg        [9:0]    MmuPlugin_shared_vpn_0;
  reg        [9:0]    MmuPlugin_shared_vpn_1;
  reg        [1:0]    MmuPlugin_shared_portSortedOh;
  reg                 MmuPlugin_shared_dBusRspStaged_valid;
  reg        [31:0]   MmuPlugin_shared_dBusRspStaged_payload_data;
  reg                 MmuPlugin_shared_dBusRspStaged_payload_error;
  reg                 MmuPlugin_shared_dBusRspStaged_payload_redo;
  wire                MmuPlugin_shared_dBusRsp_pte_V;
  wire                MmuPlugin_shared_dBusRsp_pte_R;
  wire                MmuPlugin_shared_dBusRsp_pte_W;
  wire                MmuPlugin_shared_dBusRsp_pte_X;
  wire                MmuPlugin_shared_dBusRsp_pte_U;
  wire                MmuPlugin_shared_dBusRsp_pte_G;
  wire                MmuPlugin_shared_dBusRsp_pte_A;
  wire                MmuPlugin_shared_dBusRsp_pte_D;
  wire       [1:0]    MmuPlugin_shared_dBusRsp_pte_RSW;
  wire       [9:0]    MmuPlugin_shared_dBusRsp_pte_PPN0;
  wire       [11:0]   MmuPlugin_shared_dBusRsp_pte_PPN1;
  wire                MmuPlugin_shared_dBusRsp_exception;
  wire                MmuPlugin_shared_dBusRsp_leaf;
  reg                 MmuPlugin_shared_pteBuffer_V;
  reg                 MmuPlugin_shared_pteBuffer_R;
  reg                 MmuPlugin_shared_pteBuffer_W;
  reg                 MmuPlugin_shared_pteBuffer_X;
  reg                 MmuPlugin_shared_pteBuffer_U;
  reg                 MmuPlugin_shared_pteBuffer_G;
  reg                 MmuPlugin_shared_pteBuffer_A;
  reg                 MmuPlugin_shared_pteBuffer_D;
  reg        [1:0]    MmuPlugin_shared_pteBuffer_RSW;
  reg        [9:0]    MmuPlugin_shared_pteBuffer_PPN0;
  reg        [11:0]   MmuPlugin_shared_pteBuffer_PPN1;
  reg        [1:0]    _zz_57;
  wire       [1:0]    _zz_58;
  reg        [1:0]    _zz_59;
  wire       [1:0]    MmuPlugin_shared_refills;
  wire       [1:0]    _zz_60;
  reg        [1:0]    _zz_61;
  wire       [31:0]   _zz_62;
  wire                IBusCachedPlugin_externalFlush;
  wire                IBusCachedPlugin_jump_pcLoad_valid;
  wire       [31:0]   IBusCachedPlugin_jump_pcLoad_payload;
  wire       [3:0]    _zz_63;
  wire       [3:0]    _zz_64;
  wire                _zz_65;
  wire                _zz_66;
  wire                _zz_67;
  wire                IBusCachedPlugin_fetchPc_output_valid;
  wire                IBusCachedPlugin_fetchPc_output_ready;
  wire       [31:0]   IBusCachedPlugin_fetchPc_output_payload;
  reg        [31:0]   IBusCachedPlugin_fetchPc_pcReg /* verilator public */ ;
  reg                 IBusCachedPlugin_fetchPc_correction;
  reg                 IBusCachedPlugin_fetchPc_correctionReg;
  wire                IBusCachedPlugin_fetchPc_corrected;
  reg                 IBusCachedPlugin_fetchPc_pcRegPropagate;
  reg                 IBusCachedPlugin_fetchPc_booted;
  reg                 IBusCachedPlugin_fetchPc_inc;
  reg        [31:0]   IBusCachedPlugin_fetchPc_pc;
  wire                IBusCachedPlugin_fetchPc_redo_valid;
  wire       [31:0]   IBusCachedPlugin_fetchPc_redo_payload;
  reg                 IBusCachedPlugin_fetchPc_flushed;
  reg                 IBusCachedPlugin_iBusRsp_redoFetch;
  wire                IBusCachedPlugin_iBusRsp_stages_0_input_valid;
  wire                IBusCachedPlugin_iBusRsp_stages_0_input_ready;
  wire       [31:0]   IBusCachedPlugin_iBusRsp_stages_0_input_payload;
  wire                IBusCachedPlugin_iBusRsp_stages_0_output_valid;
  wire                IBusCachedPlugin_iBusRsp_stages_0_output_ready;
  wire       [31:0]   IBusCachedPlugin_iBusRsp_stages_0_output_payload;
  reg                 IBusCachedPlugin_iBusRsp_stages_0_halt;
  wire                IBusCachedPlugin_iBusRsp_stages_1_input_valid;
  wire                IBusCachedPlugin_iBusRsp_stages_1_input_ready;
  wire       [31:0]   IBusCachedPlugin_iBusRsp_stages_1_input_payload;
  wire                IBusCachedPlugin_iBusRsp_stages_1_output_valid;
  wire                IBusCachedPlugin_iBusRsp_stages_1_output_ready;
  wire       [31:0]   IBusCachedPlugin_iBusRsp_stages_1_output_payload;
  wire                IBusCachedPlugin_iBusRsp_stages_1_halt;
  wire                IBusCachedPlugin_iBusRsp_stages_2_input_valid;
  wire                IBusCachedPlugin_iBusRsp_stages_2_input_ready;
  wire       [31:0]   IBusCachedPlugin_iBusRsp_stages_2_input_payload;
  wire                IBusCachedPlugin_iBusRsp_stages_2_output_valid;
  wire                IBusCachedPlugin_iBusRsp_stages_2_output_ready;
  wire       [31:0]   IBusCachedPlugin_iBusRsp_stages_2_output_payload;
  reg                 IBusCachedPlugin_iBusRsp_stages_2_halt;
  wire                _zz_68;
  wire                _zz_69;
  wire                _zz_70;
  wire                IBusCachedPlugin_iBusRsp_flush;
  wire                _zz_71;
  wire                _zz_72;
  reg                 _zz_73;
  wire                _zz_74;
  reg                 _zz_75;
  reg        [31:0]   _zz_76;
  reg                 IBusCachedPlugin_iBusRsp_readyForError;
  wire                IBusCachedPlugin_iBusRsp_output_valid;
  wire                IBusCachedPlugin_iBusRsp_output_ready;
  wire       [31:0]   IBusCachedPlugin_iBusRsp_output_payload_pc;
  wire                IBusCachedPlugin_iBusRsp_output_payload_rsp_error;
  wire       [31:0]   IBusCachedPlugin_iBusRsp_output_payload_rsp_inst;
  wire                IBusCachedPlugin_iBusRsp_output_payload_isRvc;
  reg                 IBusCachedPlugin_injector_nextPcCalc_valids_0;
  reg                 IBusCachedPlugin_injector_nextPcCalc_valids_1;
  reg                 IBusCachedPlugin_injector_nextPcCalc_valids_2;
  reg                 IBusCachedPlugin_injector_nextPcCalc_valids_3;
  reg                 IBusCachedPlugin_injector_nextPcCalc_valids_4;
  wire       [31:0]   _zz_77;
  reg        [31:0]   IBusCachedPlugin_rspCounter;
  wire                IBusCachedPlugin_s0_tightlyCoupledHit;
  reg                 IBusCachedPlugin_s1_tightlyCoupledHit;
  reg                 IBusCachedPlugin_s2_tightlyCoupledHit;
  wire                IBusCachedPlugin_rsp_iBusRspOutputHalt;
  wire                IBusCachedPlugin_rsp_issueDetected;
  reg                 IBusCachedPlugin_rsp_redoFetch;
  wire                dataCache_2_io_mem_cmd_s2mPipe_valid;
  wire                dataCache_2_io_mem_cmd_s2mPipe_ready;
  wire                dataCache_2_io_mem_cmd_s2mPipe_payload_wr;
  wire                dataCache_2_io_mem_cmd_s2mPipe_payload_uncached;
  wire       [31:0]   dataCache_2_io_mem_cmd_s2mPipe_payload_address;
  wire       [31:0]   dataCache_2_io_mem_cmd_s2mPipe_payload_data;
  wire       [3:0]    dataCache_2_io_mem_cmd_s2mPipe_payload_mask;
  wire       [3:0]    dataCache_2_io_mem_cmd_s2mPipe_payload_length;
  wire                dataCache_2_io_mem_cmd_s2mPipe_payload_exclusive;
  wire                dataCache_2_io_mem_cmd_s2mPipe_payload_last;
  reg                 dataCache_2_io_mem_cmd_s2mPipe_rValid;
  reg                 dataCache_2_io_mem_cmd_s2mPipe_rData_wr;
  reg                 dataCache_2_io_mem_cmd_s2mPipe_rData_uncached;
  reg        [31:0]   dataCache_2_io_mem_cmd_s2mPipe_rData_address;
  reg        [31:0]   dataCache_2_io_mem_cmd_s2mPipe_rData_data;
  reg        [3:0]    dataCache_2_io_mem_cmd_s2mPipe_rData_mask;
  reg        [3:0]    dataCache_2_io_mem_cmd_s2mPipe_rData_length;
  reg                 dataCache_2_io_mem_cmd_s2mPipe_rData_exclusive;
  reg                 dataCache_2_io_mem_cmd_s2mPipe_rData_last;
  reg                 dBus_rsp_valid_regNext;
  reg                 dBus_rsp_payload_exclusive_regNext;
  reg                 dBus_rsp_payload_error_regNext;
  reg                 dBus_rsp_payload_last_regNext;
  reg        [2:0]    dBus_rsp_payload_aggregated_regNext;
  reg        [63:0]   dBus_rsp_payload_data_regNextWhen;
  wire       [31:0]   _zz_78;
  reg        [31:0]   DBusCachedPlugin_rspCounter;
  wire       [1:0]    execute_DBusCachedPlugin_size;
  reg        [31:0]   _zz_79;
  wire       [11:0]   _zz_80;
  reg                 writeBack_DBusCachedPlugin_fence_aquire;
  reg        [31:0]   writeBack_DBusCachedPlugin_rspShifted;
  wire                _zz_81;
  reg        [31:0]   _zz_82;
  wire                _zz_83;
  reg        [31:0]   _zz_84;
  reg        [31:0]   writeBack_DBusCachedPlugin_rspFormated;
  reg                 DBusCachedPlugin_forceDatapath;
  wire       [37:0]   _zz_85;
  wire                _zz_86;
  wire                _zz_87;
  wire                _zz_88;
  wire                _zz_89;
  wire                _zz_90;
  wire                _zz_91;
  wire                _zz_92;
  wire                _zz_93;
  wire       `Src1CtrlEnum_defaultEncoding_type _zz_94;
  wire       `AluCtrlEnum_defaultEncoding_type _zz_95;
  wire       `Src2CtrlEnum_defaultEncoding_type _zz_96;
  wire       `AluBitwiseCtrlEnum_defaultEncoding_type _zz_97;
  wire       `ShiftCtrlEnum_defaultEncoding_type _zz_98;
  wire       `EnvCtrlEnum_defaultEncoding_type _zz_99;
  wire       `BranchCtrlEnum_defaultEncoding_type _zz_100;
  wire       [4:0]    decode_RegFilePlugin_regFileReadAddress1;
  wire       [4:0]    decode_RegFilePlugin_regFileReadAddress2;
  wire       [31:0]   decode_RegFilePlugin_rs1Data;
  wire       [31:0]   decode_RegFilePlugin_rs2Data;
  reg                 lastStageRegFileWrite_valid /* verilator public */ ;
  reg        [4:0]    lastStageRegFileWrite_payload_address /* verilator public */ ;
  reg        [31:0]   lastStageRegFileWrite_payload_data /* verilator public */ ;
  reg                 _zz_101;
  reg        [31:0]   execute_IntAluPlugin_bitwise;
  reg        [31:0]   _zz_102;
  reg        [31:0]   _zz_103;
  wire                _zz_104;
  reg        [19:0]   _zz_105;
  wire                _zz_106;
  reg        [19:0]   _zz_107;
  reg        [31:0]   _zz_108;
  reg        [31:0]   execute_SrcPlugin_addSub;
  wire                execute_SrcPlugin_less;
  wire       [4:0]    execute_FullBarrelShifterPlugin_amplitude;
  reg        [31:0]   _zz_109;
  wire       [31:0]   execute_FullBarrelShifterPlugin_reversed;
  reg        [31:0]   _zz_110;
  reg                 _zz_111;
  reg                 _zz_112;
  reg                 _zz_113;
  reg        [4:0]    _zz_114;
  reg        [31:0]   _zz_115;
  wire                _zz_116;
  wire                _zz_117;
  wire                _zz_118;
  wire                _zz_119;
  wire                _zz_120;
  wire                _zz_121;
  reg                 execute_MulPlugin_aSigned;
  reg                 execute_MulPlugin_bSigned;
  wire       [31:0]   execute_MulPlugin_a;
  wire       [31:0]   execute_MulPlugin_b;
  wire       [15:0]   execute_MulPlugin_aULow;
  wire       [15:0]   execute_MulPlugin_bULow;
  wire       [16:0]   execute_MulPlugin_aSLow;
  wire       [16:0]   execute_MulPlugin_bSLow;
  wire       [16:0]   execute_MulPlugin_aHigh;
  wire       [16:0]   execute_MulPlugin_bHigh;
  wire       [65:0]   writeBack_MulPlugin_result;
  reg        [32:0]   memory_MulDivIterativePlugin_rs1;
  reg        [31:0]   memory_MulDivIterativePlugin_rs2;
  reg        [64:0]   memory_MulDivIterativePlugin_accumulator;
  wire                memory_MulDivIterativePlugin_frontendOk;
  reg                 memory_MulDivIterativePlugin_div_needRevert;
  reg                 memory_MulDivIterativePlugin_div_counter_willIncrement;
  reg                 memory_MulDivIterativePlugin_div_counter_willClear;
  reg        [5:0]    memory_MulDivIterativePlugin_div_counter_valueNext;
  reg        [5:0]    memory_MulDivIterativePlugin_div_counter_value;
  wire                memory_MulDivIterativePlugin_div_counter_willOverflowIfInc;
  wire                memory_MulDivIterativePlugin_div_counter_willOverflow;
  reg                 memory_MulDivIterativePlugin_div_done;
  reg        [31:0]   memory_MulDivIterativePlugin_div_result;
  wire       [31:0]   _zz_122;
  wire       [32:0]   memory_MulDivIterativePlugin_div_stage_0_remainderShifted;
  wire       [32:0]   memory_MulDivIterativePlugin_div_stage_0_remainderMinusDenominator;
  wire       [31:0]   memory_MulDivIterativePlugin_div_stage_0_outRemainder;
  wire       [31:0]   memory_MulDivIterativePlugin_div_stage_0_outNumerator;
  wire       [31:0]   _zz_123;
  wire                _zz_124;
  wire                _zz_125;
  reg        [32:0]   _zz_126;
  reg        [1:0]    _zz_127;
  wire       [1:0]    CsrPlugin_misa_base;
  wire       [25:0]   CsrPlugin_misa_extensions;
  reg        [1:0]    CsrPlugin_mtvec_mode;
  reg        [29:0]   CsrPlugin_mtvec_base;
  reg        [31:0]   CsrPlugin_mepc;
  reg                 CsrPlugin_mstatus_MIE;
  reg                 CsrPlugin_mstatus_MPIE;
  reg        [1:0]    CsrPlugin_mstatus_MPP;
  reg                 CsrPlugin_mip_MEIP;
  reg                 CsrPlugin_mip_MTIP;
  reg                 CsrPlugin_mip_MSIP;
  reg                 CsrPlugin_mie_MEIE;
  reg                 CsrPlugin_mie_MTIE;
  reg                 CsrPlugin_mie_MSIE;
  reg        [31:0]   CsrPlugin_mscratch;
  reg                 CsrPlugin_mcause_interrupt;
  reg        [3:0]    CsrPlugin_mcause_exceptionCode;
  reg        [31:0]   CsrPlugin_mtval;
  reg        [63:0]   CsrPlugin_mcycle = 64'b0000000000000000000000000000000000000000000000000000000000000000;
  reg        [63:0]   CsrPlugin_minstret = 64'b0000000000000000000000000000000000000000000000000000000000000000;
  reg                 CsrPlugin_medeleg_IAM;
  reg                 CsrPlugin_medeleg_IAF;
  reg                 CsrPlugin_medeleg_II;
  reg                 CsrPlugin_medeleg_LAM;
  reg                 CsrPlugin_medeleg_LAF;
  reg                 CsrPlugin_medeleg_SAM;
  reg                 CsrPlugin_medeleg_SAF;
  reg                 CsrPlugin_medeleg_EU;
  reg                 CsrPlugin_medeleg_ES;
  reg                 CsrPlugin_medeleg_IPF;
  reg                 CsrPlugin_medeleg_LPF;
  reg                 CsrPlugin_medeleg_SPF;
  reg                 CsrPlugin_mideleg_ST;
  reg                 CsrPlugin_mideleg_SE;
  reg                 CsrPlugin_mideleg_SS;
  reg                 CsrPlugin_sstatus_SIE;
  reg                 CsrPlugin_sstatus_SPIE;
  reg        [0:0]    CsrPlugin_sstatus_SPP;
  reg                 CsrPlugin_sip_SEIP_SOFT;
  reg                 CsrPlugin_sip_SEIP_INPUT;
  wire                CsrPlugin_sip_SEIP_OR;
  reg                 CsrPlugin_sip_STIP;
  reg                 CsrPlugin_sip_SSIP;
  reg                 CsrPlugin_sie_SEIE;
  reg                 CsrPlugin_sie_STIE;
  reg                 CsrPlugin_sie_SSIE;
  reg        [1:0]    CsrPlugin_stvec_mode;
  reg        [29:0]   CsrPlugin_stvec_base;
  reg        [31:0]   CsrPlugin_sscratch;
  reg                 CsrPlugin_scause_interrupt;
  reg        [3:0]    CsrPlugin_scause_exceptionCode;
  reg        [31:0]   CsrPlugin_stval;
  reg        [31:0]   CsrPlugin_sepc;
  reg        [21:0]   CsrPlugin_satp_PPN;
  reg        [8:0]    CsrPlugin_satp_ASID;
  reg        [0:0]    CsrPlugin_satp_MODE;
  wire                _zz_128;
  wire                _zz_129;
  wire                _zz_130;
  wire                _zz_131;
  wire                _zz_132;
  wire                _zz_133;
  reg                 CsrPlugin_exceptionPortCtrl_exceptionValids_decode;
  reg                 CsrPlugin_exceptionPortCtrl_exceptionValids_execute;
  reg                 CsrPlugin_exceptionPortCtrl_exceptionValids_memory;
  reg                 CsrPlugin_exceptionPortCtrl_exceptionValids_writeBack;
  reg                 CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_decode;
  reg                 CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_execute;
  reg                 CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_memory;
  reg                 CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_writeBack;
  reg        [3:0]    CsrPlugin_exceptionPortCtrl_exceptionContext_code;
  reg        [31:0]   CsrPlugin_exceptionPortCtrl_exceptionContext_badAddr;
  reg        [1:0]    CsrPlugin_exceptionPortCtrl_exceptionTargetPrivilegeUncapped;
  wire       [1:0]    CsrPlugin_exceptionPortCtrl_exceptionTargetPrivilege;
  wire       [1:0]    _zz_134;
  wire                _zz_135;
  reg                 CsrPlugin_interrupt_valid;
  reg        [3:0]    CsrPlugin_interrupt_code /* verilator public */ ;
  reg        [1:0]    CsrPlugin_interrupt_targetPrivilege;
  wire                CsrPlugin_exception;
  reg                 CsrPlugin_lastStageWasWfi;
  reg                 CsrPlugin_pipelineLiberator_pcValids_0;
  reg                 CsrPlugin_pipelineLiberator_pcValids_1;
  reg                 CsrPlugin_pipelineLiberator_pcValids_2;
  wire                CsrPlugin_pipelineLiberator_active;
  reg                 CsrPlugin_pipelineLiberator_done;
  wire                CsrPlugin_interruptJump /* verilator public */ ;
  reg                 CsrPlugin_hadException /* verilator public */ ;
  reg        [1:0]    CsrPlugin_targetPrivilege;
  reg        [3:0]    CsrPlugin_trapCause;
  reg        [1:0]    CsrPlugin_xtvec_mode;
  reg        [29:0]   CsrPlugin_xtvec_base;
  reg                 execute_CsrPlugin_wfiWake;
  wire                execute_CsrPlugin_blockedBySideEffects;
  reg                 execute_CsrPlugin_illegalAccess;
  reg                 execute_CsrPlugin_illegalInstruction;
  wire       [31:0]   execute_CsrPlugin_readData;
  reg                 execute_CsrPlugin_writeInstruction;
  reg                 execute_CsrPlugin_readInstruction;
  wire                execute_CsrPlugin_writeEnable;
  wire                execute_CsrPlugin_readEnable;
  reg        [31:0]   execute_CsrPlugin_readToWriteData;
  reg        [31:0]   execute_CsrPlugin_writeData;
  wire       [11:0]   execute_CsrPlugin_csrAddress;
  wire                execute_BranchPlugin_eq;
  wire       [2:0]    _zz_136;
  reg                 _zz_137;
  reg                 _zz_138;
  wire       [31:0]   execute_BranchPlugin_branch_src1;
  wire                _zz_139;
  reg        [10:0]   _zz_140;
  wire                _zz_141;
  reg        [19:0]   _zz_142;
  wire                _zz_143;
  reg        [18:0]   _zz_144;
  reg        [31:0]   _zz_145;
  wire       [31:0]   execute_BranchPlugin_branch_src2;
  wire       [31:0]   execute_BranchPlugin_branchAdder;
  wire       [1:0]    execute_AesPlugin_byteSel;
  wire                execute_AesPlugin_bankSel;
  wire       [8:0]    execute_AesPlugin_romAddress;
  wire                _zz_146;
  wire       [31:0]   memory_AesPlugin_rom_data;
  wire       [7:0]    memory_AesPlugin_rom_bytes_0;
  wire       [7:0]    memory_AesPlugin_rom_bytes_1;
  wire       [7:0]    memory_AesPlugin_rom_bytes_2;
  wire       [7:0]    memory_AesPlugin_rom_bytes_3;
  wire       [1:0]    memory_AesPlugin_rom_remap_0_0;
  wire       [1:0]    memory_AesPlugin_rom_remap_0_1;
  wire       [1:0]    memory_AesPlugin_rom_remap_0_2;
  wire       [1:0]    memory_AesPlugin_rom_remap_0_3;
  wire       [1:0]    memory_AesPlugin_rom_remap_1_0;
  wire       [1:0]    memory_AesPlugin_rom_remap_1_1;
  wire       [1:0]    memory_AesPlugin_rom_remap_1_2;
  wire       [1:0]    memory_AesPlugin_rom_remap_1_3;
  wire       [1:0]    memory_AesPlugin_rom_remap_2_0;
  wire       [1:0]    memory_AesPlugin_rom_remap_2_1;
  wire       [1:0]    memory_AesPlugin_rom_remap_2_2;
  wire       [1:0]    memory_AesPlugin_rom_remap_2_3;
  wire       [1:0]    memory_AesPlugin_rom_remap_3_0;
  wire       [1:0]    memory_AesPlugin_rom_remap_3_1;
  wire       [1:0]    memory_AesPlugin_rom_remap_3_2;
  wire       [1:0]    memory_AesPlugin_rom_remap_3_3;
  wire       [1:0]    memory_AesPlugin_rom_address;
  wire       [1:0]    memory_AesPlugin_rom_output_0;
  wire       [1:0]    memory_AesPlugin_rom_output_1;
  wire       [1:0]    memory_AesPlugin_rom_output_2;
  wire       [1:0]    memory_AesPlugin_rom_output_3;
  reg        [3:0]    memory_AesPlugin_wordDesuffle_zero;
  wire       [1:0]    memory_AesPlugin_wordDesuffle_byteSel;
  reg        [7:0]    memory_AesPlugin_wordDesuffle_output_0;
  reg        [7:0]    memory_AesPlugin_wordDesuffle_output_1;
  reg        [7:0]    memory_AesPlugin_wordDesuffle_output_2;
  reg        [7:0]    memory_AesPlugin_wordDesuffle_output_3;
  reg        [1:0]    memory_AesPlugin_wordDesuffle_sel_0;
  reg        [1:0]    memory_AesPlugin_wordDesuffle_sel_1;
  reg        [1:0]    memory_AesPlugin_wordDesuffle_sel_2;
  reg        [1:0]    memory_AesPlugin_wordDesuffle_sel_3;
  wire       [31:0]   memory_AesPlugin_xored;
  reg                 DebugPlugin_firstCycle;
  reg                 DebugPlugin_secondCycle;
  reg                 DebugPlugin_resetIt;
  reg                 DebugPlugin_haltIt;
  reg                 DebugPlugin_stepIt;
  reg                 DebugPlugin_isPipBusy;
  reg                 DebugPlugin_godmode;
  reg                 DebugPlugin_haltedByBreak;
  reg        [31:0]   DebugPlugin_busReadDataReg;
  reg                 _zz_147;
  wire                DebugPlugin_allowEBreak;
  reg                 DebugPlugin_resetIt_regNext;
  reg        [31:0]   decode_to_execute_PC;
  reg        [31:0]   execute_to_memory_PC;
  reg        [31:0]   memory_to_writeBack_PC;
  reg        [31:0]   decode_to_execute_INSTRUCTION;
  reg        [31:0]   execute_to_memory_INSTRUCTION;
  reg        [31:0]   memory_to_writeBack_INSTRUCTION;
  reg        [31:0]   decode_to_execute_FORMAL_PC_NEXT;
  reg        [31:0]   execute_to_memory_FORMAL_PC_NEXT;
  reg        [31:0]   memory_to_writeBack_FORMAL_PC_NEXT;
  reg                 decode_to_execute_MEMORY_FORCE_CONSTISTENCY;
  reg                 decode_to_execute_IS_SFENCE_VMA;
  reg                 execute_to_memory_IS_SFENCE_VMA;
  reg                 memory_to_writeBack_IS_SFENCE_VMA;
  reg                 decode_to_execute_SRC_USE_SUB_LESS;
  reg                 decode_to_execute_MEMORY_ENABLE;
  reg                 execute_to_memory_MEMORY_ENABLE;
  reg                 memory_to_writeBack_MEMORY_ENABLE;
  reg        `AluCtrlEnum_defaultEncoding_type decode_to_execute_ALU_CTRL;
  reg                 decode_to_execute_REGFILE_WRITE_VALID;
  reg                 execute_to_memory_REGFILE_WRITE_VALID;
  reg                 memory_to_writeBack_REGFILE_WRITE_VALID;
  reg                 decode_to_execute_BYPASSABLE_EXECUTE_STAGE;
  reg                 decode_to_execute_BYPASSABLE_MEMORY_STAGE;
  reg                 execute_to_memory_BYPASSABLE_MEMORY_STAGE;
  reg                 decode_to_execute_MEMORY_WR;
  reg                 execute_to_memory_MEMORY_WR;
  reg                 memory_to_writeBack_MEMORY_WR;
  reg                 decode_to_execute_MEMORY_LRSC;
  reg                 execute_to_memory_MEMORY_LRSC;
  reg                 memory_to_writeBack_MEMORY_LRSC;
  reg                 decode_to_execute_MEMORY_AMO;
  reg                 execute_to_memory_MEMORY_AMO;
  reg                 memory_to_writeBack_MEMORY_AMO;
  reg                 decode_to_execute_MEMORY_MANAGMENT;
  reg                 decode_to_execute_MEMORY_FENCE;
  reg                 execute_to_memory_MEMORY_FENCE;
  reg                 memory_to_writeBack_MEMORY_FENCE;
  reg                 decode_to_execute_SRC_LESS_UNSIGNED;
  reg        `AluBitwiseCtrlEnum_defaultEncoding_type decode_to_execute_ALU_BITWISE_CTRL;
  reg        `ShiftCtrlEnum_defaultEncoding_type decode_to_execute_SHIFT_CTRL;
  reg                 decode_to_execute_IS_MUL;
  reg                 execute_to_memory_IS_MUL;
  reg                 memory_to_writeBack_IS_MUL;
  reg                 decode_to_execute_IS_DIV;
  reg                 execute_to_memory_IS_DIV;
  reg                 decode_to_execute_IS_RS1_SIGNED;
  reg                 decode_to_execute_IS_RS2_SIGNED;
  reg                 decode_to_execute_IS_CSR;
  reg        `EnvCtrlEnum_defaultEncoding_type decode_to_execute_ENV_CTRL;
  reg        `EnvCtrlEnum_defaultEncoding_type execute_to_memory_ENV_CTRL;
  reg        `EnvCtrlEnum_defaultEncoding_type memory_to_writeBack_ENV_CTRL;
  reg        `BranchCtrlEnum_defaultEncoding_type decode_to_execute_BRANCH_CTRL;
  reg                 decode_to_execute_IS_AES;
  reg                 execute_to_memory_IS_AES;
  reg                 memory_to_writeBack_IS_AES;
  reg        [31:0]   decode_to_execute_RS1;
  reg        [31:0]   execute_to_memory_RS1;
  reg        [31:0]   decode_to_execute_RS2;
  reg                 decode_to_execute_SRC2_FORCE_ZERO;
  reg        [31:0]   decode_to_execute_SRC1;
  reg        [31:0]   decode_to_execute_SRC2;
  reg                 decode_to_execute_CSR_WRITE_OPCODE;
  reg                 decode_to_execute_CSR_READ_OPCODE;
  reg                 decode_to_execute_DO_EBREAK;
  reg        [1:0]    execute_to_memory_MEMORY_ADDRESS_LOW;
  reg        [1:0]    memory_to_writeBack_MEMORY_ADDRESS_LOW;
  (* keep , syn_keep *) reg        [31:0]   execute_to_memory_MEMORY_VIRTUAL_ADDRESS /* synthesis syn_keep = 1 */ ;
  reg                 execute_to_memory_IS_DBUS_SHARING;
  reg                 memory_to_writeBack_IS_DBUS_SHARING;
  reg        [31:0]   execute_to_memory_REGFILE_WRITE_DATA;
  reg        [31:0]   memory_to_writeBack_REGFILE_WRITE_DATA;
  reg        [31:0]   execute_to_memory_MUL_LL;
  reg        [33:0]   execute_to_memory_MUL_LH;
  reg        [33:0]   execute_to_memory_MUL_HL;
  reg        [33:0]   execute_to_memory_MUL_HH;
  reg        [33:0]   memory_to_writeBack_MUL_HH;
  reg                 execute_to_memory_BRANCH_DO;
  reg        [31:0]   execute_to_memory_BRANCH_CALC;
  reg        [51:0]   memory_to_writeBack_MUL_LOW;
  reg        [31:0]   memory_to_writeBack_CALC;
  reg        [2:0]    _zz_148;
  reg                 execute_CsrPlugin_csr_768;
  reg                 execute_CsrPlugin_csr_256;
  reg                 execute_CsrPlugin_csr_384;
  reg                 execute_CsrPlugin_csr_3857;
  reg                 execute_CsrPlugin_csr_3858;
  reg                 execute_CsrPlugin_csr_3859;
  reg                 execute_CsrPlugin_csr_3860;
  reg                 execute_CsrPlugin_csr_769;
  reg                 execute_CsrPlugin_csr_836;
  reg                 execute_CsrPlugin_csr_772;
  reg                 execute_CsrPlugin_csr_773;
  reg                 execute_CsrPlugin_csr_833;
  reg                 execute_CsrPlugin_csr_832;
  reg                 execute_CsrPlugin_csr_834;
  reg                 execute_CsrPlugin_csr_835;
  reg                 execute_CsrPlugin_csr_770;
  reg                 execute_CsrPlugin_csr_771;
  reg                 execute_CsrPlugin_csr_3073;
  reg                 execute_CsrPlugin_csr_3201;
  reg                 execute_CsrPlugin_csr_324;
  reg                 execute_CsrPlugin_csr_260;
  reg                 execute_CsrPlugin_csr_261;
  reg                 execute_CsrPlugin_csr_321;
  reg                 execute_CsrPlugin_csr_320;
  reg                 execute_CsrPlugin_csr_322;
  reg                 execute_CsrPlugin_csr_323;
  reg        [31:0]   _zz_149;
  reg        [31:0]   _zz_150;
  reg        [31:0]   _zz_151;
  reg        [31:0]   _zz_152;
  reg        [31:0]   _zz_153;
  reg        [31:0]   _zz_154;
  reg        [31:0]   _zz_155;
  reg        [31:0]   _zz_156;
  reg        [31:0]   _zz_157;
  reg        [31:0]   _zz_158;
  reg        [31:0]   _zz_159;
  reg        [31:0]   _zz_160;
  reg        [31:0]   _zz_161;
  reg        [31:0]   _zz_162;
  reg        [31:0]   _zz_163;
  reg        [31:0]   _zz_164;
  reg        [31:0]   _zz_165;
  reg        [31:0]   _zz_166;
  reg        [31:0]   _zz_167;
  reg        [31:0]   _zz_168;
  reg        [31:0]   _zz_169;
  reg        [31:0]   _zz_170;
  `ifndef SYNTHESIS
  reg [31:0] decode_BRANCH_CTRL_string;
  reg [31:0] _zz_1_string;
  reg [31:0] _zz_2_string;
  reg [31:0] _zz_3_string;
  reg [39:0] _zz_4_string;
  reg [39:0] _zz_5_string;
  reg [39:0] _zz_6_string;
  reg [39:0] _zz_7_string;
  reg [39:0] decode_ENV_CTRL_string;
  reg [39:0] _zz_8_string;
  reg [39:0] _zz_9_string;
  reg [39:0] _zz_10_string;
  reg [71:0] decode_SHIFT_CTRL_string;
  reg [71:0] _zz_11_string;
  reg [71:0] _zz_12_string;
  reg [71:0] _zz_13_string;
  reg [39:0] decode_ALU_BITWISE_CTRL_string;
  reg [39:0] _zz_14_string;
  reg [39:0] _zz_15_string;
  reg [39:0] _zz_16_string;
  reg [63:0] decode_ALU_CTRL_string;
  reg [63:0] _zz_17_string;
  reg [63:0] _zz_18_string;
  reg [63:0] _zz_19_string;
  reg [31:0] execute_BRANCH_CTRL_string;
  reg [31:0] _zz_20_string;
  reg [39:0] memory_ENV_CTRL_string;
  reg [39:0] _zz_21_string;
  reg [39:0] execute_ENV_CTRL_string;
  reg [39:0] _zz_22_string;
  reg [39:0] writeBack_ENV_CTRL_string;
  reg [39:0] _zz_23_string;
  reg [71:0] execute_SHIFT_CTRL_string;
  reg [71:0] _zz_26_string;
  reg [23:0] decode_SRC2_CTRL_string;
  reg [23:0] _zz_29_string;
  reg [95:0] decode_SRC1_CTRL_string;
  reg [95:0] _zz_31_string;
  reg [63:0] execute_ALU_CTRL_string;
  reg [63:0] _zz_32_string;
  reg [39:0] execute_ALU_BITWISE_CTRL_string;
  reg [39:0] _zz_33_string;
  reg [31:0] _zz_37_string;
  reg [39:0] _zz_38_string;
  reg [71:0] _zz_39_string;
  reg [39:0] _zz_40_string;
  reg [23:0] _zz_41_string;
  reg [63:0] _zz_42_string;
  reg [95:0] _zz_43_string;
  reg [47:0] MmuPlugin_shared_state_1_string;
  reg [95:0] _zz_94_string;
  reg [63:0] _zz_95_string;
  reg [23:0] _zz_96_string;
  reg [39:0] _zz_97_string;
  reg [71:0] _zz_98_string;
  reg [39:0] _zz_99_string;
  reg [31:0] _zz_100_string;
  reg [63:0] decode_to_execute_ALU_CTRL_string;
  reg [39:0] decode_to_execute_ALU_BITWISE_CTRL_string;
  reg [71:0] decode_to_execute_SHIFT_CTRL_string;
  reg [39:0] decode_to_execute_ENV_CTRL_string;
  reg [39:0] execute_to_memory_ENV_CTRL_string;
  reg [39:0] memory_to_writeBack_ENV_CTRL_string;
  reg [31:0] decode_to_execute_BRANCH_CTRL_string;
  `endif

  (* ram_style = "distributed" *) reg [31:0] RegFilePlugin_regFile [0:31] /* verilator public */ ;
  reg [31:0] memory_AesPlugin_rom_storage [0:511];

  assign _zz_240 = (memory_arbitration_isValid && memory_IS_DIV);
  assign _zz_241 = (writeBack_arbitration_isValid && writeBack_REGFILE_WRITE_VALID);
  assign _zz_242 = 1'b1;
  assign _zz_243 = (memory_arbitration_isValid && memory_REGFILE_WRITE_VALID);
  assign _zz_244 = (execute_arbitration_isValid && execute_REGFILE_WRITE_VALID);
  assign _zz_245 = (execute_arbitration_isValid && execute_IS_CSR);
  assign _zz_246 = ((_zz_176 && IBusCachedPlugin_cache_io_cpu_decode_error) && (! IBusCachedPlugin_rsp_issueDetected_3));
  assign _zz_247 = ((_zz_176 && IBusCachedPlugin_cache_io_cpu_decode_cacheMiss) && (! IBusCachedPlugin_rsp_issueDetected_2));
  assign _zz_248 = ((_zz_176 && IBusCachedPlugin_cache_io_cpu_decode_mmuException) && (! IBusCachedPlugin_rsp_issueDetected_1));
  assign _zz_249 = ((_zz_176 && IBusCachedPlugin_cache_io_cpu_decode_mmuRefilling) && (! IBusCachedPlugin_rsp_issueDetected));
  assign _zz_250 = ({decodeExceptionPort_valid,IBusCachedPlugin_decodeExceptionPort_valid} != 2'b00);
  assign _zz_251 = (execute_arbitration_isValid && (execute_ENV_CTRL == `EnvCtrlEnum_defaultEncoding_WFI));
  assign _zz_252 = (execute_arbitration_isValid && execute_DO_EBREAK);
  assign _zz_253 = (({writeBack_arbitration_isValid,memory_arbitration_isValid} != 2'b00) == 1'b0);
  assign _zz_254 = (CsrPlugin_hadException || CsrPlugin_interruptJump);
  assign _zz_255 = (writeBack_arbitration_isValid && (writeBack_ENV_CTRL == `EnvCtrlEnum_defaultEncoding_XRET));
  assign _zz_256 = (DebugPlugin_stepIt && IBusCachedPlugin_incomingInstruction);
  assign _zz_257 = writeBack_INSTRUCTION[29 : 28];
  assign _zz_258 = ((MmuPlugin_shared_dBusRspStaged_valid && (! MmuPlugin_shared_dBusRspStaged_payload_redo)) && (MmuPlugin_shared_dBusRsp_leaf || MmuPlugin_shared_dBusRsp_exception));
  assign _zz_259 = MmuPlugin_shared_portSortedOh[0];
  assign _zz_260 = MmuPlugin_shared_portSortedOh[1];
  assign _zz_261 = (! ({(writeBack_arbitration_isValid || CsrPlugin_exceptionPendings_3),{(memory_arbitration_isValid || CsrPlugin_exceptionPendings_2),(execute_arbitration_isValid || CsrPlugin_exceptionPendings_1)}} != 3'b000));
  assign _zz_262 = (! dataCache_2_io_cpu_execute_refilling);
  assign _zz_263 = ((! writeBack_MEMORY_FENCE) || (! writeBack_arbitration_isFiring));
  assign _zz_264 = (writeBack_arbitration_isValid && writeBack_MEMORY_ENABLE);
  assign _zz_265 = (writeBack_arbitration_isValid && writeBack_REGFILE_WRITE_VALID);
  assign _zz_266 = (1'b0 || (! 1'b1));
  assign _zz_267 = (memory_arbitration_isValid && memory_REGFILE_WRITE_VALID);
  assign _zz_268 = (1'b0 || (! memory_BYPASSABLE_MEMORY_STAGE));
  assign _zz_269 = (execute_arbitration_isValid && execute_REGFILE_WRITE_VALID);
  assign _zz_270 = (1'b0 || (! execute_BYPASSABLE_EXECUTE_STAGE));
  assign _zz_271 = execute_INSTRUCTION[13 : 12];
  assign _zz_272 = (memory_MulDivIterativePlugin_frontendOk && (! memory_MulDivIterativePlugin_div_done));
  assign _zz_273 = (! memory_arbitration_isStuck);
  assign _zz_274 = (CsrPlugin_privilege < execute_CsrPlugin_csrAddress[9 : 8]);
  assign _zz_275 = (execute_CsrPlugin_illegalAccess || execute_CsrPlugin_illegalInstruction);
  assign _zz_276 = (execute_arbitration_isValid && (execute_ENV_CTRL == `EnvCtrlEnum_defaultEncoding_ECALL));
  assign _zz_277 = debug_bus_cmd_payload_address[7 : 2];
  assign _zz_278 = (MmuPlugin_shared_refills != 2'b00);
  assign _zz_279 = (MmuPlugin_ports_0_entryToReplace_value == 2'b00);
  assign _zz_280 = (MmuPlugin_ports_0_entryToReplace_value == 2'b01);
  assign _zz_281 = (MmuPlugin_ports_0_entryToReplace_value == 2'b10);
  assign _zz_282 = (MmuPlugin_ports_0_entryToReplace_value == 2'b11);
  assign _zz_283 = (MmuPlugin_ports_1_entryToReplace_value == 2'b00);
  assign _zz_284 = (MmuPlugin_ports_1_entryToReplace_value == 2'b01);
  assign _zz_285 = (MmuPlugin_ports_1_entryToReplace_value == 2'b10);
  assign _zz_286 = (MmuPlugin_ports_1_entryToReplace_value == 2'b11);
  assign _zz_287 = (_zz_204 && (! dataCache_2_io_mem_cmd_s2mPipe_ready));
  assign _zz_288 = ((CsrPlugin_sstatus_SIE && (CsrPlugin_privilege == 2'b01)) || (CsrPlugin_privilege < 2'b01));
  assign _zz_289 = ((_zz_128 && (1'b1 && CsrPlugin_mideleg_ST)) && (! 1'b0));
  assign _zz_290 = ((_zz_129 && (1'b1 && CsrPlugin_mideleg_SS)) && (! 1'b0));
  assign _zz_291 = ((_zz_130 && (1'b1 && CsrPlugin_mideleg_SE)) && (! 1'b0));
  assign _zz_292 = (CsrPlugin_mstatus_MIE || (CsrPlugin_privilege < 2'b11));
  assign _zz_293 = ((_zz_128 && 1'b1) && (! (CsrPlugin_mideleg_ST != 1'b0)));
  assign _zz_294 = ((_zz_129 && 1'b1) && (! (CsrPlugin_mideleg_SS != 1'b0)));
  assign _zz_295 = ((_zz_130 && 1'b1) && (! (CsrPlugin_mideleg_SE != 1'b0)));
  assign _zz_296 = ((_zz_131 && 1'b1) && (! 1'b0));
  assign _zz_297 = ((_zz_132 && 1'b1) && (! 1'b0));
  assign _zz_298 = ((_zz_133 && 1'b1) && (! 1'b0));
  assign _zz_299 = writeBack_INSTRUCTION[13 : 12];
  assign _zz_300 = writeBack_INSTRUCTION[13 : 12];
  assign _zz_301 = execute_INSTRUCTION[13];
  assign _zz_302 = ($signed(_zz_303) + $signed(_zz_308));
  assign _zz_303 = ($signed(_zz_304) + $signed(_zz_306));
  assign _zz_304 = 52'h0;
  assign _zz_305 = {1'b0,memory_MUL_LL};
  assign _zz_306 = {{19{_zz_305[32]}}, _zz_305};
  assign _zz_307 = ({16'd0,memory_MUL_LH} <<< 16);
  assign _zz_308 = {{2{_zz_307[49]}}, _zz_307};
  assign _zz_309 = ({16'd0,memory_MUL_HL} <<< 16);
  assign _zz_310 = {{2{_zz_309[49]}}, _zz_309};
  assign _zz_311 = _zz_85[36 : 36];
  assign _zz_312 = _zz_85[31 : 31];
  assign _zz_313 = _zz_85[30 : 30];
  assign _zz_314 = _zz_85[29 : 29];
  assign _zz_315 = _zz_85[28 : 28];
  assign _zz_316 = _zz_85[27 : 27];
  assign _zz_317 = _zz_85[22 : 22];
  assign _zz_318 = _zz_85[21 : 21];
  assign _zz_319 = _zz_85[20 : 20];
  assign _zz_320 = _zz_85[14 : 14];
  assign _zz_321 = _zz_85[13 : 13];
  assign _zz_322 = _zz_85[12 : 12];
  assign _zz_323 = _zz_85[0 : 0];
  assign _zz_324 = _zz_85[37 : 37];
  assign _zz_325 = _zz_85[18 : 18];
  assign _zz_326 = _zz_85[6 : 6];
  assign _zz_327 = ($signed(_zz_329) >>> execute_FullBarrelShifterPlugin_amplitude);
  assign _zz_328 = _zz_327[31 : 0];
  assign _zz_329 = {((execute_SHIFT_CTRL == `ShiftCtrlEnum_defaultEncoding_SRA_1) && execute_FullBarrelShifterPlugin_reversed[31]),execute_FullBarrelShifterPlugin_reversed};
  assign _zz_330 = _zz_85[4 : 4];
  assign _zz_331 = _zz_85[19 : 19];
  assign _zz_332 = _zz_85[11 : 11];
  assign _zz_333 = _zz_85[17 : 17];
  assign _zz_334 = _zz_85[16 : 16];
  assign _zz_335 = _zz_85[5 : 5];
  assign _zz_336 = _zz_85[1 : 1];
  assign _zz_337 = MmuPlugin_ports_0_entryToReplace_willIncrement;
  assign _zz_338 = {1'd0, _zz_337};
  assign _zz_339 = MmuPlugin_ports_1_entryToReplace_willIncrement;
  assign _zz_340 = {1'd0, _zz_339};
  assign _zz_341 = MmuPlugin_shared_dBusRspStaged_payload_data[0 : 0];
  assign _zz_342 = MmuPlugin_shared_dBusRspStaged_payload_data[1 : 1];
  assign _zz_343 = MmuPlugin_shared_dBusRspStaged_payload_data[2 : 2];
  assign _zz_344 = MmuPlugin_shared_dBusRspStaged_payload_data[3 : 3];
  assign _zz_345 = MmuPlugin_shared_dBusRspStaged_payload_data[4 : 4];
  assign _zz_346 = MmuPlugin_shared_dBusRspStaged_payload_data[5 : 5];
  assign _zz_347 = MmuPlugin_shared_dBusRspStaged_payload_data[6 : 6];
  assign _zz_348 = MmuPlugin_shared_dBusRspStaged_payload_data[7 : 7];
  assign _zz_349 = (_zz_59 - 2'b01);
  assign _zz_350 = (_zz_63 - 4'b0001);
  assign _zz_351 = {IBusCachedPlugin_fetchPc_inc,2'b00};
  assign _zz_352 = {29'd0, _zz_351};
  assign _zz_353 = _zz_80[0 : 0];
  assign _zz_354 = _zz_80[1 : 1];
  assign _zz_355 = _zz_80[2 : 2];
  assign _zz_356 = _zz_80[3 : 3];
  assign _zz_357 = _zz_80[4 : 4];
  assign _zz_358 = _zz_80[5 : 5];
  assign _zz_359 = _zz_80[6 : 6];
  assign _zz_360 = _zz_80[7 : 7];
  assign _zz_361 = (writeBack_MEMORY_WR ? 3'b111 : 3'b101);
  assign _zz_362 = (writeBack_MEMORY_WR ? 3'b110 : 3'b100);
  assign _zz_363 = execute_SRC_LESS;
  assign _zz_364 = 3'b100;
  assign _zz_365 = decode_INSTRUCTION[19 : 15];
  assign _zz_366 = decode_INSTRUCTION[31 : 20];
  assign _zz_367 = {decode_INSTRUCTION[31 : 25],decode_INSTRUCTION[11 : 7]};
  assign _zz_368 = ($signed(_zz_369) + $signed(_zz_372));
  assign _zz_369 = ($signed(_zz_370) + $signed(_zz_371));
  assign _zz_370 = execute_SRC1;
  assign _zz_371 = (execute_SRC_USE_SUB_LESS ? (~ execute_SRC2) : execute_SRC2);
  assign _zz_372 = (execute_SRC_USE_SUB_LESS ? _zz_373 : _zz_374);
  assign _zz_373 = 32'h00000001;
  assign _zz_374 = 32'h0;
  assign _zz_375 = {{14{writeBack_MUL_LOW[51]}}, writeBack_MUL_LOW};
  assign _zz_376 = ({32'd0,writeBack_MUL_HH} <<< 32);
  assign _zz_377 = writeBack_MUL_LOW[31 : 0];
  assign _zz_378 = writeBack_MulPlugin_result[63 : 32];
  assign _zz_379 = memory_MulDivIterativePlugin_div_counter_willIncrement;
  assign _zz_380 = {5'd0, _zz_379};
  assign _zz_381 = {1'd0, memory_MulDivIterativePlugin_rs2};
  assign _zz_382 = memory_MulDivIterativePlugin_div_stage_0_remainderMinusDenominator[31:0];
  assign _zz_383 = memory_MulDivIterativePlugin_div_stage_0_remainderShifted[31:0];
  assign _zz_384 = {_zz_122,(! memory_MulDivIterativePlugin_div_stage_0_remainderMinusDenominator[32])};
  assign _zz_385 = _zz_386;
  assign _zz_386 = _zz_387;
  assign _zz_387 = ({1'b0,(memory_MulDivIterativePlugin_div_needRevert ? (~ _zz_123) : _zz_123)} + _zz_389);
  assign _zz_388 = memory_MulDivIterativePlugin_div_needRevert;
  assign _zz_389 = {32'd0, _zz_388};
  assign _zz_390 = _zz_125;
  assign _zz_391 = {32'd0, _zz_390};
  assign _zz_392 = _zz_124;
  assign _zz_393 = {31'd0, _zz_392};
  assign _zz_394 = (_zz_134 & (~ _zz_395));
  assign _zz_395 = (_zz_134 - 2'b01);
  assign _zz_396 = {{{execute_INSTRUCTION[31],execute_INSTRUCTION[19 : 12]},execute_INSTRUCTION[20]},execute_INSTRUCTION[30 : 21]};
  assign _zz_397 = execute_INSTRUCTION[31 : 20];
  assign _zz_398 = {{{execute_INSTRUCTION[31],execute_INSTRUCTION[7]},execute_INSTRUCTION[30 : 25]},execute_INSTRUCTION[11 : 8]};
  assign _zz_399 = execute_CsrPlugin_writeData[19 : 19];
  assign _zz_400 = execute_CsrPlugin_writeData[18 : 18];
  assign _zz_401 = execute_CsrPlugin_writeData[17 : 17];
  assign _zz_402 = execute_CsrPlugin_writeData[7 : 7];
  assign _zz_403 = execute_CsrPlugin_writeData[3 : 3];
  assign _zz_404 = execute_CsrPlugin_writeData[5 : 5];
  assign _zz_405 = execute_CsrPlugin_writeData[1 : 1];
  assign _zz_406 = execute_CsrPlugin_writeData[19 : 19];
  assign _zz_407 = execute_CsrPlugin_writeData[18 : 18];
  assign _zz_408 = execute_CsrPlugin_writeData[17 : 17];
  assign _zz_409 = execute_CsrPlugin_writeData[5 : 5];
  assign _zz_410 = execute_CsrPlugin_writeData[1 : 1];
  assign _zz_411 = execute_CsrPlugin_writeData[31 : 31];
  assign _zz_412 = execute_CsrPlugin_writeData[3 : 3];
  assign _zz_413 = execute_CsrPlugin_writeData[5 : 5];
  assign _zz_414 = execute_CsrPlugin_writeData[1 : 1];
  assign _zz_415 = execute_CsrPlugin_writeData[9 : 9];
  assign _zz_416 = execute_CsrPlugin_writeData[11 : 11];
  assign _zz_417 = execute_CsrPlugin_writeData[7 : 7];
  assign _zz_418 = execute_CsrPlugin_writeData[3 : 3];
  assign _zz_419 = execute_CsrPlugin_writeData[9 : 9];
  assign _zz_420 = execute_CsrPlugin_writeData[5 : 5];
  assign _zz_421 = execute_CsrPlugin_writeData[1 : 1];
  assign _zz_422 = execute_CsrPlugin_writeData[0 : 0];
  assign _zz_423 = execute_CsrPlugin_writeData[1 : 1];
  assign _zz_424 = execute_CsrPlugin_writeData[2 : 2];
  assign _zz_425 = execute_CsrPlugin_writeData[4 : 4];
  assign _zz_426 = execute_CsrPlugin_writeData[5 : 5];
  assign _zz_427 = execute_CsrPlugin_writeData[6 : 6];
  assign _zz_428 = execute_CsrPlugin_writeData[7 : 7];
  assign _zz_429 = execute_CsrPlugin_writeData[8 : 8];
  assign _zz_430 = execute_CsrPlugin_writeData[9 : 9];
  assign _zz_431 = execute_CsrPlugin_writeData[12 : 12];
  assign _zz_432 = execute_CsrPlugin_writeData[13 : 13];
  assign _zz_433 = execute_CsrPlugin_writeData[15 : 15];
  assign _zz_434 = execute_CsrPlugin_writeData[9 : 9];
  assign _zz_435 = execute_CsrPlugin_writeData[5 : 5];
  assign _zz_436 = execute_CsrPlugin_writeData[1 : 1];
  assign _zz_437 = execute_CsrPlugin_writeData[5 : 5];
  assign _zz_438 = execute_CsrPlugin_writeData[1 : 1];
  assign _zz_439 = execute_CsrPlugin_writeData[9 : 9];
  assign _zz_440 = execute_CsrPlugin_writeData[9 : 9];
  assign _zz_441 = execute_CsrPlugin_writeData[5 : 5];
  assign _zz_442 = execute_CsrPlugin_writeData[1 : 1];
  assign _zz_443 = execute_CsrPlugin_writeData[31 : 31];
  assign _zz_444 = {_zz_67,_zz_66};
  assign _zz_445 = 32'h0000107f;
  assign _zz_446 = (decode_INSTRUCTION & 32'h0000207f);
  assign _zz_447 = 32'h00002073;
  assign _zz_448 = ((decode_INSTRUCTION & 32'h0000407f) == 32'h00004063);
  assign _zz_449 = ((decode_INSTRUCTION & 32'h0000207f) == 32'h00002013);
  assign _zz_450 = {((decode_INSTRUCTION & 32'h0000603f) == 32'h00000023),{((decode_INSTRUCTION & 32'h0000207f) == 32'h00000003),{((decode_INSTRUCTION & _zz_451) == 32'h00000003),{(_zz_452 == _zz_453),{_zz_454,{_zz_455,_zz_456}}}}}};
  assign _zz_451 = 32'h0000505f;
  assign _zz_452 = (decode_INSTRUCTION & 32'h0000707b);
  assign _zz_453 = 32'h00000063;
  assign _zz_454 = ((decode_INSTRUCTION & 32'h0000607f) == 32'h0000000f);
  assign _zz_455 = ((decode_INSTRUCTION & 32'h0000707b) == 32'h0000000b);
  assign _zz_456 = {((decode_INSTRUCTION & 32'h1800707f) == 32'h0000202f),{((decode_INSTRUCTION & 32'hfc00007f) == 32'h00000033),{((decode_INSTRUCTION & _zz_457) == 32'h0800202f),{(_zz_458 == _zz_459),{_zz_460,{_zz_461,_zz_462}}}}}};
  assign _zz_457 = 32'he800707f;
  assign _zz_458 = (decode_INSTRUCTION & 32'h01f0707f);
  assign _zz_459 = 32'h0000500f;
  assign _zz_460 = ((decode_INSTRUCTION & 32'hbc00707f) == 32'h00005013);
  assign _zz_461 = ((decode_INSTRUCTION & 32'hfc00307f) == 32'h00001013);
  assign _zz_462 = {((decode_INSTRUCTION & 32'hbe00707f) == 32'h00005033),{((decode_INSTRUCTION & 32'hbe00707f) == 32'h00000033),{((decode_INSTRUCTION & _zz_463) == 32'h1000202f),{(_zz_464 == _zz_465),{_zz_466,{_zz_467,_zz_468}}}}}};
  assign _zz_463 = 32'hf9f0707f;
  assign _zz_464 = (decode_INSTRUCTION & 32'hfe007fff);
  assign _zz_465 = 32'h12000073;
  assign _zz_466 = ((decode_INSTRUCTION & 32'hdfffffff) == 32'h10200073);
  assign _zz_467 = ((decode_INSTRUCTION & 32'hffefffff) == 32'h00000073);
  assign _zz_468 = ((decode_INSTRUCTION & 32'hffffffff) == 32'h10500073);
  assign _zz_469 = 32'h10103050;
  assign _zz_470 = _zz_87;
  assign _zz_471 = ((decode_INSTRUCTION & 32'h0000001c) == 32'h00000004);
  assign _zz_472 = ((decode_INSTRUCTION & 32'h00000058) == 32'h00000040);
  assign _zz_473 = 1'b0;
  assign _zz_474 = ({(_zz_477 == _zz_478),(_zz_479 == _zz_480)} != 2'b00);
  assign _zz_475 = ((_zz_481 == _zz_482) != 1'b0);
  assign _zz_476 = {({_zz_483,_zz_484} != 2'b00),{(_zz_485 != _zz_486),{_zz_487,{_zz_488,_zz_489}}}};
  assign _zz_477 = (decode_INSTRUCTION & 32'h10103050);
  assign _zz_478 = 32'h00000050;
  assign _zz_479 = (decode_INSTRUCTION & 32'h12203050);
  assign _zz_480 = 32'h10000050;
  assign _zz_481 = (decode_INSTRUCTION & 32'h02103050);
  assign _zz_482 = 32'h00000050;
  assign _zz_483 = ((decode_INSTRUCTION & 32'h00001050) == 32'h00001050);
  assign _zz_484 = ((decode_INSTRUCTION & 32'h00002050) == 32'h00002050);
  assign _zz_485 = _zz_93;
  assign _zz_486 = 1'b0;
  assign _zz_487 = (_zz_93 != 1'b0);
  assign _zz_488 = ((_zz_490 == _zz_491) != 1'b0);
  assign _zz_489 = {(_zz_492 != 1'b0),{(_zz_493 != _zz_494),{_zz_495,{_zz_496,_zz_497}}}};
  assign _zz_490 = (decode_INSTRUCTION & 32'h02004064);
  assign _zz_491 = 32'h02004020;
  assign _zz_492 = ((decode_INSTRUCTION & 32'h02004074) == 32'h02000030);
  assign _zz_493 = {(_zz_498 == _zz_499),(_zz_500 == _zz_501)};
  assign _zz_494 = 2'b00;
  assign _zz_495 = ({_zz_502,{_zz_503,_zz_504}} != 3'b000);
  assign _zz_496 = (_zz_505 != 1'b0);
  assign _zz_497 = {(_zz_506 != _zz_507),{_zz_508,{_zz_509,_zz_510}}};
  assign _zz_498 = (decode_INSTRUCTION & 32'h00007034);
  assign _zz_499 = 32'h00005010;
  assign _zz_500 = (decode_INSTRUCTION & 32'h02007064);
  assign _zz_501 = 32'h00005020;
  assign _zz_502 = ((decode_INSTRUCTION & 32'h40003054) == 32'h40001010);
  assign _zz_503 = ((decode_INSTRUCTION & _zz_511) == 32'h00001010);
  assign _zz_504 = ((decode_INSTRUCTION & _zz_512) == 32'h00001010);
  assign _zz_505 = ((decode_INSTRUCTION & 32'h00001000) == 32'h00001000);
  assign _zz_506 = ((decode_INSTRUCTION & _zz_513) == 32'h00002000);
  assign _zz_507 = 1'b0;
  assign _zz_508 = ({_zz_514,_zz_515} != 2'b00);
  assign _zz_509 = (_zz_516 != 1'b0);
  assign _zz_510 = {(_zz_517 != _zz_518),{_zz_519,{_zz_520,_zz_521}}};
  assign _zz_511 = 32'h00007034;
  assign _zz_512 = 32'h02007054;
  assign _zz_513 = 32'h00003000;
  assign _zz_514 = ((decode_INSTRUCTION & 32'h00002010) == 32'h00002000);
  assign _zz_515 = ((decode_INSTRUCTION & 32'h00005000) == 32'h00001000);
  assign _zz_516 = ((decode_INSTRUCTION & 32'h00003054) == 32'h00000004);
  assign _zz_517 = ((decode_INSTRUCTION & _zz_522) == 32'h00004008);
  assign _zz_518 = 1'b0;
  assign _zz_519 = ((_zz_523 == _zz_524) != 1'b0);
  assign _zz_520 = ({_zz_525,_zz_526} != 5'h0);
  assign _zz_521 = {(_zz_527 != _zz_528),{_zz_529,{_zz_530,_zz_531}}};
  assign _zz_522 = 32'h00004048;
  assign _zz_523 = (decode_INSTRUCTION & 32'h00000064);
  assign _zz_524 = 32'h00000024;
  assign _zz_525 = _zz_92;
  assign _zz_526 = {(_zz_532 == _zz_533),{_zz_534,{_zz_535,_zz_536}}};
  assign _zz_527 = ((decode_INSTRUCTION & _zz_537) == 32'h00000008);
  assign _zz_528 = 1'b0;
  assign _zz_529 = ((_zz_538 == _zz_539) != 1'b0);
  assign _zz_530 = ({_zz_540,_zz_541} != 6'h0);
  assign _zz_531 = {(_zz_542 != _zz_543),{_zz_544,{_zz_545,_zz_546}}};
  assign _zz_532 = (decode_INSTRUCTION & 32'h00000034);
  assign _zz_533 = 32'h00000020;
  assign _zz_534 = ((decode_INSTRUCTION & _zz_547) == 32'h00000020);
  assign _zz_535 = (_zz_548 == _zz_549);
  assign _zz_536 = (_zz_550 == _zz_551);
  assign _zz_537 = 32'h10000008;
  assign _zz_538 = (decode_INSTRUCTION & 32'h10000008);
  assign _zz_539 = 32'h10000008;
  assign _zz_540 = (_zz_552 == _zz_553);
  assign _zz_541 = {_zz_554,{_zz_555,_zz_556}};
  assign _zz_542 = {_zz_557,{_zz_558,_zz_559}};
  assign _zz_543 = 3'b000;
  assign _zz_544 = ({_zz_560,_zz_561} != 5'h0);
  assign _zz_545 = (_zz_562 != _zz_563);
  assign _zz_546 = {_zz_564,{_zz_565,_zz_566}};
  assign _zz_547 = 32'h00000064;
  assign _zz_548 = (decode_INSTRUCTION & 32'h08000070);
  assign _zz_549 = 32'h08000020;
  assign _zz_550 = (decode_INSTRUCTION & 32'h10000070);
  assign _zz_551 = 32'h00000020;
  assign _zz_552 = (decode_INSTRUCTION & 32'h00002040);
  assign _zz_553 = 32'h00002040;
  assign _zz_554 = ((decode_INSTRUCTION & _zz_567) == 32'h00001040);
  assign _zz_555 = (_zz_568 == _zz_569);
  assign _zz_556 = {_zz_570,{_zz_571,_zz_572}};
  assign _zz_557 = ((decode_INSTRUCTION & _zz_573) == 32'h08000020);
  assign _zz_558 = (_zz_574 == _zz_575);
  assign _zz_559 = (_zz_576 == _zz_577);
  assign _zz_560 = (_zz_578 == _zz_579);
  assign _zz_561 = {_zz_580,{_zz_581,_zz_582}};
  assign _zz_562 = {_zz_91,{_zz_583,_zz_584}};
  assign _zz_563 = 3'b000;
  assign _zz_564 = ({_zz_585,_zz_586} != 7'h0);
  assign _zz_565 = (_zz_587 != _zz_588);
  assign _zz_566 = {_zz_589,{_zz_590,_zz_591}};
  assign _zz_567 = 32'h00001040;
  assign _zz_568 = (decode_INSTRUCTION & 32'h00000050);
  assign _zz_569 = 32'h00000040;
  assign _zz_570 = ((decode_INSTRUCTION & _zz_592) == 32'h00000040);
  assign _zz_571 = (_zz_593 == _zz_594);
  assign _zz_572 = (_zz_595 == _zz_596);
  assign _zz_573 = 32'h08000020;
  assign _zz_574 = (decode_INSTRUCTION & 32'h10000020);
  assign _zz_575 = 32'h00000020;
  assign _zz_576 = (decode_INSTRUCTION & 32'h00000028);
  assign _zz_577 = 32'h00000020;
  assign _zz_578 = (decode_INSTRUCTION & 32'h00000040);
  assign _zz_579 = 32'h00000040;
  assign _zz_580 = ((decode_INSTRUCTION & _zz_597) == 32'h00004020);
  assign _zz_581 = _zz_91;
  assign _zz_582 = {_zz_90,_zz_598};
  assign _zz_583 = _zz_90;
  assign _zz_584 = (_zz_599 == _zz_600);
  assign _zz_585 = _zz_87;
  assign _zz_586 = {_zz_601,{_zz_602,_zz_603}};
  assign _zz_587 = {_zz_89,_zz_604};
  assign _zz_588 = 2'b00;
  assign _zz_589 = ({_zz_605,_zz_606} != 2'b00);
  assign _zz_590 = (_zz_607 != _zz_608);
  assign _zz_591 = {_zz_609,{_zz_610,_zz_611}};
  assign _zz_592 = 32'h02100040;
  assign _zz_593 = (decode_INSTRUCTION & 32'h00000038);
  assign _zz_594 = 32'h0;
  assign _zz_595 = (decode_INSTRUCTION & 32'h18002008);
  assign _zz_596 = 32'h10002008;
  assign _zz_597 = 32'h00004020;
  assign _zz_598 = ((decode_INSTRUCTION & _zz_612) == 32'h00000020);
  assign _zz_599 = (decode_INSTRUCTION & 32'h02000068);
  assign _zz_600 = 32'h00000020;
  assign _zz_601 = ((decode_INSTRUCTION & _zz_613) == 32'h00001010);
  assign _zz_602 = (_zz_614 == _zz_615);
  assign _zz_603 = {_zz_616,{_zz_617,_zz_618}};
  assign _zz_604 = ((decode_INSTRUCTION & _zz_619) == 32'h00000020);
  assign _zz_605 = _zz_89;
  assign _zz_606 = (_zz_620 == _zz_621);
  assign _zz_607 = (_zz_622 == _zz_623);
  assign _zz_608 = 1'b0;
  assign _zz_609 = (_zz_624 != 1'b0);
  assign _zz_610 = (_zz_625 != _zz_626);
  assign _zz_611 = {_zz_627,{_zz_628,_zz_629}};
  assign _zz_612 = 32'h02000028;
  assign _zz_613 = 32'h00001010;
  assign _zz_614 = (decode_INSTRUCTION & 32'h00002010);
  assign _zz_615 = 32'h00002010;
  assign _zz_616 = ((decode_INSTRUCTION & _zz_630) == 32'h00002008);
  assign _zz_617 = (_zz_631 == _zz_632);
  assign _zz_618 = {_zz_90,_zz_633};
  assign _zz_619 = 32'h00000070;
  assign _zz_620 = (decode_INSTRUCTION & 32'h00000020);
  assign _zz_621 = 32'h0;
  assign _zz_622 = (decode_INSTRUCTION & 32'h00004014);
  assign _zz_623 = 32'h00004010;
  assign _zz_624 = ((decode_INSTRUCTION & _zz_634) == 32'h00002010);
  assign _zz_625 = {_zz_635,{_zz_636,_zz_637}};
  assign _zz_626 = 5'h0;
  assign _zz_627 = ({_zz_638,_zz_639} != 2'b00);
  assign _zz_628 = (_zz_640 != _zz_641);
  assign _zz_629 = {_zz_642,{_zz_643,_zz_644}};
  assign _zz_630 = 32'h00002008;
  assign _zz_631 = (decode_INSTRUCTION & 32'h00000050);
  assign _zz_632 = 32'h00000010;
  assign _zz_633 = ((decode_INSTRUCTION & _zz_645) == 32'h0);
  assign _zz_634 = 32'h00006014;
  assign _zz_635 = ((decode_INSTRUCTION & _zz_646) == 32'h0);
  assign _zz_636 = (_zz_647 == _zz_648);
  assign _zz_637 = {_zz_649,{_zz_650,_zz_651}};
  assign _zz_638 = _zz_88;
  assign _zz_639 = (_zz_652 == _zz_653);
  assign _zz_640 = {_zz_654,{_zz_655,_zz_656}};
  assign _zz_641 = 3'b000;
  assign _zz_642 = ({_zz_657,_zz_658} != 3'b000);
  assign _zz_643 = (_zz_659 != _zz_660);
  assign _zz_644 = {_zz_661,_zz_662};
  assign _zz_645 = 32'h00000024;
  assign _zz_646 = 32'h00000044;
  assign _zz_647 = (decode_INSTRUCTION & 32'h00000018);
  assign _zz_648 = 32'h0;
  assign _zz_649 = ((decode_INSTRUCTION & _zz_663) == 32'h00002000);
  assign _zz_650 = (_zz_664 == _zz_665);
  assign _zz_651 = _zz_88;
  assign _zz_652 = (decode_INSTRUCTION & 32'h00000058);
  assign _zz_653 = 32'h0;
  assign _zz_654 = ((decode_INSTRUCTION & _zz_666) == 32'h00000040);
  assign _zz_655 = (_zz_667 == _zz_668);
  assign _zz_656 = (_zz_669 == _zz_670);
  assign _zz_657 = _zz_87;
  assign _zz_658 = {_zz_86,_zz_671};
  assign _zz_659 = {_zz_86,_zz_672};
  assign _zz_660 = 2'b00;
  assign _zz_661 = (_zz_673 != 1'b0);
  assign _zz_662 = (_zz_674 != 1'b0);
  assign _zz_663 = 32'h00006004;
  assign _zz_664 = (decode_INSTRUCTION & 32'h00005004);
  assign _zz_665 = 32'h00001000;
  assign _zz_666 = 32'h00000044;
  assign _zz_667 = (decode_INSTRUCTION & 32'h00002014);
  assign _zz_668 = 32'h00002010;
  assign _zz_669 = (decode_INSTRUCTION & 32'h40000034);
  assign _zz_670 = 32'h40000030;
  assign _zz_671 = ((decode_INSTRUCTION & 32'h00002014) == 32'h00000004);
  assign _zz_672 = ((decode_INSTRUCTION & 32'h0000004c) == 32'h00000004);
  assign _zz_673 = ((decode_INSTRUCTION & 32'h00005048) == 32'h00001008);
  assign _zz_674 = ((decode_INSTRUCTION & 32'h02003050) == 32'h02000050);
  assign _zz_675 = 32'h0;
  assign _zz_676 = 32'h0;
  assign _zz_677 = 32'h0;
  assign _zz_678 = 32'h0;
  assign _zz_205 = RegFilePlugin_regFile[decode_RegFilePlugin_regFileReadAddress1];
  assign _zz_206 = RegFilePlugin_regFile[decode_RegFilePlugin_regFileReadAddress2];
  always @ (posedge CLKOUT0) begin
    if(_zz_36) begin
      RegFilePlugin_regFile[lastStageRegFileWrite_payload_address] <= lastStageRegFileWrite_payload_data;
    end
  end

  initial begin
    memory_AesPlugin_rom_storage[0] = 32'b01010010101001011100011001100011;
    memory_AesPlugin_rom_storage[1] = 32'b00001001100001001111100001111100;
    memory_AesPlugin_rom_storage[2] = 32'b01101010100110011110111001110111;
    memory_AesPlugin_rom_storage[3] = 32'b11010101100011011111011001111011;
    memory_AesPlugin_rom_storage[4] = 32'b00110000000011011111111111110010;
    memory_AesPlugin_rom_storage[5] = 32'b00110110101111011101011001101011;
    memory_AesPlugin_rom_storage[6] = 32'b10100101101100011101111001101111;
    memory_AesPlugin_rom_storage[7] = 32'b00111000010101001001000111000101;
    memory_AesPlugin_rom_storage[8] = 32'b10111111010100000110000000110000;
    memory_AesPlugin_rom_storage[9] = 32'b01000000000000110000001000000001;
    memory_AesPlugin_rom_storage[10] = 32'b10100011101010011100111001100111;
    memory_AesPlugin_rom_storage[11] = 32'b10011110011111010101011000101011;
    memory_AesPlugin_rom_storage[12] = 32'b10000001000110011110011111111110;
    memory_AesPlugin_rom_storage[13] = 32'b11110011011000101011010111010111;
    memory_AesPlugin_rom_storage[14] = 32'b11010111111001100100110110101011;
    memory_AesPlugin_rom_storage[15] = 32'b11111011100110101110110001110110;
    memory_AesPlugin_rom_storage[16] = 32'b01111100010001011000111111001010;
    memory_AesPlugin_rom_storage[17] = 32'b11100011100111010001111110000010;
    memory_AesPlugin_rom_storage[18] = 32'b00111001010000001000100111001001;
    memory_AesPlugin_rom_storage[19] = 32'b10000010100001111111101001111101;
    memory_AesPlugin_rom_storage[20] = 32'b10011011000101011110111111111010;
    memory_AesPlugin_rom_storage[21] = 32'b00101111111010111011001001011001;
    memory_AesPlugin_rom_storage[22] = 32'b11111111110010011000111001000111;
    memory_AesPlugin_rom_storage[23] = 32'b10000111000010111111101111110000;
    memory_AesPlugin_rom_storage[24] = 32'b00110100111011000100000110101101;
    memory_AesPlugin_rom_storage[25] = 32'b10001110011001111011001111010100;
    memory_AesPlugin_rom_storage[26] = 32'b01000011111111010101111110100010;
    memory_AesPlugin_rom_storage[27] = 32'b01000100111010100100010110101111;
    memory_AesPlugin_rom_storage[28] = 32'b11000100101111110010001110011100;
    memory_AesPlugin_rom_storage[29] = 32'b11011110111101110101001110100100;
    memory_AesPlugin_rom_storage[30] = 32'b11101001100101101110010001110010;
    memory_AesPlugin_rom_storage[31] = 32'b11001011010110111001101111000000;
    memory_AesPlugin_rom_storage[32] = 32'b01010100110000100111010110110111;
    memory_AesPlugin_rom_storage[33] = 32'b01111011000111001110000111111101;
    memory_AesPlugin_rom_storage[34] = 32'b10010100101011100011110110010011;
    memory_AesPlugin_rom_storage[35] = 32'b00110010011010100100110000100110;
    memory_AesPlugin_rom_storage[36] = 32'b10100110010110100110110000110110;
    memory_AesPlugin_rom_storage[37] = 32'b11000010010000010111111000111111;
    memory_AesPlugin_rom_storage[38] = 32'b00100011000000101111010111110111;
    memory_AesPlugin_rom_storage[39] = 32'b00111101010011111000001111001100;
    memory_AesPlugin_rom_storage[40] = 32'b11101110010111000110100000110100;
    memory_AesPlugin_rom_storage[41] = 32'b01001100111101000101000110100101;
    memory_AesPlugin_rom_storage[42] = 32'b10010101001101001101000111100101;
    memory_AesPlugin_rom_storage[43] = 32'b00001011000010001111100111110001;
    memory_AesPlugin_rom_storage[44] = 32'b01000010100100111110001001110001;
    memory_AesPlugin_rom_storage[45] = 32'b11111010011100111010101111011000;
    memory_AesPlugin_rom_storage[46] = 32'b11000011010100110110001000110001;
    memory_AesPlugin_rom_storage[47] = 32'b01001110001111110010101000010101;
    memory_AesPlugin_rom_storage[48] = 32'b00001000000011000000100000000100;
    memory_AesPlugin_rom_storage[49] = 32'b00101110010100101001010111000111;
    memory_AesPlugin_rom_storage[50] = 32'b10100001011001010100011000100011;
    memory_AesPlugin_rom_storage[51] = 32'b01100110010111101001110111000011;
    memory_AesPlugin_rom_storage[52] = 32'b00101000001010000011000000011000;
    memory_AesPlugin_rom_storage[53] = 32'b11011001101000010011011110010110;
    memory_AesPlugin_rom_storage[54] = 32'b00100100000011110000101000000101;
    memory_AesPlugin_rom_storage[55] = 32'b10110010101101010010111110011010;
    memory_AesPlugin_rom_storage[56] = 32'b01110110000010010000111000000111;
    memory_AesPlugin_rom_storage[57] = 32'b01011011001101100010010000010010;
    memory_AesPlugin_rom_storage[58] = 32'b10100010100110110001101110000000;
    memory_AesPlugin_rom_storage[59] = 32'b01001001001111011101111111100010;
    memory_AesPlugin_rom_storage[60] = 32'b01101101001001101100110111101011;
    memory_AesPlugin_rom_storage[61] = 32'b10001011011010010100111000100111;
    memory_AesPlugin_rom_storage[62] = 32'b11010001110011010111111110110010;
    memory_AesPlugin_rom_storage[63] = 32'b00100101100111111110101001110101;
    memory_AesPlugin_rom_storage[64] = 32'b01110010000110110001001000001001;
    memory_AesPlugin_rom_storage[65] = 32'b11111000100111100001110110000011;
    memory_AesPlugin_rom_storage[66] = 32'b11110110011101000101100000101100;
    memory_AesPlugin_rom_storage[67] = 32'b01100100001011100011010000011010;
    memory_AesPlugin_rom_storage[68] = 32'b10000110001011010011011000011011;
    memory_AesPlugin_rom_storage[69] = 32'b01101000101100101101110001101110;
    memory_AesPlugin_rom_storage[70] = 32'b10011000111011101011010001011010;
    memory_AesPlugin_rom_storage[71] = 32'b00010110111110110101101110100000;
    memory_AesPlugin_rom_storage[72] = 32'b11010100111101101010010001010010;
    memory_AesPlugin_rom_storage[73] = 32'b10100100010011010111011000111011;
    memory_AesPlugin_rom_storage[74] = 32'b01011100011000011011011111010110;
    memory_AesPlugin_rom_storage[75] = 32'b11001100110011100111110110110011;
    memory_AesPlugin_rom_storage[76] = 32'b01011101011110110101001000101001;
    memory_AesPlugin_rom_storage[77] = 32'b01100101001111101101110111100011;
    memory_AesPlugin_rom_storage[78] = 32'b10110110011100010101111000101111;
    memory_AesPlugin_rom_storage[79] = 32'b10010010100101110001001110000100;
    memory_AesPlugin_rom_storage[80] = 32'b01101100111101011010011001010011;
    memory_AesPlugin_rom_storage[81] = 32'b01110000011010001011100111010001;
    memory_AesPlugin_rom_storage[82] = 32'b01001000000000000000000000000000;
    memory_AesPlugin_rom_storage[83] = 32'b01010000001011001100000111101101;
    memory_AesPlugin_rom_storage[84] = 32'b11111101011000000100000000100000;
    memory_AesPlugin_rom_storage[85] = 32'b11101101000111111110001111111100;
    memory_AesPlugin_rom_storage[86] = 32'b10111001110010000111100110110001;
    memory_AesPlugin_rom_storage[87] = 32'b11011010111011011011011001011011;
    memory_AesPlugin_rom_storage[88] = 32'b01011110101111101101010001101010;
    memory_AesPlugin_rom_storage[89] = 32'b00010101010001101000110111001011;
    memory_AesPlugin_rom_storage[90] = 32'b01000110110110010110011110111110;
    memory_AesPlugin_rom_storage[91] = 32'b01010111010010110111001000111001;
    memory_AesPlugin_rom_storage[92] = 32'b10100111110111101001010001001010;
    memory_AesPlugin_rom_storage[93] = 32'b10001101110101001001100001001100;
    memory_AesPlugin_rom_storage[94] = 32'b10011101111010001011000001011000;
    memory_AesPlugin_rom_storage[95] = 32'b10000100010010101000010111001111;
    memory_AesPlugin_rom_storage[96] = 32'b10010000011010111011101111010000;
    memory_AesPlugin_rom_storage[97] = 32'b11011000001010101100010111101111;
    memory_AesPlugin_rom_storage[98] = 32'b10101011111001010100111110101010;
    memory_AesPlugin_rom_storage[99] = 32'b00000000000101101110110111111011;
    memory_AesPlugin_rom_storage[100] = 32'b10001100110001011000011001000011;
    memory_AesPlugin_rom_storage[101] = 32'b10111100110101111001101001001101;
    memory_AesPlugin_rom_storage[102] = 32'b11010011010101010110011000110011;
    memory_AesPlugin_rom_storage[103] = 32'b00001010100101000001000110000101;
    memory_AesPlugin_rom_storage[104] = 32'b11110111110011111000101001000101;
    memory_AesPlugin_rom_storage[105] = 32'b11100100000100001110100111111001;
    memory_AesPlugin_rom_storage[106] = 32'b01011000000001100000010000000010;
    memory_AesPlugin_rom_storage[107] = 32'b00000101100000011111111001111111;
    memory_AesPlugin_rom_storage[108] = 32'b10111000111100001010000001010000;
    memory_AesPlugin_rom_storage[109] = 32'b10110011010001000111100000111100;
    memory_AesPlugin_rom_storage[110] = 32'b01000101101110100010010110011111;
    memory_AesPlugin_rom_storage[111] = 32'b00000110111000110100101110101000;
    memory_AesPlugin_rom_storage[112] = 32'b11010000111100111010001001010001;
    memory_AesPlugin_rom_storage[113] = 32'b00101100111111100101110110100011;
    memory_AesPlugin_rom_storage[114] = 32'b00011110110000001000000001000000;
    memory_AesPlugin_rom_storage[115] = 32'b10001111100010100000010110001111;
    memory_AesPlugin_rom_storage[116] = 32'b11001010101011010011111110010010;
    memory_AesPlugin_rom_storage[117] = 32'b00111111101111000010000110011101;
    memory_AesPlugin_rom_storage[118] = 32'b00001111010010000111000000111000;
    memory_AesPlugin_rom_storage[119] = 32'b00000010000001001111000111110101;
    memory_AesPlugin_rom_storage[120] = 32'b11000001110111110110001110111100;
    memory_AesPlugin_rom_storage[121] = 32'b10101111110000010111011110110110;
    memory_AesPlugin_rom_storage[122] = 32'b10111101011101011010111111011010;
    memory_AesPlugin_rom_storage[123] = 32'b00000011011000110100001000100001;
    memory_AesPlugin_rom_storage[124] = 32'b00000001001100000010000000010000;
    memory_AesPlugin_rom_storage[125] = 32'b00010011000110101110010111111111;
    memory_AesPlugin_rom_storage[126] = 32'b10001010000011101111110111110011;
    memory_AesPlugin_rom_storage[127] = 32'b01101011011011011011111111010010;
    memory_AesPlugin_rom_storage[128] = 32'b00111010010011001000000111001101;
    memory_AesPlugin_rom_storage[129] = 32'b10010001000101000001100000001100;
    memory_AesPlugin_rom_storage[130] = 32'b00010001001101010010011000010011;
    memory_AesPlugin_rom_storage[131] = 32'b01000001001011111100001111101100;
    memory_AesPlugin_rom_storage[132] = 32'b01001111111000011011111001011111;
    memory_AesPlugin_rom_storage[133] = 32'b01100111101000100011010110010111;
    memory_AesPlugin_rom_storage[134] = 32'b11011100110011001000100001000100;
    memory_AesPlugin_rom_storage[135] = 32'b11101010001110010010111000010111;
    memory_AesPlugin_rom_storage[136] = 32'b10010111010101111001001111000100;
    memory_AesPlugin_rom_storage[137] = 32'b11110010111100100101010110100111;
    memory_AesPlugin_rom_storage[138] = 32'b11001111100000101111110001111110;
    memory_AesPlugin_rom_storage[139] = 32'b11001110010001110111101000111101;
    memory_AesPlugin_rom_storage[140] = 32'b11110000101011001100100001100100;
    memory_AesPlugin_rom_storage[141] = 32'b10110100111001111011101001011101;
    memory_AesPlugin_rom_storage[142] = 32'b11100110001010110011001000011001;
    memory_AesPlugin_rom_storage[143] = 32'b01110011100101011110011001110011;
    memory_AesPlugin_rom_storage[144] = 32'b10010110101000001100000001100000;
    memory_AesPlugin_rom_storage[145] = 32'b10101100100110000001100110000001;
    memory_AesPlugin_rom_storage[146] = 32'b01110100110100011001111001001111;
    memory_AesPlugin_rom_storage[147] = 32'b00100010011111111010001111011100;
    memory_AesPlugin_rom_storage[148] = 32'b11100111011001100100010000100010;
    memory_AesPlugin_rom_storage[149] = 32'b10101101011111100101010000101010;
    memory_AesPlugin_rom_storage[150] = 32'b00110101101010110011101110010000;
    memory_AesPlugin_rom_storage[151] = 32'b10000101100000110000101110001000;
    memory_AesPlugin_rom_storage[152] = 32'b11100010110010101000110001000110;
    memory_AesPlugin_rom_storage[153] = 32'b11111001001010011100011111101110;
    memory_AesPlugin_rom_storage[154] = 32'b00110111110100110110101110111000;
    memory_AesPlugin_rom_storage[155] = 32'b11101000001111000010100000010100;
    memory_AesPlugin_rom_storage[156] = 32'b00011100011110011010011111011110;
    memory_AesPlugin_rom_storage[157] = 32'b01110101111000101011110001011110;
    memory_AesPlugin_rom_storage[158] = 32'b11011111000111010001011000001011;
    memory_AesPlugin_rom_storage[159] = 32'b01101110011101101010110111011011;
    memory_AesPlugin_rom_storage[160] = 32'b01000111001110111101101111100000;
    memory_AesPlugin_rom_storage[161] = 32'b11110001010101100110010000110010;
    memory_AesPlugin_rom_storage[162] = 32'b00011010010011100111010000111010;
    memory_AesPlugin_rom_storage[163] = 32'b01110001000111100001010000001010;
    memory_AesPlugin_rom_storage[164] = 32'b00011101110110111001001001001001;
    memory_AesPlugin_rom_storage[165] = 32'b00101001000010100000110000000110;
    memory_AesPlugin_rom_storage[166] = 32'b11000101011011000100100000100100;
    memory_AesPlugin_rom_storage[167] = 32'b10001001111001001011100001011100;
    memory_AesPlugin_rom_storage[168] = 32'b01101111010111011001111111000010;
    memory_AesPlugin_rom_storage[169] = 32'b10110111011011101011110111010011;
    memory_AesPlugin_rom_storage[170] = 32'b01100010111011110100001110101100;
    memory_AesPlugin_rom_storage[171] = 32'b00001110101001101100010001100010;
    memory_AesPlugin_rom_storage[172] = 32'b10101010101010000011100110010001;
    memory_AesPlugin_rom_storage[173] = 32'b00011000101001000011000110010101;
    memory_AesPlugin_rom_storage[174] = 32'b10111110001101111101001111100100;
    memory_AesPlugin_rom_storage[175] = 32'b00011011100010111111001001111001;
    memory_AesPlugin_rom_storage[176] = 32'b11111100001100101101010111100111;
    memory_AesPlugin_rom_storage[177] = 32'b01010110010000111000101111001000;
    memory_AesPlugin_rom_storage[178] = 32'b00111110010110010110111000110111;
    memory_AesPlugin_rom_storage[179] = 32'b01001011101101111101101001101101;
    memory_AesPlugin_rom_storage[180] = 32'b11000110100011000000000110001101;
    memory_AesPlugin_rom_storage[181] = 32'b11010010011001001011000111010101;
    memory_AesPlugin_rom_storage[182] = 32'b01111001110100101001110001001110;
    memory_AesPlugin_rom_storage[183] = 32'b00100000111000000100100110101001;
    memory_AesPlugin_rom_storage[184] = 32'b10011010101101001101100001101100;
    memory_AesPlugin_rom_storage[185] = 32'b11011011111110101010110001010110;
    memory_AesPlugin_rom_storage[186] = 32'b11000000000001111111001111110100;
    memory_AesPlugin_rom_storage[187] = 32'b11111110001001011100111111101010;
    memory_AesPlugin_rom_storage[188] = 32'b01111000101011111100101001100101;
    memory_AesPlugin_rom_storage[189] = 32'b11001101100011101111010001111010;
    memory_AesPlugin_rom_storage[190] = 32'b01011010111010010100011110101110;
    memory_AesPlugin_rom_storage[191] = 32'b11110100000110000001000000001000;
    memory_AesPlugin_rom_storage[192] = 32'b00011111110101010110111110111010;
    memory_AesPlugin_rom_storage[193] = 32'b11011101100010001111000001111000;
    memory_AesPlugin_rom_storage[194] = 32'b10101000011011110100101000100101;
    memory_AesPlugin_rom_storage[195] = 32'b00110011011100100101110000101110;
    memory_AesPlugin_rom_storage[196] = 32'b10001000001001000011100000011100;
    memory_AesPlugin_rom_storage[197] = 32'b00000111111100010101011110100110;
    memory_AesPlugin_rom_storage[198] = 32'b11000111110001110111001110110100;
    memory_AesPlugin_rom_storage[199] = 32'b00110001010100011001011111000110;
    memory_AesPlugin_rom_storage[200] = 32'b10110001001000111100101111101000;
    memory_AesPlugin_rom_storage[201] = 32'b00010010011111001010000111011101;
    memory_AesPlugin_rom_storage[202] = 32'b00010000100111001110100001110100;
    memory_AesPlugin_rom_storage[203] = 32'b01011001001000010011111000011111;
    memory_AesPlugin_rom_storage[204] = 32'b00100111110111011001011001001011;
    memory_AesPlugin_rom_storage[205] = 32'b10000000110111000110000110111101;
    memory_AesPlugin_rom_storage[206] = 32'b11101100100001100000110110001011;
    memory_AesPlugin_rom_storage[207] = 32'b01011111100001010000111110001010;
    memory_AesPlugin_rom_storage[208] = 32'b01100000100100001110000001110000;
    memory_AesPlugin_rom_storage[209] = 32'b01010001010000100111110000111110;
    memory_AesPlugin_rom_storage[210] = 32'b01111111110001000111000110110101;
    memory_AesPlugin_rom_storage[211] = 32'b10101001101010101100110001100110;
    memory_AesPlugin_rom_storage[212] = 32'b00011001110110001001000001001000;
    memory_AesPlugin_rom_storage[213] = 32'b10110101000001010000011000000011;
    memory_AesPlugin_rom_storage[214] = 32'b01001010000000011111011111110110;
    memory_AesPlugin_rom_storage[215] = 32'b00001101000100100001110000001110;
    memory_AesPlugin_rom_storage[216] = 32'b00101101101000111100001001100001;
    memory_AesPlugin_rom_storage[217] = 32'b11100101010111110110101000110101;
    memory_AesPlugin_rom_storage[218] = 32'b01111010111110011010111001010111;
    memory_AesPlugin_rom_storage[219] = 32'b10011111110100000110100110111001;
    memory_AesPlugin_rom_storage[220] = 32'b10010011100100010001011110000110;
    memory_AesPlugin_rom_storage[221] = 32'b11001001010110001001100111000001;
    memory_AesPlugin_rom_storage[222] = 32'b10011100001001110011101000011101;
    memory_AesPlugin_rom_storage[223] = 32'b11101111101110010010011110011110;
    memory_AesPlugin_rom_storage[224] = 32'b10100000001110001101100111100001;
    memory_AesPlugin_rom_storage[225] = 32'b11100000000100111110101111111000;
    memory_AesPlugin_rom_storage[226] = 32'b00111011101100110010101110011000;
    memory_AesPlugin_rom_storage[227] = 32'b01001101001100110010001000010001;
    memory_AesPlugin_rom_storage[228] = 32'b10101110101110111101001001101001;
    memory_AesPlugin_rom_storage[229] = 32'b00101010011100001010100111011001;
    memory_AesPlugin_rom_storage[230] = 32'b11110101100010010000011110001110;
    memory_AesPlugin_rom_storage[231] = 32'b10110000101001110011001110010100;
    memory_AesPlugin_rom_storage[232] = 32'b11001000101101100010110110011011;
    memory_AesPlugin_rom_storage[233] = 32'b11101011001000100011110000011110;
    memory_AesPlugin_rom_storage[234] = 32'b10111011100100100001010110000111;
    memory_AesPlugin_rom_storage[235] = 32'b00111100001000001100100111101001;
    memory_AesPlugin_rom_storage[236] = 32'b10000011010010011000011111001110;
    memory_AesPlugin_rom_storage[237] = 32'b01010011111111111010101001010101;
    memory_AesPlugin_rom_storage[238] = 32'b10011001011110000101000000101000;
    memory_AesPlugin_rom_storage[239] = 32'b01100001011110101010010111011111;
    memory_AesPlugin_rom_storage[240] = 32'b00010111100011110000001110001100;
    memory_AesPlugin_rom_storage[241] = 32'b00101011111110000101100110100001;
    memory_AesPlugin_rom_storage[242] = 32'b00000100100000000000100110001001;
    memory_AesPlugin_rom_storage[243] = 32'b01111110000101110001101000001101;
    memory_AesPlugin_rom_storage[244] = 32'b10111010110110100110010110111111;
    memory_AesPlugin_rom_storage[245] = 32'b01110111001100011101011111100110;
    memory_AesPlugin_rom_storage[246] = 32'b11010110110001101000010001000010;
    memory_AesPlugin_rom_storage[247] = 32'b00100110101110001101000001101000;
    memory_AesPlugin_rom_storage[248] = 32'b11100001110000111000001001000001;
    memory_AesPlugin_rom_storage[249] = 32'b01101001101100000010100110011001;
    memory_AesPlugin_rom_storage[250] = 32'b00010100011101110101101000101101;
    memory_AesPlugin_rom_storage[251] = 32'b01100011000100010001111000001111;
    memory_AesPlugin_rom_storage[252] = 32'b01010101110010110111101110110000;
    memory_AesPlugin_rom_storage[253] = 32'b00100001111111001010100001010100;
    memory_AesPlugin_rom_storage[254] = 32'b00001100110101100110110110111011;
    memory_AesPlugin_rom_storage[255] = 32'b01111101001110100010110000010110;
    memory_AesPlugin_rom_storage[256] = 32'b01010000101001111111010001010001;
    memory_AesPlugin_rom_storage[257] = 32'b01010011011001010100000101111110;
    memory_AesPlugin_rom_storage[258] = 32'b11000011101001000001011100011010;
    memory_AesPlugin_rom_storage[259] = 32'b10010110010111100010011100111010;
    memory_AesPlugin_rom_storage[260] = 32'b11001011011010111010101100111011;
    memory_AesPlugin_rom_storage[261] = 32'b11110001010001011001110100011111;
    memory_AesPlugin_rom_storage[262] = 32'b10101011010110001111101010101100;
    memory_AesPlugin_rom_storage[263] = 32'b10010011000000111110001101001011;
    memory_AesPlugin_rom_storage[264] = 32'b01010101111110100011000000100000;
    memory_AesPlugin_rom_storage[265] = 32'b11110110011011010111011010101101;
    memory_AesPlugin_rom_storage[266] = 32'b10010001011101101100110010001000;
    memory_AesPlugin_rom_storage[267] = 32'b00100101010011000000001011110101;
    memory_AesPlugin_rom_storage[268] = 32'b11111100110101111110010101001111;
    memory_AesPlugin_rom_storage[269] = 32'b11010111110010110010101011000101;
    memory_AesPlugin_rom_storage[270] = 32'b10000000010001000011010100100110;
    memory_AesPlugin_rom_storage[271] = 32'b10001111101000110110001010110101;
    memory_AesPlugin_rom_storage[272] = 32'b01001001010110101011000111011110;
    memory_AesPlugin_rom_storage[273] = 32'b01100111000110111011101000100101;
    memory_AesPlugin_rom_storage[274] = 32'b10011000000011101110101001000101;
    memory_AesPlugin_rom_storage[275] = 32'b11100001110000001111111001011101;
    memory_AesPlugin_rom_storage[276] = 32'b00000010011101010010111111000011;
    memory_AesPlugin_rom_storage[277] = 32'b00010010111100000100110010000001;
    memory_AesPlugin_rom_storage[278] = 32'b10100011100101110100011010001101;
    memory_AesPlugin_rom_storage[279] = 32'b11000110111110011101001101101011;
    memory_AesPlugin_rom_storage[280] = 32'b11100111010111111000111100000011;
    memory_AesPlugin_rom_storage[281] = 32'b10010101100111001001001000010101;
    memory_AesPlugin_rom_storage[282] = 32'b11101011011110100110110110111111;
    memory_AesPlugin_rom_storage[283] = 32'b11011010010110010101001010010101;
    memory_AesPlugin_rom_storage[284] = 32'b00101101100000111011111011010100;
    memory_AesPlugin_rom_storage[285] = 32'b11010011001000010111010001011000;
    memory_AesPlugin_rom_storage[286] = 32'b00101001011010011110000001001001;
    memory_AesPlugin_rom_storage[287] = 32'b01000100110010001100100110001110;
    memory_AesPlugin_rom_storage[288] = 32'b01101010100010011100001001110101;
    memory_AesPlugin_rom_storage[289] = 32'b01111000011110011000111011110100;
    memory_AesPlugin_rom_storage[290] = 32'b01101011001111100101100010011001;
    memory_AesPlugin_rom_storage[291] = 32'b11011101011100011011100100100111;
    memory_AesPlugin_rom_storage[292] = 32'b10110110010011111110000110111110;
    memory_AesPlugin_rom_storage[293] = 32'b00010111101011011000100011110000;
    memory_AesPlugin_rom_storage[294] = 32'b01100110101011000010000011001001;
    memory_AesPlugin_rom_storage[295] = 32'b10110100001110101100111001111101;
    memory_AesPlugin_rom_storage[296] = 32'b00011000010010101101111101100011;
    memory_AesPlugin_rom_storage[297] = 32'b10000010001100010001101011100101;
    memory_AesPlugin_rom_storage[298] = 32'b01100000001100110101000110010111;
    memory_AesPlugin_rom_storage[299] = 32'b01000101011111110101001101100010;
    memory_AesPlugin_rom_storage[300] = 32'b11100000011101110110010010110001;
    memory_AesPlugin_rom_storage[301] = 32'b10000100101011100110101110111011;
    memory_AesPlugin_rom_storage[302] = 32'b00011100101000001000000111111110;
    memory_AesPlugin_rom_storage[303] = 32'b10010100001010110000100011111001;
    memory_AesPlugin_rom_storage[304] = 32'b01011000011010000100100001110000;
    memory_AesPlugin_rom_storage[305] = 32'b00011001111111010100010110001111;
    memory_AesPlugin_rom_storage[306] = 32'b10000111011011001101111010010100;
    memory_AesPlugin_rom_storage[307] = 32'b10110111111110000111101101010010;
    memory_AesPlugin_rom_storage[308] = 32'b00100011110100110111001110101011;
    memory_AesPlugin_rom_storage[309] = 32'b11100010000000100100101101110010;
    memory_AesPlugin_rom_storage[310] = 32'b01010111100011110001111111100011;
    memory_AesPlugin_rom_storage[311] = 32'b00101010101010110101010101100110;
    memory_AesPlugin_rom_storage[312] = 32'b00000111001010001110101110110010;
    memory_AesPlugin_rom_storage[313] = 32'b00000011110000101011010100101111;
    memory_AesPlugin_rom_storage[314] = 32'b10011010011110111100010110000110;
    memory_AesPlugin_rom_storage[315] = 32'b10100101000010000011011111010011;
    memory_AesPlugin_rom_storage[316] = 32'b11110010100001110010100000110000;
    memory_AesPlugin_rom_storage[317] = 32'b10110010101001011011111100100011;
    memory_AesPlugin_rom_storage[318] = 32'b10111010011010100000001100000010;
    memory_AesPlugin_rom_storage[319] = 32'b01011100100000100001011011101101;
    memory_AesPlugin_rom_storage[320] = 32'b00101011000111001100111110001010;
    memory_AesPlugin_rom_storage[321] = 32'b10010010101101000111100110100111;
    memory_AesPlugin_rom_storage[322] = 32'b11110000111100100000011111110011;
    memory_AesPlugin_rom_storage[323] = 32'b10100001111000100110100101001110;
    memory_AesPlugin_rom_storage[324] = 32'b11001101111101001101101001100101;
    memory_AesPlugin_rom_storage[325] = 32'b11010101101111100000010100000110;
    memory_AesPlugin_rom_storage[326] = 32'b00011111011000100011010011010001;
    memory_AesPlugin_rom_storage[327] = 32'b10001010111111101010011011000100;
    memory_AesPlugin_rom_storage[328] = 32'b10011101010100110010111000110100;
    memory_AesPlugin_rom_storage[329] = 32'b10100000010101011111001110100010;
    memory_AesPlugin_rom_storage[330] = 32'b00110010111000011000101000000101;
    memory_AesPlugin_rom_storage[331] = 32'b01110101111010111111011010100100;
    memory_AesPlugin_rom_storage[332] = 32'b00111001111011001000001100001011;
    memory_AesPlugin_rom_storage[333] = 32'b10101010111011110110000001000000;
    memory_AesPlugin_rom_storage[334] = 32'b00000110100111110111000101011110;
    memory_AesPlugin_rom_storage[335] = 32'b01010001000100000110111010111101;
    memory_AesPlugin_rom_storage[336] = 32'b11111001100010100010000100111110;
    memory_AesPlugin_rom_storage[337] = 32'b00111101000001101101110110010110;
    memory_AesPlugin_rom_storage[338] = 32'b10101110000001010011111011011101;
    memory_AesPlugin_rom_storage[339] = 32'b01000110101111011110011001001101;
    memory_AesPlugin_rom_storage[340] = 32'b10110101100011010101010010010001;
    memory_AesPlugin_rom_storage[341] = 32'b00000101010111011100010001110001;
    memory_AesPlugin_rom_storage[342] = 32'b01101111110101000000011000000100;
    memory_AesPlugin_rom_storage[343] = 32'b11111111000101010101000001100000;
    memory_AesPlugin_rom_storage[344] = 32'b00100100111110111001100000011001;
    memory_AesPlugin_rom_storage[345] = 32'b10010111111010011011110111010110;
    memory_AesPlugin_rom_storage[346] = 32'b11001100010000110100000010001001;
    memory_AesPlugin_rom_storage[347] = 32'b01110111100111101101100101100111;
    memory_AesPlugin_rom_storage[348] = 32'b10111101010000101110100010110000;
    memory_AesPlugin_rom_storage[349] = 32'b10001000100010111000100100000111;
    memory_AesPlugin_rom_storage[350] = 32'b00111000010110110001100111100111;
    memory_AesPlugin_rom_storage[351] = 32'b11011011111011101100100001111001;
    memory_AesPlugin_rom_storage[352] = 32'b01000111000010100111110010100001;
    memory_AesPlugin_rom_storage[353] = 32'b11101001000011110100001001111100;
    memory_AesPlugin_rom_storage[354] = 32'b11001001000111101000010011111000;
    memory_AesPlugin_rom_storage[355] = 32'b00000000000000000000000000000000;
    memory_AesPlugin_rom_storage[356] = 32'b10000011100001101000000000001001;
    memory_AesPlugin_rom_storage[357] = 32'b01001000111011010010101100110010;
    memory_AesPlugin_rom_storage[358] = 32'b10101100011100000001000100011110;
    memory_AesPlugin_rom_storage[359] = 32'b01001110011100100101101001101100;
    memory_AesPlugin_rom_storage[360] = 32'b11111011111111110000111011111101;
    memory_AesPlugin_rom_storage[361] = 32'b01010110001110001000010100001111;
    memory_AesPlugin_rom_storage[362] = 32'b00011110110101011010111000111101;
    memory_AesPlugin_rom_storage[363] = 32'b00100111001110010010110100110110;
    memory_AesPlugin_rom_storage[364] = 32'b01100100110110010000111100001010;
    memory_AesPlugin_rom_storage[365] = 32'b00100001101001100101110001101000;
    memory_AesPlugin_rom_storage[366] = 32'b11010001010101000101101110011011;
    memory_AesPlugin_rom_storage[367] = 32'b00111010001011100011011000100100;
    memory_AesPlugin_rom_storage[368] = 32'b10110001011001110000101000001100;
    memory_AesPlugin_rom_storage[369] = 32'b00001111111001110101011110010011;
    memory_AesPlugin_rom_storage[370] = 32'b11010010100101101110111010110100;
    memory_AesPlugin_rom_storage[371] = 32'b10011110100100011001101100011011;
    memory_AesPlugin_rom_storage[372] = 32'b01001111110001011100000010000000;
    memory_AesPlugin_rom_storage[373] = 32'b10100010001000001101110001100001;
    memory_AesPlugin_rom_storage[374] = 32'b01101001010010110111011101011010;
    memory_AesPlugin_rom_storage[375] = 32'b00010110000110100001001000011100;
    memory_AesPlugin_rom_storage[376] = 32'b00001010101110101001001111100010;
    memory_AesPlugin_rom_storage[377] = 32'b11100101001010101010000011000000;
    memory_AesPlugin_rom_storage[378] = 32'b01000011111000000010001000111100;
    memory_AesPlugin_rom_storage[379] = 32'b00011101000101110001101100010010;
    memory_AesPlugin_rom_storage[380] = 32'b00001011000011010000100100001110;
    memory_AesPlugin_rom_storage[381] = 32'b10101101110001111000101111110010;
    memory_AesPlugin_rom_storage[382] = 32'b10111001101010001011011000101101;
    memory_AesPlugin_rom_storage[383] = 32'b11001000101010010001111000010100;
    memory_AesPlugin_rom_storage[384] = 32'b10000101000110011111000101010111;
    memory_AesPlugin_rom_storage[385] = 32'b01001100000001110111010110101111;
    memory_AesPlugin_rom_storage[386] = 32'b10111011110111011001100111101110;
    memory_AesPlugin_rom_storage[387] = 32'b11111101011000000111111110100011;
    memory_AesPlugin_rom_storage[388] = 32'b10011111001001100000000111110111;
    memory_AesPlugin_rom_storage[389] = 32'b10111100111101010111001001011100;
    memory_AesPlugin_rom_storage[390] = 32'b11000101001110110110011001000100;
    memory_AesPlugin_rom_storage[391] = 32'b00110100011111101111101101011011;
    memory_AesPlugin_rom_storage[392] = 32'b01110110001010010100001110001011;
    memory_AesPlugin_rom_storage[393] = 32'b11011100110001100010001111001011;
    memory_AesPlugin_rom_storage[394] = 32'b01101000111111001110110110110110;
    memory_AesPlugin_rom_storage[395] = 32'b01100011111100011110010010111000;
    memory_AesPlugin_rom_storage[396] = 32'b11001010110111000011000111010111;
    memory_AesPlugin_rom_storage[397] = 32'b00010000100001010110001101000010;
    memory_AesPlugin_rom_storage[398] = 32'b01000000001000101001011100010011;
    memory_AesPlugin_rom_storage[399] = 32'b00100000000100011100011010000100;
    memory_AesPlugin_rom_storage[400] = 32'b01111101001001000100101010000101;
    memory_AesPlugin_rom_storage[401] = 32'b11111000001111011011101111010010;
    memory_AesPlugin_rom_storage[402] = 32'b00010001001100101111100110101110;
    memory_AesPlugin_rom_storage[403] = 32'b01101101101000010010100111000111;
    memory_AesPlugin_rom_storage[404] = 32'b01001011001011111001111000011101;
    memory_AesPlugin_rom_storage[405] = 32'b11110011001100001011001011011100;
    memory_AesPlugin_rom_storage[406] = 32'b11101100010100101000011000001101;
    memory_AesPlugin_rom_storage[407] = 32'b11010000111000111100000101110111;
    memory_AesPlugin_rom_storage[408] = 32'b01101100000101101011001100101011;
    memory_AesPlugin_rom_storage[409] = 32'b10011001101110010111000010101001;
    memory_AesPlugin_rom_storage[410] = 32'b11111010010010001001010000010001;
    memory_AesPlugin_rom_storage[411] = 32'b00100010011001001110100101000111;
    memory_AesPlugin_rom_storage[412] = 32'b11000100100011001111110010101000;
    memory_AesPlugin_rom_storage[413] = 32'b00011010001111111111000010100000;
    memory_AesPlugin_rom_storage[414] = 32'b11011000001011000111110101010110;
    memory_AesPlugin_rom_storage[415] = 32'b11101111100100000011001100100010;
    memory_AesPlugin_rom_storage[416] = 32'b11000111010011100100100110000111;
    memory_AesPlugin_rom_storage[417] = 32'b11000001110100010011100011011001;
    memory_AesPlugin_rom_storage[418] = 32'b11111110101000101100101010001100;
    memory_AesPlugin_rom_storage[419] = 32'b00110110000010111101010010011000;
    memory_AesPlugin_rom_storage[420] = 32'b11001111100000011111010110100110;
    memory_AesPlugin_rom_storage[421] = 32'b00101000110111100111101010100101;
    memory_AesPlugin_rom_storage[422] = 32'b00100110100011101011011111011010;
    memory_AesPlugin_rom_storage[423] = 32'b10100100101111111010110100111111;
    memory_AesPlugin_rom_storage[424] = 32'b11100100100111010011101000101100;
    memory_AesPlugin_rom_storage[425] = 32'b00001101100100100111100001010000;
    memory_AesPlugin_rom_storage[426] = 32'b10011011110011000101111101101010;
    memory_AesPlugin_rom_storage[427] = 32'b01100010010001100111111001010100;
    memory_AesPlugin_rom_storage[428] = 32'b11000010000100111000110111110110;
    memory_AesPlugin_rom_storage[429] = 32'b11101000101110001101100010010000;
    memory_AesPlugin_rom_storage[430] = 32'b01011110111101110011100100101110;
    memory_AesPlugin_rom_storage[431] = 32'b11110101101011111100001110000010;
    memory_AesPlugin_rom_storage[432] = 32'b10111110100000000101110110011111;
    memory_AesPlugin_rom_storage[433] = 32'b01111100100100111101000001101001;
    memory_AesPlugin_rom_storage[434] = 32'b10101001001011011101010101101111;
    memory_AesPlugin_rom_storage[435] = 32'b10110011000100100010010111001111;
    memory_AesPlugin_rom_storage[436] = 32'b00111011100110011010110011001000;
    memory_AesPlugin_rom_storage[437] = 32'b10100111011111010001100000010000;
    memory_AesPlugin_rom_storage[438] = 32'b01101110011000111001110011101000;
    memory_AesPlugin_rom_storage[439] = 32'b01111011101110110011101111011011;
    memory_AesPlugin_rom_storage[440] = 32'b00001001011110000010011011001101;
    memory_AesPlugin_rom_storage[441] = 32'b11110100000110000101100101101110;
    memory_AesPlugin_rom_storage[442] = 32'b00000001101101111001101011101100;
    memory_AesPlugin_rom_storage[443] = 32'b10101000100110100100111110000011;
    memory_AesPlugin_rom_storage[444] = 32'b01100101011011101001010111100110;
    memory_AesPlugin_rom_storage[445] = 32'b01111110111001101111111110101010;
    memory_AesPlugin_rom_storage[446] = 32'b00001000110011111011110000100001;
    memory_AesPlugin_rom_storage[447] = 32'b11100110111010000001010111101111;
    memory_AesPlugin_rom_storage[448] = 32'b11011001100110111110011110111010;
    memory_AesPlugin_rom_storage[449] = 32'b11001110001101100110111101001010;
    memory_AesPlugin_rom_storage[450] = 32'b11010100000010011001111111101010;
    memory_AesPlugin_rom_storage[451] = 32'b11010110011111001011000000101001;
    memory_AesPlugin_rom_storage[452] = 32'b10101111101100101010010000110001;
    memory_AesPlugin_rom_storage[453] = 32'b00110001001000110011111100101010;
    memory_AesPlugin_rom_storage[454] = 32'b00110000100101001010010111000110;
    memory_AesPlugin_rom_storage[455] = 32'b11000000011001101010001000110101;
    memory_AesPlugin_rom_storage[456] = 32'b00110111101111000100111001110100;
    memory_AesPlugin_rom_storage[457] = 32'b10100110110010101000001011111100;
    memory_AesPlugin_rom_storage[458] = 32'b10110000110100001001000011100000;
    memory_AesPlugin_rom_storage[459] = 32'b00010101110110001010011100110011;
    memory_AesPlugin_rom_storage[460] = 32'b01001010100110000000010011110001;
    memory_AesPlugin_rom_storage[461] = 32'b11110111110110101110110001000001;
    memory_AesPlugin_rom_storage[462] = 32'b00001110010100001100110101111111;
    memory_AesPlugin_rom_storage[463] = 32'b00101111111101101001000100010111;
    memory_AesPlugin_rom_storage[464] = 32'b10001101110101100100110101110110;
    memory_AesPlugin_rom_storage[465] = 32'b01001101101100001110111101000011;
    memory_AesPlugin_rom_storage[466] = 32'b01010100010011011010101011001100;
    memory_AesPlugin_rom_storage[467] = 32'b11011111000001001001011011100100;
    memory_AesPlugin_rom_storage[468] = 32'b11100011101101011101000110011110;
    memory_AesPlugin_rom_storage[469] = 32'b00011011100010000110101001001100;
    memory_AesPlugin_rom_storage[470] = 32'b10111000000111110010110011000001;
    memory_AesPlugin_rom_storage[471] = 32'b01111111010100010110010101000110;
    memory_AesPlugin_rom_storage[472] = 32'b00000100111010100101111010011101;
    memory_AesPlugin_rom_storage[473] = 32'b01011101001101011000110000000001;
    memory_AesPlugin_rom_storage[474] = 32'b01110011011101001000011111111010;
    memory_AesPlugin_rom_storage[475] = 32'b00101110010000010000101111111011;
    memory_AesPlugin_rom_storage[476] = 32'b01011010000111010110011110110011;
    memory_AesPlugin_rom_storage[477] = 32'b01010010110100101101101110010010;
    memory_AesPlugin_rom_storage[478] = 32'b00110011010101100001000011101001;
    memory_AesPlugin_rom_storage[479] = 32'b00010011010001111101011001101101;
    memory_AesPlugin_rom_storage[480] = 32'b10001100011000011101011110011010;
    memory_AesPlugin_rom_storage[481] = 32'b01111010000011001010000100110111;
    memory_AesPlugin_rom_storage[482] = 32'b10001110000101001111100001011001;
    memory_AesPlugin_rom_storage[483] = 32'b10001001001111000001001111101011;
    memory_AesPlugin_rom_storage[484] = 32'b11101110001001111010100111001110;
    memory_AesPlugin_rom_storage[485] = 32'b00110101110010010110000110110111;
    memory_AesPlugin_rom_storage[486] = 32'b11101101111001010001110011100001;
    memory_AesPlugin_rom_storage[487] = 32'b00111100101100010100011101111010;
    memory_AesPlugin_rom_storage[488] = 32'b01011001110111111101001010011100;
    memory_AesPlugin_rom_storage[489] = 32'b00111111011100111111001001010101;
    memory_AesPlugin_rom_storage[490] = 32'b01111001110011100001010000011000;
    memory_AesPlugin_rom_storage[491] = 32'b10111111001101111100011101110011;
    memory_AesPlugin_rom_storage[492] = 32'b11101010110011011111011101010011;
    memory_AesPlugin_rom_storage[493] = 32'b01011011101010101111110101011111;
    memory_AesPlugin_rom_storage[494] = 32'b00010100011011110011110111011111;
    memory_AesPlugin_rom_storage[495] = 32'b10000110110110110100010001111000;
    memory_AesPlugin_rom_storage[496] = 32'b10000001111100111010111111001010;
    memory_AesPlugin_rom_storage[497] = 32'b00111110110001000110100010111001;
    memory_AesPlugin_rom_storage[498] = 32'b00101100001101000010010000111000;
    memory_AesPlugin_rom_storage[499] = 32'b01011111010000001010001111000010;
    memory_AesPlugin_rom_storage[500] = 32'b01110010110000110001110100010110;
    memory_AesPlugin_rom_storage[501] = 32'b00001100001001011110001010111100;
    memory_AesPlugin_rom_storage[502] = 32'b10001011010010010011110000101000;
    memory_AesPlugin_rom_storage[503] = 32'b01000001100101010000110111111111;
    memory_AesPlugin_rom_storage[504] = 32'b01110001000000011010100000111001;
    memory_AesPlugin_rom_storage[505] = 32'b11011110101100110000110000001000;
    memory_AesPlugin_rom_storage[506] = 32'b10011100111001001011010011011000;
    memory_AesPlugin_rom_storage[507] = 32'b10010000110000010101011001100100;
    memory_AesPlugin_rom_storage[508] = 32'b01100001100001001100101101111011;
    memory_AesPlugin_rom_storage[509] = 32'b01110000101101100011001011010101;
    memory_AesPlugin_rom_storage[510] = 32'b01110100010111000110110001001000;
    memory_AesPlugin_rom_storage[511] = 32'b01000010010101111011100011010000;
  end
  always @ (posedge CLKOUT0) begin
    if(_zz_146) begin
      _zz_207 <= memory_AesPlugin_rom_storage[execute_AesPlugin_romAddress];
    end
  end

  InstructionCache IBusCachedPlugin_cache (
    .io_flush                                 (_zz_171                                                     ), //i
    .io_cpu_prefetch_isValid                  (_zz_172                                                     ), //i
    .io_cpu_prefetch_haltIt                   (IBusCachedPlugin_cache_io_cpu_prefetch_haltIt               ), //o
    .io_cpu_prefetch_pc                       (IBusCachedPlugin_iBusRsp_stages_0_input_payload[31:0]       ), //i
    .io_cpu_fetch_isValid                     (_zz_173                                                     ), //i
    .io_cpu_fetch_isStuck                     (_zz_174                                                     ), //i
    .io_cpu_fetch_isRemoved                   (_zz_175                                                     ), //i
    .io_cpu_fetch_pc                          (IBusCachedPlugin_iBusRsp_stages_1_input_payload[31:0]       ), //i
    .io_cpu_fetch_data                        (IBusCachedPlugin_cache_io_cpu_fetch_data[31:0]              ), //o
    .io_cpu_fetch_mmuRsp_physicalAddress      (IBusCachedPlugin_mmuBus_rsp_physicalAddress[31:0]           ), //i
    .io_cpu_fetch_mmuRsp_isIoAccess           (IBusCachedPlugin_mmuBus_rsp_isIoAccess                      ), //i
    .io_cpu_fetch_mmuRsp_allowRead            (IBusCachedPlugin_mmuBus_rsp_allowRead                       ), //i
    .io_cpu_fetch_mmuRsp_allowWrite           (IBusCachedPlugin_mmuBus_rsp_allowWrite                      ), //i
    .io_cpu_fetch_mmuRsp_allowExecute         (IBusCachedPlugin_mmuBus_rsp_allowExecute                    ), //i
    .io_cpu_fetch_mmuRsp_exception            (IBusCachedPlugin_mmuBus_rsp_exception                       ), //i
    .io_cpu_fetch_mmuRsp_refilling            (IBusCachedPlugin_mmuBus_rsp_refilling                       ), //i
    .io_cpu_fetch_mmuRsp_bypassTranslation    (IBusCachedPlugin_mmuBus_rsp_bypassTranslation               ), //i
    .io_cpu_fetch_mmuRsp_ways_0_sel           (IBusCachedPlugin_mmuBus_rsp_ways_0_sel                      ), //i
    .io_cpu_fetch_mmuRsp_ways_0_physical      (IBusCachedPlugin_mmuBus_rsp_ways_0_physical[31:0]           ), //i
    .io_cpu_fetch_mmuRsp_ways_1_sel           (IBusCachedPlugin_mmuBus_rsp_ways_1_sel                      ), //i
    .io_cpu_fetch_mmuRsp_ways_1_physical      (IBusCachedPlugin_mmuBus_rsp_ways_1_physical[31:0]           ), //i
    .io_cpu_fetch_mmuRsp_ways_2_sel           (IBusCachedPlugin_mmuBus_rsp_ways_2_sel                      ), //i
    .io_cpu_fetch_mmuRsp_ways_2_physical      (IBusCachedPlugin_mmuBus_rsp_ways_2_physical[31:0]           ), //i
    .io_cpu_fetch_mmuRsp_ways_3_sel           (IBusCachedPlugin_mmuBus_rsp_ways_3_sel                      ), //i
    .io_cpu_fetch_mmuRsp_ways_3_physical      (IBusCachedPlugin_mmuBus_rsp_ways_3_physical[31:0]           ), //i
    .io_cpu_fetch_physicalAddress             (IBusCachedPlugin_cache_io_cpu_fetch_physicalAddress[31:0]   ), //o
    .io_cpu_decode_isValid                    (_zz_176                                                     ), //i
    .io_cpu_decode_isStuck                    (_zz_177                                                     ), //i
    .io_cpu_decode_pc                         (IBusCachedPlugin_iBusRsp_stages_2_input_payload[31:0]       ), //i
    .io_cpu_decode_physicalAddress            (IBusCachedPlugin_cache_io_cpu_decode_physicalAddress[31:0]  ), //o
    .io_cpu_decode_data                       (IBusCachedPlugin_cache_io_cpu_decode_data[31:0]             ), //o
    .io_cpu_decode_cacheMiss                  (IBusCachedPlugin_cache_io_cpu_decode_cacheMiss              ), //o
    .io_cpu_decode_error                      (IBusCachedPlugin_cache_io_cpu_decode_error                  ), //o
    .io_cpu_decode_mmuRefilling               (IBusCachedPlugin_cache_io_cpu_decode_mmuRefilling           ), //o
    .io_cpu_decode_mmuException               (IBusCachedPlugin_cache_io_cpu_decode_mmuException           ), //o
    .io_cpu_decode_isUser                     (_zz_178                                                     ), //i
    .io_cpu_fill_valid                        (_zz_179                                                     ), //i
    .io_cpu_fill_payload                      (IBusCachedPlugin_cache_io_cpu_decode_physicalAddress[31:0]  ), //i
    .io_mem_cmd_valid                         (IBusCachedPlugin_cache_io_mem_cmd_valid                     ), //o
    .io_mem_cmd_ready                         (iBus_cmd_ready                                              ), //i
    .io_mem_cmd_payload_address               (IBusCachedPlugin_cache_io_mem_cmd_payload_address[31:0]     ), //o
    .io_mem_cmd_payload_size                  (IBusCachedPlugin_cache_io_mem_cmd_payload_size[2:0]         ), //o
    .io_mem_rsp_valid                         (iBus_rsp_valid                                              ), //i
    .io_mem_rsp_payload_data                  (iBus_rsp_payload_data[63:0]                                 ), //i
    .io_mem_rsp_payload_error                 (iBus_rsp_payload_error                                      ), //i
    ._zz_18                                   (_zz_148[2:0]                                                ), //i
    ._zz_19                                   (IBusCachedPlugin_injectionPort_payload[31:0]                ), //i
    .CLKOUT0                                  (CLKOUT0                                                     ), //i
    .systemCd_logic_outputReset               (systemCd_logic_outputReset                                  )  //i
  );
  DataCache dataCache_2 (
    .io_cpu_execute_isValid                    (_zz_180                                            ), //i
    .io_cpu_execute_address                    (_zz_181[31:0]                                      ), //i
    .io_cpu_execute_haltIt                     (dataCache_2_io_cpu_execute_haltIt                  ), //o
    .io_cpu_execute_args_wr                    (_zz_182                                            ), //i
    .io_cpu_execute_args_data                  (_zz_183[31:0]                                      ), //i
    .io_cpu_execute_args_size                  (_zz_184[1:0]                                       ), //i
    .io_cpu_execute_args_isLrsc                (_zz_185                                            ), //i
    .io_cpu_execute_args_isAmo                 (_zz_186                                            ), //i
    .io_cpu_execute_args_amoCtrl_swap          (_zz_187                                            ), //i
    .io_cpu_execute_args_amoCtrl_alu           (_zz_188[2:0]                                       ), //i
    .io_cpu_execute_args_totalyConsistent      (execute_MEMORY_FORCE_CONSTISTENCY                  ), //i
    .io_cpu_execute_refilling                  (dataCache_2_io_cpu_execute_refilling               ), //o
    .io_cpu_memory_isValid                     (_zz_189                                            ), //i
    .io_cpu_memory_isStuck                     (memory_arbitration_isStuck                         ), //i
    .io_cpu_memory_isWrite                     (dataCache_2_io_cpu_memory_isWrite                  ), //o
    .io_cpu_memory_address                     (memory_MEMORY_VIRTUAL_ADDRESS[31:0]                ), //i
    .io_cpu_memory_mmuRsp_physicalAddress      (DBusCachedPlugin_mmuBus_rsp_physicalAddress[31:0]  ), //i
    .io_cpu_memory_mmuRsp_isIoAccess           (_zz_190                                            ), //i
    .io_cpu_memory_mmuRsp_allowRead            (DBusCachedPlugin_mmuBus_rsp_allowRead              ), //i
    .io_cpu_memory_mmuRsp_allowWrite           (DBusCachedPlugin_mmuBus_rsp_allowWrite             ), //i
    .io_cpu_memory_mmuRsp_allowExecute         (DBusCachedPlugin_mmuBus_rsp_allowExecute           ), //i
    .io_cpu_memory_mmuRsp_exception            (DBusCachedPlugin_mmuBus_rsp_exception              ), //i
    .io_cpu_memory_mmuRsp_refilling            (DBusCachedPlugin_mmuBus_rsp_refilling              ), //i
    .io_cpu_memory_mmuRsp_bypassTranslation    (DBusCachedPlugin_mmuBus_rsp_bypassTranslation      ), //i
    .io_cpu_memory_mmuRsp_ways_0_sel           (DBusCachedPlugin_mmuBus_rsp_ways_0_sel             ), //i
    .io_cpu_memory_mmuRsp_ways_0_physical      (DBusCachedPlugin_mmuBus_rsp_ways_0_physical[31:0]  ), //i
    .io_cpu_memory_mmuRsp_ways_1_sel           (DBusCachedPlugin_mmuBus_rsp_ways_1_sel             ), //i
    .io_cpu_memory_mmuRsp_ways_1_physical      (DBusCachedPlugin_mmuBus_rsp_ways_1_physical[31:0]  ), //i
    .io_cpu_memory_mmuRsp_ways_2_sel           (DBusCachedPlugin_mmuBus_rsp_ways_2_sel             ), //i
    .io_cpu_memory_mmuRsp_ways_2_physical      (DBusCachedPlugin_mmuBus_rsp_ways_2_physical[31:0]  ), //i
    .io_cpu_memory_mmuRsp_ways_3_sel           (DBusCachedPlugin_mmuBus_rsp_ways_3_sel             ), //i
    .io_cpu_memory_mmuRsp_ways_3_physical      (DBusCachedPlugin_mmuBus_rsp_ways_3_physical[31:0]  ), //i
    .io_cpu_writeBack_isValid                  (_zz_191                                            ), //i
    .io_cpu_writeBack_isStuck                  (writeBack_arbitration_isStuck                      ), //i
    .io_cpu_writeBack_isUser                   (_zz_192                                            ), //i
    .io_cpu_writeBack_haltIt                   (dataCache_2_io_cpu_writeBack_haltIt                ), //o
    .io_cpu_writeBack_isWrite                  (dataCache_2_io_cpu_writeBack_isWrite               ), //o
    .io_cpu_writeBack_data                     (dataCache_2_io_cpu_writeBack_data[31:0]            ), //o
    .io_cpu_writeBack_address                  (_zz_193[31:0]                                      ), //i
    .io_cpu_writeBack_mmuException             (dataCache_2_io_cpu_writeBack_mmuException          ), //o
    .io_cpu_writeBack_unalignedAccess          (dataCache_2_io_cpu_writeBack_unalignedAccess       ), //o
    .io_cpu_writeBack_accessError              (dataCache_2_io_cpu_writeBack_accessError           ), //o
    .io_cpu_writeBack_keepMemRspData           (dataCache_2_io_cpu_writeBack_keepMemRspData        ), //o
    .io_cpu_writeBack_fence_SW                 (_zz_194                                            ), //i
    .io_cpu_writeBack_fence_SR                 (_zz_195                                            ), //i
    .io_cpu_writeBack_fence_SO                 (_zz_196                                            ), //i
    .io_cpu_writeBack_fence_SI                 (_zz_197                                            ), //i
    .io_cpu_writeBack_fence_PW                 (_zz_198                                            ), //i
    .io_cpu_writeBack_fence_PR                 (_zz_199                                            ), //i
    .io_cpu_writeBack_fence_PO                 (_zz_200                                            ), //i
    .io_cpu_writeBack_fence_PI                 (_zz_201                                            ), //i
    .io_cpu_writeBack_fence_FM                 (_zz_202[3:0]                                       ), //i
    .io_cpu_redo                               (dataCache_2_io_cpu_redo                            ), //o
    .io_cpu_flush_valid                        (_zz_203                                            ), //i
    .io_cpu_flush_ready                        (dataCache_2_io_cpu_flush_ready                     ), //o
    .io_mem_cmd_valid                          (dataCache_2_io_mem_cmd_valid                       ), //o
    .io_mem_cmd_ready                          (_zz_204                                            ), //i
    .io_mem_cmd_payload_wr                     (dataCache_2_io_mem_cmd_payload_wr                  ), //o
    .io_mem_cmd_payload_uncached               (dataCache_2_io_mem_cmd_payload_uncached            ), //o
    .io_mem_cmd_payload_address                (dataCache_2_io_mem_cmd_payload_address[31:0]       ), //o
    .io_mem_cmd_payload_data                   (dataCache_2_io_mem_cmd_payload_data[31:0]          ), //o
    .io_mem_cmd_payload_mask                   (dataCache_2_io_mem_cmd_payload_mask[3:0]           ), //o
    .io_mem_cmd_payload_length                 (dataCache_2_io_mem_cmd_payload_length[3:0]         ), //o
    .io_mem_cmd_payload_exclusive              (dataCache_2_io_mem_cmd_payload_exclusive           ), //o
    .io_mem_cmd_payload_last                   (dataCache_2_io_mem_cmd_payload_last                ), //o
    .io_mem_rsp_valid                          (dBus_rsp_valid_regNext                             ), //i
    .io_mem_rsp_payload_aggregated             (dBus_rsp_payload_aggregated_regNext[2:0]           ), //i
    .io_mem_rsp_payload_last                   (dBus_rsp_payload_last_regNext                      ), //i
    .io_mem_rsp_payload_data                   (dBus_rsp_payload_data_regNextWhen[63:0]            ), //i
    .io_mem_rsp_payload_error                  (dBus_rsp_payload_error_regNext                     ), //i
    .io_mem_rsp_payload_exclusive              (dBus_rsp_payload_exclusive_regNext                 ), //i
    .io_mem_inv_valid                          (dBus_inv_valid                                     ), //i
    .io_mem_inv_ready                          (dataCache_2_io_mem_inv_ready                       ), //o
    .io_mem_inv_payload_last                   (dBus_inv_payload_last                              ), //i
    .io_mem_inv_payload_fragment_enable        (dBus_inv_payload_fragment_enable                   ), //i
    .io_mem_inv_payload_fragment_address       (dBus_inv_payload_fragment_address[31:0]            ), //i
    .io_mem_ack_valid                          (dataCache_2_io_mem_ack_valid                       ), //o
    .io_mem_ack_ready                          (dBus_ack_ready                                     ), //i
    .io_mem_ack_payload_last                   (dataCache_2_io_mem_ack_payload_last                ), //o
    .io_mem_ack_payload_fragment_hit           (dataCache_2_io_mem_ack_payload_fragment_hit        ), //o
    .io_mem_sync_valid                         (dBus_sync_valid                                    ), //i
    .io_mem_sync_ready                         (dataCache_2_io_mem_sync_ready                      ), //o
    .io_mem_sync_payload_aggregated            (dBus_sync_payload_aggregated[2:0]                  ), //i
    .CLKOUT0                                   (CLKOUT0                                            ), //i
    .systemCd_logic_outputReset                (systemCd_logic_outputReset                         )  //i
  );
  always @(*) begin
    case(_zz_52)
      2'b00 : begin
        _zz_208 = MmuPlugin_ports_0_cache_0_valid;
        _zz_209 = MmuPlugin_ports_0_cache_0_exception;
        _zz_210 = MmuPlugin_ports_0_cache_0_superPage;
        _zz_211 = MmuPlugin_ports_0_cache_0_virtualAddress_0;
        _zz_212 = MmuPlugin_ports_0_cache_0_virtualAddress_1;
        _zz_213 = MmuPlugin_ports_0_cache_0_physicalAddress_0;
        _zz_214 = MmuPlugin_ports_0_cache_0_physicalAddress_1;
        _zz_215 = MmuPlugin_ports_0_cache_0_allowRead;
        _zz_216 = MmuPlugin_ports_0_cache_0_allowWrite;
        _zz_217 = MmuPlugin_ports_0_cache_0_allowExecute;
        _zz_218 = MmuPlugin_ports_0_cache_0_allowUser;
      end
      2'b01 : begin
        _zz_208 = MmuPlugin_ports_0_cache_1_valid;
        _zz_209 = MmuPlugin_ports_0_cache_1_exception;
        _zz_210 = MmuPlugin_ports_0_cache_1_superPage;
        _zz_211 = MmuPlugin_ports_0_cache_1_virtualAddress_0;
        _zz_212 = MmuPlugin_ports_0_cache_1_virtualAddress_1;
        _zz_213 = MmuPlugin_ports_0_cache_1_physicalAddress_0;
        _zz_214 = MmuPlugin_ports_0_cache_1_physicalAddress_1;
        _zz_215 = MmuPlugin_ports_0_cache_1_allowRead;
        _zz_216 = MmuPlugin_ports_0_cache_1_allowWrite;
        _zz_217 = MmuPlugin_ports_0_cache_1_allowExecute;
        _zz_218 = MmuPlugin_ports_0_cache_1_allowUser;
      end
      2'b10 : begin
        _zz_208 = MmuPlugin_ports_0_cache_2_valid;
        _zz_209 = MmuPlugin_ports_0_cache_2_exception;
        _zz_210 = MmuPlugin_ports_0_cache_2_superPage;
        _zz_211 = MmuPlugin_ports_0_cache_2_virtualAddress_0;
        _zz_212 = MmuPlugin_ports_0_cache_2_virtualAddress_1;
        _zz_213 = MmuPlugin_ports_0_cache_2_physicalAddress_0;
        _zz_214 = MmuPlugin_ports_0_cache_2_physicalAddress_1;
        _zz_215 = MmuPlugin_ports_0_cache_2_allowRead;
        _zz_216 = MmuPlugin_ports_0_cache_2_allowWrite;
        _zz_217 = MmuPlugin_ports_0_cache_2_allowExecute;
        _zz_218 = MmuPlugin_ports_0_cache_2_allowUser;
      end
      default : begin
        _zz_208 = MmuPlugin_ports_0_cache_3_valid;
        _zz_209 = MmuPlugin_ports_0_cache_3_exception;
        _zz_210 = MmuPlugin_ports_0_cache_3_superPage;
        _zz_211 = MmuPlugin_ports_0_cache_3_virtualAddress_0;
        _zz_212 = MmuPlugin_ports_0_cache_3_virtualAddress_1;
        _zz_213 = MmuPlugin_ports_0_cache_3_physicalAddress_0;
        _zz_214 = MmuPlugin_ports_0_cache_3_physicalAddress_1;
        _zz_215 = MmuPlugin_ports_0_cache_3_allowRead;
        _zz_216 = MmuPlugin_ports_0_cache_3_allowWrite;
        _zz_217 = MmuPlugin_ports_0_cache_3_allowExecute;
        _zz_218 = MmuPlugin_ports_0_cache_3_allowUser;
      end
    endcase
  end

  always @(*) begin
    case(_zz_56)
      2'b00 : begin
        _zz_219 = MmuPlugin_ports_1_cache_0_valid;
        _zz_220 = MmuPlugin_ports_1_cache_0_exception;
        _zz_221 = MmuPlugin_ports_1_cache_0_superPage;
        _zz_222 = MmuPlugin_ports_1_cache_0_virtualAddress_0;
        _zz_223 = MmuPlugin_ports_1_cache_0_virtualAddress_1;
        _zz_224 = MmuPlugin_ports_1_cache_0_physicalAddress_0;
        _zz_225 = MmuPlugin_ports_1_cache_0_physicalAddress_1;
        _zz_226 = MmuPlugin_ports_1_cache_0_allowRead;
        _zz_227 = MmuPlugin_ports_1_cache_0_allowWrite;
        _zz_228 = MmuPlugin_ports_1_cache_0_allowExecute;
        _zz_229 = MmuPlugin_ports_1_cache_0_allowUser;
      end
      2'b01 : begin
        _zz_219 = MmuPlugin_ports_1_cache_1_valid;
        _zz_220 = MmuPlugin_ports_1_cache_1_exception;
        _zz_221 = MmuPlugin_ports_1_cache_1_superPage;
        _zz_222 = MmuPlugin_ports_1_cache_1_virtualAddress_0;
        _zz_223 = MmuPlugin_ports_1_cache_1_virtualAddress_1;
        _zz_224 = MmuPlugin_ports_1_cache_1_physicalAddress_0;
        _zz_225 = MmuPlugin_ports_1_cache_1_physicalAddress_1;
        _zz_226 = MmuPlugin_ports_1_cache_1_allowRead;
        _zz_227 = MmuPlugin_ports_1_cache_1_allowWrite;
        _zz_228 = MmuPlugin_ports_1_cache_1_allowExecute;
        _zz_229 = MmuPlugin_ports_1_cache_1_allowUser;
      end
      2'b10 : begin
        _zz_219 = MmuPlugin_ports_1_cache_2_valid;
        _zz_220 = MmuPlugin_ports_1_cache_2_exception;
        _zz_221 = MmuPlugin_ports_1_cache_2_superPage;
        _zz_222 = MmuPlugin_ports_1_cache_2_virtualAddress_0;
        _zz_223 = MmuPlugin_ports_1_cache_2_virtualAddress_1;
        _zz_224 = MmuPlugin_ports_1_cache_2_physicalAddress_0;
        _zz_225 = MmuPlugin_ports_1_cache_2_physicalAddress_1;
        _zz_226 = MmuPlugin_ports_1_cache_2_allowRead;
        _zz_227 = MmuPlugin_ports_1_cache_2_allowWrite;
        _zz_228 = MmuPlugin_ports_1_cache_2_allowExecute;
        _zz_229 = MmuPlugin_ports_1_cache_2_allowUser;
      end
      default : begin
        _zz_219 = MmuPlugin_ports_1_cache_3_valid;
        _zz_220 = MmuPlugin_ports_1_cache_3_exception;
        _zz_221 = MmuPlugin_ports_1_cache_3_superPage;
        _zz_222 = MmuPlugin_ports_1_cache_3_virtualAddress_0;
        _zz_223 = MmuPlugin_ports_1_cache_3_virtualAddress_1;
        _zz_224 = MmuPlugin_ports_1_cache_3_physicalAddress_0;
        _zz_225 = MmuPlugin_ports_1_cache_3_physicalAddress_1;
        _zz_226 = MmuPlugin_ports_1_cache_3_allowRead;
        _zz_227 = MmuPlugin_ports_1_cache_3_allowWrite;
        _zz_228 = MmuPlugin_ports_1_cache_3_allowExecute;
        _zz_229 = MmuPlugin_ports_1_cache_3_allowUser;
      end
    endcase
  end

  always @(*) begin
    case(_zz_444)
      2'b00 : begin
        _zz_230 = DBusCachedPlugin_redoBranch_payload;
      end
      2'b01 : begin
        _zz_230 = CsrPlugin_jumpInterface_payload;
      end
      2'b10 : begin
        _zz_230 = BranchPlugin_jumpInterface_payload;
      end
      default : begin
        _zz_230 = CsrPlugin_redoInterface_payload;
      end
    endcase
  end

  always @(*) begin
    case(execute_AesPlugin_byteSel)
      2'b00 : begin
        _zz_231 = execute_RS2[7 : 0];
      end
      2'b01 : begin
        _zz_231 = execute_RS2[15 : 8];
      end
      2'b10 : begin
        _zz_231 = execute_RS2[23 : 16];
      end
      default : begin
        _zz_231 = execute_RS2[31 : 24];
      end
    endcase
  end

  always @(*) begin
    case(memory_AesPlugin_rom_address)
      2'b00 : begin
        _zz_232 = memory_AesPlugin_rom_remap_0_0;
        _zz_233 = memory_AesPlugin_rom_remap_0_1;
        _zz_234 = memory_AesPlugin_rom_remap_0_2;
        _zz_235 = memory_AesPlugin_rom_remap_0_3;
      end
      2'b01 : begin
        _zz_232 = memory_AesPlugin_rom_remap_1_0;
        _zz_233 = memory_AesPlugin_rom_remap_1_1;
        _zz_234 = memory_AesPlugin_rom_remap_1_2;
        _zz_235 = memory_AesPlugin_rom_remap_1_3;
      end
      2'b10 : begin
        _zz_232 = memory_AesPlugin_rom_remap_2_0;
        _zz_233 = memory_AesPlugin_rom_remap_2_1;
        _zz_234 = memory_AesPlugin_rom_remap_2_2;
        _zz_235 = memory_AesPlugin_rom_remap_2_3;
      end
      default : begin
        _zz_232 = memory_AesPlugin_rom_remap_3_0;
        _zz_233 = memory_AesPlugin_rom_remap_3_1;
        _zz_234 = memory_AesPlugin_rom_remap_3_2;
        _zz_235 = memory_AesPlugin_rom_remap_3_3;
      end
    endcase
  end

  always @(*) begin
    case(memory_AesPlugin_wordDesuffle_sel_0)
      2'b00 : begin
        _zz_236 = memory_AesPlugin_rom_bytes_0;
      end
      2'b01 : begin
        _zz_236 = memory_AesPlugin_rom_bytes_1;
      end
      2'b10 : begin
        _zz_236 = memory_AesPlugin_rom_bytes_2;
      end
      default : begin
        _zz_236 = memory_AesPlugin_rom_bytes_3;
      end
    endcase
  end

  always @(*) begin
    case(memory_AesPlugin_wordDesuffle_sel_1)
      2'b00 : begin
        _zz_237 = memory_AesPlugin_rom_bytes_0;
      end
      2'b01 : begin
        _zz_237 = memory_AesPlugin_rom_bytes_1;
      end
      2'b10 : begin
        _zz_237 = memory_AesPlugin_rom_bytes_2;
      end
      default : begin
        _zz_237 = memory_AesPlugin_rom_bytes_3;
      end
    endcase
  end

  always @(*) begin
    case(memory_AesPlugin_wordDesuffle_sel_2)
      2'b00 : begin
        _zz_238 = memory_AesPlugin_rom_bytes_0;
      end
      2'b01 : begin
        _zz_238 = memory_AesPlugin_rom_bytes_1;
      end
      2'b10 : begin
        _zz_238 = memory_AesPlugin_rom_bytes_2;
      end
      default : begin
        _zz_238 = memory_AesPlugin_rom_bytes_3;
      end
    endcase
  end

  always @(*) begin
    case(memory_AesPlugin_wordDesuffle_sel_3)
      2'b00 : begin
        _zz_239 = memory_AesPlugin_rom_bytes_0;
      end
      2'b01 : begin
        _zz_239 = memory_AesPlugin_rom_bytes_1;
      end
      2'b10 : begin
        _zz_239 = memory_AesPlugin_rom_bytes_2;
      end
      default : begin
        _zz_239 = memory_AesPlugin_rom_bytes_3;
      end
    endcase
  end

  `ifndef SYNTHESIS
  always @(*) begin
    case(decode_BRANCH_CTRL)
      `BranchCtrlEnum_defaultEncoding_INC : decode_BRANCH_CTRL_string = "INC ";
      `BranchCtrlEnum_defaultEncoding_B : decode_BRANCH_CTRL_string = "B   ";
      `BranchCtrlEnum_defaultEncoding_JAL : decode_BRANCH_CTRL_string = "JAL ";
      `BranchCtrlEnum_defaultEncoding_JALR : decode_BRANCH_CTRL_string = "JALR";
      default : decode_BRANCH_CTRL_string = "????";
    endcase
  end
  always @(*) begin
    case(_zz_1)
      `BranchCtrlEnum_defaultEncoding_INC : _zz_1_string = "INC ";
      `BranchCtrlEnum_defaultEncoding_B : _zz_1_string = "B   ";
      `BranchCtrlEnum_defaultEncoding_JAL : _zz_1_string = "JAL ";
      `BranchCtrlEnum_defaultEncoding_JALR : _zz_1_string = "JALR";
      default : _zz_1_string = "????";
    endcase
  end
  always @(*) begin
    case(_zz_2)
      `BranchCtrlEnum_defaultEncoding_INC : _zz_2_string = "INC ";
      `BranchCtrlEnum_defaultEncoding_B : _zz_2_string = "B   ";
      `BranchCtrlEnum_defaultEncoding_JAL : _zz_2_string = "JAL ";
      `BranchCtrlEnum_defaultEncoding_JALR : _zz_2_string = "JALR";
      default : _zz_2_string = "????";
    endcase
  end
  always @(*) begin
    case(_zz_3)
      `BranchCtrlEnum_defaultEncoding_INC : _zz_3_string = "INC ";
      `BranchCtrlEnum_defaultEncoding_B : _zz_3_string = "B   ";
      `BranchCtrlEnum_defaultEncoding_JAL : _zz_3_string = "JAL ";
      `BranchCtrlEnum_defaultEncoding_JALR : _zz_3_string = "JALR";
      default : _zz_3_string = "????";
    endcase
  end
  always @(*) begin
    case(_zz_4)
      `EnvCtrlEnum_defaultEncoding_NONE : _zz_4_string = "NONE ";
      `EnvCtrlEnum_defaultEncoding_XRET : _zz_4_string = "XRET ";
      `EnvCtrlEnum_defaultEncoding_WFI : _zz_4_string = "WFI  ";
      `EnvCtrlEnum_defaultEncoding_ECALL : _zz_4_string = "ECALL";
      default : _zz_4_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_5)
      `EnvCtrlEnum_defaultEncoding_NONE : _zz_5_string = "NONE ";
      `EnvCtrlEnum_defaultEncoding_XRET : _zz_5_string = "XRET ";
      `EnvCtrlEnum_defaultEncoding_WFI : _zz_5_string = "WFI  ";
      `EnvCtrlEnum_defaultEncoding_ECALL : _zz_5_string = "ECALL";
      default : _zz_5_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_6)
      `EnvCtrlEnum_defaultEncoding_NONE : _zz_6_string = "NONE ";
      `EnvCtrlEnum_defaultEncoding_XRET : _zz_6_string = "XRET ";
      `EnvCtrlEnum_defaultEncoding_WFI : _zz_6_string = "WFI  ";
      `EnvCtrlEnum_defaultEncoding_ECALL : _zz_6_string = "ECALL";
      default : _zz_6_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_7)
      `EnvCtrlEnum_defaultEncoding_NONE : _zz_7_string = "NONE ";
      `EnvCtrlEnum_defaultEncoding_XRET : _zz_7_string = "XRET ";
      `EnvCtrlEnum_defaultEncoding_WFI : _zz_7_string = "WFI  ";
      `EnvCtrlEnum_defaultEncoding_ECALL : _zz_7_string = "ECALL";
      default : _zz_7_string = "?????";
    endcase
  end
  always @(*) begin
    case(decode_ENV_CTRL)
      `EnvCtrlEnum_defaultEncoding_NONE : decode_ENV_CTRL_string = "NONE ";
      `EnvCtrlEnum_defaultEncoding_XRET : decode_ENV_CTRL_string = "XRET ";
      `EnvCtrlEnum_defaultEncoding_WFI : decode_ENV_CTRL_string = "WFI  ";
      `EnvCtrlEnum_defaultEncoding_ECALL : decode_ENV_CTRL_string = "ECALL";
      default : decode_ENV_CTRL_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_8)
      `EnvCtrlEnum_defaultEncoding_NONE : _zz_8_string = "NONE ";
      `EnvCtrlEnum_defaultEncoding_XRET : _zz_8_string = "XRET ";
      `EnvCtrlEnum_defaultEncoding_WFI : _zz_8_string = "WFI  ";
      `EnvCtrlEnum_defaultEncoding_ECALL : _zz_8_string = "ECALL";
      default : _zz_8_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_9)
      `EnvCtrlEnum_defaultEncoding_NONE : _zz_9_string = "NONE ";
      `EnvCtrlEnum_defaultEncoding_XRET : _zz_9_string = "XRET ";
      `EnvCtrlEnum_defaultEncoding_WFI : _zz_9_string = "WFI  ";
      `EnvCtrlEnum_defaultEncoding_ECALL : _zz_9_string = "ECALL";
      default : _zz_9_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_10)
      `EnvCtrlEnum_defaultEncoding_NONE : _zz_10_string = "NONE ";
      `EnvCtrlEnum_defaultEncoding_XRET : _zz_10_string = "XRET ";
      `EnvCtrlEnum_defaultEncoding_WFI : _zz_10_string = "WFI  ";
      `EnvCtrlEnum_defaultEncoding_ECALL : _zz_10_string = "ECALL";
      default : _zz_10_string = "?????";
    endcase
  end
  always @(*) begin
    case(decode_SHIFT_CTRL)
      `ShiftCtrlEnum_defaultEncoding_DISABLE_1 : decode_SHIFT_CTRL_string = "DISABLE_1";
      `ShiftCtrlEnum_defaultEncoding_SLL_1 : decode_SHIFT_CTRL_string = "SLL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRL_1 : decode_SHIFT_CTRL_string = "SRL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRA_1 : decode_SHIFT_CTRL_string = "SRA_1    ";
      default : decode_SHIFT_CTRL_string = "?????????";
    endcase
  end
  always @(*) begin
    case(_zz_11)
      `ShiftCtrlEnum_defaultEncoding_DISABLE_1 : _zz_11_string = "DISABLE_1";
      `ShiftCtrlEnum_defaultEncoding_SLL_1 : _zz_11_string = "SLL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRL_1 : _zz_11_string = "SRL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRA_1 : _zz_11_string = "SRA_1    ";
      default : _zz_11_string = "?????????";
    endcase
  end
  always @(*) begin
    case(_zz_12)
      `ShiftCtrlEnum_defaultEncoding_DISABLE_1 : _zz_12_string = "DISABLE_1";
      `ShiftCtrlEnum_defaultEncoding_SLL_1 : _zz_12_string = "SLL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRL_1 : _zz_12_string = "SRL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRA_1 : _zz_12_string = "SRA_1    ";
      default : _zz_12_string = "?????????";
    endcase
  end
  always @(*) begin
    case(_zz_13)
      `ShiftCtrlEnum_defaultEncoding_DISABLE_1 : _zz_13_string = "DISABLE_1";
      `ShiftCtrlEnum_defaultEncoding_SLL_1 : _zz_13_string = "SLL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRL_1 : _zz_13_string = "SRL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRA_1 : _zz_13_string = "SRA_1    ";
      default : _zz_13_string = "?????????";
    endcase
  end
  always @(*) begin
    case(decode_ALU_BITWISE_CTRL)
      `AluBitwiseCtrlEnum_defaultEncoding_XOR_1 : decode_ALU_BITWISE_CTRL_string = "XOR_1";
      `AluBitwiseCtrlEnum_defaultEncoding_OR_1 : decode_ALU_BITWISE_CTRL_string = "OR_1 ";
      `AluBitwiseCtrlEnum_defaultEncoding_AND_1 : decode_ALU_BITWISE_CTRL_string = "AND_1";
      default : decode_ALU_BITWISE_CTRL_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_14)
      `AluBitwiseCtrlEnum_defaultEncoding_XOR_1 : _zz_14_string = "XOR_1";
      `AluBitwiseCtrlEnum_defaultEncoding_OR_1 : _zz_14_string = "OR_1 ";
      `AluBitwiseCtrlEnum_defaultEncoding_AND_1 : _zz_14_string = "AND_1";
      default : _zz_14_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_15)
      `AluBitwiseCtrlEnum_defaultEncoding_XOR_1 : _zz_15_string = "XOR_1";
      `AluBitwiseCtrlEnum_defaultEncoding_OR_1 : _zz_15_string = "OR_1 ";
      `AluBitwiseCtrlEnum_defaultEncoding_AND_1 : _zz_15_string = "AND_1";
      default : _zz_15_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_16)
      `AluBitwiseCtrlEnum_defaultEncoding_XOR_1 : _zz_16_string = "XOR_1";
      `AluBitwiseCtrlEnum_defaultEncoding_OR_1 : _zz_16_string = "OR_1 ";
      `AluBitwiseCtrlEnum_defaultEncoding_AND_1 : _zz_16_string = "AND_1";
      default : _zz_16_string = "?????";
    endcase
  end
  always @(*) begin
    case(decode_ALU_CTRL)
      `AluCtrlEnum_defaultEncoding_ADD_SUB : decode_ALU_CTRL_string = "ADD_SUB ";
      `AluCtrlEnum_defaultEncoding_SLT_SLTU : decode_ALU_CTRL_string = "SLT_SLTU";
      `AluCtrlEnum_defaultEncoding_BITWISE : decode_ALU_CTRL_string = "BITWISE ";
      default : decode_ALU_CTRL_string = "????????";
    endcase
  end
  always @(*) begin
    case(_zz_17)
      `AluCtrlEnum_defaultEncoding_ADD_SUB : _zz_17_string = "ADD_SUB ";
      `AluCtrlEnum_defaultEncoding_SLT_SLTU : _zz_17_string = "SLT_SLTU";
      `AluCtrlEnum_defaultEncoding_BITWISE : _zz_17_string = "BITWISE ";
      default : _zz_17_string = "????????";
    endcase
  end
  always @(*) begin
    case(_zz_18)
      `AluCtrlEnum_defaultEncoding_ADD_SUB : _zz_18_string = "ADD_SUB ";
      `AluCtrlEnum_defaultEncoding_SLT_SLTU : _zz_18_string = "SLT_SLTU";
      `AluCtrlEnum_defaultEncoding_BITWISE : _zz_18_string = "BITWISE ";
      default : _zz_18_string = "????????";
    endcase
  end
  always @(*) begin
    case(_zz_19)
      `AluCtrlEnum_defaultEncoding_ADD_SUB : _zz_19_string = "ADD_SUB ";
      `AluCtrlEnum_defaultEncoding_SLT_SLTU : _zz_19_string = "SLT_SLTU";
      `AluCtrlEnum_defaultEncoding_BITWISE : _zz_19_string = "BITWISE ";
      default : _zz_19_string = "????????";
    endcase
  end
  always @(*) begin
    case(execute_BRANCH_CTRL)
      `BranchCtrlEnum_defaultEncoding_INC : execute_BRANCH_CTRL_string = "INC ";
      `BranchCtrlEnum_defaultEncoding_B : execute_BRANCH_CTRL_string = "B   ";
      `BranchCtrlEnum_defaultEncoding_JAL : execute_BRANCH_CTRL_string = "JAL ";
      `BranchCtrlEnum_defaultEncoding_JALR : execute_BRANCH_CTRL_string = "JALR";
      default : execute_BRANCH_CTRL_string = "????";
    endcase
  end
  always @(*) begin
    case(_zz_20)
      `BranchCtrlEnum_defaultEncoding_INC : _zz_20_string = "INC ";
      `BranchCtrlEnum_defaultEncoding_B : _zz_20_string = "B   ";
      `BranchCtrlEnum_defaultEncoding_JAL : _zz_20_string = "JAL ";
      `BranchCtrlEnum_defaultEncoding_JALR : _zz_20_string = "JALR";
      default : _zz_20_string = "????";
    endcase
  end
  always @(*) begin
    case(memory_ENV_CTRL)
      `EnvCtrlEnum_defaultEncoding_NONE : memory_ENV_CTRL_string = "NONE ";
      `EnvCtrlEnum_defaultEncoding_XRET : memory_ENV_CTRL_string = "XRET ";
      `EnvCtrlEnum_defaultEncoding_WFI : memory_ENV_CTRL_string = "WFI  ";
      `EnvCtrlEnum_defaultEncoding_ECALL : memory_ENV_CTRL_string = "ECALL";
      default : memory_ENV_CTRL_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_21)
      `EnvCtrlEnum_defaultEncoding_NONE : _zz_21_string = "NONE ";
      `EnvCtrlEnum_defaultEncoding_XRET : _zz_21_string = "XRET ";
      `EnvCtrlEnum_defaultEncoding_WFI : _zz_21_string = "WFI  ";
      `EnvCtrlEnum_defaultEncoding_ECALL : _zz_21_string = "ECALL";
      default : _zz_21_string = "?????";
    endcase
  end
  always @(*) begin
    case(execute_ENV_CTRL)
      `EnvCtrlEnum_defaultEncoding_NONE : execute_ENV_CTRL_string = "NONE ";
      `EnvCtrlEnum_defaultEncoding_XRET : execute_ENV_CTRL_string = "XRET ";
      `EnvCtrlEnum_defaultEncoding_WFI : execute_ENV_CTRL_string = "WFI  ";
      `EnvCtrlEnum_defaultEncoding_ECALL : execute_ENV_CTRL_string = "ECALL";
      default : execute_ENV_CTRL_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_22)
      `EnvCtrlEnum_defaultEncoding_NONE : _zz_22_string = "NONE ";
      `EnvCtrlEnum_defaultEncoding_XRET : _zz_22_string = "XRET ";
      `EnvCtrlEnum_defaultEncoding_WFI : _zz_22_string = "WFI  ";
      `EnvCtrlEnum_defaultEncoding_ECALL : _zz_22_string = "ECALL";
      default : _zz_22_string = "?????";
    endcase
  end
  always @(*) begin
    case(writeBack_ENV_CTRL)
      `EnvCtrlEnum_defaultEncoding_NONE : writeBack_ENV_CTRL_string = "NONE ";
      `EnvCtrlEnum_defaultEncoding_XRET : writeBack_ENV_CTRL_string = "XRET ";
      `EnvCtrlEnum_defaultEncoding_WFI : writeBack_ENV_CTRL_string = "WFI  ";
      `EnvCtrlEnum_defaultEncoding_ECALL : writeBack_ENV_CTRL_string = "ECALL";
      default : writeBack_ENV_CTRL_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_23)
      `EnvCtrlEnum_defaultEncoding_NONE : _zz_23_string = "NONE ";
      `EnvCtrlEnum_defaultEncoding_XRET : _zz_23_string = "XRET ";
      `EnvCtrlEnum_defaultEncoding_WFI : _zz_23_string = "WFI  ";
      `EnvCtrlEnum_defaultEncoding_ECALL : _zz_23_string = "ECALL";
      default : _zz_23_string = "?????";
    endcase
  end
  always @(*) begin
    case(execute_SHIFT_CTRL)
      `ShiftCtrlEnum_defaultEncoding_DISABLE_1 : execute_SHIFT_CTRL_string = "DISABLE_1";
      `ShiftCtrlEnum_defaultEncoding_SLL_1 : execute_SHIFT_CTRL_string = "SLL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRL_1 : execute_SHIFT_CTRL_string = "SRL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRA_1 : execute_SHIFT_CTRL_string = "SRA_1    ";
      default : execute_SHIFT_CTRL_string = "?????????";
    endcase
  end
  always @(*) begin
    case(_zz_26)
      `ShiftCtrlEnum_defaultEncoding_DISABLE_1 : _zz_26_string = "DISABLE_1";
      `ShiftCtrlEnum_defaultEncoding_SLL_1 : _zz_26_string = "SLL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRL_1 : _zz_26_string = "SRL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRA_1 : _zz_26_string = "SRA_1    ";
      default : _zz_26_string = "?????????";
    endcase
  end
  always @(*) begin
    case(decode_SRC2_CTRL)
      `Src2CtrlEnum_defaultEncoding_RS : decode_SRC2_CTRL_string = "RS ";
      `Src2CtrlEnum_defaultEncoding_IMI : decode_SRC2_CTRL_string = "IMI";
      `Src2CtrlEnum_defaultEncoding_IMS : decode_SRC2_CTRL_string = "IMS";
      `Src2CtrlEnum_defaultEncoding_PC : decode_SRC2_CTRL_string = "PC ";
      default : decode_SRC2_CTRL_string = "???";
    endcase
  end
  always @(*) begin
    case(_zz_29)
      `Src2CtrlEnum_defaultEncoding_RS : _zz_29_string = "RS ";
      `Src2CtrlEnum_defaultEncoding_IMI : _zz_29_string = "IMI";
      `Src2CtrlEnum_defaultEncoding_IMS : _zz_29_string = "IMS";
      `Src2CtrlEnum_defaultEncoding_PC : _zz_29_string = "PC ";
      default : _zz_29_string = "???";
    endcase
  end
  always @(*) begin
    case(decode_SRC1_CTRL)
      `Src1CtrlEnum_defaultEncoding_RS : decode_SRC1_CTRL_string = "RS          ";
      `Src1CtrlEnum_defaultEncoding_IMU : decode_SRC1_CTRL_string = "IMU         ";
      `Src1CtrlEnum_defaultEncoding_PC_INCREMENT : decode_SRC1_CTRL_string = "PC_INCREMENT";
      `Src1CtrlEnum_defaultEncoding_URS1 : decode_SRC1_CTRL_string = "URS1        ";
      default : decode_SRC1_CTRL_string = "????????????";
    endcase
  end
  always @(*) begin
    case(_zz_31)
      `Src1CtrlEnum_defaultEncoding_RS : _zz_31_string = "RS          ";
      `Src1CtrlEnum_defaultEncoding_IMU : _zz_31_string = "IMU         ";
      `Src1CtrlEnum_defaultEncoding_PC_INCREMENT : _zz_31_string = "PC_INCREMENT";
      `Src1CtrlEnum_defaultEncoding_URS1 : _zz_31_string = "URS1        ";
      default : _zz_31_string = "????????????";
    endcase
  end
  always @(*) begin
    case(execute_ALU_CTRL)
      `AluCtrlEnum_defaultEncoding_ADD_SUB : execute_ALU_CTRL_string = "ADD_SUB ";
      `AluCtrlEnum_defaultEncoding_SLT_SLTU : execute_ALU_CTRL_string = "SLT_SLTU";
      `AluCtrlEnum_defaultEncoding_BITWISE : execute_ALU_CTRL_string = "BITWISE ";
      default : execute_ALU_CTRL_string = "????????";
    endcase
  end
  always @(*) begin
    case(_zz_32)
      `AluCtrlEnum_defaultEncoding_ADD_SUB : _zz_32_string = "ADD_SUB ";
      `AluCtrlEnum_defaultEncoding_SLT_SLTU : _zz_32_string = "SLT_SLTU";
      `AluCtrlEnum_defaultEncoding_BITWISE : _zz_32_string = "BITWISE ";
      default : _zz_32_string = "????????";
    endcase
  end
  always @(*) begin
    case(execute_ALU_BITWISE_CTRL)
      `AluBitwiseCtrlEnum_defaultEncoding_XOR_1 : execute_ALU_BITWISE_CTRL_string = "XOR_1";
      `AluBitwiseCtrlEnum_defaultEncoding_OR_1 : execute_ALU_BITWISE_CTRL_string = "OR_1 ";
      `AluBitwiseCtrlEnum_defaultEncoding_AND_1 : execute_ALU_BITWISE_CTRL_string = "AND_1";
      default : execute_ALU_BITWISE_CTRL_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_33)
      `AluBitwiseCtrlEnum_defaultEncoding_XOR_1 : _zz_33_string = "XOR_1";
      `AluBitwiseCtrlEnum_defaultEncoding_OR_1 : _zz_33_string = "OR_1 ";
      `AluBitwiseCtrlEnum_defaultEncoding_AND_1 : _zz_33_string = "AND_1";
      default : _zz_33_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_37)
      `BranchCtrlEnum_defaultEncoding_INC : _zz_37_string = "INC ";
      `BranchCtrlEnum_defaultEncoding_B : _zz_37_string = "B   ";
      `BranchCtrlEnum_defaultEncoding_JAL : _zz_37_string = "JAL ";
      `BranchCtrlEnum_defaultEncoding_JALR : _zz_37_string = "JALR";
      default : _zz_37_string = "????";
    endcase
  end
  always @(*) begin
    case(_zz_38)
      `EnvCtrlEnum_defaultEncoding_NONE : _zz_38_string = "NONE ";
      `EnvCtrlEnum_defaultEncoding_XRET : _zz_38_string = "XRET ";
      `EnvCtrlEnum_defaultEncoding_WFI : _zz_38_string = "WFI  ";
      `EnvCtrlEnum_defaultEncoding_ECALL : _zz_38_string = "ECALL";
      default : _zz_38_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_39)
      `ShiftCtrlEnum_defaultEncoding_DISABLE_1 : _zz_39_string = "DISABLE_1";
      `ShiftCtrlEnum_defaultEncoding_SLL_1 : _zz_39_string = "SLL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRL_1 : _zz_39_string = "SRL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRA_1 : _zz_39_string = "SRA_1    ";
      default : _zz_39_string = "?????????";
    endcase
  end
  always @(*) begin
    case(_zz_40)
      `AluBitwiseCtrlEnum_defaultEncoding_XOR_1 : _zz_40_string = "XOR_1";
      `AluBitwiseCtrlEnum_defaultEncoding_OR_1 : _zz_40_string = "OR_1 ";
      `AluBitwiseCtrlEnum_defaultEncoding_AND_1 : _zz_40_string = "AND_1";
      default : _zz_40_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_41)
      `Src2CtrlEnum_defaultEncoding_RS : _zz_41_string = "RS ";
      `Src2CtrlEnum_defaultEncoding_IMI : _zz_41_string = "IMI";
      `Src2CtrlEnum_defaultEncoding_IMS : _zz_41_string = "IMS";
      `Src2CtrlEnum_defaultEncoding_PC : _zz_41_string = "PC ";
      default : _zz_41_string = "???";
    endcase
  end
  always @(*) begin
    case(_zz_42)
      `AluCtrlEnum_defaultEncoding_ADD_SUB : _zz_42_string = "ADD_SUB ";
      `AluCtrlEnum_defaultEncoding_SLT_SLTU : _zz_42_string = "SLT_SLTU";
      `AluCtrlEnum_defaultEncoding_BITWISE : _zz_42_string = "BITWISE ";
      default : _zz_42_string = "????????";
    endcase
  end
  always @(*) begin
    case(_zz_43)
      `Src1CtrlEnum_defaultEncoding_RS : _zz_43_string = "RS          ";
      `Src1CtrlEnum_defaultEncoding_IMU : _zz_43_string = "IMU         ";
      `Src1CtrlEnum_defaultEncoding_PC_INCREMENT : _zz_43_string = "PC_INCREMENT";
      `Src1CtrlEnum_defaultEncoding_URS1 : _zz_43_string = "URS1        ";
      default : _zz_43_string = "????????????";
    endcase
  end
  always @(*) begin
    case(MmuPlugin_shared_state_1)
      `MmuPlugin_shared_State_defaultEncoding_IDLE : MmuPlugin_shared_state_1_string = "IDLE  ";
      `MmuPlugin_shared_State_defaultEncoding_L1_CMD : MmuPlugin_shared_state_1_string = "L1_CMD";
      `MmuPlugin_shared_State_defaultEncoding_L1_RSP : MmuPlugin_shared_state_1_string = "L1_RSP";
      `MmuPlugin_shared_State_defaultEncoding_L0_CMD : MmuPlugin_shared_state_1_string = "L0_CMD";
      `MmuPlugin_shared_State_defaultEncoding_L0_RSP : MmuPlugin_shared_state_1_string = "L0_RSP";
      default : MmuPlugin_shared_state_1_string = "??????";
    endcase
  end
  always @(*) begin
    case(_zz_94)
      `Src1CtrlEnum_defaultEncoding_RS : _zz_94_string = "RS          ";
      `Src1CtrlEnum_defaultEncoding_IMU : _zz_94_string = "IMU         ";
      `Src1CtrlEnum_defaultEncoding_PC_INCREMENT : _zz_94_string = "PC_INCREMENT";
      `Src1CtrlEnum_defaultEncoding_URS1 : _zz_94_string = "URS1        ";
      default : _zz_94_string = "????????????";
    endcase
  end
  always @(*) begin
    case(_zz_95)
      `AluCtrlEnum_defaultEncoding_ADD_SUB : _zz_95_string = "ADD_SUB ";
      `AluCtrlEnum_defaultEncoding_SLT_SLTU : _zz_95_string = "SLT_SLTU";
      `AluCtrlEnum_defaultEncoding_BITWISE : _zz_95_string = "BITWISE ";
      default : _zz_95_string = "????????";
    endcase
  end
  always @(*) begin
    case(_zz_96)
      `Src2CtrlEnum_defaultEncoding_RS : _zz_96_string = "RS ";
      `Src2CtrlEnum_defaultEncoding_IMI : _zz_96_string = "IMI";
      `Src2CtrlEnum_defaultEncoding_IMS : _zz_96_string = "IMS";
      `Src2CtrlEnum_defaultEncoding_PC : _zz_96_string = "PC ";
      default : _zz_96_string = "???";
    endcase
  end
  always @(*) begin
    case(_zz_97)
      `AluBitwiseCtrlEnum_defaultEncoding_XOR_1 : _zz_97_string = "XOR_1";
      `AluBitwiseCtrlEnum_defaultEncoding_OR_1 : _zz_97_string = "OR_1 ";
      `AluBitwiseCtrlEnum_defaultEncoding_AND_1 : _zz_97_string = "AND_1";
      default : _zz_97_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_98)
      `ShiftCtrlEnum_defaultEncoding_DISABLE_1 : _zz_98_string = "DISABLE_1";
      `ShiftCtrlEnum_defaultEncoding_SLL_1 : _zz_98_string = "SLL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRL_1 : _zz_98_string = "SRL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRA_1 : _zz_98_string = "SRA_1    ";
      default : _zz_98_string = "?????????";
    endcase
  end
  always @(*) begin
    case(_zz_99)
      `EnvCtrlEnum_defaultEncoding_NONE : _zz_99_string = "NONE ";
      `EnvCtrlEnum_defaultEncoding_XRET : _zz_99_string = "XRET ";
      `EnvCtrlEnum_defaultEncoding_WFI : _zz_99_string = "WFI  ";
      `EnvCtrlEnum_defaultEncoding_ECALL : _zz_99_string = "ECALL";
      default : _zz_99_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_100)
      `BranchCtrlEnum_defaultEncoding_INC : _zz_100_string = "INC ";
      `BranchCtrlEnum_defaultEncoding_B : _zz_100_string = "B   ";
      `BranchCtrlEnum_defaultEncoding_JAL : _zz_100_string = "JAL ";
      `BranchCtrlEnum_defaultEncoding_JALR : _zz_100_string = "JALR";
      default : _zz_100_string = "????";
    endcase
  end
  always @(*) begin
    case(decode_to_execute_ALU_CTRL)
      `AluCtrlEnum_defaultEncoding_ADD_SUB : decode_to_execute_ALU_CTRL_string = "ADD_SUB ";
      `AluCtrlEnum_defaultEncoding_SLT_SLTU : decode_to_execute_ALU_CTRL_string = "SLT_SLTU";
      `AluCtrlEnum_defaultEncoding_BITWISE : decode_to_execute_ALU_CTRL_string = "BITWISE ";
      default : decode_to_execute_ALU_CTRL_string = "????????";
    endcase
  end
  always @(*) begin
    case(decode_to_execute_ALU_BITWISE_CTRL)
      `AluBitwiseCtrlEnum_defaultEncoding_XOR_1 : decode_to_execute_ALU_BITWISE_CTRL_string = "XOR_1";
      `AluBitwiseCtrlEnum_defaultEncoding_OR_1 : decode_to_execute_ALU_BITWISE_CTRL_string = "OR_1 ";
      `AluBitwiseCtrlEnum_defaultEncoding_AND_1 : decode_to_execute_ALU_BITWISE_CTRL_string = "AND_1";
      default : decode_to_execute_ALU_BITWISE_CTRL_string = "?????";
    endcase
  end
  always @(*) begin
    case(decode_to_execute_SHIFT_CTRL)
      `ShiftCtrlEnum_defaultEncoding_DISABLE_1 : decode_to_execute_SHIFT_CTRL_string = "DISABLE_1";
      `ShiftCtrlEnum_defaultEncoding_SLL_1 : decode_to_execute_SHIFT_CTRL_string = "SLL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRL_1 : decode_to_execute_SHIFT_CTRL_string = "SRL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRA_1 : decode_to_execute_SHIFT_CTRL_string = "SRA_1    ";
      default : decode_to_execute_SHIFT_CTRL_string = "?????????";
    endcase
  end
  always @(*) begin
    case(decode_to_execute_ENV_CTRL)
      `EnvCtrlEnum_defaultEncoding_NONE : decode_to_execute_ENV_CTRL_string = "NONE ";
      `EnvCtrlEnum_defaultEncoding_XRET : decode_to_execute_ENV_CTRL_string = "XRET ";
      `EnvCtrlEnum_defaultEncoding_WFI : decode_to_execute_ENV_CTRL_string = "WFI  ";
      `EnvCtrlEnum_defaultEncoding_ECALL : decode_to_execute_ENV_CTRL_string = "ECALL";
      default : decode_to_execute_ENV_CTRL_string = "?????";
    endcase
  end
  always @(*) begin
    case(execute_to_memory_ENV_CTRL)
      `EnvCtrlEnum_defaultEncoding_NONE : execute_to_memory_ENV_CTRL_string = "NONE ";
      `EnvCtrlEnum_defaultEncoding_XRET : execute_to_memory_ENV_CTRL_string = "XRET ";
      `EnvCtrlEnum_defaultEncoding_WFI : execute_to_memory_ENV_CTRL_string = "WFI  ";
      `EnvCtrlEnum_defaultEncoding_ECALL : execute_to_memory_ENV_CTRL_string = "ECALL";
      default : execute_to_memory_ENV_CTRL_string = "?????";
    endcase
  end
  always @(*) begin
    case(memory_to_writeBack_ENV_CTRL)
      `EnvCtrlEnum_defaultEncoding_NONE : memory_to_writeBack_ENV_CTRL_string = "NONE ";
      `EnvCtrlEnum_defaultEncoding_XRET : memory_to_writeBack_ENV_CTRL_string = "XRET ";
      `EnvCtrlEnum_defaultEncoding_WFI : memory_to_writeBack_ENV_CTRL_string = "WFI  ";
      `EnvCtrlEnum_defaultEncoding_ECALL : memory_to_writeBack_ENV_CTRL_string = "ECALL";
      default : memory_to_writeBack_ENV_CTRL_string = "?????";
    endcase
  end
  always @(*) begin
    case(decode_to_execute_BRANCH_CTRL)
      `BranchCtrlEnum_defaultEncoding_INC : decode_to_execute_BRANCH_CTRL_string = "INC ";
      `BranchCtrlEnum_defaultEncoding_B : decode_to_execute_BRANCH_CTRL_string = "B   ";
      `BranchCtrlEnum_defaultEncoding_JAL : decode_to_execute_BRANCH_CTRL_string = "JAL ";
      `BranchCtrlEnum_defaultEncoding_JALR : decode_to_execute_BRANCH_CTRL_string = "JALR";
      default : decode_to_execute_BRANCH_CTRL_string = "????";
    endcase
  end
  `endif

  assign memory_CALC = memory_AesPlugin_xored;
  assign memory_MUL_LOW = ($signed(_zz_302) + $signed(_zz_310));
  assign execute_BRANCH_CALC = {execute_BranchPlugin_branchAdder[31 : 1],1'b0};
  assign execute_BRANCH_DO = _zz_138;
  assign memory_MUL_HH = execute_to_memory_MUL_HH;
  assign execute_MUL_HH = ($signed(execute_MulPlugin_aHigh) * $signed(execute_MulPlugin_bHigh));
  assign execute_MUL_HL = ($signed(execute_MulPlugin_aHigh) * $signed(execute_MulPlugin_bSLow));
  assign execute_MUL_LH = ($signed(execute_MulPlugin_aSLow) * $signed(execute_MulPlugin_bHigh));
  assign execute_MUL_LL = (execute_MulPlugin_aULow * execute_MulPlugin_bULow);
  assign memory_REGFILE_WRITE_DATA = execute_to_memory_REGFILE_WRITE_DATA;
  assign execute_REGFILE_WRITE_DATA = _zz_102;
  assign execute_MEMORY_VIRTUAL_ADDRESS = _zz_181;
  assign memory_MEMORY_ADDRESS_LOW = execute_to_memory_MEMORY_ADDRESS_LOW;
  assign execute_MEMORY_ADDRESS_LOW = _zz_181[1 : 0];
  assign decode_DO_EBREAK = (((! DebugPlugin_haltIt) && (decode_IS_EBREAK || 1'b0)) && DebugPlugin_allowEBreak);
  assign decode_CSR_READ_OPCODE = (decode_INSTRUCTION[13 : 7] != 7'h20);
  assign decode_CSR_WRITE_OPCODE = (! (((decode_INSTRUCTION[14 : 13] == 2'b01) && (decode_INSTRUCTION[19 : 15] == 5'h0)) || ((decode_INSTRUCTION[14 : 13] == 2'b11) && (decode_INSTRUCTION[19 : 15] == 5'h0))));
  assign decode_SRC2 = _zz_108;
  assign decode_SRC1 = _zz_103;
  assign decode_SRC2_FORCE_ZERO = (decode_SRC_ADD_ZERO && (! decode_SRC_USE_SUB_LESS));
  assign memory_IS_AES = execute_to_memory_IS_AES;
  assign execute_IS_AES = decode_to_execute_IS_AES;
  assign decode_IS_AES = _zz_311[0];
  assign decode_BRANCH_CTRL = _zz_1;
  assign _zz_2 = _zz_3;
  assign _zz_4 = _zz_5;
  assign _zz_6 = _zz_7;
  assign decode_ENV_CTRL = _zz_8;
  assign _zz_9 = _zz_10;
  assign decode_IS_CSR = _zz_312[0];
  assign decode_IS_RS2_SIGNED = _zz_313[0];
  assign decode_IS_RS1_SIGNED = _zz_314[0];
  assign decode_IS_DIV = _zz_315[0];
  assign memory_IS_MUL = execute_to_memory_IS_MUL;
  assign execute_IS_MUL = decode_to_execute_IS_MUL;
  assign decode_IS_MUL = _zz_316[0];
  assign decode_SHIFT_CTRL = _zz_11;
  assign _zz_12 = _zz_13;
  assign decode_ALU_BITWISE_CTRL = _zz_14;
  assign _zz_15 = _zz_16;
  assign decode_SRC_LESS_UNSIGNED = _zz_317[0];
  assign memory_MEMORY_FENCE = execute_to_memory_MEMORY_FENCE;
  assign execute_MEMORY_FENCE = decode_to_execute_MEMORY_FENCE;
  assign decode_MEMORY_FENCE = _zz_318[0];
  assign decode_MEMORY_MANAGMENT = _zz_319[0];
  assign memory_MEMORY_AMO = execute_to_memory_MEMORY_AMO;
  assign memory_MEMORY_LRSC = execute_to_memory_MEMORY_LRSC;
  assign memory_MEMORY_WR = execute_to_memory_MEMORY_WR;
  assign decode_MEMORY_WR = _zz_320[0];
  assign execute_BYPASSABLE_MEMORY_STAGE = decode_to_execute_BYPASSABLE_MEMORY_STAGE;
  assign decode_BYPASSABLE_MEMORY_STAGE = _zz_321[0];
  assign decode_BYPASSABLE_EXECUTE_STAGE = _zz_322[0];
  assign decode_ALU_CTRL = _zz_17;
  assign _zz_18 = _zz_19;
  assign memory_IS_SFENCE_VMA = execute_to_memory_IS_SFENCE_VMA;
  assign execute_IS_SFENCE_VMA = decode_to_execute_IS_SFENCE_VMA;
  assign decode_IS_SFENCE_VMA = _zz_323[0];
  assign decode_MEMORY_FORCE_CONSTISTENCY = _zz_45;
  assign writeBack_FORMAL_PC_NEXT = memory_to_writeBack_FORMAL_PC_NEXT;
  assign memory_FORMAL_PC_NEXT = execute_to_memory_FORMAL_PC_NEXT;
  assign execute_FORMAL_PC_NEXT = decode_to_execute_FORMAL_PC_NEXT;
  assign decode_FORMAL_PC_NEXT = (decode_PC + 32'h00000004);
  assign memory_PC = execute_to_memory_PC;
  assign execute_DO_EBREAK = decode_to_execute_DO_EBREAK;
  assign decode_IS_EBREAK = _zz_324[0];
  assign writeBack_CALC = memory_to_writeBack_CALC;
  assign writeBack_IS_AES = memory_to_writeBack_IS_AES;
  assign memory_RS1 = execute_to_memory_RS1;
  assign memory_BRANCH_CALC = execute_to_memory_BRANCH_CALC;
  assign memory_BRANCH_DO = execute_to_memory_BRANCH_DO;
  assign execute_PC = decode_to_execute_PC;
  assign execute_BRANCH_CTRL = _zz_20;
  assign execute_CSR_READ_OPCODE = decode_to_execute_CSR_READ_OPCODE;
  assign execute_CSR_WRITE_OPCODE = decode_to_execute_CSR_WRITE_OPCODE;
  assign execute_IS_CSR = decode_to_execute_IS_CSR;
  assign memory_ENV_CTRL = _zz_21;
  assign execute_ENV_CTRL = _zz_22;
  assign writeBack_ENV_CTRL = _zz_23;
  assign execute_IS_RS1_SIGNED = decode_to_execute_IS_RS1_SIGNED;
  assign execute_IS_DIV = decode_to_execute_IS_DIV;
  assign execute_IS_RS2_SIGNED = decode_to_execute_IS_RS2_SIGNED;
  assign memory_IS_DIV = execute_to_memory_IS_DIV;
  assign writeBack_IS_MUL = memory_to_writeBack_IS_MUL;
  assign writeBack_MUL_HH = memory_to_writeBack_MUL_HH;
  assign writeBack_MUL_LOW = memory_to_writeBack_MUL_LOW;
  assign memory_MUL_HL = execute_to_memory_MUL_HL;
  assign memory_MUL_LH = execute_to_memory_MUL_LH;
  assign memory_MUL_LL = execute_to_memory_MUL_LL;
  assign execute_RS1 = decode_to_execute_RS1;
  assign decode_RS2_USE = _zz_325[0];
  assign decode_RS1_USE = _zz_326[0];
  assign execute_REGFILE_WRITE_VALID = decode_to_execute_REGFILE_WRITE_VALID;
  assign execute_BYPASSABLE_EXECUTE_STAGE = decode_to_execute_BYPASSABLE_EXECUTE_STAGE;
  always @ (*) begin
    _zz_24 = memory_REGFILE_WRITE_DATA;
    if(_zz_240)begin
      _zz_24 = memory_MulDivIterativePlugin_div_result;
    end
  end

  assign memory_REGFILE_WRITE_VALID = execute_to_memory_REGFILE_WRITE_VALID;
  assign memory_INSTRUCTION = execute_to_memory_INSTRUCTION;
  assign memory_BYPASSABLE_MEMORY_STAGE = execute_to_memory_BYPASSABLE_MEMORY_STAGE;
  assign writeBack_REGFILE_WRITE_VALID = memory_to_writeBack_REGFILE_WRITE_VALID;
  always @ (*) begin
    decode_RS2 = decode_RegFilePlugin_rs2Data;
    if(_zz_113)begin
      if((_zz_114 == decode_INSTRUCTION[24 : 20]))begin
        decode_RS2 = _zz_115;
      end
    end
    if(_zz_241)begin
      if(_zz_242)begin
        if(_zz_117)begin
          decode_RS2 = _zz_44;
        end
      end
    end
    if(_zz_243)begin
      if(memory_BYPASSABLE_MEMORY_STAGE)begin
        if(_zz_119)begin
          decode_RS2 = _zz_24;
        end
      end
    end
    if(_zz_244)begin
      if(execute_BYPASSABLE_EXECUTE_STAGE)begin
        if(_zz_121)begin
          decode_RS2 = _zz_25;
        end
      end
    end
  end

  always @ (*) begin
    decode_RS1 = decode_RegFilePlugin_rs1Data;
    if(_zz_113)begin
      if((_zz_114 == decode_INSTRUCTION[19 : 15]))begin
        decode_RS1 = _zz_115;
      end
    end
    if(_zz_241)begin
      if(_zz_242)begin
        if(_zz_116)begin
          decode_RS1 = _zz_44;
        end
      end
    end
    if(_zz_243)begin
      if(memory_BYPASSABLE_MEMORY_STAGE)begin
        if(_zz_118)begin
          decode_RS1 = _zz_24;
        end
      end
    end
    if(_zz_244)begin
      if(execute_BYPASSABLE_EXECUTE_STAGE)begin
        if(_zz_120)begin
          decode_RS1 = _zz_25;
        end
      end
    end
  end

  assign execute_SHIFT_RIGHT = _zz_328;
  always @ (*) begin
    _zz_25 = execute_REGFILE_WRITE_DATA;
    if(execute_arbitration_isValid)begin
      case(execute_SHIFT_CTRL)
        `ShiftCtrlEnum_defaultEncoding_SLL_1 : begin
          _zz_25 = _zz_110;
        end
        `ShiftCtrlEnum_defaultEncoding_SRL_1, `ShiftCtrlEnum_defaultEncoding_SRA_1 : begin
          _zz_25 = execute_SHIFT_RIGHT;
        end
        default : begin
        end
      endcase
    end
    if(_zz_245)begin
      _zz_25 = execute_CsrPlugin_readData;
    end
    if(DBusCachedPlugin_forceDatapath)begin
      _zz_25 = MmuPlugin_dBusAccess_cmd_payload_address;
    end
  end

  assign execute_SHIFT_CTRL = _zz_26;
  assign execute_SRC_LESS_UNSIGNED = decode_to_execute_SRC_LESS_UNSIGNED;
  assign execute_SRC2_FORCE_ZERO = decode_to_execute_SRC2_FORCE_ZERO;
  assign execute_SRC_USE_SUB_LESS = decode_to_execute_SRC_USE_SUB_LESS;
  assign _zz_27 = decode_PC;
  assign _zz_28 = decode_RS2;
  assign decode_SRC2_CTRL = _zz_29;
  assign _zz_30 = decode_RS1;
  assign decode_SRC1_CTRL = _zz_31;
  assign decode_SRC_USE_SUB_LESS = _zz_330[0];
  assign decode_SRC_ADD_ZERO = _zz_331[0];
  assign execute_SRC_ADD_SUB = execute_SrcPlugin_addSub;
  assign execute_SRC_LESS = execute_SrcPlugin_less;
  assign execute_ALU_CTRL = _zz_32;
  assign execute_SRC2 = decode_to_execute_SRC2;
  assign execute_SRC1 = decode_to_execute_SRC1;
  assign execute_ALU_BITWISE_CTRL = _zz_33;
  assign _zz_34 = writeBack_INSTRUCTION;
  assign _zz_35 = writeBack_REGFILE_WRITE_VALID;
  always @ (*) begin
    _zz_36 = 1'b0;
    if(lastStageRegFileWrite_valid)begin
      _zz_36 = 1'b1;
    end
  end

  always @ (*) begin
    decode_REGFILE_WRITE_VALID = _zz_332[0];
    if((decode_INSTRUCTION[11 : 7] == 5'h0))begin
      decode_REGFILE_WRITE_VALID = 1'b0;
    end
  end

  assign decode_LEGAL_INSTRUCTION = ({((decode_INSTRUCTION & 32'h0000005f) == 32'h00000017),{((decode_INSTRUCTION & 32'h0000007f) == 32'h0000006f),{((decode_INSTRUCTION & 32'h0000106f) == 32'h00000003),{((decode_INSTRUCTION & _zz_445) == 32'h00001073),{(_zz_446 == _zz_447),{_zz_448,{_zz_449,_zz_450}}}}}}} != 26'h0);
  assign writeBack_IS_DBUS_SHARING = memory_to_writeBack_IS_DBUS_SHARING;
  assign execute_IS_DBUS_SHARING = (MmuPlugin_dBusAccess_cmd_valid && MmuPlugin_dBusAccess_cmd_ready);
  assign memory_IS_DBUS_SHARING = execute_to_memory_IS_DBUS_SHARING;
  always @ (*) begin
    _zz_44 = writeBack_REGFILE_WRITE_DATA;
    if((writeBack_arbitration_isValid && writeBack_MEMORY_ENABLE))begin
      _zz_44 = writeBack_DBusCachedPlugin_rspFormated;
    end
    if((writeBack_arbitration_isValid && writeBack_IS_MUL))begin
      case(_zz_300)
        2'b00 : begin
          _zz_44 = _zz_377;
        end
        default : begin
          _zz_44 = _zz_378;
        end
      endcase
    end
    if(writeBack_IS_AES)begin
      _zz_44 = writeBack_CALC;
    end
  end

  assign writeBack_MEMORY_ADDRESS_LOW = memory_to_writeBack_MEMORY_ADDRESS_LOW;
  assign writeBack_MEMORY_WR = memory_to_writeBack_MEMORY_WR;
  assign writeBack_MEMORY_FENCE = memory_to_writeBack_MEMORY_FENCE;
  assign writeBack_MEMORY_AMO = memory_to_writeBack_MEMORY_AMO;
  assign writeBack_MEMORY_LRSC = memory_to_writeBack_MEMORY_LRSC;
  assign writeBack_REGFILE_WRITE_DATA = memory_to_writeBack_REGFILE_WRITE_DATA;
  assign writeBack_MEMORY_ENABLE = memory_to_writeBack_MEMORY_ENABLE;
  assign memory_MEMORY_ENABLE = execute_to_memory_MEMORY_ENABLE;
  assign memory_MEMORY_VIRTUAL_ADDRESS = execute_to_memory_MEMORY_VIRTUAL_ADDRESS;
  assign execute_MEMORY_AMO = decode_to_execute_MEMORY_AMO;
  assign execute_MEMORY_LRSC = decode_to_execute_MEMORY_LRSC;
  assign execute_MEMORY_FORCE_CONSTISTENCY = decode_to_execute_MEMORY_FORCE_CONSTISTENCY;
  assign execute_MEMORY_MANAGMENT = decode_to_execute_MEMORY_MANAGMENT;
  assign execute_RS2 = decode_to_execute_RS2;
  assign execute_MEMORY_WR = decode_to_execute_MEMORY_WR;
  assign execute_SRC_ADD = execute_SrcPlugin_addSub;
  assign execute_MEMORY_ENABLE = decode_to_execute_MEMORY_ENABLE;
  assign execute_INSTRUCTION = decode_to_execute_INSTRUCTION;
  assign decode_MEMORY_AMO = _zz_333[0];
  assign decode_MEMORY_LRSC = _zz_334[0];
  assign decode_MEMORY_ENABLE = _zz_335[0];
  assign decode_FLUSH_ALL = _zz_336[0];
  always @ (*) begin
    IBusCachedPlugin_rsp_issueDetected_4 = IBusCachedPlugin_rsp_issueDetected_3;
    if(_zz_246)begin
      IBusCachedPlugin_rsp_issueDetected_4 = 1'b1;
    end
  end

  always @ (*) begin
    IBusCachedPlugin_rsp_issueDetected_3 = IBusCachedPlugin_rsp_issueDetected_2;
    if(_zz_247)begin
      IBusCachedPlugin_rsp_issueDetected_3 = 1'b1;
    end
  end

  always @ (*) begin
    IBusCachedPlugin_rsp_issueDetected_2 = IBusCachedPlugin_rsp_issueDetected_1;
    if(_zz_248)begin
      IBusCachedPlugin_rsp_issueDetected_2 = 1'b1;
    end
  end

  always @ (*) begin
    IBusCachedPlugin_rsp_issueDetected_1 = IBusCachedPlugin_rsp_issueDetected;
    if(_zz_249)begin
      IBusCachedPlugin_rsp_issueDetected_1 = 1'b1;
    end
  end

  assign decode_INSTRUCTION = IBusCachedPlugin_iBusRsp_output_payload_rsp_inst;
  always @ (*) begin
    _zz_46 = memory_FORMAL_PC_NEXT;
    if(BranchPlugin_jumpInterface_valid)begin
      _zz_46 = BranchPlugin_jumpInterface_payload;
    end
  end

  always @ (*) begin
    _zz_47 = execute_FORMAL_PC_NEXT;
    if(CsrPlugin_redoInterface_valid)begin
      _zz_47 = CsrPlugin_redoInterface_payload;
    end
  end

  assign decode_PC = IBusCachedPlugin_iBusRsp_output_payload_pc;
  assign writeBack_IS_SFENCE_VMA = memory_to_writeBack_IS_SFENCE_VMA;
  assign writeBack_PC = memory_to_writeBack_PC;
  assign writeBack_INSTRUCTION = memory_to_writeBack_INSTRUCTION;
  always @ (*) begin
    decode_arbitration_haltItself = 1'b0;
    if(((DBusCachedPlugin_mmuBus_busy && decode_arbitration_isValid) && decode_MEMORY_ENABLE))begin
      decode_arbitration_haltItself = 1'b1;
    end
    case(_zz_148)
      3'b010 : begin
        decode_arbitration_haltItself = 1'b1;
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    decode_arbitration_haltByOther = 1'b0;
    if(MmuPlugin_dBusAccess_cmd_valid)begin
      decode_arbitration_haltByOther = 1'b1;
    end
    if((decode_arbitration_isValid && (_zz_111 || _zz_112)))begin
      decode_arbitration_haltByOther = 1'b1;
    end
    if(CsrPlugin_pipelineLiberator_active)begin
      decode_arbitration_haltByOther = 1'b1;
    end
    if(({(writeBack_arbitration_isValid && (writeBack_ENV_CTRL == `EnvCtrlEnum_defaultEncoding_XRET)),{(memory_arbitration_isValid && (memory_ENV_CTRL == `EnvCtrlEnum_defaultEncoding_XRET)),(execute_arbitration_isValid && (execute_ENV_CTRL == `EnvCtrlEnum_defaultEncoding_XRET))}} != 3'b000))begin
      decode_arbitration_haltByOther = 1'b1;
    end
  end

  always @ (*) begin
    decode_arbitration_removeIt = 1'b0;
    if(_zz_250)begin
      decode_arbitration_removeIt = 1'b1;
    end
    if(decode_arbitration_isFlushed)begin
      decode_arbitration_removeIt = 1'b1;
    end
  end

  assign decode_arbitration_flushIt = 1'b0;
  always @ (*) begin
    decode_arbitration_flushNext = 1'b0;
    if(_zz_250)begin
      decode_arbitration_flushNext = 1'b1;
    end
  end

  always @ (*) begin
    execute_arbitration_haltItself = 1'b0;
    if(((_zz_203 && (! dataCache_2_io_cpu_flush_ready)) || dataCache_2_io_cpu_execute_haltIt))begin
      execute_arbitration_haltItself = 1'b1;
    end
    if(_zz_251)begin
      if((! execute_CsrPlugin_wfiWake))begin
        execute_arbitration_haltItself = 1'b1;
      end
    end
    if(_zz_245)begin
      if(execute_CsrPlugin_blockedBySideEffects)begin
        execute_arbitration_haltItself = 1'b1;
      end
    end
  end

  always @ (*) begin
    execute_arbitration_haltByOther = 1'b0;
    if((dataCache_2_io_cpu_execute_refilling && execute_arbitration_isValid))begin
      execute_arbitration_haltByOther = 1'b1;
    end
    if(_zz_252)begin
      execute_arbitration_haltByOther = 1'b1;
    end
  end

  always @ (*) begin
    execute_arbitration_removeIt = 1'b0;
    if(CsrPlugin_selfException_valid)begin
      execute_arbitration_removeIt = 1'b1;
    end
    if(execute_arbitration_isFlushed)begin
      execute_arbitration_removeIt = 1'b1;
    end
  end

  always @ (*) begin
    execute_arbitration_flushIt = 1'b0;
    if(_zz_252)begin
      if(_zz_253)begin
        execute_arbitration_flushIt = 1'b1;
      end
    end
  end

  always @ (*) begin
    execute_arbitration_flushNext = 1'b0;
    if(CsrPlugin_selfException_valid)begin
      execute_arbitration_flushNext = 1'b1;
    end
    if(_zz_252)begin
      if(_zz_253)begin
        execute_arbitration_flushNext = 1'b1;
      end
    end
    if(execute_CsrPlugin_csr_384)begin
      if(execute_CsrPlugin_writeInstruction)begin
        execute_arbitration_flushNext = 1'b1;
      end
    end
  end

  always @ (*) begin
    memory_arbitration_haltItself = 1'b0;
    if(_zz_240)begin
      if(((! memory_MulDivIterativePlugin_frontendOk) || (! memory_MulDivIterativePlugin_div_done)))begin
        memory_arbitration_haltItself = 1'b1;
      end
    end
  end

  always @ (*) begin
    memory_arbitration_haltByOther = 1'b0;
    if((writeBack_arbitration_isValid && (writeBack_MEMORY_FENCE || writeBack_DBusCachedPlugin_fence_aquire)))begin
      memory_arbitration_haltByOther = 1'b1;
    end
  end

  always @ (*) begin
    memory_arbitration_removeIt = 1'b0;
    if(BranchPlugin_branchExceptionPort_valid)begin
      memory_arbitration_removeIt = 1'b1;
    end
    if(memory_arbitration_isFlushed)begin
      memory_arbitration_removeIt = 1'b1;
    end
  end

  assign memory_arbitration_flushIt = 1'b0;
  always @ (*) begin
    memory_arbitration_flushNext = 1'b0;
    if(BranchPlugin_branchExceptionPort_valid)begin
      memory_arbitration_flushNext = 1'b1;
    end
    if(BranchPlugin_jumpInterface_valid)begin
      memory_arbitration_flushNext = 1'b1;
    end
  end

  always @ (*) begin
    writeBack_arbitration_haltItself = 1'b0;
    if(dataCache_2_io_cpu_writeBack_haltIt)begin
      writeBack_arbitration_haltItself = 1'b1;
    end
  end

  assign writeBack_arbitration_haltByOther = 1'b0;
  always @ (*) begin
    writeBack_arbitration_removeIt = 1'b0;
    if(DBusCachedPlugin_exceptionBus_valid)begin
      writeBack_arbitration_removeIt = 1'b1;
    end
    if(writeBack_arbitration_isFlushed)begin
      writeBack_arbitration_removeIt = 1'b1;
    end
  end

  always @ (*) begin
    writeBack_arbitration_flushIt = 1'b0;
    if(DBusCachedPlugin_redoBranch_valid)begin
      writeBack_arbitration_flushIt = 1'b1;
    end
  end

  always @ (*) begin
    writeBack_arbitration_flushNext = 1'b0;
    if(DBusCachedPlugin_redoBranch_valid)begin
      writeBack_arbitration_flushNext = 1'b1;
    end
    if(DBusCachedPlugin_exceptionBus_valid)begin
      writeBack_arbitration_flushNext = 1'b1;
    end
    if(_zz_254)begin
      writeBack_arbitration_flushNext = 1'b1;
    end
    if(_zz_255)begin
      writeBack_arbitration_flushNext = 1'b1;
    end
  end

  assign lastStageInstruction = writeBack_INSTRUCTION;
  assign lastStagePc = writeBack_PC;
  assign lastStageIsValid = writeBack_arbitration_isValid;
  assign lastStageIsFiring = writeBack_arbitration_isFiring;
  always @ (*) begin
    IBusCachedPlugin_fetcherHalt = 1'b0;
    if(({CsrPlugin_exceptionPortCtrl_exceptionValids_writeBack,{CsrPlugin_exceptionPortCtrl_exceptionValids_memory,{CsrPlugin_exceptionPortCtrl_exceptionValids_execute,CsrPlugin_exceptionPortCtrl_exceptionValids_decode}}} != 4'b0000))begin
      IBusCachedPlugin_fetcherHalt = 1'b1;
    end
    if(_zz_254)begin
      IBusCachedPlugin_fetcherHalt = 1'b1;
    end
    if(_zz_255)begin
      IBusCachedPlugin_fetcherHalt = 1'b1;
    end
    if(_zz_252)begin
      if(_zz_253)begin
        IBusCachedPlugin_fetcherHalt = 1'b1;
      end
    end
    if(DebugPlugin_haltIt)begin
      IBusCachedPlugin_fetcherHalt = 1'b1;
    end
    if(_zz_256)begin
      IBusCachedPlugin_fetcherHalt = 1'b1;
    end
  end

  always @ (*) begin
    IBusCachedPlugin_incomingInstruction = 1'b0;
    if((IBusCachedPlugin_iBusRsp_stages_1_input_valid || IBusCachedPlugin_iBusRsp_stages_2_input_valid))begin
      IBusCachedPlugin_incomingInstruction = 1'b1;
    end
  end

  always @ (*) begin
    _zz_48 = 1'b0;
    if(DebugPlugin_godmode)begin
      _zz_48 = 1'b1;
    end
  end

  always @ (*) begin
    CsrPlugin_inWfi = 1'b0;
    if(_zz_251)begin
      CsrPlugin_inWfi = 1'b1;
    end
  end

  always @ (*) begin
    CsrPlugin_thirdPartyWake = 1'b0;
    if(DebugPlugin_haltIt)begin
      CsrPlugin_thirdPartyWake = 1'b1;
    end
  end

  always @ (*) begin
    CsrPlugin_jumpInterface_valid = 1'b0;
    if(_zz_254)begin
      CsrPlugin_jumpInterface_valid = 1'b1;
    end
    if(_zz_255)begin
      CsrPlugin_jumpInterface_valid = 1'b1;
    end
  end

  always @ (*) begin
    CsrPlugin_jumpInterface_payload = 32'h0;
    if(_zz_254)begin
      CsrPlugin_jumpInterface_payload = {CsrPlugin_xtvec_base,2'b00};
    end
    if(_zz_255)begin
      case(_zz_257)
        2'b11 : begin
          CsrPlugin_jumpInterface_payload = CsrPlugin_mepc;
        end
        2'b01 : begin
          CsrPlugin_jumpInterface_payload = CsrPlugin_sepc;
        end
        default : begin
        end
      endcase
    end
  end

  always @ (*) begin
    CsrPlugin_forceMachineWire = 1'b0;
    if(DebugPlugin_godmode)begin
      CsrPlugin_forceMachineWire = 1'b1;
    end
  end

  always @ (*) begin
    CsrPlugin_allowInterrupts = 1'b1;
    if((DebugPlugin_haltIt || DebugPlugin_stepIt))begin
      CsrPlugin_allowInterrupts = 1'b0;
    end
  end

  always @ (*) begin
    CsrPlugin_allowException = 1'b1;
    if(DebugPlugin_godmode)begin
      CsrPlugin_allowException = 1'b0;
    end
  end

  always @ (*) begin
    MmuPlugin_ports_0_requireMmuLockupCalc = ((1'b1 && (! IBusCachedPlugin_mmuBus_cmd_0_bypassTranslation)) && MmuPlugin_satp_mode);
    if(((! MmuPlugin_status_mprv) && (CsrPlugin_privilege == 2'b11)))begin
      MmuPlugin_ports_0_requireMmuLockupCalc = 1'b0;
    end
    if((CsrPlugin_privilege == 2'b11))begin
      MmuPlugin_ports_0_requireMmuLockupCalc = 1'b0;
    end
  end

  always @ (*) begin
    MmuPlugin_ports_0_cacheHitsCalc[0] = ((MmuPlugin_ports_0_cache_0_valid && (MmuPlugin_ports_0_cache_0_virtualAddress_1 == IBusCachedPlugin_mmuBus_cmd_0_virtualAddress[31 : 22])) && (MmuPlugin_ports_0_cache_0_superPage || (MmuPlugin_ports_0_cache_0_virtualAddress_0 == IBusCachedPlugin_mmuBus_cmd_0_virtualAddress[21 : 12])));
    MmuPlugin_ports_0_cacheHitsCalc[1] = ((MmuPlugin_ports_0_cache_1_valid && (MmuPlugin_ports_0_cache_1_virtualAddress_1 == IBusCachedPlugin_mmuBus_cmd_0_virtualAddress[31 : 22])) && (MmuPlugin_ports_0_cache_1_superPage || (MmuPlugin_ports_0_cache_1_virtualAddress_0 == IBusCachedPlugin_mmuBus_cmd_0_virtualAddress[21 : 12])));
    MmuPlugin_ports_0_cacheHitsCalc[2] = ((MmuPlugin_ports_0_cache_2_valid && (MmuPlugin_ports_0_cache_2_virtualAddress_1 == IBusCachedPlugin_mmuBus_cmd_0_virtualAddress[31 : 22])) && (MmuPlugin_ports_0_cache_2_superPage || (MmuPlugin_ports_0_cache_2_virtualAddress_0 == IBusCachedPlugin_mmuBus_cmd_0_virtualAddress[21 : 12])));
    MmuPlugin_ports_0_cacheHitsCalc[3] = ((MmuPlugin_ports_0_cache_3_valid && (MmuPlugin_ports_0_cache_3_virtualAddress_1 == IBusCachedPlugin_mmuBus_cmd_0_virtualAddress[31 : 22])) && (MmuPlugin_ports_0_cache_3_superPage || (MmuPlugin_ports_0_cache_3_virtualAddress_0 == IBusCachedPlugin_mmuBus_cmd_0_virtualAddress[21 : 12])));
  end

  assign MmuPlugin_ports_0_cacheHit = (MmuPlugin_ports_0_cacheHits != 4'b0000);
  assign _zz_49 = MmuPlugin_ports_0_cacheHits[3];
  assign _zz_50 = (MmuPlugin_ports_0_cacheHits[1] || _zz_49);
  assign _zz_51 = (MmuPlugin_ports_0_cacheHits[2] || _zz_49);
  assign _zz_52 = {_zz_51,_zz_50};
  assign MmuPlugin_ports_0_cacheLine_valid = _zz_208;
  assign MmuPlugin_ports_0_cacheLine_exception = _zz_209;
  assign MmuPlugin_ports_0_cacheLine_superPage = _zz_210;
  assign MmuPlugin_ports_0_cacheLine_virtualAddress_0 = _zz_211;
  assign MmuPlugin_ports_0_cacheLine_virtualAddress_1 = _zz_212;
  assign MmuPlugin_ports_0_cacheLine_physicalAddress_0 = _zz_213;
  assign MmuPlugin_ports_0_cacheLine_physicalAddress_1 = _zz_214;
  assign MmuPlugin_ports_0_cacheLine_allowRead = _zz_215;
  assign MmuPlugin_ports_0_cacheLine_allowWrite = _zz_216;
  assign MmuPlugin_ports_0_cacheLine_allowExecute = _zz_217;
  assign MmuPlugin_ports_0_cacheLine_allowUser = _zz_218;
  always @ (*) begin
    MmuPlugin_ports_0_entryToReplace_willIncrement = 1'b0;
    if(_zz_258)begin
      if(_zz_259)begin
        MmuPlugin_ports_0_entryToReplace_willIncrement = 1'b1;
      end
    end
  end

  assign MmuPlugin_ports_0_entryToReplace_willClear = 1'b0;
  assign MmuPlugin_ports_0_entryToReplace_willOverflowIfInc = (MmuPlugin_ports_0_entryToReplace_value == 2'b11);
  assign MmuPlugin_ports_0_entryToReplace_willOverflow = (MmuPlugin_ports_0_entryToReplace_willOverflowIfInc && MmuPlugin_ports_0_entryToReplace_willIncrement);
  always @ (*) begin
    MmuPlugin_ports_0_entryToReplace_valueNext = (MmuPlugin_ports_0_entryToReplace_value + _zz_338);
    if(MmuPlugin_ports_0_entryToReplace_willClear)begin
      MmuPlugin_ports_0_entryToReplace_valueNext = 2'b00;
    end
  end

  always @ (*) begin
    if(MmuPlugin_ports_0_requireMmuLockup)begin
      IBusCachedPlugin_mmuBus_rsp_physicalAddress = {{MmuPlugin_ports_0_cacheLine_physicalAddress_1,(MmuPlugin_ports_0_cacheLine_superPage ? IBusCachedPlugin_mmuBus_cmd_1_virtualAddress[21 : 12] : MmuPlugin_ports_0_cacheLine_physicalAddress_0)},IBusCachedPlugin_mmuBus_cmd_1_virtualAddress[11 : 0]};
    end else begin
      IBusCachedPlugin_mmuBus_rsp_physicalAddress = IBusCachedPlugin_mmuBus_cmd_1_virtualAddress;
    end
  end

  always @ (*) begin
    if(MmuPlugin_ports_0_requireMmuLockup)begin
      IBusCachedPlugin_mmuBus_rsp_allowRead = (MmuPlugin_ports_0_cacheLine_allowRead || (MmuPlugin_status_mxr && MmuPlugin_ports_0_cacheLine_allowExecute));
    end else begin
      IBusCachedPlugin_mmuBus_rsp_allowRead = 1'b1;
    end
  end

  always @ (*) begin
    if(MmuPlugin_ports_0_requireMmuLockup)begin
      IBusCachedPlugin_mmuBus_rsp_allowWrite = MmuPlugin_ports_0_cacheLine_allowWrite;
    end else begin
      IBusCachedPlugin_mmuBus_rsp_allowWrite = 1'b1;
    end
  end

  always @ (*) begin
    if(MmuPlugin_ports_0_requireMmuLockup)begin
      IBusCachedPlugin_mmuBus_rsp_allowExecute = MmuPlugin_ports_0_cacheLine_allowExecute;
    end else begin
      IBusCachedPlugin_mmuBus_rsp_allowExecute = 1'b1;
    end
  end

  always @ (*) begin
    if(MmuPlugin_ports_0_requireMmuLockup)begin
      IBusCachedPlugin_mmuBus_rsp_exception = (((! MmuPlugin_ports_0_dirty) && MmuPlugin_ports_0_cacheHit) && ((MmuPlugin_ports_0_cacheLine_exception || ((MmuPlugin_ports_0_cacheLine_allowUser && (CsrPlugin_privilege == 2'b01)) && (! MmuPlugin_status_sum))) || ((! MmuPlugin_ports_0_cacheLine_allowUser) && (CsrPlugin_privilege == 2'b00))));
    end else begin
      IBusCachedPlugin_mmuBus_rsp_exception = 1'b0;
    end
  end

  always @ (*) begin
    if(MmuPlugin_ports_0_requireMmuLockup)begin
      IBusCachedPlugin_mmuBus_rsp_refilling = (MmuPlugin_ports_0_dirty || (! MmuPlugin_ports_0_cacheHit));
    end else begin
      IBusCachedPlugin_mmuBus_rsp_refilling = 1'b0;
    end
  end

  assign IBusCachedPlugin_mmuBus_rsp_isIoAccess = (IBusCachedPlugin_mmuBus_rsp_physicalAddress[31 : 28] == 4'b0001);
  assign IBusCachedPlugin_mmuBus_rsp_bypassTranslation = (! MmuPlugin_ports_0_requireMmuLockup);
  assign IBusCachedPlugin_mmuBus_rsp_ways_0_sel = MmuPlugin_ports_0_cacheHits[0];
  assign IBusCachedPlugin_mmuBus_rsp_ways_0_physical = {{MmuPlugin_ports_0_cache_0_physicalAddress_1,(MmuPlugin_ports_0_cache_0_superPage ? IBusCachedPlugin_mmuBus_cmd_1_virtualAddress[21 : 12] : MmuPlugin_ports_0_cache_0_physicalAddress_0)},IBusCachedPlugin_mmuBus_cmd_1_virtualAddress[11 : 0]};
  assign IBusCachedPlugin_mmuBus_rsp_ways_1_sel = MmuPlugin_ports_0_cacheHits[1];
  assign IBusCachedPlugin_mmuBus_rsp_ways_1_physical = {{MmuPlugin_ports_0_cache_1_physicalAddress_1,(MmuPlugin_ports_0_cache_1_superPage ? IBusCachedPlugin_mmuBus_cmd_1_virtualAddress[21 : 12] : MmuPlugin_ports_0_cache_1_physicalAddress_0)},IBusCachedPlugin_mmuBus_cmd_1_virtualAddress[11 : 0]};
  assign IBusCachedPlugin_mmuBus_rsp_ways_2_sel = MmuPlugin_ports_0_cacheHits[2];
  assign IBusCachedPlugin_mmuBus_rsp_ways_2_physical = {{MmuPlugin_ports_0_cache_2_physicalAddress_1,(MmuPlugin_ports_0_cache_2_superPage ? IBusCachedPlugin_mmuBus_cmd_1_virtualAddress[21 : 12] : MmuPlugin_ports_0_cache_2_physicalAddress_0)},IBusCachedPlugin_mmuBus_cmd_1_virtualAddress[11 : 0]};
  assign IBusCachedPlugin_mmuBus_rsp_ways_3_sel = MmuPlugin_ports_0_cacheHits[3];
  assign IBusCachedPlugin_mmuBus_rsp_ways_3_physical = {{MmuPlugin_ports_0_cache_3_physicalAddress_1,(MmuPlugin_ports_0_cache_3_superPage ? IBusCachedPlugin_mmuBus_cmd_1_virtualAddress[21 : 12] : MmuPlugin_ports_0_cache_3_physicalAddress_0)},IBusCachedPlugin_mmuBus_cmd_1_virtualAddress[11 : 0]};
  always @ (*) begin
    MmuPlugin_ports_1_requireMmuLockupCalc = ((1'b1 && (! DBusCachedPlugin_mmuBus_cmd_0_bypassTranslation)) && MmuPlugin_satp_mode);
    if(((! MmuPlugin_status_mprv) && (CsrPlugin_privilege == 2'b11)))begin
      MmuPlugin_ports_1_requireMmuLockupCalc = 1'b0;
    end
    if((CsrPlugin_privilege == 2'b11))begin
      if(((! MmuPlugin_status_mprv) || (CsrPlugin_mstatus_MPP == 2'b11)))begin
        MmuPlugin_ports_1_requireMmuLockupCalc = 1'b0;
      end
    end
  end

  always @ (*) begin
    MmuPlugin_ports_1_cacheHitsCalc[0] = ((MmuPlugin_ports_1_cache_0_valid && (MmuPlugin_ports_1_cache_0_virtualAddress_1 == DBusCachedPlugin_mmuBus_cmd_0_virtualAddress[31 : 22])) && (MmuPlugin_ports_1_cache_0_superPage || (MmuPlugin_ports_1_cache_0_virtualAddress_0 == DBusCachedPlugin_mmuBus_cmd_0_virtualAddress[21 : 12])));
    MmuPlugin_ports_1_cacheHitsCalc[1] = ((MmuPlugin_ports_1_cache_1_valid && (MmuPlugin_ports_1_cache_1_virtualAddress_1 == DBusCachedPlugin_mmuBus_cmd_0_virtualAddress[31 : 22])) && (MmuPlugin_ports_1_cache_1_superPage || (MmuPlugin_ports_1_cache_1_virtualAddress_0 == DBusCachedPlugin_mmuBus_cmd_0_virtualAddress[21 : 12])));
    MmuPlugin_ports_1_cacheHitsCalc[2] = ((MmuPlugin_ports_1_cache_2_valid && (MmuPlugin_ports_1_cache_2_virtualAddress_1 == DBusCachedPlugin_mmuBus_cmd_0_virtualAddress[31 : 22])) && (MmuPlugin_ports_1_cache_2_superPage || (MmuPlugin_ports_1_cache_2_virtualAddress_0 == DBusCachedPlugin_mmuBus_cmd_0_virtualAddress[21 : 12])));
    MmuPlugin_ports_1_cacheHitsCalc[3] = ((MmuPlugin_ports_1_cache_3_valid && (MmuPlugin_ports_1_cache_3_virtualAddress_1 == DBusCachedPlugin_mmuBus_cmd_0_virtualAddress[31 : 22])) && (MmuPlugin_ports_1_cache_3_superPage || (MmuPlugin_ports_1_cache_3_virtualAddress_0 == DBusCachedPlugin_mmuBus_cmd_0_virtualAddress[21 : 12])));
  end

  assign MmuPlugin_ports_1_cacheHit = (MmuPlugin_ports_1_cacheHits != 4'b0000);
  assign _zz_53 = MmuPlugin_ports_1_cacheHits[3];
  assign _zz_54 = (MmuPlugin_ports_1_cacheHits[1] || _zz_53);
  assign _zz_55 = (MmuPlugin_ports_1_cacheHits[2] || _zz_53);
  assign _zz_56 = {_zz_55,_zz_54};
  assign MmuPlugin_ports_1_cacheLine_valid = _zz_219;
  assign MmuPlugin_ports_1_cacheLine_exception = _zz_220;
  assign MmuPlugin_ports_1_cacheLine_superPage = _zz_221;
  assign MmuPlugin_ports_1_cacheLine_virtualAddress_0 = _zz_222;
  assign MmuPlugin_ports_1_cacheLine_virtualAddress_1 = _zz_223;
  assign MmuPlugin_ports_1_cacheLine_physicalAddress_0 = _zz_224;
  assign MmuPlugin_ports_1_cacheLine_physicalAddress_1 = _zz_225;
  assign MmuPlugin_ports_1_cacheLine_allowRead = _zz_226;
  assign MmuPlugin_ports_1_cacheLine_allowWrite = _zz_227;
  assign MmuPlugin_ports_1_cacheLine_allowExecute = _zz_228;
  assign MmuPlugin_ports_1_cacheLine_allowUser = _zz_229;
  always @ (*) begin
    MmuPlugin_ports_1_entryToReplace_willIncrement = 1'b0;
    if(_zz_258)begin
      if(_zz_260)begin
        MmuPlugin_ports_1_entryToReplace_willIncrement = 1'b1;
      end
    end
  end

  assign MmuPlugin_ports_1_entryToReplace_willClear = 1'b0;
  assign MmuPlugin_ports_1_entryToReplace_willOverflowIfInc = (MmuPlugin_ports_1_entryToReplace_value == 2'b11);
  assign MmuPlugin_ports_1_entryToReplace_willOverflow = (MmuPlugin_ports_1_entryToReplace_willOverflowIfInc && MmuPlugin_ports_1_entryToReplace_willIncrement);
  always @ (*) begin
    MmuPlugin_ports_1_entryToReplace_valueNext = (MmuPlugin_ports_1_entryToReplace_value + _zz_340);
    if(MmuPlugin_ports_1_entryToReplace_willClear)begin
      MmuPlugin_ports_1_entryToReplace_valueNext = 2'b00;
    end
  end

  always @ (*) begin
    if(MmuPlugin_ports_1_requireMmuLockup)begin
      DBusCachedPlugin_mmuBus_rsp_physicalAddress = {{MmuPlugin_ports_1_cacheLine_physicalAddress_1,(MmuPlugin_ports_1_cacheLine_superPage ? DBusCachedPlugin_mmuBus_cmd_1_virtualAddress[21 : 12] : MmuPlugin_ports_1_cacheLine_physicalAddress_0)},DBusCachedPlugin_mmuBus_cmd_1_virtualAddress[11 : 0]};
    end else begin
      DBusCachedPlugin_mmuBus_rsp_physicalAddress = DBusCachedPlugin_mmuBus_cmd_1_virtualAddress;
    end
  end

  always @ (*) begin
    if(MmuPlugin_ports_1_requireMmuLockup)begin
      DBusCachedPlugin_mmuBus_rsp_allowRead = (MmuPlugin_ports_1_cacheLine_allowRead || (MmuPlugin_status_mxr && MmuPlugin_ports_1_cacheLine_allowExecute));
    end else begin
      DBusCachedPlugin_mmuBus_rsp_allowRead = 1'b1;
    end
  end

  always @ (*) begin
    if(MmuPlugin_ports_1_requireMmuLockup)begin
      DBusCachedPlugin_mmuBus_rsp_allowWrite = MmuPlugin_ports_1_cacheLine_allowWrite;
    end else begin
      DBusCachedPlugin_mmuBus_rsp_allowWrite = 1'b1;
    end
  end

  always @ (*) begin
    if(MmuPlugin_ports_1_requireMmuLockup)begin
      DBusCachedPlugin_mmuBus_rsp_allowExecute = MmuPlugin_ports_1_cacheLine_allowExecute;
    end else begin
      DBusCachedPlugin_mmuBus_rsp_allowExecute = 1'b1;
    end
  end

  always @ (*) begin
    if(MmuPlugin_ports_1_requireMmuLockup)begin
      DBusCachedPlugin_mmuBus_rsp_exception = (((! MmuPlugin_ports_1_dirty) && MmuPlugin_ports_1_cacheHit) && ((MmuPlugin_ports_1_cacheLine_exception || ((MmuPlugin_ports_1_cacheLine_allowUser && (CsrPlugin_privilege == 2'b01)) && (! MmuPlugin_status_sum))) || ((! MmuPlugin_ports_1_cacheLine_allowUser) && (CsrPlugin_privilege == 2'b00))));
    end else begin
      DBusCachedPlugin_mmuBus_rsp_exception = 1'b0;
    end
  end

  always @ (*) begin
    if(MmuPlugin_ports_1_requireMmuLockup)begin
      DBusCachedPlugin_mmuBus_rsp_refilling = (MmuPlugin_ports_1_dirty || (! MmuPlugin_ports_1_cacheHit));
    end else begin
      DBusCachedPlugin_mmuBus_rsp_refilling = 1'b0;
    end
  end

  assign DBusCachedPlugin_mmuBus_rsp_isIoAccess = (DBusCachedPlugin_mmuBus_rsp_physicalAddress[31 : 28] == 4'b0001);
  assign DBusCachedPlugin_mmuBus_rsp_bypassTranslation = (! MmuPlugin_ports_1_requireMmuLockup);
  assign DBusCachedPlugin_mmuBus_rsp_ways_0_sel = MmuPlugin_ports_1_cacheHits[0];
  assign DBusCachedPlugin_mmuBus_rsp_ways_0_physical = {{MmuPlugin_ports_1_cache_0_physicalAddress_1,(MmuPlugin_ports_1_cache_0_superPage ? DBusCachedPlugin_mmuBus_cmd_1_virtualAddress[21 : 12] : MmuPlugin_ports_1_cache_0_physicalAddress_0)},DBusCachedPlugin_mmuBus_cmd_1_virtualAddress[11 : 0]};
  assign DBusCachedPlugin_mmuBus_rsp_ways_1_sel = MmuPlugin_ports_1_cacheHits[1];
  assign DBusCachedPlugin_mmuBus_rsp_ways_1_physical = {{MmuPlugin_ports_1_cache_1_physicalAddress_1,(MmuPlugin_ports_1_cache_1_superPage ? DBusCachedPlugin_mmuBus_cmd_1_virtualAddress[21 : 12] : MmuPlugin_ports_1_cache_1_physicalAddress_0)},DBusCachedPlugin_mmuBus_cmd_1_virtualAddress[11 : 0]};
  assign DBusCachedPlugin_mmuBus_rsp_ways_2_sel = MmuPlugin_ports_1_cacheHits[2];
  assign DBusCachedPlugin_mmuBus_rsp_ways_2_physical = {{MmuPlugin_ports_1_cache_2_physicalAddress_1,(MmuPlugin_ports_1_cache_2_superPage ? DBusCachedPlugin_mmuBus_cmd_1_virtualAddress[21 : 12] : MmuPlugin_ports_1_cache_2_physicalAddress_0)},DBusCachedPlugin_mmuBus_cmd_1_virtualAddress[11 : 0]};
  assign DBusCachedPlugin_mmuBus_rsp_ways_3_sel = MmuPlugin_ports_1_cacheHits[3];
  assign DBusCachedPlugin_mmuBus_rsp_ways_3_physical = {{MmuPlugin_ports_1_cache_3_physicalAddress_1,(MmuPlugin_ports_1_cache_3_superPage ? DBusCachedPlugin_mmuBus_cmd_1_virtualAddress[21 : 12] : MmuPlugin_ports_1_cache_3_physicalAddress_0)},DBusCachedPlugin_mmuBus_cmd_1_virtualAddress[11 : 0]};
  assign MmuPlugin_shared_dBusRsp_pte_V = _zz_341[0];
  assign MmuPlugin_shared_dBusRsp_pte_R = _zz_342[0];
  assign MmuPlugin_shared_dBusRsp_pte_W = _zz_343[0];
  assign MmuPlugin_shared_dBusRsp_pte_X = _zz_344[0];
  assign MmuPlugin_shared_dBusRsp_pte_U = _zz_345[0];
  assign MmuPlugin_shared_dBusRsp_pte_G = _zz_346[0];
  assign MmuPlugin_shared_dBusRsp_pte_A = _zz_347[0];
  assign MmuPlugin_shared_dBusRsp_pte_D = _zz_348[0];
  assign MmuPlugin_shared_dBusRsp_pte_RSW = MmuPlugin_shared_dBusRspStaged_payload_data[9 : 8];
  assign MmuPlugin_shared_dBusRsp_pte_PPN0 = MmuPlugin_shared_dBusRspStaged_payload_data[19 : 10];
  assign MmuPlugin_shared_dBusRsp_pte_PPN1 = MmuPlugin_shared_dBusRspStaged_payload_data[31 : 20];
  assign MmuPlugin_shared_dBusRsp_exception = (((! MmuPlugin_shared_dBusRsp_pte_V) || ((! MmuPlugin_shared_dBusRsp_pte_R) && MmuPlugin_shared_dBusRsp_pte_W)) || MmuPlugin_shared_dBusRspStaged_payload_error);
  assign MmuPlugin_shared_dBusRsp_leaf = (MmuPlugin_shared_dBusRsp_pte_R || MmuPlugin_shared_dBusRsp_pte_X);
  always @ (*) begin
    MmuPlugin_dBusAccess_cmd_valid = 1'b0;
    case(MmuPlugin_shared_state_1)
      `MmuPlugin_shared_State_defaultEncoding_IDLE : begin
      end
      `MmuPlugin_shared_State_defaultEncoding_L1_CMD : begin
        MmuPlugin_dBusAccess_cmd_valid = 1'b1;
      end
      `MmuPlugin_shared_State_defaultEncoding_L1_RSP : begin
      end
      `MmuPlugin_shared_State_defaultEncoding_L0_CMD : begin
        MmuPlugin_dBusAccess_cmd_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign MmuPlugin_dBusAccess_cmd_payload_write = 1'b0;
  assign MmuPlugin_dBusAccess_cmd_payload_size = 2'b10;
  always @ (*) begin
    MmuPlugin_dBusAccess_cmd_payload_address = 32'h0;
    case(MmuPlugin_shared_state_1)
      `MmuPlugin_shared_State_defaultEncoding_IDLE : begin
      end
      `MmuPlugin_shared_State_defaultEncoding_L1_CMD : begin
        MmuPlugin_dBusAccess_cmd_payload_address = {{MmuPlugin_satp_ppn,MmuPlugin_shared_vpn_1},2'b00};
      end
      `MmuPlugin_shared_State_defaultEncoding_L1_RSP : begin
      end
      `MmuPlugin_shared_State_defaultEncoding_L0_CMD : begin
        MmuPlugin_dBusAccess_cmd_payload_address = {{{MmuPlugin_shared_pteBuffer_PPN1[9 : 0],MmuPlugin_shared_pteBuffer_PPN0},MmuPlugin_shared_vpn_0},2'b00};
      end
      default : begin
      end
    endcase
  end

  assign MmuPlugin_dBusAccess_cmd_payload_data = 32'h0;
  assign MmuPlugin_dBusAccess_cmd_payload_writeMask = 4'bxxxx;
  always @ (*) begin
    _zz_57[0] = (((IBusCachedPlugin_mmuBus_cmd_1_isValid && MmuPlugin_ports_0_requireMmuLockup) && (! MmuPlugin_ports_0_dirty)) && (! MmuPlugin_ports_0_cacheHit));
    _zz_57[1] = (((DBusCachedPlugin_mmuBus_cmd_1_isValid && MmuPlugin_ports_1_requireMmuLockup) && (! MmuPlugin_ports_1_dirty)) && (! MmuPlugin_ports_1_cacheHit));
  end

  assign _zz_58 = _zz_57;
  always @ (*) begin
    _zz_59[0] = _zz_58[1];
    _zz_59[1] = _zz_58[0];
  end

  assign _zz_60 = (_zz_59 & (~ _zz_349));
  always @ (*) begin
    _zz_61[0] = _zz_60[1];
    _zz_61[1] = _zz_60[0];
  end

  assign MmuPlugin_shared_refills = _zz_61;
  assign _zz_62 = (MmuPlugin_shared_refills[0] ? IBusCachedPlugin_mmuBus_cmd_1_virtualAddress : DBusCachedPlugin_mmuBus_cmd_1_virtualAddress);
  assign IBusCachedPlugin_mmuBus_busy = ((MmuPlugin_shared_state_1 != `MmuPlugin_shared_State_defaultEncoding_IDLE) && MmuPlugin_shared_portSortedOh[0]);
  assign DBusCachedPlugin_mmuBus_busy = ((MmuPlugin_shared_state_1 != `MmuPlugin_shared_State_defaultEncoding_IDLE) && MmuPlugin_shared_portSortedOh[1]);
  assign IBusCachedPlugin_externalFlush = ({writeBack_arbitration_flushNext,{memory_arbitration_flushNext,{execute_arbitration_flushNext,decode_arbitration_flushNext}}} != 4'b0000);
  assign IBusCachedPlugin_jump_pcLoad_valid = ({BranchPlugin_jumpInterface_valid,{CsrPlugin_redoInterface_valid,{CsrPlugin_jumpInterface_valid,DBusCachedPlugin_redoBranch_valid}}} != 4'b0000);
  assign _zz_63 = {CsrPlugin_redoInterface_valid,{BranchPlugin_jumpInterface_valid,{CsrPlugin_jumpInterface_valid,DBusCachedPlugin_redoBranch_valid}}};
  assign _zz_64 = (_zz_63 & (~ _zz_350));
  assign _zz_65 = _zz_64[3];
  assign _zz_66 = (_zz_64[1] || _zz_65);
  assign _zz_67 = (_zz_64[2] || _zz_65);
  assign IBusCachedPlugin_jump_pcLoad_payload = _zz_230;
  always @ (*) begin
    IBusCachedPlugin_fetchPc_correction = 1'b0;
    if(IBusCachedPlugin_fetchPc_redo_valid)begin
      IBusCachedPlugin_fetchPc_correction = 1'b1;
    end
    if(IBusCachedPlugin_jump_pcLoad_valid)begin
      IBusCachedPlugin_fetchPc_correction = 1'b1;
    end
  end

  assign IBusCachedPlugin_fetchPc_corrected = (IBusCachedPlugin_fetchPc_correction || IBusCachedPlugin_fetchPc_correctionReg);
  always @ (*) begin
    IBusCachedPlugin_fetchPc_pcRegPropagate = 1'b0;
    if(IBusCachedPlugin_iBusRsp_stages_1_input_ready)begin
      IBusCachedPlugin_fetchPc_pcRegPropagate = 1'b1;
    end
  end

  always @ (*) begin
    IBusCachedPlugin_fetchPc_pc = (IBusCachedPlugin_fetchPc_pcReg + _zz_352);
    if(IBusCachedPlugin_fetchPc_redo_valid)begin
      IBusCachedPlugin_fetchPc_pc = IBusCachedPlugin_fetchPc_redo_payload;
    end
    if(IBusCachedPlugin_jump_pcLoad_valid)begin
      IBusCachedPlugin_fetchPc_pc = IBusCachedPlugin_jump_pcLoad_payload;
    end
    IBusCachedPlugin_fetchPc_pc[0] = 1'b0;
    IBusCachedPlugin_fetchPc_pc[1] = 1'b0;
  end

  always @ (*) begin
    IBusCachedPlugin_fetchPc_flushed = 1'b0;
    if(IBusCachedPlugin_fetchPc_redo_valid)begin
      IBusCachedPlugin_fetchPc_flushed = 1'b1;
    end
    if(IBusCachedPlugin_jump_pcLoad_valid)begin
      IBusCachedPlugin_fetchPc_flushed = 1'b1;
    end
  end

  assign IBusCachedPlugin_fetchPc_output_valid = ((! IBusCachedPlugin_fetcherHalt) && IBusCachedPlugin_fetchPc_booted);
  assign IBusCachedPlugin_fetchPc_output_payload = IBusCachedPlugin_fetchPc_pc;
  always @ (*) begin
    IBusCachedPlugin_iBusRsp_redoFetch = 1'b0;
    if(IBusCachedPlugin_rsp_redoFetch)begin
      IBusCachedPlugin_iBusRsp_redoFetch = 1'b1;
    end
  end

  assign IBusCachedPlugin_iBusRsp_stages_0_input_valid = IBusCachedPlugin_fetchPc_output_valid;
  assign IBusCachedPlugin_fetchPc_output_ready = IBusCachedPlugin_iBusRsp_stages_0_input_ready;
  assign IBusCachedPlugin_iBusRsp_stages_0_input_payload = IBusCachedPlugin_fetchPc_output_payload;
  always @ (*) begin
    IBusCachedPlugin_iBusRsp_stages_0_halt = 1'b0;
    if(IBusCachedPlugin_cache_io_cpu_prefetch_haltIt)begin
      IBusCachedPlugin_iBusRsp_stages_0_halt = 1'b1;
    end
    if(IBusCachedPlugin_mmuBus_busy)begin
      IBusCachedPlugin_iBusRsp_stages_0_halt = 1'b1;
    end
  end

  assign _zz_68 = (! IBusCachedPlugin_iBusRsp_stages_0_halt);
  assign IBusCachedPlugin_iBusRsp_stages_0_input_ready = (IBusCachedPlugin_iBusRsp_stages_0_output_ready && _zz_68);
  assign IBusCachedPlugin_iBusRsp_stages_0_output_valid = (IBusCachedPlugin_iBusRsp_stages_0_input_valid && _zz_68);
  assign IBusCachedPlugin_iBusRsp_stages_0_output_payload = IBusCachedPlugin_iBusRsp_stages_0_input_payload;
  assign IBusCachedPlugin_iBusRsp_stages_1_halt = 1'b0;
  assign _zz_69 = (! IBusCachedPlugin_iBusRsp_stages_1_halt);
  assign IBusCachedPlugin_iBusRsp_stages_1_input_ready = (IBusCachedPlugin_iBusRsp_stages_1_output_ready && _zz_69);
  assign IBusCachedPlugin_iBusRsp_stages_1_output_valid = (IBusCachedPlugin_iBusRsp_stages_1_input_valid && _zz_69);
  assign IBusCachedPlugin_iBusRsp_stages_1_output_payload = IBusCachedPlugin_iBusRsp_stages_1_input_payload;
  always @ (*) begin
    IBusCachedPlugin_iBusRsp_stages_2_halt = 1'b0;
    if((IBusCachedPlugin_rsp_issueDetected_4 || IBusCachedPlugin_rsp_iBusRspOutputHalt))begin
      IBusCachedPlugin_iBusRsp_stages_2_halt = 1'b1;
    end
  end

  assign _zz_70 = (! IBusCachedPlugin_iBusRsp_stages_2_halt);
  assign IBusCachedPlugin_iBusRsp_stages_2_input_ready = (IBusCachedPlugin_iBusRsp_stages_2_output_ready && _zz_70);
  assign IBusCachedPlugin_iBusRsp_stages_2_output_valid = (IBusCachedPlugin_iBusRsp_stages_2_input_valid && _zz_70);
  assign IBusCachedPlugin_iBusRsp_stages_2_output_payload = IBusCachedPlugin_iBusRsp_stages_2_input_payload;
  assign IBusCachedPlugin_fetchPc_redo_valid = IBusCachedPlugin_iBusRsp_redoFetch;
  assign IBusCachedPlugin_fetchPc_redo_payload = IBusCachedPlugin_iBusRsp_stages_2_input_payload;
  assign IBusCachedPlugin_iBusRsp_flush = ((decode_arbitration_removeIt || (decode_arbitration_flushNext && (! decode_arbitration_isStuck))) || IBusCachedPlugin_iBusRsp_redoFetch);
  assign IBusCachedPlugin_iBusRsp_stages_0_output_ready = _zz_71;
  assign _zz_71 = ((1'b0 && (! _zz_72)) || IBusCachedPlugin_iBusRsp_stages_1_input_ready);
  assign _zz_72 = _zz_73;
  assign IBusCachedPlugin_iBusRsp_stages_1_input_valid = _zz_72;
  assign IBusCachedPlugin_iBusRsp_stages_1_input_payload = IBusCachedPlugin_fetchPc_pcReg;
  assign IBusCachedPlugin_iBusRsp_stages_1_output_ready = ((1'b0 && (! _zz_74)) || IBusCachedPlugin_iBusRsp_stages_2_input_ready);
  assign _zz_74 = _zz_75;
  assign IBusCachedPlugin_iBusRsp_stages_2_input_valid = _zz_74;
  assign IBusCachedPlugin_iBusRsp_stages_2_input_payload = _zz_76;
  always @ (*) begin
    IBusCachedPlugin_iBusRsp_readyForError = 1'b1;
    if((! IBusCachedPlugin_pcValids_0))begin
      IBusCachedPlugin_iBusRsp_readyForError = 1'b0;
    end
  end

  assign IBusCachedPlugin_pcValids_0 = IBusCachedPlugin_injector_nextPcCalc_valids_1;
  assign IBusCachedPlugin_pcValids_1 = IBusCachedPlugin_injector_nextPcCalc_valids_2;
  assign IBusCachedPlugin_pcValids_2 = IBusCachedPlugin_injector_nextPcCalc_valids_3;
  assign IBusCachedPlugin_pcValids_3 = IBusCachedPlugin_injector_nextPcCalc_valids_4;
  assign IBusCachedPlugin_iBusRsp_output_ready = (! decode_arbitration_isStuck);
  always @ (*) begin
    decode_arbitration_isValid = IBusCachedPlugin_iBusRsp_output_valid;
    case(_zz_148)
      3'b010 : begin
        decode_arbitration_isValid = 1'b1;
      end
      3'b011 : begin
        decode_arbitration_isValid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign iBus_cmd_valid = IBusCachedPlugin_cache_io_mem_cmd_valid;
  always @ (*) begin
    iBus_cmd_payload_address = IBusCachedPlugin_cache_io_mem_cmd_payload_address;
    iBus_cmd_payload_address = IBusCachedPlugin_cache_io_mem_cmd_payload_address;
  end

  assign iBus_cmd_payload_size = IBusCachedPlugin_cache_io_mem_cmd_payload_size;
  assign IBusCachedPlugin_s0_tightlyCoupledHit = 1'b0;
  assign _zz_172 = (IBusCachedPlugin_iBusRsp_stages_0_input_valid && (! IBusCachedPlugin_s0_tightlyCoupledHit));
  assign IBusCachedPlugin_mmuBus_cmd_0_isValid = _zz_172;
  assign IBusCachedPlugin_mmuBus_cmd_0_isStuck = (! IBusCachedPlugin_iBusRsp_stages_0_input_ready);
  assign IBusCachedPlugin_mmuBus_cmd_0_virtualAddress = IBusCachedPlugin_iBusRsp_stages_0_input_payload;
  assign IBusCachedPlugin_mmuBus_cmd_0_bypassTranslation = 1'b0;
  assign _zz_173 = (IBusCachedPlugin_iBusRsp_stages_1_input_valid && (! IBusCachedPlugin_s1_tightlyCoupledHit));
  assign _zz_174 = (! IBusCachedPlugin_iBusRsp_stages_1_input_ready);
  assign IBusCachedPlugin_mmuBus_cmd_1_isValid = _zz_173;
  assign IBusCachedPlugin_mmuBus_cmd_1_isStuck = (! IBusCachedPlugin_iBusRsp_stages_1_input_ready);
  assign IBusCachedPlugin_mmuBus_cmd_1_virtualAddress = IBusCachedPlugin_iBusRsp_stages_1_input_payload;
  assign IBusCachedPlugin_mmuBus_cmd_1_bypassTranslation = 1'b0;
  assign IBusCachedPlugin_mmuBus_end = (IBusCachedPlugin_iBusRsp_stages_1_input_ready || IBusCachedPlugin_externalFlush);
  assign _zz_176 = (IBusCachedPlugin_iBusRsp_stages_2_input_valid && (! IBusCachedPlugin_s2_tightlyCoupledHit));
  assign _zz_177 = (! IBusCachedPlugin_iBusRsp_stages_2_input_ready);
  assign _zz_178 = (CsrPlugin_privilege == 2'b00);
  assign IBusCachedPlugin_rsp_iBusRspOutputHalt = 1'b0;
  assign IBusCachedPlugin_rsp_issueDetected = 1'b0;
  always @ (*) begin
    IBusCachedPlugin_rsp_redoFetch = 1'b0;
    if(_zz_249)begin
      IBusCachedPlugin_rsp_redoFetch = 1'b1;
    end
    if(_zz_247)begin
      IBusCachedPlugin_rsp_redoFetch = 1'b1;
    end
  end

  always @ (*) begin
    _zz_179 = (IBusCachedPlugin_rsp_redoFetch && (! IBusCachedPlugin_cache_io_cpu_decode_mmuRefilling));
    if(_zz_247)begin
      _zz_179 = 1'b1;
    end
  end

  always @ (*) begin
    IBusCachedPlugin_decodeExceptionPort_valid = 1'b0;
    if(_zz_248)begin
      IBusCachedPlugin_decodeExceptionPort_valid = IBusCachedPlugin_iBusRsp_readyForError;
    end
    if(_zz_246)begin
      IBusCachedPlugin_decodeExceptionPort_valid = IBusCachedPlugin_iBusRsp_readyForError;
    end
  end

  always @ (*) begin
    IBusCachedPlugin_decodeExceptionPort_payload_code = 4'bxxxx;
    if(_zz_248)begin
      IBusCachedPlugin_decodeExceptionPort_payload_code = 4'b1100;
    end
    if(_zz_246)begin
      IBusCachedPlugin_decodeExceptionPort_payload_code = 4'b0001;
    end
  end

  assign IBusCachedPlugin_decodeExceptionPort_payload_badAddr = {IBusCachedPlugin_iBusRsp_stages_2_input_payload[31 : 2],2'b00};
  assign IBusCachedPlugin_iBusRsp_output_valid = IBusCachedPlugin_iBusRsp_stages_2_output_valid;
  assign IBusCachedPlugin_iBusRsp_stages_2_output_ready = IBusCachedPlugin_iBusRsp_output_ready;
  assign IBusCachedPlugin_iBusRsp_output_payload_rsp_inst = IBusCachedPlugin_cache_io_cpu_decode_data;
  assign IBusCachedPlugin_iBusRsp_output_payload_pc = IBusCachedPlugin_iBusRsp_stages_2_output_payload;
  assign _zz_171 = (decode_arbitration_isValid && decode_FLUSH_ALL);
  assign dataCache_2_io_mem_cmd_s2mPipe_valid = (dataCache_2_io_mem_cmd_valid || dataCache_2_io_mem_cmd_s2mPipe_rValid);
  assign _zz_204 = (! dataCache_2_io_mem_cmd_s2mPipe_rValid);
  assign dataCache_2_io_mem_cmd_s2mPipe_payload_wr = (dataCache_2_io_mem_cmd_s2mPipe_rValid ? dataCache_2_io_mem_cmd_s2mPipe_rData_wr : dataCache_2_io_mem_cmd_payload_wr);
  assign dataCache_2_io_mem_cmd_s2mPipe_payload_uncached = (dataCache_2_io_mem_cmd_s2mPipe_rValid ? dataCache_2_io_mem_cmd_s2mPipe_rData_uncached : dataCache_2_io_mem_cmd_payload_uncached);
  assign dataCache_2_io_mem_cmd_s2mPipe_payload_address = (dataCache_2_io_mem_cmd_s2mPipe_rValid ? dataCache_2_io_mem_cmd_s2mPipe_rData_address : dataCache_2_io_mem_cmd_payload_address);
  assign dataCache_2_io_mem_cmd_s2mPipe_payload_data = (dataCache_2_io_mem_cmd_s2mPipe_rValid ? dataCache_2_io_mem_cmd_s2mPipe_rData_data : dataCache_2_io_mem_cmd_payload_data);
  assign dataCache_2_io_mem_cmd_s2mPipe_payload_mask = (dataCache_2_io_mem_cmd_s2mPipe_rValid ? dataCache_2_io_mem_cmd_s2mPipe_rData_mask : dataCache_2_io_mem_cmd_payload_mask);
  assign dataCache_2_io_mem_cmd_s2mPipe_payload_length = (dataCache_2_io_mem_cmd_s2mPipe_rValid ? dataCache_2_io_mem_cmd_s2mPipe_rData_length : dataCache_2_io_mem_cmd_payload_length);
  assign dataCache_2_io_mem_cmd_s2mPipe_payload_exclusive = (dataCache_2_io_mem_cmd_s2mPipe_rValid ? dataCache_2_io_mem_cmd_s2mPipe_rData_exclusive : dataCache_2_io_mem_cmd_payload_exclusive);
  assign dataCache_2_io_mem_cmd_s2mPipe_payload_last = (dataCache_2_io_mem_cmd_s2mPipe_rValid ? dataCache_2_io_mem_cmd_s2mPipe_rData_last : dataCache_2_io_mem_cmd_payload_last);
  assign dBus_cmd_valid = dataCache_2_io_mem_cmd_s2mPipe_valid;
  assign dataCache_2_io_mem_cmd_s2mPipe_ready = dBus_cmd_ready;
  assign dBus_cmd_payload_wr = dataCache_2_io_mem_cmd_s2mPipe_payload_wr;
  assign dBus_cmd_payload_uncached = dataCache_2_io_mem_cmd_s2mPipe_payload_uncached;
  assign dBus_cmd_payload_address = dataCache_2_io_mem_cmd_s2mPipe_payload_address;
  assign dBus_cmd_payload_data = dataCache_2_io_mem_cmd_s2mPipe_payload_data;
  assign dBus_cmd_payload_mask = dataCache_2_io_mem_cmd_s2mPipe_payload_mask;
  assign dBus_cmd_payload_length = dataCache_2_io_mem_cmd_s2mPipe_payload_length;
  assign dBus_cmd_payload_exclusive = dataCache_2_io_mem_cmd_s2mPipe_payload_exclusive;
  assign dBus_cmd_payload_last = dataCache_2_io_mem_cmd_s2mPipe_payload_last;
  assign dBus_inv_ready = dataCache_2_io_mem_inv_ready;
  assign dBus_ack_valid = dataCache_2_io_mem_ack_valid;
  assign dBus_ack_payload_last = dataCache_2_io_mem_ack_payload_last;
  assign dBus_ack_payload_fragment_hit = dataCache_2_io_mem_ack_payload_fragment_hit;
  assign dBus_sync_ready = dataCache_2_io_mem_sync_ready;
  always @ (*) begin
    _zz_45 = 1'b0;
    if(decode_INSTRUCTION[25])begin
      if(decode_MEMORY_LRSC)begin
        _zz_45 = 1'b1;
      end
      if(decode_MEMORY_AMO)begin
        _zz_45 = 1'b1;
      end
    end
  end

  assign execute_DBusCachedPlugin_size = execute_INSTRUCTION[13 : 12];
  always @ (*) begin
    _zz_180 = (execute_arbitration_isValid && execute_MEMORY_ENABLE);
    if(MmuPlugin_dBusAccess_cmd_valid)begin
      if(_zz_261)begin
        if(_zz_262)begin
          _zz_180 = 1'b1;
        end
      end
    end
  end

  always @ (*) begin
    _zz_181 = execute_SRC_ADD;
    if(MmuPlugin_dBusAccess_cmd_valid)begin
      if(_zz_261)begin
        _zz_181 = MmuPlugin_dBusAccess_cmd_payload_address;
      end
    end
  end

  always @ (*) begin
    _zz_182 = execute_MEMORY_WR;
    if(MmuPlugin_dBusAccess_cmd_valid)begin
      if(_zz_261)begin
        _zz_182 = MmuPlugin_dBusAccess_cmd_payload_write;
      end
    end
  end

  always @ (*) begin
    case(execute_DBusCachedPlugin_size)
      2'b00 : begin
        _zz_79 = {{{execute_RS2[7 : 0],execute_RS2[7 : 0]},execute_RS2[7 : 0]},execute_RS2[7 : 0]};
      end
      2'b01 : begin
        _zz_79 = {execute_RS2[15 : 0],execute_RS2[15 : 0]};
      end
      default : begin
        _zz_79 = execute_RS2[31 : 0];
      end
    endcase
  end

  always @ (*) begin
    _zz_183 = _zz_79;
    if(MmuPlugin_dBusAccess_cmd_valid)begin
      if(_zz_261)begin
        _zz_183 = MmuPlugin_dBusAccess_cmd_payload_data;
      end
    end
  end

  always @ (*) begin
    _zz_184 = execute_DBusCachedPlugin_size;
    if(MmuPlugin_dBusAccess_cmd_valid)begin
      if(_zz_261)begin
        _zz_184 = MmuPlugin_dBusAccess_cmd_payload_size;
      end
    end
  end

  assign DBusCachedPlugin_mmuBus_cmd_0_isValid = _zz_180;
  assign DBusCachedPlugin_mmuBus_cmd_0_isStuck = execute_arbitration_isStuck;
  assign DBusCachedPlugin_mmuBus_cmd_0_virtualAddress = execute_SRC_ADD;
  always @ (*) begin
    DBusCachedPlugin_mmuBus_cmd_0_bypassTranslation = 1'b0;
    if(execute_IS_DBUS_SHARING)begin
      DBusCachedPlugin_mmuBus_cmd_0_bypassTranslation = 1'b1;
    end
  end

  assign _zz_203 = (execute_arbitration_isValid && execute_MEMORY_MANAGMENT);
  always @ (*) begin
    _zz_185 = 1'b0;
    if(execute_MEMORY_LRSC)begin
      _zz_185 = 1'b1;
    end
    if(MmuPlugin_dBusAccess_cmd_valid)begin
      if(_zz_261)begin
        _zz_185 = 1'b0;
      end
    end
  end

  always @ (*) begin
    _zz_186 = execute_MEMORY_AMO;
    if(MmuPlugin_dBusAccess_cmd_valid)begin
      if(_zz_261)begin
        _zz_186 = 1'b0;
      end
    end
  end

  assign _zz_188 = execute_INSTRUCTION[31 : 29];
  assign _zz_187 = execute_INSTRUCTION[27];
  always @ (*) begin
    _zz_189 = (memory_arbitration_isValid && memory_MEMORY_ENABLE);
    if(memory_IS_DBUS_SHARING)begin
      _zz_189 = 1'b1;
    end
  end

  assign DBusCachedPlugin_mmuBus_cmd_1_isValid = _zz_189;
  assign DBusCachedPlugin_mmuBus_cmd_1_isStuck = memory_arbitration_isStuck;
  assign DBusCachedPlugin_mmuBus_cmd_1_virtualAddress = memory_MEMORY_VIRTUAL_ADDRESS;
  always @ (*) begin
    DBusCachedPlugin_mmuBus_cmd_1_bypassTranslation = 1'b0;
    if(memory_IS_DBUS_SHARING)begin
      DBusCachedPlugin_mmuBus_cmd_1_bypassTranslation = 1'b1;
    end
  end

  assign DBusCachedPlugin_mmuBus_end = ((! memory_arbitration_isStuck) || memory_arbitration_removeIt);
  always @ (*) begin
    _zz_190 = DBusCachedPlugin_mmuBus_rsp_isIoAccess;
    if((_zz_48 && (! dataCache_2_io_cpu_memory_isWrite)))begin
      _zz_190 = 1'b1;
    end
  end

  always @ (*) begin
    _zz_191 = (writeBack_arbitration_isValid && writeBack_MEMORY_ENABLE);
    if(writeBack_IS_DBUS_SHARING)begin
      _zz_191 = 1'b1;
    end
  end

  assign _zz_192 = (CsrPlugin_privilege == 2'b00);
  assign _zz_193 = writeBack_REGFILE_WRITE_DATA;
  assign _zz_80 = writeBack_INSTRUCTION[31 : 20];
  always @ (*) begin
    _zz_194 = _zz_353[0];
    if(writeBack_DBusCachedPlugin_fence_aquire)begin
      _zz_194 = 1'b1;
    end
    if(_zz_263)begin
      _zz_194 = 1'b0;
    end
  end

  always @ (*) begin
    _zz_195 = _zz_354[0];
    if(writeBack_DBusCachedPlugin_fence_aquire)begin
      _zz_195 = 1'b1;
    end
    if(_zz_263)begin
      _zz_195 = 1'b0;
    end
  end

  always @ (*) begin
    _zz_196 = _zz_355[0];
    if(writeBack_DBusCachedPlugin_fence_aquire)begin
      _zz_196 = 1'b1;
    end
    if(_zz_263)begin
      _zz_196 = 1'b0;
    end
  end

  always @ (*) begin
    _zz_197 = _zz_356[0];
    if(writeBack_DBusCachedPlugin_fence_aquire)begin
      _zz_197 = 1'b1;
    end
    if(_zz_263)begin
      _zz_197 = 1'b0;
    end
  end

  always @ (*) begin
    _zz_198 = _zz_357[0];
    if(writeBack_DBusCachedPlugin_fence_aquire)begin
      _zz_198 = 1'b1;
    end
    if(_zz_263)begin
      _zz_198 = 1'b0;
    end
  end

  always @ (*) begin
    _zz_199 = _zz_358[0];
    if(writeBack_DBusCachedPlugin_fence_aquire)begin
      _zz_199 = 1'b1;
    end
    if(_zz_263)begin
      _zz_199 = 1'b0;
    end
  end

  always @ (*) begin
    _zz_200 = _zz_359[0];
    if(writeBack_DBusCachedPlugin_fence_aquire)begin
      _zz_200 = 1'b1;
    end
    if(_zz_263)begin
      _zz_200 = 1'b0;
    end
  end

  always @ (*) begin
    _zz_201 = _zz_360[0];
    if(writeBack_DBusCachedPlugin_fence_aquire)begin
      _zz_201 = 1'b1;
    end
    if(_zz_263)begin
      _zz_201 = 1'b0;
    end
  end

  assign _zz_202 = _zz_80[11 : 8];
  always @ (*) begin
    writeBack_DBusCachedPlugin_fence_aquire = 1'b0;
    if((writeBack_MEMORY_ENABLE && writeBack_INSTRUCTION[26]))begin
      if(writeBack_MEMORY_LRSC)begin
        writeBack_DBusCachedPlugin_fence_aquire = 1'b1;
      end
      if(writeBack_MEMORY_AMO)begin
        writeBack_DBusCachedPlugin_fence_aquire = 1'b1;
      end
    end
  end

  always @ (*) begin
    DBusCachedPlugin_redoBranch_valid = 1'b0;
    if(_zz_264)begin
      if(dataCache_2_io_cpu_redo)begin
        DBusCachedPlugin_redoBranch_valid = 1'b1;
      end
    end
  end

  assign DBusCachedPlugin_redoBranch_payload = writeBack_PC;
  always @ (*) begin
    DBusCachedPlugin_exceptionBus_valid = 1'b0;
    if(_zz_264)begin
      if(dataCache_2_io_cpu_writeBack_accessError)begin
        DBusCachedPlugin_exceptionBus_valid = 1'b1;
      end
      if(dataCache_2_io_cpu_writeBack_unalignedAccess)begin
        DBusCachedPlugin_exceptionBus_valid = 1'b1;
      end
      if(dataCache_2_io_cpu_writeBack_mmuException)begin
        DBusCachedPlugin_exceptionBus_valid = 1'b1;
      end
      if(dataCache_2_io_cpu_redo)begin
        DBusCachedPlugin_exceptionBus_valid = 1'b0;
      end
    end
  end

  assign DBusCachedPlugin_exceptionBus_payload_badAddr = writeBack_REGFILE_WRITE_DATA;
  always @ (*) begin
    DBusCachedPlugin_exceptionBus_payload_code = 4'bxxxx;
    if(_zz_264)begin
      if(dataCache_2_io_cpu_writeBack_accessError)begin
        DBusCachedPlugin_exceptionBus_payload_code = {1'd0, _zz_361};
      end
      if(dataCache_2_io_cpu_writeBack_unalignedAccess)begin
        DBusCachedPlugin_exceptionBus_payload_code = {1'd0, _zz_362};
      end
      if(dataCache_2_io_cpu_writeBack_mmuException)begin
        DBusCachedPlugin_exceptionBus_payload_code = (writeBack_MEMORY_WR ? 4'b1111 : 4'b1101);
      end
    end
  end

  always @ (*) begin
    writeBack_DBusCachedPlugin_rspShifted = dataCache_2_io_cpu_writeBack_data;
    case(writeBack_MEMORY_ADDRESS_LOW)
      2'b01 : begin
        writeBack_DBusCachedPlugin_rspShifted[7 : 0] = dataCache_2_io_cpu_writeBack_data[15 : 8];
      end
      2'b10 : begin
        writeBack_DBusCachedPlugin_rspShifted[15 : 0] = dataCache_2_io_cpu_writeBack_data[31 : 16];
      end
      2'b11 : begin
        writeBack_DBusCachedPlugin_rspShifted[7 : 0] = dataCache_2_io_cpu_writeBack_data[31 : 24];
      end
      default : begin
      end
    endcase
  end

  assign _zz_81 = (writeBack_DBusCachedPlugin_rspShifted[7] && (! writeBack_INSTRUCTION[14]));
  always @ (*) begin
    _zz_82[31] = _zz_81;
    _zz_82[30] = _zz_81;
    _zz_82[29] = _zz_81;
    _zz_82[28] = _zz_81;
    _zz_82[27] = _zz_81;
    _zz_82[26] = _zz_81;
    _zz_82[25] = _zz_81;
    _zz_82[24] = _zz_81;
    _zz_82[23] = _zz_81;
    _zz_82[22] = _zz_81;
    _zz_82[21] = _zz_81;
    _zz_82[20] = _zz_81;
    _zz_82[19] = _zz_81;
    _zz_82[18] = _zz_81;
    _zz_82[17] = _zz_81;
    _zz_82[16] = _zz_81;
    _zz_82[15] = _zz_81;
    _zz_82[14] = _zz_81;
    _zz_82[13] = _zz_81;
    _zz_82[12] = _zz_81;
    _zz_82[11] = _zz_81;
    _zz_82[10] = _zz_81;
    _zz_82[9] = _zz_81;
    _zz_82[8] = _zz_81;
    _zz_82[7 : 0] = writeBack_DBusCachedPlugin_rspShifted[7 : 0];
  end

  assign _zz_83 = (writeBack_DBusCachedPlugin_rspShifted[15] && (! writeBack_INSTRUCTION[14]));
  always @ (*) begin
    _zz_84[31] = _zz_83;
    _zz_84[30] = _zz_83;
    _zz_84[29] = _zz_83;
    _zz_84[28] = _zz_83;
    _zz_84[27] = _zz_83;
    _zz_84[26] = _zz_83;
    _zz_84[25] = _zz_83;
    _zz_84[24] = _zz_83;
    _zz_84[23] = _zz_83;
    _zz_84[22] = _zz_83;
    _zz_84[21] = _zz_83;
    _zz_84[20] = _zz_83;
    _zz_84[19] = _zz_83;
    _zz_84[18] = _zz_83;
    _zz_84[17] = _zz_83;
    _zz_84[16] = _zz_83;
    _zz_84[15 : 0] = writeBack_DBusCachedPlugin_rspShifted[15 : 0];
  end

  always @ (*) begin
    case(_zz_299)
      2'b00 : begin
        writeBack_DBusCachedPlugin_rspFormated = _zz_82;
      end
      2'b01 : begin
        writeBack_DBusCachedPlugin_rspFormated = _zz_84;
      end
      default : begin
        writeBack_DBusCachedPlugin_rspFormated = writeBack_DBusCachedPlugin_rspShifted;
      end
    endcase
  end

  always @ (*) begin
    MmuPlugin_dBusAccess_cmd_ready = 1'b0;
    if(MmuPlugin_dBusAccess_cmd_valid)begin
      if(_zz_261)begin
        if(_zz_262)begin
          MmuPlugin_dBusAccess_cmd_ready = (! execute_arbitration_isStuck);
        end
      end
    end
  end

  always @ (*) begin
    DBusCachedPlugin_forceDatapath = 1'b0;
    if(MmuPlugin_dBusAccess_cmd_valid)begin
      if(_zz_261)begin
        DBusCachedPlugin_forceDatapath = 1'b1;
      end
    end
  end

  assign MmuPlugin_dBusAccess_rsp_valid = ((writeBack_IS_DBUS_SHARING && (! dataCache_2_io_cpu_writeBack_isWrite)) && (dataCache_2_io_cpu_redo || (! dataCache_2_io_cpu_writeBack_haltIt)));
  assign MmuPlugin_dBusAccess_rsp_payload_data = dataCache_2_io_cpu_writeBack_data;
  assign MmuPlugin_dBusAccess_rsp_payload_error = (dataCache_2_io_cpu_writeBack_unalignedAccess || dataCache_2_io_cpu_writeBack_accessError);
  assign MmuPlugin_dBusAccess_rsp_payload_redo = dataCache_2_io_cpu_redo;
  assign _zz_86 = ((decode_INSTRUCTION & 32'h00004050) == 32'h00004050);
  assign _zz_87 = ((decode_INSTRUCTION & 32'h00000048) == 32'h00000048);
  assign _zz_88 = ((decode_INSTRUCTION & 32'h00002050) == 32'h00002000);
  assign _zz_89 = ((decode_INSTRUCTION & 32'h00000004) == 32'h00000004);
  assign _zz_90 = ((decode_INSTRUCTION & 32'h0000000c) == 32'h00000004);
  assign _zz_91 = ((decode_INSTRUCTION & 32'h00000030) == 32'h00000010);
  assign _zz_92 = ((decode_INSTRUCTION & 32'h0000000c) == 32'h00000008);
  assign _zz_93 = ((decode_INSTRUCTION & 32'h00001000) == 32'h0);
  assign _zz_85 = {(((decode_INSTRUCTION & _zz_469) == 32'h00100050) != 1'b0),{(_zz_92 != 1'b0),{({_zz_470,_zz_471} != 2'b00),{(_zz_472 != _zz_473),{_zz_474,{_zz_475,_zz_476}}}}}};
  assign _zz_94 = _zz_85[3 : 2];
  assign _zz_43 = _zz_94;
  assign _zz_95 = _zz_85[8 : 7];
  assign _zz_42 = _zz_95;
  assign _zz_96 = _zz_85[10 : 9];
  assign _zz_41 = _zz_96;
  assign _zz_97 = _zz_85[24 : 23];
  assign _zz_40 = _zz_97;
  assign _zz_98 = _zz_85[26 : 25];
  assign _zz_39 = _zz_98;
  assign _zz_99 = _zz_85[33 : 32];
  assign _zz_38 = _zz_99;
  assign _zz_100 = _zz_85[35 : 34];
  assign _zz_37 = _zz_100;
  assign decodeExceptionPort_valid = (decode_arbitration_isValid && (! decode_LEGAL_INSTRUCTION));
  assign decodeExceptionPort_payload_code = 4'b0010;
  assign decodeExceptionPort_payload_badAddr = decode_INSTRUCTION;
  assign decode_RegFilePlugin_regFileReadAddress1 = decode_INSTRUCTION[19 : 15];
  assign decode_RegFilePlugin_regFileReadAddress2 = decode_INSTRUCTION[24 : 20];
  assign decode_RegFilePlugin_rs1Data = _zz_205;
  assign decode_RegFilePlugin_rs2Data = _zz_206;
  always @ (*) begin
    lastStageRegFileWrite_valid = (_zz_35 && writeBack_arbitration_isFiring);
    if(_zz_101)begin
      lastStageRegFileWrite_valid = 1'b1;
    end
  end

  always @ (*) begin
    lastStageRegFileWrite_payload_address = _zz_34[11 : 7];
    if(_zz_101)begin
      lastStageRegFileWrite_payload_address = 5'h0;
    end
  end

  always @ (*) begin
    lastStageRegFileWrite_payload_data = _zz_44;
    if(_zz_101)begin
      lastStageRegFileWrite_payload_data = 32'h0;
    end
  end

  always @ (*) begin
    case(execute_ALU_BITWISE_CTRL)
      `AluBitwiseCtrlEnum_defaultEncoding_AND_1 : begin
        execute_IntAluPlugin_bitwise = (execute_SRC1 & execute_SRC2);
      end
      `AluBitwiseCtrlEnum_defaultEncoding_OR_1 : begin
        execute_IntAluPlugin_bitwise = (execute_SRC1 | execute_SRC2);
      end
      default : begin
        execute_IntAluPlugin_bitwise = (execute_SRC1 ^ execute_SRC2);
      end
    endcase
  end

  always @ (*) begin
    case(execute_ALU_CTRL)
      `AluCtrlEnum_defaultEncoding_BITWISE : begin
        _zz_102 = execute_IntAluPlugin_bitwise;
      end
      `AluCtrlEnum_defaultEncoding_SLT_SLTU : begin
        _zz_102 = {31'd0, _zz_363};
      end
      default : begin
        _zz_102 = execute_SRC_ADD_SUB;
      end
    endcase
  end

  always @ (*) begin
    case(decode_SRC1_CTRL)
      `Src1CtrlEnum_defaultEncoding_RS : begin
        _zz_103 = _zz_30;
      end
      `Src1CtrlEnum_defaultEncoding_PC_INCREMENT : begin
        _zz_103 = {29'd0, _zz_364};
      end
      `Src1CtrlEnum_defaultEncoding_IMU : begin
        _zz_103 = {decode_INSTRUCTION[31 : 12],12'h0};
      end
      default : begin
        _zz_103 = {27'd0, _zz_365};
      end
    endcase
  end

  assign _zz_104 = _zz_366[11];
  always @ (*) begin
    _zz_105[19] = _zz_104;
    _zz_105[18] = _zz_104;
    _zz_105[17] = _zz_104;
    _zz_105[16] = _zz_104;
    _zz_105[15] = _zz_104;
    _zz_105[14] = _zz_104;
    _zz_105[13] = _zz_104;
    _zz_105[12] = _zz_104;
    _zz_105[11] = _zz_104;
    _zz_105[10] = _zz_104;
    _zz_105[9] = _zz_104;
    _zz_105[8] = _zz_104;
    _zz_105[7] = _zz_104;
    _zz_105[6] = _zz_104;
    _zz_105[5] = _zz_104;
    _zz_105[4] = _zz_104;
    _zz_105[3] = _zz_104;
    _zz_105[2] = _zz_104;
    _zz_105[1] = _zz_104;
    _zz_105[0] = _zz_104;
  end

  assign _zz_106 = _zz_367[11];
  always @ (*) begin
    _zz_107[19] = _zz_106;
    _zz_107[18] = _zz_106;
    _zz_107[17] = _zz_106;
    _zz_107[16] = _zz_106;
    _zz_107[15] = _zz_106;
    _zz_107[14] = _zz_106;
    _zz_107[13] = _zz_106;
    _zz_107[12] = _zz_106;
    _zz_107[11] = _zz_106;
    _zz_107[10] = _zz_106;
    _zz_107[9] = _zz_106;
    _zz_107[8] = _zz_106;
    _zz_107[7] = _zz_106;
    _zz_107[6] = _zz_106;
    _zz_107[5] = _zz_106;
    _zz_107[4] = _zz_106;
    _zz_107[3] = _zz_106;
    _zz_107[2] = _zz_106;
    _zz_107[1] = _zz_106;
    _zz_107[0] = _zz_106;
  end

  always @ (*) begin
    case(decode_SRC2_CTRL)
      `Src2CtrlEnum_defaultEncoding_RS : begin
        _zz_108 = _zz_28;
      end
      `Src2CtrlEnum_defaultEncoding_IMI : begin
        _zz_108 = {_zz_105,decode_INSTRUCTION[31 : 20]};
      end
      `Src2CtrlEnum_defaultEncoding_IMS : begin
        _zz_108 = {_zz_107,{decode_INSTRUCTION[31 : 25],decode_INSTRUCTION[11 : 7]}};
      end
      default : begin
        _zz_108 = _zz_27;
      end
    endcase
  end

  always @ (*) begin
    execute_SrcPlugin_addSub = _zz_368;
    if(execute_SRC2_FORCE_ZERO)begin
      execute_SrcPlugin_addSub = execute_SRC1;
    end
  end

  assign execute_SrcPlugin_less = ((execute_SRC1[31] == execute_SRC2[31]) ? execute_SrcPlugin_addSub[31] : (execute_SRC_LESS_UNSIGNED ? execute_SRC2[31] : execute_SRC1[31]));
  assign execute_FullBarrelShifterPlugin_amplitude = execute_SRC2[4 : 0];
  always @ (*) begin
    _zz_109[0] = execute_SRC1[31];
    _zz_109[1] = execute_SRC1[30];
    _zz_109[2] = execute_SRC1[29];
    _zz_109[3] = execute_SRC1[28];
    _zz_109[4] = execute_SRC1[27];
    _zz_109[5] = execute_SRC1[26];
    _zz_109[6] = execute_SRC1[25];
    _zz_109[7] = execute_SRC1[24];
    _zz_109[8] = execute_SRC1[23];
    _zz_109[9] = execute_SRC1[22];
    _zz_109[10] = execute_SRC1[21];
    _zz_109[11] = execute_SRC1[20];
    _zz_109[12] = execute_SRC1[19];
    _zz_109[13] = execute_SRC1[18];
    _zz_109[14] = execute_SRC1[17];
    _zz_109[15] = execute_SRC1[16];
    _zz_109[16] = execute_SRC1[15];
    _zz_109[17] = execute_SRC1[14];
    _zz_109[18] = execute_SRC1[13];
    _zz_109[19] = execute_SRC1[12];
    _zz_109[20] = execute_SRC1[11];
    _zz_109[21] = execute_SRC1[10];
    _zz_109[22] = execute_SRC1[9];
    _zz_109[23] = execute_SRC1[8];
    _zz_109[24] = execute_SRC1[7];
    _zz_109[25] = execute_SRC1[6];
    _zz_109[26] = execute_SRC1[5];
    _zz_109[27] = execute_SRC1[4];
    _zz_109[28] = execute_SRC1[3];
    _zz_109[29] = execute_SRC1[2];
    _zz_109[30] = execute_SRC1[1];
    _zz_109[31] = execute_SRC1[0];
  end

  assign execute_FullBarrelShifterPlugin_reversed = ((execute_SHIFT_CTRL == `ShiftCtrlEnum_defaultEncoding_SLL_1) ? _zz_109 : execute_SRC1);
  always @ (*) begin
    _zz_110[0] = execute_SHIFT_RIGHT[31];
    _zz_110[1] = execute_SHIFT_RIGHT[30];
    _zz_110[2] = execute_SHIFT_RIGHT[29];
    _zz_110[3] = execute_SHIFT_RIGHT[28];
    _zz_110[4] = execute_SHIFT_RIGHT[27];
    _zz_110[5] = execute_SHIFT_RIGHT[26];
    _zz_110[6] = execute_SHIFT_RIGHT[25];
    _zz_110[7] = execute_SHIFT_RIGHT[24];
    _zz_110[8] = execute_SHIFT_RIGHT[23];
    _zz_110[9] = execute_SHIFT_RIGHT[22];
    _zz_110[10] = execute_SHIFT_RIGHT[21];
    _zz_110[11] = execute_SHIFT_RIGHT[20];
    _zz_110[12] = execute_SHIFT_RIGHT[19];
    _zz_110[13] = execute_SHIFT_RIGHT[18];
    _zz_110[14] = execute_SHIFT_RIGHT[17];
    _zz_110[15] = execute_SHIFT_RIGHT[16];
    _zz_110[16] = execute_SHIFT_RIGHT[15];
    _zz_110[17] = execute_SHIFT_RIGHT[14];
    _zz_110[18] = execute_SHIFT_RIGHT[13];
    _zz_110[19] = execute_SHIFT_RIGHT[12];
    _zz_110[20] = execute_SHIFT_RIGHT[11];
    _zz_110[21] = execute_SHIFT_RIGHT[10];
    _zz_110[22] = execute_SHIFT_RIGHT[9];
    _zz_110[23] = execute_SHIFT_RIGHT[8];
    _zz_110[24] = execute_SHIFT_RIGHT[7];
    _zz_110[25] = execute_SHIFT_RIGHT[6];
    _zz_110[26] = execute_SHIFT_RIGHT[5];
    _zz_110[27] = execute_SHIFT_RIGHT[4];
    _zz_110[28] = execute_SHIFT_RIGHT[3];
    _zz_110[29] = execute_SHIFT_RIGHT[2];
    _zz_110[30] = execute_SHIFT_RIGHT[1];
    _zz_110[31] = execute_SHIFT_RIGHT[0];
  end

  always @ (*) begin
    _zz_111 = 1'b0;
    if(_zz_265)begin
      if(_zz_266)begin
        if(_zz_116)begin
          _zz_111 = 1'b1;
        end
      end
    end
    if(_zz_267)begin
      if(_zz_268)begin
        if(_zz_118)begin
          _zz_111 = 1'b1;
        end
      end
    end
    if(_zz_269)begin
      if(_zz_270)begin
        if(_zz_120)begin
          _zz_111 = 1'b1;
        end
      end
    end
    if((! decode_RS1_USE))begin
      _zz_111 = 1'b0;
    end
  end

  always @ (*) begin
    _zz_112 = 1'b0;
    if(_zz_265)begin
      if(_zz_266)begin
        if(_zz_117)begin
          _zz_112 = 1'b1;
        end
      end
    end
    if(_zz_267)begin
      if(_zz_268)begin
        if(_zz_119)begin
          _zz_112 = 1'b1;
        end
      end
    end
    if(_zz_269)begin
      if(_zz_270)begin
        if(_zz_121)begin
          _zz_112 = 1'b1;
        end
      end
    end
    if((! decode_RS2_USE))begin
      _zz_112 = 1'b0;
    end
  end

  assign _zz_116 = (writeBack_INSTRUCTION[11 : 7] == decode_INSTRUCTION[19 : 15]);
  assign _zz_117 = (writeBack_INSTRUCTION[11 : 7] == decode_INSTRUCTION[24 : 20]);
  assign _zz_118 = (memory_INSTRUCTION[11 : 7] == decode_INSTRUCTION[19 : 15]);
  assign _zz_119 = (memory_INSTRUCTION[11 : 7] == decode_INSTRUCTION[24 : 20]);
  assign _zz_120 = (execute_INSTRUCTION[11 : 7] == decode_INSTRUCTION[19 : 15]);
  assign _zz_121 = (execute_INSTRUCTION[11 : 7] == decode_INSTRUCTION[24 : 20]);
  assign execute_MulPlugin_a = execute_RS1;
  assign execute_MulPlugin_b = execute_RS2;
  always @ (*) begin
    case(_zz_271)
      2'b01 : begin
        execute_MulPlugin_aSigned = 1'b1;
      end
      2'b10 : begin
        execute_MulPlugin_aSigned = 1'b1;
      end
      default : begin
        execute_MulPlugin_aSigned = 1'b0;
      end
    endcase
  end

  always @ (*) begin
    case(_zz_271)
      2'b01 : begin
        execute_MulPlugin_bSigned = 1'b1;
      end
      2'b10 : begin
        execute_MulPlugin_bSigned = 1'b0;
      end
      default : begin
        execute_MulPlugin_bSigned = 1'b0;
      end
    endcase
  end

  assign execute_MulPlugin_aULow = execute_MulPlugin_a[15 : 0];
  assign execute_MulPlugin_bULow = execute_MulPlugin_b[15 : 0];
  assign execute_MulPlugin_aSLow = {1'b0,execute_MulPlugin_a[15 : 0]};
  assign execute_MulPlugin_bSLow = {1'b0,execute_MulPlugin_b[15 : 0]};
  assign execute_MulPlugin_aHigh = {(execute_MulPlugin_aSigned && execute_MulPlugin_a[31]),execute_MulPlugin_a[31 : 16]};
  assign execute_MulPlugin_bHigh = {(execute_MulPlugin_bSigned && execute_MulPlugin_b[31]),execute_MulPlugin_b[31 : 16]};
  assign writeBack_MulPlugin_result = ($signed(_zz_375) + $signed(_zz_376));
  assign memory_MulDivIterativePlugin_frontendOk = 1'b1;
  always @ (*) begin
    memory_MulDivIterativePlugin_div_counter_willIncrement = 1'b0;
    if(_zz_240)begin
      if(_zz_272)begin
        memory_MulDivIterativePlugin_div_counter_willIncrement = 1'b1;
      end
    end
  end

  always @ (*) begin
    memory_MulDivIterativePlugin_div_counter_willClear = 1'b0;
    if(_zz_273)begin
      memory_MulDivIterativePlugin_div_counter_willClear = 1'b1;
    end
  end

  assign memory_MulDivIterativePlugin_div_counter_willOverflowIfInc = (memory_MulDivIterativePlugin_div_counter_value == 6'h21);
  assign memory_MulDivIterativePlugin_div_counter_willOverflow = (memory_MulDivIterativePlugin_div_counter_willOverflowIfInc && memory_MulDivIterativePlugin_div_counter_willIncrement);
  always @ (*) begin
    if(memory_MulDivIterativePlugin_div_counter_willOverflow)begin
      memory_MulDivIterativePlugin_div_counter_valueNext = 6'h0;
    end else begin
      memory_MulDivIterativePlugin_div_counter_valueNext = (memory_MulDivIterativePlugin_div_counter_value + _zz_380);
    end
    if(memory_MulDivIterativePlugin_div_counter_willClear)begin
      memory_MulDivIterativePlugin_div_counter_valueNext = 6'h0;
    end
  end

  assign _zz_122 = memory_MulDivIterativePlugin_rs1[31 : 0];
  assign memory_MulDivIterativePlugin_div_stage_0_remainderShifted = {memory_MulDivIterativePlugin_accumulator[31 : 0],_zz_122[31]};
  assign memory_MulDivIterativePlugin_div_stage_0_remainderMinusDenominator = (memory_MulDivIterativePlugin_div_stage_0_remainderShifted - _zz_381);
  assign memory_MulDivIterativePlugin_div_stage_0_outRemainder = ((! memory_MulDivIterativePlugin_div_stage_0_remainderMinusDenominator[32]) ? _zz_382 : _zz_383);
  assign memory_MulDivIterativePlugin_div_stage_0_outNumerator = _zz_384[31:0];
  assign _zz_123 = (memory_INSTRUCTION[13] ? memory_MulDivIterativePlugin_accumulator[31 : 0] : memory_MulDivIterativePlugin_rs1[31 : 0]);
  assign _zz_124 = (execute_RS2[31] && execute_IS_RS2_SIGNED);
  assign _zz_125 = (1'b0 || ((execute_IS_DIV && execute_RS1[31]) && execute_IS_RS1_SIGNED));
  always @ (*) begin
    _zz_126[32] = (execute_IS_RS1_SIGNED && execute_RS1[31]);
    _zz_126[31 : 0] = execute_RS1;
  end

  always @ (*) begin
    CsrPlugin_privilege = _zz_127;
    if(CsrPlugin_forceMachineWire)begin
      CsrPlugin_privilege = 2'b11;
    end
  end

  assign CsrPlugin_misa_base = 2'b01;
  assign CsrPlugin_misa_extensions = 26'h0041101;
  assign CsrPlugin_sip_SEIP_OR = (CsrPlugin_sip_SEIP_SOFT || CsrPlugin_sip_SEIP_INPUT);
  always @ (*) begin
    CsrPlugin_redoInterface_valid = 1'b0;
    if(execute_CsrPlugin_csr_384)begin
      if(execute_CsrPlugin_writeInstruction)begin
        CsrPlugin_redoInterface_valid = 1'b1;
      end
    end
  end

  assign CsrPlugin_redoInterface_payload = decode_PC;
  assign _zz_128 = (CsrPlugin_sip_STIP && CsrPlugin_sie_STIE);
  assign _zz_129 = (CsrPlugin_sip_SSIP && CsrPlugin_sie_SSIE);
  assign _zz_130 = (CsrPlugin_sip_SEIP_OR && CsrPlugin_sie_SEIE);
  assign _zz_131 = (CsrPlugin_mip_MTIP && CsrPlugin_mie_MTIE);
  assign _zz_132 = (CsrPlugin_mip_MSIP && CsrPlugin_mie_MSIE);
  assign _zz_133 = (CsrPlugin_mip_MEIP && CsrPlugin_mie_MEIE);
  always @ (*) begin
    CsrPlugin_exceptionPortCtrl_exceptionTargetPrivilegeUncapped = 2'b11;
    case(CsrPlugin_exceptionPortCtrl_exceptionContext_code)
      4'b0000 : begin
        if(((1'b1 && CsrPlugin_medeleg_IAM) && (! 1'b0)))begin
          CsrPlugin_exceptionPortCtrl_exceptionTargetPrivilegeUncapped = 2'b01;
        end
      end
      4'b0001 : begin
        if(((1'b1 && CsrPlugin_medeleg_IAF) && (! 1'b0)))begin
          CsrPlugin_exceptionPortCtrl_exceptionTargetPrivilegeUncapped = 2'b01;
        end
      end
      4'b0010 : begin
        if(((1'b1 && CsrPlugin_medeleg_II) && (! 1'b0)))begin
          CsrPlugin_exceptionPortCtrl_exceptionTargetPrivilegeUncapped = 2'b01;
        end
      end
      4'b0100 : begin
        if(((1'b1 && CsrPlugin_medeleg_LAM) && (! 1'b0)))begin
          CsrPlugin_exceptionPortCtrl_exceptionTargetPrivilegeUncapped = 2'b01;
        end
      end
      4'b0101 : begin
        if(((1'b1 && CsrPlugin_medeleg_LAF) && (! 1'b0)))begin
          CsrPlugin_exceptionPortCtrl_exceptionTargetPrivilegeUncapped = 2'b01;
        end
      end
      4'b0110 : begin
        if(((1'b1 && CsrPlugin_medeleg_SAM) && (! 1'b0)))begin
          CsrPlugin_exceptionPortCtrl_exceptionTargetPrivilegeUncapped = 2'b01;
        end
      end
      4'b0111 : begin
        if(((1'b1 && CsrPlugin_medeleg_SAF) && (! 1'b0)))begin
          CsrPlugin_exceptionPortCtrl_exceptionTargetPrivilegeUncapped = 2'b01;
        end
      end
      4'b1000 : begin
        if(((1'b1 && CsrPlugin_medeleg_EU) && (! 1'b0)))begin
          CsrPlugin_exceptionPortCtrl_exceptionTargetPrivilegeUncapped = 2'b01;
        end
      end
      4'b1001 : begin
        if(((1'b1 && CsrPlugin_medeleg_ES) && (! 1'b0)))begin
          CsrPlugin_exceptionPortCtrl_exceptionTargetPrivilegeUncapped = 2'b01;
        end
      end
      4'b1100 : begin
        if(((1'b1 && CsrPlugin_medeleg_IPF) && (! 1'b0)))begin
          CsrPlugin_exceptionPortCtrl_exceptionTargetPrivilegeUncapped = 2'b01;
        end
      end
      4'b1101 : begin
        if(((1'b1 && CsrPlugin_medeleg_LPF) && (! 1'b0)))begin
          CsrPlugin_exceptionPortCtrl_exceptionTargetPrivilegeUncapped = 2'b01;
        end
      end
      4'b1111 : begin
        if(((1'b1 && CsrPlugin_medeleg_SPF) && (! 1'b0)))begin
          CsrPlugin_exceptionPortCtrl_exceptionTargetPrivilegeUncapped = 2'b01;
        end
      end
      default : begin
      end
    endcase
  end

  assign CsrPlugin_exceptionPortCtrl_exceptionTargetPrivilege = ((CsrPlugin_privilege < CsrPlugin_exceptionPortCtrl_exceptionTargetPrivilegeUncapped) ? CsrPlugin_exceptionPortCtrl_exceptionTargetPrivilegeUncapped : CsrPlugin_privilege);
  assign _zz_134 = {decodeExceptionPort_valid,IBusCachedPlugin_decodeExceptionPort_valid};
  assign _zz_135 = _zz_394[0];
  always @ (*) begin
    CsrPlugin_exceptionPortCtrl_exceptionValids_decode = CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_decode;
    if(_zz_250)begin
      CsrPlugin_exceptionPortCtrl_exceptionValids_decode = 1'b1;
    end
    if(decode_arbitration_isFlushed)begin
      CsrPlugin_exceptionPortCtrl_exceptionValids_decode = 1'b0;
    end
  end

  always @ (*) begin
    CsrPlugin_exceptionPortCtrl_exceptionValids_execute = CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_execute;
    if(CsrPlugin_selfException_valid)begin
      CsrPlugin_exceptionPortCtrl_exceptionValids_execute = 1'b1;
    end
    if(execute_arbitration_isFlushed)begin
      CsrPlugin_exceptionPortCtrl_exceptionValids_execute = 1'b0;
    end
  end

  always @ (*) begin
    CsrPlugin_exceptionPortCtrl_exceptionValids_memory = CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_memory;
    if(BranchPlugin_branchExceptionPort_valid)begin
      CsrPlugin_exceptionPortCtrl_exceptionValids_memory = 1'b1;
    end
    if(memory_arbitration_isFlushed)begin
      CsrPlugin_exceptionPortCtrl_exceptionValids_memory = 1'b0;
    end
  end

  always @ (*) begin
    CsrPlugin_exceptionPortCtrl_exceptionValids_writeBack = CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_writeBack;
    if(DBusCachedPlugin_exceptionBus_valid)begin
      CsrPlugin_exceptionPortCtrl_exceptionValids_writeBack = 1'b1;
    end
    if(writeBack_arbitration_isFlushed)begin
      CsrPlugin_exceptionPortCtrl_exceptionValids_writeBack = 1'b0;
    end
  end

  assign CsrPlugin_exceptionPendings_0 = CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_decode;
  assign CsrPlugin_exceptionPendings_1 = CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_execute;
  assign CsrPlugin_exceptionPendings_2 = CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_memory;
  assign CsrPlugin_exceptionPendings_3 = CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_writeBack;
  assign CsrPlugin_exception = (CsrPlugin_exceptionPortCtrl_exceptionValids_writeBack && CsrPlugin_allowException);
  assign CsrPlugin_pipelineLiberator_active = ((CsrPlugin_interrupt_valid && CsrPlugin_allowInterrupts) && decode_arbitration_isValid);
  always @ (*) begin
    CsrPlugin_pipelineLiberator_done = CsrPlugin_pipelineLiberator_pcValids_2;
    if(({CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_writeBack,{CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_memory,CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_execute}} != 3'b000))begin
      CsrPlugin_pipelineLiberator_done = 1'b0;
    end
    if(CsrPlugin_hadException)begin
      CsrPlugin_pipelineLiberator_done = 1'b0;
    end
  end

  assign CsrPlugin_interruptJump = ((CsrPlugin_interrupt_valid && CsrPlugin_pipelineLiberator_done) && CsrPlugin_allowInterrupts);
  always @ (*) begin
    CsrPlugin_targetPrivilege = CsrPlugin_interrupt_targetPrivilege;
    if(CsrPlugin_hadException)begin
      CsrPlugin_targetPrivilege = CsrPlugin_exceptionPortCtrl_exceptionTargetPrivilege;
    end
  end

  always @ (*) begin
    CsrPlugin_trapCause = CsrPlugin_interrupt_code;
    if(CsrPlugin_hadException)begin
      CsrPlugin_trapCause = CsrPlugin_exceptionPortCtrl_exceptionContext_code;
    end
  end

  always @ (*) begin
    CsrPlugin_xtvec_mode = 2'bxx;
    case(CsrPlugin_targetPrivilege)
      2'b01 : begin
        CsrPlugin_xtvec_mode = CsrPlugin_stvec_mode;
      end
      2'b11 : begin
        CsrPlugin_xtvec_mode = CsrPlugin_mtvec_mode;
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    CsrPlugin_xtvec_base = 30'h0;
    case(CsrPlugin_targetPrivilege)
      2'b01 : begin
        CsrPlugin_xtvec_base = CsrPlugin_stvec_base;
      end
      2'b11 : begin
        CsrPlugin_xtvec_base = CsrPlugin_mtvec_base;
      end
      default : begin
      end
    endcase
  end

  assign contextSwitching = CsrPlugin_jumpInterface_valid;
  assign execute_CsrPlugin_blockedBySideEffects = (({writeBack_arbitration_isValid,memory_arbitration_isValid} != 2'b00) || 1'b0);
  always @ (*) begin
    execute_CsrPlugin_illegalAccess = 1'b1;
    if(execute_CsrPlugin_csr_768)begin
      execute_CsrPlugin_illegalAccess = 1'b0;
    end
    if(execute_CsrPlugin_csr_256)begin
      execute_CsrPlugin_illegalAccess = 1'b0;
    end
    if(execute_CsrPlugin_csr_384)begin
      execute_CsrPlugin_illegalAccess = 1'b0;
    end
    if(execute_CsrPlugin_csr_3857)begin
      if(execute_CSR_READ_OPCODE)begin
        execute_CsrPlugin_illegalAccess = 1'b0;
      end
    end
    if(execute_CsrPlugin_csr_3858)begin
      if(execute_CSR_READ_OPCODE)begin
        execute_CsrPlugin_illegalAccess = 1'b0;
      end
    end
    if(execute_CsrPlugin_csr_3859)begin
      if(execute_CSR_READ_OPCODE)begin
        execute_CsrPlugin_illegalAccess = 1'b0;
      end
    end
    if(execute_CsrPlugin_csr_3860)begin
      if(execute_CSR_READ_OPCODE)begin
        execute_CsrPlugin_illegalAccess = 1'b0;
      end
    end
    if(execute_CsrPlugin_csr_769)begin
      if(execute_CSR_READ_OPCODE)begin
        execute_CsrPlugin_illegalAccess = 1'b0;
      end
    end
    if(execute_CsrPlugin_csr_836)begin
      execute_CsrPlugin_illegalAccess = 1'b0;
    end
    if(execute_CsrPlugin_csr_772)begin
      execute_CsrPlugin_illegalAccess = 1'b0;
    end
    if(execute_CsrPlugin_csr_773)begin
      execute_CsrPlugin_illegalAccess = 1'b0;
    end
    if(execute_CsrPlugin_csr_833)begin
      execute_CsrPlugin_illegalAccess = 1'b0;
    end
    if(execute_CsrPlugin_csr_832)begin
      execute_CsrPlugin_illegalAccess = 1'b0;
    end
    if(execute_CsrPlugin_csr_834)begin
      if(execute_CSR_READ_OPCODE)begin
        execute_CsrPlugin_illegalAccess = 1'b0;
      end
    end
    if(execute_CsrPlugin_csr_835)begin
      if(execute_CSR_READ_OPCODE)begin
        execute_CsrPlugin_illegalAccess = 1'b0;
      end
    end
    if(execute_CsrPlugin_csr_770)begin
      execute_CsrPlugin_illegalAccess = 1'b0;
    end
    if(execute_CsrPlugin_csr_771)begin
      execute_CsrPlugin_illegalAccess = 1'b0;
    end
    if(execute_CsrPlugin_csr_3073)begin
      if(execute_CSR_READ_OPCODE)begin
        execute_CsrPlugin_illegalAccess = 1'b0;
      end
    end
    if(execute_CsrPlugin_csr_3201)begin
      if(execute_CSR_READ_OPCODE)begin
        execute_CsrPlugin_illegalAccess = 1'b0;
      end
    end
    if(execute_CsrPlugin_csr_324)begin
      execute_CsrPlugin_illegalAccess = 1'b0;
    end
    if(execute_CsrPlugin_csr_260)begin
      execute_CsrPlugin_illegalAccess = 1'b0;
    end
    if(execute_CsrPlugin_csr_261)begin
      execute_CsrPlugin_illegalAccess = 1'b0;
    end
    if(execute_CsrPlugin_csr_321)begin
      execute_CsrPlugin_illegalAccess = 1'b0;
    end
    if(execute_CsrPlugin_csr_320)begin
      execute_CsrPlugin_illegalAccess = 1'b0;
    end
    if(execute_CsrPlugin_csr_322)begin
      execute_CsrPlugin_illegalAccess = 1'b0;
    end
    if(execute_CsrPlugin_csr_323)begin
      execute_CsrPlugin_illegalAccess = 1'b0;
    end
    if(_zz_274)begin
      execute_CsrPlugin_illegalAccess = 1'b1;
    end
    if(((! execute_arbitration_isValid) || (! execute_IS_CSR)))begin
      execute_CsrPlugin_illegalAccess = 1'b0;
    end
  end

  always @ (*) begin
    execute_CsrPlugin_illegalInstruction = 1'b0;
    if((execute_arbitration_isValid && (execute_ENV_CTRL == `EnvCtrlEnum_defaultEncoding_XRET)))begin
      if((CsrPlugin_privilege < execute_INSTRUCTION[29 : 28]))begin
        execute_CsrPlugin_illegalInstruction = 1'b1;
      end
    end
  end

  always @ (*) begin
    CsrPlugin_selfException_valid = 1'b0;
    if(_zz_275)begin
      CsrPlugin_selfException_valid = 1'b1;
    end
    if(_zz_276)begin
      CsrPlugin_selfException_valid = 1'b1;
    end
  end

  always @ (*) begin
    CsrPlugin_selfException_payload_code = 4'bxxxx;
    if(_zz_275)begin
      CsrPlugin_selfException_payload_code = 4'b0010;
    end
    if(_zz_276)begin
      case(CsrPlugin_privilege)
        2'b00 : begin
          CsrPlugin_selfException_payload_code = 4'b1000;
        end
        2'b01 : begin
          CsrPlugin_selfException_payload_code = 4'b1001;
        end
        default : begin
          CsrPlugin_selfException_payload_code = 4'b1011;
        end
      endcase
    end
  end

  assign CsrPlugin_selfException_payload_badAddr = execute_INSTRUCTION;
  always @ (*) begin
    execute_CsrPlugin_writeInstruction = ((execute_arbitration_isValid && execute_IS_CSR) && execute_CSR_WRITE_OPCODE);
    if(_zz_274)begin
      execute_CsrPlugin_writeInstruction = 1'b0;
    end
  end

  always @ (*) begin
    execute_CsrPlugin_readInstruction = ((execute_arbitration_isValid && execute_IS_CSR) && execute_CSR_READ_OPCODE);
    if(_zz_274)begin
      execute_CsrPlugin_readInstruction = 1'b0;
    end
  end

  assign execute_CsrPlugin_writeEnable = (execute_CsrPlugin_writeInstruction && (! execute_arbitration_isStuck));
  assign execute_CsrPlugin_readEnable = (execute_CsrPlugin_readInstruction && (! execute_arbitration_isStuck));
  always @ (*) begin
    execute_CsrPlugin_readToWriteData = execute_CsrPlugin_readData;
    if(execute_CsrPlugin_csr_836)begin
      execute_CsrPlugin_readToWriteData[9 : 9] = CsrPlugin_sip_SEIP_SOFT;
    end
    if(execute_CsrPlugin_csr_324)begin
      execute_CsrPlugin_readToWriteData[9 : 9] = CsrPlugin_sip_SEIP_SOFT;
    end
  end

  always @ (*) begin
    case(_zz_301)
      1'b0 : begin
        execute_CsrPlugin_writeData = execute_SRC1;
      end
      default : begin
        execute_CsrPlugin_writeData = (execute_INSTRUCTION[12] ? (execute_CsrPlugin_readToWriteData & (~ execute_SRC1)) : (execute_CsrPlugin_readToWriteData | execute_SRC1));
      end
    endcase
  end

  assign execute_CsrPlugin_csrAddress = execute_INSTRUCTION[31 : 20];
  assign execute_BranchPlugin_eq = (execute_SRC1 == execute_SRC2);
  assign _zz_136 = execute_INSTRUCTION[14 : 12];
  always @ (*) begin
    if((_zz_136 == 3'b000)) begin
        _zz_137 = execute_BranchPlugin_eq;
    end else if((_zz_136 == 3'b001)) begin
        _zz_137 = (! execute_BranchPlugin_eq);
    end else if((((_zz_136 & 3'b101) == 3'b101))) begin
        _zz_137 = (! execute_SRC_LESS);
    end else begin
        _zz_137 = execute_SRC_LESS;
    end
  end

  always @ (*) begin
    case(execute_BRANCH_CTRL)
      `BranchCtrlEnum_defaultEncoding_INC : begin
        _zz_138 = 1'b0;
      end
      `BranchCtrlEnum_defaultEncoding_JAL : begin
        _zz_138 = 1'b1;
      end
      `BranchCtrlEnum_defaultEncoding_JALR : begin
        _zz_138 = 1'b1;
      end
      default : begin
        _zz_138 = _zz_137;
      end
    endcase
  end

  assign execute_BranchPlugin_branch_src1 = ((execute_BRANCH_CTRL == `BranchCtrlEnum_defaultEncoding_JALR) ? execute_RS1 : execute_PC);
  assign _zz_139 = _zz_396[19];
  always @ (*) begin
    _zz_140[10] = _zz_139;
    _zz_140[9] = _zz_139;
    _zz_140[8] = _zz_139;
    _zz_140[7] = _zz_139;
    _zz_140[6] = _zz_139;
    _zz_140[5] = _zz_139;
    _zz_140[4] = _zz_139;
    _zz_140[3] = _zz_139;
    _zz_140[2] = _zz_139;
    _zz_140[1] = _zz_139;
    _zz_140[0] = _zz_139;
  end

  assign _zz_141 = _zz_397[11];
  always @ (*) begin
    _zz_142[19] = _zz_141;
    _zz_142[18] = _zz_141;
    _zz_142[17] = _zz_141;
    _zz_142[16] = _zz_141;
    _zz_142[15] = _zz_141;
    _zz_142[14] = _zz_141;
    _zz_142[13] = _zz_141;
    _zz_142[12] = _zz_141;
    _zz_142[11] = _zz_141;
    _zz_142[10] = _zz_141;
    _zz_142[9] = _zz_141;
    _zz_142[8] = _zz_141;
    _zz_142[7] = _zz_141;
    _zz_142[6] = _zz_141;
    _zz_142[5] = _zz_141;
    _zz_142[4] = _zz_141;
    _zz_142[3] = _zz_141;
    _zz_142[2] = _zz_141;
    _zz_142[1] = _zz_141;
    _zz_142[0] = _zz_141;
  end

  assign _zz_143 = _zz_398[11];
  always @ (*) begin
    _zz_144[18] = _zz_143;
    _zz_144[17] = _zz_143;
    _zz_144[16] = _zz_143;
    _zz_144[15] = _zz_143;
    _zz_144[14] = _zz_143;
    _zz_144[13] = _zz_143;
    _zz_144[12] = _zz_143;
    _zz_144[11] = _zz_143;
    _zz_144[10] = _zz_143;
    _zz_144[9] = _zz_143;
    _zz_144[8] = _zz_143;
    _zz_144[7] = _zz_143;
    _zz_144[6] = _zz_143;
    _zz_144[5] = _zz_143;
    _zz_144[4] = _zz_143;
    _zz_144[3] = _zz_143;
    _zz_144[2] = _zz_143;
    _zz_144[1] = _zz_143;
    _zz_144[0] = _zz_143;
  end

  always @ (*) begin
    case(execute_BRANCH_CTRL)
      `BranchCtrlEnum_defaultEncoding_JAL : begin
        _zz_145 = {{_zz_140,{{{execute_INSTRUCTION[31],execute_INSTRUCTION[19 : 12]},execute_INSTRUCTION[20]},execute_INSTRUCTION[30 : 21]}},1'b0};
      end
      `BranchCtrlEnum_defaultEncoding_JALR : begin
        _zz_145 = {_zz_142,execute_INSTRUCTION[31 : 20]};
      end
      default : begin
        _zz_145 = {{_zz_144,{{{execute_INSTRUCTION[31],execute_INSTRUCTION[7]},execute_INSTRUCTION[30 : 25]},execute_INSTRUCTION[11 : 8]}},1'b0};
      end
    endcase
  end

  assign execute_BranchPlugin_branch_src2 = _zz_145;
  assign execute_BranchPlugin_branchAdder = (execute_BranchPlugin_branch_src1 + execute_BranchPlugin_branch_src2);
  assign BranchPlugin_jumpInterface_valid = ((memory_arbitration_isValid && memory_BRANCH_DO) && (! 1'b0));
  assign BranchPlugin_jumpInterface_payload = memory_BRANCH_CALC;
  assign BranchPlugin_branchExceptionPort_valid = ((memory_arbitration_isValid && memory_BRANCH_DO) && BranchPlugin_jumpInterface_payload[1]);
  assign BranchPlugin_branchExceptionPort_payload_code = 4'b0000;
  assign BranchPlugin_branchExceptionPort_payload_badAddr = BranchPlugin_jumpInterface_payload;
  assign execute_AesPlugin_byteSel = execute_INSTRUCTION[29 : 28];
  assign execute_AesPlugin_bankSel = (execute_INSTRUCTION[25] && (! execute_INSTRUCTION[26]));
  assign execute_AesPlugin_romAddress = {execute_AesPlugin_bankSel,_zz_231};
  assign _zz_146 = (! memory_arbitration_isStuck);
  assign memory_AesPlugin_rom_data = _zz_207;
  assign memory_AesPlugin_rom_bytes_0 = memory_AesPlugin_rom_data[7 : 0];
  assign memory_AesPlugin_rom_bytes_1 = memory_AesPlugin_rom_data[15 : 8];
  assign memory_AesPlugin_rom_bytes_2 = memory_AesPlugin_rom_data[23 : 16];
  assign memory_AesPlugin_rom_bytes_3 = memory_AesPlugin_rom_data[31 : 24];
  assign memory_AesPlugin_rom_remap_0_0 = 2'b10;
  assign memory_AesPlugin_rom_remap_0_1 = 2'b00;
  assign memory_AesPlugin_rom_remap_0_2 = 2'b00;
  assign memory_AesPlugin_rom_remap_0_3 = 2'b01;
  assign memory_AesPlugin_rom_remap_1_0 = 2'b00;
  assign memory_AesPlugin_rom_remap_1_1 = 2'b00;
  assign memory_AesPlugin_rom_remap_1_2 = 2'b00;
  assign memory_AesPlugin_rom_remap_1_3 = 2'b00;
  assign memory_AesPlugin_rom_remap_2_0 = 2'b11;
  assign memory_AesPlugin_rom_remap_2_1 = 2'b10;
  assign memory_AesPlugin_rom_remap_2_2 = 2'b01;
  assign memory_AesPlugin_rom_remap_2_3 = 2'b00;
  assign memory_AesPlugin_rom_remap_3_0 = 2'b11;
  assign memory_AesPlugin_rom_remap_3_1 = 2'b11;
  assign memory_AesPlugin_rom_remap_3_2 = 2'b11;
  assign memory_AesPlugin_rom_remap_3_3 = 2'b11;
  assign memory_AesPlugin_rom_address = {memory_INSTRUCTION[25],memory_INSTRUCTION[26]};
  assign memory_AesPlugin_rom_output_0 = _zz_232;
  assign memory_AesPlugin_rom_output_1 = _zz_233;
  assign memory_AesPlugin_rom_output_2 = _zz_234;
  assign memory_AesPlugin_rom_output_3 = _zz_235;
  always @ (*) begin
    memory_AesPlugin_wordDesuffle_zero = 4'b0000;
    if(memory_INSTRUCTION[26])begin
      memory_AesPlugin_wordDesuffle_zero = 4'b1111;
      memory_AesPlugin_wordDesuffle_zero[memory_AesPlugin_wordDesuffle_byteSel] = 1'b0;
    end
  end

  assign memory_AesPlugin_wordDesuffle_byteSel = memory_INSTRUCTION[29 : 28];
  always @ (*) begin
    case(memory_AesPlugin_wordDesuffle_byteSel)
      2'b00 : begin
        memory_AesPlugin_wordDesuffle_sel_0 = memory_AesPlugin_rom_output_3;
      end
      2'b01 : begin
        memory_AesPlugin_wordDesuffle_sel_0 = memory_AesPlugin_rom_output_0;
      end
      2'b10 : begin
        memory_AesPlugin_wordDesuffle_sel_0 = memory_AesPlugin_rom_output_1;
      end
      default : begin
        memory_AesPlugin_wordDesuffle_sel_0 = memory_AesPlugin_rom_output_2;
      end
    endcase
  end

  always @ (*) begin
    case(memory_AesPlugin_wordDesuffle_byteSel)
      2'b00 : begin
        memory_AesPlugin_wordDesuffle_sel_1 = memory_AesPlugin_rom_output_2;
      end
      2'b01 : begin
        memory_AesPlugin_wordDesuffle_sel_1 = memory_AesPlugin_rom_output_3;
      end
      2'b10 : begin
        memory_AesPlugin_wordDesuffle_sel_1 = memory_AesPlugin_rom_output_0;
      end
      default : begin
        memory_AesPlugin_wordDesuffle_sel_1 = memory_AesPlugin_rom_output_1;
      end
    endcase
  end

  always @ (*) begin
    case(memory_AesPlugin_wordDesuffle_byteSel)
      2'b00 : begin
        memory_AesPlugin_wordDesuffle_sel_2 = memory_AesPlugin_rom_output_1;
      end
      2'b01 : begin
        memory_AesPlugin_wordDesuffle_sel_2 = memory_AesPlugin_rom_output_2;
      end
      2'b10 : begin
        memory_AesPlugin_wordDesuffle_sel_2 = memory_AesPlugin_rom_output_3;
      end
      default : begin
        memory_AesPlugin_wordDesuffle_sel_2 = memory_AesPlugin_rom_output_0;
      end
    endcase
  end

  always @ (*) begin
    case(memory_AesPlugin_wordDesuffle_byteSel)
      2'b00 : begin
        memory_AesPlugin_wordDesuffle_sel_3 = memory_AesPlugin_rom_output_0;
      end
      2'b01 : begin
        memory_AesPlugin_wordDesuffle_sel_3 = memory_AesPlugin_rom_output_1;
      end
      2'b10 : begin
        memory_AesPlugin_wordDesuffle_sel_3 = memory_AesPlugin_rom_output_2;
      end
      default : begin
        memory_AesPlugin_wordDesuffle_sel_3 = memory_AesPlugin_rom_output_3;
      end
    endcase
  end

  always @ (*) begin
    memory_AesPlugin_wordDesuffle_output_0 = _zz_236;
    if(memory_AesPlugin_wordDesuffle_zero[0])begin
      memory_AesPlugin_wordDesuffle_output_0 = 8'h0;
    end
  end

  always @ (*) begin
    memory_AesPlugin_wordDesuffle_output_1 = _zz_237;
    if(memory_AesPlugin_wordDesuffle_zero[1])begin
      memory_AesPlugin_wordDesuffle_output_1 = 8'h0;
    end
  end

  always @ (*) begin
    memory_AesPlugin_wordDesuffle_output_2 = _zz_238;
    if(memory_AesPlugin_wordDesuffle_zero[2])begin
      memory_AesPlugin_wordDesuffle_output_2 = 8'h0;
    end
  end

  always @ (*) begin
    memory_AesPlugin_wordDesuffle_output_3 = _zz_239;
    if(memory_AesPlugin_wordDesuffle_zero[3])begin
      memory_AesPlugin_wordDesuffle_output_3 = 8'h0;
    end
  end

  assign memory_AesPlugin_xored = ({memory_AesPlugin_wordDesuffle_output_3,{memory_AesPlugin_wordDesuffle_output_2,{memory_AesPlugin_wordDesuffle_output_1,memory_AesPlugin_wordDesuffle_output_0}}} ^ memory_RS1);
  always @ (*) begin
    debug_bus_cmd_ready = 1'b1;
    if(debug_bus_cmd_valid)begin
      case(_zz_277)
        6'h01 : begin
          if(debug_bus_cmd_payload_wr)begin
            debug_bus_cmd_ready = IBusCachedPlugin_injectionPort_ready;
          end
        end
        default : begin
        end
      endcase
    end
  end

  always @ (*) begin
    debug_bus_rsp_data = DebugPlugin_busReadDataReg;
    if((! _zz_147))begin
      debug_bus_rsp_data[0] = DebugPlugin_resetIt;
      debug_bus_rsp_data[1] = DebugPlugin_haltIt;
      debug_bus_rsp_data[2] = DebugPlugin_isPipBusy;
      debug_bus_rsp_data[3] = DebugPlugin_haltedByBreak;
      debug_bus_rsp_data[4] = DebugPlugin_stepIt;
    end
  end

  always @ (*) begin
    IBusCachedPlugin_injectionPort_valid = 1'b0;
    if(debug_bus_cmd_valid)begin
      case(_zz_277)
        6'h01 : begin
          if(debug_bus_cmd_payload_wr)begin
            IBusCachedPlugin_injectionPort_valid = 1'b1;
          end
        end
        default : begin
        end
      endcase
    end
  end

  assign IBusCachedPlugin_injectionPort_payload = debug_bus_cmd_payload_data;
  assign DebugPlugin_allowEBreak = (CsrPlugin_privilege == 2'b11);
  assign debug_resetOut = DebugPlugin_resetIt_regNext;
  assign _zz_31 = _zz_43;
  assign _zz_19 = decode_ALU_CTRL;
  assign _zz_17 = _zz_42;
  assign _zz_32 = decode_to_execute_ALU_CTRL;
  assign _zz_29 = _zz_41;
  assign _zz_16 = decode_ALU_BITWISE_CTRL;
  assign _zz_14 = _zz_40;
  assign _zz_33 = decode_to_execute_ALU_BITWISE_CTRL;
  assign _zz_13 = decode_SHIFT_CTRL;
  assign _zz_11 = _zz_39;
  assign _zz_26 = decode_to_execute_SHIFT_CTRL;
  assign _zz_10 = decode_ENV_CTRL;
  assign _zz_7 = execute_ENV_CTRL;
  assign _zz_5 = memory_ENV_CTRL;
  assign _zz_8 = _zz_38;
  assign _zz_22 = decode_to_execute_ENV_CTRL;
  assign _zz_21 = execute_to_memory_ENV_CTRL;
  assign _zz_23 = memory_to_writeBack_ENV_CTRL;
  assign _zz_3 = decode_BRANCH_CTRL;
  assign _zz_1 = _zz_37;
  assign _zz_20 = decode_to_execute_BRANCH_CTRL;
  assign decode_arbitration_isFlushed = (({writeBack_arbitration_flushNext,{memory_arbitration_flushNext,execute_arbitration_flushNext}} != 3'b000) || ({writeBack_arbitration_flushIt,{memory_arbitration_flushIt,{execute_arbitration_flushIt,decode_arbitration_flushIt}}} != 4'b0000));
  assign execute_arbitration_isFlushed = (({writeBack_arbitration_flushNext,memory_arbitration_flushNext} != 2'b00) || ({writeBack_arbitration_flushIt,{memory_arbitration_flushIt,execute_arbitration_flushIt}} != 3'b000));
  assign memory_arbitration_isFlushed = ((writeBack_arbitration_flushNext != 1'b0) || ({writeBack_arbitration_flushIt,memory_arbitration_flushIt} != 2'b00));
  assign writeBack_arbitration_isFlushed = (1'b0 || (writeBack_arbitration_flushIt != 1'b0));
  assign decode_arbitration_isStuckByOthers = (decode_arbitration_haltByOther || (((1'b0 || execute_arbitration_isStuck) || memory_arbitration_isStuck) || writeBack_arbitration_isStuck));
  assign decode_arbitration_isStuck = (decode_arbitration_haltItself || decode_arbitration_isStuckByOthers);
  assign decode_arbitration_isMoving = ((! decode_arbitration_isStuck) && (! decode_arbitration_removeIt));
  assign decode_arbitration_isFiring = ((decode_arbitration_isValid && (! decode_arbitration_isStuck)) && (! decode_arbitration_removeIt));
  assign execute_arbitration_isStuckByOthers = (execute_arbitration_haltByOther || ((1'b0 || memory_arbitration_isStuck) || writeBack_arbitration_isStuck));
  assign execute_arbitration_isStuck = (execute_arbitration_haltItself || execute_arbitration_isStuckByOthers);
  assign execute_arbitration_isMoving = ((! execute_arbitration_isStuck) && (! execute_arbitration_removeIt));
  assign execute_arbitration_isFiring = ((execute_arbitration_isValid && (! execute_arbitration_isStuck)) && (! execute_arbitration_removeIt));
  assign memory_arbitration_isStuckByOthers = (memory_arbitration_haltByOther || (1'b0 || writeBack_arbitration_isStuck));
  assign memory_arbitration_isStuck = (memory_arbitration_haltItself || memory_arbitration_isStuckByOthers);
  assign memory_arbitration_isMoving = ((! memory_arbitration_isStuck) && (! memory_arbitration_removeIt));
  assign memory_arbitration_isFiring = ((memory_arbitration_isValid && (! memory_arbitration_isStuck)) && (! memory_arbitration_removeIt));
  assign writeBack_arbitration_isStuckByOthers = (writeBack_arbitration_haltByOther || 1'b0);
  assign writeBack_arbitration_isStuck = (writeBack_arbitration_haltItself || writeBack_arbitration_isStuckByOthers);
  assign writeBack_arbitration_isMoving = ((! writeBack_arbitration_isStuck) && (! writeBack_arbitration_removeIt));
  assign writeBack_arbitration_isFiring = ((writeBack_arbitration_isValid && (! writeBack_arbitration_isStuck)) && (! writeBack_arbitration_removeIt));
  always @ (*) begin
    IBusCachedPlugin_injectionPort_ready = 1'b0;
    case(_zz_148)
      3'b100 : begin
        IBusCachedPlugin_injectionPort_ready = 1'b1;
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    _zz_149 = 32'h0;
    if(execute_CsrPlugin_csr_768)begin
      _zz_149[19 : 19] = MmuPlugin_status_mxr;
      _zz_149[18 : 18] = MmuPlugin_status_sum;
      _zz_149[17 : 17] = MmuPlugin_status_mprv;
      _zz_149[12 : 11] = CsrPlugin_mstatus_MPP;
      _zz_149[7 : 7] = CsrPlugin_mstatus_MPIE;
      _zz_149[3 : 3] = CsrPlugin_mstatus_MIE;
      _zz_149[8 : 8] = CsrPlugin_sstatus_SPP;
      _zz_149[5 : 5] = CsrPlugin_sstatus_SPIE;
      _zz_149[1 : 1] = CsrPlugin_sstatus_SIE;
    end
  end

  always @ (*) begin
    _zz_150 = 32'h0;
    if(execute_CsrPlugin_csr_256)begin
      _zz_150[19 : 19] = MmuPlugin_status_mxr;
      _zz_150[18 : 18] = MmuPlugin_status_sum;
      _zz_150[17 : 17] = MmuPlugin_status_mprv;
      _zz_150[8 : 8] = CsrPlugin_sstatus_SPP;
      _zz_150[5 : 5] = CsrPlugin_sstatus_SPIE;
      _zz_150[1 : 1] = CsrPlugin_sstatus_SIE;
    end
  end

  always @ (*) begin
    _zz_151 = 32'h0;
    if(execute_CsrPlugin_csr_384)begin
      _zz_151[31 : 31] = MmuPlugin_satp_mode;
      _zz_151[30 : 22] = MmuPlugin_satp_asid;
      _zz_151[19 : 0] = MmuPlugin_satp_ppn;
    end
  end

  always @ (*) begin
    _zz_152 = 32'h0;
    if(execute_CsrPlugin_csr_769)begin
      _zz_152[31 : 30] = CsrPlugin_misa_base;
      _zz_152[25 : 0] = CsrPlugin_misa_extensions;
    end
  end

  always @ (*) begin
    _zz_153 = 32'h0;
    if(execute_CsrPlugin_csr_836)begin
      _zz_153[11 : 11] = CsrPlugin_mip_MEIP;
      _zz_153[7 : 7] = CsrPlugin_mip_MTIP;
      _zz_153[3 : 3] = CsrPlugin_mip_MSIP;
      _zz_153[5 : 5] = CsrPlugin_sip_STIP;
      _zz_153[1 : 1] = CsrPlugin_sip_SSIP;
      _zz_153[9 : 9] = CsrPlugin_sip_SEIP_OR;
    end
  end

  always @ (*) begin
    _zz_154 = 32'h0;
    if(execute_CsrPlugin_csr_772)begin
      _zz_154[11 : 11] = CsrPlugin_mie_MEIE;
      _zz_154[7 : 7] = CsrPlugin_mie_MTIE;
      _zz_154[3 : 3] = CsrPlugin_mie_MSIE;
      _zz_154[9 : 9] = CsrPlugin_sie_SEIE;
      _zz_154[5 : 5] = CsrPlugin_sie_STIE;
      _zz_154[1 : 1] = CsrPlugin_sie_SSIE;
    end
  end

  always @ (*) begin
    _zz_155 = 32'h0;
    if(execute_CsrPlugin_csr_773)begin
      _zz_155[31 : 2] = CsrPlugin_mtvec_base;
      _zz_155[1 : 0] = CsrPlugin_mtvec_mode;
    end
  end

  always @ (*) begin
    _zz_156 = 32'h0;
    if(execute_CsrPlugin_csr_833)begin
      _zz_156[31 : 0] = CsrPlugin_mepc;
    end
  end

  always @ (*) begin
    _zz_157 = 32'h0;
    if(execute_CsrPlugin_csr_832)begin
      _zz_157[31 : 0] = CsrPlugin_mscratch;
    end
  end

  always @ (*) begin
    _zz_158 = 32'h0;
    if(execute_CsrPlugin_csr_834)begin
      _zz_158[31 : 31] = CsrPlugin_mcause_interrupt;
      _zz_158[3 : 0] = CsrPlugin_mcause_exceptionCode;
    end
  end

  always @ (*) begin
    _zz_159 = 32'h0;
    if(execute_CsrPlugin_csr_835)begin
      _zz_159[31 : 0] = CsrPlugin_mtval;
    end
  end

  always @ (*) begin
    _zz_160 = 32'h0;
    if(execute_CsrPlugin_csr_770)begin
      _zz_160[0 : 0] = CsrPlugin_medeleg_IAM;
      _zz_160[1 : 1] = CsrPlugin_medeleg_IAF;
      _zz_160[2 : 2] = CsrPlugin_medeleg_II;
      _zz_160[4 : 4] = CsrPlugin_medeleg_LAM;
      _zz_160[5 : 5] = CsrPlugin_medeleg_LAF;
      _zz_160[6 : 6] = CsrPlugin_medeleg_SAM;
      _zz_160[7 : 7] = CsrPlugin_medeleg_SAF;
      _zz_160[8 : 8] = CsrPlugin_medeleg_EU;
      _zz_160[9 : 9] = CsrPlugin_medeleg_ES;
      _zz_160[12 : 12] = CsrPlugin_medeleg_IPF;
      _zz_160[13 : 13] = CsrPlugin_medeleg_LPF;
      _zz_160[15 : 15] = CsrPlugin_medeleg_SPF;
    end
  end

  always @ (*) begin
    _zz_161 = 32'h0;
    if(execute_CsrPlugin_csr_771)begin
      _zz_161[9 : 9] = CsrPlugin_mideleg_SE;
      _zz_161[5 : 5] = CsrPlugin_mideleg_ST;
      _zz_161[1 : 1] = CsrPlugin_mideleg_SS;
    end
  end

  always @ (*) begin
    _zz_162 = 32'h0;
    if(execute_CsrPlugin_csr_3073)begin
      _zz_162[31 : 0] = utime[31 : 0];
    end
  end

  always @ (*) begin
    _zz_163 = 32'h0;
    if(execute_CsrPlugin_csr_3201)begin
      _zz_163[31 : 0] = utime[63 : 32];
    end
  end

  always @ (*) begin
    _zz_164 = 32'h0;
    if(execute_CsrPlugin_csr_324)begin
      _zz_164[5 : 5] = CsrPlugin_sip_STIP;
      _zz_164[1 : 1] = CsrPlugin_sip_SSIP;
      _zz_164[9 : 9] = CsrPlugin_sip_SEIP_OR;
    end
  end

  always @ (*) begin
    _zz_165 = 32'h0;
    if(execute_CsrPlugin_csr_260)begin
      _zz_165[9 : 9] = CsrPlugin_sie_SEIE;
      _zz_165[5 : 5] = CsrPlugin_sie_STIE;
      _zz_165[1 : 1] = CsrPlugin_sie_SSIE;
    end
  end

  always @ (*) begin
    _zz_166 = 32'h0;
    if(execute_CsrPlugin_csr_261)begin
      _zz_166[31 : 2] = CsrPlugin_stvec_base;
      _zz_166[1 : 0] = CsrPlugin_stvec_mode;
    end
  end

  always @ (*) begin
    _zz_167 = 32'h0;
    if(execute_CsrPlugin_csr_321)begin
      _zz_167[31 : 0] = CsrPlugin_sepc;
    end
  end

  always @ (*) begin
    _zz_168 = 32'h0;
    if(execute_CsrPlugin_csr_320)begin
      _zz_168[31 : 0] = CsrPlugin_sscratch;
    end
  end

  always @ (*) begin
    _zz_169 = 32'h0;
    if(execute_CsrPlugin_csr_322)begin
      _zz_169[31 : 31] = CsrPlugin_scause_interrupt;
      _zz_169[3 : 0] = CsrPlugin_scause_exceptionCode;
    end
  end

  always @ (*) begin
    _zz_170 = 32'h0;
    if(execute_CsrPlugin_csr_323)begin
      _zz_170[31 : 0] = CsrPlugin_stval;
    end
  end

  assign execute_CsrPlugin_readData = (((((_zz_149 | _zz_150) | (_zz_151 | _zz_675)) | ((_zz_676 | _zz_677) | (_zz_678 | _zz_152))) | (((_zz_153 | _zz_154) | (_zz_155 | _zz_156)) | ((_zz_157 | _zz_158) | (_zz_159 | _zz_160)))) | ((((_zz_161 | _zz_162) | (_zz_163 | _zz_164)) | ((_zz_165 | _zz_166) | (_zz_167 | _zz_168))) | (_zz_169 | _zz_170)));
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      MmuPlugin_status_sum <= 1'b0;
      MmuPlugin_status_mxr <= 1'b0;
      MmuPlugin_status_mprv <= 1'b0;
      MmuPlugin_satp_mode <= 1'b0;
      MmuPlugin_ports_0_cache_0_valid <= 1'b0;
      MmuPlugin_ports_0_cache_1_valid <= 1'b0;
      MmuPlugin_ports_0_cache_2_valid <= 1'b0;
      MmuPlugin_ports_0_cache_3_valid <= 1'b0;
      MmuPlugin_ports_0_dirty <= 1'b0;
      MmuPlugin_ports_0_entryToReplace_value <= 2'b00;
      MmuPlugin_ports_1_cache_0_valid <= 1'b0;
      MmuPlugin_ports_1_cache_1_valid <= 1'b0;
      MmuPlugin_ports_1_cache_2_valid <= 1'b0;
      MmuPlugin_ports_1_cache_3_valid <= 1'b0;
      MmuPlugin_ports_1_dirty <= 1'b0;
      MmuPlugin_ports_1_entryToReplace_value <= 2'b00;
      MmuPlugin_shared_state_1 <= `MmuPlugin_shared_State_defaultEncoding_IDLE;
      MmuPlugin_shared_dBusRspStaged_valid <= 1'b0;
      IBusCachedPlugin_fetchPc_pcReg <= 32'h10a00000;
      IBusCachedPlugin_fetchPc_correctionReg <= 1'b0;
      IBusCachedPlugin_fetchPc_booted <= 1'b0;
      IBusCachedPlugin_fetchPc_inc <= 1'b0;
      _zz_73 <= 1'b0;
      _zz_75 <= 1'b0;
      IBusCachedPlugin_injector_nextPcCalc_valids_0 <= 1'b0;
      IBusCachedPlugin_injector_nextPcCalc_valids_1 <= 1'b0;
      IBusCachedPlugin_injector_nextPcCalc_valids_2 <= 1'b0;
      IBusCachedPlugin_injector_nextPcCalc_valids_3 <= 1'b0;
      IBusCachedPlugin_injector_nextPcCalc_valids_4 <= 1'b0;
      IBusCachedPlugin_rspCounter <= _zz_77;
      IBusCachedPlugin_rspCounter <= 32'h0;
      dataCache_2_io_mem_cmd_s2mPipe_rValid <= 1'b0;
      dBus_rsp_valid_regNext <= 1'b0;
      DBusCachedPlugin_rspCounter <= _zz_78;
      DBusCachedPlugin_rspCounter <= 32'h0;
      _zz_101 <= 1'b1;
      _zz_113 <= 1'b0;
      memory_MulDivIterativePlugin_div_counter_value <= 6'h0;
      _zz_127 <= 2'b11;
      CsrPlugin_mstatus_MIE <= 1'b0;
      CsrPlugin_mstatus_MPIE <= 1'b0;
      CsrPlugin_mstatus_MPP <= 2'b11;
      CsrPlugin_mie_MEIE <= 1'b0;
      CsrPlugin_mie_MTIE <= 1'b0;
      CsrPlugin_mie_MSIE <= 1'b0;
      CsrPlugin_medeleg_IAM <= 1'b0;
      CsrPlugin_medeleg_IAF <= 1'b0;
      CsrPlugin_medeleg_II <= 1'b0;
      CsrPlugin_medeleg_LAM <= 1'b0;
      CsrPlugin_medeleg_LAF <= 1'b0;
      CsrPlugin_medeleg_SAM <= 1'b0;
      CsrPlugin_medeleg_SAF <= 1'b0;
      CsrPlugin_medeleg_EU <= 1'b0;
      CsrPlugin_medeleg_ES <= 1'b0;
      CsrPlugin_medeleg_IPF <= 1'b0;
      CsrPlugin_medeleg_LPF <= 1'b0;
      CsrPlugin_medeleg_SPF <= 1'b0;
      CsrPlugin_mideleg_ST <= 1'b0;
      CsrPlugin_mideleg_SE <= 1'b0;
      CsrPlugin_mideleg_SS <= 1'b0;
      CsrPlugin_sstatus_SIE <= 1'b0;
      CsrPlugin_sstatus_SPIE <= 1'b0;
      CsrPlugin_sstatus_SPP <= 1'b1;
      CsrPlugin_sip_SEIP_SOFT <= 1'b0;
      CsrPlugin_sip_STIP <= 1'b0;
      CsrPlugin_sip_SSIP <= 1'b0;
      CsrPlugin_sie_SEIE <= 1'b0;
      CsrPlugin_sie_STIE <= 1'b0;
      CsrPlugin_sie_SSIE <= 1'b0;
      CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_decode <= 1'b0;
      CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_execute <= 1'b0;
      CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_memory <= 1'b0;
      CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_writeBack <= 1'b0;
      CsrPlugin_interrupt_valid <= 1'b0;
      CsrPlugin_lastStageWasWfi <= 1'b0;
      CsrPlugin_pipelineLiberator_pcValids_0 <= 1'b0;
      CsrPlugin_pipelineLiberator_pcValids_1 <= 1'b0;
      CsrPlugin_pipelineLiberator_pcValids_2 <= 1'b0;
      CsrPlugin_hadException <= 1'b0;
      execute_CsrPlugin_wfiWake <= 1'b0;
      execute_arbitration_isValid <= 1'b0;
      memory_arbitration_isValid <= 1'b0;
      writeBack_arbitration_isValid <= 1'b0;
      _zz_148 <= 3'b000;
      execute_to_memory_IS_DBUS_SHARING <= 1'b0;
      memory_to_writeBack_IS_DBUS_SHARING <= 1'b0;
    end else begin
      if((! IBusCachedPlugin_mmuBus_cmd_1_isStuck))begin
        MmuPlugin_ports_0_dirty <= 1'b0;
      end
      MmuPlugin_ports_0_entryToReplace_value <= MmuPlugin_ports_0_entryToReplace_valueNext;
      if(contextSwitching)begin
        if(MmuPlugin_ports_0_cache_0_exception)begin
          MmuPlugin_ports_0_cache_0_valid <= 1'b0;
        end
        if(MmuPlugin_ports_0_cache_1_exception)begin
          MmuPlugin_ports_0_cache_1_valid <= 1'b0;
        end
        if(MmuPlugin_ports_0_cache_2_exception)begin
          MmuPlugin_ports_0_cache_2_valid <= 1'b0;
        end
        if(MmuPlugin_ports_0_cache_3_exception)begin
          MmuPlugin_ports_0_cache_3_valid <= 1'b0;
        end
      end
      if((! DBusCachedPlugin_mmuBus_cmd_1_isStuck))begin
        MmuPlugin_ports_1_dirty <= 1'b0;
      end
      MmuPlugin_ports_1_entryToReplace_value <= MmuPlugin_ports_1_entryToReplace_valueNext;
      if(contextSwitching)begin
        if(MmuPlugin_ports_1_cache_0_exception)begin
          MmuPlugin_ports_1_cache_0_valid <= 1'b0;
        end
        if(MmuPlugin_ports_1_cache_1_exception)begin
          MmuPlugin_ports_1_cache_1_valid <= 1'b0;
        end
        if(MmuPlugin_ports_1_cache_2_exception)begin
          MmuPlugin_ports_1_cache_2_valid <= 1'b0;
        end
        if(MmuPlugin_ports_1_cache_3_exception)begin
          MmuPlugin_ports_1_cache_3_valid <= 1'b0;
        end
      end
      MmuPlugin_shared_dBusRspStaged_valid <= MmuPlugin_dBusAccess_rsp_valid;
      case(MmuPlugin_shared_state_1)
        `MmuPlugin_shared_State_defaultEncoding_IDLE : begin
          if(_zz_278)begin
            MmuPlugin_shared_state_1 <= `MmuPlugin_shared_State_defaultEncoding_L1_CMD;
          end
        end
        `MmuPlugin_shared_State_defaultEncoding_L1_CMD : begin
          if(MmuPlugin_dBusAccess_cmd_ready)begin
            MmuPlugin_shared_state_1 <= `MmuPlugin_shared_State_defaultEncoding_L1_RSP;
          end
        end
        `MmuPlugin_shared_State_defaultEncoding_L1_RSP : begin
          if(MmuPlugin_shared_dBusRspStaged_valid)begin
            MmuPlugin_shared_state_1 <= `MmuPlugin_shared_State_defaultEncoding_L0_CMD;
            if((MmuPlugin_shared_dBusRsp_leaf || MmuPlugin_shared_dBusRsp_exception))begin
              MmuPlugin_shared_state_1 <= `MmuPlugin_shared_State_defaultEncoding_IDLE;
            end
            if(MmuPlugin_shared_dBusRspStaged_payload_redo)begin
              MmuPlugin_shared_state_1 <= `MmuPlugin_shared_State_defaultEncoding_L1_CMD;
            end
          end
        end
        `MmuPlugin_shared_State_defaultEncoding_L0_CMD : begin
          if(MmuPlugin_dBusAccess_cmd_ready)begin
            MmuPlugin_shared_state_1 <= `MmuPlugin_shared_State_defaultEncoding_L0_RSP;
          end
        end
        default : begin
          if(MmuPlugin_shared_dBusRspStaged_valid)begin
            MmuPlugin_shared_state_1 <= `MmuPlugin_shared_State_defaultEncoding_IDLE;
            if(MmuPlugin_shared_dBusRspStaged_payload_redo)begin
              MmuPlugin_shared_state_1 <= `MmuPlugin_shared_State_defaultEncoding_L0_CMD;
            end
          end
        end
      endcase
      if(_zz_258)begin
        if(_zz_259)begin
          MmuPlugin_ports_0_dirty <= 1'b1;
          if(_zz_279)begin
            MmuPlugin_ports_0_cache_0_valid <= 1'b1;
          end
          if(_zz_280)begin
            MmuPlugin_ports_0_cache_1_valid <= 1'b1;
          end
          if(_zz_281)begin
            MmuPlugin_ports_0_cache_2_valid <= 1'b1;
          end
          if(_zz_282)begin
            MmuPlugin_ports_0_cache_3_valid <= 1'b1;
          end
        end
        if(_zz_260)begin
          MmuPlugin_ports_1_dirty <= 1'b1;
          if(_zz_283)begin
            MmuPlugin_ports_1_cache_0_valid <= 1'b1;
          end
          if(_zz_284)begin
            MmuPlugin_ports_1_cache_1_valid <= 1'b1;
          end
          if(_zz_285)begin
            MmuPlugin_ports_1_cache_2_valid <= 1'b1;
          end
          if(_zz_286)begin
            MmuPlugin_ports_1_cache_3_valid <= 1'b1;
          end
        end
      end
      if((writeBack_arbitration_isValid && writeBack_IS_SFENCE_VMA))begin
        MmuPlugin_ports_0_cache_0_valid <= 1'b0;
        MmuPlugin_ports_0_cache_1_valid <= 1'b0;
        MmuPlugin_ports_0_cache_2_valid <= 1'b0;
        MmuPlugin_ports_0_cache_3_valid <= 1'b0;
        MmuPlugin_ports_1_cache_0_valid <= 1'b0;
        MmuPlugin_ports_1_cache_1_valid <= 1'b0;
        MmuPlugin_ports_1_cache_2_valid <= 1'b0;
        MmuPlugin_ports_1_cache_3_valid <= 1'b0;
      end
      if(IBusCachedPlugin_fetchPc_correction)begin
        IBusCachedPlugin_fetchPc_correctionReg <= 1'b1;
      end
      if((IBusCachedPlugin_fetchPc_output_valid && IBusCachedPlugin_fetchPc_output_ready))begin
        IBusCachedPlugin_fetchPc_correctionReg <= 1'b0;
      end
      IBusCachedPlugin_fetchPc_booted <= 1'b1;
      if((IBusCachedPlugin_fetchPc_correction || IBusCachedPlugin_fetchPc_pcRegPropagate))begin
        IBusCachedPlugin_fetchPc_inc <= 1'b0;
      end
      if((IBusCachedPlugin_fetchPc_output_valid && IBusCachedPlugin_fetchPc_output_ready))begin
        IBusCachedPlugin_fetchPc_inc <= 1'b1;
      end
      if(((! IBusCachedPlugin_fetchPc_output_valid) && IBusCachedPlugin_fetchPc_output_ready))begin
        IBusCachedPlugin_fetchPc_inc <= 1'b0;
      end
      if((IBusCachedPlugin_fetchPc_booted && ((IBusCachedPlugin_fetchPc_output_ready || IBusCachedPlugin_fetchPc_correction) || IBusCachedPlugin_fetchPc_pcRegPropagate)))begin
        IBusCachedPlugin_fetchPc_pcReg <= IBusCachedPlugin_fetchPc_pc;
      end
      if(IBusCachedPlugin_iBusRsp_flush)begin
        _zz_73 <= 1'b0;
      end
      if(_zz_71)begin
        _zz_73 <= (IBusCachedPlugin_iBusRsp_stages_0_output_valid && (! 1'b0));
      end
      if(IBusCachedPlugin_iBusRsp_flush)begin
        _zz_75 <= 1'b0;
      end
      if(IBusCachedPlugin_iBusRsp_stages_1_output_ready)begin
        _zz_75 <= (IBusCachedPlugin_iBusRsp_stages_1_output_valid && (! IBusCachedPlugin_iBusRsp_flush));
      end
      if(IBusCachedPlugin_fetchPc_flushed)begin
        IBusCachedPlugin_injector_nextPcCalc_valids_0 <= 1'b0;
      end
      if((! (! IBusCachedPlugin_iBusRsp_stages_1_input_ready)))begin
        IBusCachedPlugin_injector_nextPcCalc_valids_0 <= 1'b1;
      end
      if(IBusCachedPlugin_fetchPc_flushed)begin
        IBusCachedPlugin_injector_nextPcCalc_valids_1 <= 1'b0;
      end
      if((! (! IBusCachedPlugin_iBusRsp_stages_2_input_ready)))begin
        IBusCachedPlugin_injector_nextPcCalc_valids_1 <= IBusCachedPlugin_injector_nextPcCalc_valids_0;
      end
      if(IBusCachedPlugin_fetchPc_flushed)begin
        IBusCachedPlugin_injector_nextPcCalc_valids_1 <= 1'b0;
      end
      if(IBusCachedPlugin_fetchPc_flushed)begin
        IBusCachedPlugin_injector_nextPcCalc_valids_2 <= 1'b0;
      end
      if((! execute_arbitration_isStuck))begin
        IBusCachedPlugin_injector_nextPcCalc_valids_2 <= IBusCachedPlugin_injector_nextPcCalc_valids_1;
      end
      if(IBusCachedPlugin_fetchPc_flushed)begin
        IBusCachedPlugin_injector_nextPcCalc_valids_2 <= 1'b0;
      end
      if(IBusCachedPlugin_fetchPc_flushed)begin
        IBusCachedPlugin_injector_nextPcCalc_valids_3 <= 1'b0;
      end
      if((! memory_arbitration_isStuck))begin
        IBusCachedPlugin_injector_nextPcCalc_valids_3 <= IBusCachedPlugin_injector_nextPcCalc_valids_2;
      end
      if(IBusCachedPlugin_fetchPc_flushed)begin
        IBusCachedPlugin_injector_nextPcCalc_valids_3 <= 1'b0;
      end
      if(IBusCachedPlugin_fetchPc_flushed)begin
        IBusCachedPlugin_injector_nextPcCalc_valids_4 <= 1'b0;
      end
      if((! writeBack_arbitration_isStuck))begin
        IBusCachedPlugin_injector_nextPcCalc_valids_4 <= IBusCachedPlugin_injector_nextPcCalc_valids_3;
      end
      if(IBusCachedPlugin_fetchPc_flushed)begin
        IBusCachedPlugin_injector_nextPcCalc_valids_4 <= 1'b0;
      end
      if(iBus_rsp_valid)begin
        IBusCachedPlugin_rspCounter <= (IBusCachedPlugin_rspCounter + 32'h00000001);
      end
      if(dataCache_2_io_mem_cmd_s2mPipe_ready)begin
        dataCache_2_io_mem_cmd_s2mPipe_rValid <= 1'b0;
      end
      if(_zz_287)begin
        dataCache_2_io_mem_cmd_s2mPipe_rValid <= dataCache_2_io_mem_cmd_valid;
      end
      dBus_rsp_valid_regNext <= dBus_rsp_valid;
      if(dBus_rsp_valid)begin
        DBusCachedPlugin_rspCounter <= (DBusCachedPlugin_rspCounter + 32'h00000001);
      end
      _zz_101 <= 1'b0;
      _zz_113 <= (_zz_35 && writeBack_arbitration_isFiring);
      memory_MulDivIterativePlugin_div_counter_value <= memory_MulDivIterativePlugin_div_counter_valueNext;
      if((! decode_arbitration_isStuck))begin
        CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_decode <= 1'b0;
      end else begin
        CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_decode <= CsrPlugin_exceptionPortCtrl_exceptionValids_decode;
      end
      if((! execute_arbitration_isStuck))begin
        CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_execute <= (CsrPlugin_exceptionPortCtrl_exceptionValids_decode && (! decode_arbitration_isStuck));
      end else begin
        CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_execute <= CsrPlugin_exceptionPortCtrl_exceptionValids_execute;
      end
      if((! memory_arbitration_isStuck))begin
        CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_memory <= (CsrPlugin_exceptionPortCtrl_exceptionValids_execute && (! execute_arbitration_isStuck));
      end else begin
        CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_memory <= CsrPlugin_exceptionPortCtrl_exceptionValids_memory;
      end
      if((! writeBack_arbitration_isStuck))begin
        CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_writeBack <= (CsrPlugin_exceptionPortCtrl_exceptionValids_memory && (! memory_arbitration_isStuck));
      end else begin
        CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_writeBack <= 1'b0;
      end
      CsrPlugin_interrupt_valid <= 1'b0;
      if(_zz_288)begin
        if(_zz_289)begin
          CsrPlugin_interrupt_valid <= 1'b1;
        end
        if(_zz_290)begin
          CsrPlugin_interrupt_valid <= 1'b1;
        end
        if(_zz_291)begin
          CsrPlugin_interrupt_valid <= 1'b1;
        end
      end
      if(_zz_292)begin
        if(_zz_293)begin
          CsrPlugin_interrupt_valid <= 1'b1;
        end
        if(_zz_294)begin
          CsrPlugin_interrupt_valid <= 1'b1;
        end
        if(_zz_295)begin
          CsrPlugin_interrupt_valid <= 1'b1;
        end
        if(_zz_296)begin
          CsrPlugin_interrupt_valid <= 1'b1;
        end
        if(_zz_297)begin
          CsrPlugin_interrupt_valid <= 1'b1;
        end
        if(_zz_298)begin
          CsrPlugin_interrupt_valid <= 1'b1;
        end
      end
      CsrPlugin_lastStageWasWfi <= (writeBack_arbitration_isFiring && (writeBack_ENV_CTRL == `EnvCtrlEnum_defaultEncoding_WFI));
      if(CsrPlugin_pipelineLiberator_active)begin
        if((! execute_arbitration_isStuck))begin
          CsrPlugin_pipelineLiberator_pcValids_0 <= 1'b1;
        end
        if((! memory_arbitration_isStuck))begin
          CsrPlugin_pipelineLiberator_pcValids_1 <= CsrPlugin_pipelineLiberator_pcValids_0;
        end
        if((! writeBack_arbitration_isStuck))begin
          CsrPlugin_pipelineLiberator_pcValids_2 <= CsrPlugin_pipelineLiberator_pcValids_1;
        end
      end
      if(((! CsrPlugin_pipelineLiberator_active) || decode_arbitration_removeIt))begin
        CsrPlugin_pipelineLiberator_pcValids_0 <= 1'b0;
        CsrPlugin_pipelineLiberator_pcValids_1 <= 1'b0;
        CsrPlugin_pipelineLiberator_pcValids_2 <= 1'b0;
      end
      if(CsrPlugin_interruptJump)begin
        CsrPlugin_interrupt_valid <= 1'b0;
      end
      CsrPlugin_hadException <= CsrPlugin_exception;
      if(_zz_254)begin
        _zz_127 <= CsrPlugin_targetPrivilege;
        case(CsrPlugin_targetPrivilege)
          2'b01 : begin
            CsrPlugin_sstatus_SIE <= 1'b0;
            CsrPlugin_sstatus_SPIE <= CsrPlugin_sstatus_SIE;
            CsrPlugin_sstatus_SPP <= CsrPlugin_privilege[0 : 0];
          end
          2'b11 : begin
            CsrPlugin_mstatus_MIE <= 1'b0;
            CsrPlugin_mstatus_MPIE <= CsrPlugin_mstatus_MIE;
            CsrPlugin_mstatus_MPP <= CsrPlugin_privilege;
          end
          default : begin
          end
        endcase
      end
      if(_zz_255)begin
        case(_zz_257)
          2'b11 : begin
            CsrPlugin_mstatus_MPP <= 2'b00;
            CsrPlugin_mstatus_MIE <= CsrPlugin_mstatus_MPIE;
            CsrPlugin_mstatus_MPIE <= 1'b1;
            _zz_127 <= CsrPlugin_mstatus_MPP;
          end
          2'b01 : begin
            CsrPlugin_sstatus_SPP <= 1'b0;
            CsrPlugin_sstatus_SIE <= CsrPlugin_sstatus_SPIE;
            CsrPlugin_sstatus_SPIE <= 1'b1;
            _zz_127 <= {1'b0,CsrPlugin_sstatus_SPP};
          end
          default : begin
          end
        endcase
      end
      execute_CsrPlugin_wfiWake <= (({_zz_133,{_zz_132,{_zz_131,{_zz_130,{_zz_129,_zz_128}}}}} != 6'h0) || CsrPlugin_thirdPartyWake);
      if((! memory_arbitration_isStuck))begin
        execute_to_memory_IS_DBUS_SHARING <= execute_IS_DBUS_SHARING;
      end
      if((! writeBack_arbitration_isStuck))begin
        memory_to_writeBack_IS_DBUS_SHARING <= memory_IS_DBUS_SHARING;
      end
      if(((! execute_arbitration_isStuck) || execute_arbitration_removeIt))begin
        execute_arbitration_isValid <= 1'b0;
      end
      if(((! decode_arbitration_isStuck) && (! decode_arbitration_removeIt)))begin
        execute_arbitration_isValid <= decode_arbitration_isValid;
      end
      if(((! memory_arbitration_isStuck) || memory_arbitration_removeIt))begin
        memory_arbitration_isValid <= 1'b0;
      end
      if(((! execute_arbitration_isStuck) && (! execute_arbitration_removeIt)))begin
        memory_arbitration_isValid <= execute_arbitration_isValid;
      end
      if(((! writeBack_arbitration_isStuck) || writeBack_arbitration_removeIt))begin
        writeBack_arbitration_isValid <= 1'b0;
      end
      if(((! memory_arbitration_isStuck) && (! memory_arbitration_removeIt)))begin
        writeBack_arbitration_isValid <= memory_arbitration_isValid;
      end
      case(_zz_148)
        3'b000 : begin
          if(IBusCachedPlugin_injectionPort_valid)begin
            _zz_148 <= 3'b001;
          end
        end
        3'b001 : begin
          _zz_148 <= 3'b010;
        end
        3'b010 : begin
          _zz_148 <= 3'b011;
        end
        3'b011 : begin
          if((! decode_arbitration_isStuck))begin
            _zz_148 <= 3'b100;
          end
        end
        3'b100 : begin
          _zz_148 <= 3'b000;
        end
        default : begin
        end
      endcase
      if(MmuPlugin_dBusAccess_rsp_valid)begin
        memory_to_writeBack_IS_DBUS_SHARING <= 1'b0;
      end
      if(execute_CsrPlugin_csr_768)begin
        if(execute_CsrPlugin_writeEnable)begin
          MmuPlugin_status_mxr <= _zz_399[0];
          MmuPlugin_status_sum <= _zz_400[0];
          MmuPlugin_status_mprv <= _zz_401[0];
          CsrPlugin_mstatus_MPP <= execute_CsrPlugin_writeData[12 : 11];
          CsrPlugin_mstatus_MPIE <= _zz_402[0];
          CsrPlugin_mstatus_MIE <= _zz_403[0];
          CsrPlugin_sstatus_SPP <= execute_CsrPlugin_writeData[8 : 8];
          CsrPlugin_sstatus_SPIE <= _zz_404[0];
          CsrPlugin_sstatus_SIE <= _zz_405[0];
        end
      end
      if(execute_CsrPlugin_csr_256)begin
        if(execute_CsrPlugin_writeEnable)begin
          MmuPlugin_status_mxr <= _zz_406[0];
          MmuPlugin_status_sum <= _zz_407[0];
          MmuPlugin_status_mprv <= _zz_408[0];
          CsrPlugin_sstatus_SPP <= execute_CsrPlugin_writeData[8 : 8];
          CsrPlugin_sstatus_SPIE <= _zz_409[0];
          CsrPlugin_sstatus_SIE <= _zz_410[0];
        end
      end
      if(execute_CsrPlugin_csr_384)begin
        if(execute_CsrPlugin_writeInstruction)begin
          MmuPlugin_ports_0_cache_0_valid <= 1'b0;
          MmuPlugin_ports_0_cache_1_valid <= 1'b0;
          MmuPlugin_ports_0_cache_2_valid <= 1'b0;
          MmuPlugin_ports_0_cache_3_valid <= 1'b0;
          MmuPlugin_ports_1_cache_0_valid <= 1'b0;
          MmuPlugin_ports_1_cache_1_valid <= 1'b0;
          MmuPlugin_ports_1_cache_2_valid <= 1'b0;
          MmuPlugin_ports_1_cache_3_valid <= 1'b0;
          MmuPlugin_ports_0_dirty <= 1'b1;
          MmuPlugin_ports_1_dirty <= 1'b1;
        end
        if(execute_CsrPlugin_writeEnable)begin
          MmuPlugin_satp_mode <= _zz_411[0];
        end
      end
      if(execute_CsrPlugin_csr_836)begin
        if(execute_CsrPlugin_writeEnable)begin
          CsrPlugin_sip_STIP <= _zz_413[0];
          CsrPlugin_sip_SSIP <= _zz_414[0];
          CsrPlugin_sip_SEIP_SOFT <= _zz_415[0];
        end
      end
      if(execute_CsrPlugin_csr_772)begin
        if(execute_CsrPlugin_writeEnable)begin
          CsrPlugin_mie_MEIE <= _zz_416[0];
          CsrPlugin_mie_MTIE <= _zz_417[0];
          CsrPlugin_mie_MSIE <= _zz_418[0];
          CsrPlugin_sie_SEIE <= _zz_419[0];
          CsrPlugin_sie_STIE <= _zz_420[0];
          CsrPlugin_sie_SSIE <= _zz_421[0];
        end
      end
      if(execute_CsrPlugin_csr_770)begin
        if(execute_CsrPlugin_writeEnable)begin
          CsrPlugin_medeleg_IAM <= _zz_422[0];
          CsrPlugin_medeleg_IAF <= _zz_423[0];
          CsrPlugin_medeleg_II <= _zz_424[0];
          CsrPlugin_medeleg_LAM <= _zz_425[0];
          CsrPlugin_medeleg_LAF <= _zz_426[0];
          CsrPlugin_medeleg_SAM <= _zz_427[0];
          CsrPlugin_medeleg_SAF <= _zz_428[0];
          CsrPlugin_medeleg_EU <= _zz_429[0];
          CsrPlugin_medeleg_ES <= _zz_430[0];
          CsrPlugin_medeleg_IPF <= _zz_431[0];
          CsrPlugin_medeleg_LPF <= _zz_432[0];
          CsrPlugin_medeleg_SPF <= _zz_433[0];
        end
      end
      if(execute_CsrPlugin_csr_771)begin
        if(execute_CsrPlugin_writeEnable)begin
          CsrPlugin_mideleg_SE <= _zz_434[0];
          CsrPlugin_mideleg_ST <= _zz_435[0];
          CsrPlugin_mideleg_SS <= _zz_436[0];
        end
      end
      if(execute_CsrPlugin_csr_324)begin
        if(execute_CsrPlugin_writeEnable)begin
          CsrPlugin_sip_STIP <= _zz_437[0];
          CsrPlugin_sip_SSIP <= _zz_438[0];
          CsrPlugin_sip_SEIP_SOFT <= _zz_439[0];
        end
      end
      if(execute_CsrPlugin_csr_260)begin
        if(execute_CsrPlugin_writeEnable)begin
          CsrPlugin_sie_SEIE <= _zz_440[0];
          CsrPlugin_sie_STIE <= _zz_441[0];
          CsrPlugin_sie_SSIE <= _zz_442[0];
        end
      end
    end
  end

  always @ (posedge CLKOUT0) begin
    if((! IBusCachedPlugin_mmuBus_cmd_1_isStuck))begin
      MmuPlugin_ports_0_requireMmuLockup <= MmuPlugin_ports_0_requireMmuLockupCalc;
    end
    if((! IBusCachedPlugin_mmuBus_cmd_1_isStuck))begin
      MmuPlugin_ports_0_cacheHits <= MmuPlugin_ports_0_cacheHitsCalc;
    end
    if((! DBusCachedPlugin_mmuBus_cmd_1_isStuck))begin
      MmuPlugin_ports_1_requireMmuLockup <= MmuPlugin_ports_1_requireMmuLockupCalc;
    end
    if((! DBusCachedPlugin_mmuBus_cmd_1_isStuck))begin
      MmuPlugin_ports_1_cacheHits <= MmuPlugin_ports_1_cacheHitsCalc;
    end
    MmuPlugin_shared_dBusRspStaged_payload_data <= MmuPlugin_dBusAccess_rsp_payload_data;
    MmuPlugin_shared_dBusRspStaged_payload_error <= MmuPlugin_dBusAccess_rsp_payload_error;
    MmuPlugin_shared_dBusRspStaged_payload_redo <= MmuPlugin_dBusAccess_rsp_payload_redo;
    if((MmuPlugin_shared_dBusRspStaged_valid && (! MmuPlugin_shared_dBusRspStaged_payload_redo)))begin
      MmuPlugin_shared_pteBuffer_V <= MmuPlugin_shared_dBusRsp_pte_V;
      MmuPlugin_shared_pteBuffer_R <= MmuPlugin_shared_dBusRsp_pte_R;
      MmuPlugin_shared_pteBuffer_W <= MmuPlugin_shared_dBusRsp_pte_W;
      MmuPlugin_shared_pteBuffer_X <= MmuPlugin_shared_dBusRsp_pte_X;
      MmuPlugin_shared_pteBuffer_U <= MmuPlugin_shared_dBusRsp_pte_U;
      MmuPlugin_shared_pteBuffer_G <= MmuPlugin_shared_dBusRsp_pte_G;
      MmuPlugin_shared_pteBuffer_A <= MmuPlugin_shared_dBusRsp_pte_A;
      MmuPlugin_shared_pteBuffer_D <= MmuPlugin_shared_dBusRsp_pte_D;
      MmuPlugin_shared_pteBuffer_RSW <= MmuPlugin_shared_dBusRsp_pte_RSW;
      MmuPlugin_shared_pteBuffer_PPN0 <= MmuPlugin_shared_dBusRsp_pte_PPN0;
      MmuPlugin_shared_pteBuffer_PPN1 <= MmuPlugin_shared_dBusRsp_pte_PPN1;
    end
    case(MmuPlugin_shared_state_1)
      `MmuPlugin_shared_State_defaultEncoding_IDLE : begin
        if(_zz_278)begin
          MmuPlugin_shared_portSortedOh <= MmuPlugin_shared_refills;
          MmuPlugin_shared_vpn_1 <= _zz_62[31 : 22];
          MmuPlugin_shared_vpn_0 <= _zz_62[21 : 12];
        end
      end
      `MmuPlugin_shared_State_defaultEncoding_L1_CMD : begin
      end
      `MmuPlugin_shared_State_defaultEncoding_L1_RSP : begin
      end
      `MmuPlugin_shared_State_defaultEncoding_L0_CMD : begin
      end
      default : begin
      end
    endcase
    if(_zz_258)begin
      if(_zz_259)begin
        if(_zz_279)begin
          MmuPlugin_ports_0_cache_0_exception <= (MmuPlugin_shared_dBusRsp_exception || ((MmuPlugin_shared_state_1 == `MmuPlugin_shared_State_defaultEncoding_L1_RSP) && (MmuPlugin_shared_dBusRsp_pte_PPN0 != 10'h0)));
          MmuPlugin_ports_0_cache_0_virtualAddress_0 <= MmuPlugin_shared_vpn_0;
          MmuPlugin_ports_0_cache_0_virtualAddress_1 <= MmuPlugin_shared_vpn_1;
          MmuPlugin_ports_0_cache_0_physicalAddress_0 <= MmuPlugin_shared_dBusRsp_pte_PPN0;
          MmuPlugin_ports_0_cache_0_physicalAddress_1 <= MmuPlugin_shared_dBusRsp_pte_PPN1[9 : 0];
          MmuPlugin_ports_0_cache_0_allowRead <= MmuPlugin_shared_dBusRsp_pte_R;
          MmuPlugin_ports_0_cache_0_allowWrite <= MmuPlugin_shared_dBusRsp_pte_W;
          MmuPlugin_ports_0_cache_0_allowExecute <= MmuPlugin_shared_dBusRsp_pte_X;
          MmuPlugin_ports_0_cache_0_allowUser <= MmuPlugin_shared_dBusRsp_pte_U;
          MmuPlugin_ports_0_cache_0_superPage <= (MmuPlugin_shared_state_1 == `MmuPlugin_shared_State_defaultEncoding_L1_RSP);
        end
        if(_zz_280)begin
          MmuPlugin_ports_0_cache_1_exception <= (MmuPlugin_shared_dBusRsp_exception || ((MmuPlugin_shared_state_1 == `MmuPlugin_shared_State_defaultEncoding_L1_RSP) && (MmuPlugin_shared_dBusRsp_pte_PPN0 != 10'h0)));
          MmuPlugin_ports_0_cache_1_virtualAddress_0 <= MmuPlugin_shared_vpn_0;
          MmuPlugin_ports_0_cache_1_virtualAddress_1 <= MmuPlugin_shared_vpn_1;
          MmuPlugin_ports_0_cache_1_physicalAddress_0 <= MmuPlugin_shared_dBusRsp_pte_PPN0;
          MmuPlugin_ports_0_cache_1_physicalAddress_1 <= MmuPlugin_shared_dBusRsp_pte_PPN1[9 : 0];
          MmuPlugin_ports_0_cache_1_allowRead <= MmuPlugin_shared_dBusRsp_pte_R;
          MmuPlugin_ports_0_cache_1_allowWrite <= MmuPlugin_shared_dBusRsp_pte_W;
          MmuPlugin_ports_0_cache_1_allowExecute <= MmuPlugin_shared_dBusRsp_pte_X;
          MmuPlugin_ports_0_cache_1_allowUser <= MmuPlugin_shared_dBusRsp_pte_U;
          MmuPlugin_ports_0_cache_1_superPage <= (MmuPlugin_shared_state_1 == `MmuPlugin_shared_State_defaultEncoding_L1_RSP);
        end
        if(_zz_281)begin
          MmuPlugin_ports_0_cache_2_exception <= (MmuPlugin_shared_dBusRsp_exception || ((MmuPlugin_shared_state_1 == `MmuPlugin_shared_State_defaultEncoding_L1_RSP) && (MmuPlugin_shared_dBusRsp_pte_PPN0 != 10'h0)));
          MmuPlugin_ports_0_cache_2_virtualAddress_0 <= MmuPlugin_shared_vpn_0;
          MmuPlugin_ports_0_cache_2_virtualAddress_1 <= MmuPlugin_shared_vpn_1;
          MmuPlugin_ports_0_cache_2_physicalAddress_0 <= MmuPlugin_shared_dBusRsp_pte_PPN0;
          MmuPlugin_ports_0_cache_2_physicalAddress_1 <= MmuPlugin_shared_dBusRsp_pte_PPN1[9 : 0];
          MmuPlugin_ports_0_cache_2_allowRead <= MmuPlugin_shared_dBusRsp_pte_R;
          MmuPlugin_ports_0_cache_2_allowWrite <= MmuPlugin_shared_dBusRsp_pte_W;
          MmuPlugin_ports_0_cache_2_allowExecute <= MmuPlugin_shared_dBusRsp_pte_X;
          MmuPlugin_ports_0_cache_2_allowUser <= MmuPlugin_shared_dBusRsp_pte_U;
          MmuPlugin_ports_0_cache_2_superPage <= (MmuPlugin_shared_state_1 == `MmuPlugin_shared_State_defaultEncoding_L1_RSP);
        end
        if(_zz_282)begin
          MmuPlugin_ports_0_cache_3_exception <= (MmuPlugin_shared_dBusRsp_exception || ((MmuPlugin_shared_state_1 == `MmuPlugin_shared_State_defaultEncoding_L1_RSP) && (MmuPlugin_shared_dBusRsp_pte_PPN0 != 10'h0)));
          MmuPlugin_ports_0_cache_3_virtualAddress_0 <= MmuPlugin_shared_vpn_0;
          MmuPlugin_ports_0_cache_3_virtualAddress_1 <= MmuPlugin_shared_vpn_1;
          MmuPlugin_ports_0_cache_3_physicalAddress_0 <= MmuPlugin_shared_dBusRsp_pte_PPN0;
          MmuPlugin_ports_0_cache_3_physicalAddress_1 <= MmuPlugin_shared_dBusRsp_pte_PPN1[9 : 0];
          MmuPlugin_ports_0_cache_3_allowRead <= MmuPlugin_shared_dBusRsp_pte_R;
          MmuPlugin_ports_0_cache_3_allowWrite <= MmuPlugin_shared_dBusRsp_pte_W;
          MmuPlugin_ports_0_cache_3_allowExecute <= MmuPlugin_shared_dBusRsp_pte_X;
          MmuPlugin_ports_0_cache_3_allowUser <= MmuPlugin_shared_dBusRsp_pte_U;
          MmuPlugin_ports_0_cache_3_superPage <= (MmuPlugin_shared_state_1 == `MmuPlugin_shared_State_defaultEncoding_L1_RSP);
        end
      end
      if(_zz_260)begin
        if(_zz_283)begin
          MmuPlugin_ports_1_cache_0_exception <= (MmuPlugin_shared_dBusRsp_exception || ((MmuPlugin_shared_state_1 == `MmuPlugin_shared_State_defaultEncoding_L1_RSP) && (MmuPlugin_shared_dBusRsp_pte_PPN0 != 10'h0)));
          MmuPlugin_ports_1_cache_0_virtualAddress_0 <= MmuPlugin_shared_vpn_0;
          MmuPlugin_ports_1_cache_0_virtualAddress_1 <= MmuPlugin_shared_vpn_1;
          MmuPlugin_ports_1_cache_0_physicalAddress_0 <= MmuPlugin_shared_dBusRsp_pte_PPN0;
          MmuPlugin_ports_1_cache_0_physicalAddress_1 <= MmuPlugin_shared_dBusRsp_pte_PPN1[9 : 0];
          MmuPlugin_ports_1_cache_0_allowRead <= MmuPlugin_shared_dBusRsp_pte_R;
          MmuPlugin_ports_1_cache_0_allowWrite <= MmuPlugin_shared_dBusRsp_pte_W;
          MmuPlugin_ports_1_cache_0_allowExecute <= MmuPlugin_shared_dBusRsp_pte_X;
          MmuPlugin_ports_1_cache_0_allowUser <= MmuPlugin_shared_dBusRsp_pte_U;
          MmuPlugin_ports_1_cache_0_superPage <= (MmuPlugin_shared_state_1 == `MmuPlugin_shared_State_defaultEncoding_L1_RSP);
        end
        if(_zz_284)begin
          MmuPlugin_ports_1_cache_1_exception <= (MmuPlugin_shared_dBusRsp_exception || ((MmuPlugin_shared_state_1 == `MmuPlugin_shared_State_defaultEncoding_L1_RSP) && (MmuPlugin_shared_dBusRsp_pte_PPN0 != 10'h0)));
          MmuPlugin_ports_1_cache_1_virtualAddress_0 <= MmuPlugin_shared_vpn_0;
          MmuPlugin_ports_1_cache_1_virtualAddress_1 <= MmuPlugin_shared_vpn_1;
          MmuPlugin_ports_1_cache_1_physicalAddress_0 <= MmuPlugin_shared_dBusRsp_pte_PPN0;
          MmuPlugin_ports_1_cache_1_physicalAddress_1 <= MmuPlugin_shared_dBusRsp_pte_PPN1[9 : 0];
          MmuPlugin_ports_1_cache_1_allowRead <= MmuPlugin_shared_dBusRsp_pte_R;
          MmuPlugin_ports_1_cache_1_allowWrite <= MmuPlugin_shared_dBusRsp_pte_W;
          MmuPlugin_ports_1_cache_1_allowExecute <= MmuPlugin_shared_dBusRsp_pte_X;
          MmuPlugin_ports_1_cache_1_allowUser <= MmuPlugin_shared_dBusRsp_pte_U;
          MmuPlugin_ports_1_cache_1_superPage <= (MmuPlugin_shared_state_1 == `MmuPlugin_shared_State_defaultEncoding_L1_RSP);
        end
        if(_zz_285)begin
          MmuPlugin_ports_1_cache_2_exception <= (MmuPlugin_shared_dBusRsp_exception || ((MmuPlugin_shared_state_1 == `MmuPlugin_shared_State_defaultEncoding_L1_RSP) && (MmuPlugin_shared_dBusRsp_pte_PPN0 != 10'h0)));
          MmuPlugin_ports_1_cache_2_virtualAddress_0 <= MmuPlugin_shared_vpn_0;
          MmuPlugin_ports_1_cache_2_virtualAddress_1 <= MmuPlugin_shared_vpn_1;
          MmuPlugin_ports_1_cache_2_physicalAddress_0 <= MmuPlugin_shared_dBusRsp_pte_PPN0;
          MmuPlugin_ports_1_cache_2_physicalAddress_1 <= MmuPlugin_shared_dBusRsp_pte_PPN1[9 : 0];
          MmuPlugin_ports_1_cache_2_allowRead <= MmuPlugin_shared_dBusRsp_pte_R;
          MmuPlugin_ports_1_cache_2_allowWrite <= MmuPlugin_shared_dBusRsp_pte_W;
          MmuPlugin_ports_1_cache_2_allowExecute <= MmuPlugin_shared_dBusRsp_pte_X;
          MmuPlugin_ports_1_cache_2_allowUser <= MmuPlugin_shared_dBusRsp_pte_U;
          MmuPlugin_ports_1_cache_2_superPage <= (MmuPlugin_shared_state_1 == `MmuPlugin_shared_State_defaultEncoding_L1_RSP);
        end
        if(_zz_286)begin
          MmuPlugin_ports_1_cache_3_exception <= (MmuPlugin_shared_dBusRsp_exception || ((MmuPlugin_shared_state_1 == `MmuPlugin_shared_State_defaultEncoding_L1_RSP) && (MmuPlugin_shared_dBusRsp_pte_PPN0 != 10'h0)));
          MmuPlugin_ports_1_cache_3_virtualAddress_0 <= MmuPlugin_shared_vpn_0;
          MmuPlugin_ports_1_cache_3_virtualAddress_1 <= MmuPlugin_shared_vpn_1;
          MmuPlugin_ports_1_cache_3_physicalAddress_0 <= MmuPlugin_shared_dBusRsp_pte_PPN0;
          MmuPlugin_ports_1_cache_3_physicalAddress_1 <= MmuPlugin_shared_dBusRsp_pte_PPN1[9 : 0];
          MmuPlugin_ports_1_cache_3_allowRead <= MmuPlugin_shared_dBusRsp_pte_R;
          MmuPlugin_ports_1_cache_3_allowWrite <= MmuPlugin_shared_dBusRsp_pte_W;
          MmuPlugin_ports_1_cache_3_allowExecute <= MmuPlugin_shared_dBusRsp_pte_X;
          MmuPlugin_ports_1_cache_3_allowUser <= MmuPlugin_shared_dBusRsp_pte_U;
          MmuPlugin_ports_1_cache_3_superPage <= (MmuPlugin_shared_state_1 == `MmuPlugin_shared_State_defaultEncoding_L1_RSP);
        end
      end
    end
    if(IBusCachedPlugin_iBusRsp_stages_1_output_ready)begin
      _zz_76 <= IBusCachedPlugin_iBusRsp_stages_1_output_payload;
    end
    if(IBusCachedPlugin_iBusRsp_stages_1_input_ready)begin
      IBusCachedPlugin_s1_tightlyCoupledHit <= IBusCachedPlugin_s0_tightlyCoupledHit;
    end
    if(IBusCachedPlugin_iBusRsp_stages_2_input_ready)begin
      IBusCachedPlugin_s2_tightlyCoupledHit <= IBusCachedPlugin_s1_tightlyCoupledHit;
    end
    if(_zz_287)begin
      dataCache_2_io_mem_cmd_s2mPipe_rData_wr <= dataCache_2_io_mem_cmd_payload_wr;
      dataCache_2_io_mem_cmd_s2mPipe_rData_uncached <= dataCache_2_io_mem_cmd_payload_uncached;
      dataCache_2_io_mem_cmd_s2mPipe_rData_address <= dataCache_2_io_mem_cmd_payload_address;
      dataCache_2_io_mem_cmd_s2mPipe_rData_data <= dataCache_2_io_mem_cmd_payload_data;
      dataCache_2_io_mem_cmd_s2mPipe_rData_mask <= dataCache_2_io_mem_cmd_payload_mask;
      dataCache_2_io_mem_cmd_s2mPipe_rData_length <= dataCache_2_io_mem_cmd_payload_length;
      dataCache_2_io_mem_cmd_s2mPipe_rData_exclusive <= dataCache_2_io_mem_cmd_payload_exclusive;
      dataCache_2_io_mem_cmd_s2mPipe_rData_last <= dataCache_2_io_mem_cmd_payload_last;
    end
    dBus_rsp_payload_exclusive_regNext <= dBus_rsp_payload_exclusive;
    dBus_rsp_payload_error_regNext <= dBus_rsp_payload_error;
    dBus_rsp_payload_last_regNext <= dBus_rsp_payload_last;
    dBus_rsp_payload_aggregated_regNext <= dBus_rsp_payload_aggregated;
    if((dBus_rsp_valid && (! dataCache_2_io_cpu_writeBack_keepMemRspData)))begin
      dBus_rsp_payload_data_regNextWhen <= dBus_rsp_payload_data;
    end
    _zz_114 <= _zz_34[11 : 7];
    _zz_115 <= _zz_44;
    if((memory_MulDivIterativePlugin_div_counter_value == 6'h20))begin
      memory_MulDivIterativePlugin_div_done <= 1'b1;
    end
    if((! memory_arbitration_isStuck))begin
      memory_MulDivIterativePlugin_div_done <= 1'b0;
    end
    if(_zz_240)begin
      if(_zz_272)begin
        memory_MulDivIterativePlugin_rs1[31 : 0] <= memory_MulDivIterativePlugin_div_stage_0_outNumerator;
        memory_MulDivIterativePlugin_accumulator[31 : 0] <= memory_MulDivIterativePlugin_div_stage_0_outRemainder;
        if((memory_MulDivIterativePlugin_div_counter_value == 6'h20))begin
          memory_MulDivIterativePlugin_div_result <= _zz_385[31:0];
        end
      end
    end
    if(_zz_273)begin
      memory_MulDivIterativePlugin_accumulator <= 65'h0;
      memory_MulDivIterativePlugin_rs1 <= ((_zz_125 ? (~ _zz_126) : _zz_126) + _zz_391);
      memory_MulDivIterativePlugin_rs2 <= ((_zz_124 ? (~ execute_RS2) : execute_RS2) + _zz_393);
      memory_MulDivIterativePlugin_div_needRevert <= ((_zz_125 ^ (_zz_124 && (! execute_INSTRUCTION[13]))) && (! (((execute_RS2 == 32'h0) && execute_IS_RS2_SIGNED) && (! execute_INSTRUCTION[13]))));
    end
    CsrPlugin_mip_MEIP <= externalInterrupt;
    CsrPlugin_mip_MTIP <= timerInterrupt;
    CsrPlugin_mip_MSIP <= softwareInterrupt;
    CsrPlugin_sip_SEIP_INPUT <= externalInterruptS;
    CsrPlugin_mcycle <= (CsrPlugin_mcycle + 64'h0000000000000001);
    if(writeBack_arbitration_isFiring)begin
      CsrPlugin_minstret <= (CsrPlugin_minstret + 64'h0000000000000001);
    end
    if(_zz_250)begin
      CsrPlugin_exceptionPortCtrl_exceptionContext_code <= (_zz_135 ? IBusCachedPlugin_decodeExceptionPort_payload_code : decodeExceptionPort_payload_code);
      CsrPlugin_exceptionPortCtrl_exceptionContext_badAddr <= (_zz_135 ? IBusCachedPlugin_decodeExceptionPort_payload_badAddr : decodeExceptionPort_payload_badAddr);
    end
    if(CsrPlugin_selfException_valid)begin
      CsrPlugin_exceptionPortCtrl_exceptionContext_code <= CsrPlugin_selfException_payload_code;
      CsrPlugin_exceptionPortCtrl_exceptionContext_badAddr <= CsrPlugin_selfException_payload_badAddr;
    end
    if(BranchPlugin_branchExceptionPort_valid)begin
      CsrPlugin_exceptionPortCtrl_exceptionContext_code <= BranchPlugin_branchExceptionPort_payload_code;
      CsrPlugin_exceptionPortCtrl_exceptionContext_badAddr <= BranchPlugin_branchExceptionPort_payload_badAddr;
    end
    if(DBusCachedPlugin_exceptionBus_valid)begin
      CsrPlugin_exceptionPortCtrl_exceptionContext_code <= DBusCachedPlugin_exceptionBus_payload_code;
      CsrPlugin_exceptionPortCtrl_exceptionContext_badAddr <= DBusCachedPlugin_exceptionBus_payload_badAddr;
    end
    if(_zz_288)begin
      if(_zz_289)begin
        CsrPlugin_interrupt_code <= 4'b0101;
        CsrPlugin_interrupt_targetPrivilege <= 2'b01;
      end
      if(_zz_290)begin
        CsrPlugin_interrupt_code <= 4'b0001;
        CsrPlugin_interrupt_targetPrivilege <= 2'b01;
      end
      if(_zz_291)begin
        CsrPlugin_interrupt_code <= 4'b1001;
        CsrPlugin_interrupt_targetPrivilege <= 2'b01;
      end
    end
    if(_zz_292)begin
      if(_zz_293)begin
        CsrPlugin_interrupt_code <= 4'b0101;
        CsrPlugin_interrupt_targetPrivilege <= 2'b11;
      end
      if(_zz_294)begin
        CsrPlugin_interrupt_code <= 4'b0001;
        CsrPlugin_interrupt_targetPrivilege <= 2'b11;
      end
      if(_zz_295)begin
        CsrPlugin_interrupt_code <= 4'b1001;
        CsrPlugin_interrupt_targetPrivilege <= 2'b11;
      end
      if(_zz_296)begin
        CsrPlugin_interrupt_code <= 4'b0111;
        CsrPlugin_interrupt_targetPrivilege <= 2'b11;
      end
      if(_zz_297)begin
        CsrPlugin_interrupt_code <= 4'b0011;
        CsrPlugin_interrupt_targetPrivilege <= 2'b11;
      end
      if(_zz_298)begin
        CsrPlugin_interrupt_code <= 4'b1011;
        CsrPlugin_interrupt_targetPrivilege <= 2'b11;
      end
    end
    if(_zz_254)begin
      case(CsrPlugin_targetPrivilege)
        2'b01 : begin
          CsrPlugin_scause_interrupt <= (! CsrPlugin_hadException);
          CsrPlugin_scause_exceptionCode <= CsrPlugin_trapCause;
          CsrPlugin_sepc <= writeBack_PC;
          if(CsrPlugin_hadException)begin
            CsrPlugin_stval <= CsrPlugin_exceptionPortCtrl_exceptionContext_badAddr;
          end
        end
        2'b11 : begin
          CsrPlugin_mcause_interrupt <= (! CsrPlugin_hadException);
          CsrPlugin_mcause_exceptionCode <= CsrPlugin_trapCause;
          CsrPlugin_mepc <= writeBack_PC;
          if(CsrPlugin_hadException)begin
            CsrPlugin_mtval <= CsrPlugin_exceptionPortCtrl_exceptionContext_badAddr;
          end
        end
        default : begin
        end
      endcase
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_PC <= _zz_27;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_PC <= execute_PC;
    end
    if(((! writeBack_arbitration_isStuck) && (! CsrPlugin_exceptionPortCtrl_exceptionValids_writeBack)))begin
      memory_to_writeBack_PC <= memory_PC;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_INSTRUCTION <= decode_INSTRUCTION;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_INSTRUCTION <= execute_INSTRUCTION;
    end
    if((! writeBack_arbitration_isStuck))begin
      memory_to_writeBack_INSTRUCTION <= memory_INSTRUCTION;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_FORMAL_PC_NEXT <= decode_FORMAL_PC_NEXT;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_FORMAL_PC_NEXT <= _zz_47;
    end
    if((! writeBack_arbitration_isStuck))begin
      memory_to_writeBack_FORMAL_PC_NEXT <= _zz_46;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_MEMORY_FORCE_CONSTISTENCY <= decode_MEMORY_FORCE_CONSTISTENCY;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_IS_SFENCE_VMA <= decode_IS_SFENCE_VMA;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_IS_SFENCE_VMA <= execute_IS_SFENCE_VMA;
    end
    if((! writeBack_arbitration_isStuck))begin
      memory_to_writeBack_IS_SFENCE_VMA <= memory_IS_SFENCE_VMA;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_SRC_USE_SUB_LESS <= decode_SRC_USE_SUB_LESS;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_MEMORY_ENABLE <= decode_MEMORY_ENABLE;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_MEMORY_ENABLE <= execute_MEMORY_ENABLE;
    end
    if((! writeBack_arbitration_isStuck))begin
      memory_to_writeBack_MEMORY_ENABLE <= memory_MEMORY_ENABLE;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_ALU_CTRL <= _zz_18;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_REGFILE_WRITE_VALID <= decode_REGFILE_WRITE_VALID;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_REGFILE_WRITE_VALID <= execute_REGFILE_WRITE_VALID;
    end
    if((! writeBack_arbitration_isStuck))begin
      memory_to_writeBack_REGFILE_WRITE_VALID <= memory_REGFILE_WRITE_VALID;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_BYPASSABLE_EXECUTE_STAGE <= decode_BYPASSABLE_EXECUTE_STAGE;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_BYPASSABLE_MEMORY_STAGE <= decode_BYPASSABLE_MEMORY_STAGE;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_BYPASSABLE_MEMORY_STAGE <= execute_BYPASSABLE_MEMORY_STAGE;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_MEMORY_WR <= decode_MEMORY_WR;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_MEMORY_WR <= execute_MEMORY_WR;
    end
    if((! writeBack_arbitration_isStuck))begin
      memory_to_writeBack_MEMORY_WR <= memory_MEMORY_WR;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_MEMORY_LRSC <= decode_MEMORY_LRSC;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_MEMORY_LRSC <= execute_MEMORY_LRSC;
    end
    if((! writeBack_arbitration_isStuck))begin
      memory_to_writeBack_MEMORY_LRSC <= memory_MEMORY_LRSC;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_MEMORY_AMO <= decode_MEMORY_AMO;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_MEMORY_AMO <= execute_MEMORY_AMO;
    end
    if((! writeBack_arbitration_isStuck))begin
      memory_to_writeBack_MEMORY_AMO <= memory_MEMORY_AMO;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_MEMORY_MANAGMENT <= decode_MEMORY_MANAGMENT;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_MEMORY_FENCE <= decode_MEMORY_FENCE;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_MEMORY_FENCE <= execute_MEMORY_FENCE;
    end
    if((! writeBack_arbitration_isStuck))begin
      memory_to_writeBack_MEMORY_FENCE <= memory_MEMORY_FENCE;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_SRC_LESS_UNSIGNED <= decode_SRC_LESS_UNSIGNED;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_ALU_BITWISE_CTRL <= _zz_15;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_SHIFT_CTRL <= _zz_12;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_IS_MUL <= decode_IS_MUL;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_IS_MUL <= execute_IS_MUL;
    end
    if((! writeBack_arbitration_isStuck))begin
      memory_to_writeBack_IS_MUL <= memory_IS_MUL;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_IS_DIV <= decode_IS_DIV;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_IS_DIV <= execute_IS_DIV;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_IS_RS1_SIGNED <= decode_IS_RS1_SIGNED;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_IS_RS2_SIGNED <= decode_IS_RS2_SIGNED;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_IS_CSR <= decode_IS_CSR;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_ENV_CTRL <= _zz_9;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_ENV_CTRL <= _zz_6;
    end
    if((! writeBack_arbitration_isStuck))begin
      memory_to_writeBack_ENV_CTRL <= _zz_4;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_BRANCH_CTRL <= _zz_2;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_IS_AES <= decode_IS_AES;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_IS_AES <= execute_IS_AES;
    end
    if((! writeBack_arbitration_isStuck))begin
      memory_to_writeBack_IS_AES <= memory_IS_AES;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_RS1 <= _zz_30;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_RS1 <= execute_RS1;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_RS2 <= _zz_28;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_SRC2_FORCE_ZERO <= decode_SRC2_FORCE_ZERO;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_SRC1 <= decode_SRC1;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_SRC2 <= decode_SRC2;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_CSR_WRITE_OPCODE <= decode_CSR_WRITE_OPCODE;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_CSR_READ_OPCODE <= decode_CSR_READ_OPCODE;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_DO_EBREAK <= decode_DO_EBREAK;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_MEMORY_ADDRESS_LOW <= execute_MEMORY_ADDRESS_LOW;
    end
    if((! writeBack_arbitration_isStuck))begin
      memory_to_writeBack_MEMORY_ADDRESS_LOW <= memory_MEMORY_ADDRESS_LOW;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_MEMORY_VIRTUAL_ADDRESS <= execute_MEMORY_VIRTUAL_ADDRESS;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_REGFILE_WRITE_DATA <= _zz_25;
    end
    if((! writeBack_arbitration_isStuck))begin
      memory_to_writeBack_REGFILE_WRITE_DATA <= _zz_24;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_MUL_LL <= execute_MUL_LL;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_MUL_LH <= execute_MUL_LH;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_MUL_HL <= execute_MUL_HL;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_MUL_HH <= execute_MUL_HH;
    end
    if((! writeBack_arbitration_isStuck))begin
      memory_to_writeBack_MUL_HH <= memory_MUL_HH;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_BRANCH_DO <= execute_BRANCH_DO;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_BRANCH_CALC <= execute_BRANCH_CALC;
    end
    if((! writeBack_arbitration_isStuck))begin
      memory_to_writeBack_MUL_LOW <= memory_MUL_LOW;
    end
    if((! writeBack_arbitration_isStuck))begin
      memory_to_writeBack_CALC <= memory_CALC;
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_768 <= (decode_INSTRUCTION[31 : 20] == 12'h300);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_256 <= (decode_INSTRUCTION[31 : 20] == 12'h100);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_384 <= (decode_INSTRUCTION[31 : 20] == 12'h180);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_3857 <= (decode_INSTRUCTION[31 : 20] == 12'hf11);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_3858 <= (decode_INSTRUCTION[31 : 20] == 12'hf12);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_3859 <= (decode_INSTRUCTION[31 : 20] == 12'hf13);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_3860 <= (decode_INSTRUCTION[31 : 20] == 12'hf14);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_769 <= (decode_INSTRUCTION[31 : 20] == 12'h301);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_836 <= (decode_INSTRUCTION[31 : 20] == 12'h344);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_772 <= (decode_INSTRUCTION[31 : 20] == 12'h304);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_773 <= (decode_INSTRUCTION[31 : 20] == 12'h305);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_833 <= (decode_INSTRUCTION[31 : 20] == 12'h341);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_832 <= (decode_INSTRUCTION[31 : 20] == 12'h340);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_834 <= (decode_INSTRUCTION[31 : 20] == 12'h342);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_835 <= (decode_INSTRUCTION[31 : 20] == 12'h343);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_770 <= (decode_INSTRUCTION[31 : 20] == 12'h302);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_771 <= (decode_INSTRUCTION[31 : 20] == 12'h303);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_3073 <= (decode_INSTRUCTION[31 : 20] == 12'hc01);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_3201 <= (decode_INSTRUCTION[31 : 20] == 12'hc81);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_324 <= (decode_INSTRUCTION[31 : 20] == 12'h144);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_260 <= (decode_INSTRUCTION[31 : 20] == 12'h104);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_261 <= (decode_INSTRUCTION[31 : 20] == 12'h105);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_321 <= (decode_INSTRUCTION[31 : 20] == 12'h141);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_320 <= (decode_INSTRUCTION[31 : 20] == 12'h140);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_322 <= (decode_INSTRUCTION[31 : 20] == 12'h142);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_323 <= (decode_INSTRUCTION[31 : 20] == 12'h143);
    end
    if(execute_CsrPlugin_csr_384)begin
      if(execute_CsrPlugin_writeEnable)begin
        MmuPlugin_satp_asid <= execute_CsrPlugin_writeData[30 : 22];
        MmuPlugin_satp_ppn <= execute_CsrPlugin_writeData[19 : 0];
      end
    end
    if(execute_CsrPlugin_csr_836)begin
      if(execute_CsrPlugin_writeEnable)begin
        CsrPlugin_mip_MSIP <= _zz_412[0];
      end
    end
    if(execute_CsrPlugin_csr_773)begin
      if(execute_CsrPlugin_writeEnable)begin
        CsrPlugin_mtvec_base <= execute_CsrPlugin_writeData[31 : 2];
        CsrPlugin_mtvec_mode <= execute_CsrPlugin_writeData[1 : 0];
      end
    end
    if(execute_CsrPlugin_csr_833)begin
      if(execute_CsrPlugin_writeEnable)begin
        CsrPlugin_mepc <= execute_CsrPlugin_writeData[31 : 0];
      end
    end
    if(execute_CsrPlugin_csr_832)begin
      if(execute_CsrPlugin_writeEnable)begin
        CsrPlugin_mscratch <= execute_CsrPlugin_writeData[31 : 0];
      end
    end
    if(execute_CsrPlugin_csr_261)begin
      if(execute_CsrPlugin_writeEnable)begin
        CsrPlugin_stvec_base <= execute_CsrPlugin_writeData[31 : 2];
        CsrPlugin_stvec_mode <= execute_CsrPlugin_writeData[1 : 0];
      end
    end
    if(execute_CsrPlugin_csr_321)begin
      if(execute_CsrPlugin_writeEnable)begin
        CsrPlugin_sepc <= execute_CsrPlugin_writeData[31 : 0];
      end
    end
    if(execute_CsrPlugin_csr_320)begin
      if(execute_CsrPlugin_writeEnable)begin
        CsrPlugin_sscratch <= execute_CsrPlugin_writeData[31 : 0];
      end
    end
    if(execute_CsrPlugin_csr_322)begin
      if(execute_CsrPlugin_writeEnable)begin
        CsrPlugin_scause_interrupt <= _zz_443[0];
        CsrPlugin_scause_exceptionCode <= execute_CsrPlugin_writeData[3 : 0];
      end
    end
    if(execute_CsrPlugin_csr_323)begin
      if(execute_CsrPlugin_writeEnable)begin
        CsrPlugin_stval <= execute_CsrPlugin_writeData[31 : 0];
      end
    end
  end

  always @ (posedge CLKOUT0) begin
    DebugPlugin_firstCycle <= 1'b0;
    if(debug_bus_cmd_ready)begin
      DebugPlugin_firstCycle <= 1'b1;
    end
    DebugPlugin_secondCycle <= DebugPlugin_firstCycle;
    DebugPlugin_isPipBusy <= (({writeBack_arbitration_isValid,{memory_arbitration_isValid,{execute_arbitration_isValid,decode_arbitration_isValid}}} != 4'b0000) || IBusCachedPlugin_incomingInstruction);
    if(writeBack_arbitration_isValid)begin
      DebugPlugin_busReadDataReg <= _zz_44;
    end
    _zz_147 <= debug_bus_cmd_payload_address[2];
    if(_zz_252)begin
      DebugPlugin_busReadDataReg <= execute_PC;
    end
    DebugPlugin_resetIt_regNext <= DebugPlugin_resetIt;
  end

  always @ (posedge CLKOUT0) begin
    if(debugCd_logic_outputReset) begin
      DebugPlugin_resetIt <= 1'b0;
      DebugPlugin_haltIt <= 1'b0;
      DebugPlugin_stepIt <= 1'b0;
      DebugPlugin_godmode <= 1'b0;
      DebugPlugin_haltedByBreak <= 1'b0;
    end else begin
      if((DebugPlugin_haltIt && (! DebugPlugin_isPipBusy)))begin
        DebugPlugin_godmode <= 1'b1;
      end
      if(debug_bus_cmd_valid)begin
        case(_zz_277)
          6'h0 : begin
            if(debug_bus_cmd_payload_wr)begin
              DebugPlugin_stepIt <= debug_bus_cmd_payload_data[4];
              if(debug_bus_cmd_payload_data[16])begin
                DebugPlugin_resetIt <= 1'b1;
              end
              if(debug_bus_cmd_payload_data[24])begin
                DebugPlugin_resetIt <= 1'b0;
              end
              if(debug_bus_cmd_payload_data[17])begin
                DebugPlugin_haltIt <= 1'b1;
              end
              if(debug_bus_cmd_payload_data[25])begin
                DebugPlugin_haltIt <= 1'b0;
              end
              if(debug_bus_cmd_payload_data[25])begin
                DebugPlugin_haltedByBreak <= 1'b0;
              end
              if(debug_bus_cmd_payload_data[25])begin
                DebugPlugin_godmode <= 1'b0;
              end
            end
          end
          default : begin
          end
        endcase
      end
      if(_zz_252)begin
        if(_zz_253)begin
          DebugPlugin_haltIt <= 1'b1;
          DebugPlugin_haltedByBreak <= 1'b1;
        end
      end
      if(_zz_256)begin
        if(decode_arbitration_isValid)begin
          DebugPlugin_haltIt <= 1'b1;
        end
      end
    end
  end


endmodule

module BufferCC_30 (
  input               io_dataIn,
  output              io_dataOut,
  input               CLKOUT0,
  input               sdramCd_logic_outputReset
);
  reg                 buffers_0;
  reg                 buffers_1;

  assign io_dataOut = buffers_1;
  always @ (posedge CLKOUT0 or posedge sdramCd_logic_outputReset) begin
    if (sdramCd_logic_outputReset) begin
      buffers_0 <= 1'b1;
      buffers_1 <= 1'b1;
    end else begin
      buffers_0 <= io_dataIn;
      buffers_1 <= buffers_0;
    end
  end


endmodule

module BufferCC_29 (
  input               io_dataIn,
  output              io_dataOut,
  input               CLKOUT1,
  input               debugCd_logic_outputReset
);
  reg                 buffers_0;
  reg                 buffers_1;

  assign io_dataOut = buffers_1;
  always @ (posedge CLKOUT1 or posedge debugCd_logic_outputReset) begin
    if (debugCd_logic_outputReset) begin
      buffers_0 <= 1'b1;
      buffers_1 <= 1'b1;
    end else begin
      buffers_0 <= io_dataIn;
      buffers_1 <= buffers_0;
    end
  end


endmodule

module BufferCC_28 (
  input               io_dataIn,
  output              io_dataOut,
  input               CLKOUT6,
  input               debugCd_logic_outputReset
);
  reg                 buffers_0;
  reg                 buffers_1;

  assign io_dataOut = buffers_1;
  always @ (posedge CLKOUT6 or posedge debugCd_logic_outputReset) begin
    if (debugCd_logic_outputReset) begin
      buffers_0 <= 1'b1;
      buffers_1 <= 1'b1;
    end else begin
      buffers_0 <= io_dataIn;
      buffers_1 <= buffers_0;
    end
  end


endmodule

module Bscane2BmbMaster (
  output              io_bmb_cmd_valid,
  input               io_bmb_cmd_ready,
  output              io_bmb_cmd_payload_last,
  output     [0:0]    io_bmb_cmd_payload_fragment_opcode,
  output     [31:0]   io_bmb_cmd_payload_fragment_address,
  output     [1:0]    io_bmb_cmd_payload_fragment_length,
  output     [31:0]   io_bmb_cmd_payload_fragment_data,
  output     [3:0]    io_bmb_cmd_payload_fragment_mask,
  input               io_bmb_rsp_valid,
  output              io_bmb_rsp_ready,
  input               io_bmb_rsp_payload_last,
  input      [0:0]    io_bmb_rsp_payload_fragment_opcode,
  input      [31:0]   io_bmb_rsp_payload_fragment_data,
  input               CLKOUT0,
  input               debugCd_logic_outputReset
);
  wire                bscane2_1_CAPTURE;
  wire                bscane2_1_DRCK;
  wire                bscane2_1_RESET;
  wire                bscane2_1_RUNTEST;
  wire                bscane2_1_SEL;
  wire                bscane2_1_SHIFT;
  wire                bscane2_1_TCK;
  wire                bscane2_1_TDI;
  wire                bscane2_1_TMS;
  wire                bscane2_1_UPDATE;
  wire                jtagBridge_io_ctrl_tdo;
  wire                jtagBridge_io_remote_cmd_valid;
  wire                jtagBridge_io_remote_cmd_payload_last;
  wire       [0:0]    jtagBridge_io_remote_cmd_payload_fragment;
  wire                jtagBridge_io_remote_rsp_ready;
  wire                debugger_io_remote_cmd_ready;
  wire                debugger_io_remote_rsp_valid;
  wire                debugger_io_remote_rsp_payload_error;
  wire       [31:0]   debugger_io_remote_rsp_payload_data;
  wire                debugger_io_mem_cmd_valid;
  wire       [31:0]   debugger_io_mem_cmd_payload_address;
  wire       [31:0]   debugger_io_mem_cmd_payload_data;
  wire                debugger_io_mem_cmd_payload_wr;
  wire       [1:0]    debugger_io_mem_cmd_payload_size;
  wire       [29:0]   _zz_2;
  wire       [6:0]    _zz_3;
  reg        [3:0]    _zz_1;

  assign _zz_2 = (debugger_io_mem_cmd_payload_address >>> 2);
  assign _zz_3 = ({3'd0,_zz_1} <<< debugger_io_mem_cmd_payload_address[1 : 0]);
  BSCANE2 #(
    .DISABLE_JTAG("FALSE"),
    .JTAG_CHAIN(2) 
  ) bscane2_1 (
    .CAPTURE    (bscane2_1_CAPTURE       ), //o
    .DRCK       (bscane2_1_DRCK          ), //o
    .RESET      (bscane2_1_RESET         ), //o
    .RUNTEST    (bscane2_1_RUNTEST       ), //o
    .SEL        (bscane2_1_SEL           ), //o
    .SHIFT      (bscane2_1_SHIFT         ), //o
    .TCK        (bscane2_1_TCK           ), //o
    .TDI        (bscane2_1_TDI           ), //o
    .TMS        (bscane2_1_TMS           ), //o
    .UPDATE     (bscane2_1_UPDATE        ), //o
    .TDO        (jtagBridge_io_ctrl_tdo  )  //i
  );
  JtagBridgeNoTap jtagBridge (
    .io_ctrl_tdi                       (bscane2_1_TDI                              ), //i
    .io_ctrl_enable                    (bscane2_1_SEL                              ), //i
    .io_ctrl_capture                   (bscane2_1_CAPTURE                          ), //i
    .io_ctrl_shift                     (bscane2_1_SHIFT                            ), //i
    .io_ctrl_update                    (bscane2_1_UPDATE                           ), //i
    .io_ctrl_reset                     (bscane2_1_RESET                            ), //i
    .io_ctrl_tdo                       (jtagBridge_io_ctrl_tdo                     ), //o
    .io_remote_cmd_valid               (jtagBridge_io_remote_cmd_valid             ), //o
    .io_remote_cmd_ready               (debugger_io_remote_cmd_ready               ), //i
    .io_remote_cmd_payload_last        (jtagBridge_io_remote_cmd_payload_last      ), //o
    .io_remote_cmd_payload_fragment    (jtagBridge_io_remote_cmd_payload_fragment  ), //o
    .io_remote_rsp_valid               (debugger_io_remote_rsp_valid               ), //i
    .io_remote_rsp_ready               (jtagBridge_io_remote_rsp_ready             ), //o
    .io_remote_rsp_payload_error       (debugger_io_remote_rsp_payload_error       ), //i
    .io_remote_rsp_payload_data        (debugger_io_remote_rsp_payload_data[31:0]  ), //i
    .CLKOUT0                           (CLKOUT0                                    ), //i
    .debugCd_logic_outputReset         (debugCd_logic_outputReset                  ), //i
    .TCK                               (bscane2_1_TCK                              )  //i
  );
  SystemDebugger debugger (
    .io_remote_cmd_valid               (jtagBridge_io_remote_cmd_valid             ), //i
    .io_remote_cmd_ready               (debugger_io_remote_cmd_ready               ), //o
    .io_remote_cmd_payload_last        (jtagBridge_io_remote_cmd_payload_last      ), //i
    .io_remote_cmd_payload_fragment    (jtagBridge_io_remote_cmd_payload_fragment  ), //i
    .io_remote_rsp_valid               (debugger_io_remote_rsp_valid               ), //o
    .io_remote_rsp_ready               (jtagBridge_io_remote_rsp_ready             ), //i
    .io_remote_rsp_payload_error       (debugger_io_remote_rsp_payload_error       ), //o
    .io_remote_rsp_payload_data        (debugger_io_remote_rsp_payload_data[31:0]  ), //o
    .io_mem_cmd_valid                  (debugger_io_mem_cmd_valid                  ), //o
    .io_mem_cmd_ready                  (io_bmb_cmd_ready                           ), //i
    .io_mem_cmd_payload_address        (debugger_io_mem_cmd_payload_address[31:0]  ), //o
    .io_mem_cmd_payload_data           (debugger_io_mem_cmd_payload_data[31:0]     ), //o
    .io_mem_cmd_payload_wr             (debugger_io_mem_cmd_payload_wr             ), //o
    .io_mem_cmd_payload_size           (debugger_io_mem_cmd_payload_size[1:0]      ), //o
    .io_mem_rsp_valid                  (io_bmb_rsp_valid                           ), //i
    .io_mem_rsp_payload                (io_bmb_rsp_payload_fragment_data[31:0]     ), //i
    .CLKOUT0                           (CLKOUT0                                    ), //i
    .debugCd_logic_outputReset         (debugCd_logic_outputReset                  )  //i
  );
  always @ (*) begin
    case(debugger_io_mem_cmd_payload_size)
      2'b00 : begin
        _zz_1 = 4'b0001;
      end
      2'b01 : begin
        _zz_1 = 4'b0011;
      end
      default : begin
        _zz_1 = 4'b1111;
      end
    endcase
  end

  assign io_bmb_cmd_valid = debugger_io_mem_cmd_valid;
  assign io_bmb_rsp_ready = 1'b1;
  assign io_bmb_cmd_payload_last = 1'b1;
  assign io_bmb_cmd_payload_fragment_opcode = (debugger_io_mem_cmd_payload_wr ? 1'b1 : 1'b0);
  assign io_bmb_cmd_payload_fragment_address = {_zz_2,2'b00};
  assign io_bmb_cmd_payload_fragment_length = 2'b11;
  assign io_bmb_cmd_payload_fragment_data = debugger_io_mem_cmd_payload_data;
  assign io_bmb_cmd_payload_fragment_mask = _zz_3[3:0];

endmodule

module StreamArbiter_7 (
  input               io_inputs_0_valid,
  output              io_inputs_0_ready,
  input               io_inputs_0_payload_last,
  input      [3:0]    io_inputs_0_payload_fragment_source,
  input      [0:0]    io_inputs_0_payload_fragment_opcode,
  input      [31:0]   io_inputs_0_payload_fragment_address,
  input      [5:0]    io_inputs_0_payload_fragment_length,
  input      [63:0]   io_inputs_0_payload_fragment_data,
  input      [7:0]    io_inputs_0_payload_fragment_mask,
  input      [42:0]   io_inputs_0_payload_fragment_context,
  input               io_inputs_1_valid,
  output              io_inputs_1_ready,
  input               io_inputs_1_payload_last,
  input      [3:0]    io_inputs_1_payload_fragment_source,
  input      [0:0]    io_inputs_1_payload_fragment_opcode,
  input      [31:0]   io_inputs_1_payload_fragment_address,
  input      [5:0]    io_inputs_1_payload_fragment_length,
  input      [63:0]   io_inputs_1_payload_fragment_data,
  input      [7:0]    io_inputs_1_payload_fragment_mask,
  input      [42:0]   io_inputs_1_payload_fragment_context,
  input               io_inputs_2_valid,
  output              io_inputs_2_ready,
  input               io_inputs_2_payload_last,
  input      [3:0]    io_inputs_2_payload_fragment_source,
  input      [0:0]    io_inputs_2_payload_fragment_opcode,
  input      [31:0]   io_inputs_2_payload_fragment_address,
  input      [5:0]    io_inputs_2_payload_fragment_length,
  input      [63:0]   io_inputs_2_payload_fragment_data,
  input      [7:0]    io_inputs_2_payload_fragment_mask,
  input      [42:0]   io_inputs_2_payload_fragment_context,
  output              io_output_valid,
  input               io_output_ready,
  output              io_output_payload_last,
  output     [3:0]    io_output_payload_fragment_source,
  output     [0:0]    io_output_payload_fragment_opcode,
  output     [31:0]   io_output_payload_fragment_address,
  output     [5:0]    io_output_payload_fragment_length,
  output     [63:0]   io_output_payload_fragment_data,
  output     [7:0]    io_output_payload_fragment_mask,
  output     [42:0]   io_output_payload_fragment_context,
  output     [1:0]    io_chosen,
  output     [2:0]    io_chosenOH,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  reg                 _zz_8;
  reg        [3:0]    _zz_9;
  reg        [0:0]    _zz_10;
  reg        [31:0]   _zz_11;
  reg        [5:0]    _zz_12;
  reg        [63:0]   _zz_13;
  reg        [7:0]    _zz_14;
  reg        [42:0]   _zz_15;
  wire       [5:0]    _zz_16;
  wire       [2:0]    _zz_17;
  wire       [5:0]    _zz_18;
  wire       [0:0]    _zz_19;
  wire       [0:0]    _zz_20;
  wire       [0:0]    _zz_21;
  reg                 locked;
  wire                maskProposal_0;
  wire                maskProposal_1;
  wire                maskProposal_2;
  reg                 maskLocked_0;
  reg                 maskLocked_1;
  reg                 maskLocked_2;
  wire                maskRouted_0;
  wire                maskRouted_1;
  wire                maskRouted_2;
  wire       [2:0]    _zz_1;
  wire       [5:0]    _zz_2;
  wire       [5:0]    _zz_3;
  wire       [2:0]    _zz_4;
  wire       [1:0]    _zz_5;
  wire                _zz_6;
  wire                _zz_7;

  assign _zz_16 = (_zz_2 - _zz_18);
  assign _zz_17 = {maskLocked_1,{maskLocked_0,maskLocked_2}};
  assign _zz_18 = {3'd0, _zz_17};
  assign _zz_19 = _zz_4[0 : 0];
  assign _zz_20 = _zz_4[1 : 1];
  assign _zz_21 = _zz_4[2 : 2];
  always @(*) begin
    case(_zz_5)
      2'b00 : begin
        _zz_8 = io_inputs_0_payload_last;
        _zz_9 = io_inputs_0_payload_fragment_source;
        _zz_10 = io_inputs_0_payload_fragment_opcode;
        _zz_11 = io_inputs_0_payload_fragment_address;
        _zz_12 = io_inputs_0_payload_fragment_length;
        _zz_13 = io_inputs_0_payload_fragment_data;
        _zz_14 = io_inputs_0_payload_fragment_mask;
        _zz_15 = io_inputs_0_payload_fragment_context;
      end
      2'b01 : begin
        _zz_8 = io_inputs_1_payload_last;
        _zz_9 = io_inputs_1_payload_fragment_source;
        _zz_10 = io_inputs_1_payload_fragment_opcode;
        _zz_11 = io_inputs_1_payload_fragment_address;
        _zz_12 = io_inputs_1_payload_fragment_length;
        _zz_13 = io_inputs_1_payload_fragment_data;
        _zz_14 = io_inputs_1_payload_fragment_mask;
        _zz_15 = io_inputs_1_payload_fragment_context;
      end
      default : begin
        _zz_8 = io_inputs_2_payload_last;
        _zz_9 = io_inputs_2_payload_fragment_source;
        _zz_10 = io_inputs_2_payload_fragment_opcode;
        _zz_11 = io_inputs_2_payload_fragment_address;
        _zz_12 = io_inputs_2_payload_fragment_length;
        _zz_13 = io_inputs_2_payload_fragment_data;
        _zz_14 = io_inputs_2_payload_fragment_mask;
        _zz_15 = io_inputs_2_payload_fragment_context;
      end
    endcase
  end

  assign maskRouted_0 = (locked ? maskLocked_0 : maskProposal_0);
  assign maskRouted_1 = (locked ? maskLocked_1 : maskProposal_1);
  assign maskRouted_2 = (locked ? maskLocked_2 : maskProposal_2);
  assign _zz_1 = {io_inputs_2_valid,{io_inputs_1_valid,io_inputs_0_valid}};
  assign _zz_2 = {_zz_1,_zz_1};
  assign _zz_3 = (_zz_2 & (~ _zz_16));
  assign _zz_4 = (_zz_3[5 : 3] | _zz_3[2 : 0]);
  assign maskProposal_0 = _zz_19[0];
  assign maskProposal_1 = _zz_20[0];
  assign maskProposal_2 = _zz_21[0];
  assign io_output_valid = (((io_inputs_0_valid && maskRouted_0) || (io_inputs_1_valid && maskRouted_1)) || (io_inputs_2_valid && maskRouted_2));
  assign _zz_5 = {maskRouted_2,maskRouted_1};
  assign io_output_payload_last = _zz_8;
  assign io_output_payload_fragment_source = _zz_9;
  assign io_output_payload_fragment_opcode = _zz_10;
  assign io_output_payload_fragment_address = _zz_11;
  assign io_output_payload_fragment_length = _zz_12;
  assign io_output_payload_fragment_data = _zz_13;
  assign io_output_payload_fragment_mask = _zz_14;
  assign io_output_payload_fragment_context = _zz_15;
  assign io_inputs_0_ready = (maskRouted_0 && io_output_ready);
  assign io_inputs_1_ready = (maskRouted_1 && io_output_ready);
  assign io_inputs_2_ready = (maskRouted_2 && io_output_ready);
  assign io_chosenOH = {maskRouted_2,{maskRouted_1,maskRouted_0}};
  assign _zz_6 = io_chosenOH[1];
  assign _zz_7 = io_chosenOH[2];
  assign io_chosen = {_zz_7,_zz_6};
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      locked <= 1'b0;
      maskLocked_0 <= 1'b0;
      maskLocked_1 <= 1'b0;
      maskLocked_2 <= 1'b1;
    end else begin
      if(io_output_valid)begin
        maskLocked_0 <= maskRouted_0;
        maskLocked_1 <= maskRouted_1;
        maskLocked_2 <= maskRouted_2;
      end
      if(io_output_valid)begin
        locked <= 1'b1;
      end
      if(((io_output_valid && io_output_ready) && io_output_payload_last))begin
        locked <= 1'b0;
      end
    end
  end


endmodule

module StreamArbiter_6 (
  input               io_inputs_0_valid,
  output              io_inputs_0_ready,
  input               io_inputs_0_payload_last,
  input      [0:0]    io_inputs_0_payload_fragment_source,
  input      [0:0]    io_inputs_0_payload_fragment_opcode,
  input      [31:0]   io_inputs_0_payload_fragment_address,
  input      [5:0]    io_inputs_0_payload_fragment_length,
  input               io_inputs_1_valid,
  output              io_inputs_1_ready,
  input               io_inputs_1_payload_last,
  input      [0:0]    io_inputs_1_payload_fragment_source,
  input      [0:0]    io_inputs_1_payload_fragment_opcode,
  input      [31:0]   io_inputs_1_payload_fragment_address,
  input      [5:0]    io_inputs_1_payload_fragment_length,
  output              io_output_valid,
  input               io_output_ready,
  output              io_output_payload_last,
  output     [0:0]    io_output_payload_fragment_source,
  output     [0:0]    io_output_payload_fragment_opcode,
  output     [31:0]   io_output_payload_fragment_address,
  output     [5:0]    io_output_payload_fragment_length,
  output     [0:0]    io_chosen,
  output     [1:0]    io_chosenOH,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  wire       [3:0]    _zz_6;
  wire       [1:0]    _zz_7;
  wire       [3:0]    _zz_8;
  wire       [0:0]    _zz_9;
  wire       [0:0]    _zz_10;
  reg                 locked;
  wire                maskProposal_0;
  wire                maskProposal_1;
  reg                 maskLocked_0;
  reg                 maskLocked_1;
  wire                maskRouted_0;
  wire                maskRouted_1;
  wire       [1:0]    _zz_1;
  wire       [3:0]    _zz_2;
  wire       [3:0]    _zz_3;
  wire       [1:0]    _zz_4;
  wire                _zz_5;

  assign _zz_6 = (_zz_2 - _zz_8);
  assign _zz_7 = {maskLocked_0,maskLocked_1};
  assign _zz_8 = {2'd0, _zz_7};
  assign _zz_9 = _zz_4[0 : 0];
  assign _zz_10 = _zz_4[1 : 1];
  assign maskRouted_0 = (locked ? maskLocked_0 : maskProposal_0);
  assign maskRouted_1 = (locked ? maskLocked_1 : maskProposal_1);
  assign _zz_1 = {io_inputs_1_valid,io_inputs_0_valid};
  assign _zz_2 = {_zz_1,_zz_1};
  assign _zz_3 = (_zz_2 & (~ _zz_6));
  assign _zz_4 = (_zz_3[3 : 2] | _zz_3[1 : 0]);
  assign maskProposal_0 = _zz_9[0];
  assign maskProposal_1 = _zz_10[0];
  assign io_output_valid = ((io_inputs_0_valid && maskRouted_0) || (io_inputs_1_valid && maskRouted_1));
  assign io_output_payload_last = (maskRouted_0 ? io_inputs_0_payload_last : io_inputs_1_payload_last);
  assign io_output_payload_fragment_source = (maskRouted_0 ? io_inputs_0_payload_fragment_source : io_inputs_1_payload_fragment_source);
  assign io_output_payload_fragment_opcode = (maskRouted_0 ? io_inputs_0_payload_fragment_opcode : io_inputs_1_payload_fragment_opcode);
  assign io_output_payload_fragment_address = (maskRouted_0 ? io_inputs_0_payload_fragment_address : io_inputs_1_payload_fragment_address);
  assign io_output_payload_fragment_length = (maskRouted_0 ? io_inputs_0_payload_fragment_length : io_inputs_1_payload_fragment_length);
  assign io_inputs_0_ready = (maskRouted_0 && io_output_ready);
  assign io_inputs_1_ready = (maskRouted_1 && io_output_ready);
  assign io_chosenOH = {maskRouted_1,maskRouted_0};
  assign _zz_5 = io_chosenOH[1];
  assign io_chosen = _zz_5;
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      locked <= 1'b0;
      maskLocked_0 <= 1'b0;
      maskLocked_1 <= 1'b1;
    end else begin
      if(io_output_valid)begin
        maskLocked_0 <= maskRouted_0;
        maskLocked_1 <= maskRouted_1;
      end
      if(io_output_valid)begin
        locked <= 1'b1;
      end
      if(((io_output_valid && io_output_ready) && io_output_payload_last))begin
        locked <= 1'b0;
      end
    end
  end


endmodule

module StreamFork_3 (
  input               io_input_valid,
  output reg          io_input_ready,
  input               io_input_payload_last,
  input      [3:0]    io_input_payload_fragment_source,
  input      [0:0]    io_input_payload_fragment_opcode,
  input      [31:0]   io_input_payload_fragment_address,
  input      [5:0]    io_input_payload_fragment_length,
  input      [63:0]   io_input_payload_fragment_data,
  input      [7:0]    io_input_payload_fragment_mask,
  input      [42:0]   io_input_payload_fragment_context,
  output              io_outputs_0_valid,
  input               io_outputs_0_ready,
  output              io_outputs_0_payload_last,
  output     [3:0]    io_outputs_0_payload_fragment_source,
  output     [0:0]    io_outputs_0_payload_fragment_opcode,
  output     [31:0]   io_outputs_0_payload_fragment_address,
  output     [5:0]    io_outputs_0_payload_fragment_length,
  output     [63:0]   io_outputs_0_payload_fragment_data,
  output     [7:0]    io_outputs_0_payload_fragment_mask,
  output     [42:0]   io_outputs_0_payload_fragment_context,
  output              io_outputs_1_valid,
  input               io_outputs_1_ready,
  output              io_outputs_1_payload_last,
  output     [3:0]    io_outputs_1_payload_fragment_source,
  output     [0:0]    io_outputs_1_payload_fragment_opcode,
  output     [31:0]   io_outputs_1_payload_fragment_address,
  output     [5:0]    io_outputs_1_payload_fragment_length,
  output     [63:0]   io_outputs_1_payload_fragment_data,
  output     [7:0]    io_outputs_1_payload_fragment_mask,
  output     [42:0]   io_outputs_1_payload_fragment_context,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  reg                 _zz_1;
  reg                 _zz_2;

  always @ (*) begin
    io_input_ready = 1'b1;
    if(((! io_outputs_0_ready) && _zz_1))begin
      io_input_ready = 1'b0;
    end
    if(((! io_outputs_1_ready) && _zz_2))begin
      io_input_ready = 1'b0;
    end
  end

  assign io_outputs_0_valid = (io_input_valid && _zz_1);
  assign io_outputs_0_payload_last = io_input_payload_last;
  assign io_outputs_0_payload_fragment_source = io_input_payload_fragment_source;
  assign io_outputs_0_payload_fragment_opcode = io_input_payload_fragment_opcode;
  assign io_outputs_0_payload_fragment_address = io_input_payload_fragment_address;
  assign io_outputs_0_payload_fragment_length = io_input_payload_fragment_length;
  assign io_outputs_0_payload_fragment_data = io_input_payload_fragment_data;
  assign io_outputs_0_payload_fragment_mask = io_input_payload_fragment_mask;
  assign io_outputs_0_payload_fragment_context = io_input_payload_fragment_context;
  assign io_outputs_1_valid = (io_input_valid && _zz_2);
  assign io_outputs_1_payload_last = io_input_payload_last;
  assign io_outputs_1_payload_fragment_source = io_input_payload_fragment_source;
  assign io_outputs_1_payload_fragment_opcode = io_input_payload_fragment_opcode;
  assign io_outputs_1_payload_fragment_address = io_input_payload_fragment_address;
  assign io_outputs_1_payload_fragment_length = io_input_payload_fragment_length;
  assign io_outputs_1_payload_fragment_data = io_input_payload_fragment_data;
  assign io_outputs_1_payload_fragment_mask = io_input_payload_fragment_mask;
  assign io_outputs_1_payload_fragment_context = io_input_payload_fragment_context;
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      _zz_1 <= 1'b1;
      _zz_2 <= 1'b1;
    end else begin
      if((io_outputs_0_valid && io_outputs_0_ready))begin
        _zz_1 <= 1'b0;
      end
      if((io_outputs_1_valid && io_outputs_1_ready))begin
        _zz_2 <= 1'b0;
      end
      if(io_input_ready)begin
        _zz_1 <= 1'b1;
        _zz_2 <= 1'b1;
      end
    end
  end


endmodule

//StreamFifoMultiChannel_1 replaced by StreamFifoMultiChannel_1

module StreamFifoMultiChannel_1 (
  input      [5:0]    io_push_channel,
  output              io_push_full,
  input               io_push_stream_valid,
  output              io_push_stream_ready,
  input               io_push_stream_payload_last,
  input      [3:0]    io_push_stream_payload_fragment_source,
  input      [0:0]    io_push_stream_payload_fragment_opcode,
  input      [63:0]   io_push_stream_payload_fragment_data,
  input      [5:0]    io_pop_channel,
  output reg [5:0]    io_pop_empty,
  output              io_pop_stream_valid,
  input               io_pop_stream_ready,
  output              io_pop_stream_payload_last,
  output     [3:0]    io_pop_stream_payload_fragment_source,
  output     [0:0]    io_pop_stream_payload_fragment_opcode,
  output     [63:0]   io_pop_stream_payload_fragment_data,
  output     [5:0]    io_availability,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  wire       [69:0]   _zz_23;
  wire       [4:0]    _zz_24;
  reg        [4:0]    _zz_25;
  reg        [4:0]    _zz_26;
  wire                _zz_27;
  wire                _zz_28;
  wire                _zz_29;
  wire                _zz_30;
  wire                _zz_31;
  wire                _zz_32;
  wire                _zz_33;
  wire                _zz_34;
  wire                _zz_35;
  wire                _zz_36;
  wire                _zz_37;
  wire                _zz_38;
  wire                _zz_39;
  wire                _zz_40;
  wire                _zz_41;
  wire                _zz_42;
  wire                _zz_43;
  wire                _zz_44;
  wire                _zz_45;
  wire       [0:0]    _zz_46;
  wire       [5:0]    _zz_47;
  wire       [69:0]   _zz_48;
  wire       [4:0]    _zz_49;
  wire       [2:0]    _zz_50;
  wire       [2:0]    _zz_51;
  reg                 _zz_1;
  reg                 _zz_2;
  reg                 full;
  wire       [4:0]    pushNextEntry;
  wire       [4:0]    popNextEntry;
  reg                 channels_0_valid;
  reg        [4:0]    channels_0_headPtr;
  reg        [4:0]    channels_0_lastPtr;
  reg                 channels_0_lastFire;
  reg                 channels_1_valid;
  reg        [4:0]    channels_1_headPtr;
  reg        [4:0]    channels_1_lastPtr;
  reg                 channels_1_lastFire;
  reg                 channels_2_valid;
  reg        [4:0]    channels_2_headPtr;
  reg        [4:0]    channels_2_lastPtr;
  reg                 channels_2_lastFire;
  reg                 channels_3_valid;
  reg        [4:0]    channels_3_headPtr;
  reg        [4:0]    channels_3_lastPtr;
  reg                 channels_3_lastFire;
  reg                 channels_4_valid;
  reg        [4:0]    channels_4_headPtr;
  reg        [4:0]    channels_4_lastPtr;
  reg                 channels_4_lastFire;
  reg                 channels_5_valid;
  reg        [4:0]    channels_5_headPtr;
  reg        [4:0]    channels_5_lastPtr;
  reg                 channels_5_lastFire;
  wire                _zz_3;
  wire                _zz_4;
  wire                _zz_5;
  wire                _zz_6;
  wire                _zz_7;
  wire       [4:0]    pushLogic_previousAddress;
  wire                _zz_8;
  wire                _zz_9;
  wire                _zz_10;
  wire                _zz_11;
  wire                _zz_12;
  wire       [4:0]    popLogic_readAddress;
  wire       [69:0]   _zz_13;
  wire       [68:0]   _zz_14;
  reg        [4:0]    allocationByCounter_allocationPtr;
  reg                 allocationByCounter_onChannels_0_wasValid;
  reg        [4:0]    allocationByCounter_onChannels_0_availability;
  reg                 allocationByCounter_onChannels_1_wasValid;
  reg        [4:0]    allocationByCounter_onChannels_1_availability;
  reg                 allocationByCounter_onChannels_2_wasValid;
  reg        [4:0]    allocationByCounter_onChannels_2_availability;
  reg                 allocationByCounter_onChannels_3_wasValid;
  reg        [4:0]    allocationByCounter_onChannels_3_availability;
  reg                 allocationByCounter_onChannels_4_wasValid;
  reg        [4:0]    allocationByCounter_onChannels_4_availability;
  reg                 allocationByCounter_onChannels_5_wasValid;
  reg        [4:0]    allocationByCounter_onChannels_5_availability;
  wire                _zz_15;
  wire       [4:0]    _zz_16;
  wire                _zz_17;
  wire       [4:0]    _zz_18;
  wire                _zz_19;
  wire       [4:0]    _zz_20;
  wire                _zz_21;
  wire       [4:0]    _zz_22;
  wire                allocationByCounter_availabilityValid;
  wire       [4:0]    allocationByCounter_availabilityValue;
  (* ram_style = "distributed" *) reg [69:0] payloadRam [0:31];
  (* ram_style = "distributed" *) reg [4:0] nextRam [0:31];

  assign _zz_27 = (io_push_stream_valid && io_push_stream_ready);
  assign _zz_28 = ((io_pop_stream_valid && io_pop_stream_ready) && io_pop_channel[0]);
  assign _zz_29 = (channels_0_headPtr == channels_0_lastPtr);
  assign _zz_30 = ((io_pop_stream_valid && io_pop_stream_ready) && io_pop_channel[1]);
  assign _zz_31 = (channels_1_headPtr == channels_1_lastPtr);
  assign _zz_32 = ((io_pop_stream_valid && io_pop_stream_ready) && io_pop_channel[2]);
  assign _zz_33 = (channels_2_headPtr == channels_2_lastPtr);
  assign _zz_34 = ((io_pop_stream_valid && io_pop_stream_ready) && io_pop_channel[3]);
  assign _zz_35 = (channels_3_headPtr == channels_3_lastPtr);
  assign _zz_36 = ((io_pop_stream_valid && io_pop_stream_ready) && io_pop_channel[4]);
  assign _zz_37 = (channels_4_headPtr == channels_4_lastPtr);
  assign _zz_38 = ((io_pop_stream_valid && io_pop_stream_ready) && io_pop_channel[5]);
  assign _zz_39 = (channels_5_headPtr == channels_5_lastPtr);
  assign _zz_40 = ((io_push_stream_valid && io_push_stream_ready) && io_push_channel[0]);
  assign _zz_41 = ((io_push_stream_valid && io_push_stream_ready) && io_push_channel[1]);
  assign _zz_42 = ((io_push_stream_valid && io_push_stream_ready) && io_push_channel[2]);
  assign _zz_43 = ((io_push_stream_valid && io_push_stream_ready) && io_push_channel[3]);
  assign _zz_44 = ((io_push_stream_valid && io_push_stream_ready) && io_push_channel[4]);
  assign _zz_45 = ((io_push_stream_valid && io_push_stream_ready) && io_push_channel[5]);
  assign _zz_46 = _zz_13[0 : 0];
  assign _zz_47 = {1'd0, allocationByCounter_availabilityValue};
  assign _zz_48 = {{io_push_stream_payload_fragment_data,{io_push_stream_payload_fragment_opcode,io_push_stream_payload_fragment_source}},io_push_stream_payload_last};
  assign _zz_49 = pushNextEntry;
  assign _zz_50 = {_zz_7,{_zz_6,_zz_5}};
  assign _zz_51 = {_zz_12,{_zz_11,_zz_10}};
  always @ (posedge CLKOUT0) begin
    if(_zz_2) begin
      payloadRam[pushNextEntry] <= _zz_48;
    end
  end

  assign _zz_23 = payloadRam[popLogic_readAddress];
  always @ (posedge CLKOUT0) begin
    if(_zz_1) begin
      nextRam[pushLogic_previousAddress] <= _zz_49;
    end
  end

  assign _zz_24 = nextRam[popLogic_readAddress];
  always @(*) begin
    case(_zz_50)
      3'b000 : begin
        _zz_25 = channels_0_lastPtr;
      end
      3'b001 : begin
        _zz_25 = channels_1_lastPtr;
      end
      3'b010 : begin
        _zz_25 = channels_2_lastPtr;
      end
      3'b011 : begin
        _zz_25 = channels_3_lastPtr;
      end
      3'b100 : begin
        _zz_25 = channels_4_lastPtr;
      end
      default : begin
        _zz_25 = channels_5_lastPtr;
      end
    endcase
  end

  always @(*) begin
    case(_zz_51)
      3'b000 : begin
        _zz_26 = channels_0_headPtr;
      end
      3'b001 : begin
        _zz_26 = channels_1_headPtr;
      end
      3'b010 : begin
        _zz_26 = channels_2_headPtr;
      end
      3'b011 : begin
        _zz_26 = channels_3_headPtr;
      end
      3'b100 : begin
        _zz_26 = channels_4_headPtr;
      end
      default : begin
        _zz_26 = channels_5_headPtr;
      end
    endcase
  end

  always @ (*) begin
    _zz_1 = 1'b0;
    if(_zz_27)begin
      if((({channels_5_valid,{channels_4_valid,{channels_3_valid,{channels_2_valid,{channels_1_valid,channels_0_valid}}}}} & io_push_channel) != 6'h0))begin
        _zz_1 = 1'b1;
      end
    end
  end

  always @ (*) begin
    _zz_2 = 1'b0;
    if(_zz_27)begin
      _zz_2 = 1'b1;
    end
  end

  always @ (*) begin
    full = 1'b0;
    if((channels_0_valid && (allocationByCounter_allocationPtr == channels_0_headPtr)))begin
      full = 1'b1;
    end
    if((channels_1_valid && (allocationByCounter_allocationPtr == channels_1_headPtr)))begin
      full = 1'b1;
    end
    if((channels_2_valid && (allocationByCounter_allocationPtr == channels_2_headPtr)))begin
      full = 1'b1;
    end
    if((channels_3_valid && (allocationByCounter_allocationPtr == channels_3_headPtr)))begin
      full = 1'b1;
    end
    if((channels_4_valid && (allocationByCounter_allocationPtr == channels_4_headPtr)))begin
      full = 1'b1;
    end
    if((channels_5_valid && (allocationByCounter_allocationPtr == channels_5_headPtr)))begin
      full = 1'b1;
    end
  end

  assign io_push_full = full;
  assign io_push_stream_ready = (! full);
  always @ (*) begin
    channels_0_lastFire = 1'b0;
    if(_zz_28)begin
      if(_zz_29)begin
        channels_0_lastFire = 1'b1;
      end
    end
  end

  always @ (*) begin
    io_pop_empty[0] = (! channels_0_valid);
    io_pop_empty[1] = (! channels_1_valid);
    io_pop_empty[2] = (! channels_2_valid);
    io_pop_empty[3] = (! channels_3_valid);
    io_pop_empty[4] = (! channels_4_valid);
    io_pop_empty[5] = (! channels_5_valid);
  end

  always @ (*) begin
    channels_1_lastFire = 1'b0;
    if(_zz_30)begin
      if(_zz_31)begin
        channels_1_lastFire = 1'b1;
      end
    end
  end

  always @ (*) begin
    channels_2_lastFire = 1'b0;
    if(_zz_32)begin
      if(_zz_33)begin
        channels_2_lastFire = 1'b1;
      end
    end
  end

  always @ (*) begin
    channels_3_lastFire = 1'b0;
    if(_zz_34)begin
      if(_zz_35)begin
        channels_3_lastFire = 1'b1;
      end
    end
  end

  always @ (*) begin
    channels_4_lastFire = 1'b0;
    if(_zz_36)begin
      if(_zz_37)begin
        channels_4_lastFire = 1'b1;
      end
    end
  end

  always @ (*) begin
    channels_5_lastFire = 1'b0;
    if(_zz_38)begin
      if(_zz_39)begin
        channels_5_lastFire = 1'b1;
      end
    end
  end

  assign _zz_3 = io_push_channel[3];
  assign _zz_4 = io_push_channel[5];
  assign _zz_5 = ((io_push_channel[1] || _zz_3) || _zz_4);
  assign _zz_6 = (io_push_channel[2] || _zz_3);
  assign _zz_7 = (io_push_channel[4] || _zz_4);
  assign pushLogic_previousAddress = _zz_25;
  assign _zz_8 = io_pop_channel[3];
  assign _zz_9 = io_pop_channel[5];
  assign _zz_10 = ((io_pop_channel[1] || _zz_8) || _zz_9);
  assign _zz_11 = (io_pop_channel[2] || _zz_8);
  assign _zz_12 = (io_pop_channel[4] || _zz_9);
  assign popLogic_readAddress = _zz_26;
  assign io_pop_stream_valid = ((io_pop_channel & (~ io_pop_empty)) != 6'h0);
  assign _zz_13 = _zz_23;
  assign _zz_14 = _zz_13[69 : 1];
  assign io_pop_stream_payload_last = _zz_46[0];
  assign io_pop_stream_payload_fragment_source = _zz_14[3 : 0];
  assign io_pop_stream_payload_fragment_opcode = _zz_14[4 : 4];
  assign io_pop_stream_payload_fragment_data = _zz_14[68 : 5];
  assign popNextEntry = _zz_24;
  assign _zz_15 = (allocationByCounter_onChannels_0_wasValid || allocationByCounter_onChannels_1_wasValid);
  assign _zz_16 = ((allocationByCounter_onChannels_0_wasValid && ((! allocationByCounter_onChannels_1_wasValid) || (allocationByCounter_onChannels_0_availability < allocationByCounter_onChannels_1_availability))) ? allocationByCounter_onChannels_0_availability : allocationByCounter_onChannels_1_availability);
  assign _zz_17 = (allocationByCounter_onChannels_2_wasValid || allocationByCounter_onChannels_3_wasValid);
  assign _zz_18 = ((allocationByCounter_onChannels_2_wasValid && ((! allocationByCounter_onChannels_3_wasValid) || (allocationByCounter_onChannels_2_availability < allocationByCounter_onChannels_3_availability))) ? allocationByCounter_onChannels_2_availability : allocationByCounter_onChannels_3_availability);
  assign _zz_19 = (allocationByCounter_onChannels_4_wasValid || allocationByCounter_onChannels_5_wasValid);
  assign _zz_20 = ((allocationByCounter_onChannels_4_wasValid && ((! allocationByCounter_onChannels_5_wasValid) || (allocationByCounter_onChannels_4_availability < allocationByCounter_onChannels_5_availability))) ? allocationByCounter_onChannels_4_availability : allocationByCounter_onChannels_5_availability);
  assign _zz_21 = (_zz_15 || _zz_17);
  assign _zz_22 = ((_zz_15 && ((! _zz_17) || (_zz_16 < _zz_18))) ? _zz_16 : _zz_18);
  assign allocationByCounter_availabilityValid = (_zz_21 || _zz_19);
  assign allocationByCounter_availabilityValue = ((_zz_21 && ((! _zz_19) || (_zz_22 < _zz_20))) ? _zz_22 : _zz_20);
  assign io_availability = (allocationByCounter_availabilityValid ? _zz_47 : 6'h20);
  assign pushNextEntry = allocationByCounter_allocationPtr;
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      channels_0_valid <= 1'b0;
      channels_1_valid <= 1'b0;
      channels_2_valid <= 1'b0;
      channels_3_valid <= 1'b0;
      channels_4_valid <= 1'b0;
      channels_5_valid <= 1'b0;
      allocationByCounter_allocationPtr <= 5'h0;
      allocationByCounter_onChannels_0_wasValid <= 1'b0;
      allocationByCounter_onChannels_1_wasValid <= 1'b0;
      allocationByCounter_onChannels_2_wasValid <= 1'b0;
      allocationByCounter_onChannels_3_wasValid <= 1'b0;
      allocationByCounter_onChannels_4_wasValid <= 1'b0;
      allocationByCounter_onChannels_5_wasValid <= 1'b0;
    end else begin
      if(_zz_28)begin
        if(_zz_29)begin
          channels_0_valid <= 1'b0;
        end
      end
      if(_zz_40)begin
        channels_0_valid <= 1'b1;
      end
      if(_zz_30)begin
        if(_zz_31)begin
          channels_1_valid <= 1'b0;
        end
      end
      if(_zz_41)begin
        channels_1_valid <= 1'b1;
      end
      if(_zz_32)begin
        if(_zz_33)begin
          channels_2_valid <= 1'b0;
        end
      end
      if(_zz_42)begin
        channels_2_valid <= 1'b1;
      end
      if(_zz_34)begin
        if(_zz_35)begin
          channels_3_valid <= 1'b0;
        end
      end
      if(_zz_43)begin
        channels_3_valid <= 1'b1;
      end
      if(_zz_36)begin
        if(_zz_37)begin
          channels_4_valid <= 1'b0;
        end
      end
      if(_zz_44)begin
        channels_4_valid <= 1'b1;
      end
      if(_zz_38)begin
        if(_zz_39)begin
          channels_5_valid <= 1'b0;
        end
      end
      if(_zz_45)begin
        channels_5_valid <= 1'b1;
      end
      if((io_push_stream_valid && io_push_stream_ready))begin
        allocationByCounter_allocationPtr <= (allocationByCounter_allocationPtr + 5'h01);
      end
      allocationByCounter_onChannels_0_wasValid <= channels_0_valid;
      allocationByCounter_onChannels_1_wasValid <= channels_1_valid;
      allocationByCounter_onChannels_2_wasValid <= channels_2_valid;
      allocationByCounter_onChannels_3_wasValid <= channels_3_valid;
      allocationByCounter_onChannels_4_wasValid <= channels_4_valid;
      allocationByCounter_onChannels_5_wasValid <= channels_5_valid;
    end
  end

  always @ (posedge CLKOUT0) begin
    if(_zz_28)begin
      channels_0_headPtr <= popNextEntry;
    end
    if(((! channels_0_valid) || channels_0_lastFire))begin
      channels_0_headPtr <= pushNextEntry;
    end
    if(_zz_40)begin
      channels_0_lastPtr <= pushNextEntry;
    end
    if(_zz_30)begin
      channels_1_headPtr <= popNextEntry;
    end
    if(((! channels_1_valid) || channels_1_lastFire))begin
      channels_1_headPtr <= pushNextEntry;
    end
    if(_zz_41)begin
      channels_1_lastPtr <= pushNextEntry;
    end
    if(_zz_32)begin
      channels_2_headPtr <= popNextEntry;
    end
    if(((! channels_2_valid) || channels_2_lastFire))begin
      channels_2_headPtr <= pushNextEntry;
    end
    if(_zz_42)begin
      channels_2_lastPtr <= pushNextEntry;
    end
    if(_zz_34)begin
      channels_3_headPtr <= popNextEntry;
    end
    if(((! channels_3_valid) || channels_3_lastFire))begin
      channels_3_headPtr <= pushNextEntry;
    end
    if(_zz_43)begin
      channels_3_lastPtr <= pushNextEntry;
    end
    if(_zz_36)begin
      channels_4_headPtr <= popNextEntry;
    end
    if(((! channels_4_valid) || channels_4_lastFire))begin
      channels_4_headPtr <= pushNextEntry;
    end
    if(_zz_44)begin
      channels_4_lastPtr <= pushNextEntry;
    end
    if(_zz_38)begin
      channels_5_headPtr <= popNextEntry;
    end
    if(((! channels_5_valid) || channels_5_lastFire))begin
      channels_5_headPtr <= pushNextEntry;
    end
    if(_zz_45)begin
      channels_5_lastPtr <= pushNextEntry;
    end
    allocationByCounter_onChannels_0_availability <= (channels_0_headPtr - allocationByCounter_allocationPtr);
    allocationByCounter_onChannels_1_availability <= (channels_1_headPtr - allocationByCounter_allocationPtr);
    allocationByCounter_onChannels_2_availability <= (channels_2_headPtr - allocationByCounter_allocationPtr);
    allocationByCounter_onChannels_3_availability <= (channels_3_headPtr - allocationByCounter_allocationPtr);
    allocationByCounter_onChannels_4_availability <= (channels_4_headPtr - allocationByCounter_allocationPtr);
    allocationByCounter_onChannels_5_availability <= (channels_5_headPtr - allocationByCounter_allocationPtr);
  end


endmodule

module StreamFifoMultiChannel (
  input      [5:0]    io_push_channel,
  output              io_push_full,
  input               io_push_stream_valid,
  output              io_push_stream_ready,
  input      [1:0]    io_push_stream_payload_hits,
  input      [3:0]    io_push_stream_payload_beatCount,
  input      [42:0]   io_push_stream_payload_context,
  input      [5:0]    io_pop_channel,
  output reg [5:0]    io_pop_empty,
  output              io_pop_stream_valid,
  input               io_pop_stream_ready,
  output     [1:0]    io_pop_stream_payload_hits,
  output     [3:0]    io_pop_stream_payload_beatCount,
  output     [42:0]   io_pop_stream_payload_context,
  output     [5:0]    io_availability,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  wire       [48:0]   _zz_22;
  wire       [4:0]    _zz_23;
  reg        [4:0]    _zz_24;
  reg        [4:0]    _zz_25;
  wire                _zz_26;
  wire                _zz_27;
  wire                _zz_28;
  wire                _zz_29;
  wire                _zz_30;
  wire                _zz_31;
  wire                _zz_32;
  wire                _zz_33;
  wire                _zz_34;
  wire                _zz_35;
  wire                _zz_36;
  wire                _zz_37;
  wire                _zz_38;
  wire                _zz_39;
  wire                _zz_40;
  wire                _zz_41;
  wire                _zz_42;
  wire                _zz_43;
  wire                _zz_44;
  wire       [5:0]    _zz_45;
  wire       [48:0]   _zz_46;
  wire       [4:0]    _zz_47;
  wire       [2:0]    _zz_48;
  wire       [2:0]    _zz_49;
  reg                 _zz_1;
  reg                 _zz_2;
  reg                 full;
  wire       [4:0]    pushNextEntry;
  wire       [4:0]    popNextEntry;
  reg                 channels_0_valid;
  reg        [4:0]    channels_0_headPtr;
  reg        [4:0]    channels_0_lastPtr;
  reg                 channels_0_lastFire;
  reg                 channels_1_valid;
  reg        [4:0]    channels_1_headPtr;
  reg        [4:0]    channels_1_lastPtr;
  reg                 channels_1_lastFire;
  reg                 channels_2_valid;
  reg        [4:0]    channels_2_headPtr;
  reg        [4:0]    channels_2_lastPtr;
  reg                 channels_2_lastFire;
  reg                 channels_3_valid;
  reg        [4:0]    channels_3_headPtr;
  reg        [4:0]    channels_3_lastPtr;
  reg                 channels_3_lastFire;
  reg                 channels_4_valid;
  reg        [4:0]    channels_4_headPtr;
  reg        [4:0]    channels_4_lastPtr;
  reg                 channels_4_lastFire;
  reg                 channels_5_valid;
  reg        [4:0]    channels_5_headPtr;
  reg        [4:0]    channels_5_lastPtr;
  reg                 channels_5_lastFire;
  wire                _zz_3;
  wire                _zz_4;
  wire                _zz_5;
  wire                _zz_6;
  wire                _zz_7;
  wire       [4:0]    pushLogic_previousAddress;
  wire                _zz_8;
  wire                _zz_9;
  wire                _zz_10;
  wire                _zz_11;
  wire                _zz_12;
  wire       [4:0]    popLogic_readAddress;
  wire       [48:0]   _zz_13;
  reg        [4:0]    allocationByCounter_allocationPtr;
  reg                 allocationByCounter_onChannels_0_wasValid;
  reg        [4:0]    allocationByCounter_onChannels_0_availability;
  reg                 allocationByCounter_onChannels_1_wasValid;
  reg        [4:0]    allocationByCounter_onChannels_1_availability;
  reg                 allocationByCounter_onChannels_2_wasValid;
  reg        [4:0]    allocationByCounter_onChannels_2_availability;
  reg                 allocationByCounter_onChannels_3_wasValid;
  reg        [4:0]    allocationByCounter_onChannels_3_availability;
  reg                 allocationByCounter_onChannels_4_wasValid;
  reg        [4:0]    allocationByCounter_onChannels_4_availability;
  reg                 allocationByCounter_onChannels_5_wasValid;
  reg        [4:0]    allocationByCounter_onChannels_5_availability;
  wire                _zz_14;
  wire       [4:0]    _zz_15;
  wire                _zz_16;
  wire       [4:0]    _zz_17;
  wire                _zz_18;
  wire       [4:0]    _zz_19;
  wire                _zz_20;
  wire       [4:0]    _zz_21;
  wire                allocationByCounter_availabilityValid;
  wire       [4:0]    allocationByCounter_availabilityValue;
  (* ram_style = "distributed" *) reg [48:0] payloadRam [0:31];
  (* ram_style = "distributed" *) reg [4:0] nextRam [0:31];

  assign _zz_26 = (io_push_stream_valid && io_push_stream_ready);
  assign _zz_27 = ((io_pop_stream_valid && io_pop_stream_ready) && io_pop_channel[0]);
  assign _zz_28 = (channels_0_headPtr == channels_0_lastPtr);
  assign _zz_29 = ((io_pop_stream_valid && io_pop_stream_ready) && io_pop_channel[1]);
  assign _zz_30 = (channels_1_headPtr == channels_1_lastPtr);
  assign _zz_31 = ((io_pop_stream_valid && io_pop_stream_ready) && io_pop_channel[2]);
  assign _zz_32 = (channels_2_headPtr == channels_2_lastPtr);
  assign _zz_33 = ((io_pop_stream_valid && io_pop_stream_ready) && io_pop_channel[3]);
  assign _zz_34 = (channels_3_headPtr == channels_3_lastPtr);
  assign _zz_35 = ((io_pop_stream_valid && io_pop_stream_ready) && io_pop_channel[4]);
  assign _zz_36 = (channels_4_headPtr == channels_4_lastPtr);
  assign _zz_37 = ((io_pop_stream_valid && io_pop_stream_ready) && io_pop_channel[5]);
  assign _zz_38 = (channels_5_headPtr == channels_5_lastPtr);
  assign _zz_39 = ((io_push_stream_valid && io_push_stream_ready) && io_push_channel[0]);
  assign _zz_40 = ((io_push_stream_valid && io_push_stream_ready) && io_push_channel[1]);
  assign _zz_41 = ((io_push_stream_valid && io_push_stream_ready) && io_push_channel[2]);
  assign _zz_42 = ((io_push_stream_valid && io_push_stream_ready) && io_push_channel[3]);
  assign _zz_43 = ((io_push_stream_valid && io_push_stream_ready) && io_push_channel[4]);
  assign _zz_44 = ((io_push_stream_valid && io_push_stream_ready) && io_push_channel[5]);
  assign _zz_45 = {1'd0, allocationByCounter_availabilityValue};
  assign _zz_46 = {io_push_stream_payload_context,{io_push_stream_payload_beatCount,io_push_stream_payload_hits}};
  assign _zz_47 = pushNextEntry;
  assign _zz_48 = {_zz_7,{_zz_6,_zz_5}};
  assign _zz_49 = {_zz_12,{_zz_11,_zz_10}};
  always @ (posedge CLKOUT0) begin
    if(_zz_2) begin
      payloadRam[pushNextEntry] <= _zz_46;
    end
  end

  assign _zz_22 = payloadRam[popLogic_readAddress];
  always @ (posedge CLKOUT0) begin
    if(_zz_1) begin
      nextRam[pushLogic_previousAddress] <= _zz_47;
    end
  end

  assign _zz_23 = nextRam[popLogic_readAddress];
  always @(*) begin
    case(_zz_48)
      3'b000 : begin
        _zz_24 = channels_0_lastPtr;
      end
      3'b001 : begin
        _zz_24 = channels_1_lastPtr;
      end
      3'b010 : begin
        _zz_24 = channels_2_lastPtr;
      end
      3'b011 : begin
        _zz_24 = channels_3_lastPtr;
      end
      3'b100 : begin
        _zz_24 = channels_4_lastPtr;
      end
      default : begin
        _zz_24 = channels_5_lastPtr;
      end
    endcase
  end

  always @(*) begin
    case(_zz_49)
      3'b000 : begin
        _zz_25 = channels_0_headPtr;
      end
      3'b001 : begin
        _zz_25 = channels_1_headPtr;
      end
      3'b010 : begin
        _zz_25 = channels_2_headPtr;
      end
      3'b011 : begin
        _zz_25 = channels_3_headPtr;
      end
      3'b100 : begin
        _zz_25 = channels_4_headPtr;
      end
      default : begin
        _zz_25 = channels_5_headPtr;
      end
    endcase
  end

  always @ (*) begin
    _zz_1 = 1'b0;
    if(_zz_26)begin
      if((({channels_5_valid,{channels_4_valid,{channels_3_valid,{channels_2_valid,{channels_1_valid,channels_0_valid}}}}} & io_push_channel) != 6'h0))begin
        _zz_1 = 1'b1;
      end
    end
  end

  always @ (*) begin
    _zz_2 = 1'b0;
    if(_zz_26)begin
      _zz_2 = 1'b1;
    end
  end

  always @ (*) begin
    full = 1'b0;
    if((channels_0_valid && (allocationByCounter_allocationPtr == channels_0_headPtr)))begin
      full = 1'b1;
    end
    if((channels_1_valid && (allocationByCounter_allocationPtr == channels_1_headPtr)))begin
      full = 1'b1;
    end
    if((channels_2_valid && (allocationByCounter_allocationPtr == channels_2_headPtr)))begin
      full = 1'b1;
    end
    if((channels_3_valid && (allocationByCounter_allocationPtr == channels_3_headPtr)))begin
      full = 1'b1;
    end
    if((channels_4_valid && (allocationByCounter_allocationPtr == channels_4_headPtr)))begin
      full = 1'b1;
    end
    if((channels_5_valid && (allocationByCounter_allocationPtr == channels_5_headPtr)))begin
      full = 1'b1;
    end
  end

  assign io_push_full = full;
  assign io_push_stream_ready = (! full);
  always @ (*) begin
    channels_0_lastFire = 1'b0;
    if(_zz_27)begin
      if(_zz_28)begin
        channels_0_lastFire = 1'b1;
      end
    end
  end

  always @ (*) begin
    io_pop_empty[0] = (! channels_0_valid);
    io_pop_empty[1] = (! channels_1_valid);
    io_pop_empty[2] = (! channels_2_valid);
    io_pop_empty[3] = (! channels_3_valid);
    io_pop_empty[4] = (! channels_4_valid);
    io_pop_empty[5] = (! channels_5_valid);
  end

  always @ (*) begin
    channels_1_lastFire = 1'b0;
    if(_zz_29)begin
      if(_zz_30)begin
        channels_1_lastFire = 1'b1;
      end
    end
  end

  always @ (*) begin
    channels_2_lastFire = 1'b0;
    if(_zz_31)begin
      if(_zz_32)begin
        channels_2_lastFire = 1'b1;
      end
    end
  end

  always @ (*) begin
    channels_3_lastFire = 1'b0;
    if(_zz_33)begin
      if(_zz_34)begin
        channels_3_lastFire = 1'b1;
      end
    end
  end

  always @ (*) begin
    channels_4_lastFire = 1'b0;
    if(_zz_35)begin
      if(_zz_36)begin
        channels_4_lastFire = 1'b1;
      end
    end
  end

  always @ (*) begin
    channels_5_lastFire = 1'b0;
    if(_zz_37)begin
      if(_zz_38)begin
        channels_5_lastFire = 1'b1;
      end
    end
  end

  assign _zz_3 = io_push_channel[3];
  assign _zz_4 = io_push_channel[5];
  assign _zz_5 = ((io_push_channel[1] || _zz_3) || _zz_4);
  assign _zz_6 = (io_push_channel[2] || _zz_3);
  assign _zz_7 = (io_push_channel[4] || _zz_4);
  assign pushLogic_previousAddress = _zz_24;
  assign _zz_8 = io_pop_channel[3];
  assign _zz_9 = io_pop_channel[5];
  assign _zz_10 = ((io_pop_channel[1] || _zz_8) || _zz_9);
  assign _zz_11 = (io_pop_channel[2] || _zz_8);
  assign _zz_12 = (io_pop_channel[4] || _zz_9);
  assign popLogic_readAddress = _zz_25;
  assign io_pop_stream_valid = ((io_pop_channel & (~ io_pop_empty)) != 6'h0);
  assign _zz_13 = _zz_22;
  assign io_pop_stream_payload_hits = _zz_13[1 : 0];
  assign io_pop_stream_payload_beatCount = _zz_13[5 : 2];
  assign io_pop_stream_payload_context = _zz_13[48 : 6];
  assign popNextEntry = _zz_23;
  assign _zz_14 = (allocationByCounter_onChannels_0_wasValid || allocationByCounter_onChannels_1_wasValid);
  assign _zz_15 = ((allocationByCounter_onChannels_0_wasValid && ((! allocationByCounter_onChannels_1_wasValid) || (allocationByCounter_onChannels_0_availability < allocationByCounter_onChannels_1_availability))) ? allocationByCounter_onChannels_0_availability : allocationByCounter_onChannels_1_availability);
  assign _zz_16 = (allocationByCounter_onChannels_2_wasValid || allocationByCounter_onChannels_3_wasValid);
  assign _zz_17 = ((allocationByCounter_onChannels_2_wasValid && ((! allocationByCounter_onChannels_3_wasValid) || (allocationByCounter_onChannels_2_availability < allocationByCounter_onChannels_3_availability))) ? allocationByCounter_onChannels_2_availability : allocationByCounter_onChannels_3_availability);
  assign _zz_18 = (allocationByCounter_onChannels_4_wasValid || allocationByCounter_onChannels_5_wasValid);
  assign _zz_19 = ((allocationByCounter_onChannels_4_wasValid && ((! allocationByCounter_onChannels_5_wasValid) || (allocationByCounter_onChannels_4_availability < allocationByCounter_onChannels_5_availability))) ? allocationByCounter_onChannels_4_availability : allocationByCounter_onChannels_5_availability);
  assign _zz_20 = (_zz_14 || _zz_16);
  assign _zz_21 = ((_zz_14 && ((! _zz_16) || (_zz_15 < _zz_17))) ? _zz_15 : _zz_17);
  assign allocationByCounter_availabilityValid = (_zz_20 || _zz_18);
  assign allocationByCounter_availabilityValue = ((_zz_20 && ((! _zz_18) || (_zz_21 < _zz_19))) ? _zz_21 : _zz_19);
  assign io_availability = (allocationByCounter_availabilityValid ? _zz_45 : 6'h20);
  assign pushNextEntry = allocationByCounter_allocationPtr;
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      channels_0_valid <= 1'b0;
      channels_1_valid <= 1'b0;
      channels_2_valid <= 1'b0;
      channels_3_valid <= 1'b0;
      channels_4_valid <= 1'b0;
      channels_5_valid <= 1'b0;
      allocationByCounter_allocationPtr <= 5'h0;
      allocationByCounter_onChannels_0_wasValid <= 1'b0;
      allocationByCounter_onChannels_1_wasValid <= 1'b0;
      allocationByCounter_onChannels_2_wasValid <= 1'b0;
      allocationByCounter_onChannels_3_wasValid <= 1'b0;
      allocationByCounter_onChannels_4_wasValid <= 1'b0;
      allocationByCounter_onChannels_5_wasValid <= 1'b0;
    end else begin
      if(_zz_27)begin
        if(_zz_28)begin
          channels_0_valid <= 1'b0;
        end
      end
      if(_zz_39)begin
        channels_0_valid <= 1'b1;
      end
      if(_zz_29)begin
        if(_zz_30)begin
          channels_1_valid <= 1'b0;
        end
      end
      if(_zz_40)begin
        channels_1_valid <= 1'b1;
      end
      if(_zz_31)begin
        if(_zz_32)begin
          channels_2_valid <= 1'b0;
        end
      end
      if(_zz_41)begin
        channels_2_valid <= 1'b1;
      end
      if(_zz_33)begin
        if(_zz_34)begin
          channels_3_valid <= 1'b0;
        end
      end
      if(_zz_42)begin
        channels_3_valid <= 1'b1;
      end
      if(_zz_35)begin
        if(_zz_36)begin
          channels_4_valid <= 1'b0;
        end
      end
      if(_zz_43)begin
        channels_4_valid <= 1'b1;
      end
      if(_zz_37)begin
        if(_zz_38)begin
          channels_5_valid <= 1'b0;
        end
      end
      if(_zz_44)begin
        channels_5_valid <= 1'b1;
      end
      if((io_push_stream_valid && io_push_stream_ready))begin
        allocationByCounter_allocationPtr <= (allocationByCounter_allocationPtr + 5'h01);
      end
      allocationByCounter_onChannels_0_wasValid <= channels_0_valid;
      allocationByCounter_onChannels_1_wasValid <= channels_1_valid;
      allocationByCounter_onChannels_2_wasValid <= channels_2_valid;
      allocationByCounter_onChannels_3_wasValid <= channels_3_valid;
      allocationByCounter_onChannels_4_wasValid <= channels_4_valid;
      allocationByCounter_onChannels_5_wasValid <= channels_5_valid;
    end
  end

  always @ (posedge CLKOUT0) begin
    if(_zz_27)begin
      channels_0_headPtr <= popNextEntry;
    end
    if(((! channels_0_valid) || channels_0_lastFire))begin
      channels_0_headPtr <= pushNextEntry;
    end
    if(_zz_39)begin
      channels_0_lastPtr <= pushNextEntry;
    end
    if(_zz_29)begin
      channels_1_headPtr <= popNextEntry;
    end
    if(((! channels_1_valid) || channels_1_lastFire))begin
      channels_1_headPtr <= pushNextEntry;
    end
    if(_zz_40)begin
      channels_1_lastPtr <= pushNextEntry;
    end
    if(_zz_31)begin
      channels_2_headPtr <= popNextEntry;
    end
    if(((! channels_2_valid) || channels_2_lastFire))begin
      channels_2_headPtr <= pushNextEntry;
    end
    if(_zz_41)begin
      channels_2_lastPtr <= pushNextEntry;
    end
    if(_zz_33)begin
      channels_3_headPtr <= popNextEntry;
    end
    if(((! channels_3_valid) || channels_3_lastFire))begin
      channels_3_headPtr <= pushNextEntry;
    end
    if(_zz_42)begin
      channels_3_lastPtr <= pushNextEntry;
    end
    if(_zz_35)begin
      channels_4_headPtr <= popNextEntry;
    end
    if(((! channels_4_valid) || channels_4_lastFire))begin
      channels_4_headPtr <= pushNextEntry;
    end
    if(_zz_43)begin
      channels_4_lastPtr <= pushNextEntry;
    end
    if(_zz_37)begin
      channels_5_headPtr <= popNextEntry;
    end
    if(((! channels_5_valid) || channels_5_lastFire))begin
      channels_5_headPtr <= pushNextEntry;
    end
    if(_zz_44)begin
      channels_5_lastPtr <= pushNextEntry;
    end
    allocationByCounter_onChannels_0_availability <= (channels_0_headPtr - allocationByCounter_allocationPtr);
    allocationByCounter_onChannels_1_availability <= (channels_1_headPtr - allocationByCounter_allocationPtr);
    allocationByCounter_onChannels_2_availability <= (channels_2_headPtr - allocationByCounter_allocationPtr);
    allocationByCounter_onChannels_3_availability <= (channels_3_headPtr - allocationByCounter_allocationPtr);
    allocationByCounter_onChannels_4_availability <= (channels_4_headPtr - allocationByCounter_allocationPtr);
    allocationByCounter_onChannels_5_availability <= (channels_5_headPtr - allocationByCounter_allocationPtr);
  end


endmodule

module StreamArbiter_5 (
  input               io_inputs_0_valid,
  output              io_inputs_0_ready,
  input               io_inputs_0_payload_last,
  input      [0:0]    io_inputs_0_payload_fragment_source,
  input      [0:0]    io_inputs_0_payload_fragment_opcode,
  input      [23:0]   io_inputs_0_payload_fragment_address,
  input      [1:0]    io_inputs_0_payload_fragment_length,
  input      [31:0]   io_inputs_0_payload_fragment_data,
  input      [3:0]    io_inputs_0_payload_fragment_mask,
  input      [6:0]    io_inputs_0_payload_fragment_context,
  input               io_inputs_1_valid,
  output              io_inputs_1_ready,
  input               io_inputs_1_payload_last,
  input      [0:0]    io_inputs_1_payload_fragment_source,
  input      [0:0]    io_inputs_1_payload_fragment_opcode,
  input      [23:0]   io_inputs_1_payload_fragment_address,
  input      [1:0]    io_inputs_1_payload_fragment_length,
  input      [31:0]   io_inputs_1_payload_fragment_data,
  input      [3:0]    io_inputs_1_payload_fragment_mask,
  input      [6:0]    io_inputs_1_payload_fragment_context,
  output              io_output_valid,
  input               io_output_ready,
  output              io_output_payload_last,
  output     [0:0]    io_output_payload_fragment_source,
  output     [0:0]    io_output_payload_fragment_opcode,
  output     [23:0]   io_output_payload_fragment_address,
  output     [1:0]    io_output_payload_fragment_length,
  output     [31:0]   io_output_payload_fragment_data,
  output     [3:0]    io_output_payload_fragment_mask,
  output     [6:0]    io_output_payload_fragment_context,
  output     [0:0]    io_chosen,
  output     [1:0]    io_chosenOH,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  wire       [3:0]    _zz_6;
  wire       [1:0]    _zz_7;
  wire       [3:0]    _zz_8;
  wire       [0:0]    _zz_9;
  wire       [0:0]    _zz_10;
  reg                 locked;
  wire                maskProposal_0;
  wire                maskProposal_1;
  reg                 maskLocked_0;
  reg                 maskLocked_1;
  wire                maskRouted_0;
  wire                maskRouted_1;
  wire       [1:0]    _zz_1;
  wire       [3:0]    _zz_2;
  wire       [3:0]    _zz_3;
  wire       [1:0]    _zz_4;
  wire                _zz_5;

  assign _zz_6 = (_zz_2 - _zz_8);
  assign _zz_7 = {maskLocked_0,maskLocked_1};
  assign _zz_8 = {2'd0, _zz_7};
  assign _zz_9 = _zz_4[0 : 0];
  assign _zz_10 = _zz_4[1 : 1];
  assign maskRouted_0 = (locked ? maskLocked_0 : maskProposal_0);
  assign maskRouted_1 = (locked ? maskLocked_1 : maskProposal_1);
  assign _zz_1 = {io_inputs_1_valid,io_inputs_0_valid};
  assign _zz_2 = {_zz_1,_zz_1};
  assign _zz_3 = (_zz_2 & (~ _zz_6));
  assign _zz_4 = (_zz_3[3 : 2] | _zz_3[1 : 0]);
  assign maskProposal_0 = _zz_9[0];
  assign maskProposal_1 = _zz_10[0];
  assign io_output_valid = ((io_inputs_0_valid && maskRouted_0) || (io_inputs_1_valid && maskRouted_1));
  assign io_output_payload_last = (maskRouted_0 ? io_inputs_0_payload_last : io_inputs_1_payload_last);
  assign io_output_payload_fragment_source = (maskRouted_0 ? io_inputs_0_payload_fragment_source : io_inputs_1_payload_fragment_source);
  assign io_output_payload_fragment_opcode = (maskRouted_0 ? io_inputs_0_payload_fragment_opcode : io_inputs_1_payload_fragment_opcode);
  assign io_output_payload_fragment_address = (maskRouted_0 ? io_inputs_0_payload_fragment_address : io_inputs_1_payload_fragment_address);
  assign io_output_payload_fragment_length = (maskRouted_0 ? io_inputs_0_payload_fragment_length : io_inputs_1_payload_fragment_length);
  assign io_output_payload_fragment_data = (maskRouted_0 ? io_inputs_0_payload_fragment_data : io_inputs_1_payload_fragment_data);
  assign io_output_payload_fragment_mask = (maskRouted_0 ? io_inputs_0_payload_fragment_mask : io_inputs_1_payload_fragment_mask);
  assign io_output_payload_fragment_context = (maskRouted_0 ? io_inputs_0_payload_fragment_context : io_inputs_1_payload_fragment_context);
  assign io_inputs_0_ready = (maskRouted_0 && io_output_ready);
  assign io_inputs_1_ready = (maskRouted_1 && io_output_ready);
  assign io_chosenOH = {maskRouted_1,maskRouted_0};
  assign _zz_5 = io_chosenOH[1];
  assign io_chosen = _zz_5;
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      locked <= 1'b0;
      maskLocked_0 <= 1'b0;
      maskLocked_1 <= 1'b1;
    end else begin
      if(io_output_valid)begin
        maskLocked_0 <= maskRouted_0;
        maskLocked_1 <= maskRouted_1;
      end
      if(io_output_valid)begin
        locked <= 1'b1;
      end
      if(((io_output_valid && io_output_ready) && io_output_payload_last))begin
        locked <= 1'b0;
      end
    end
  end


endmodule

module StreamCCByToggle_1 (
  input               io_input_valid,
  output reg          io_input_ready,
  input               io_input_payload_last,
  input      [0:0]    io_input_payload_fragment_source,
  input      [0:0]    io_input_payload_fragment_opcode,
  input      [31:0]   io_input_payload_fragment_data,
  input      [6:0]    io_input_payload_fragment_context,
  output              io_output_valid,
  input               io_output_ready,
  output              io_output_payload_last,
  output     [0:0]    io_output_payload_fragment_source,
  output     [0:0]    io_output_payload_fragment_opcode,
  output     [31:0]   io_output_payload_fragment_data,
  output     [6:0]    io_output_payload_fragment_context,
  input               CLKOUT1,
  input               sdramCd_logic_outputReset,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  wire                outHitSignal_buffercc_io_dataOut;
  wire                pushArea_target_buffercc_io_dataOut;
  wire                _zz_1;
  wire                outHitSignal;
  wire                pushArea_hit;
  reg                 pushArea_target;
  reg                 pushArea_data_last;
  reg        [0:0]    pushArea_data_fragment_source;
  reg        [0:0]    pushArea_data_fragment_opcode;
  reg        [31:0]   pushArea_data_fragment_data;
  reg        [6:0]    pushArea_data_fragment_context;
  wire                popArea_target;
  reg                 popArea_hit;
  wire                popArea_stream_valid;
  wire                popArea_stream_ready;
  wire                popArea_stream_payload_last;
  wire       [0:0]    popArea_stream_payload_fragment_source;
  wire       [0:0]    popArea_stream_payload_fragment_opcode;
  wire       [31:0]   popArea_stream_payload_fragment_data;
  wire       [6:0]    popArea_stream_payload_fragment_context;
  wire                popArea_stream_m2sPipe_valid;
  wire                popArea_stream_m2sPipe_ready;
  wire                popArea_stream_m2sPipe_payload_last;
  wire       [0:0]    popArea_stream_m2sPipe_payload_fragment_source;
  wire       [0:0]    popArea_stream_m2sPipe_payload_fragment_opcode;
  wire       [31:0]   popArea_stream_m2sPipe_payload_fragment_data;
  wire       [6:0]    popArea_stream_m2sPipe_payload_fragment_context;
  reg                 popArea_stream_m2sPipe_rValid;
  reg                 popArea_stream_m2sPipe_rData_last;
  reg        [0:0]    popArea_stream_m2sPipe_rData_fragment_source;
  reg        [0:0]    popArea_stream_m2sPipe_rData_fragment_opcode;
  reg        [31:0]   popArea_stream_m2sPipe_rData_fragment_data;
  reg        [6:0]    popArea_stream_m2sPipe_rData_fragment_context;

  assign _zz_1 = (io_input_valid && (pushArea_hit == pushArea_target));
  BufferCC_19 outHitSignal_buffercc (
    .io_dataIn                    (outHitSignal                      ), //i
    .io_dataOut                   (outHitSignal_buffercc_io_dataOut  ), //o
    .CLKOUT1                      (CLKOUT1                           ), //i
    .sdramCd_logic_outputReset    (sdramCd_logic_outputReset         )  //i
  );
  BufferCC_5 pushArea_target_buffercc (
    .io_dataIn                     (pushArea_target                      ), //i
    .io_dataOut                    (pushArea_target_buffercc_io_dataOut  ), //o
    .CLKOUT0                       (CLKOUT0                              ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset           )  //i
  );
  assign pushArea_hit = outHitSignal_buffercc_io_dataOut;
  always @ (*) begin
    io_input_ready = 1'b0;
    if(_zz_1)begin
      io_input_ready = 1'b1;
    end
  end

  assign popArea_target = pushArea_target_buffercc_io_dataOut;
  assign outHitSignal = popArea_hit;
  assign popArea_stream_valid = (popArea_target != popArea_hit);
  assign popArea_stream_payload_last = pushArea_data_last;
  assign popArea_stream_payload_fragment_source = pushArea_data_fragment_source;
  assign popArea_stream_payload_fragment_opcode = pushArea_data_fragment_opcode;
  assign popArea_stream_payload_fragment_data = pushArea_data_fragment_data;
  assign popArea_stream_payload_fragment_context = pushArea_data_fragment_context;
  assign popArea_stream_ready = ((1'b1 && (! popArea_stream_m2sPipe_valid)) || popArea_stream_m2sPipe_ready);
  assign popArea_stream_m2sPipe_valid = popArea_stream_m2sPipe_rValid;
  assign popArea_stream_m2sPipe_payload_last = popArea_stream_m2sPipe_rData_last;
  assign popArea_stream_m2sPipe_payload_fragment_source = popArea_stream_m2sPipe_rData_fragment_source;
  assign popArea_stream_m2sPipe_payload_fragment_opcode = popArea_stream_m2sPipe_rData_fragment_opcode;
  assign popArea_stream_m2sPipe_payload_fragment_data = popArea_stream_m2sPipe_rData_fragment_data;
  assign popArea_stream_m2sPipe_payload_fragment_context = popArea_stream_m2sPipe_rData_fragment_context;
  assign io_output_valid = popArea_stream_m2sPipe_valid;
  assign popArea_stream_m2sPipe_ready = io_output_ready;
  assign io_output_payload_last = popArea_stream_m2sPipe_payload_last;
  assign io_output_payload_fragment_source = popArea_stream_m2sPipe_payload_fragment_source;
  assign io_output_payload_fragment_opcode = popArea_stream_m2sPipe_payload_fragment_opcode;
  assign io_output_payload_fragment_data = popArea_stream_m2sPipe_payload_fragment_data;
  assign io_output_payload_fragment_context = popArea_stream_m2sPipe_payload_fragment_context;
  always @ (posedge CLKOUT1) begin
    if(sdramCd_logic_outputReset) begin
      pushArea_target <= 1'b0;
    end else begin
      if(_zz_1)begin
        pushArea_target <= (! pushArea_target);
      end
    end
  end

  always @ (posedge CLKOUT1) begin
    if(_zz_1)begin
      pushArea_data_last <= io_input_payload_last;
      pushArea_data_fragment_source <= io_input_payload_fragment_source;
      pushArea_data_fragment_opcode <= io_input_payload_fragment_opcode;
      pushArea_data_fragment_data <= io_input_payload_fragment_data;
      pushArea_data_fragment_context <= io_input_payload_fragment_context;
    end
  end

  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      popArea_hit <= 1'b0;
      popArea_stream_m2sPipe_rValid <= 1'b0;
    end else begin
      if((popArea_stream_valid && popArea_stream_ready))begin
        popArea_hit <= (! popArea_hit);
      end
      if(popArea_stream_ready)begin
        popArea_stream_m2sPipe_rValid <= popArea_stream_valid;
      end
    end
  end

  always @ (posedge CLKOUT0) begin
    if(popArea_stream_ready)begin
      popArea_stream_m2sPipe_rData_last <= popArea_stream_payload_last;
      popArea_stream_m2sPipe_rData_fragment_source <= popArea_stream_payload_fragment_source;
      popArea_stream_m2sPipe_rData_fragment_opcode <= popArea_stream_payload_fragment_opcode;
      popArea_stream_m2sPipe_rData_fragment_data <= popArea_stream_payload_fragment_data;
      popArea_stream_m2sPipe_rData_fragment_context <= popArea_stream_payload_fragment_context;
    end
  end


endmodule

module StreamCCByToggle (
  input               io_input_valid,
  output reg          io_input_ready,
  input               io_input_payload_last,
  input      [0:0]    io_input_payload_fragment_source,
  input      [0:0]    io_input_payload_fragment_opcode,
  input      [23:0]   io_input_payload_fragment_address,
  input      [1:0]    io_input_payload_fragment_length,
  input      [31:0]   io_input_payload_fragment_data,
  input      [3:0]    io_input_payload_fragment_mask,
  input      [6:0]    io_input_payload_fragment_context,
  output              io_output_valid,
  input               io_output_ready,
  output              io_output_payload_last,
  output     [0:0]    io_output_payload_fragment_source,
  output     [0:0]    io_output_payload_fragment_opcode,
  output     [23:0]   io_output_payload_fragment_address,
  output     [1:0]    io_output_payload_fragment_length,
  output     [31:0]   io_output_payload_fragment_data,
  output     [3:0]    io_output_payload_fragment_mask,
  output     [6:0]    io_output_payload_fragment_context,
  input               CLKOUT0,
  input               systemCd_logic_outputReset,
  input               CLKOUT1,
  input               sdramCd_logic_outputReset
);
  wire                outHitSignal_buffercc_io_dataOut;
  wire                pushArea_target_buffercc_io_dataOut;
  wire                _zz_1;
  wire                outHitSignal;
  wire                pushArea_hit;
  reg                 pushArea_target;
  reg                 pushArea_data_last;
  reg        [0:0]    pushArea_data_fragment_source;
  reg        [0:0]    pushArea_data_fragment_opcode;
  reg        [23:0]   pushArea_data_fragment_address;
  reg        [1:0]    pushArea_data_fragment_length;
  reg        [31:0]   pushArea_data_fragment_data;
  reg        [3:0]    pushArea_data_fragment_mask;
  reg        [6:0]    pushArea_data_fragment_context;
  wire                popArea_target;
  reg                 popArea_hit;
  wire                popArea_stream_valid;
  wire                popArea_stream_ready;
  wire                popArea_stream_payload_last;
  wire       [0:0]    popArea_stream_payload_fragment_source;
  wire       [0:0]    popArea_stream_payload_fragment_opcode;
  wire       [23:0]   popArea_stream_payload_fragment_address;
  wire       [1:0]    popArea_stream_payload_fragment_length;
  wire       [31:0]   popArea_stream_payload_fragment_data;
  wire       [3:0]    popArea_stream_payload_fragment_mask;
  wire       [6:0]    popArea_stream_payload_fragment_context;
  wire                popArea_stream_m2sPipe_valid;
  wire                popArea_stream_m2sPipe_ready;
  wire                popArea_stream_m2sPipe_payload_last;
  wire       [0:0]    popArea_stream_m2sPipe_payload_fragment_source;
  wire       [0:0]    popArea_stream_m2sPipe_payload_fragment_opcode;
  wire       [23:0]   popArea_stream_m2sPipe_payload_fragment_address;
  wire       [1:0]    popArea_stream_m2sPipe_payload_fragment_length;
  wire       [31:0]   popArea_stream_m2sPipe_payload_fragment_data;
  wire       [3:0]    popArea_stream_m2sPipe_payload_fragment_mask;
  wire       [6:0]    popArea_stream_m2sPipe_payload_fragment_context;
  reg                 popArea_stream_m2sPipe_rValid;
  reg                 popArea_stream_m2sPipe_rData_last;
  reg        [0:0]    popArea_stream_m2sPipe_rData_fragment_source;
  reg        [0:0]    popArea_stream_m2sPipe_rData_fragment_opcode;
  reg        [23:0]   popArea_stream_m2sPipe_rData_fragment_address;
  reg        [1:0]    popArea_stream_m2sPipe_rData_fragment_length;
  reg        [31:0]   popArea_stream_m2sPipe_rData_fragment_data;
  reg        [3:0]    popArea_stream_m2sPipe_rData_fragment_mask;
  reg        [6:0]    popArea_stream_m2sPipe_rData_fragment_context;

  assign _zz_1 = (io_input_valid && (pushArea_hit == pushArea_target));
  BufferCC_5 outHitSignal_buffercc (
    .io_dataIn                     (outHitSignal                      ), //i
    .io_dataOut                    (outHitSignal_buffercc_io_dataOut  ), //o
    .CLKOUT0                       (CLKOUT0                           ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset        )  //i
  );
  BufferCC_19 pushArea_target_buffercc (
    .io_dataIn                    (pushArea_target                      ), //i
    .io_dataOut                   (pushArea_target_buffercc_io_dataOut  ), //o
    .CLKOUT1                      (CLKOUT1                              ), //i
    .sdramCd_logic_outputReset    (sdramCd_logic_outputReset            )  //i
  );
  assign pushArea_hit = outHitSignal_buffercc_io_dataOut;
  always @ (*) begin
    io_input_ready = 1'b0;
    if(_zz_1)begin
      io_input_ready = 1'b1;
    end
  end

  assign popArea_target = pushArea_target_buffercc_io_dataOut;
  assign outHitSignal = popArea_hit;
  assign popArea_stream_valid = (popArea_target != popArea_hit);
  assign popArea_stream_payload_last = pushArea_data_last;
  assign popArea_stream_payload_fragment_source = pushArea_data_fragment_source;
  assign popArea_stream_payload_fragment_opcode = pushArea_data_fragment_opcode;
  assign popArea_stream_payload_fragment_address = pushArea_data_fragment_address;
  assign popArea_stream_payload_fragment_length = pushArea_data_fragment_length;
  assign popArea_stream_payload_fragment_data = pushArea_data_fragment_data;
  assign popArea_stream_payload_fragment_mask = pushArea_data_fragment_mask;
  assign popArea_stream_payload_fragment_context = pushArea_data_fragment_context;
  assign popArea_stream_ready = ((1'b1 && (! popArea_stream_m2sPipe_valid)) || popArea_stream_m2sPipe_ready);
  assign popArea_stream_m2sPipe_valid = popArea_stream_m2sPipe_rValid;
  assign popArea_stream_m2sPipe_payload_last = popArea_stream_m2sPipe_rData_last;
  assign popArea_stream_m2sPipe_payload_fragment_source = popArea_stream_m2sPipe_rData_fragment_source;
  assign popArea_stream_m2sPipe_payload_fragment_opcode = popArea_stream_m2sPipe_rData_fragment_opcode;
  assign popArea_stream_m2sPipe_payload_fragment_address = popArea_stream_m2sPipe_rData_fragment_address;
  assign popArea_stream_m2sPipe_payload_fragment_length = popArea_stream_m2sPipe_rData_fragment_length;
  assign popArea_stream_m2sPipe_payload_fragment_data = popArea_stream_m2sPipe_rData_fragment_data;
  assign popArea_stream_m2sPipe_payload_fragment_mask = popArea_stream_m2sPipe_rData_fragment_mask;
  assign popArea_stream_m2sPipe_payload_fragment_context = popArea_stream_m2sPipe_rData_fragment_context;
  assign io_output_valid = popArea_stream_m2sPipe_valid;
  assign popArea_stream_m2sPipe_ready = io_output_ready;
  assign io_output_payload_last = popArea_stream_m2sPipe_payload_last;
  assign io_output_payload_fragment_source = popArea_stream_m2sPipe_payload_fragment_source;
  assign io_output_payload_fragment_opcode = popArea_stream_m2sPipe_payload_fragment_opcode;
  assign io_output_payload_fragment_address = popArea_stream_m2sPipe_payload_fragment_address;
  assign io_output_payload_fragment_length = popArea_stream_m2sPipe_payload_fragment_length;
  assign io_output_payload_fragment_data = popArea_stream_m2sPipe_payload_fragment_data;
  assign io_output_payload_fragment_mask = popArea_stream_m2sPipe_payload_fragment_mask;
  assign io_output_payload_fragment_context = popArea_stream_m2sPipe_payload_fragment_context;
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      pushArea_target <= 1'b0;
    end else begin
      if(_zz_1)begin
        pushArea_target <= (! pushArea_target);
      end
    end
  end

  always @ (posedge CLKOUT0) begin
    if(_zz_1)begin
      pushArea_data_last <= io_input_payload_last;
      pushArea_data_fragment_source <= io_input_payload_fragment_source;
      pushArea_data_fragment_opcode <= io_input_payload_fragment_opcode;
      pushArea_data_fragment_address <= io_input_payload_fragment_address;
      pushArea_data_fragment_length <= io_input_payload_fragment_length;
      pushArea_data_fragment_data <= io_input_payload_fragment_data;
      pushArea_data_fragment_mask <= io_input_payload_fragment_mask;
      pushArea_data_fragment_context <= io_input_payload_fragment_context;
    end
  end

  always @ (posedge CLKOUT1) begin
    if(sdramCd_logic_outputReset) begin
      popArea_hit <= 1'b0;
      popArea_stream_m2sPipe_rValid <= 1'b0;
    end else begin
      if((popArea_stream_valid && popArea_stream_ready))begin
        popArea_hit <= (! popArea_hit);
      end
      if(popArea_stream_ready)begin
        popArea_stream_m2sPipe_rValid <= popArea_stream_valid;
      end
    end
  end

  always @ (posedge CLKOUT1) begin
    if(popArea_stream_ready)begin
      popArea_stream_m2sPipe_rData_last <= popArea_stream_payload_last;
      popArea_stream_m2sPipe_rData_fragment_source <= popArea_stream_payload_fragment_source;
      popArea_stream_m2sPipe_rData_fragment_opcode <= popArea_stream_payload_fragment_opcode;
      popArea_stream_m2sPipe_rData_fragment_address <= popArea_stream_payload_fragment_address;
      popArea_stream_m2sPipe_rData_fragment_length <= popArea_stream_payload_fragment_length;
      popArea_stream_m2sPipe_rData_fragment_data <= popArea_stream_payload_fragment_data;
      popArea_stream_m2sPipe_rData_fragment_mask <= popArea_stream_payload_fragment_mask;
      popArea_stream_m2sPipe_rData_fragment_context <= popArea_stream_payload_fragment_context;
    end
  end


endmodule

module StreamArbiter_4 (
  input               io_inputs_0_valid,
  output              io_inputs_0_ready,
  input               io_inputs_0_payload_last,
  input      [4:0]    io_inputs_0_payload_fragment_source,
  input      [0:0]    io_inputs_0_payload_fragment_opcode,
  input      [26:0]   io_inputs_0_payload_fragment_address,
  input      [5:0]    io_inputs_0_payload_fragment_length,
  input      [63:0]   io_inputs_0_payload_fragment_data,
  input      [7:0]    io_inputs_0_payload_fragment_mask,
  input               io_inputs_1_valid,
  output              io_inputs_1_ready,
  input               io_inputs_1_payload_last,
  input      [4:0]    io_inputs_1_payload_fragment_source,
  input      [0:0]    io_inputs_1_payload_fragment_opcode,
  input      [26:0]   io_inputs_1_payload_fragment_address,
  input      [5:0]    io_inputs_1_payload_fragment_length,
  input      [63:0]   io_inputs_1_payload_fragment_data,
  input      [7:0]    io_inputs_1_payload_fragment_mask,
  output              io_output_valid,
  input               io_output_ready,
  output              io_output_payload_last,
  output     [4:0]    io_output_payload_fragment_source,
  output     [0:0]    io_output_payload_fragment_opcode,
  output     [26:0]   io_output_payload_fragment_address,
  output     [5:0]    io_output_payload_fragment_length,
  output     [63:0]   io_output_payload_fragment_data,
  output     [7:0]    io_output_payload_fragment_mask,
  output     [0:0]    io_chosen,
  output     [1:0]    io_chosenOH,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  wire       [3:0]    _zz_6;
  wire       [1:0]    _zz_7;
  wire       [3:0]    _zz_8;
  wire       [0:0]    _zz_9;
  wire       [0:0]    _zz_10;
  reg                 locked;
  wire                maskProposal_0;
  wire                maskProposal_1;
  reg                 maskLocked_0;
  reg                 maskLocked_1;
  wire                maskRouted_0;
  wire                maskRouted_1;
  wire       [1:0]    _zz_1;
  wire       [3:0]    _zz_2;
  wire       [3:0]    _zz_3;
  wire       [1:0]    _zz_4;
  wire                _zz_5;

  assign _zz_6 = (_zz_2 - _zz_8);
  assign _zz_7 = {maskLocked_0,maskLocked_1};
  assign _zz_8 = {2'd0, _zz_7};
  assign _zz_9 = _zz_4[0 : 0];
  assign _zz_10 = _zz_4[1 : 1];
  assign maskRouted_0 = (locked ? maskLocked_0 : maskProposal_0);
  assign maskRouted_1 = (locked ? maskLocked_1 : maskProposal_1);
  assign _zz_1 = {io_inputs_1_valid,io_inputs_0_valid};
  assign _zz_2 = {_zz_1,_zz_1};
  assign _zz_3 = (_zz_2 & (~ _zz_6));
  assign _zz_4 = (_zz_3[3 : 2] | _zz_3[1 : 0]);
  assign maskProposal_0 = _zz_9[0];
  assign maskProposal_1 = _zz_10[0];
  assign io_output_valid = ((io_inputs_0_valid && maskRouted_0) || (io_inputs_1_valid && maskRouted_1));
  assign io_output_payload_last = (maskRouted_0 ? io_inputs_0_payload_last : io_inputs_1_payload_last);
  assign io_output_payload_fragment_source = (maskRouted_0 ? io_inputs_0_payload_fragment_source : io_inputs_1_payload_fragment_source);
  assign io_output_payload_fragment_opcode = (maskRouted_0 ? io_inputs_0_payload_fragment_opcode : io_inputs_1_payload_fragment_opcode);
  assign io_output_payload_fragment_address = (maskRouted_0 ? io_inputs_0_payload_fragment_address : io_inputs_1_payload_fragment_address);
  assign io_output_payload_fragment_length = (maskRouted_0 ? io_inputs_0_payload_fragment_length : io_inputs_1_payload_fragment_length);
  assign io_output_payload_fragment_data = (maskRouted_0 ? io_inputs_0_payload_fragment_data : io_inputs_1_payload_fragment_data);
  assign io_output_payload_fragment_mask = (maskRouted_0 ? io_inputs_0_payload_fragment_mask : io_inputs_1_payload_fragment_mask);
  assign io_inputs_0_ready = (maskRouted_0 && io_output_ready);
  assign io_inputs_1_ready = (maskRouted_1 && io_output_ready);
  assign io_chosenOH = {maskRouted_1,maskRouted_0};
  assign _zz_5 = io_chosenOH[1];
  assign io_chosen = _zz_5;
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      locked <= 1'b0;
      maskLocked_0 <= 1'b0;
      maskLocked_1 <= 1'b1;
    end else begin
      if(io_output_valid)begin
        maskLocked_0 <= maskRouted_0;
        maskLocked_1 <= maskRouted_1;
      end
      if(io_output_valid)begin
        locked <= 1'b1;
      end
      if(((io_output_valid && io_output_ready) && io_output_payload_last))begin
        locked <= 1'b0;
      end
    end
  end


endmodule

module BufferCC_27 (
  input               io_dataIn,
  output              io_dataOut,
  input               CLKOUT2,
  input               clk270Rst
);
  reg                 buffers_0;
  reg                 buffers_1;

  assign io_dataOut = buffers_1;
  always @ (posedge CLKOUT2 or posedge clk270Rst) begin
    if (clk270Rst) begin
      buffers_0 <= 1'b1;
      buffers_1 <= 1'b1;
    end else begin
      buffers_0 <= io_dataIn;
      buffers_1 <= buffers_0;
    end
  end


endmodule

module BufferCC_26 (
  input               io_dataIn,
  output              io_dataOut,
  input               CLKOUT2,
  input               sdramCd_logic_outputReset
);
  reg                 buffers_0;
  reg                 buffers_1;

  assign io_dataOut = buffers_1;
  always @ (negedge CLKOUT2 or posedge sdramCd_logic_outputReset) begin
    if (sdramCd_logic_outputReset) begin
      buffers_0 <= 1'b1;
      buffers_1 <= 1'b1;
    end else begin
      buffers_0 <= io_dataIn;
      buffers_1 <= buffers_0;
    end
  end


endmodule

module Core (
  input      [0:0]    io_config_readLatency,
  input      [3:0]    io_config_RAS,
  input      [3:0]    io_config_RP,
  input      [3:0]    io_config_WR,
  input      [3:0]    io_config_RCD,
  input      [3:0]    io_config_WTR,
  input      [3:0]    io_config_RTP,
  input      [3:0]    io_config_RRD,
  input      [3:0]    io_config_RTW,
  input      [6:0]    io_config_RFC,
  input      [3:0]    io_config_ODT,
  input      [1:0]    io_config_ODTend,
  input      [3:0]    io_config_FAW,
  input      [15:0]   io_config_REF,
  input               io_config_autoRefresh,
  input               io_config_noActive,
  input      [0:0]    io_config_phase_active,
  input      [0:0]    io_config_phase_precharge,
  input      [0:0]    io_config_phase_read,
  input      [0:0]    io_config_phase_write,
  input               io_soft_cmd_valid,
  input      [12:0]   io_soft_cmd_payload_ADDR,
  input      [2:0]    io_soft_cmd_payload_BA,
  input               io_soft_cmd_payload_CASn,
  input               io_soft_cmd_payload_CSn,
  input               io_soft_cmd_payload_RASn,
  input               io_soft_cmd_payload_WEn,
  input               io_soft_CKE,
  input               io_ports_0_cmd_valid,
  output              io_ports_0_cmd_ready,
  input               io_ports_0_cmd_payload_write,
  input      [26:0]   io_ports_0_cmd_payload_address,
  input      [11:0]   io_ports_0_cmd_payload_context,
  input               io_ports_0_cmd_payload_burstLast,
  input      [2:0]    io_ports_0_cmd_payload_length,
  input               io_ports_0_writeData_valid,
  output              io_ports_0_writeData_ready,
  input      [63:0]   io_ports_0_writeData_payload_data,
  input      [7:0]    io_ports_0_writeData_payload_mask,
  input      [0:0]    io_ports_0_writeDataTocken,
  output              io_ports_0_rsp_valid,
  input               io_ports_0_rsp_ready,
  output              io_ports_0_rsp_payload_last,
  output     [63:0]   io_ports_0_rsp_payload_fragment_data,
  output     [11:0]   io_ports_0_rsp_payload_fragment_context,
  input      [0:0]    io_ports_0_writeDataAdded,
  output              io_phy_phases_0_CASn,
  output              io_phy_phases_0_CKE,
  output              io_phy_phases_0_CSn,
  output              io_phy_phases_0_RASn,
  output              io_phy_phases_0_WEn,
  output              io_phy_phases_0_ODT,
  output     [1:0]    io_phy_phases_0_DM_0,
  output     [1:0]    io_phy_phases_0_DM_1,
  output     [15:0]   io_phy_phases_0_DQw_0,
  output     [15:0]   io_phy_phases_0_DQw_1,
  input      [15:0]   io_phy_phases_0_DQr_0,
  input      [15:0]   io_phy_phases_0_DQr_1,
  output              io_phy_phases_1_CASn,
  output              io_phy_phases_1_CKE,
  output              io_phy_phases_1_CSn,
  output              io_phy_phases_1_RASn,
  output              io_phy_phases_1_WEn,
  output              io_phy_phases_1_ODT,
  output     [1:0]    io_phy_phases_1_DM_0,
  output     [1:0]    io_phy_phases_1_DM_1,
  output     [15:0]   io_phy_phases_1_DQw_0,
  output     [15:0]   io_phy_phases_1_DQw_1,
  input      [15:0]   io_phy_phases_1_DQr_0,
  input      [15:0]   io_phy_phases_1_DQr_1,
  output     [12:0]   io_phy_ADDR,
  output     [2:0]    io_phy_BA,
  output              io_phy_DQS_preamble,
  output              io_phy_DQS_active,
  output              io_phy_DQS_postamble,
  output              io_phy_writeEnable,
  output              io_phy_readEnable,
  input               io_phy_readValid,
  output              io_refresh,
  input               CLKOUT1,
  input               sdramCd_logic_outputReset
);
  wire                refresher_1_io_refresh_valid;
  wire                tasker_1_io_refresh_ready;
  wire                tasker_1_io_inputs_0_ready;
  wire                tasker_1_io_output_ports_0_read;
  wire                tasker_1_io_output_ports_0_write;
  wire                tasker_1_io_output_ports_0_active;
  wire                tasker_1_io_output_ports_0_precharge;
  wire                tasker_1_io_output_ports_0_last;
  wire       [0:0]    tasker_1_io_output_ports_0_address_byte;
  wire       [9:0]    tasker_1_io_output_ports_0_address_column;
  wire       [2:0]    tasker_1_io_output_ports_0_address_bank;
  wire       [12:0]   tasker_1_io_output_ports_0_address_row;
  wire       [11:0]   tasker_1_io_output_ports_0_context;
  wire                tasker_1_io_output_ports_1_read;
  wire                tasker_1_io_output_ports_1_write;
  wire                tasker_1_io_output_ports_1_active;
  wire                tasker_1_io_output_ports_1_precharge;
  wire                tasker_1_io_output_ports_1_last;
  wire       [0:0]    tasker_1_io_output_ports_1_address_byte;
  wire       [9:0]    tasker_1_io_output_ports_1_address_column;
  wire       [2:0]    tasker_1_io_output_ports_1_address_bank;
  wire       [12:0]   tasker_1_io_output_ports_1_address_row;
  wire       [11:0]   tasker_1_io_output_ports_1_context;
  wire                tasker_1_io_output_prechargeAll;
  wire                tasker_1_io_output_refresh;
  wire                backend_1_io_writeDatas_0_ready;
  wire                backend_1_io_phy_phases_0_CASn;
  wire                backend_1_io_phy_phases_0_CKE;
  wire                backend_1_io_phy_phases_0_CSn;
  wire       [1:0]    backend_1_io_phy_phases_0_DM_0;
  wire       [1:0]    backend_1_io_phy_phases_0_DM_1;
  wire                backend_1_io_phy_phases_0_RASn;
  wire                backend_1_io_phy_phases_0_WEn;
  wire       [15:0]   backend_1_io_phy_phases_0_DQw_0;
  wire       [15:0]   backend_1_io_phy_phases_0_DQw_1;
  wire                backend_1_io_phy_phases_0_ODT;
  wire                backend_1_io_phy_phases_1_CASn;
  wire                backend_1_io_phy_phases_1_CKE;
  wire                backend_1_io_phy_phases_1_CSn;
  wire       [1:0]    backend_1_io_phy_phases_1_DM_0;
  wire       [1:0]    backend_1_io_phy_phases_1_DM_1;
  wire                backend_1_io_phy_phases_1_RASn;
  wire                backend_1_io_phy_phases_1_WEn;
  wire       [15:0]   backend_1_io_phy_phases_1_DQw_0;
  wire       [15:0]   backend_1_io_phy_phases_1_DQw_1;
  wire                backend_1_io_phy_phases_1_ODT;
  wire       [12:0]   backend_1_io_phy_ADDR;
  wire       [2:0]    backend_1_io_phy_BA;
  wire                backend_1_io_phy_readEnable;
  wire                backend_1_io_phy_writeEnable;
  wire                backend_1_io_phy_DQS_preamble;
  wire                backend_1_io_phy_DQS_active;
  wire                backend_1_io_phy_DQS_postamble;
  wire                backend_1_io_outputs_0_valid;
  wire                backend_1_io_outputs_0_payload_last;
  wire       [63:0]   backend_1_io_outputs_0_payload_fragment_data;
  wire       [11:0]   backend_1_io_outputs_0_payload_fragment_context;
  reg        [0:0]    config_readLatency = 1'b0;
  reg        [3:0]    config_RAS = 4'b0000;
  reg        [3:0]    config_RP = 4'b0000;
  reg        [3:0]    config_WR = 4'b0000;
  reg        [3:0]    config_RCD = 4'b0000;
  reg        [3:0]    config_WTR = 4'b0000;
  reg        [3:0]    config_RTP = 4'b0000;
  reg        [3:0]    config_RRD = 4'b0000;
  reg        [3:0]    config_RTW = 4'b0000;
  reg        [6:0]    config_RFC = 7'b0000000;
  reg        [3:0]    config_ODT = 4'b0000;
  reg        [1:0]    config_ODTend = 2'b00;
  reg        [3:0]    config_FAW = 4'b0000;
  reg        [15:0]   config_REF = 16'b0000000000000000;
  reg                 config_autoRefresh = 0;
  reg                 config_noActive = 0;
  reg        [0:0]    config_phase_active = 1'b0;
  reg        [0:0]    config_phase_precharge = 1'b0;
  reg        [0:0]    config_phase_read = 1'b0;
  reg        [0:0]    config_phase_write = 1'b0;
  reg                 tasker_1_io_output_stage_ports_0_read;
  reg                 tasker_1_io_output_stage_ports_0_write;
  reg                 tasker_1_io_output_stage_ports_0_active;
  reg                 tasker_1_io_output_stage_ports_0_precharge;
  reg                 tasker_1_io_output_stage_ports_0_last;
  reg        [0:0]    tasker_1_io_output_stage_ports_0_address_byte;
  reg        [9:0]    tasker_1_io_output_stage_ports_0_address_column;
  reg        [2:0]    tasker_1_io_output_stage_ports_0_address_bank;
  reg        [12:0]   tasker_1_io_output_stage_ports_0_address_row;
  reg        [11:0]   tasker_1_io_output_stage_ports_0_context;
  reg                 tasker_1_io_output_stage_ports_1_read;
  reg                 tasker_1_io_output_stage_ports_1_write;
  reg                 tasker_1_io_output_stage_ports_1_active;
  reg                 tasker_1_io_output_stage_ports_1_precharge;
  reg                 tasker_1_io_output_stage_ports_1_last;
  reg        [0:0]    tasker_1_io_output_stage_ports_1_address_byte;
  reg        [9:0]    tasker_1_io_output_stage_ports_1_address_column;
  reg        [2:0]    tasker_1_io_output_stage_ports_1_address_bank;
  reg        [12:0]   tasker_1_io_output_stage_ports_1_address_row;
  reg        [11:0]   tasker_1_io_output_stage_ports_1_context;
  reg                 tasker_1_io_output_stage_prechargeAll;
  reg                 tasker_1_io_output_stage_refresh;

  Refresher refresher_1 (
    .io_config_readLatency        (config_readLatency            ), //i
    .io_config_RAS                (config_RAS[3:0]               ), //i
    .io_config_RP                 (config_RP[3:0]                ), //i
    .io_config_WR                 (config_WR[3:0]                ), //i
    .io_config_RCD                (config_RCD[3:0]               ), //i
    .io_config_WTR                (config_WTR[3:0]               ), //i
    .io_config_RTP                (config_RTP[3:0]               ), //i
    .io_config_RRD                (config_RRD[3:0]               ), //i
    .io_config_RTW                (config_RTW[3:0]               ), //i
    .io_config_RFC                (config_RFC[6:0]               ), //i
    .io_config_ODT                (config_ODT[3:0]               ), //i
    .io_config_ODTend             (config_ODTend[1:0]            ), //i
    .io_config_FAW                (config_FAW[3:0]               ), //i
    .io_config_REF                (config_REF[15:0]              ), //i
    .io_config_autoRefresh        (config_autoRefresh            ), //i
    .io_config_noActive           (config_noActive               ), //i
    .io_config_phase_active       (config_phase_active           ), //i
    .io_config_phase_precharge    (config_phase_precharge        ), //i
    .io_config_phase_read         (config_phase_read             ), //i
    .io_config_phase_write        (config_phase_write            ), //i
    .io_refresh_valid             (refresher_1_io_refresh_valid  ), //o
    .io_refresh_ready             (tasker_1_io_refresh_ready     ), //i
    .CLKOUT1                      (CLKOUT1                       ), //i
    .sdramCd_logic_outputReset    (sdramCd_logic_outputReset     )  //i
  );
  Tasker tasker_1 (
    .io_config_readLatency               (config_readLatency                              ), //i
    .io_config_RAS                       (config_RAS[3:0]                                 ), //i
    .io_config_RP                        (config_RP[3:0]                                  ), //i
    .io_config_WR                        (config_WR[3:0]                                  ), //i
    .io_config_RCD                       (config_RCD[3:0]                                 ), //i
    .io_config_WTR                       (config_WTR[3:0]                                 ), //i
    .io_config_RTP                       (config_RTP[3:0]                                 ), //i
    .io_config_RRD                       (config_RRD[3:0]                                 ), //i
    .io_config_RTW                       (config_RTW[3:0]                                 ), //i
    .io_config_RFC                       (config_RFC[6:0]                                 ), //i
    .io_config_ODT                       (config_ODT[3:0]                                 ), //i
    .io_config_ODTend                    (config_ODTend[1:0]                              ), //i
    .io_config_FAW                       (config_FAW[3:0]                                 ), //i
    .io_config_REF                       (config_REF[15:0]                                ), //i
    .io_config_autoRefresh               (config_autoRefresh                              ), //i
    .io_config_noActive                  (config_noActive                                 ), //i
    .io_config_phase_active              (config_phase_active                             ), //i
    .io_config_phase_precharge           (config_phase_precharge                          ), //i
    .io_config_phase_read                (config_phase_read                               ), //i
    .io_config_phase_write               (config_phase_write                              ), //i
    .io_refresh_valid                    (refresher_1_io_refresh_valid                    ), //i
    .io_refresh_ready                    (tasker_1_io_refresh_ready                       ), //o
    .io_inputs_0_valid                   (io_ports_0_cmd_valid                            ), //i
    .io_inputs_0_ready                   (tasker_1_io_inputs_0_ready                      ), //o
    .io_inputs_0_payload_write           (io_ports_0_cmd_payload_write                    ), //i
    .io_inputs_0_payload_address         (io_ports_0_cmd_payload_address[26:0]            ), //i
    .io_inputs_0_payload_context         (io_ports_0_cmd_payload_context[11:0]            ), //i
    .io_inputs_0_payload_burstLast       (io_ports_0_cmd_payload_burstLast                ), //i
    .io_inputs_0_payload_length          (io_ports_0_cmd_payload_length[2:0]              ), //i
    .io_writeDataTockens_0               (io_ports_0_writeDataTocken                      ), //i
    .io_output_ports_0_read              (tasker_1_io_output_ports_0_read                 ), //o
    .io_output_ports_0_write             (tasker_1_io_output_ports_0_write                ), //o
    .io_output_ports_0_active            (tasker_1_io_output_ports_0_active               ), //o
    .io_output_ports_0_precharge         (tasker_1_io_output_ports_0_precharge            ), //o
    .io_output_ports_0_last              (tasker_1_io_output_ports_0_last                 ), //o
    .io_output_ports_0_address_byte      (tasker_1_io_output_ports_0_address_byte         ), //o
    .io_output_ports_0_address_column    (tasker_1_io_output_ports_0_address_column[9:0]  ), //o
    .io_output_ports_0_address_bank      (tasker_1_io_output_ports_0_address_bank[2:0]    ), //o
    .io_output_ports_0_address_row       (tasker_1_io_output_ports_0_address_row[12:0]    ), //o
    .io_output_ports_0_context           (tasker_1_io_output_ports_0_context[11:0]        ), //o
    .io_output_ports_1_read              (tasker_1_io_output_ports_1_read                 ), //o
    .io_output_ports_1_write             (tasker_1_io_output_ports_1_write                ), //o
    .io_output_ports_1_active            (tasker_1_io_output_ports_1_active               ), //o
    .io_output_ports_1_precharge         (tasker_1_io_output_ports_1_precharge            ), //o
    .io_output_ports_1_last              (tasker_1_io_output_ports_1_last                 ), //o
    .io_output_ports_1_address_byte      (tasker_1_io_output_ports_1_address_byte         ), //o
    .io_output_ports_1_address_column    (tasker_1_io_output_ports_1_address_column[9:0]  ), //o
    .io_output_ports_1_address_bank      (tasker_1_io_output_ports_1_address_bank[2:0]    ), //o
    .io_output_ports_1_address_row       (tasker_1_io_output_ports_1_address_row[12:0]    ), //o
    .io_output_ports_1_context           (tasker_1_io_output_ports_1_context[11:0]        ), //o
    .io_output_prechargeAll              (tasker_1_io_output_prechargeAll                 ), //o
    .io_output_refresh                   (tasker_1_io_output_refresh                      ), //o
    .CLKOUT1                             (CLKOUT1                                         ), //i
    .sdramCd_logic_outputReset           (sdramCd_logic_outputReset                       )  //i
  );
  Backend backend_1 (
    .io_config_readLatency                    (config_readLatency                                     ), //i
    .io_config_RAS                            (config_RAS[3:0]                                        ), //i
    .io_config_RP                             (config_RP[3:0]                                         ), //i
    .io_config_WR                             (config_WR[3:0]                                         ), //i
    .io_config_RCD                            (config_RCD[3:0]                                        ), //i
    .io_config_WTR                            (config_WTR[3:0]                                        ), //i
    .io_config_RTP                            (config_RTP[3:0]                                        ), //i
    .io_config_RRD                            (config_RRD[3:0]                                        ), //i
    .io_config_RTW                            (config_RTW[3:0]                                        ), //i
    .io_config_RFC                            (config_RFC[6:0]                                        ), //i
    .io_config_ODT                            (config_ODT[3:0]                                        ), //i
    .io_config_ODTend                         (config_ODTend[1:0]                                     ), //i
    .io_config_FAW                            (config_FAW[3:0]                                        ), //i
    .io_config_REF                            (config_REF[15:0]                                       ), //i
    .io_config_autoRefresh                    (config_autoRefresh                                     ), //i
    .io_config_noActive                       (config_noActive                                        ), //i
    .io_config_phase_active                   (config_phase_active                                    ), //i
    .io_config_phase_precharge                (config_phase_precharge                                 ), //i
    .io_config_phase_read                     (config_phase_read                                      ), //i
    .io_config_phase_write                    (config_phase_write                                     ), //i
    .io_input_ports_0_read                    (tasker_1_io_output_stage_ports_0_read                  ), //i
    .io_input_ports_0_write                   (tasker_1_io_output_stage_ports_0_write                 ), //i
    .io_input_ports_0_active                  (tasker_1_io_output_stage_ports_0_active                ), //i
    .io_input_ports_0_precharge               (tasker_1_io_output_stage_ports_0_precharge             ), //i
    .io_input_ports_0_last                    (tasker_1_io_output_stage_ports_0_last                  ), //i
    .io_input_ports_0_address_byte            (tasker_1_io_output_stage_ports_0_address_byte          ), //i
    .io_input_ports_0_address_column          (tasker_1_io_output_stage_ports_0_address_column[9:0]   ), //i
    .io_input_ports_0_address_bank            (tasker_1_io_output_stage_ports_0_address_bank[2:0]     ), //i
    .io_input_ports_0_address_row             (tasker_1_io_output_stage_ports_0_address_row[12:0]     ), //i
    .io_input_ports_0_context                 (tasker_1_io_output_stage_ports_0_context[11:0]         ), //i
    .io_input_ports_1_read                    (tasker_1_io_output_stage_ports_1_read                  ), //i
    .io_input_ports_1_write                   (tasker_1_io_output_stage_ports_1_write                 ), //i
    .io_input_ports_1_active                  (tasker_1_io_output_stage_ports_1_active                ), //i
    .io_input_ports_1_precharge               (tasker_1_io_output_stage_ports_1_precharge             ), //i
    .io_input_ports_1_last                    (tasker_1_io_output_stage_ports_1_last                  ), //i
    .io_input_ports_1_address_byte            (tasker_1_io_output_stage_ports_1_address_byte          ), //i
    .io_input_ports_1_address_column          (tasker_1_io_output_stage_ports_1_address_column[9:0]   ), //i
    .io_input_ports_1_address_bank            (tasker_1_io_output_stage_ports_1_address_bank[2:0]     ), //i
    .io_input_ports_1_address_row             (tasker_1_io_output_stage_ports_1_address_row[12:0]     ), //i
    .io_input_ports_1_context                 (tasker_1_io_output_stage_ports_1_context[11:0]         ), //i
    .io_input_prechargeAll                    (tasker_1_io_output_stage_prechargeAll                  ), //i
    .io_input_refresh                         (tasker_1_io_output_stage_refresh                       ), //i
    .io_writeDatas_0_valid                    (io_ports_0_writeData_valid                             ), //i
    .io_writeDatas_0_ready                    (backend_1_io_writeDatas_0_ready                        ), //o
    .io_writeDatas_0_payload_data             (io_ports_0_writeData_payload_data[63:0]                ), //i
    .io_writeDatas_0_payload_mask             (io_ports_0_writeData_payload_mask[7:0]                 ), //i
    .io_phy_phases_0_CASn                     (backend_1_io_phy_phases_0_CASn                         ), //o
    .io_phy_phases_0_CKE                      (backend_1_io_phy_phases_0_CKE                          ), //o
    .io_phy_phases_0_CSn                      (backend_1_io_phy_phases_0_CSn                          ), //o
    .io_phy_phases_0_RASn                     (backend_1_io_phy_phases_0_RASn                         ), //o
    .io_phy_phases_0_WEn                      (backend_1_io_phy_phases_0_WEn                          ), //o
    .io_phy_phases_0_ODT                      (backend_1_io_phy_phases_0_ODT                          ), //o
    .io_phy_phases_0_DM_0                     (backend_1_io_phy_phases_0_DM_0[1:0]                    ), //o
    .io_phy_phases_0_DM_1                     (backend_1_io_phy_phases_0_DM_1[1:0]                    ), //o
    .io_phy_phases_0_DQw_0                    (backend_1_io_phy_phases_0_DQw_0[15:0]                  ), //o
    .io_phy_phases_0_DQw_1                    (backend_1_io_phy_phases_0_DQw_1[15:0]                  ), //o
    .io_phy_phases_0_DQr_0                    (io_phy_phases_0_DQr_0[15:0]                            ), //i
    .io_phy_phases_0_DQr_1                    (io_phy_phases_0_DQr_1[15:0]                            ), //i
    .io_phy_phases_1_CASn                     (backend_1_io_phy_phases_1_CASn                         ), //o
    .io_phy_phases_1_CKE                      (backend_1_io_phy_phases_1_CKE                          ), //o
    .io_phy_phases_1_CSn                      (backend_1_io_phy_phases_1_CSn                          ), //o
    .io_phy_phases_1_RASn                     (backend_1_io_phy_phases_1_RASn                         ), //o
    .io_phy_phases_1_WEn                      (backend_1_io_phy_phases_1_WEn                          ), //o
    .io_phy_phases_1_ODT                      (backend_1_io_phy_phases_1_ODT                          ), //o
    .io_phy_phases_1_DM_0                     (backend_1_io_phy_phases_1_DM_0[1:0]                    ), //o
    .io_phy_phases_1_DM_1                     (backend_1_io_phy_phases_1_DM_1[1:0]                    ), //o
    .io_phy_phases_1_DQw_0                    (backend_1_io_phy_phases_1_DQw_0[15:0]                  ), //o
    .io_phy_phases_1_DQw_1                    (backend_1_io_phy_phases_1_DQw_1[15:0]                  ), //o
    .io_phy_phases_1_DQr_0                    (io_phy_phases_1_DQr_0[15:0]                            ), //i
    .io_phy_phases_1_DQr_1                    (io_phy_phases_1_DQr_1[15:0]                            ), //i
    .io_phy_ADDR                              (backend_1_io_phy_ADDR[12:0]                            ), //o
    .io_phy_BA                                (backend_1_io_phy_BA[2:0]                               ), //o
    .io_phy_DQS_preamble                      (backend_1_io_phy_DQS_preamble                          ), //o
    .io_phy_DQS_active                        (backend_1_io_phy_DQS_active                            ), //o
    .io_phy_DQS_postamble                     (backend_1_io_phy_DQS_postamble                         ), //o
    .io_phy_writeEnable                       (backend_1_io_phy_writeEnable                           ), //o
    .io_phy_readEnable                        (backend_1_io_phy_readEnable                            ), //o
    .io_phy_readValid                         (io_phy_readValid                                       ), //i
    .io_outputs_0_valid                       (backend_1_io_outputs_0_valid                           ), //o
    .io_outputs_0_payload_last                (backend_1_io_outputs_0_payload_last                    ), //o
    .io_outputs_0_payload_fragment_data       (backend_1_io_outputs_0_payload_fragment_data[63:0]     ), //o
    .io_outputs_0_payload_fragment_context    (backend_1_io_outputs_0_payload_fragment_context[11:0]  ), //o
    .io_soft_cmd_valid                        (io_soft_cmd_valid                                      ), //i
    .io_soft_cmd_payload_ADDR                 (io_soft_cmd_payload_ADDR[12:0]                         ), //i
    .io_soft_cmd_payload_BA                   (io_soft_cmd_payload_BA[2:0]                            ), //i
    .io_soft_cmd_payload_CASn                 (io_soft_cmd_payload_CASn                               ), //i
    .io_soft_cmd_payload_CSn                  (io_soft_cmd_payload_CSn                                ), //i
    .io_soft_cmd_payload_RASn                 (io_soft_cmd_payload_RASn                               ), //i
    .io_soft_cmd_payload_WEn                  (io_soft_cmd_payload_WEn                                ), //i
    .io_soft_CKE                              (io_soft_CKE                                            ), //i
    .CLKOUT1                                  (CLKOUT1                                                ), //i
    .sdramCd_logic_outputReset                (sdramCd_logic_outputReset                              )  //i
  );
  assign io_refresh = refresher_1_io_refresh_valid;
  assign io_ports_0_cmd_ready = tasker_1_io_inputs_0_ready;
  assign io_ports_0_writeData_ready = backend_1_io_writeDatas_0_ready;
  assign io_phy_phases_0_CASn = backend_1_io_phy_phases_0_CASn;
  assign io_phy_phases_0_CKE = backend_1_io_phy_phases_0_CKE;
  assign io_phy_phases_0_CSn = backend_1_io_phy_phases_0_CSn;
  assign io_phy_phases_0_RASn = backend_1_io_phy_phases_0_RASn;
  assign io_phy_phases_0_WEn = backend_1_io_phy_phases_0_WEn;
  assign io_phy_phases_0_ODT = backend_1_io_phy_phases_0_ODT;
  assign io_phy_phases_0_DM_0 = backend_1_io_phy_phases_0_DM_0;
  assign io_phy_phases_0_DM_1 = backend_1_io_phy_phases_0_DM_1;
  assign io_phy_phases_0_DQw_0 = backend_1_io_phy_phases_0_DQw_0;
  assign io_phy_phases_0_DQw_1 = backend_1_io_phy_phases_0_DQw_1;
  assign io_phy_phases_1_CASn = backend_1_io_phy_phases_1_CASn;
  assign io_phy_phases_1_CKE = backend_1_io_phy_phases_1_CKE;
  assign io_phy_phases_1_CSn = backend_1_io_phy_phases_1_CSn;
  assign io_phy_phases_1_RASn = backend_1_io_phy_phases_1_RASn;
  assign io_phy_phases_1_WEn = backend_1_io_phy_phases_1_WEn;
  assign io_phy_phases_1_ODT = backend_1_io_phy_phases_1_ODT;
  assign io_phy_phases_1_DM_0 = backend_1_io_phy_phases_1_DM_0;
  assign io_phy_phases_1_DM_1 = backend_1_io_phy_phases_1_DM_1;
  assign io_phy_phases_1_DQw_0 = backend_1_io_phy_phases_1_DQw_0;
  assign io_phy_phases_1_DQw_1 = backend_1_io_phy_phases_1_DQw_1;
  assign io_phy_ADDR = backend_1_io_phy_ADDR;
  assign io_phy_BA = backend_1_io_phy_BA;
  assign io_phy_DQS_preamble = backend_1_io_phy_DQS_preamble;
  assign io_phy_DQS_active = backend_1_io_phy_DQS_active;
  assign io_phy_DQS_postamble = backend_1_io_phy_DQS_postamble;
  assign io_phy_writeEnable = backend_1_io_phy_writeEnable;
  assign io_phy_readEnable = backend_1_io_phy_readEnable;
  assign io_ports_0_rsp_valid = backend_1_io_outputs_0_valid;
  assign io_ports_0_rsp_payload_last = backend_1_io_outputs_0_payload_last;
  assign io_ports_0_rsp_payload_fragment_data = backend_1_io_outputs_0_payload_fragment_data;
  assign io_ports_0_rsp_payload_fragment_context = backend_1_io_outputs_0_payload_fragment_context;
  always @ (posedge CLKOUT1) begin
    config_readLatency <= io_config_readLatency;
    config_RAS <= io_config_RAS;
    config_RP <= io_config_RP;
    config_WR <= io_config_WR;
    config_RCD <= io_config_RCD;
    config_WTR <= io_config_WTR;
    config_RTP <= io_config_RTP;
    config_RRD <= io_config_RRD;
    config_RTW <= io_config_RTW;
    config_RFC <= io_config_RFC;
    config_ODT <= io_config_ODT;
    config_ODTend <= io_config_ODTend;
    config_FAW <= io_config_FAW;
    config_REF <= io_config_REF;
    config_autoRefresh <= io_config_autoRefresh;
    config_noActive <= io_config_noActive;
    config_phase_active <= io_config_phase_active;
    config_phase_precharge <= io_config_phase_precharge;
    config_phase_read <= io_config_phase_read;
    config_phase_write <= io_config_phase_write;
    tasker_1_io_output_stage_ports_0_last <= tasker_1_io_output_ports_0_last;
    tasker_1_io_output_stage_ports_0_address_byte <= tasker_1_io_output_ports_0_address_byte;
    tasker_1_io_output_stage_ports_0_address_column <= tasker_1_io_output_ports_0_address_column;
    tasker_1_io_output_stage_ports_0_address_bank <= tasker_1_io_output_ports_0_address_bank;
    tasker_1_io_output_stage_ports_0_address_row <= tasker_1_io_output_ports_0_address_row;
    tasker_1_io_output_stage_ports_0_context <= tasker_1_io_output_ports_0_context;
    tasker_1_io_output_stage_ports_1_last <= tasker_1_io_output_ports_1_last;
    tasker_1_io_output_stage_ports_1_address_byte <= tasker_1_io_output_ports_1_address_byte;
    tasker_1_io_output_stage_ports_1_address_column <= tasker_1_io_output_ports_1_address_column;
    tasker_1_io_output_stage_ports_1_address_bank <= tasker_1_io_output_ports_1_address_bank;
    tasker_1_io_output_stage_ports_1_address_row <= tasker_1_io_output_ports_1_address_row;
    tasker_1_io_output_stage_ports_1_context <= tasker_1_io_output_ports_1_context;
  end

  always @ (posedge CLKOUT1) begin
    if(sdramCd_logic_outputReset) begin
      tasker_1_io_output_stage_ports_0_read <= 1'b0;
      tasker_1_io_output_stage_ports_0_write <= 1'b0;
      tasker_1_io_output_stage_ports_0_precharge <= 1'b0;
      tasker_1_io_output_stage_ports_0_active <= 1'b0;
      tasker_1_io_output_stage_ports_1_read <= 1'b0;
      tasker_1_io_output_stage_ports_1_write <= 1'b0;
      tasker_1_io_output_stage_ports_1_precharge <= 1'b0;
      tasker_1_io_output_stage_ports_1_active <= 1'b0;
      tasker_1_io_output_stage_prechargeAll <= 1'b0;
      tasker_1_io_output_stage_refresh <= 1'b0;
    end else begin
      tasker_1_io_output_stage_ports_0_read <= tasker_1_io_output_ports_0_read;
      tasker_1_io_output_stage_ports_0_write <= tasker_1_io_output_ports_0_write;
      tasker_1_io_output_stage_ports_0_active <= tasker_1_io_output_ports_0_active;
      tasker_1_io_output_stage_ports_0_precharge <= tasker_1_io_output_ports_0_precharge;
      tasker_1_io_output_stage_ports_1_read <= tasker_1_io_output_ports_1_read;
      tasker_1_io_output_stage_ports_1_write <= tasker_1_io_output_ports_1_write;
      tasker_1_io_output_stage_ports_1_active <= tasker_1_io_output_ports_1_active;
      tasker_1_io_output_stage_ports_1_precharge <= tasker_1_io_output_ports_1_precharge;
      tasker_1_io_output_stage_prechargeAll <= tasker_1_io_output_prechargeAll;
      tasker_1_io_output_stage_refresh <= tasker_1_io_output_refresh;
    end
  end


endmodule

module BmbAdapter (
  input               io_refresh,
  input               io_input_cmd_valid,
  output              io_input_cmd_ready,
  input               io_input_cmd_payload_last,
  input      [4:0]    io_input_cmd_payload_fragment_source,
  input      [0:0]    io_input_cmd_payload_fragment_opcode,
  input      [26:0]   io_input_cmd_payload_fragment_address,
  input      [5:0]    io_input_cmd_payload_fragment_length,
  input      [63:0]   io_input_cmd_payload_fragment_data,
  input      [7:0]    io_input_cmd_payload_fragment_mask,
  output              io_input_rsp_valid,
  input               io_input_rsp_ready,
  output              io_input_rsp_payload_last,
  output     [4:0]    io_input_rsp_payload_fragment_source,
  output     [0:0]    io_input_rsp_payload_fragment_opcode,
  output     [63:0]   io_input_rsp_payload_fragment_data,
  output              io_output_cmd_valid,
  input               io_output_cmd_ready,
  output              io_output_cmd_payload_write,
  output     [26:0]   io_output_cmd_payload_address,
  output     [11:0]   io_output_cmd_payload_context,
  output              io_output_cmd_payload_burstLast,
  output     [2:0]    io_output_cmd_payload_length,
  output              io_output_writeData_valid,
  input               io_output_writeData_ready,
  output     [63:0]   io_output_writeData_payload_data,
  output     [7:0]    io_output_writeData_payload_mask,
  output     [0:0]    io_output_writeDataTocken,
  input               io_output_rsp_valid,
  output              io_output_rsp_ready,
  input               io_output_rsp_payload_last,
  input      [63:0]   io_output_rsp_payload_fragment_data,
  input      [11:0]   io_output_rsp_payload_fragment_context,
  output     [0:0]    io_output_writeDataAdded,
  input               CLKOUT0,
  input               systemCd_logic_outputReset,
  input               CLKOUT1,
  input               sdramCd_logic_outputReset
);
  wire                _zz_8;
  wire                inputLogic_aligner_io_input_cmd_ready;
  wire                inputLogic_aligner_io_input_rsp_valid;
  wire                inputLogic_aligner_io_input_rsp_payload_last;
  wire       [4:0]    inputLogic_aligner_io_input_rsp_payload_fragment_source;
  wire       [0:0]    inputLogic_aligner_io_input_rsp_payload_fragment_opcode;
  wire       [63:0]   inputLogic_aligner_io_input_rsp_payload_fragment_data;
  wire                inputLogic_aligner_io_output_cmd_valid;
  wire                inputLogic_aligner_io_output_cmd_payload_last;
  wire       [0:0]    inputLogic_aligner_io_output_cmd_payload_fragment_opcode;
  wire       [26:0]   inputLogic_aligner_io_output_cmd_payload_fragment_address;
  wire       [6:0]    inputLogic_aligner_io_output_cmd_payload_fragment_length;
  wire       [63:0]   inputLogic_aligner_io_output_cmd_payload_fragment_data;
  wire       [7:0]    inputLogic_aligner_io_output_cmd_payload_fragment_mask;
  wire       [9:0]    inputLogic_aligner_io_output_cmd_payload_fragment_context;
  wire                inputLogic_aligner_io_output_rsp_ready;
  wire                inputLogic_spliter_io_input_cmd_ready;
  wire                inputLogic_spliter_io_input_rsp_valid;
  wire                inputLogic_spliter_io_input_rsp_payload_last;
  wire       [0:0]    inputLogic_spliter_io_input_rsp_payload_fragment_opcode;
  wire       [63:0]   inputLogic_spliter_io_input_rsp_payload_fragment_data;
  wire       [9:0]    inputLogic_spliter_io_input_rsp_payload_fragment_context;
  wire                inputLogic_spliter_io_output_cmd_valid;
  wire                inputLogic_spliter_io_output_cmd_payload_last;
  wire       [0:0]    inputLogic_spliter_io_output_cmd_payload_fragment_opcode;
  wire       [26:0]   inputLogic_spliter_io_output_cmd_payload_fragment_address;
  wire       [5:0]    inputLogic_spliter_io_output_cmd_payload_fragment_length;
  wire       [63:0]   inputLogic_spliter_io_output_cmd_payload_fragment_data;
  wire       [7:0]    inputLogic_spliter_io_output_cmd_payload_fragment_mask;
  wire       [11:0]   inputLogic_spliter_io_output_cmd_payload_fragment_context;
  wire                inputLogic_spliter_io_output_rsp_ready;
  wire                inputLogic_spliter_io_outputBurstLast;
  wire                inputLogic_converter_io_input_cmd_ready;
  wire                inputLogic_converter_io_input_rsp_valid;
  wire                inputLogic_converter_io_input_rsp_payload_last;
  wire       [0:0]    inputLogic_converter_io_input_rsp_payload_fragment_opcode;
  wire       [63:0]   inputLogic_converter_io_input_rsp_payload_fragment_data;
  wire       [11:0]   inputLogic_converter_io_input_rsp_payload_fragment_context;
  wire       [0:0]    inputLogic_converter_io_output_writeDataTocken;
  wire                inputLogic_converter_io_output_cmd_valid;
  wire                inputLogic_converter_io_output_cmd_payload_write;
  wire       [26:0]   inputLogic_converter_io_output_cmd_payload_address;
  wire       [11:0]   inputLogic_converter_io_output_cmd_payload_context;
  wire                inputLogic_converter_io_output_cmd_payload_burstLast;
  wire       [2:0]    inputLogic_converter_io_output_cmd_payload_length;
  wire                inputLogic_converter_io_output_writeData_valid;
  wire       [63:0]   inputLogic_converter_io_output_writeData_payload_data;
  wire       [7:0]    inputLogic_converter_io_output_writeData_payload_mask;
  wire       [0:0]    inputLogic_converter_io_output_writeDataAdded;
  wire                inputLogic_converter_io_output_rsp_ready;
  wire                inputLogic_converter_io_output_cmd_queue_io_push_ready;
  wire                inputLogic_converter_io_output_cmd_queue_io_pop_valid;
  wire                inputLogic_converter_io_output_cmd_queue_io_pop_payload_write;
  wire       [26:0]   inputLogic_converter_io_output_cmd_queue_io_pop_payload_address;
  wire       [11:0]   inputLogic_converter_io_output_cmd_queue_io_pop_payload_context;
  wire                inputLogic_converter_io_output_cmd_queue_io_pop_payload_burstLast;
  wire       [2:0]    inputLogic_converter_io_output_cmd_queue_io_pop_payload_length;
  wire       [4:0]    inputLogic_converter_io_output_cmd_queue_io_pushOccupancy;
  wire       [4:0]    inputLogic_converter_io_output_cmd_queue_io_popOccupancy;
  wire                io_output_rsp_queue_io_push_ready;
  wire                io_output_rsp_queue_io_pop_valid;
  wire                io_output_rsp_queue_io_pop_payload_last;
  wire       [63:0]   io_output_rsp_queue_io_pop_payload_fragment_data;
  wire       [11:0]   io_output_rsp_queue_io_pop_payload_fragment_context;
  wire       [5:0]    io_output_rsp_queue_io_pushOccupancy;
  wire       [5:0]    io_output_rsp_queue_io_popOccupancy;
  wire                asyncBuffer_writeData_fifo_io_push_ready;
  wire                asyncBuffer_writeData_fifo_io_pop_valid;
  wire       [63:0]   asyncBuffer_writeData_fifo_io_pop_payload_data;
  wire       [7:0]    asyncBuffer_writeData_fifo_io_pop_payload_mask;
  wire       [5:0]    asyncBuffer_writeData_fifo_io_pushOccupancy;
  wire       [5:0]    asyncBuffer_writeData_fifo_io_popOccupancy;
  wire       [5:0]    asyncBuffer_writeData_fifo__zz_14;
  wire                inputLogic_spliter_io_output_cmd_m2sPipe_valid;
  wire                inputLogic_spliter_io_output_cmd_m2sPipe_ready;
  wire                inputLogic_spliter_io_output_cmd_m2sPipe_payload_last;
  wire       [0:0]    inputLogic_spliter_io_output_cmd_m2sPipe_payload_fragment_opcode;
  wire       [26:0]   inputLogic_spliter_io_output_cmd_m2sPipe_payload_fragment_address;
  wire       [5:0]    inputLogic_spliter_io_output_cmd_m2sPipe_payload_fragment_length;
  wire       [63:0]   inputLogic_spliter_io_output_cmd_m2sPipe_payload_fragment_data;
  wire       [7:0]    inputLogic_spliter_io_output_cmd_m2sPipe_payload_fragment_mask;
  wire       [11:0]   inputLogic_spliter_io_output_cmd_m2sPipe_payload_fragment_context;
  reg                 inputLogic_spliter_io_output_cmd_m2sPipe_rValid;
  reg                 inputLogic_spliter_io_output_cmd_m2sPipe_rData_last;
  reg        [0:0]    inputLogic_spliter_io_output_cmd_m2sPipe_rData_fragment_opcode;
  reg        [26:0]   inputLogic_spliter_io_output_cmd_m2sPipe_rData_fragment_address;
  reg        [5:0]    inputLogic_spliter_io_output_cmd_m2sPipe_rData_fragment_length;
  reg        [63:0]   inputLogic_spliter_io_output_cmd_m2sPipe_rData_fragment_data;
  reg        [7:0]    inputLogic_spliter_io_output_cmd_m2sPipe_rData_fragment_mask;
  reg        [11:0]   inputLogic_spliter_io_output_cmd_m2sPipe_rData_fragment_context;
  wire                cmdAddress_valid;
  wire                cmdAddress_ready;
  wire                cmdAddress_payload_write;
  wire       [26:0]   cmdAddress_payload_address;
  wire       [11:0]   cmdAddress_payload_context;
  wire                cmdAddress_payload_burstLast;
  wire       [2:0]    cmdAddress_payload_length;
  wire                _zz_1;
  wire                _zz_2;
  wire                _zz_3;
  wire                _zz_4;
  wire                _zz_5;
  wire       [5:0]    asyncBuffer_writeData_pushCounter;
  reg        [5:0]    asyncBuffer_writeData_tockenCounter;
  wire                asyncBuffer_writeData_tockenIncrement;
  reg        [0:0]    _zz_6;
  wire                cmdAddress_m2sPipe_valid;
  wire                cmdAddress_m2sPipe_ready;
  wire                cmdAddress_m2sPipe_payload_write;
  wire       [26:0]   cmdAddress_m2sPipe_payload_address;
  wire       [11:0]   cmdAddress_m2sPipe_payload_context;
  wire                cmdAddress_m2sPipe_payload_burstLast;
  wire       [2:0]    cmdAddress_m2sPipe_payload_length;
  reg                 cmdAddress_m2sPipe_rValid;
  reg                 cmdAddress_m2sPipe_rData_write;
  reg        [26:0]   cmdAddress_m2sPipe_rData_address;
  reg        [11:0]   cmdAddress_m2sPipe_rData_context;
  reg                 cmdAddress_m2sPipe_rData_burstLast;
  reg        [2:0]    cmdAddress_m2sPipe_rData_length;
  reg                 io_refresh_regNext;
  wire                _zz_7;

  BmbAligner inputLogic_aligner (
    .io_input_cmd_valid                        (io_input_cmd_valid                                               ), //i
    .io_input_cmd_ready                        (inputLogic_aligner_io_input_cmd_ready                            ), //o
    .io_input_cmd_payload_last                 (io_input_cmd_payload_last                                        ), //i
    .io_input_cmd_payload_fragment_source      (io_input_cmd_payload_fragment_source[4:0]                        ), //i
    .io_input_cmd_payload_fragment_opcode      (io_input_cmd_payload_fragment_opcode                             ), //i
    .io_input_cmd_payload_fragment_address     (io_input_cmd_payload_fragment_address[26:0]                      ), //i
    .io_input_cmd_payload_fragment_length      (io_input_cmd_payload_fragment_length[5:0]                        ), //i
    .io_input_cmd_payload_fragment_data        (io_input_cmd_payload_fragment_data[63:0]                         ), //i
    .io_input_cmd_payload_fragment_mask        (io_input_cmd_payload_fragment_mask[7:0]                          ), //i
    .io_input_rsp_valid                        (inputLogic_aligner_io_input_rsp_valid                            ), //o
    .io_input_rsp_ready                        (io_input_rsp_ready                                               ), //i
    .io_input_rsp_payload_last                 (inputLogic_aligner_io_input_rsp_payload_last                     ), //o
    .io_input_rsp_payload_fragment_source      (inputLogic_aligner_io_input_rsp_payload_fragment_source[4:0]     ), //o
    .io_input_rsp_payload_fragment_opcode      (inputLogic_aligner_io_input_rsp_payload_fragment_opcode          ), //o
    .io_input_rsp_payload_fragment_data        (inputLogic_aligner_io_input_rsp_payload_fragment_data[63:0]      ), //o
    .io_output_cmd_valid                       (inputLogic_aligner_io_output_cmd_valid                           ), //o
    .io_output_cmd_ready                       (inputLogic_spliter_io_input_cmd_ready                            ), //i
    .io_output_cmd_payload_last                (inputLogic_aligner_io_output_cmd_payload_last                    ), //o
    .io_output_cmd_payload_fragment_opcode     (inputLogic_aligner_io_output_cmd_payload_fragment_opcode         ), //o
    .io_output_cmd_payload_fragment_address    (inputLogic_aligner_io_output_cmd_payload_fragment_address[26:0]  ), //o
    .io_output_cmd_payload_fragment_length     (inputLogic_aligner_io_output_cmd_payload_fragment_length[6:0]    ), //o
    .io_output_cmd_payload_fragment_data       (inputLogic_aligner_io_output_cmd_payload_fragment_data[63:0]     ), //o
    .io_output_cmd_payload_fragment_mask       (inputLogic_aligner_io_output_cmd_payload_fragment_mask[7:0]      ), //o
    .io_output_cmd_payload_fragment_context    (inputLogic_aligner_io_output_cmd_payload_fragment_context[9:0]   ), //o
    .io_output_rsp_valid                       (inputLogic_spliter_io_input_rsp_valid                            ), //i
    .io_output_rsp_ready                       (inputLogic_aligner_io_output_rsp_ready                           ), //o
    .io_output_rsp_payload_last                (inputLogic_spliter_io_input_rsp_payload_last                     ), //i
    .io_output_rsp_payload_fragment_opcode     (inputLogic_spliter_io_input_rsp_payload_fragment_opcode          ), //i
    .io_output_rsp_payload_fragment_data       (inputLogic_spliter_io_input_rsp_payload_fragment_data[63:0]      ), //i
    .io_output_rsp_payload_fragment_context    (inputLogic_spliter_io_input_rsp_payload_fragment_context[9:0]    ), //i
    .CLKOUT0                                   (CLKOUT0                                                          ), //i
    .systemCd_logic_outputReset                (systemCd_logic_outputReset                                       )  //i
  );
  BmbAlignedSpliter inputLogic_spliter (
    .io_input_cmd_valid                        (inputLogic_aligner_io_output_cmd_valid                            ), //i
    .io_input_cmd_ready                        (inputLogic_spliter_io_input_cmd_ready                             ), //o
    .io_input_cmd_payload_last                 (inputLogic_aligner_io_output_cmd_payload_last                     ), //i
    .io_input_cmd_payload_fragment_opcode      (inputLogic_aligner_io_output_cmd_payload_fragment_opcode          ), //i
    .io_input_cmd_payload_fragment_address     (inputLogic_aligner_io_output_cmd_payload_fragment_address[26:0]   ), //i
    .io_input_cmd_payload_fragment_length      (inputLogic_aligner_io_output_cmd_payload_fragment_length[6:0]     ), //i
    .io_input_cmd_payload_fragment_data        (inputLogic_aligner_io_output_cmd_payload_fragment_data[63:0]      ), //i
    .io_input_cmd_payload_fragment_mask        (inputLogic_aligner_io_output_cmd_payload_fragment_mask[7:0]       ), //i
    .io_input_cmd_payload_fragment_context     (inputLogic_aligner_io_output_cmd_payload_fragment_context[9:0]    ), //i
    .io_input_rsp_valid                        (inputLogic_spliter_io_input_rsp_valid                             ), //o
    .io_input_rsp_ready                        (inputLogic_aligner_io_output_rsp_ready                            ), //i
    .io_input_rsp_payload_last                 (inputLogic_spliter_io_input_rsp_payload_last                      ), //o
    .io_input_rsp_payload_fragment_opcode      (inputLogic_spliter_io_input_rsp_payload_fragment_opcode           ), //o
    .io_input_rsp_payload_fragment_data        (inputLogic_spliter_io_input_rsp_payload_fragment_data[63:0]       ), //o
    .io_input_rsp_payload_fragment_context     (inputLogic_spliter_io_input_rsp_payload_fragment_context[9:0]     ), //o
    .io_output_cmd_valid                       (inputLogic_spliter_io_output_cmd_valid                            ), //o
    .io_output_cmd_ready                       (_zz_8                                                             ), //i
    .io_output_cmd_payload_last                (inputLogic_spliter_io_output_cmd_payload_last                     ), //o
    .io_output_cmd_payload_fragment_opcode     (inputLogic_spliter_io_output_cmd_payload_fragment_opcode          ), //o
    .io_output_cmd_payload_fragment_address    (inputLogic_spliter_io_output_cmd_payload_fragment_address[26:0]   ), //o
    .io_output_cmd_payload_fragment_length     (inputLogic_spliter_io_output_cmd_payload_fragment_length[5:0]     ), //o
    .io_output_cmd_payload_fragment_data       (inputLogic_spliter_io_output_cmd_payload_fragment_data[63:0]      ), //o
    .io_output_cmd_payload_fragment_mask       (inputLogic_spliter_io_output_cmd_payload_fragment_mask[7:0]       ), //o
    .io_output_cmd_payload_fragment_context    (inputLogic_spliter_io_output_cmd_payload_fragment_context[11:0]   ), //o
    .io_output_rsp_valid                       (inputLogic_converter_io_input_rsp_valid                           ), //i
    .io_output_rsp_ready                       (inputLogic_spliter_io_output_rsp_ready                            ), //o
    .io_output_rsp_payload_last                (inputLogic_converter_io_input_rsp_payload_last                    ), //i
    .io_output_rsp_payload_fragment_opcode     (inputLogic_converter_io_input_rsp_payload_fragment_opcode         ), //i
    .io_output_rsp_payload_fragment_data       (inputLogic_converter_io_input_rsp_payload_fragment_data[63:0]     ), //i
    .io_output_rsp_payload_fragment_context    (inputLogic_converter_io_input_rsp_payload_fragment_context[11:0]  ), //i
    .io_outputBurstLast                        (inputLogic_spliter_io_outputBurstLast                             ), //o
    .CLKOUT0                                   (CLKOUT0                                                           ), //i
    .systemCd_logic_outputReset                (systemCd_logic_outputReset                                        )  //i
  );
  BmbToCorePort inputLogic_converter (
    .io_input_cmd_valid                        (inputLogic_spliter_io_output_cmd_m2sPipe_valid                           ), //i
    .io_input_cmd_ready                        (inputLogic_converter_io_input_cmd_ready                                  ), //o
    .io_input_cmd_payload_last                 (inputLogic_spliter_io_output_cmd_m2sPipe_payload_last                    ), //i
    .io_input_cmd_payload_fragment_opcode      (inputLogic_spliter_io_output_cmd_m2sPipe_payload_fragment_opcode         ), //i
    .io_input_cmd_payload_fragment_address     (inputLogic_spliter_io_output_cmd_m2sPipe_payload_fragment_address[26:0]  ), //i
    .io_input_cmd_payload_fragment_length      (inputLogic_spliter_io_output_cmd_m2sPipe_payload_fragment_length[5:0]    ), //i
    .io_input_cmd_payload_fragment_data        (inputLogic_spliter_io_output_cmd_m2sPipe_payload_fragment_data[63:0]     ), //i
    .io_input_cmd_payload_fragment_mask        (inputLogic_spliter_io_output_cmd_m2sPipe_payload_fragment_mask[7:0]      ), //i
    .io_input_cmd_payload_fragment_context     (inputLogic_spliter_io_output_cmd_m2sPipe_payload_fragment_context[11:0]  ), //i
    .io_input_rsp_valid                        (inputLogic_converter_io_input_rsp_valid                                  ), //o
    .io_input_rsp_ready                        (inputLogic_spliter_io_output_rsp_ready                                   ), //i
    .io_input_rsp_payload_last                 (inputLogic_converter_io_input_rsp_payload_last                           ), //o
    .io_input_rsp_payload_fragment_opcode      (inputLogic_converter_io_input_rsp_payload_fragment_opcode                ), //o
    .io_input_rsp_payload_fragment_data        (inputLogic_converter_io_input_rsp_payload_fragment_data[63:0]            ), //o
    .io_input_rsp_payload_fragment_context     (inputLogic_converter_io_input_rsp_payload_fragment_context[11:0]         ), //o
    .io_inputBurstLast                         (inputLogic_spliter_io_outputBurstLast                                    ), //i
    .io_output_cmd_valid                       (inputLogic_converter_io_output_cmd_valid                                 ), //o
    .io_output_cmd_ready                       (inputLogic_converter_io_output_cmd_queue_io_push_ready                   ), //i
    .io_output_cmd_payload_write               (inputLogic_converter_io_output_cmd_payload_write                         ), //o
    .io_output_cmd_payload_address             (inputLogic_converter_io_output_cmd_payload_address[26:0]                 ), //o
    .io_output_cmd_payload_context             (inputLogic_converter_io_output_cmd_payload_context[11:0]                 ), //o
    .io_output_cmd_payload_burstLast           (inputLogic_converter_io_output_cmd_payload_burstLast                     ), //o
    .io_output_cmd_payload_length              (inputLogic_converter_io_output_cmd_payload_length[2:0]                   ), //o
    .io_output_writeData_valid                 (inputLogic_converter_io_output_writeData_valid                           ), //o
    .io_output_writeData_ready                 (asyncBuffer_writeData_fifo_io_push_ready                                 ), //i
    .io_output_writeData_payload_data          (inputLogic_converter_io_output_writeData_payload_data[63:0]              ), //o
    .io_output_writeData_payload_mask          (inputLogic_converter_io_output_writeData_payload_mask[7:0]               ), //o
    .io_output_writeDataTocken                 (inputLogic_converter_io_output_writeDataTocken                           ), //o
    .io_output_rsp_valid                       (io_output_rsp_queue_io_pop_valid                                         ), //i
    .io_output_rsp_ready                       (inputLogic_converter_io_output_rsp_ready                                 ), //o
    .io_output_rsp_payload_last                (io_output_rsp_queue_io_pop_payload_last                                  ), //i
    .io_output_rsp_payload_fragment_data       (io_output_rsp_queue_io_pop_payload_fragment_data[63:0]                   ), //i
    .io_output_rsp_payload_fragment_context    (io_output_rsp_queue_io_pop_payload_fragment_context[11:0]                ), //i
    .io_output_writeDataAdded                  (inputLogic_converter_io_output_writeDataAdded                            ), //o
    .CLKOUT0                                   (CLKOUT0                                                                  ), //i
    .systemCd_logic_outputReset                (systemCd_logic_outputReset                                               )  //i
  );
  StreamFifoCC inputLogic_converter_io_output_cmd_queue (
    .io_push_valid                 (inputLogic_converter_io_output_cmd_valid                               ), //i
    .io_push_ready                 (inputLogic_converter_io_output_cmd_queue_io_push_ready                 ), //o
    .io_push_payload_write         (inputLogic_converter_io_output_cmd_payload_write                       ), //i
    .io_push_payload_address       (inputLogic_converter_io_output_cmd_payload_address[26:0]               ), //i
    .io_push_payload_context       (inputLogic_converter_io_output_cmd_payload_context[11:0]               ), //i
    .io_push_payload_burstLast     (inputLogic_converter_io_output_cmd_payload_burstLast                   ), //i
    .io_push_payload_length        (inputLogic_converter_io_output_cmd_payload_length[2:0]                 ), //i
    .io_pop_valid                  (inputLogic_converter_io_output_cmd_queue_io_pop_valid                  ), //o
    .io_pop_ready                  (cmdAddress_ready                                                       ), //i
    .io_pop_payload_write          (inputLogic_converter_io_output_cmd_queue_io_pop_payload_write          ), //o
    .io_pop_payload_address        (inputLogic_converter_io_output_cmd_queue_io_pop_payload_address[26:0]  ), //o
    .io_pop_payload_context        (inputLogic_converter_io_output_cmd_queue_io_pop_payload_context[11:0]  ), //o
    .io_pop_payload_burstLast      (inputLogic_converter_io_output_cmd_queue_io_pop_payload_burstLast      ), //o
    .io_pop_payload_length         (inputLogic_converter_io_output_cmd_queue_io_pop_payload_length[2:0]    ), //o
    .io_pushOccupancy              (inputLogic_converter_io_output_cmd_queue_io_pushOccupancy[4:0]         ), //o
    .io_popOccupancy               (inputLogic_converter_io_output_cmd_queue_io_popOccupancy[4:0]          ), //o
    .CLKOUT0                       (CLKOUT0                                                                ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset                                             ), //i
    .CLKOUT1                       (CLKOUT1                                                                ), //i
    .sdramCd_logic_outputReset     (sdramCd_logic_outputReset                                              )  //i
  );
  StreamFifoCC_1 io_output_rsp_queue (
    .io_push_valid                       (io_output_rsp_valid                                        ), //i
    .io_push_ready                       (io_output_rsp_queue_io_push_ready                          ), //o
    .io_push_payload_last                (io_output_rsp_payload_last                                 ), //i
    .io_push_payload_fragment_data       (io_output_rsp_payload_fragment_data[63:0]                  ), //i
    .io_push_payload_fragment_context    (io_output_rsp_payload_fragment_context[11:0]               ), //i
    .io_pop_valid                        (io_output_rsp_queue_io_pop_valid                           ), //o
    .io_pop_ready                        (inputLogic_converter_io_output_rsp_ready                   ), //i
    .io_pop_payload_last                 (io_output_rsp_queue_io_pop_payload_last                    ), //o
    .io_pop_payload_fragment_data        (io_output_rsp_queue_io_pop_payload_fragment_data[63:0]     ), //o
    .io_pop_payload_fragment_context     (io_output_rsp_queue_io_pop_payload_fragment_context[11:0]  ), //o
    .io_pushOccupancy                    (io_output_rsp_queue_io_pushOccupancy[5:0]                  ), //o
    .io_popOccupancy                     (io_output_rsp_queue_io_popOccupancy[5:0]                   ), //o
    .CLKOUT1                             (CLKOUT1                                                    ), //i
    .sdramCd_logic_outputReset           (sdramCd_logic_outputReset                                  ), //i
    .CLKOUT0                             (CLKOUT0                                                    ), //i
    .systemCd_logic_outputReset          (systemCd_logic_outputReset                                 )  //i
  );
  StreamFifoCC_2 asyncBuffer_writeData_fifo (
    .io_push_valid                 (inputLogic_converter_io_output_writeData_valid               ), //i
    .io_push_ready                 (asyncBuffer_writeData_fifo_io_push_ready                     ), //o
    .io_push_payload_data          (inputLogic_converter_io_output_writeData_payload_data[63:0]  ), //i
    .io_push_payload_mask          (inputLogic_converter_io_output_writeData_payload_mask[7:0]   ), //i
    .io_pop_valid                  (asyncBuffer_writeData_fifo_io_pop_valid                      ), //o
    .io_pop_ready                  (io_output_writeData_ready                                    ), //i
    .io_pop_payload_data           (asyncBuffer_writeData_fifo_io_pop_payload_data[63:0]         ), //o
    .io_pop_payload_mask           (asyncBuffer_writeData_fifo_io_pop_payload_mask[7:0]          ), //o
    .io_pushOccupancy              (asyncBuffer_writeData_fifo_io_pushOccupancy[5:0]             ), //o
    .io_popOccupancy               (asyncBuffer_writeData_fifo_io_popOccupancy[5:0]              ), //o
    ._zz_14                        (asyncBuffer_writeData_fifo__zz_14[5:0]                       ), //o
    .CLKOUT0                       (CLKOUT0                                                      ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset                                   ), //i
    .CLKOUT1                       (CLKOUT1                                                      ), //i
    .sdramCd_logic_outputReset     (sdramCd_logic_outputReset                                    )  //i
  );
  assign io_input_cmd_ready = inputLogic_aligner_io_input_cmd_ready;
  assign io_input_rsp_valid = inputLogic_aligner_io_input_rsp_valid;
  assign io_input_rsp_payload_last = inputLogic_aligner_io_input_rsp_payload_last;
  assign io_input_rsp_payload_fragment_source = inputLogic_aligner_io_input_rsp_payload_fragment_source;
  assign io_input_rsp_payload_fragment_opcode = inputLogic_aligner_io_input_rsp_payload_fragment_opcode;
  assign io_input_rsp_payload_fragment_data = inputLogic_aligner_io_input_rsp_payload_fragment_data;
  assign _zz_8 = ((1'b1 && (! inputLogic_spliter_io_output_cmd_m2sPipe_valid)) || inputLogic_spliter_io_output_cmd_m2sPipe_ready);
  assign inputLogic_spliter_io_output_cmd_m2sPipe_valid = inputLogic_spliter_io_output_cmd_m2sPipe_rValid;
  assign inputLogic_spliter_io_output_cmd_m2sPipe_payload_last = inputLogic_spliter_io_output_cmd_m2sPipe_rData_last;
  assign inputLogic_spliter_io_output_cmd_m2sPipe_payload_fragment_opcode = inputLogic_spliter_io_output_cmd_m2sPipe_rData_fragment_opcode;
  assign inputLogic_spliter_io_output_cmd_m2sPipe_payload_fragment_address = inputLogic_spliter_io_output_cmd_m2sPipe_rData_fragment_address;
  assign inputLogic_spliter_io_output_cmd_m2sPipe_payload_fragment_length = inputLogic_spliter_io_output_cmd_m2sPipe_rData_fragment_length;
  assign inputLogic_spliter_io_output_cmd_m2sPipe_payload_fragment_data = inputLogic_spliter_io_output_cmd_m2sPipe_rData_fragment_data;
  assign inputLogic_spliter_io_output_cmd_m2sPipe_payload_fragment_mask = inputLogic_spliter_io_output_cmd_m2sPipe_rData_fragment_mask;
  assign inputLogic_spliter_io_output_cmd_m2sPipe_payload_fragment_context = inputLogic_spliter_io_output_cmd_m2sPipe_rData_fragment_context;
  assign inputLogic_spliter_io_output_cmd_m2sPipe_ready = inputLogic_converter_io_input_cmd_ready;
  assign cmdAddress_valid = inputLogic_converter_io_output_cmd_queue_io_pop_valid;
  assign cmdAddress_payload_write = inputLogic_converter_io_output_cmd_queue_io_pop_payload_write;
  assign cmdAddress_payload_address = inputLogic_converter_io_output_cmd_queue_io_pop_payload_address;
  assign cmdAddress_payload_context = inputLogic_converter_io_output_cmd_queue_io_pop_payload_context;
  assign cmdAddress_payload_burstLast = inputLogic_converter_io_output_cmd_queue_io_pop_payload_burstLast;
  assign cmdAddress_payload_length = inputLogic_converter_io_output_cmd_queue_io_pop_payload_length;
  assign io_output_rsp_ready = io_output_rsp_queue_io_push_ready;
  assign io_output_writeData_valid = asyncBuffer_writeData_fifo_io_pop_valid;
  assign io_output_writeData_payload_data = asyncBuffer_writeData_fifo_io_pop_payload_data;
  assign io_output_writeData_payload_mask = asyncBuffer_writeData_fifo_io_pop_payload_mask;
  assign _zz_1 = (asyncBuffer_writeData_fifo__zz_14[1] ^ _zz_2);
  assign _zz_2 = (asyncBuffer_writeData_fifo__zz_14[2] ^ _zz_3);
  assign _zz_3 = (asyncBuffer_writeData_fifo__zz_14[3] ^ _zz_4);
  assign _zz_4 = (asyncBuffer_writeData_fifo__zz_14[4] ^ _zz_5);
  assign _zz_5 = asyncBuffer_writeData_fifo__zz_14[5];
  assign asyncBuffer_writeData_pushCounter = {_zz_5,{_zz_4,{_zz_3,{_zz_2,{_zz_1,(asyncBuffer_writeData_fifo__zz_14[0] ^ _zz_1)}}}}};
  assign asyncBuffer_writeData_tockenIncrement = (asyncBuffer_writeData_tockenCounter != asyncBuffer_writeData_pushCounter);
  assign io_output_writeDataTocken = _zz_6;
  assign cmdAddress_ready = ((1'b1 && (! cmdAddress_m2sPipe_valid)) || cmdAddress_m2sPipe_ready);
  assign cmdAddress_m2sPipe_valid = cmdAddress_m2sPipe_rValid;
  assign cmdAddress_m2sPipe_payload_write = cmdAddress_m2sPipe_rData_write;
  assign cmdAddress_m2sPipe_payload_address = cmdAddress_m2sPipe_rData_address;
  assign cmdAddress_m2sPipe_payload_context = cmdAddress_m2sPipe_rData_context;
  assign cmdAddress_m2sPipe_payload_burstLast = cmdAddress_m2sPipe_rData_burstLast;
  assign cmdAddress_m2sPipe_payload_length = cmdAddress_m2sPipe_rData_length;
  assign _zz_7 = (! io_refresh_regNext);
  assign cmdAddress_m2sPipe_ready = (io_output_cmd_ready && _zz_7);
  assign io_output_cmd_valid = (cmdAddress_m2sPipe_valid && _zz_7);
  assign io_output_cmd_payload_write = cmdAddress_m2sPipe_payload_write;
  assign io_output_cmd_payload_address = cmdAddress_m2sPipe_payload_address;
  assign io_output_cmd_payload_context = cmdAddress_m2sPipe_payload_context;
  assign io_output_cmd_payload_burstLast = cmdAddress_m2sPipe_payload_burstLast;
  assign io_output_cmd_payload_length = cmdAddress_m2sPipe_payload_length;
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      inputLogic_spliter_io_output_cmd_m2sPipe_rValid <= 1'b0;
    end else begin
      if(_zz_8)begin
        inputLogic_spliter_io_output_cmd_m2sPipe_rValid <= inputLogic_spliter_io_output_cmd_valid;
      end
    end
  end

  always @ (posedge CLKOUT0) begin
    if(_zz_8)begin
      inputLogic_spliter_io_output_cmd_m2sPipe_rData_last <= inputLogic_spliter_io_output_cmd_payload_last;
      inputLogic_spliter_io_output_cmd_m2sPipe_rData_fragment_opcode <= inputLogic_spliter_io_output_cmd_payload_fragment_opcode;
      inputLogic_spliter_io_output_cmd_m2sPipe_rData_fragment_address <= inputLogic_spliter_io_output_cmd_payload_fragment_address;
      inputLogic_spliter_io_output_cmd_m2sPipe_rData_fragment_length <= inputLogic_spliter_io_output_cmd_payload_fragment_length;
      inputLogic_spliter_io_output_cmd_m2sPipe_rData_fragment_data <= inputLogic_spliter_io_output_cmd_payload_fragment_data;
      inputLogic_spliter_io_output_cmd_m2sPipe_rData_fragment_mask <= inputLogic_spliter_io_output_cmd_payload_fragment_mask;
      inputLogic_spliter_io_output_cmd_m2sPipe_rData_fragment_context <= inputLogic_spliter_io_output_cmd_payload_fragment_context;
    end
  end

  always @ (posedge CLKOUT1) begin
    if(sdramCd_logic_outputReset) begin
      asyncBuffer_writeData_tockenCounter <= 6'h0;
      _zz_6 <= 1'b0;
      cmdAddress_m2sPipe_rValid <= 1'b0;
    end else begin
      if(asyncBuffer_writeData_tockenIncrement)begin
        asyncBuffer_writeData_tockenCounter <= (asyncBuffer_writeData_tockenCounter + 6'h01);
      end
      _zz_6 <= asyncBuffer_writeData_tockenIncrement;
      if(cmdAddress_ready)begin
        cmdAddress_m2sPipe_rValid <= cmdAddress_valid;
      end
      `ifndef SYNTHESIS
        `ifdef FORMAL
          assert((! (io_output_rsp_valid && (! io_output_rsp_ready))))
        `else
          if(!(! (io_output_rsp_valid && (! io_output_rsp_ready)))) begin
            $display("FAILURE SDRAM rsp buffer stalled !");
            $finish;
          end
        `endif
      `endif
    end
  end

  always @ (posedge CLKOUT1) begin
    if(cmdAddress_ready)begin
      cmdAddress_m2sPipe_rData_write <= cmdAddress_payload_write;
      cmdAddress_m2sPipe_rData_address <= cmdAddress_payload_address;
      cmdAddress_m2sPipe_rData_context <= cmdAddress_payload_context;
      cmdAddress_m2sPipe_rData_burstLast <= cmdAddress_payload_burstLast;
      cmdAddress_m2sPipe_rData_length <= cmdAddress_payload_length;
    end
    io_refresh_regNext <= io_refresh;
  end


endmodule

module StreamFifoLowLatency_2 (
  input               io_push_valid,
  output              io_push_ready,
  input               io_push_payload_last,
  input      [0:0]    io_push_payload_fragment_opcode,
  input      [63:0]   io_push_payload_fragment_data,
  output              io_pop_valid,
  input               io_pop_ready,
  output              io_pop_payload_last,
  output     [0:0]    io_pop_payload_fragment_opcode,
  output     [63:0]   io_pop_payload_fragment_data,
  input               io_flush,
  output     [3:0]    io_occupancy,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  wire       [65:0]   _zz_4;
  wire       [0:0]    _zz_5;
  wire       [2:0]    _zz_6;
  wire       [0:0]    _zz_7;
  wire       [2:0]    _zz_8;
  wire       [0:0]    _zz_9;
  wire       [65:0]   _zz_10;
  reg                 _zz_1;
  reg                 pushPtr_willIncrement;
  reg                 pushPtr_willClear;
  reg        [2:0]    pushPtr_valueNext;
  reg        [2:0]    pushPtr_value;
  wire                pushPtr_willOverflowIfInc;
  wire                pushPtr_willOverflow;
  reg                 popPtr_willIncrement;
  reg                 popPtr_willClear;
  reg        [2:0]    popPtr_valueNext;
  reg        [2:0]    popPtr_value;
  wire                popPtr_willOverflowIfInc;
  wire                popPtr_willOverflow;
  wire                ptrMatch;
  reg                 risingOccupancy;
  wire                empty;
  wire                full;
  wire                pushing;
  wire                popping;
  wire       [65:0]   _zz_2;
  wire       [64:0]   _zz_3;
  wire       [2:0]    ptrDif;
  (* ram_style = "distributed" *) reg [65:0] ram [0:7];

  assign _zz_5 = pushPtr_willIncrement;
  assign _zz_6 = {2'd0, _zz_5};
  assign _zz_7 = popPtr_willIncrement;
  assign _zz_8 = {2'd0, _zz_7};
  assign _zz_9 = _zz_2[0 : 0];
  assign _zz_10 = {{io_push_payload_fragment_data,io_push_payload_fragment_opcode},io_push_payload_last};
  assign _zz_4 = ram[popPtr_value];
  always @ (posedge CLKOUT0) begin
    if(_zz_1) begin
      ram[pushPtr_value] <= _zz_10;
    end
  end

  always @ (*) begin
    _zz_1 = 1'b0;
    if(pushing)begin
      _zz_1 = 1'b1;
    end
  end

  always @ (*) begin
    pushPtr_willIncrement = 1'b0;
    if(pushing)begin
      pushPtr_willIncrement = 1'b1;
    end
  end

  always @ (*) begin
    pushPtr_willClear = 1'b0;
    if(io_flush)begin
      pushPtr_willClear = 1'b1;
    end
  end

  assign pushPtr_willOverflowIfInc = (pushPtr_value == 3'b111);
  assign pushPtr_willOverflow = (pushPtr_willOverflowIfInc && pushPtr_willIncrement);
  always @ (*) begin
    pushPtr_valueNext = (pushPtr_value + _zz_6);
    if(pushPtr_willClear)begin
      pushPtr_valueNext = 3'b000;
    end
  end

  always @ (*) begin
    popPtr_willIncrement = 1'b0;
    if(popping)begin
      popPtr_willIncrement = 1'b1;
    end
  end

  always @ (*) begin
    popPtr_willClear = 1'b0;
    if(io_flush)begin
      popPtr_willClear = 1'b1;
    end
  end

  assign popPtr_willOverflowIfInc = (popPtr_value == 3'b111);
  assign popPtr_willOverflow = (popPtr_willOverflowIfInc && popPtr_willIncrement);
  always @ (*) begin
    popPtr_valueNext = (popPtr_value + _zz_8);
    if(popPtr_willClear)begin
      popPtr_valueNext = 3'b000;
    end
  end

  assign ptrMatch = (pushPtr_value == popPtr_value);
  assign empty = (ptrMatch && (! risingOccupancy));
  assign full = (ptrMatch && risingOccupancy);
  assign pushing = (io_push_valid && io_push_ready);
  assign popping = (io_pop_valid && io_pop_ready);
  assign io_push_ready = (! full);
  assign io_pop_valid = (! empty);
  assign _zz_2 = _zz_4;
  assign _zz_3 = _zz_2[65 : 1];
  assign io_pop_payload_last = _zz_9[0];
  assign io_pop_payload_fragment_opcode = _zz_3[0 : 0];
  assign io_pop_payload_fragment_data = _zz_3[64 : 1];
  assign ptrDif = (pushPtr_value - popPtr_value);
  assign io_occupancy = {(risingOccupancy && ptrMatch),ptrDif};
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      pushPtr_value <= 3'b000;
      popPtr_value <= 3'b000;
      risingOccupancy <= 1'b0;
    end else begin
      pushPtr_value <= pushPtr_valueNext;
      popPtr_value <= popPtr_valueNext;
      if((pushing != popping))begin
        risingOccupancy <= pushing;
      end
      if(io_flush)begin
        risingOccupancy <= 1'b0;
      end
    end
  end


endmodule

module StreamFifoLowLatency_1 (
  input               io_push_valid,
  output              io_push_ready,
  input               io_push_payload,
  output              io_pop_valid,
  input               io_pop_ready,
  output              io_pop_payload,
  input               io_flush,
  output     [4:0]    io_occupancy,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  wire       [0:0]    _zz_2;
  wire       [0:0]    _zz_3;
  wire       [3:0]    _zz_4;
  wire       [0:0]    _zz_5;
  wire       [3:0]    _zz_6;
  wire       [0:0]    _zz_7;
  reg                 _zz_1;
  reg                 pushPtr_willIncrement;
  reg                 pushPtr_willClear;
  reg        [3:0]    pushPtr_valueNext;
  reg        [3:0]    pushPtr_value;
  wire                pushPtr_willOverflowIfInc;
  wire                pushPtr_willOverflow;
  reg                 popPtr_willIncrement;
  reg                 popPtr_willClear;
  reg        [3:0]    popPtr_valueNext;
  reg        [3:0]    popPtr_value;
  wire                popPtr_willOverflowIfInc;
  wire                popPtr_willOverflow;
  wire                ptrMatch;
  reg                 risingOccupancy;
  wire                empty;
  wire                full;
  wire                pushing;
  wire                popping;
  wire       [3:0]    ptrDif;
  (* ram_style = "distributed" *) reg [0:0] ram [0:15];

  assign _zz_3 = pushPtr_willIncrement;
  assign _zz_4 = {3'd0, _zz_3};
  assign _zz_5 = popPtr_willIncrement;
  assign _zz_6 = {3'd0, _zz_5};
  assign _zz_7 = io_push_payload;
  assign _zz_2 = ram[popPtr_value];
  always @ (posedge CLKOUT0) begin
    if(_zz_1) begin
      ram[pushPtr_value] <= _zz_7;
    end
  end

  always @ (*) begin
    _zz_1 = 1'b0;
    if(pushing)begin
      _zz_1 = 1'b1;
    end
  end

  always @ (*) begin
    pushPtr_willIncrement = 1'b0;
    if(pushing)begin
      pushPtr_willIncrement = 1'b1;
    end
  end

  always @ (*) begin
    pushPtr_willClear = 1'b0;
    if(io_flush)begin
      pushPtr_willClear = 1'b1;
    end
  end

  assign pushPtr_willOverflowIfInc = (pushPtr_value == 4'b1111);
  assign pushPtr_willOverflow = (pushPtr_willOverflowIfInc && pushPtr_willIncrement);
  always @ (*) begin
    pushPtr_valueNext = (pushPtr_value + _zz_4);
    if(pushPtr_willClear)begin
      pushPtr_valueNext = 4'b0000;
    end
  end

  always @ (*) begin
    popPtr_willIncrement = 1'b0;
    if(popping)begin
      popPtr_willIncrement = 1'b1;
    end
  end

  always @ (*) begin
    popPtr_willClear = 1'b0;
    if(io_flush)begin
      popPtr_willClear = 1'b1;
    end
  end

  assign popPtr_willOverflowIfInc = (popPtr_value == 4'b1111);
  assign popPtr_willOverflow = (popPtr_willOverflowIfInc && popPtr_willIncrement);
  always @ (*) begin
    popPtr_valueNext = (popPtr_value + _zz_6);
    if(popPtr_willClear)begin
      popPtr_valueNext = 4'b0000;
    end
  end

  assign ptrMatch = (pushPtr_value == popPtr_value);
  assign empty = (ptrMatch && (! risingOccupancy));
  assign full = (ptrMatch && risingOccupancy);
  assign pushing = (io_push_valid && io_push_ready);
  assign popping = (io_pop_valid && io_pop_ready);
  assign io_push_ready = (! full);
  assign io_pop_valid = (! empty);
  assign io_pop_payload = _zz_2[0];
  assign ptrDif = (pushPtr_value - popPtr_value);
  assign io_occupancy = {(risingOccupancy && ptrMatch),ptrDif};
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      pushPtr_value <= 4'b0000;
      popPtr_value <= 4'b0000;
      risingOccupancy <= 1'b0;
    end else begin
      pushPtr_value <= pushPtr_valueNext;
      popPtr_value <= popPtr_valueNext;
      if((pushing != popping))begin
        risingOccupancy <= pushing;
      end
      if(io_flush)begin
        risingOccupancy <= 1'b0;
      end
    end
  end


endmodule

module StreamFork_2 (
  input               io_input_valid,
  output reg          io_input_ready,
  input               io_input_payload_last,
  input      [0:0]    io_input_payload_fragment_opcode,
  input      [31:0]   io_input_payload_fragment_address,
  input      [1:0]    io_input_payload_fragment_length,
  input      [63:0]   io_input_payload_fragment_data,
  input      [7:0]    io_input_payload_fragment_mask,
  output              io_outputs_0_valid,
  input               io_outputs_0_ready,
  output              io_outputs_0_payload_last,
  output     [0:0]    io_outputs_0_payload_fragment_opcode,
  output     [31:0]   io_outputs_0_payload_fragment_address,
  output     [1:0]    io_outputs_0_payload_fragment_length,
  output     [63:0]   io_outputs_0_payload_fragment_data,
  output     [7:0]    io_outputs_0_payload_fragment_mask,
  output              io_outputs_1_valid,
  input               io_outputs_1_ready,
  output              io_outputs_1_payload_last,
  output     [0:0]    io_outputs_1_payload_fragment_opcode,
  output     [31:0]   io_outputs_1_payload_fragment_address,
  output     [1:0]    io_outputs_1_payload_fragment_length,
  output     [63:0]   io_outputs_1_payload_fragment_data,
  output     [7:0]    io_outputs_1_payload_fragment_mask,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  reg                 _zz_1;
  reg                 _zz_2;

  always @ (*) begin
    io_input_ready = 1'b1;
    if(((! io_outputs_0_ready) && _zz_1))begin
      io_input_ready = 1'b0;
    end
    if(((! io_outputs_1_ready) && _zz_2))begin
      io_input_ready = 1'b0;
    end
  end

  assign io_outputs_0_valid = (io_input_valid && _zz_1);
  assign io_outputs_0_payload_last = io_input_payload_last;
  assign io_outputs_0_payload_fragment_opcode = io_input_payload_fragment_opcode;
  assign io_outputs_0_payload_fragment_address = io_input_payload_fragment_address;
  assign io_outputs_0_payload_fragment_length = io_input_payload_fragment_length;
  assign io_outputs_0_payload_fragment_data = io_input_payload_fragment_data;
  assign io_outputs_0_payload_fragment_mask = io_input_payload_fragment_mask;
  assign io_outputs_1_valid = (io_input_valid && _zz_2);
  assign io_outputs_1_payload_last = io_input_payload_last;
  assign io_outputs_1_payload_fragment_opcode = io_input_payload_fragment_opcode;
  assign io_outputs_1_payload_fragment_address = io_input_payload_fragment_address;
  assign io_outputs_1_payload_fragment_length = io_input_payload_fragment_length;
  assign io_outputs_1_payload_fragment_data = io_input_payload_fragment_data;
  assign io_outputs_1_payload_fragment_mask = io_input_payload_fragment_mask;
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      _zz_1 <= 1'b1;
      _zz_2 <= 1'b1;
    end else begin
      if((io_outputs_0_valid && io_outputs_0_ready))begin
        _zz_1 <= 1'b0;
      end
      if((io_outputs_1_valid && io_outputs_1_ready))begin
        _zz_2 <= 1'b0;
      end
      if(io_input_ready)begin
        _zz_1 <= 1'b1;
        _zz_2 <= 1'b1;
      end
    end
  end


endmodule

module BsbToDeltaSigma (
  input      [1:0]    io_channelCount,
  input      [15:0]   io_rate,
  input               io_input_valid,
  output              io_input_ready,
  input      [31:0]   io_input_payload_data,
  input      [3:0]    io_input_payload_mask,
  input               io_input_payload_last,
  output reg [1:0]    io_outputs,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  wire       [0:0]    _zz_1;
  reg                 _zz_2;
  wire       [15:0]   _zz_3;
  wire       [15:0]   _zz_4;
  wire                decoder_downSizer_io_input_ready;
  wire                decoder_downSizer_io_output_valid;
  wire       [31:0]   decoder_downSizer_io_output_payload_data;
  wire       [3:0]    decoder_downSizer_io_output_payload_mask;
  wire                decoder_downSizer_io_output_payload_last;
  wire                channels_0_toSigmaDelta_io_output;
  wire                channels_1_toSigmaDelta_io_output;
  wire                _zz_5;
  wire       [1:0]    _zz_6;
  reg                 decoder_downSizer_io_output_thrown_valid;
  wire                decoder_downSizer_io_output_thrown_ready;
  wire       [31:0]   decoder_downSizer_io_output_thrown_payload_data;
  wire       [3:0]    decoder_downSizer_io_output_thrown_payload_mask;
  wire                decoder_downSizer_io_output_thrown_payload_last;
  wire                decoder_toStream_valid;
  wire                decoder_toStream_ready;
  wire       [31:0]   decoder_toStream_payload;
  wire                decoder_output_valid;
  wire                decoder_output_ready;
  reg        [15:0]   decoder_output_payload_0;
  reg        [15:0]   decoder_output_payload_1;
  wire                decoder_adapter_valid;
  wire                decoder_adapter_ready;
  wire       [15:0]   decoder_adapter_payload_0;
  wire       [15:0]   decoder_adapter_payload_1;
  reg        [15:0]   sampler_counter = 16'b0000000000000000;
  wire                sampler_fire;
  wire                decoder_output_m2sPipe_valid;
  wire                decoder_output_m2sPipe_ready;
  wire       [15:0]   decoder_output_m2sPipe_payload_0;
  wire       [15:0]   decoder_output_m2sPipe_payload_1;
  reg                 decoder_output_m2sPipe_rValid;
  reg        [15:0]   decoder_output_m2sPipe_rData_0;
  reg        [15:0]   decoder_output_m2sPipe_rData_1;
  reg        [15:0]   sampler_state_0;
  reg        [15:0]   sampler_state_1;
  reg                 channels_0_buffer;
  reg                 channels_1_buffer;

  assign _zz_5 = (! decoder_downSizer_io_output_payload_mask[0]);
  assign _zz_6 = (io_channelCount - 2'b01);
  BsbDownSizerAlignedMultiWidth decoder_downSizer (
    .io_sel                        (_zz_1                                           ), //i
    .io_input_valid                (io_input_valid                                  ), //i
    .io_input_ready                (decoder_downSizer_io_input_ready                ), //o
    .io_input_payload_data         (io_input_payload_data[31:0]                     ), //i
    .io_input_payload_mask         (io_input_payload_mask[3:0]                      ), //i
    .io_input_payload_last         (io_input_payload_last                           ), //i
    .io_output_valid               (decoder_downSizer_io_output_valid               ), //o
    .io_output_ready               (_zz_2                                           ), //i
    .io_output_payload_data        (decoder_downSizer_io_output_payload_data[31:0]  ), //o
    .io_output_payload_mask        (decoder_downSizer_io_output_payload_mask[3:0]   ), //o
    .io_output_payload_last        (decoder_downSizer_io_output_payload_last        ), //o
    .CLKOUT0                       (CLKOUT0                                         ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset                      )  //i
  );
  UIntToSigmaDeltaFirstOrder channels_0_toSigmaDelta (
    .io_input                      (_zz_3[15:0]                        ), //i
    .io_output                     (channels_0_toSigmaDelta_io_output  ), //o
    .CLKOUT0                       (CLKOUT0                            ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset         )  //i
  );
  UIntToSigmaDeltaFirstOrder channels_1_toSigmaDelta (
    .io_input                      (_zz_4[15:0]                        ), //i
    .io_output                     (channels_1_toSigmaDelta_io_output  ), //o
    .CLKOUT0                       (CLKOUT0                            ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset         )  //i
  );
  assign _zz_1 = _zz_6[0:0];
  assign io_input_ready = decoder_downSizer_io_input_ready;
  always @ (*) begin
    decoder_downSizer_io_output_thrown_valid = decoder_downSizer_io_output_valid;
    if(_zz_5)begin
      decoder_downSizer_io_output_thrown_valid = 1'b0;
    end
  end

  always @ (*) begin
    _zz_2 = decoder_downSizer_io_output_thrown_ready;
    if(_zz_5)begin
      _zz_2 = 1'b1;
    end
  end

  assign decoder_downSizer_io_output_thrown_payload_data = decoder_downSizer_io_output_payload_data;
  assign decoder_downSizer_io_output_thrown_payload_mask = decoder_downSizer_io_output_payload_mask;
  assign decoder_downSizer_io_output_thrown_payload_last = decoder_downSizer_io_output_payload_last;
  assign decoder_toStream_valid = decoder_downSizer_io_output_thrown_valid;
  assign decoder_downSizer_io_output_thrown_ready = decoder_toStream_ready;
  assign decoder_toStream_payload = decoder_downSizer_io_output_thrown_payload_data;
  assign decoder_adapter_valid = decoder_toStream_valid;
  assign decoder_toStream_ready = decoder_adapter_ready;
  assign decoder_adapter_payload_0 = decoder_toStream_payload[15 : 0];
  assign decoder_adapter_payload_1 = decoder_toStream_payload[31 : 16];
  assign decoder_output_valid = decoder_adapter_valid;
  assign decoder_adapter_ready = decoder_output_ready;
  always @ (*) begin
    decoder_output_payload_0 = 16'h0;
    case(io_channelCount)
      2'b01 : begin
        decoder_output_payload_0 = decoder_adapter_payload_0;
      end
      2'b10 : begin
        decoder_output_payload_0 = decoder_adapter_payload_0;
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    decoder_output_payload_1 = 16'h0;
    case(io_channelCount)
      2'b01 : begin
        decoder_output_payload_1 = decoder_adapter_payload_0;
      end
      2'b10 : begin
        decoder_output_payload_1 = decoder_adapter_payload_1;
      end
      default : begin
      end
    endcase
  end

  assign sampler_fire = ((sampler_counter == io_rate) || (io_channelCount == 2'b00));
  assign decoder_output_ready = ((1'b1 && (! decoder_output_m2sPipe_valid)) || decoder_output_m2sPipe_ready);
  assign decoder_output_m2sPipe_valid = decoder_output_m2sPipe_rValid;
  assign decoder_output_m2sPipe_payload_0 = decoder_output_m2sPipe_rData_0;
  assign decoder_output_m2sPipe_payload_1 = decoder_output_m2sPipe_rData_1;
  assign decoder_output_m2sPipe_ready = (1'b1 && sampler_fire);
  assign _zz_3 = (sampler_state_0 ^ 16'h8000);
  always @ (*) begin
    io_outputs[0] = channels_0_buffer;
    io_outputs[1] = channels_1_buffer;
  end

  assign _zz_4 = (sampler_state_1 ^ 16'h8000);
  always @ (posedge CLKOUT0) begin
    sampler_counter <= (sampler_counter + 16'h0001);
    if(sampler_fire)begin
      sampler_counter <= 16'h0;
    end
    if(decoder_output_ready)begin
      decoder_output_m2sPipe_rData_0 <= decoder_output_payload_0;
      decoder_output_m2sPipe_rData_1 <= decoder_output_payload_1;
    end
    if((decoder_output_m2sPipe_valid && sampler_fire))begin
      sampler_state_0 <= decoder_output_m2sPipe_payload_0;
      sampler_state_1 <= decoder_output_m2sPipe_payload_1;
    end
    channels_0_buffer <= (channels_0_toSigmaDelta_io_output && (io_channelCount != 2'b00));
    channels_1_buffer <= (channels_1_toSigmaDelta_io_output && (io_channelCount != 2'b00));
  end

  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      decoder_output_m2sPipe_rValid <= 1'b0;
    end else begin
      if(decoder_output_ready)begin
        decoder_output_m2sPipe_rValid <= decoder_output_valid;
      end
    end
  end


endmodule

module BufferCC_25 (
  input      [7:0]    io_dataIn,
  output     [7:0]    io_dataOut,
  input               CLKOUT6,
  input               vgaCd_logic_outputReset
);
  reg        [7:0]    buffers_0;
  reg        [7:0]    buffers_1;

  assign io_dataOut = buffers_1;
  always @ (posedge CLKOUT6) begin
    if(vgaCd_logic_outputReset) begin
      buffers_0 <= 8'h0;
      buffers_1 <= 8'h0;
    end else begin
      buffers_0 <= io_dataIn;
      buffers_1 <= buffers_0;
    end
  end


endmodule

module BufferCC_24 (
  input      [7:0]    io_dataIn,
  output     [7:0]    io_dataOut,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  reg        [7:0]    buffers_0;
  reg        [7:0]    buffers_1;

  assign io_dataOut = buffers_1;
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      buffers_0 <= 8'h0;
      buffers_1 <= 8'h0;
    end else begin
      buffers_0 <= io_dataIn;
      buffers_1 <= buffers_0;
    end
  end


endmodule

module VgaCtrl (
  input               io_softReset,
  input      [11:0]   io_timings_h_syncStart,
  input      [11:0]   io_timings_h_syncEnd,
  input      [11:0]   io_timings_h_colorStart,
  input      [11:0]   io_timings_h_colorEnd,
  input               io_timings_h_polarity,
  input      [11:0]   io_timings_v_syncStart,
  input      [11:0]   io_timings_v_syncEnd,
  input      [11:0]   io_timings_v_colorStart,
  input      [11:0]   io_timings_v_colorEnd,
  input               io_timings_v_polarity,
  output              io_frameStart,
  input               io_pixels_valid,
  output              io_pixels_ready,
  input      [3:0]    io_pixels_payload_r,
  input      [3:0]    io_pixels_payload_g,
  input      [3:0]    io_pixels_payload_b,
  output              io_vga_vSync,
  output              io_vga_hSync,
  output              io_vga_colorEn,
  output     [3:0]    io_vga_color_r,
  output     [3:0]    io_vga_color_g,
  output     [3:0]    io_vga_color_b,
  output              io_error,
  input               CLKOUT6,
  input               vgaCd_logic_outputReset
);
  reg        [11:0]   h_counter;
  wire                h_syncStart;
  wire                h_syncEnd;
  wire                h_colorStart;
  wire                h_colorEnd;
  reg                 h_sync;
  reg                 h_colorEn;
  reg        [11:0]   v_counter;
  wire                v_syncStart;
  wire                v_syncEnd;
  wire                v_colorStart;
  wire                v_colorEnd;
  reg                 v_sync;
  reg                 v_colorEn;
  wire                colorEn;

  assign h_syncStart = (h_counter == io_timings_h_syncStart);
  assign h_syncEnd = (h_counter == io_timings_h_syncEnd);
  assign h_colorStart = (h_counter == io_timings_h_colorStart);
  assign h_colorEnd = (h_counter == io_timings_h_colorEnd);
  assign v_syncStart = (v_counter == io_timings_v_syncStart);
  assign v_syncEnd = (v_counter == io_timings_v_syncEnd);
  assign v_colorStart = (v_counter == io_timings_v_colorStart);
  assign v_colorEnd = (v_counter == io_timings_v_colorEnd);
  assign colorEn = (h_colorEn && v_colorEn);
  assign io_pixels_ready = colorEn;
  assign io_error = (colorEn && (! io_pixels_valid));
  assign io_frameStart = (v_syncStart && h_syncStart);
  assign io_vga_hSync = (h_sync ^ io_timings_h_polarity);
  assign io_vga_vSync = (v_sync ^ io_timings_v_polarity);
  assign io_vga_colorEn = colorEn;
  assign io_vga_color_r = io_pixels_payload_r;
  assign io_vga_color_g = io_pixels_payload_g;
  assign io_vga_color_b = io_pixels_payload_b;
  always @ (posedge CLKOUT6) begin
    if(vgaCd_logic_outputReset) begin
      h_counter <= 12'h0;
      h_sync <= 1'b0;
      h_colorEn <= 1'b0;
      v_counter <= 12'h0;
      v_sync <= 1'b0;
      v_colorEn <= 1'b0;
    end else begin
      if(1'b1)begin
        h_counter <= (h_counter + 12'h001);
        if(h_syncEnd)begin
          h_counter <= 12'h0;
        end
      end
      if(h_syncStart)begin
        h_sync <= 1'b1;
      end
      if(h_syncEnd)begin
        h_sync <= 1'b0;
      end
      if(h_colorStart)begin
        h_colorEn <= 1'b1;
      end
      if(h_colorEnd)begin
        h_colorEn <= 1'b0;
      end
      if(io_softReset)begin
        h_counter <= 12'h0;
        h_sync <= 1'b0;
        h_colorEn <= 1'b0;
      end
      if(h_syncEnd)begin
        v_counter <= (v_counter + 12'h001);
        if(v_syncEnd)begin
          v_counter <= 12'h0;
        end
      end
      if(v_syncStart)begin
        v_sync <= 1'b1;
      end
      if(v_syncEnd)begin
        v_sync <= 1'b0;
      end
      if(v_colorStart)begin
        v_colorEn <= 1'b1;
      end
      if(v_colorEnd)begin
        v_colorEn <= 1'b0;
      end
      if(io_softReset)begin
        v_counter <= 12'h0;
        v_sync <= 1'b0;
        v_colorEn <= 1'b0;
      end
    end
  end


endmodule

module BufferCC_23 (
  input               io_dataIn,
  output              io_dataOut,
  input               CLKOUT6,
  input               vgaCd_logic_outputReset
);
  reg                 buffers_0;
  reg                 buffers_1;

  assign io_dataOut = buffers_1;
  always @ (posedge CLKOUT6) begin
    buffers_0 <= io_dataIn;
    buffers_1 <= buffers_0;
  end


endmodule

module StreamArbiter_3 (
  input               io_inputs_0_valid,
  output              io_inputs_0_ready,
  input               io_inputs_1_valid,
  output              io_inputs_1_ready,
  output              io_output_valid,
  input               io_output_ready,
  output     [0:0]    io_chosen,
  output     [1:0]    io_chosenOH,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  wire       [3:0]    _zz_6;
  wire       [1:0]    _zz_7;
  wire       [3:0]    _zz_8;
  wire       [0:0]    _zz_9;
  wire       [0:0]    _zz_10;
  wire                locked;
  wire                maskProposal_0;
  wire                maskProposal_1;
  reg                 maskLocked_0;
  reg                 maskLocked_1;
  wire                maskRouted_0;
  wire                maskRouted_1;
  wire       [1:0]    _zz_1;
  wire       [3:0]    _zz_2;
  wire       [3:0]    _zz_3;
  wire       [1:0]    _zz_4;
  wire                _zz_5;

  assign _zz_6 = (_zz_2 - _zz_8);
  assign _zz_7 = {maskLocked_0,maskLocked_1};
  assign _zz_8 = {2'd0, _zz_7};
  assign _zz_9 = _zz_4[0 : 0];
  assign _zz_10 = _zz_4[1 : 1];
  assign locked = 1'b0;
  assign maskRouted_0 = (locked ? maskLocked_0 : maskProposal_0);
  assign maskRouted_1 = (locked ? maskLocked_1 : maskProposal_1);
  assign _zz_1 = {io_inputs_1_valid,io_inputs_0_valid};
  assign _zz_2 = {_zz_1,_zz_1};
  assign _zz_3 = (_zz_2 & (~ _zz_6));
  assign _zz_4 = (_zz_3[3 : 2] | _zz_3[1 : 0]);
  assign maskProposal_0 = _zz_9[0];
  assign maskProposal_1 = _zz_10[0];
  assign io_output_valid = ((io_inputs_0_valid && maskRouted_0) || (io_inputs_1_valid && maskRouted_1));
  assign io_inputs_0_ready = (maskRouted_0 && io_output_ready);
  assign io_inputs_1_ready = (maskRouted_1 && io_output_ready);
  assign io_chosenOH = {maskRouted_1,maskRouted_0};
  assign _zz_5 = io_chosenOH[1];
  assign io_chosen = _zz_5;
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      maskLocked_0 <= 1'b0;
      maskLocked_1 <= 1'b1;
    end else begin
      if(io_output_valid)begin
        maskLocked_0 <= maskRouted_0;
        maskLocked_1 <= maskRouted_1;
      end
    end
  end


endmodule

module DmaMemoryCore (
  input               io_writes_0_cmd_valid,
  output              io_writes_0_cmd_ready,
  input      [7:0]    io_writes_0_cmd_payload_address,
  input      [63:0]   io_writes_0_cmd_payload_data,
  input      [7:0]    io_writes_0_cmd_payload_mask,
  input      [6:0]    io_writes_0_cmd_payload_context,
  output              io_writes_0_rsp_valid,
  output     [6:0]    io_writes_0_rsp_payload_context,
  input               io_reads_0_cmd_valid,
  output              io_reads_0_cmd_ready,
  input      [7:0]    io_reads_0_cmd_payload_address,
  input      [1:0]    io_reads_0_cmd_payload_priority,
  input      [2:0]    io_reads_0_cmd_payload_context,
  output              io_reads_0_rsp_valid,
  input               io_reads_0_rsp_ready,
  output     [63:0]   io_reads_0_rsp_payload_data,
  output     [7:0]    io_reads_0_rsp_payload_mask,
  output     [2:0]    io_reads_0_rsp_payload_context,
  input               io_reads_1_cmd_valid,
  output              io_reads_1_cmd_ready,
  input      [7:0]    io_reads_1_cmd_payload_address,
  input      [1:0]    io_reads_1_cmd_payload_priority,
  input      [2:0]    io_reads_1_cmd_payload_context,
  output              io_reads_1_rsp_valid,
  input               io_reads_1_rsp_ready,
  output     [31:0]   io_reads_1_rsp_payload_data,
  output     [3:0]    io_reads_1_rsp_payload_mask,
  output     [2:0]    io_reads_1_rsp_payload_context,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  reg        [35:0]   _zz_31;
  reg        [35:0]   _zz_32;
  reg        [31:0]   _zz_33;
  reg        [3:0]    _zz_34;
  wire                _zz_35;
  wire                _zz_36;
  wire                _zz_37;
  wire                _zz_38;
  wire                _zz_39;
  wire                _zz_40;
  wire                _zz_41;
  wire                _zz_42;
  wire       [3:0]    _zz_43;
  wire       [3:0]    _zz_44;
  wire       [7:0]    _zz_45;
  wire       [7:0]    _zz_46;
  wire       [0:0]    _zz_47;
  wire       [0:0]    _zz_48;
  wire       [0:0]    _zz_49;
  wire       [0:0]    _zz_50;
  wire       [35:0]   _zz_51;
  wire       [35:0]   _zz_52;
  reg                 _zz_1;
  reg                 _zz_2;
  wire                banks_0_write_valid;
  wire       [6:0]    banks_0_write_payload_address;
  wire       [31:0]   banks_0_write_payload_data_data;
  wire       [3:0]    banks_0_write_payload_data_mask;
  wire                banks_0_read_cmd_valid;
  wire       [6:0]    banks_0_read_cmd_payload;
  wire       [31:0]   banks_0_read_rsp_data;
  wire       [3:0]    banks_0_read_rsp_mask;
  wire       [35:0]   _zz_3;
  wire                banks_0_writeOr_value_valid;
  wire       [6:0]    banks_0_writeOr_value_payload_address;
  wire       [31:0]   banks_0_writeOr_value_payload_data_data;
  wire       [3:0]    banks_0_writeOr_value_payload_data_mask;
  wire                banks_0_readOr_value_valid;
  wire       [6:0]    banks_0_readOr_value_payload;
  wire                banks_1_write_valid;
  wire       [6:0]    banks_1_write_payload_address;
  wire       [31:0]   banks_1_write_payload_data_data;
  wire       [3:0]    banks_1_write_payload_data_mask;
  wire                banks_1_read_cmd_valid;
  wire       [6:0]    banks_1_read_cmd_payload;
  wire       [31:0]   banks_1_read_rsp_data;
  wire       [3:0]    banks_1_read_rsp_mask;
  wire       [35:0]   _zz_4;
  wire                banks_1_writeOr_value_valid;
  wire       [6:0]    banks_1_writeOr_value_payload_address;
  wire       [31:0]   banks_1_writeOr_value_payload_data_data;
  wire       [3:0]    banks_1_writeOr_value_payload_data_mask;
  wire                banks_1_readOr_value_valid;
  wire       [6:0]    banks_1_readOr_value_payload;
  wire                write_nodes_0_0_priority;
  wire                write_nodes_0_0_conflict;
  wire                write_arbiter_0_doIt;
  reg                 _zz_5;
  reg        [6:0]    _zz_6;
  reg        [31:0]   _zz_7;
  reg        [3:0]    _zz_8;
  reg                 _zz_9;
  reg        [6:0]    _zz_10;
  reg        [31:0]   _zz_11;
  reg        [3:0]    _zz_12;
  reg                 write_arbiter_0_doIt_regNext;
  reg        [6:0]    io_writes_0_cmd_payload_context_regNext;
  wire                read_ports_0_buffer_s0_valid;
  wire       [2:0]    read_ports_0_buffer_s0_payload_context;
  wire       [7:0]    read_ports_0_buffer_s0_payload_address;
  reg                 read_ports_0_buffer_s1_valid;
  reg        [2:0]    read_ports_0_buffer_s1_payload_context;
  reg        [7:0]    read_ports_0_buffer_s1_payload_address;
  wire                read_ports_0_buffer_bufferIn_valid;
  wire                read_ports_0_buffer_bufferIn_ready;
  wire       [63:0]   read_ports_0_buffer_bufferIn_payload_data;
  wire       [7:0]    read_ports_0_buffer_bufferIn_payload_mask;
  wire       [2:0]    read_ports_0_buffer_bufferIn_payload_context;
  wire                read_ports_0_buffer_bufferOut_valid;
  wire                read_ports_0_buffer_bufferOut_ready;
  wire       [63:0]   read_ports_0_buffer_bufferOut_payload_data;
  wire       [7:0]    read_ports_0_buffer_bufferOut_payload_mask;
  wire       [2:0]    read_ports_0_buffer_bufferOut_payload_context;
  reg                 read_ports_0_buffer_bufferIn_s2mPipe_rValid;
  reg        [63:0]   read_ports_0_buffer_bufferIn_s2mPipe_rData_data;
  reg        [7:0]    read_ports_0_buffer_bufferIn_s2mPipe_rData_mask;
  reg        [2:0]    read_ports_0_buffer_bufferIn_s2mPipe_rData_context;
  wire                read_ports_0_buffer_full;
  wire                _zz_13;
  wire                read_ports_0_cmd_valid;
  wire                read_ports_0_cmd_ready;
  wire       [7:0]    read_ports_0_cmd_payload_address;
  wire       [1:0]    read_ports_0_cmd_payload_priority;
  wire       [2:0]    read_ports_0_cmd_payload_context;
  reg        [3:0]    read_ports_0_priority_value = 4'b0000;
  wire                read_ports_1_buffer_s0_valid;
  wire       [2:0]    read_ports_1_buffer_s0_payload_context;
  wire       [7:0]    read_ports_1_buffer_s0_payload_address;
  reg                 read_ports_1_buffer_s1_valid;
  reg        [2:0]    read_ports_1_buffer_s1_payload_context;
  reg        [7:0]    read_ports_1_buffer_s1_payload_address;
  wire       [0:0]    read_ports_1_buffer_groupSel;
  wire                read_ports_1_buffer_bufferIn_valid;
  wire                read_ports_1_buffer_bufferIn_ready;
  wire       [31:0]   read_ports_1_buffer_bufferIn_payload_data;
  wire       [3:0]    read_ports_1_buffer_bufferIn_payload_mask;
  wire       [2:0]    read_ports_1_buffer_bufferIn_payload_context;
  wire                read_ports_1_buffer_bufferOut_valid;
  wire                read_ports_1_buffer_bufferOut_ready;
  wire       [31:0]   read_ports_1_buffer_bufferOut_payload_data;
  wire       [3:0]    read_ports_1_buffer_bufferOut_payload_mask;
  wire       [2:0]    read_ports_1_buffer_bufferOut_payload_context;
  reg                 read_ports_1_buffer_bufferIn_s2mPipe_rValid;
  reg        [31:0]   read_ports_1_buffer_bufferIn_s2mPipe_rData_data;
  reg        [3:0]    read_ports_1_buffer_bufferIn_s2mPipe_rData_mask;
  reg        [2:0]    read_ports_1_buffer_bufferIn_s2mPipe_rData_context;
  wire                read_ports_1_buffer_full;
  wire                _zz_14;
  wire                read_ports_1_cmd_valid;
  wire                read_ports_1_cmd_ready;
  wire       [7:0]    read_ports_1_cmd_payload_address;
  wire       [1:0]    read_ports_1_cmd_payload_priority;
  wire       [2:0]    read_ports_1_cmd_payload_context;
  reg        [3:0]    read_ports_1_priority_value = 4'b0000;
  wire                read_nodes_0_0_priority;
  wire                read_nodes_0_0_conflict;
  wire                read_nodes_0_1_priority;
  wire                read_nodes_0_1_conflict;
  wire                read_nodes_1_0_priority;
  wire                read_nodes_1_0_conflict;
  wire                read_nodes_1_1_priority;
  wire                read_nodes_1_1_conflict;
  wire       [0:0]    read_arbiter_0_losedAgainst;
  wire                read_arbiter_0_doIt;
  reg                 _zz_15;
  reg        [6:0]    _zz_16;
  reg                 _zz_17;
  reg        [6:0]    _zz_18;
  wire       [0:0]    read_arbiter_1_losedAgainst;
  wire                read_arbiter_1_doIt;
  reg                 _zz_19;
  reg        [6:0]    _zz_20;
  reg                 _zz_21;
  reg        [6:0]    _zz_22;
  wire       [43:0]   _zz_23;
  wire       [42:0]   _zz_24;
  wire       [35:0]   _zz_25;
  wire       [7:0]    _zz_26;
  wire       [43:0]   _zz_27;
  wire       [42:0]   _zz_28;
  wire       [35:0]   _zz_29;
  wire       [7:0]    _zz_30;
  (* ram_style = "block" *) reg [35:0] banks_0_ram [0:127];
  (* ram_style = "block" *) reg [35:0] banks_1_ram [0:127];

  assign _zz_35 = (write_arbiter_0_doIt && 1'b1);
  assign _zz_36 = (write_arbiter_0_doIt && 1'b1);
  assign _zz_37 = (read_arbiter_0_doIt && 1'b1);
  assign _zz_38 = (read_arbiter_0_doIt && 1'b1);
  assign _zz_39 = (read_arbiter_1_doIt && (_zz_45[0 : 0] == 1'b0));
  assign _zz_40 = (read_arbiter_1_doIt && (_zz_46[0 : 0] == 1'b0));
  assign _zz_41 = (read_ports_0_buffer_bufferIn_ready && (! read_ports_0_buffer_bufferOut_ready));
  assign _zz_42 = (read_ports_1_buffer_bufferIn_ready && (! read_ports_1_buffer_bufferOut_ready));
  assign _zz_43 = {2'd0, read_ports_0_cmd_payload_priority};
  assign _zz_44 = {2'd0, read_ports_1_cmd_payload_priority};
  assign _zz_45 = (read_ports_1_cmd_payload_address ^ 8'h0);
  assign _zz_46 = (read_ports_1_cmd_payload_address ^ 8'h01);
  assign _zz_47 = _zz_23[0 : 0];
  assign _zz_48 = _zz_26[0 : 0];
  assign _zz_49 = _zz_27[0 : 0];
  assign _zz_50 = _zz_30[0 : 0];
  assign _zz_51 = {banks_0_write_payload_data_mask,banks_0_write_payload_data_data};
  assign _zz_52 = {banks_1_write_payload_data_mask,banks_1_write_payload_data_data};
  always @ (posedge CLKOUT0) begin
    if(_zz_2) begin
      banks_0_ram[banks_0_write_payload_address] <= _zz_51;
    end
  end

  always @ (posedge CLKOUT0) begin
    if(banks_0_read_cmd_valid) begin
      _zz_31 <= banks_0_ram[banks_0_read_cmd_payload];
    end
  end

  always @ (posedge CLKOUT0) begin
    if(_zz_1) begin
      banks_1_ram[banks_1_write_payload_address] <= _zz_52;
    end
  end

  always @ (posedge CLKOUT0) begin
    if(banks_1_read_cmd_valid) begin
      _zz_32 <= banks_1_ram[banks_1_read_cmd_payload];
    end
  end

  always @(*) begin
    case(read_ports_1_buffer_groupSel)
      1'b0 : begin
        _zz_33 = banks_0_read_rsp_data;
        _zz_34 = banks_0_read_rsp_mask;
      end
      default : begin
        _zz_33 = banks_1_read_rsp_data;
        _zz_34 = banks_1_read_rsp_mask;
      end
    endcase
  end

  always @ (*) begin
    _zz_1 = 1'b0;
    if(banks_1_write_valid)begin
      _zz_1 = 1'b1;
    end
  end

  always @ (*) begin
    _zz_2 = 1'b0;
    if(banks_0_write_valid)begin
      _zz_2 = 1'b1;
    end
  end

  assign _zz_3 = _zz_31;
  assign banks_0_read_rsp_data = _zz_3[31 : 0];
  assign banks_0_read_rsp_mask = _zz_3[35 : 32];
  assign banks_0_write_valid = banks_0_writeOr_value_valid;
  assign banks_0_write_payload_address = banks_0_writeOr_value_payload_address;
  assign banks_0_write_payload_data_data = banks_0_writeOr_value_payload_data_data;
  assign banks_0_write_payload_data_mask = banks_0_writeOr_value_payload_data_mask;
  assign banks_0_read_cmd_valid = banks_0_readOr_value_valid;
  assign banks_0_read_cmd_payload = banks_0_readOr_value_payload;
  assign _zz_4 = _zz_32;
  assign banks_1_read_rsp_data = _zz_4[31 : 0];
  assign banks_1_read_rsp_mask = _zz_4[35 : 32];
  assign banks_1_write_valid = banks_1_writeOr_value_valid;
  assign banks_1_write_payload_address = banks_1_writeOr_value_payload_address;
  assign banks_1_write_payload_data_data = banks_1_writeOr_value_payload_data_data;
  assign banks_1_write_payload_data_mask = banks_1_writeOr_value_payload_data_mask;
  assign banks_1_read_cmd_valid = banks_1_readOr_value_valid;
  assign banks_1_read_cmd_payload = banks_1_readOr_value_payload;
  assign write_arbiter_0_doIt = (io_writes_0_cmd_valid && 1'b1);
  always @ (*) begin
    if(_zz_35)begin
      _zz_5 = 1'b1;
    end else begin
      _zz_5 = 1'b0;
    end
  end

  always @ (*) begin
    if(_zz_35)begin
      _zz_6 = (io_writes_0_cmd_payload_address >>> 1);
    end else begin
      _zz_6 = 7'h0;
    end
  end

  always @ (*) begin
    if(_zz_35)begin
      _zz_7 = io_writes_0_cmd_payload_data[31 : 0];
    end else begin
      _zz_7 = 32'h0;
    end
  end

  always @ (*) begin
    if(_zz_35)begin
      _zz_8 = io_writes_0_cmd_payload_mask[3 : 0];
    end else begin
      _zz_8 = 4'b0000;
    end
  end

  always @ (*) begin
    if(_zz_36)begin
      _zz_9 = 1'b1;
    end else begin
      _zz_9 = 1'b0;
    end
  end

  always @ (*) begin
    if(_zz_36)begin
      _zz_10 = (io_writes_0_cmd_payload_address >>> 1);
    end else begin
      _zz_10 = 7'h0;
    end
  end

  always @ (*) begin
    if(_zz_36)begin
      _zz_11 = io_writes_0_cmd_payload_data[63 : 32];
    end else begin
      _zz_11 = 32'h0;
    end
  end

  always @ (*) begin
    if(_zz_36)begin
      _zz_12 = io_writes_0_cmd_payload_mask[7 : 4];
    end else begin
      _zz_12 = 4'b0000;
    end
  end

  assign io_writes_0_cmd_ready = write_arbiter_0_doIt;
  assign io_writes_0_rsp_valid = write_arbiter_0_doIt_regNext;
  assign io_writes_0_rsp_payload_context = io_writes_0_cmd_payload_context_regNext;
  assign read_ports_0_buffer_bufferIn_valid = read_ports_0_buffer_s1_valid;
  assign read_ports_0_buffer_bufferIn_payload_context = read_ports_0_buffer_s1_payload_context;
  assign read_ports_0_buffer_bufferIn_payload_data = {banks_1_read_rsp_data,banks_0_read_rsp_data};
  assign read_ports_0_buffer_bufferIn_payload_mask = {banks_1_read_rsp_mask,banks_0_read_rsp_mask};
  assign read_ports_0_buffer_bufferOut_valid = (read_ports_0_buffer_bufferIn_valid || read_ports_0_buffer_bufferIn_s2mPipe_rValid);
  assign read_ports_0_buffer_bufferIn_ready = (! read_ports_0_buffer_bufferIn_s2mPipe_rValid);
  assign read_ports_0_buffer_bufferOut_payload_data = (read_ports_0_buffer_bufferIn_s2mPipe_rValid ? read_ports_0_buffer_bufferIn_s2mPipe_rData_data : read_ports_0_buffer_bufferIn_payload_data);
  assign read_ports_0_buffer_bufferOut_payload_mask = (read_ports_0_buffer_bufferIn_s2mPipe_rValid ? read_ports_0_buffer_bufferIn_s2mPipe_rData_mask : read_ports_0_buffer_bufferIn_payload_mask);
  assign read_ports_0_buffer_bufferOut_payload_context = (read_ports_0_buffer_bufferIn_s2mPipe_rValid ? read_ports_0_buffer_bufferIn_s2mPipe_rData_context : read_ports_0_buffer_bufferIn_payload_context);
  assign io_reads_0_rsp_valid = read_ports_0_buffer_bufferOut_valid;
  assign read_ports_0_buffer_bufferOut_ready = io_reads_0_rsp_ready;
  assign io_reads_0_rsp_payload_data = read_ports_0_buffer_bufferOut_payload_data;
  assign io_reads_0_rsp_payload_mask = read_ports_0_buffer_bufferOut_payload_mask;
  assign io_reads_0_rsp_payload_context = read_ports_0_buffer_bufferOut_payload_context;
  assign read_ports_0_buffer_full = (read_ports_0_buffer_bufferOut_valid && (! read_ports_0_buffer_bufferOut_ready));
  assign _zz_13 = (! read_ports_0_buffer_full);
  assign read_ports_0_cmd_valid = (io_reads_0_cmd_valid && _zz_13);
  assign io_reads_0_cmd_ready = (read_ports_0_cmd_ready && _zz_13);
  assign read_ports_0_cmd_payload_address = io_reads_0_cmd_payload_address;
  assign read_ports_0_cmd_payload_priority = io_reads_0_cmd_payload_priority;
  assign read_ports_0_cmd_payload_context = io_reads_0_cmd_payload_context;
  assign read_ports_1_buffer_groupSel = read_ports_1_buffer_s1_payload_address[0 : 0];
  assign read_ports_1_buffer_bufferIn_valid = read_ports_1_buffer_s1_valid;
  assign read_ports_1_buffer_bufferIn_payload_context = read_ports_1_buffer_s1_payload_context;
  assign read_ports_1_buffer_bufferIn_payload_data = _zz_33;
  assign read_ports_1_buffer_bufferIn_payload_mask = _zz_34;
  assign read_ports_1_buffer_bufferOut_valid = (read_ports_1_buffer_bufferIn_valid || read_ports_1_buffer_bufferIn_s2mPipe_rValid);
  assign read_ports_1_buffer_bufferIn_ready = (! read_ports_1_buffer_bufferIn_s2mPipe_rValid);
  assign read_ports_1_buffer_bufferOut_payload_data = (read_ports_1_buffer_bufferIn_s2mPipe_rValid ? read_ports_1_buffer_bufferIn_s2mPipe_rData_data : read_ports_1_buffer_bufferIn_payload_data);
  assign read_ports_1_buffer_bufferOut_payload_mask = (read_ports_1_buffer_bufferIn_s2mPipe_rValid ? read_ports_1_buffer_bufferIn_s2mPipe_rData_mask : read_ports_1_buffer_bufferIn_payload_mask);
  assign read_ports_1_buffer_bufferOut_payload_context = (read_ports_1_buffer_bufferIn_s2mPipe_rValid ? read_ports_1_buffer_bufferIn_s2mPipe_rData_context : read_ports_1_buffer_bufferIn_payload_context);
  assign io_reads_1_rsp_valid = read_ports_1_buffer_bufferOut_valid;
  assign read_ports_1_buffer_bufferOut_ready = io_reads_1_rsp_ready;
  assign io_reads_1_rsp_payload_data = read_ports_1_buffer_bufferOut_payload_data;
  assign io_reads_1_rsp_payload_mask = read_ports_1_buffer_bufferOut_payload_mask;
  assign io_reads_1_rsp_payload_context = read_ports_1_buffer_bufferOut_payload_context;
  assign read_ports_1_buffer_full = (read_ports_1_buffer_bufferOut_valid && (! read_ports_1_buffer_bufferOut_ready));
  assign _zz_14 = (! read_ports_1_buffer_full);
  assign read_ports_1_cmd_valid = (io_reads_1_cmd_valid && _zz_14);
  assign io_reads_1_cmd_ready = (read_ports_1_cmd_ready && _zz_14);
  assign read_ports_1_cmd_payload_address = io_reads_1_cmd_payload_address;
  assign read_ports_1_cmd_payload_priority = io_reads_1_cmd_payload_priority;
  assign read_ports_1_cmd_payload_context = io_reads_1_cmd_payload_context;
  assign read_nodes_0_1_priority = (read_ports_1_priority_value < read_ports_0_priority_value);
  assign read_nodes_1_0_priority = (! read_nodes_0_1_priority);
  assign read_nodes_0_1_conflict = ((read_ports_0_cmd_valid && read_ports_1_cmd_valid) && (((read_ports_0_cmd_payload_address ^ io_reads_1_cmd_payload_address) & 8'h0) == 8'h0));
  assign read_nodes_1_0_conflict = read_nodes_0_1_conflict;
  assign read_arbiter_0_losedAgainst[0] = (read_nodes_0_1_conflict && (! read_nodes_0_1_priority));
  assign read_arbiter_0_doIt = (read_ports_0_cmd_valid && (read_arbiter_0_losedAgainst == 1'b0));
  always @ (*) begin
    if(_zz_37)begin
      _zz_15 = 1'b1;
    end else begin
      _zz_15 = 1'b0;
    end
  end

  always @ (*) begin
    if(_zz_37)begin
      _zz_16 = (read_ports_0_cmd_payload_address >>> 1);
    end else begin
      _zz_16 = 7'h0;
    end
  end

  always @ (*) begin
    if(_zz_38)begin
      _zz_17 = 1'b1;
    end else begin
      _zz_17 = 1'b0;
    end
  end

  always @ (*) begin
    if(_zz_38)begin
      _zz_18 = (read_ports_0_cmd_payload_address >>> 1);
    end else begin
      _zz_18 = 7'h0;
    end
  end

  assign read_ports_0_cmd_ready = read_arbiter_0_doIt;
  assign read_ports_0_buffer_s0_valid = read_arbiter_0_doIt;
  assign read_ports_0_buffer_s0_payload_context = read_ports_0_cmd_payload_context;
  assign read_ports_0_buffer_s0_payload_address = read_ports_0_cmd_payload_address;
  assign read_arbiter_1_losedAgainst[0] = (read_nodes_1_0_conflict && (! read_nodes_1_0_priority));
  assign read_arbiter_1_doIt = (read_ports_1_cmd_valid && (read_arbiter_1_losedAgainst == 1'b0));
  always @ (*) begin
    if(_zz_39)begin
      _zz_19 = 1'b1;
    end else begin
      _zz_19 = 1'b0;
    end
  end

  always @ (*) begin
    if(_zz_39)begin
      _zz_20 = (read_ports_1_cmd_payload_address >>> 1);
    end else begin
      _zz_20 = 7'h0;
    end
  end

  always @ (*) begin
    if(_zz_40)begin
      _zz_21 = 1'b1;
    end else begin
      _zz_21 = 1'b0;
    end
  end

  always @ (*) begin
    if(_zz_40)begin
      _zz_22 = (read_ports_1_cmd_payload_address >>> 1);
    end else begin
      _zz_22 = 7'h0;
    end
  end

  assign read_ports_1_cmd_ready = read_arbiter_1_doIt;
  assign read_ports_1_buffer_s0_valid = read_arbiter_1_doIt;
  assign read_ports_1_buffer_s0_payload_context = read_ports_1_cmd_payload_context;
  assign read_ports_1_buffer_s0_payload_address = read_ports_1_cmd_payload_address;
  assign _zz_23 = {{{_zz_8,_zz_7},_zz_6},_zz_5};
  assign banks_0_writeOr_value_valid = _zz_47[0];
  assign _zz_24 = _zz_23[43 : 1];
  assign banks_0_writeOr_value_payload_address = _zz_24[6 : 0];
  assign _zz_25 = _zz_24[42 : 7];
  assign banks_0_writeOr_value_payload_data_data = _zz_25[31 : 0];
  assign banks_0_writeOr_value_payload_data_mask = _zz_25[35 : 32];
  assign _zz_26 = ({_zz_16,_zz_15} | {_zz_20,_zz_19});
  assign banks_0_readOr_value_valid = _zz_48[0];
  assign banks_0_readOr_value_payload = _zz_26[7 : 1];
  assign _zz_27 = {{{_zz_12,_zz_11},_zz_10},_zz_9};
  assign banks_1_writeOr_value_valid = _zz_49[0];
  assign _zz_28 = _zz_27[43 : 1];
  assign banks_1_writeOr_value_payload_address = _zz_28[6 : 0];
  assign _zz_29 = _zz_28[42 : 7];
  assign banks_1_writeOr_value_payload_data_data = _zz_29[31 : 0];
  assign banks_1_writeOr_value_payload_data_mask = _zz_29[35 : 32];
  assign _zz_30 = ({_zz_18,_zz_17} | {_zz_22,_zz_21});
  assign banks_1_readOr_value_valid = _zz_50[0];
  assign banks_1_readOr_value_payload = _zz_30[7 : 1];
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      write_arbiter_0_doIt_regNext <= 1'b0;
      read_ports_0_buffer_s1_valid <= 1'b0;
      read_ports_0_buffer_bufferIn_s2mPipe_rValid <= 1'b0;
      read_ports_1_buffer_s1_valid <= 1'b0;
      read_ports_1_buffer_bufferIn_s2mPipe_rValid <= 1'b0;
    end else begin
      write_arbiter_0_doIt_regNext <= write_arbiter_0_doIt;
      read_ports_0_buffer_s1_valid <= read_ports_0_buffer_s0_valid;
      if(read_ports_0_buffer_bufferOut_ready)begin
        read_ports_0_buffer_bufferIn_s2mPipe_rValid <= 1'b0;
      end
      if(_zz_41)begin
        read_ports_0_buffer_bufferIn_s2mPipe_rValid <= read_ports_0_buffer_bufferIn_valid;
      end
      read_ports_1_buffer_s1_valid <= read_ports_1_buffer_s0_valid;
      if(read_ports_1_buffer_bufferOut_ready)begin
        read_ports_1_buffer_bufferIn_s2mPipe_rValid <= 1'b0;
      end
      if(_zz_42)begin
        read_ports_1_buffer_bufferIn_s2mPipe_rValid <= read_ports_1_buffer_bufferIn_valid;
      end
    end
  end

  always @ (posedge CLKOUT0) begin
    io_writes_0_cmd_payload_context_regNext <= io_writes_0_cmd_payload_context;
    read_ports_0_buffer_s1_payload_context <= read_ports_0_buffer_s0_payload_context;
    read_ports_0_buffer_s1_payload_address <= read_ports_0_buffer_s0_payload_address;
    if(_zz_41)begin
      read_ports_0_buffer_bufferIn_s2mPipe_rData_data <= read_ports_0_buffer_bufferIn_payload_data;
      read_ports_0_buffer_bufferIn_s2mPipe_rData_mask <= read_ports_0_buffer_bufferIn_payload_mask;
      read_ports_0_buffer_bufferIn_s2mPipe_rData_context <= read_ports_0_buffer_bufferIn_payload_context;
    end
    if(read_ports_0_cmd_valid)begin
      read_ports_0_priority_value <= (read_ports_0_priority_value + _zz_43);
      if(read_ports_0_cmd_ready)begin
        read_ports_0_priority_value <= 4'b0000;
      end
    end
    read_ports_1_buffer_s1_payload_context <= read_ports_1_buffer_s0_payload_context;
    read_ports_1_buffer_s1_payload_address <= read_ports_1_buffer_s0_payload_address;
    if(_zz_42)begin
      read_ports_1_buffer_bufferIn_s2mPipe_rData_data <= read_ports_1_buffer_bufferIn_payload_data;
      read_ports_1_buffer_bufferIn_s2mPipe_rData_mask <= read_ports_1_buffer_bufferIn_payload_mask;
      read_ports_1_buffer_bufferIn_s2mPipe_rData_context <= read_ports_1_buffer_bufferIn_payload_context;
    end
    if(read_ports_1_cmd_valid)begin
      read_ports_1_priority_value <= (read_ports_1_priority_value + _zz_44);
      if(read_ports_1_cmd_ready)begin
        read_ports_1_priority_value <= 4'b0000;
      end
    end
  end


endmodule

module MacEth (
  input               io_phy_rx_valid,
  output              io_phy_rx_ready,
  input               io_phy_rx_payload_last,
  input               io_phy_rx_payload_fragment_error,
  input      [1:0]    io_phy_rx_payload_fragment_data,
  output              io_phy_tx_valid,
  input               io_phy_tx_ready,
  output              io_phy_tx_payload_last,
  output     [1:0]    io_phy_tx_payload_fragment_data,
  input               io_phy_colision,
  input               io_phy_busy,
  output              io_ctrl_rx_stream_valid,
  input               io_ctrl_rx_stream_ready,
  output     [31:0]   io_ctrl_rx_stream_payload,
  input               io_ctrl_rx_flush,
  input               io_ctrl_rx_alignerEnable,
  input               io_ctrl_rx_stats_clear,
  output     [7:0]    io_ctrl_rx_stats_drops,
  output     [7:0]    io_ctrl_rx_stats_errors,
  input               io_ctrl_tx_stream_valid,
  output              io_ctrl_tx_stream_ready,
  input      [31:0]   io_ctrl_tx_stream_payload,
  output     [10:0]   io_ctrl_tx_availability,
  input               io_ctrl_tx_flush,
  input               io_ctrl_tx_alignerEnable,
  output              io_sim_drop,
  output              io_sim_error,
  output              io_sim_commit,
  input               systemCd_logic_outputReset,
  output              txReset_1,
  input               CLKOUT5,
  input               CLKOUT0
);
  wire                _zz_4;
  wire                _zz_5;
  wire                _zz_6;
  wire                bufferCC_33_io_dataOut;
  wire                bufferCC_34_io_dataOut;
  wire                rxFrontend_preamble_io_input_ready;
  wire                rxFrontend_preamble_io_output_valid;
  wire                rxFrontend_preamble_io_output_payload_last;
  wire                rxFrontend_preamble_io_output_payload_fragment_error;
  wire       [1:0]    rxFrontend_preamble_io_output_payload_fragment_data;
  wire                rxFrontend_checker_io_input_ready;
  wire                rxFrontend_checker_io_output_valid;
  wire                rxFrontend_checker_io_output_payload_last;
  wire                rxFrontend_checker_io_output_payload_fragment_error;
  wire       [1:0]    rxFrontend_checker_io_output_payload_fragment_data;
  wire                rxFrontend_aligner_io_input_ready;
  wire                rxFrontend_aligner_io_output_valid;
  wire                rxFrontend_aligner_io_output_payload_last;
  wire                rxFrontend_aligner_io_output_payload_fragment_error;
  wire       [1:0]    rxFrontend_aligner_io_output_payload_fragment_data;
  wire                io_ctrl_rx_alignerEnable_buffercc_io_dataOut;
  wire                rxFrontend_buffer_io_push_stream_ready;
  wire                rxFrontend_buffer_io_push_drop;
  wire                rxFrontend_buffer_io_push_commit;
  wire                rxFrontend_buffer_io_push_error;
  wire                rxFrontend_buffer_io_pop_stream_valid;
  wire       [31:0]   rxFrontend_buffer_io_pop_stream_payload;
  wire       [7:0]    rxFrontend_buffer_io_pop_stats_drops;
  wire       [7:0]    rxFrontend_buffer_io_pop_stats_errors;
  wire                txFrontend_buffer_io_push_stream_ready;
  wire       [10:0]   txFrontend_buffer_io_push_availability;
  wire                txFrontend_buffer_io_pop_stream_valid;
  wire                txFrontend_buffer_io_pop_stream_payload_last;
  wire       [1:0]    txFrontend_buffer_io_pop_stream_payload_fragment_data;
  wire                txBackend_aligner_io_input_ready;
  wire                txBackend_aligner_io_output_valid;
  wire                txBackend_aligner_io_output_payload_last;
  wire       [1:0]    txBackend_aligner_io_output_payload_fragment_data;
  wire                io_ctrl_tx_alignerEnable_buffercc_io_dataOut;
  wire                txBackend_padder_io_input_ready;
  wire                txBackend_padder_io_output_valid;
  wire                txBackend_padder_io_output_payload_last;
  wire       [1:0]    txBackend_padder_io_output_payload_fragment_data;
  wire                txBackend_crc_io_input_ready;
  wire                txBackend_crc_io_output_valid;
  wire                txBackend_crc_io_output_payload_last;
  wire       [1:0]    txBackend_crc_io_output_payload_fragment_data;
  wire                txBackend_header_io_input_ready;
  wire                txBackend_header_io_output_valid;
  wire                txBackend_header_io_output_payload_last;
  wire       [1:0]    txBackend_header_io_output_payload_fragment_data;
  wire                _zz_1;
  wire                rxReset;
  wire                _zz_2;
  wire                txReset;
  reg                 _zz_3;

  BufferCC_14 bufferCC_33 (
    .io_dataIn     (_zz_4                   ), //i
    .io_dataOut    (bufferCC_33_io_dataOut  ), //o
    .CLKOUT5       (CLKOUT5                 ), //i
    ._zz_1         (_zz_1                   )  //i
  );
  BufferCC_14 bufferCC_34 (
    .io_dataIn     (_zz_5                   ), //i
    .io_dataOut    (bufferCC_34_io_dataOut  ), //o
    .CLKOUT5       (CLKOUT5                 ), //i
    ._zz_1         (_zz_2                   )  //i
  );
  MacRxPreamble rxFrontend_preamble (
    .io_input_valid                      (io_phy_rx_valid                                           ), //i
    .io_input_ready                      (rxFrontend_preamble_io_input_ready                        ), //o
    .io_input_payload_last               (io_phy_rx_payload_last                                    ), //i
    .io_input_payload_fragment_error     (io_phy_rx_payload_fragment_error                          ), //i
    .io_input_payload_fragment_data      (io_phy_rx_payload_fragment_data[1:0]                      ), //i
    .io_output_valid                     (rxFrontend_preamble_io_output_valid                       ), //o
    .io_output_ready                     (rxFrontend_checker_io_input_ready                         ), //i
    .io_output_payload_last              (rxFrontend_preamble_io_output_payload_last                ), //o
    .io_output_payload_fragment_error    (rxFrontend_preamble_io_output_payload_fragment_error      ), //o
    .io_output_payload_fragment_data     (rxFrontend_preamble_io_output_payload_fragment_data[1:0]  ), //o
    .CLKOUT5                             (CLKOUT5                                                   ), //i
    .rxReset                             (rxReset                                                   )  //i
  );
  MacRxChecker rxFrontend_checker (
    .io_input_valid                      (rxFrontend_preamble_io_output_valid                       ), //i
    .io_input_ready                      (rxFrontend_checker_io_input_ready                         ), //o
    .io_input_payload_last               (rxFrontend_preamble_io_output_payload_last                ), //i
    .io_input_payload_fragment_error     (rxFrontend_preamble_io_output_payload_fragment_error      ), //i
    .io_input_payload_fragment_data      (rxFrontend_preamble_io_output_payload_fragment_data[1:0]  ), //i
    .io_output_valid                     (rxFrontend_checker_io_output_valid                        ), //o
    .io_output_ready                     (rxFrontend_aligner_io_input_ready                         ), //i
    .io_output_payload_last              (rxFrontend_checker_io_output_payload_last                 ), //o
    .io_output_payload_fragment_error    (rxFrontend_checker_io_output_payload_fragment_error       ), //o
    .io_output_payload_fragment_data     (rxFrontend_checker_io_output_payload_fragment_data[1:0]   ), //o
    .CLKOUT5                             (CLKOUT5                                                   ), //i
    .rxReset                             (rxReset                                                   )  //i
  );
  MacRxAligner rxFrontend_aligner (
    .io_enable                           (io_ctrl_rx_alignerEnable_buffercc_io_dataOut             ), //i
    .io_input_valid                      (rxFrontend_checker_io_output_valid                       ), //i
    .io_input_ready                      (rxFrontend_aligner_io_input_ready                        ), //o
    .io_input_payload_last               (rxFrontend_checker_io_output_payload_last                ), //i
    .io_input_payload_fragment_error     (rxFrontend_checker_io_output_payload_fragment_error      ), //i
    .io_input_payload_fragment_data      (rxFrontend_checker_io_output_payload_fragment_data[1:0]  ), //i
    .io_output_valid                     (rxFrontend_aligner_io_output_valid                       ), //o
    .io_output_ready                     (rxFrontend_buffer_io_push_stream_ready                   ), //i
    .io_output_payload_last              (rxFrontend_aligner_io_output_payload_last                ), //o
    .io_output_payload_fragment_error    (rxFrontend_aligner_io_output_payload_fragment_error      ), //o
    .io_output_payload_fragment_data     (rxFrontend_aligner_io_output_payload_fragment_data[1:0]  ), //o
    .CLKOUT5                             (CLKOUT5                                                  ), //i
    .rxReset                             (rxReset                                                  )  //i
  );
  BufferCC_16 io_ctrl_rx_alignerEnable_buffercc (
    .io_dataIn     (io_ctrl_rx_alignerEnable                      ), //i
    .io_dataOut    (io_ctrl_rx_alignerEnable_buffercc_io_dataOut  ), //o
    .CLKOUT5       (CLKOUT5                                       ), //i
    .rxReset       (rxReset                                       )  //i
  );
  MacRxBuffer rxFrontend_buffer (
    .io_push_stream_valid                     (rxFrontend_aligner_io_output_valid                       ), //i
    .io_push_stream_ready                     (rxFrontend_buffer_io_push_stream_ready                   ), //o
    .io_push_stream_payload_last              (rxFrontend_aligner_io_output_payload_last                ), //i
    .io_push_stream_payload_fragment_error    (rxFrontend_aligner_io_output_payload_fragment_error      ), //i
    .io_push_stream_payload_fragment_data     (rxFrontend_aligner_io_output_payload_fragment_data[1:0]  ), //i
    .io_push_drop                             (rxFrontend_buffer_io_push_drop                           ), //o
    .io_push_commit                           (rxFrontend_buffer_io_push_commit                         ), //o
    .io_push_error                            (rxFrontend_buffer_io_push_error                          ), //o
    .io_pop_stream_valid                      (rxFrontend_buffer_io_pop_stream_valid                    ), //o
    .io_pop_stream_ready                      (io_ctrl_rx_stream_ready                                  ), //i
    .io_pop_stream_payload                    (rxFrontend_buffer_io_pop_stream_payload[31:0]            ), //o
    .io_pop_stats_clear                       (io_ctrl_rx_stats_clear                                   ), //i
    .io_pop_stats_drops                       (rxFrontend_buffer_io_pop_stats_drops[7:0]                ), //o
    .io_pop_stats_errors                      (rxFrontend_buffer_io_pop_stats_errors[7:0]               ), //o
    .CLKOUT5                                  (CLKOUT5                                                  ), //i
    .rxReset                                  (rxReset                                                  ), //i
    .CLKOUT0                                  (CLKOUT0                                                  ), //i
    .systemCd_logic_outputReset               (systemCd_logic_outputReset                               ), //i
    .io_ctrl_rx_flush                         (io_ctrl_rx_flush                                         )  //i
  );
  MacTxBuffer txFrontend_buffer (
    .io_push_stream_valid                   (io_ctrl_tx_stream_valid                                     ), //i
    .io_push_stream_ready                   (txFrontend_buffer_io_push_stream_ready                      ), //o
    .io_push_stream_payload                 (io_ctrl_tx_stream_payload[31:0]                             ), //i
    .io_push_availability                   (txFrontend_buffer_io_push_availability[10:0]                ), //o
    .io_pop_stream_valid                    (txFrontend_buffer_io_pop_stream_valid                       ), //o
    .io_pop_stream_ready                    (txBackend_aligner_io_input_ready                            ), //i
    .io_pop_stream_payload_last             (txFrontend_buffer_io_pop_stream_payload_last                ), //o
    .io_pop_stream_payload_fragment_data    (txFrontend_buffer_io_pop_stream_payload_fragment_data[1:0]  ), //o
    .io_pop_redo                            (_zz_6                                                       ), //i
    .io_pop_commit                          (_zz_3                                                       ), //i
    .CLKOUT0                                (CLKOUT0                                                     ), //i
    .systemCd_logic_outputReset             (systemCd_logic_outputReset                                  ), //i
    .io_ctrl_tx_flush                       (io_ctrl_tx_flush                                            ), //i
    .CLKOUT5                                (CLKOUT5                                                     ), //i
    .txReset                                (txReset                                                     )  //i
  );
  MacTxAligner txBackend_aligner (
    .io_enable                          (io_ctrl_tx_alignerEnable_buffercc_io_dataOut                ), //i
    .io_input_valid                     (txFrontend_buffer_io_pop_stream_valid                       ), //i
    .io_input_ready                     (txBackend_aligner_io_input_ready                            ), //o
    .io_input_payload_last              (txFrontend_buffer_io_pop_stream_payload_last                ), //i
    .io_input_payload_fragment_data     (txFrontend_buffer_io_pop_stream_payload_fragment_data[1:0]  ), //i
    .io_output_valid                    (txBackend_aligner_io_output_valid                           ), //o
    .io_output_ready                    (txBackend_padder_io_input_ready                             ), //i
    .io_output_payload_last             (txBackend_aligner_io_output_payload_last                    ), //o
    .io_output_payload_fragment_data    (txBackend_aligner_io_output_payload_fragment_data[1:0]      ), //o
    .CLKOUT5                            (CLKOUT5                                                     ), //i
    .txReset                            (txReset                                                     )  //i
  );
  BufferCC_17 io_ctrl_tx_alignerEnable_buffercc (
    .io_dataIn     (io_ctrl_tx_alignerEnable                      ), //i
    .io_dataOut    (io_ctrl_tx_alignerEnable_buffercc_io_dataOut  ), //o
    .CLKOUT5       (CLKOUT5                                       ), //i
    .txReset       (txReset                                       )  //i
  );
  MacTxPadder txBackend_padder (
    .io_input_valid                     (txBackend_aligner_io_output_valid                       ), //i
    .io_input_ready                     (txBackend_padder_io_input_ready                         ), //o
    .io_input_payload_last              (txBackend_aligner_io_output_payload_last                ), //i
    .io_input_payload_fragment_data     (txBackend_aligner_io_output_payload_fragment_data[1:0]  ), //i
    .io_output_valid                    (txBackend_padder_io_output_valid                        ), //o
    .io_output_ready                    (txBackend_crc_io_input_ready                            ), //i
    .io_output_payload_last             (txBackend_padder_io_output_payload_last                 ), //o
    .io_output_payload_fragment_data    (txBackend_padder_io_output_payload_fragment_data[1:0]   ), //o
    .CLKOUT5                            (CLKOUT5                                                 ), //i
    .txReset                            (txReset                                                 )  //i
  );
  MacTxCrc txBackend_crc (
    .io_input_valid                     (txBackend_padder_io_output_valid                       ), //i
    .io_input_ready                     (txBackend_crc_io_input_ready                           ), //o
    .io_input_payload_last              (txBackend_padder_io_output_payload_last                ), //i
    .io_input_payload_fragment_data     (txBackend_padder_io_output_payload_fragment_data[1:0]  ), //i
    .io_output_valid                    (txBackend_crc_io_output_valid                          ), //o
    .io_output_ready                    (txBackend_header_io_input_ready                        ), //i
    .io_output_payload_last             (txBackend_crc_io_output_payload_last                   ), //o
    .io_output_payload_fragment_data    (txBackend_crc_io_output_payload_fragment_data[1:0]     ), //o
    .CLKOUT5                            (CLKOUT5                                                ), //i
    .txReset                            (txReset                                                )  //i
  );
  MacTxHeader txBackend_header (
    .io_input_valid                     (txBackend_crc_io_output_valid                          ), //i
    .io_input_ready                     (txBackend_header_io_input_ready                        ), //o
    .io_input_payload_last              (txBackend_crc_io_output_payload_last                   ), //i
    .io_input_payload_fragment_data     (txBackend_crc_io_output_payload_fragment_data[1:0]     ), //i
    .io_output_valid                    (txBackend_header_io_output_valid                       ), //o
    .io_output_ready                    (io_phy_tx_ready                                        ), //i
    .io_output_payload_last             (txBackend_header_io_output_payload_last                ), //o
    .io_output_payload_fragment_data    (txBackend_header_io_output_payload_fragment_data[1:0]  ), //o
    .CLKOUT5                            (CLKOUT5                                                ), //i
    .txReset                            (txReset                                                )  //i
  );
  assign _zz_1 = (systemCd_logic_outputReset || io_ctrl_rx_flush);
  assign _zz_4 = 1'b0;
  assign rxReset = bufferCC_33_io_dataOut;
  assign _zz_2 = (systemCd_logic_outputReset || io_ctrl_tx_flush);
  assign _zz_5 = 1'b0;
  assign txReset = bufferCC_34_io_dataOut;
  assign io_phy_rx_ready = rxFrontend_preamble_io_input_ready;
  assign io_sim_drop = rxFrontend_buffer_io_push_drop;
  assign io_sim_commit = rxFrontend_buffer_io_push_commit;
  assign io_sim_error = rxFrontend_buffer_io_push_error;
  assign io_ctrl_rx_stream_valid = rxFrontend_buffer_io_pop_stream_valid;
  assign io_ctrl_rx_stream_payload = rxFrontend_buffer_io_pop_stream_payload;
  assign io_ctrl_rx_stats_errors = rxFrontend_buffer_io_pop_stats_errors;
  assign io_ctrl_rx_stats_drops = rxFrontend_buffer_io_pop_stats_drops;
  assign io_ctrl_tx_stream_ready = txFrontend_buffer_io_push_stream_ready;
  assign io_ctrl_tx_availability = txFrontend_buffer_io_push_availability;
  assign io_phy_tx_valid = txBackend_header_io_output_valid;
  assign io_phy_tx_payload_last = txBackend_header_io_output_payload_last;
  assign io_phy_tx_payload_fragment_data = txBackend_header_io_output_payload_fragment_data;
  assign _zz_6 = 1'b0;
  assign txReset_1 = txReset;
  always @ (posedge CLKOUT5) begin
    if(txReset) begin
      _zz_3 <= 1'b0;
    end else begin
      _zz_3 <= ((txBackend_header_io_output_valid && io_phy_tx_ready) && txBackend_header_io_output_payload_last);
    end
  end


endmodule

module StreamFifo_4 (
  input               io_push_valid,
  output              io_push_ready,
  input      [7:0]    io_push_payload_data,
  output              io_pop_valid,
  input               io_pop_ready,
  output     [7:0]    io_pop_payload_data,
  input               io_flush,
  output     [8:0]    io_occupancy,
  output     [8:0]    io_availability,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  reg        [7:0]    _zz_3;
  wire       [0:0]    _zz_4;
  wire       [7:0]    _zz_5;
  wire       [0:0]    _zz_6;
  wire       [7:0]    _zz_7;
  wire       [7:0]    _zz_8;
  wire                _zz_9;
  reg                 _zz_1;
  reg                 logic_pushPtr_willIncrement;
  reg                 logic_pushPtr_willClear;
  reg        [7:0]    logic_pushPtr_valueNext;
  reg        [7:0]    logic_pushPtr_value;
  wire                logic_pushPtr_willOverflowIfInc;
  wire                logic_pushPtr_willOverflow;
  reg                 logic_popPtr_willIncrement;
  reg                 logic_popPtr_willClear;
  reg        [7:0]    logic_popPtr_valueNext;
  reg        [7:0]    logic_popPtr_value;
  wire                logic_popPtr_willOverflowIfInc;
  wire                logic_popPtr_willOverflow;
  wire                logic_ptrMatch;
  reg                 logic_risingOccupancy;
  wire                logic_pushing;
  wire                logic_popping;
  wire                logic_empty;
  wire                logic_full;
  reg                 _zz_2;
  wire       [7:0]    logic_ptrDif;
  reg [7:0] logic_ram [0:255];

  assign _zz_4 = logic_pushPtr_willIncrement;
  assign _zz_5 = {7'd0, _zz_4};
  assign _zz_6 = logic_popPtr_willIncrement;
  assign _zz_7 = {7'd0, _zz_6};
  assign _zz_8 = (logic_popPtr_value - logic_pushPtr_value);
  assign _zz_9 = 1'b1;
  always @ (posedge CLKOUT0) begin
    if(_zz_9) begin
      _zz_3 <= logic_ram[logic_popPtr_valueNext];
    end
  end

  always @ (posedge CLKOUT0) begin
    if(_zz_1) begin
      logic_ram[logic_pushPtr_value] <= io_push_payload_data;
    end
  end

  always @ (*) begin
    _zz_1 = 1'b0;
    if(logic_pushing)begin
      _zz_1 = 1'b1;
    end
  end

  always @ (*) begin
    logic_pushPtr_willIncrement = 1'b0;
    if(logic_pushing)begin
      logic_pushPtr_willIncrement = 1'b1;
    end
  end

  always @ (*) begin
    logic_pushPtr_willClear = 1'b0;
    if(io_flush)begin
      logic_pushPtr_willClear = 1'b1;
    end
  end

  assign logic_pushPtr_willOverflowIfInc = (logic_pushPtr_value == 8'hff);
  assign logic_pushPtr_willOverflow = (logic_pushPtr_willOverflowIfInc && logic_pushPtr_willIncrement);
  always @ (*) begin
    logic_pushPtr_valueNext = (logic_pushPtr_value + _zz_5);
    if(logic_pushPtr_willClear)begin
      logic_pushPtr_valueNext = 8'h0;
    end
  end

  always @ (*) begin
    logic_popPtr_willIncrement = 1'b0;
    if(logic_popping)begin
      logic_popPtr_willIncrement = 1'b1;
    end
  end

  always @ (*) begin
    logic_popPtr_willClear = 1'b0;
    if(io_flush)begin
      logic_popPtr_willClear = 1'b1;
    end
  end

  assign logic_popPtr_willOverflowIfInc = (logic_popPtr_value == 8'hff);
  assign logic_popPtr_willOverflow = (logic_popPtr_willOverflowIfInc && logic_popPtr_willIncrement);
  always @ (*) begin
    logic_popPtr_valueNext = (logic_popPtr_value + _zz_7);
    if(logic_popPtr_willClear)begin
      logic_popPtr_valueNext = 8'h0;
    end
  end

  assign logic_ptrMatch = (logic_pushPtr_value == logic_popPtr_value);
  assign logic_pushing = (io_push_valid && io_push_ready);
  assign logic_popping = (io_pop_valid && io_pop_ready);
  assign logic_empty = (logic_ptrMatch && (! logic_risingOccupancy));
  assign logic_full = (logic_ptrMatch && logic_risingOccupancy);
  assign io_push_ready = (! logic_full);
  assign io_pop_valid = ((! logic_empty) && (! (_zz_2 && (! logic_full))));
  assign io_pop_payload_data = _zz_3[7 : 0];
  assign logic_ptrDif = (logic_pushPtr_value - logic_popPtr_value);
  assign io_occupancy = {(logic_risingOccupancy && logic_ptrMatch),logic_ptrDif};
  assign io_availability = {((! logic_risingOccupancy) && logic_ptrMatch),_zz_8};
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      logic_pushPtr_value <= 8'h0;
      logic_popPtr_value <= 8'h0;
      logic_risingOccupancy <= 1'b0;
      _zz_2 <= 1'b0;
    end else begin
      logic_pushPtr_value <= logic_pushPtr_valueNext;
      logic_popPtr_value <= logic_popPtr_valueNext;
      _zz_2 <= (logic_popPtr_valueNext == logic_pushPtr_value);
      if((logic_pushing != logic_popping))begin
        logic_risingOccupancy <= logic_pushing;
      end
      if(io_flush)begin
        logic_risingOccupancy <= 1'b0;
      end
    end
  end


endmodule

module StreamFifo_3 (
  input               io_push_valid,
  output              io_push_ready,
  input               io_push_payload_kind,
  input               io_push_payload_read,
  input               io_push_payload_write,
  input      [7:0]    io_push_payload_data,
  output              io_pop_valid,
  input               io_pop_ready,
  output              io_pop_payload_kind,
  output              io_pop_payload_read,
  output              io_pop_payload_write,
  output     [7:0]    io_pop_payload_data,
  input               io_flush,
  output     [8:0]    io_occupancy,
  output     [8:0]    io_availability,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  reg        [10:0]   _zz_4;
  wire       [0:0]    _zz_5;
  wire       [7:0]    _zz_6;
  wire       [0:0]    _zz_7;
  wire       [7:0]    _zz_8;
  wire       [0:0]    _zz_9;
  wire       [0:0]    _zz_10;
  wire       [0:0]    _zz_11;
  wire       [7:0]    _zz_12;
  wire                _zz_13;
  wire       [10:0]   _zz_14;
  reg                 _zz_1;
  reg                 logic_pushPtr_willIncrement;
  reg                 logic_pushPtr_willClear;
  reg        [7:0]    logic_pushPtr_valueNext;
  reg        [7:0]    logic_pushPtr_value;
  wire                logic_pushPtr_willOverflowIfInc;
  wire                logic_pushPtr_willOverflow;
  reg                 logic_popPtr_willIncrement;
  reg                 logic_popPtr_willClear;
  reg        [7:0]    logic_popPtr_valueNext;
  reg        [7:0]    logic_popPtr_value;
  wire                logic_popPtr_willOverflowIfInc;
  wire                logic_popPtr_willOverflow;
  wire                logic_ptrMatch;
  reg                 logic_risingOccupancy;
  wire                logic_pushing;
  wire                logic_popping;
  wire                logic_empty;
  wire                logic_full;
  reg                 _zz_2;
  wire       [10:0]   _zz_3;
  wire       [7:0]    logic_ptrDif;
  reg [10:0] logic_ram [0:255];

  assign _zz_5 = logic_pushPtr_willIncrement;
  assign _zz_6 = {7'd0, _zz_5};
  assign _zz_7 = logic_popPtr_willIncrement;
  assign _zz_8 = {7'd0, _zz_7};
  assign _zz_9 = _zz_3[0 : 0];
  assign _zz_10 = _zz_3[1 : 1];
  assign _zz_11 = _zz_3[2 : 2];
  assign _zz_12 = (logic_popPtr_value - logic_pushPtr_value);
  assign _zz_13 = 1'b1;
  assign _zz_14 = {io_push_payload_data,{io_push_payload_write,{io_push_payload_read,io_push_payload_kind}}};
  always @ (posedge CLKOUT0) begin
    if(_zz_13) begin
      _zz_4 <= logic_ram[logic_popPtr_valueNext];
    end
  end

  always @ (posedge CLKOUT0) begin
    if(_zz_1) begin
      logic_ram[logic_pushPtr_value] <= _zz_14;
    end
  end

  always @ (*) begin
    _zz_1 = 1'b0;
    if(logic_pushing)begin
      _zz_1 = 1'b1;
    end
  end

  always @ (*) begin
    logic_pushPtr_willIncrement = 1'b0;
    if(logic_pushing)begin
      logic_pushPtr_willIncrement = 1'b1;
    end
  end

  always @ (*) begin
    logic_pushPtr_willClear = 1'b0;
    if(io_flush)begin
      logic_pushPtr_willClear = 1'b1;
    end
  end

  assign logic_pushPtr_willOverflowIfInc = (logic_pushPtr_value == 8'hff);
  assign logic_pushPtr_willOverflow = (logic_pushPtr_willOverflowIfInc && logic_pushPtr_willIncrement);
  always @ (*) begin
    logic_pushPtr_valueNext = (logic_pushPtr_value + _zz_6);
    if(logic_pushPtr_willClear)begin
      logic_pushPtr_valueNext = 8'h0;
    end
  end

  always @ (*) begin
    logic_popPtr_willIncrement = 1'b0;
    if(logic_popping)begin
      logic_popPtr_willIncrement = 1'b1;
    end
  end

  always @ (*) begin
    logic_popPtr_willClear = 1'b0;
    if(io_flush)begin
      logic_popPtr_willClear = 1'b1;
    end
  end

  assign logic_popPtr_willOverflowIfInc = (logic_popPtr_value == 8'hff);
  assign logic_popPtr_willOverflow = (logic_popPtr_willOverflowIfInc && logic_popPtr_willIncrement);
  always @ (*) begin
    logic_popPtr_valueNext = (logic_popPtr_value + _zz_8);
    if(logic_popPtr_willClear)begin
      logic_popPtr_valueNext = 8'h0;
    end
  end

  assign logic_ptrMatch = (logic_pushPtr_value == logic_popPtr_value);
  assign logic_pushing = (io_push_valid && io_push_ready);
  assign logic_popping = (io_pop_valid && io_pop_ready);
  assign logic_empty = (logic_ptrMatch && (! logic_risingOccupancy));
  assign logic_full = (logic_ptrMatch && logic_risingOccupancy);
  assign io_push_ready = (! logic_full);
  assign io_pop_valid = ((! logic_empty) && (! (_zz_2 && (! logic_full))));
  assign _zz_3 = _zz_4;
  assign io_pop_payload_kind = _zz_9[0];
  assign io_pop_payload_read = _zz_10[0];
  assign io_pop_payload_write = _zz_11[0];
  assign io_pop_payload_data = _zz_3[10 : 3];
  assign logic_ptrDif = (logic_pushPtr_value - logic_popPtr_value);
  assign io_occupancy = {(logic_risingOccupancy && logic_ptrMatch),logic_ptrDif};
  assign io_availability = {((! logic_risingOccupancy) && logic_ptrMatch),_zz_12};
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      logic_pushPtr_value <= 8'h0;
      logic_popPtr_value <= 8'h0;
      logic_risingOccupancy <= 1'b0;
      _zz_2 <= 1'b0;
    end else begin
      logic_pushPtr_value <= logic_pushPtr_valueNext;
      logic_popPtr_value <= logic_popPtr_valueNext;
      _zz_2 <= (logic_popPtr_valueNext == logic_pushPtr_value);
      if((logic_pushing != logic_popping))begin
        logic_risingOccupancy <= logic_pushing;
      end
      if(io_flush)begin
        logic_risingOccupancy <= 1'b0;
      end
    end
  end


endmodule

module SpiXdrMasterCtrl (
  input               io_config_kind_cpol,
  input               io_config_kind_cpha,
  input      [11:0]   io_config_sclkToogle,
  input      [0:0]    io_config_mod,
  input      [2:0]    io_config_ss_activeHigh,
  input      [11:0]   io_config_ss_setup,
  input      [11:0]   io_config_ss_hold,
  input      [11:0]   io_config_ss_disable,
  input               io_cmd_valid,
  output reg          io_cmd_ready,
  input               io_cmd_payload_kind,
  input               io_cmd_payload_read,
  input               io_cmd_payload_write,
  input      [7:0]    io_cmd_payload_data,
  output              io_rsp_valid,
  output     [7:0]    io_rsp_payload_data,
  output     [0:0]    io_spi_sclk_write,
  output reg          io_spi_data_0_writeEnable,
  input      [0:0]    io_spi_data_0_read,
  output reg [0:0]    io_spi_data_0_write,
  output              io_spi_data_1_writeEnable,
  input      [0:0]    io_spi_data_1_read,
  output     [0:0]    io_spi_data_1_write,
  output     [2:0]    io_spi_ss,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  reg        [0:0]    _zz_3;
  wire                _zz_4;
  wire                _zz_5;
  wire                _zz_6;
  wire                _zz_7;
  wire                _zz_8;
  wire                _zz_9;
  wire                _zz_10;
  wire       [2:0]    _zz_11;
  wire       [2:0]    _zz_12;
  wire       [1:0]    _zz_13;
  wire       [1:0]    _zz_14;
  reg        [11:0]   timer_counter;
  reg                 timer_reset;
  wire                timer_ss_setupHit;
  wire                timer_ss_holdHit;
  wire                timer_ss_disableHit;
  wire                timer_sclkToogleHit;
  reg                 fsm_state;
  reg        [2:0]    fsm_counter;
  reg        [0:0]    _zz_1;
  wire       [2:0]    fsm_counterPlus;
  reg                 fsm_fastRate;
  reg                 fsm_isDdr;
  reg                 fsm_lateSampling;
  reg                 fsm_readFill;
  reg                 fsm_readDone;
  reg        [2:0]    fsm_ss;
  reg        [0:0]    outputPhy_sclkWrite;
  wire       [0:0]    _zz_2;
  reg        [0:0]    outputPhy_dataWrite;
  reg        [0:0]    outputPhy_widthSel;
  reg        [0:0]    io_config_mod_delay_1;
  reg        [0:0]    inputPhy_mod;
  reg                 fsm_readFill_delay_1;
  reg                 inputPhy_readFill;
  reg                 fsm_readDone_delay_1;
  reg                 inputPhy_readDone;
  reg        [6:0]    inputPhy_buffer;
  reg        [7:0]    inputPhy_bufferNext;
  reg        [0:0]    inputPhy_widthSel;
  wire       [0:0]    inputPhy_dataWrite;
  reg        [0:0]    inputPhy_dataRead;
  reg                 fsm_state_delay_1;
  reg                 fsm_state_delay_2;
  reg        [1:0]    inputPhy_dataReadBuffer;

  assign _zz_4 = (! io_cmd_payload_kind);
  assign _zz_5 = io_cmd_payload_data[7];
  assign _zz_6 = (! fsm_state);
  assign _zz_7 = ((! io_cmd_valid) || io_cmd_ready);
  assign _zz_8 = ((timer_sclkToogleHit && (((! fsm_state) ^ fsm_lateSampling) || fsm_isDdr)) || fsm_fastRate);
  assign _zz_9 = ((timer_sclkToogleHit && (fsm_state || fsm_isDdr)) || fsm_fastRate);
  assign _zz_10 = (fsm_counterPlus == 3'b000);
  assign _zz_11 = {2'd0, _zz_1};
  assign _zz_12 = (fsm_counter >>> 0);
  assign _zz_13 = {io_spi_data_1_read[0],io_spi_data_0_read[0]};
  assign _zz_14 = {io_spi_data_1_read[0],io_spi_data_0_read[0]};
  always @(*) begin
    case(_zz_12)
      3'b000 : begin
        _zz_3 = io_cmd_payload_data[7 : 7];
      end
      3'b001 : begin
        _zz_3 = io_cmd_payload_data[6 : 6];
      end
      3'b010 : begin
        _zz_3 = io_cmd_payload_data[5 : 5];
      end
      3'b011 : begin
        _zz_3 = io_cmd_payload_data[4 : 4];
      end
      3'b100 : begin
        _zz_3 = io_cmd_payload_data[3 : 3];
      end
      3'b101 : begin
        _zz_3 = io_cmd_payload_data[2 : 2];
      end
      3'b110 : begin
        _zz_3 = io_cmd_payload_data[1 : 1];
      end
      default : begin
        _zz_3 = io_cmd_payload_data[0 : 0];
      end
    endcase
  end

  always @ (*) begin
    timer_reset = 1'b0;
    if(io_cmd_valid)begin
      if(_zz_4)begin
        timer_reset = timer_sclkToogleHit;
      end else begin
        if(! _zz_5) begin
          if(_zz_6)begin
            if(timer_ss_holdHit)begin
              timer_reset = 1'b1;
            end
          end
        end
      end
    end
    if(_zz_7)begin
      timer_reset = 1'b1;
    end
  end

  assign timer_ss_setupHit = (timer_counter == io_config_ss_setup);
  assign timer_ss_holdHit = (timer_counter == io_config_ss_hold);
  assign timer_ss_disableHit = (timer_counter == io_config_ss_disable);
  assign timer_sclkToogleHit = (timer_counter == io_config_sclkToogle);
  always @ (*) begin
    _zz_1 = 1'bx;
    case(io_config_mod)
      1'b0 : begin
        _zz_1 = 1'b1;
      end
      default : begin
        _zz_1 = 1'b1;
      end
    endcase
  end

  assign fsm_counterPlus = (fsm_counter + _zz_11);
  always @ (*) begin
    fsm_fastRate = 1'bx;
    case(io_config_mod)
      1'b0 : begin
        fsm_fastRate = 1'b0;
      end
      default : begin
        fsm_fastRate = 1'b0;
      end
    endcase
  end

  always @ (*) begin
    fsm_isDdr = 1'bx;
    case(io_config_mod)
      1'b0 : begin
        fsm_isDdr = 1'b0;
      end
      default : begin
        fsm_isDdr = 1'b0;
      end
    endcase
  end

  always @ (*) begin
    fsm_lateSampling = 1'bx;
    case(io_config_mod)
      1'b0 : begin
        fsm_lateSampling = 1'b1;
      end
      default : begin
        fsm_lateSampling = 1'b0;
      end
    endcase
  end

  always @ (*) begin
    fsm_readFill = 1'b0;
    if(io_cmd_valid)begin
      if(_zz_4)begin
        if(_zz_8)begin
          fsm_readFill = 1'b1;
        end
      end
    end
  end

  always @ (*) begin
    fsm_readDone = 1'b0;
    if(io_cmd_valid)begin
      if(_zz_4)begin
        if(_zz_8)begin
          fsm_readDone = (io_cmd_payload_read && (fsm_counterPlus == 3'b000));
        end
      end
    end
  end

  assign io_spi_ss = (~ (fsm_ss ^ io_config_ss_activeHigh));
  always @ (*) begin
    io_cmd_ready = 1'b0;
    if(io_cmd_valid)begin
      if(_zz_4)begin
        if(_zz_9)begin
          if(_zz_10)begin
            io_cmd_ready = 1'b1;
          end
        end
      end else begin
        if(_zz_5)begin
          if(timer_ss_setupHit)begin
            io_cmd_ready = 1'b1;
          end
        end else begin
          if(! _zz_6) begin
            if(timer_ss_disableHit)begin
              io_cmd_ready = 1'b1;
            end
          end
        end
      end
    end
  end

  always @ (*) begin
    outputPhy_sclkWrite = 1'b0;
    if((io_cmd_valid && (! io_cmd_payload_kind)))begin
      case(io_config_mod)
        1'b0 : begin
          outputPhy_sclkWrite = ((fsm_state ^ io_config_kind_cpha) ? 1'b1 : 1'b0);
        end
        default : begin
          outputPhy_sclkWrite = ((fsm_state ^ io_config_kind_cpha) ? 1'b1 : 1'b0);
        end
      endcase
    end
  end

  assign _zz_2[0] = io_config_kind_cpol;
  assign io_spi_sclk_write = (outputPhy_sclkWrite ^ _zz_2);
  always @ (*) begin
    outputPhy_widthSel = 1'bx;
    case(io_config_mod)
      1'b0 : begin
        outputPhy_widthSel = 1'b0;
      end
      default : begin
        outputPhy_widthSel = 1'b0;
      end
    endcase
  end

  always @ (*) begin
    outputPhy_dataWrite = 1'bx;
    case(outputPhy_widthSel)
      1'b0 : begin
        outputPhy_dataWrite[0 : 0] = _zz_3;
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    io_spi_data_0_writeEnable = 1'b0;
    case(io_config_mod)
      1'b0 : begin
        io_spi_data_0_writeEnable = 1'b1;
      end
      default : begin
        if((io_cmd_valid && io_cmd_payload_write))begin
          io_spi_data_0_writeEnable = 1'b1;
        end
      end
    endcase
  end

  assign io_spi_data_1_writeEnable = 1'b0;
  always @ (*) begin
    io_spi_data_0_write = 1'bx;
    case(io_config_mod)
      1'b0 : begin
        io_spi_data_0_write[0] = (outputPhy_dataWrite[0] || (! (io_cmd_valid && io_cmd_payload_write)));
      end
      default : begin
        io_spi_data_0_write[0] = outputPhy_dataWrite[0];
      end
    endcase
  end

  assign io_spi_data_1_write = 1'bx;
  always @ (*) begin
    inputPhy_bufferNext = 8'h0;
    case(inputPhy_widthSel)
      1'b0 : begin
        inputPhy_bufferNext = {inputPhy_buffer,inputPhy_dataRead[0 : 0]};
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    inputPhy_widthSel = 1'bx;
    case(inputPhy_mod)
      1'b0 : begin
        inputPhy_widthSel = 1'b0;
      end
      default : begin
        inputPhy_widthSel = 1'b0;
      end
    endcase
  end

  always @ (*) begin
    inputPhy_dataRead = 1'bx;
    case(inputPhy_mod)
      1'b0 : begin
        inputPhy_dataRead[0] = _zz_13[1];
      end
      default : begin
        inputPhy_dataRead[0] = _zz_14[0];
      end
    endcase
  end

  assign io_rsp_valid = inputPhy_readDone;
  assign io_rsp_payload_data = inputPhy_bufferNext;
  always @ (posedge CLKOUT0) begin
    timer_counter <= (timer_counter + 12'h001);
    if(timer_reset)begin
      timer_counter <= 12'h0;
    end
    io_config_mod_delay_1 <= io_config_mod;
    inputPhy_mod <= io_config_mod_delay_1;
    fsm_state_delay_1 <= fsm_state;
    fsm_state_delay_2 <= fsm_state_delay_1;
    if((! fsm_state_delay_2))begin
      inputPhy_dataReadBuffer <= {io_spi_data_1_read[0],io_spi_data_0_read[0]};
    end
    case(inputPhy_widthSel)
      1'b0 : begin
        if(inputPhy_readFill)begin
          inputPhy_buffer <= inputPhy_bufferNext[6:0];
        end
      end
      default : begin
      end
    endcase
  end

  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      fsm_state <= 1'b0;
      fsm_counter <= 3'b000;
      fsm_ss <= 3'b000;
      fsm_readFill_delay_1 <= 1'b0;
      inputPhy_readFill <= 1'b0;
      fsm_readDone_delay_1 <= 1'b0;
      inputPhy_readDone <= 1'b0;
    end else begin
      if(io_cmd_valid)begin
        if(_zz_4)begin
          if(timer_sclkToogleHit)begin
            fsm_state <= (! fsm_state);
          end
          if(_zz_9)begin
            fsm_counter <= fsm_counterPlus;
            if(_zz_10)begin
              fsm_state <= 1'b0;
            end
          end
        end else begin
          if(_zz_5)begin
            fsm_ss[io_cmd_payload_data[1 : 0]] <= 1'b1;
          end else begin
            if(_zz_6)begin
              if(timer_ss_holdHit)begin
                fsm_state <= 1'b1;
              end
            end else begin
              fsm_ss[io_cmd_payload_data[1 : 0]] <= 1'b0;
            end
          end
        end
      end
      if(_zz_7)begin
        fsm_state <= 1'b0;
        fsm_counter <= 3'b000;
      end
      fsm_readFill_delay_1 <= fsm_readFill;
      inputPhy_readFill <= fsm_readFill_delay_1;
      fsm_readDone_delay_1 <= fsm_readDone;
      inputPhy_readDone <= fsm_readDone_delay_1;
    end
  end


endmodule

//StreamFifo_1 replaced by StreamFifo_1

module StreamFifo_1 (
  input               io_push_valid,
  output              io_push_ready,
  input      [7:0]    io_push_payload,
  output              io_pop_valid,
  input               io_pop_ready,
  output     [7:0]    io_pop_payload,
  input               io_flush,
  output     [7:0]    io_occupancy,
  output     [7:0]    io_availability,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  reg        [7:0]    _zz_3;
  wire       [0:0]    _zz_4;
  wire       [6:0]    _zz_5;
  wire       [0:0]    _zz_6;
  wire       [6:0]    _zz_7;
  wire       [6:0]    _zz_8;
  wire                _zz_9;
  reg                 _zz_1;
  reg                 logic_pushPtr_willIncrement;
  reg                 logic_pushPtr_willClear;
  reg        [6:0]    logic_pushPtr_valueNext;
  reg        [6:0]    logic_pushPtr_value;
  wire                logic_pushPtr_willOverflowIfInc;
  wire                logic_pushPtr_willOverflow;
  reg                 logic_popPtr_willIncrement;
  reg                 logic_popPtr_willClear;
  reg        [6:0]    logic_popPtr_valueNext;
  reg        [6:0]    logic_popPtr_value;
  wire                logic_popPtr_willOverflowIfInc;
  wire                logic_popPtr_willOverflow;
  wire                logic_ptrMatch;
  reg                 logic_risingOccupancy;
  wire                logic_pushing;
  wire                logic_popping;
  wire                logic_empty;
  wire                logic_full;
  reg                 _zz_2;
  wire       [6:0]    logic_ptrDif;
  reg [7:0] logic_ram [0:127];

  assign _zz_4 = logic_pushPtr_willIncrement;
  assign _zz_5 = {6'd0, _zz_4};
  assign _zz_6 = logic_popPtr_willIncrement;
  assign _zz_7 = {6'd0, _zz_6};
  assign _zz_8 = (logic_popPtr_value - logic_pushPtr_value);
  assign _zz_9 = 1'b1;
  always @ (posedge CLKOUT0) begin
    if(_zz_9) begin
      _zz_3 <= logic_ram[logic_popPtr_valueNext];
    end
  end

  always @ (posedge CLKOUT0) begin
    if(_zz_1) begin
      logic_ram[logic_pushPtr_value] <= io_push_payload;
    end
  end

  always @ (*) begin
    _zz_1 = 1'b0;
    if(logic_pushing)begin
      _zz_1 = 1'b1;
    end
  end

  always @ (*) begin
    logic_pushPtr_willIncrement = 1'b0;
    if(logic_pushing)begin
      logic_pushPtr_willIncrement = 1'b1;
    end
  end

  always @ (*) begin
    logic_pushPtr_willClear = 1'b0;
    if(io_flush)begin
      logic_pushPtr_willClear = 1'b1;
    end
  end

  assign logic_pushPtr_willOverflowIfInc = (logic_pushPtr_value == 7'h7f);
  assign logic_pushPtr_willOverflow = (logic_pushPtr_willOverflowIfInc && logic_pushPtr_willIncrement);
  always @ (*) begin
    logic_pushPtr_valueNext = (logic_pushPtr_value + _zz_5);
    if(logic_pushPtr_willClear)begin
      logic_pushPtr_valueNext = 7'h0;
    end
  end

  always @ (*) begin
    logic_popPtr_willIncrement = 1'b0;
    if(logic_popping)begin
      logic_popPtr_willIncrement = 1'b1;
    end
  end

  always @ (*) begin
    logic_popPtr_willClear = 1'b0;
    if(io_flush)begin
      logic_popPtr_willClear = 1'b1;
    end
  end

  assign logic_popPtr_willOverflowIfInc = (logic_popPtr_value == 7'h7f);
  assign logic_popPtr_willOverflow = (logic_popPtr_willOverflowIfInc && logic_popPtr_willIncrement);
  always @ (*) begin
    logic_popPtr_valueNext = (logic_popPtr_value + _zz_7);
    if(logic_popPtr_willClear)begin
      logic_popPtr_valueNext = 7'h0;
    end
  end

  assign logic_ptrMatch = (logic_pushPtr_value == logic_popPtr_value);
  assign logic_pushing = (io_push_valid && io_push_ready);
  assign logic_popping = (io_pop_valid && io_pop_ready);
  assign logic_empty = (logic_ptrMatch && (! logic_risingOccupancy));
  assign logic_full = (logic_ptrMatch && logic_risingOccupancy);
  assign io_push_ready = (! logic_full);
  assign io_pop_valid = ((! logic_empty) && (! (_zz_2 && (! logic_full))));
  assign io_pop_payload = _zz_3;
  assign logic_ptrDif = (logic_pushPtr_value - logic_popPtr_value);
  assign io_occupancy = {(logic_risingOccupancy && logic_ptrMatch),logic_ptrDif};
  assign io_availability = {((! logic_risingOccupancy) && logic_ptrMatch),_zz_8};
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      logic_pushPtr_value <= 7'h0;
      logic_popPtr_value <= 7'h0;
      logic_risingOccupancy <= 1'b0;
      _zz_2 <= 1'b0;
    end else begin
      logic_pushPtr_value <= logic_pushPtr_valueNext;
      logic_popPtr_value <= logic_popPtr_valueNext;
      _zz_2 <= (logic_popPtr_valueNext == logic_pushPtr_value);
      if((logic_pushing != logic_popping))begin
        logic_risingOccupancy <= logic_pushing;
      end
      if(io_flush)begin
        logic_risingOccupancy <= 1'b0;
      end
    end
  end


endmodule

module UartCtrl (
  input      [2:0]    io_config_frame_dataLength,
  input      `UartStopType_defaultEncoding_type io_config_frame_stop,
  input      `UartParityType_defaultEncoding_type io_config_frame_parity,
  input      [11:0]   io_config_clockDivider,
  input               io_write_valid,
  output reg          io_write_ready,
  input      [7:0]    io_write_payload,
  output              io_read_valid,
  input               io_read_ready,
  output     [7:0]    io_read_payload,
  output              io_uart_txd,
  input               io_uart_rxd,
  output              io_readError,
  input               io_writeBreak,
  output              io_readBreak,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  wire                _zz_1;
  wire                tx_io_write_ready;
  wire                tx_io_txd;
  wire                rx_io_read_valid;
  wire       [7:0]    rx_io_read_payload;
  wire                rx_io_rts;
  wire                rx_io_error;
  wire                rx_io_break;
  reg        [11:0]   clockDivider_counter;
  wire                clockDivider_tick;
  reg                 io_write_thrown_valid;
  wire                io_write_thrown_ready;
  wire       [7:0]    io_write_thrown_payload;
  `ifndef SYNTHESIS
  reg [23:0] io_config_frame_stop_string;
  reg [31:0] io_config_frame_parity_string;
  `endif


  UartCtrlTx tx (
    .io_configFrame_dataLength     (io_config_frame_dataLength[2:0]  ), //i
    .io_configFrame_stop           (io_config_frame_stop             ), //i
    .io_configFrame_parity         (io_config_frame_parity[1:0]      ), //i
    .io_samplingTick               (clockDivider_tick                ), //i
    .io_write_valid                (io_write_thrown_valid            ), //i
    .io_write_ready                (tx_io_write_ready                ), //o
    .io_write_payload              (io_write_thrown_payload[7:0]     ), //i
    .io_cts                        (_zz_1                            ), //i
    .io_txd                        (tx_io_txd                        ), //o
    .io_break                      (io_writeBreak                    ), //i
    .CLKOUT0                       (CLKOUT0                          ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset       )  //i
  );
  UartCtrlRx rx (
    .io_configFrame_dataLength     (io_config_frame_dataLength[2:0]  ), //i
    .io_configFrame_stop           (io_config_frame_stop             ), //i
    .io_configFrame_parity         (io_config_frame_parity[1:0]      ), //i
    .io_samplingTick               (clockDivider_tick                ), //i
    .io_read_valid                 (rx_io_read_valid                 ), //o
    .io_read_ready                 (io_read_ready                    ), //i
    .io_read_payload               (rx_io_read_payload[7:0]          ), //o
    .io_rxd                        (io_uart_rxd                      ), //i
    .io_rts                        (rx_io_rts                        ), //o
    .io_error                      (rx_io_error                      ), //o
    .io_break                      (rx_io_break                      ), //o
    .CLKOUT0                       (CLKOUT0                          ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(io_config_frame_stop)
      `UartStopType_defaultEncoding_ONE : io_config_frame_stop_string = "ONE";
      `UartStopType_defaultEncoding_TWO : io_config_frame_stop_string = "TWO";
      default : io_config_frame_stop_string = "???";
    endcase
  end
  always @(*) begin
    case(io_config_frame_parity)
      `UartParityType_defaultEncoding_NONE : io_config_frame_parity_string = "NONE";
      `UartParityType_defaultEncoding_EVEN : io_config_frame_parity_string = "EVEN";
      `UartParityType_defaultEncoding_ODD : io_config_frame_parity_string = "ODD ";
      default : io_config_frame_parity_string = "????";
    endcase
  end
  `endif

  assign clockDivider_tick = (clockDivider_counter == 12'h0);
  always @ (*) begin
    io_write_thrown_valid = io_write_valid;
    if(rx_io_break)begin
      io_write_thrown_valid = 1'b0;
    end
  end

  always @ (*) begin
    io_write_ready = io_write_thrown_ready;
    if(rx_io_break)begin
      io_write_ready = 1'b1;
    end
  end

  assign io_write_thrown_payload = io_write_payload;
  assign io_write_thrown_ready = tx_io_write_ready;
  assign io_read_valid = rx_io_read_valid;
  assign io_read_payload = rx_io_read_payload;
  assign io_uart_txd = tx_io_txd;
  assign io_readError = rx_io_error;
  assign _zz_1 = 1'b0;
  assign io_readBreak = rx_io_break;
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      clockDivider_counter <= 12'h0;
    end else begin
      clockDivider_counter <= (clockDivider_counter - 12'h001);
      if(clockDivider_tick)begin
        clockDivider_counter <= io_config_clockDivider;
      end
    end
  end


endmodule

module BufferCC_22 (
  input      [31:0]   io_dataIn,
  output     [31:0]   io_dataOut,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  reg        [31:0]   buffers_0;
  reg        [31:0]   buffers_1;

  assign io_dataOut = buffers_1;
  always @ (posedge CLKOUT0) begin
    buffers_0 <= io_dataIn;
    buffers_1 <= buffers_0;
  end


endmodule

module StreamFork_1 (
  input               io_input_valid,
  output reg          io_input_ready,
  input               io_input_payload_all,
  input      [31:0]   io_input_payload_address,
  input      [5:0]    io_input_payload_length,
  input      [1:0]    io_input_payload_source,
  output              io_outputs_0_valid,
  input               io_outputs_0_ready,
  output              io_outputs_0_payload_all,
  output     [31:0]   io_outputs_0_payload_address,
  output     [5:0]    io_outputs_0_payload_length,
  output     [1:0]    io_outputs_0_payload_source,
  output              io_outputs_1_valid,
  input               io_outputs_1_ready,
  output              io_outputs_1_payload_all,
  output     [31:0]   io_outputs_1_payload_address,
  output     [5:0]    io_outputs_1_payload_length,
  output     [1:0]    io_outputs_1_payload_source,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  reg                 _zz_1;
  reg                 _zz_2;

  always @ (*) begin
    io_input_ready = 1'b1;
    if(((! io_outputs_0_ready) && _zz_1))begin
      io_input_ready = 1'b0;
    end
    if(((! io_outputs_1_ready) && _zz_2))begin
      io_input_ready = 1'b0;
    end
  end

  assign io_outputs_0_valid = (io_input_valid && _zz_1);
  assign io_outputs_0_payload_all = io_input_payload_all;
  assign io_outputs_0_payload_address = io_input_payload_address;
  assign io_outputs_0_payload_length = io_input_payload_length;
  assign io_outputs_0_payload_source = io_input_payload_source;
  assign io_outputs_1_valid = (io_input_valid && _zz_2);
  assign io_outputs_1_payload_all = io_input_payload_all;
  assign io_outputs_1_payload_address = io_input_payload_address;
  assign io_outputs_1_payload_length = io_input_payload_length;
  assign io_outputs_1_payload_source = io_input_payload_source;
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      _zz_1 <= 1'b1;
      _zz_2 <= 1'b1;
    end else begin
      if((io_outputs_0_valid && io_outputs_0_ready))begin
        _zz_1 <= 1'b0;
      end
      if((io_outputs_1_valid && io_outputs_1_ready))begin
        _zz_2 <= 1'b0;
      end
      if(io_input_ready)begin
        _zz_1 <= 1'b1;
        _zz_2 <= 1'b1;
      end
    end
  end


endmodule

module StreamArbiter_2 (
  input               io_inputs_0_valid,
  output              io_inputs_0_ready,
  input               io_inputs_0_payload_last,
  input      [1:0]    io_inputs_0_payload_fragment_source,
  input      [0:0]    io_inputs_0_payload_fragment_opcode,
  input               io_inputs_0_payload_fragment_exclusive,
  input      [31:0]   io_inputs_0_payload_fragment_address,
  input      [5:0]    io_inputs_0_payload_fragment_length,
  input      [63:0]   io_inputs_0_payload_fragment_data,
  input      [7:0]    io_inputs_0_payload_fragment_mask,
  input      [2:0]    io_inputs_0_payload_fragment_context,
  input               io_inputs_1_valid,
  output              io_inputs_1_ready,
  input               io_inputs_1_payload_last,
  input      [1:0]    io_inputs_1_payload_fragment_source,
  input      [0:0]    io_inputs_1_payload_fragment_opcode,
  input               io_inputs_1_payload_fragment_exclusive,
  input      [31:0]   io_inputs_1_payload_fragment_address,
  input      [5:0]    io_inputs_1_payload_fragment_length,
  input      [63:0]   io_inputs_1_payload_fragment_data,
  input      [7:0]    io_inputs_1_payload_fragment_mask,
  input      [2:0]    io_inputs_1_payload_fragment_context,
  input               io_inputs_2_valid,
  output              io_inputs_2_ready,
  input               io_inputs_2_payload_last,
  input      [1:0]    io_inputs_2_payload_fragment_source,
  input      [0:0]    io_inputs_2_payload_fragment_opcode,
  input               io_inputs_2_payload_fragment_exclusive,
  input      [31:0]   io_inputs_2_payload_fragment_address,
  input      [5:0]    io_inputs_2_payload_fragment_length,
  input      [63:0]   io_inputs_2_payload_fragment_data,
  input      [7:0]    io_inputs_2_payload_fragment_mask,
  input      [2:0]    io_inputs_2_payload_fragment_context,
  output              io_output_valid,
  input               io_output_ready,
  output              io_output_payload_last,
  output     [1:0]    io_output_payload_fragment_source,
  output     [0:0]    io_output_payload_fragment_opcode,
  output              io_output_payload_fragment_exclusive,
  output     [31:0]   io_output_payload_fragment_address,
  output     [5:0]    io_output_payload_fragment_length,
  output     [63:0]   io_output_payload_fragment_data,
  output     [7:0]    io_output_payload_fragment_mask,
  output     [2:0]    io_output_payload_fragment_context,
  output     [1:0]    io_chosen,
  output     [2:0]    io_chosenOH,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  reg                 _zz_8;
  reg        [1:0]    _zz_9;
  reg        [0:0]    _zz_10;
  reg                 _zz_11;
  reg        [31:0]   _zz_12;
  reg        [5:0]    _zz_13;
  reg        [63:0]   _zz_14;
  reg        [7:0]    _zz_15;
  reg        [2:0]    _zz_16;
  wire       [5:0]    _zz_17;
  wire       [2:0]    _zz_18;
  wire       [5:0]    _zz_19;
  wire       [0:0]    _zz_20;
  wire       [0:0]    _zz_21;
  wire       [0:0]    _zz_22;
  reg                 locked;
  wire                maskProposal_0;
  wire                maskProposal_1;
  wire                maskProposal_2;
  reg                 maskLocked_0;
  reg                 maskLocked_1;
  reg                 maskLocked_2;
  wire                maskRouted_0;
  wire                maskRouted_1;
  wire                maskRouted_2;
  wire       [2:0]    _zz_1;
  wire       [5:0]    _zz_2;
  wire       [5:0]    _zz_3;
  wire       [2:0]    _zz_4;
  wire       [1:0]    _zz_5;
  wire                _zz_6;
  wire                _zz_7;

  assign _zz_17 = (_zz_2 - _zz_19);
  assign _zz_18 = {maskLocked_1,{maskLocked_0,maskLocked_2}};
  assign _zz_19 = {3'd0, _zz_18};
  assign _zz_20 = _zz_4[0 : 0];
  assign _zz_21 = _zz_4[1 : 1];
  assign _zz_22 = _zz_4[2 : 2];
  always @(*) begin
    case(_zz_5)
      2'b00 : begin
        _zz_8 = io_inputs_0_payload_last;
        _zz_9 = io_inputs_0_payload_fragment_source;
        _zz_10 = io_inputs_0_payload_fragment_opcode;
        _zz_11 = io_inputs_0_payload_fragment_exclusive;
        _zz_12 = io_inputs_0_payload_fragment_address;
        _zz_13 = io_inputs_0_payload_fragment_length;
        _zz_14 = io_inputs_0_payload_fragment_data;
        _zz_15 = io_inputs_0_payload_fragment_mask;
        _zz_16 = io_inputs_0_payload_fragment_context;
      end
      2'b01 : begin
        _zz_8 = io_inputs_1_payload_last;
        _zz_9 = io_inputs_1_payload_fragment_source;
        _zz_10 = io_inputs_1_payload_fragment_opcode;
        _zz_11 = io_inputs_1_payload_fragment_exclusive;
        _zz_12 = io_inputs_1_payload_fragment_address;
        _zz_13 = io_inputs_1_payload_fragment_length;
        _zz_14 = io_inputs_1_payload_fragment_data;
        _zz_15 = io_inputs_1_payload_fragment_mask;
        _zz_16 = io_inputs_1_payload_fragment_context;
      end
      default : begin
        _zz_8 = io_inputs_2_payload_last;
        _zz_9 = io_inputs_2_payload_fragment_source;
        _zz_10 = io_inputs_2_payload_fragment_opcode;
        _zz_11 = io_inputs_2_payload_fragment_exclusive;
        _zz_12 = io_inputs_2_payload_fragment_address;
        _zz_13 = io_inputs_2_payload_fragment_length;
        _zz_14 = io_inputs_2_payload_fragment_data;
        _zz_15 = io_inputs_2_payload_fragment_mask;
        _zz_16 = io_inputs_2_payload_fragment_context;
      end
    endcase
  end

  assign maskRouted_0 = (locked ? maskLocked_0 : maskProposal_0);
  assign maskRouted_1 = (locked ? maskLocked_1 : maskProposal_1);
  assign maskRouted_2 = (locked ? maskLocked_2 : maskProposal_2);
  assign _zz_1 = {io_inputs_2_valid,{io_inputs_1_valid,io_inputs_0_valid}};
  assign _zz_2 = {_zz_1,_zz_1};
  assign _zz_3 = (_zz_2 & (~ _zz_17));
  assign _zz_4 = (_zz_3[5 : 3] | _zz_3[2 : 0]);
  assign maskProposal_0 = _zz_20[0];
  assign maskProposal_1 = _zz_21[0];
  assign maskProposal_2 = _zz_22[0];
  assign io_output_valid = (((io_inputs_0_valid && maskRouted_0) || (io_inputs_1_valid && maskRouted_1)) || (io_inputs_2_valid && maskRouted_2));
  assign _zz_5 = {maskRouted_2,maskRouted_1};
  assign io_output_payload_last = _zz_8;
  assign io_output_payload_fragment_source = _zz_9;
  assign io_output_payload_fragment_opcode = _zz_10;
  assign io_output_payload_fragment_exclusive = _zz_11;
  assign io_output_payload_fragment_address = _zz_12;
  assign io_output_payload_fragment_length = _zz_13;
  assign io_output_payload_fragment_data = _zz_14;
  assign io_output_payload_fragment_mask = _zz_15;
  assign io_output_payload_fragment_context = _zz_16;
  assign io_inputs_0_ready = (maskRouted_0 && io_output_ready);
  assign io_inputs_1_ready = (maskRouted_1 && io_output_ready);
  assign io_inputs_2_ready = (maskRouted_2 && io_output_ready);
  assign io_chosenOH = {maskRouted_2,{maskRouted_1,maskRouted_0}};
  assign _zz_6 = io_chosenOH[1];
  assign _zz_7 = io_chosenOH[2];
  assign io_chosen = {_zz_7,_zz_6};
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      locked <= 1'b0;
      maskLocked_0 <= 1'b0;
      maskLocked_1 <= 1'b0;
      maskLocked_2 <= 1'b1;
    end else begin
      if(io_output_valid)begin
        maskLocked_0 <= maskRouted_0;
        maskLocked_1 <= maskRouted_1;
        maskLocked_2 <= maskRouted_2;
      end
      if(io_output_valid)begin
        locked <= 1'b1;
      end
      if(((io_output_valid && io_output_ready) && io_output_payload_last))begin
        locked <= 1'b0;
      end
    end
  end


endmodule

module StreamArbiter_1 (
  input               io_inputs_0_valid,
  output              io_inputs_0_ready,
  input               io_inputs_0_payload_last,
  input      [1:0]    io_inputs_0_payload_fragment_source,
  input      [0:0]    io_inputs_0_payload_fragment_opcode,
  input               io_inputs_0_payload_fragment_exclusive,
  input      [31:0]   io_inputs_0_payload_fragment_address,
  input      [5:0]    io_inputs_0_payload_fragment_length,
  input      [2:0]    io_inputs_0_payload_fragment_context,
  input               io_inputs_1_valid,
  output              io_inputs_1_ready,
  input               io_inputs_1_payload_last,
  input      [1:0]    io_inputs_1_payload_fragment_source,
  input      [0:0]    io_inputs_1_payload_fragment_opcode,
  input               io_inputs_1_payload_fragment_exclusive,
  input      [31:0]   io_inputs_1_payload_fragment_address,
  input      [5:0]    io_inputs_1_payload_fragment_length,
  input      [2:0]    io_inputs_1_payload_fragment_context,
  output              io_output_valid,
  input               io_output_ready,
  output              io_output_payload_last,
  output     [1:0]    io_output_payload_fragment_source,
  output     [0:0]    io_output_payload_fragment_opcode,
  output              io_output_payload_fragment_exclusive,
  output     [31:0]   io_output_payload_fragment_address,
  output     [5:0]    io_output_payload_fragment_length,
  output     [2:0]    io_output_payload_fragment_context,
  output     [0:0]    io_chosen,
  output     [1:0]    io_chosenOH,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  wire       [1:0]    _zz_3;
  wire       [1:0]    _zz_4;
  reg                 locked;
  wire                maskProposal_0;
  wire                maskProposal_1;
  reg                 maskLocked_0;
  reg                 maskLocked_1;
  wire                maskRouted_0;
  wire                maskRouted_1;
  wire       [1:0]    _zz_1;
  wire                _zz_2;

  assign _zz_3 = (_zz_1 & (~ _zz_4));
  assign _zz_4 = (_zz_1 - 2'b01);
  assign maskRouted_0 = (locked ? maskLocked_0 : maskProposal_0);
  assign maskRouted_1 = (locked ? maskLocked_1 : maskProposal_1);
  assign _zz_1 = {io_inputs_1_valid,io_inputs_0_valid};
  assign maskProposal_0 = io_inputs_0_valid;
  assign maskProposal_1 = _zz_3[1];
  assign io_output_valid = ((io_inputs_0_valid && maskRouted_0) || (io_inputs_1_valid && maskRouted_1));
  assign io_output_payload_last = (maskRouted_0 ? io_inputs_0_payload_last : io_inputs_1_payload_last);
  assign io_output_payload_fragment_source = (maskRouted_0 ? io_inputs_0_payload_fragment_source : io_inputs_1_payload_fragment_source);
  assign io_output_payload_fragment_opcode = (maskRouted_0 ? io_inputs_0_payload_fragment_opcode : io_inputs_1_payload_fragment_opcode);
  assign io_output_payload_fragment_exclusive = (maskRouted_0 ? io_inputs_0_payload_fragment_exclusive : io_inputs_1_payload_fragment_exclusive);
  assign io_output_payload_fragment_address = (maskRouted_0 ? io_inputs_0_payload_fragment_address : io_inputs_1_payload_fragment_address);
  assign io_output_payload_fragment_length = (maskRouted_0 ? io_inputs_0_payload_fragment_length : io_inputs_1_payload_fragment_length);
  assign io_output_payload_fragment_context = (maskRouted_0 ? io_inputs_0_payload_fragment_context : io_inputs_1_payload_fragment_context);
  assign io_inputs_0_ready = (maskRouted_0 && io_output_ready);
  assign io_inputs_1_ready = (maskRouted_1 && io_output_ready);
  assign io_chosenOH = {maskRouted_1,maskRouted_0};
  assign _zz_2 = io_chosenOH[1];
  assign io_chosen = _zz_2;
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      locked <= 1'b0;
    end else begin
      if(io_output_valid)begin
        locked <= 1'b1;
      end
      if(((io_output_valid && io_output_ready) && io_output_payload_last))begin
        locked <= 1'b0;
      end
    end
  end

  always @ (posedge CLKOUT0) begin
    if(io_output_valid)begin
      maskLocked_0 <= maskRouted_0;
      maskLocked_1 <= maskRouted_1;
    end
  end


endmodule

module StreamArbiter (
  input               io_inputs_0_valid,
  output              io_inputs_0_ready,
  input               io_inputs_0_payload_last,
  input      [1:0]    io_inputs_0_payload_fragment_source,
  input      [0:0]    io_inputs_0_payload_fragment_opcode,
  input               io_inputs_0_payload_fragment_exclusive,
  input      [31:0]   io_inputs_0_payload_fragment_address,
  input      [5:0]    io_inputs_0_payload_fragment_length,
  input      [2:0]    io_inputs_0_payload_fragment_context,
  input               io_inputs_1_valid,
  output              io_inputs_1_ready,
  input               io_inputs_1_payload_last,
  input      [1:0]    io_inputs_1_payload_fragment_source,
  input      [0:0]    io_inputs_1_payload_fragment_opcode,
  input               io_inputs_1_payload_fragment_exclusive,
  input      [31:0]   io_inputs_1_payload_fragment_address,
  input      [5:0]    io_inputs_1_payload_fragment_length,
  input      [2:0]    io_inputs_1_payload_fragment_context,
  output              io_output_valid,
  input               io_output_ready,
  output              io_output_payload_last,
  output     [1:0]    io_output_payload_fragment_source,
  output     [0:0]    io_output_payload_fragment_opcode,
  output              io_output_payload_fragment_exclusive,
  output     [31:0]   io_output_payload_fragment_address,
  output     [5:0]    io_output_payload_fragment_length,
  output     [2:0]    io_output_payload_fragment_context,
  output     [0:0]    io_chosen,
  output     [1:0]    io_chosenOH,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  wire       [3:0]    _zz_6;
  wire       [1:0]    _zz_7;
  wire       [3:0]    _zz_8;
  wire       [0:0]    _zz_9;
  wire       [0:0]    _zz_10;
  reg                 locked;
  wire                maskProposal_0;
  wire                maskProposal_1;
  reg                 maskLocked_0;
  reg                 maskLocked_1;
  wire                maskRouted_0;
  wire                maskRouted_1;
  wire       [1:0]    _zz_1;
  wire       [3:0]    _zz_2;
  wire       [3:0]    _zz_3;
  wire       [1:0]    _zz_4;
  wire                _zz_5;

  assign _zz_6 = (_zz_2 - _zz_8);
  assign _zz_7 = {maskLocked_0,maskLocked_1};
  assign _zz_8 = {2'd0, _zz_7};
  assign _zz_9 = _zz_4[0 : 0];
  assign _zz_10 = _zz_4[1 : 1];
  assign maskRouted_0 = (locked ? maskLocked_0 : maskProposal_0);
  assign maskRouted_1 = (locked ? maskLocked_1 : maskProposal_1);
  assign _zz_1 = {io_inputs_1_valid,io_inputs_0_valid};
  assign _zz_2 = {_zz_1,_zz_1};
  assign _zz_3 = (_zz_2 & (~ _zz_6));
  assign _zz_4 = (_zz_3[3 : 2] | _zz_3[1 : 0]);
  assign maskProposal_0 = _zz_9[0];
  assign maskProposal_1 = _zz_10[0];
  assign io_output_valid = ((io_inputs_0_valid && maskRouted_0) || (io_inputs_1_valid && maskRouted_1));
  assign io_output_payload_last = (maskRouted_0 ? io_inputs_0_payload_last : io_inputs_1_payload_last);
  assign io_output_payload_fragment_source = (maskRouted_0 ? io_inputs_0_payload_fragment_source : io_inputs_1_payload_fragment_source);
  assign io_output_payload_fragment_opcode = (maskRouted_0 ? io_inputs_0_payload_fragment_opcode : io_inputs_1_payload_fragment_opcode);
  assign io_output_payload_fragment_exclusive = (maskRouted_0 ? io_inputs_0_payload_fragment_exclusive : io_inputs_1_payload_fragment_exclusive);
  assign io_output_payload_fragment_address = (maskRouted_0 ? io_inputs_0_payload_fragment_address : io_inputs_1_payload_fragment_address);
  assign io_output_payload_fragment_length = (maskRouted_0 ? io_inputs_0_payload_fragment_length : io_inputs_1_payload_fragment_length);
  assign io_output_payload_fragment_context = (maskRouted_0 ? io_inputs_0_payload_fragment_context : io_inputs_1_payload_fragment_context);
  assign io_inputs_0_ready = (maskRouted_0 && io_output_ready);
  assign io_inputs_1_ready = (maskRouted_1 && io_output_ready);
  assign io_chosenOH = {maskRouted_1,maskRouted_0};
  assign _zz_5 = io_chosenOH[1];
  assign io_chosen = _zz_5;
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      locked <= 1'b0;
      maskLocked_0 <= 1'b0;
      maskLocked_1 <= 1'b1;
    end else begin
      if(io_output_valid)begin
        maskLocked_0 <= maskRouted_0;
        maskLocked_1 <= maskRouted_1;
      end
      if(io_output_valid)begin
        locked <= 1'b1;
      end
      if((io_output_valid && io_output_ready))begin
        locked <= 1'b0;
      end
    end
  end


endmodule

module StreamFifo (
  input               io_push_valid,
  output              io_push_ready,
  input      [1:0]    io_push_payload,
  output              io_pop_valid,
  input               io_pop_ready,
  output     [1:0]    io_pop_payload,
  input               io_flush,
  output     [4:0]    io_occupancy,
  output     [4:0]    io_availability,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  reg        [1:0]    _zz_3;
  wire       [0:0]    _zz_4;
  wire       [3:0]    _zz_5;
  wire       [0:0]    _zz_6;
  wire       [3:0]    _zz_7;
  wire       [3:0]    _zz_8;
  wire                _zz_9;
  wire       [1:0]    _zz_10;
  reg                 _zz_1;
  reg                 logic_pushPtr_willIncrement;
  reg                 logic_pushPtr_willClear;
  reg        [3:0]    logic_pushPtr_valueNext;
  reg        [3:0]    logic_pushPtr_value;
  wire                logic_pushPtr_willOverflowIfInc;
  wire                logic_pushPtr_willOverflow;
  reg                 logic_popPtr_willIncrement;
  reg                 logic_popPtr_willClear;
  reg        [3:0]    logic_popPtr_valueNext;
  reg        [3:0]    logic_popPtr_value;
  wire                logic_popPtr_willOverflowIfInc;
  wire                logic_popPtr_willOverflow;
  wire                logic_ptrMatch;
  reg                 logic_risingOccupancy;
  wire                logic_pushing;
  wire                logic_popping;
  wire                logic_empty;
  wire                logic_full;
  reg                 _zz_2;
  wire       [3:0]    logic_ptrDif;
  reg [1:0] logic_ram [0:15];

  assign _zz_4 = logic_pushPtr_willIncrement;
  assign _zz_5 = {3'd0, _zz_4};
  assign _zz_6 = logic_popPtr_willIncrement;
  assign _zz_7 = {3'd0, _zz_6};
  assign _zz_8 = (logic_popPtr_value - logic_pushPtr_value);
  assign _zz_9 = 1'b1;
  assign _zz_10 = io_push_payload;
  always @ (posedge CLKOUT0) begin
    if(_zz_9) begin
      _zz_3 <= logic_ram[logic_popPtr_valueNext];
    end
  end

  always @ (posedge CLKOUT0) begin
    if(_zz_1) begin
      logic_ram[logic_pushPtr_value] <= _zz_10;
    end
  end

  always @ (*) begin
    _zz_1 = 1'b0;
    if(logic_pushing)begin
      _zz_1 = 1'b1;
    end
  end

  always @ (*) begin
    logic_pushPtr_willIncrement = 1'b0;
    if(logic_pushing)begin
      logic_pushPtr_willIncrement = 1'b1;
    end
  end

  always @ (*) begin
    logic_pushPtr_willClear = 1'b0;
    if(io_flush)begin
      logic_pushPtr_willClear = 1'b1;
    end
  end

  assign logic_pushPtr_willOverflowIfInc = (logic_pushPtr_value == 4'b1111);
  assign logic_pushPtr_willOverflow = (logic_pushPtr_willOverflowIfInc && logic_pushPtr_willIncrement);
  always @ (*) begin
    logic_pushPtr_valueNext = (logic_pushPtr_value + _zz_5);
    if(logic_pushPtr_willClear)begin
      logic_pushPtr_valueNext = 4'b0000;
    end
  end

  always @ (*) begin
    logic_popPtr_willIncrement = 1'b0;
    if(logic_popping)begin
      logic_popPtr_willIncrement = 1'b1;
    end
  end

  always @ (*) begin
    logic_popPtr_willClear = 1'b0;
    if(io_flush)begin
      logic_popPtr_willClear = 1'b1;
    end
  end

  assign logic_popPtr_willOverflowIfInc = (logic_popPtr_value == 4'b1111);
  assign logic_popPtr_willOverflow = (logic_popPtr_willOverflowIfInc && logic_popPtr_willIncrement);
  always @ (*) begin
    logic_popPtr_valueNext = (logic_popPtr_value + _zz_7);
    if(logic_popPtr_willClear)begin
      logic_popPtr_valueNext = 4'b0000;
    end
  end

  assign logic_ptrMatch = (logic_pushPtr_value == logic_popPtr_value);
  assign logic_pushing = (io_push_valid && io_push_ready);
  assign logic_popping = (io_pop_valid && io_pop_ready);
  assign logic_empty = (logic_ptrMatch && (! logic_risingOccupancy));
  assign logic_full = (logic_ptrMatch && logic_risingOccupancy);
  assign io_push_ready = (! logic_full);
  assign io_pop_valid = ((! logic_empty) && (! (_zz_2 && (! logic_full))));
  assign io_pop_payload = _zz_3;
  assign logic_ptrDif = (logic_pushPtr_value - logic_popPtr_value);
  assign io_occupancy = {(logic_risingOccupancy && logic_ptrMatch),logic_ptrDif};
  assign io_availability = {((! logic_risingOccupancy) && logic_ptrMatch),_zz_8};
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      logic_pushPtr_value <= 4'b0000;
      logic_popPtr_value <= 4'b0000;
      logic_risingOccupancy <= 1'b0;
      _zz_2 <= 1'b0;
    end else begin
      logic_pushPtr_value <= logic_pushPtr_valueNext;
      logic_popPtr_value <= logic_popPtr_valueNext;
      _zz_2 <= (logic_popPtr_valueNext == logic_pushPtr_value);
      if((logic_pushing != logic_popping))begin
        logic_risingOccupancy <= logic_pushing;
      end
      if(io_flush)begin
        logic_risingOccupancy <= 1'b0;
      end
    end
  end


endmodule

module StreamFork (
  input               io_input_valid,
  output reg          io_input_ready,
  input               io_input_payload_last,
  input      [1:0]    io_input_payload_fragment_source,
  input      [0:0]    io_input_payload_fragment_opcode,
  input      [63:0]   io_input_payload_fragment_data,
  input      [42:0]   io_input_payload_fragment_context,
  output              io_outputs_0_valid,
  input               io_outputs_0_ready,
  output              io_outputs_0_payload_last,
  output     [1:0]    io_outputs_0_payload_fragment_source,
  output     [0:0]    io_outputs_0_payload_fragment_opcode,
  output     [63:0]   io_outputs_0_payload_fragment_data,
  output     [42:0]   io_outputs_0_payload_fragment_context,
  output              io_outputs_1_valid,
  input               io_outputs_1_ready,
  output              io_outputs_1_payload_last,
  output     [1:0]    io_outputs_1_payload_fragment_source,
  output     [0:0]    io_outputs_1_payload_fragment_opcode,
  output     [63:0]   io_outputs_1_payload_fragment_data,
  output     [42:0]   io_outputs_1_payload_fragment_context,
  output              io_outputs_2_valid,
  input               io_outputs_2_ready,
  output              io_outputs_2_payload_last,
  output     [1:0]    io_outputs_2_payload_fragment_source,
  output     [0:0]    io_outputs_2_payload_fragment_opcode,
  output     [63:0]   io_outputs_2_payload_fragment_data,
  output     [42:0]   io_outputs_2_payload_fragment_context,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  reg                 _zz_1;
  reg                 _zz_2;
  reg                 _zz_3;

  always @ (*) begin
    io_input_ready = 1'b1;
    if(((! io_outputs_0_ready) && _zz_1))begin
      io_input_ready = 1'b0;
    end
    if(((! io_outputs_1_ready) && _zz_2))begin
      io_input_ready = 1'b0;
    end
    if(((! io_outputs_2_ready) && _zz_3))begin
      io_input_ready = 1'b0;
    end
  end

  assign io_outputs_0_valid = (io_input_valid && _zz_1);
  assign io_outputs_0_payload_last = io_input_payload_last;
  assign io_outputs_0_payload_fragment_source = io_input_payload_fragment_source;
  assign io_outputs_0_payload_fragment_opcode = io_input_payload_fragment_opcode;
  assign io_outputs_0_payload_fragment_data = io_input_payload_fragment_data;
  assign io_outputs_0_payload_fragment_context = io_input_payload_fragment_context;
  assign io_outputs_1_valid = (io_input_valid && _zz_2);
  assign io_outputs_1_payload_last = io_input_payload_last;
  assign io_outputs_1_payload_fragment_source = io_input_payload_fragment_source;
  assign io_outputs_1_payload_fragment_opcode = io_input_payload_fragment_opcode;
  assign io_outputs_1_payload_fragment_data = io_input_payload_fragment_data;
  assign io_outputs_1_payload_fragment_context = io_input_payload_fragment_context;
  assign io_outputs_2_valid = (io_input_valid && _zz_3);
  assign io_outputs_2_payload_last = io_input_payload_last;
  assign io_outputs_2_payload_fragment_source = io_input_payload_fragment_source;
  assign io_outputs_2_payload_fragment_opcode = io_input_payload_fragment_opcode;
  assign io_outputs_2_payload_fragment_data = io_input_payload_fragment_data;
  assign io_outputs_2_payload_fragment_context = io_input_payload_fragment_context;
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      _zz_1 <= 1'b1;
      _zz_2 <= 1'b1;
      _zz_3 <= 1'b1;
    end else begin
      if((io_outputs_0_valid && io_outputs_0_ready))begin
        _zz_1 <= 1'b0;
      end
      if((io_outputs_1_valid && io_outputs_1_ready))begin
        _zz_2 <= 1'b0;
      end
      if((io_outputs_2_valid && io_outputs_2_ready))begin
        _zz_3 <= 1'b0;
      end
      if(io_input_ready)begin
        _zz_1 <= 1'b1;
        _zz_2 <= 1'b1;
        _zz_3 <= 1'b1;
      end
    end
  end


endmodule

//DataCache replaced by DataCache

//InstructionCache replaced by InstructionCache

module DataCache (
  input               io_cpu_execute_isValid,
  input      [31:0]   io_cpu_execute_address,
  output reg          io_cpu_execute_haltIt,
  input               io_cpu_execute_args_wr,
  input      [31:0]   io_cpu_execute_args_data,
  input      [1:0]    io_cpu_execute_args_size,
  input               io_cpu_execute_args_isLrsc,
  input               io_cpu_execute_args_isAmo,
  input               io_cpu_execute_args_amoCtrl_swap,
  input      [2:0]    io_cpu_execute_args_amoCtrl_alu,
  input               io_cpu_execute_args_totalyConsistent,
  output              io_cpu_execute_refilling,
  input               io_cpu_memory_isValid,
  input               io_cpu_memory_isStuck,
  output              io_cpu_memory_isWrite,
  input      [31:0]   io_cpu_memory_address,
  input      [31:0]   io_cpu_memory_mmuRsp_physicalAddress,
  input               io_cpu_memory_mmuRsp_isIoAccess,
  input               io_cpu_memory_mmuRsp_allowRead,
  input               io_cpu_memory_mmuRsp_allowWrite,
  input               io_cpu_memory_mmuRsp_allowExecute,
  input               io_cpu_memory_mmuRsp_exception,
  input               io_cpu_memory_mmuRsp_refilling,
  input               io_cpu_memory_mmuRsp_bypassTranslation,
  input               io_cpu_memory_mmuRsp_ways_0_sel,
  input      [31:0]   io_cpu_memory_mmuRsp_ways_0_physical,
  input               io_cpu_memory_mmuRsp_ways_1_sel,
  input      [31:0]   io_cpu_memory_mmuRsp_ways_1_physical,
  input               io_cpu_memory_mmuRsp_ways_2_sel,
  input      [31:0]   io_cpu_memory_mmuRsp_ways_2_physical,
  input               io_cpu_memory_mmuRsp_ways_3_sel,
  input      [31:0]   io_cpu_memory_mmuRsp_ways_3_physical,
  input               io_cpu_writeBack_isValid,
  input               io_cpu_writeBack_isStuck,
  input               io_cpu_writeBack_isUser,
  output reg          io_cpu_writeBack_haltIt,
  output              io_cpu_writeBack_isWrite,
  output reg [31:0]   io_cpu_writeBack_data,
  input      [31:0]   io_cpu_writeBack_address,
  output              io_cpu_writeBack_mmuException,
  output              io_cpu_writeBack_unalignedAccess,
  output reg          io_cpu_writeBack_accessError,
  output reg          io_cpu_writeBack_keepMemRspData,
  input               io_cpu_writeBack_fence_SW,
  input               io_cpu_writeBack_fence_SR,
  input               io_cpu_writeBack_fence_SO,
  input               io_cpu_writeBack_fence_SI,
  input               io_cpu_writeBack_fence_PW,
  input               io_cpu_writeBack_fence_PR,
  input               io_cpu_writeBack_fence_PO,
  input               io_cpu_writeBack_fence_PI,
  input      [3:0]    io_cpu_writeBack_fence_FM,
  output reg          io_cpu_redo,
  input               io_cpu_flush_valid,
  output reg          io_cpu_flush_ready,
  output reg          io_mem_cmd_valid,
  input               io_mem_cmd_ready,
  output reg          io_mem_cmd_payload_wr,
  output              io_mem_cmd_payload_uncached,
  output reg [31:0]   io_mem_cmd_payload_address,
  output     [31:0]   io_mem_cmd_payload_data,
  output     [3:0]    io_mem_cmd_payload_mask,
  output reg [3:0]    io_mem_cmd_payload_length,
  output              io_mem_cmd_payload_exclusive,
  output              io_mem_cmd_payload_last,
  input               io_mem_rsp_valid,
  input      [2:0]    io_mem_rsp_payload_aggregated,
  input               io_mem_rsp_payload_last,
  input      [63:0]   io_mem_rsp_payload_data,
  input               io_mem_rsp_payload_error,
  input               io_mem_rsp_payload_exclusive,
  input               io_mem_inv_valid,
  output              io_mem_inv_ready,
  input               io_mem_inv_payload_last,
  input               io_mem_inv_payload_fragment_enable,
  input      [31:0]   io_mem_inv_payload_fragment_address,
  output              io_mem_ack_valid,
  input               io_mem_ack_ready,
  output              io_mem_ack_payload_last,
  output              io_mem_ack_payload_fragment_hit,
  input               io_mem_sync_valid,
  output              io_mem_sync_ready,
  input      [2:0]    io_mem_sync_payload_aggregated,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  wire                _zz_28;
  wire                _zz_29;
  wire                _zz_30;
  wire                _zz_31;
  reg        [21:0]   _zz_32;
  reg        [21:0]   _zz_33;
  reg        [21:0]   _zz_34;
  reg        [21:0]   _zz_35;
  wire       [0:0]    _zz_36;
  reg        [31:0]   _zz_37;
  reg        [31:0]   _zz_38;
  reg        [3:0]    _zz_39;
  reg        [3:0]    _zz_40;
  reg        [31:0]   _zz_41;
  wire       [63:0]   ways_0_data_rd_data;
  wire       [63:0]   ways_1_data_rd_data;
  wire                _zz_42;
  wire                _zz_43;
  wire                _zz_44;
  wire                _zz_45;
  wire                _zz_46;
  wire                _zz_47;
  wire                _zz_48;
  wire                _zz_49;
  wire                _zz_50;
  wire                _zz_51;
  wire                _zz_52;
  wire                _zz_53;
  wire       [2:0]    _zz_54;
  wire       [0:0]    _zz_55;
  wire       [0:0]    _zz_56;
  wire       [0:0]    _zz_57;
  wire       [0:0]    _zz_58;
  wire       [0:0]    _zz_59;
  wire       [0:0]    _zz_60;
  wire       [0:0]    _zz_61;
  wire       [0:0]    _zz_62;
  wire       [6:0]    _zz_63;
  wire       [0:0]    _zz_64;
  wire       [6:0]    _zz_65;
  wire       [3:0]    _zz_66;
  wire       [6:0]    _zz_67;
  wire       [3:0]    _zz_68;
  wire       [1:0]    _zz_69;
  wire       [3:0]    _zz_70;
  wire       [1:0]    _zz_71;
  wire       [3:0]    _zz_72;
  wire       [5:0]    _zz_73;
  wire       [6:0]    _zz_74;
  wire       [5:0]    _zz_75;
  wire       [6:0]    _zz_76;
  wire       [6:0]    _zz_77;
  wire       [0:0]    _zz_78;
  wire       [6:0]    _zz_79;
  wire       [3:0]    _zz_80;
  wire       [6:0]    _zz_81;
  wire       [6:0]    _zz_82;
  wire       [0:0]    _zz_83;
  wire       [6:0]    _zz_84;
  wire       [3:0]    _zz_85;
  wire       [6:0]    _zz_86;
  wire       [3:0]    _zz_87;
  wire       [6:0]    _zz_88;
  wire       [3:0]    _zz_89;
  wire       [6:0]    _zz_90;
  wire       [3:0]    _zz_91;
  wire       [6:0]    _zz_92;
  wire       [3:0]    _zz_93;
  wire       [6:0]    _zz_94;
  wire       [3:0]    _zz_95;
  wire       [6:0]    _zz_96;
  wire       [3:0]    _zz_97;
  wire       [6:0]    _zz_98;
  wire       [31:0]   _zz_99;
  wire       [31:0]   _zz_100;
  wire       [31:0]   _zz_101;
  wire       [31:0]   _zz_102;
  wire       [1:0]    _zz_103;
  wire       [31:0]   _zz_104;
  wire       [1:0]    _zz_105;
  wire       [1:0]    _zz_106;
  wire       [0:0]    _zz_107;
  wire       [0:0]    _zz_108;
  wire       [2:0]    _zz_109;
  wire       [2:0]    _zz_110;
  wire       [21:0]   _zz_111;
  wire       [21:0]   _zz_112;
  wire       [0:0]    _zz_113;
  wire       [0:0]    _zz_114;
  wire       [0:0]    _zz_115;
  wire       [0:0]    _zz_116;
  wire       [0:0]    _zz_117;
  wire       [0:0]    _zz_118;
  reg        [1:0]    invalidate_s1_wayHits_1;
  reg                 _zz_1;
  reg                 _zz_2;
  reg                 _zz_3;
  reg                 _zz_4;
  reg                 _zz_5;
  wire                haltCpu;
  reg                 tagsReadCmd_valid;
  reg        [5:0]    tagsReadCmd_payload;
  wire                tagsInvReadCmd_valid;
  wire       [5:0]    tagsInvReadCmd_payload;
  reg                 tagsWriteCmd_valid;
  reg        [1:0]    tagsWriteCmd_payload_way;
  reg        [5:0]    tagsWriteCmd_payload_address;
  reg                 tagsWriteCmd_payload_data_valid;
  reg                 tagsWriteCmd_payload_data_error;
  reg        [19:0]   tagsWriteCmd_payload_data_address;
  reg                 tagsWriteLastCmd_valid;
  reg        [1:0]    tagsWriteLastCmd_payload_way;
  reg        [5:0]    tagsWriteLastCmd_payload_address;
  reg                 tagsWriteLastCmd_payload_data_valid;
  reg                 tagsWriteLastCmd_payload_data_error;
  reg        [19:0]   tagsWriteLastCmd_payload_data_address;
  reg                 dataReadCmd_valid;
  reg        [8:0]    dataReadCmd_payload;
  reg                 dataWriteCmd_valid;
  reg        [1:0]    dataWriteCmd_payload_way;
  reg        [8:0]    dataWriteCmd_payload_address;
  reg        [63:0]   dataWriteCmd_payload_data;
  reg        [7:0]    dataWriteCmd_payload_mask;
  wire                _zz_6;
  wire                ways_0_tagsReadRsp_valid;
  wire                ways_0_tagsReadRsp_error;
  wire       [19:0]   ways_0_tagsReadRsp_address;
  wire       [21:0]   _zz_7;
  wire       [63:0]   ways_0_dataReadRspMem;
  wire       [31:0]   ways_0_dataReadRsp;
  wire                ways_0_tagsInvReadRsp_valid;
  wire                ways_0_tagsInvReadRsp_error;
  wire       [19:0]   ways_0_tagsInvReadRsp_address;
  wire       [21:0]   _zz_8;
  wire                _zz_9;
  wire                ways_1_tagsReadRsp_valid;
  wire                ways_1_tagsReadRsp_error;
  wire       [19:0]   ways_1_tagsReadRsp_address;
  wire       [21:0]   _zz_10;
  wire       [63:0]   ways_1_dataReadRspMem;
  wire       [31:0]   ways_1_dataReadRsp;
  wire                ways_1_tagsInvReadRsp_valid;
  wire                ways_1_tagsInvReadRsp_error;
  wire       [19:0]   ways_1_tagsInvReadRsp_address;
  wire       [21:0]   _zz_11;
  reg                 rspSync;
  reg                 rspLast;
  reg                 memCmdSent;
  reg        [6:0]    pending_counter;
  wire       [6:0]    pending_counterNext;
  reg                 pending_done;
  reg                 pending_full;
  reg                 pending_last;
  wire       [3:0]    sync_syncCount;
  reg        [6:0]    sync_syncContext_wPtr;
  reg        [6:0]    sync_syncContext_rPtr;
  wire       [6:0]    _zz_12;
  wire                sync_syncContext_uncached;
  reg                 sync_syncContext_full;
  reg        [6:0]    sync_writeCached_pendingSync;
  wire       [6:0]    sync_writeCached_pendingSyncNext;
  reg        [6:0]    sync_writeUncached_pendingSync;
  wire       [6:0]    sync_writeUncached_pendingSyncNext;
  reg        [6:0]    sync_w2w_counter;
  wire                sync_w2w_busy;
  reg        [6:0]    sync_w2r_counter;
  wire                sync_w2r_busy;
  reg        [6:0]    sync_w2i_counter;
  wire                sync_w2i_busy;
  reg        [6:0]    sync_w2o_counter;
  wire                sync_w2o_busy;
  reg        [6:0]    sync_o2w_counter;
  wire                sync_o2w_busy;
  reg        [6:0]    sync_o2r_counter;
  wire                sync_o2r_busy;
  wire                sync_notTotalyConsistent;
  reg        [3:0]    _zz_13;
  wire       [3:0]    stage0_mask;
  wire       [9:0]    _zz_14;
  reg        [1:0]    stage0_dataColisions;
  wire       [8:0]    _zz_15;
  wire       [3:0]    _zz_16;
  reg        [1:0]    stage0_wayInvalidate;
  reg                 stageA_request_wr;
  reg        [31:0]   stageA_request_data;
  reg        [1:0]    stageA_request_size;
  reg                 stageA_request_isLrsc;
  reg                 stageA_request_isAmo;
  reg                 stageA_request_amoCtrl_swap;
  reg        [2:0]    stageA_request_amoCtrl_alu;
  reg                 stageA_request_totalyConsistent;
  reg        [3:0]    stageA_mask;
  reg                 stageA_consistancyCheck_hazard;
  wire                stageA_consistancyCheck_w;
  reg                 _zz_17;
  wire                stageA_consistancyCheck_r;
  wire                stageA_consistancyCheck_o;
  wire                stageA_consistancyCheck_i;
  wire                stageA_consistancyCheck_s;
  wire                stageA_consistancyCheck_l;
  wire       [1:0]    stageA_wayHits;
  reg        [1:0]    _zz_18;
  reg        [1:0]    stageA_wayInvalidate;
  reg        [1:0]    stage0_dataColisions_regNextWhen;
  wire       [9:0]    _zz_19;
  reg        [1:0]    _zz_20;
  wire       [8:0]    _zz_21;
  wire       [3:0]    _zz_22;
  wire       [1:0]    stageA_dataColisions;
  reg                 stageB_request_wr;
  reg        [31:0]   stageB_request_data;
  reg        [1:0]    stageB_request_size;
  reg                 stageB_request_isLrsc;
  reg                 stageB_request_isAmo;
  reg                 stageB_request_amoCtrl_swap;
  reg        [2:0]    stageB_request_amoCtrl_alu;
  reg                 stageB_request_totalyConsistent;
  reg                 stageB_mmuRspFreeze;
  reg        [31:0]   stageB_mmuRsp_physicalAddress;
  reg                 stageB_mmuRsp_isIoAccess;
  reg                 stageB_mmuRsp_allowRead;
  reg                 stageB_mmuRsp_allowWrite;
  reg                 stageB_mmuRsp_allowExecute;
  reg                 stageB_mmuRsp_exception;
  reg                 stageB_mmuRsp_refilling;
  reg                 stageB_mmuRsp_bypassTranslation;
  reg                 stageB_mmuRsp_ways_0_sel;
  reg        [31:0]   stageB_mmuRsp_ways_0_physical;
  reg                 stageB_mmuRsp_ways_1_sel;
  reg        [31:0]   stageB_mmuRsp_ways_1_physical;
  reg                 stageB_mmuRsp_ways_2_sel;
  reg        [31:0]   stageB_mmuRsp_ways_2_physical;
  reg                 stageB_mmuRsp_ways_3_sel;
  reg        [31:0]   stageB_mmuRsp_ways_3_physical;
  reg                 stageB_tagsReadRsp_0_valid;
  reg                 stageB_tagsReadRsp_0_error;
  reg        [19:0]   stageB_tagsReadRsp_0_address;
  reg                 stageB_tagsReadRsp_1_valid;
  reg                 stageB_tagsReadRsp_1_error;
  reg        [19:0]   stageB_tagsReadRsp_1_address;
  reg        [31:0]   stageB_dataReadRsp_0;
  reg        [31:0]   stageB_dataReadRsp_1;
  reg        [1:0]    stageB_wayInvalidate;
  reg                 stageB_consistancyHazard;
  reg        [1:0]    stageB_dataColisions;
  reg                 stageB_unaligned;
  reg        [1:0]    stageB_waysHitsBeforeInvalidate;
  wire       [1:0]    stageB_waysHits;
  wire                stageB_waysHit;
  wire       [31:0]   stageB_dataMux;
  reg        [3:0]    stageB_mask;
  reg                 stageB_loaderValid;
  wire       [31:0]   stageB_ioMemRspMuxed;
  reg                 stageB_flusher_valid;
  reg                 stageB_flusher_hold;
  reg                 stageB_flusher_start;
  wire                stageB_isAmoCached;
  reg        [31:0]   stageB_requestDataBypass;
  wire                stageB_amo_compare;
  wire                stageB_amo_unsigned;
  wire       [31:0]   stageB_amo_addSub;
  wire                stageB_amo_less;
  wire                stageB_amo_selectRf;
  reg        [31:0]   stageB_amo_result;
  reg        [31:0]   stageB_amo_resultReg;
  reg        `DataCacheExternalAmoStates_defaultEncoding_type stageB_amo_external_state;
  reg                 stageB_cpuWriteToCache;
  wire       [1:0]    _zz_23;
  wire                stageB_bypassCache;
  reg                 _zz_24;
  reg        [1:0]    _zz_25;
  reg                 loader_valid;
  reg                 loader_counter_willIncrement;
  wire                loader_counter_willClear;
  reg        [2:0]    loader_counter_valueNext;
  reg        [2:0]    loader_counter_value;
  wire                loader_counter_willOverflowIfInc;
  wire                loader_counter_willOverflow;
  reg        [1:0]    loader_waysAllocator;
  reg                 loader_error;
  reg                 loader_kill;
  reg                 loader_killReg;
  reg                 loader_done;
  reg                 loader_valid_regNext;
  wire                invalidate_s0_loaderTagHit;
  wire                invalidate_s0_loaderLineHit;
  wire                invalidate_s1_input_valid;
  wire                invalidate_s1_input_ready;
  wire                invalidate_s1_input_payload_last;
  wire                invalidate_s1_input_payload_fragment_enable;
  wire       [31:0]   invalidate_s1_input_payload_fragment_address;
  reg                 io_mem_inv_m2sPipe_rValid;
  reg                 io_mem_inv_m2sPipe_rData_last;
  reg                 io_mem_inv_m2sPipe_rData_fragment_enable;
  reg        [31:0]   io_mem_inv_m2sPipe_rData_fragment_address;
  reg                 invalidate_s1_loaderValid;
  reg        [1:0]    invalidate_s1_loaderWay;
  reg                 invalidate_s1_loaderTagHit;
  reg                 invalidate_s1_loaderLineHit;
  wire       [1:0]    invalidate_s1_invalidations;
  reg        [1:0]    _zz_26;
  wire       [1:0]    invalidate_s1_wayHits;
  wire                invalidate_s2_input_valid;
  wire                invalidate_s2_input_ready;
  wire                invalidate_s2_input_payload_last;
  wire                invalidate_s2_input_payload_fragment_enable;
  wire       [31:0]   invalidate_s2_input_payload_fragment_address;
  reg                 invalidate_s1_input_m2sPipe_rValid;
  reg                 invalidate_s1_input_m2sPipe_rData_last;
  reg                 invalidate_s1_input_m2sPipe_rData_fragment_enable;
  reg        [31:0]   invalidate_s1_input_m2sPipe_rData_fragment_address;
  reg        [1:0]    invalidate_s2_wayHits;
  wire                invalidate_s2_wayHit;
  reg        [1:0]    _zz_27;
  `ifndef SYNTHESIS
  reg [47:0] stageB_amo_external_state_string;
  `endif

  reg [21:0] ways_0_tags [0:63];
  reg [21:0] ways_1_tags [0:63];
  (* ram_style = "distributed" *) reg [0:0] sync_syncContext_history [0:63];

  assign _zz_42 = ((io_mem_cmd_valid && io_mem_cmd_ready) && io_mem_cmd_payload_wr);
  assign _zz_43 = (io_cpu_execute_isValid && (! io_cpu_memory_isStuck));
  assign _zz_44 = ((((stageB_consistancyHazard || stageB_mmuRsp_refilling) || io_cpu_writeBack_accessError) || io_cpu_writeBack_mmuException) || io_cpu_writeBack_unalignedAccess);
  assign _zz_45 = (invalidate_s2_input_valid && invalidate_s2_input_payload_fragment_enable);
  assign _zz_46 = ((loader_valid && io_mem_rsp_valid) && rspLast);
  assign _zz_47 = (stageB_mmuRsp_isIoAccess || stageB_request_isLrsc);
  assign _zz_48 = (stageB_waysHit || (stageB_request_wr && (! stageB_isAmoCached)));
  assign _zz_49 = (stageB_request_isLrsc && stageB_request_wr);
  assign _zz_50 = (((! stageB_request_wr) || stageB_isAmoCached) && ((stageB_dataColisions & stageB_waysHits) != 2'b00));
  assign _zz_51 = (! stageB_flusher_hold);
  assign _zz_52 = (stageB_mmuRsp_physicalAddress[11 : 6] != 6'h3f);
  assign _zz_53 = (io_mem_rsp_valid && pending_last);
  assign _zz_54 = (stageB_request_amoCtrl_alu | {stageB_request_amoCtrl_swap,2'b00});
  assign _zz_55 = _zz_7[0 : 0];
  assign _zz_56 = _zz_7[1 : 1];
  assign _zz_57 = _zz_8[0 : 0];
  assign _zz_58 = _zz_8[1 : 1];
  assign _zz_59 = _zz_10[0 : 0];
  assign _zz_60 = _zz_10[1 : 1];
  assign _zz_61 = _zz_11[0 : 0];
  assign _zz_62 = _zz_11[1 : 1];
  assign _zz_63 = (pending_counter + _zz_65);
  assign _zz_64 = ((io_mem_cmd_valid && io_mem_cmd_ready) && io_mem_cmd_payload_last);
  assign _zz_65 = {6'd0, _zz_64};
  assign _zz_66 = ((io_mem_rsp_valid && io_mem_rsp_payload_last) ? _zz_68 : 4'b0000);
  assign _zz_67 = {3'd0, _zz_66};
  assign _zz_68 = ({1'b0,io_mem_rsp_payload_aggregated} + _zz_70);
  assign _zz_69 = {1'b0,1'b1};
  assign _zz_70 = {2'd0, _zz_69};
  assign _zz_71 = {1'b0,1'b1};
  assign _zz_72 = {2'd0, _zz_71};
  assign _zz_73 = sync_syncContext_wPtr[5:0];
  assign _zz_74 = {3'd0, sync_syncCount};
  assign _zz_75 = _zz_12[5:0];
  assign _zz_76 = (sync_syncContext_wPtr - sync_syncContext_rPtr);
  assign _zz_77 = (sync_writeCached_pendingSync + _zz_79);
  assign _zz_78 = (((io_mem_cmd_valid && io_mem_cmd_ready) && io_mem_cmd_payload_wr) && (! io_mem_cmd_payload_uncached));
  assign _zz_79 = {6'd0, _zz_78};
  assign _zz_80 = (((io_mem_sync_valid && io_mem_sync_ready) && (! sync_syncContext_uncached)) ? sync_syncCount : 4'b0000);
  assign _zz_81 = {3'd0, _zz_80};
  assign _zz_82 = (sync_writeUncached_pendingSync + _zz_84);
  assign _zz_83 = (((io_mem_cmd_valid && io_mem_cmd_ready) && io_mem_cmd_payload_wr) && io_mem_cmd_payload_uncached);
  assign _zz_84 = {6'd0, _zz_83};
  assign _zz_85 = (((io_mem_sync_valid && io_mem_sync_ready) && sync_syncContext_uncached) ? sync_syncCount : 4'b0000);
  assign _zz_86 = {3'd0, _zz_85};
  assign _zz_87 = ((((io_mem_sync_valid && io_mem_sync_ready) && (sync_w2w_counter != 7'h0)) && (! sync_syncContext_uncached)) ? sync_syncCount : 4'b0000);
  assign _zz_88 = {3'd0, _zz_87};
  assign _zz_89 = ((((io_mem_sync_valid && io_mem_sync_ready) && (sync_w2r_counter != 7'h0)) && (! sync_syncContext_uncached)) ? sync_syncCount : 4'b0000);
  assign _zz_90 = {3'd0, _zz_89};
  assign _zz_91 = ((((io_mem_sync_valid && io_mem_sync_ready) && (sync_w2i_counter != 7'h0)) && (! sync_syncContext_uncached)) ? sync_syncCount : 4'b0000);
  assign _zz_92 = {3'd0, _zz_91};
  assign _zz_93 = ((((io_mem_sync_valid && io_mem_sync_ready) && (sync_w2o_counter != 7'h0)) && (! sync_syncContext_uncached)) ? sync_syncCount : 4'b0000);
  assign _zz_94 = {3'd0, _zz_93};
  assign _zz_95 = ((((io_mem_sync_valid && io_mem_sync_ready) && (sync_o2w_counter != 7'h0)) && sync_syncContext_uncached) ? sync_syncCount : 4'b0000);
  assign _zz_96 = {3'd0, _zz_95};
  assign _zz_97 = ((((io_mem_sync_valid && io_mem_sync_ready) && (sync_o2r_counter != 7'h0)) && sync_syncContext_uncached) ? sync_syncCount : 4'b0000);
  assign _zz_98 = {3'd0, _zz_97};
  assign _zz_99 = ($signed(_zz_100) + $signed(_zz_104));
  assign _zz_100 = ($signed(_zz_101) + $signed(_zz_102));
  assign _zz_101 = stageB_request_data;
  assign _zz_102 = (stageB_amo_compare ? (~ stageB_ioMemRspMuxed) : stageB_ioMemRspMuxed);
  assign _zz_103 = (stageB_amo_compare ? _zz_105 : _zz_106);
  assign _zz_104 = {{30{_zz_103[1]}}, _zz_103};
  assign _zz_105 = 2'b01;
  assign _zz_106 = 2'b00;
  assign _zz_107 = (! io_mem_rsp_payload_exclusive);
  assign _zz_108 = loader_counter_willIncrement;
  assign _zz_109 = {2'd0, _zz_108};
  assign _zz_110 = {loader_waysAllocator,loader_waysAllocator[1]};
  assign _zz_111 = {tagsWriteCmd_payload_data_address,{tagsWriteCmd_payload_data_error,tagsWriteCmd_payload_data_valid}};
  assign _zz_112 = {tagsWriteCmd_payload_data_address,{tagsWriteCmd_payload_data_error,tagsWriteCmd_payload_data_valid}};
  assign _zz_113 = io_mem_cmd_payload_uncached;
  assign _zz_114 = io_cpu_memory_address[2 : 2];
  assign _zz_115 = io_cpu_memory_address[2 : 2];
  assign _zz_116 = _zz_14[0 : 0];
  assign _zz_117 = _zz_19[0 : 0];
  assign _zz_118 = io_cpu_writeBack_address[2 : 2];
  always @ (posedge CLKOUT0) begin
    if(_zz_6) begin
      _zz_32 <= ways_0_tags[tagsReadCmd_payload];
    end
  end

  always @ (posedge CLKOUT0) begin
    if(tagsInvReadCmd_valid) begin
      _zz_33 <= ways_0_tags[tagsInvReadCmd_payload];
    end
  end

  always @ (posedge CLKOUT0) begin
    if(_zz_5) begin
      ways_0_tags[tagsWriteCmd_payload_address] <= _zz_111;
    end
  end

  always @ (posedge CLKOUT0) begin
    if(_zz_9) begin
      _zz_34 <= ways_1_tags[tagsReadCmd_payload];
    end
  end

  always @ (posedge CLKOUT0) begin
    if(tagsInvReadCmd_valid) begin
      _zz_35 <= ways_1_tags[tagsInvReadCmd_payload];
    end
  end

  always @ (posedge CLKOUT0) begin
    if(_zz_3) begin
      ways_1_tags[tagsWriteCmd_payload_address] <= _zz_112;
    end
  end

  always @ (posedge CLKOUT0) begin
    if(_zz_1) begin
      sync_syncContext_history[_zz_73] <= _zz_113;
    end
  end

  assign _zz_36 = sync_syncContext_history[_zz_75];
  Ram_1w_1rs #(
    .wordCount(512),
    .wordWidth(64),
    .clockCrossing(1'b0),
    .technology("auto"),
    .readUnderWrite("dontCare"),
    .wrAddressWidth(9),
    .wrDataWidth(64),
    .wrMaskWidth(8),
    .wrMaskEnable(1'b1),
    .rdAddressWidth(9),
    .rdDataWidth(64) 
  ) ways_0_data (
    .wr_clk     (CLKOUT0                            ), //i
    .wr_en      (_zz_28                             ), //i
    .wr_mask    (dataWriteCmd_payload_mask[7:0]     ), //i
    .wr_addr    (dataWriteCmd_payload_address[8:0]  ), //i
    .wr_data    (dataWriteCmd_payload_data[63:0]    ), //i
    .rd_clk     (CLKOUT0                            ), //i
    .rd_en      (_zz_29                             ), //i
    .rd_addr    (dataReadCmd_payload[8:0]           ), //i
    .rd_data    (ways_0_data_rd_data[63:0]          )  //o
  );
  Ram_1w_1rs #(
    .wordCount(512),
    .wordWidth(64),
    .clockCrossing(1'b0),
    .technology("auto"),
    .readUnderWrite("dontCare"),
    .wrAddressWidth(9),
    .wrDataWidth(64),
    .wrMaskWidth(8),
    .wrMaskEnable(1'b1),
    .rdAddressWidth(9),
    .rdDataWidth(64) 
  ) ways_1_data (
    .wr_clk     (CLKOUT0                            ), //i
    .wr_en      (_zz_30                             ), //i
    .wr_mask    (dataWriteCmd_payload_mask[7:0]     ), //i
    .wr_addr    (dataWriteCmd_payload_address[8:0]  ), //i
    .wr_data    (dataWriteCmd_payload_data[63:0]    ), //i
    .rd_clk     (CLKOUT0                            ), //i
    .rd_en      (_zz_31                             ), //i
    .rd_addr    (dataReadCmd_payload[8:0]           ), //i
    .rd_data    (ways_1_data_rd_data[63:0]          )  //o
  );
  always @(*) begin
    case(_zz_114)
      1'b0 : begin
        _zz_37 = ways_0_dataReadRspMem[31 : 0];
      end
      default : begin
        _zz_37 = ways_0_dataReadRspMem[63 : 32];
      end
    endcase
  end

  always @(*) begin
    case(_zz_115)
      1'b0 : begin
        _zz_38 = ways_1_dataReadRspMem[31 : 0];
      end
      default : begin
        _zz_38 = ways_1_dataReadRspMem[63 : 32];
      end
    endcase
  end

  always @(*) begin
    case(_zz_116)
      1'b0 : begin
        _zz_39 = dataWriteCmd_payload_mask[3 : 0];
      end
      default : begin
        _zz_39 = dataWriteCmd_payload_mask[7 : 4];
      end
    endcase
  end

  always @(*) begin
    case(_zz_117)
      1'b0 : begin
        _zz_40 = dataWriteCmd_payload_mask[3 : 0];
      end
      default : begin
        _zz_40 = dataWriteCmd_payload_mask[7 : 4];
      end
    endcase
  end

  always @(*) begin
    case(_zz_118)
      1'b0 : begin
        _zz_41 = io_mem_rsp_payload_data[31 : 0];
      end
      default : begin
        _zz_41 = io_mem_rsp_payload_data[63 : 32];
      end
    endcase
  end

  `ifndef SYNTHESIS
  always @(*) begin
    case(stageB_amo_external_state)
      `DataCacheExternalAmoStates_defaultEncoding_LR_CMD : stageB_amo_external_state_string = "LR_CMD";
      `DataCacheExternalAmoStates_defaultEncoding_LR_RSP : stageB_amo_external_state_string = "LR_RSP";
      `DataCacheExternalAmoStates_defaultEncoding_SC_CMD : stageB_amo_external_state_string = "SC_CMD";
      `DataCacheExternalAmoStates_defaultEncoding_SC_RSP : stageB_amo_external_state_string = "SC_RSP";
      default : stageB_amo_external_state_string = "??????";
    endcase
  end
  `endif

  always @ (*) begin
    invalidate_s1_wayHits_1 = invalidate_s1_wayHits;
    if(((invalidate_s1_loaderValid && invalidate_s1_loaderLineHit) && (! invalidate_s1_loaderTagHit)))begin
      invalidate_s1_wayHits_1 = (invalidate_s1_wayHits & (~ invalidate_s1_loaderWay));
    end
  end

  always @ (*) begin
    _zz_1 = 1'b0;
    if(_zz_42)begin
      _zz_1 = 1'b1;
    end
  end

  always @ (*) begin
    _zz_2 = 1'b0;
    if((dataWriteCmd_valid && dataWriteCmd_payload_way[1]))begin
      _zz_2 = 1'b1;
    end
  end

  always @ (*) begin
    _zz_3 = 1'b0;
    if((tagsWriteCmd_valid && tagsWriteCmd_payload_way[1]))begin
      _zz_3 = 1'b1;
    end
  end

  always @ (*) begin
    _zz_4 = 1'b0;
    if((dataWriteCmd_valid && dataWriteCmd_payload_way[0]))begin
      _zz_4 = 1'b1;
    end
  end

  always @ (*) begin
    _zz_5 = 1'b0;
    if((tagsWriteCmd_valid && tagsWriteCmd_payload_way[0]))begin
      _zz_5 = 1'b1;
    end
  end

  assign haltCpu = 1'b0;
  assign _zz_6 = (tagsReadCmd_valid && (! io_cpu_memory_isStuck));
  assign _zz_7 = _zz_32;
  assign ways_0_tagsReadRsp_valid = _zz_55[0];
  assign ways_0_tagsReadRsp_error = _zz_56[0];
  assign ways_0_tagsReadRsp_address = _zz_7[21 : 2];
  assign ways_0_dataReadRspMem = ways_0_data_rd_data;
  assign ways_0_dataReadRsp = _zz_37;
  assign _zz_8 = _zz_33;
  assign ways_0_tagsInvReadRsp_valid = _zz_57[0];
  assign ways_0_tagsInvReadRsp_error = _zz_58[0];
  assign ways_0_tagsInvReadRsp_address = _zz_8[21 : 2];
  assign _zz_9 = (tagsReadCmd_valid && (! io_cpu_memory_isStuck));
  assign _zz_10 = _zz_34;
  assign ways_1_tagsReadRsp_valid = _zz_59[0];
  assign ways_1_tagsReadRsp_error = _zz_60[0];
  assign ways_1_tagsReadRsp_address = _zz_10[21 : 2];
  assign ways_1_dataReadRspMem = ways_1_data_rd_data;
  assign ways_1_dataReadRsp = _zz_38;
  assign _zz_11 = _zz_35;
  assign ways_1_tagsInvReadRsp_valid = _zz_61[0];
  assign ways_1_tagsInvReadRsp_error = _zz_62[0];
  assign ways_1_tagsInvReadRsp_address = _zz_11[21 : 2];
  always @ (*) begin
    tagsReadCmd_valid = 1'b0;
    if(_zz_43)begin
      tagsReadCmd_valid = 1'b1;
    end
  end

  always @ (*) begin
    tagsReadCmd_payload = 6'h0;
    if(_zz_43)begin
      tagsReadCmd_payload = io_cpu_execute_address[11 : 6];
    end
  end

  always @ (*) begin
    dataReadCmd_valid = 1'b0;
    if(_zz_43)begin
      dataReadCmd_valid = 1'b1;
    end
  end

  always @ (*) begin
    dataReadCmd_payload = 9'h0;
    if(_zz_43)begin
      dataReadCmd_payload = io_cpu_execute_address[11 : 3];
    end
  end

  always @ (*) begin
    tagsWriteCmd_valid = 1'b0;
    if(stageB_flusher_valid)begin
      tagsWriteCmd_valid = stageB_flusher_valid;
    end
    if(_zz_44)begin
      tagsWriteCmd_valid = 1'b0;
    end
    if(loader_done)begin
      tagsWriteCmd_valid = 1'b1;
    end
    if(_zz_45)begin
      if(invalidate_s2_wayHit)begin
        tagsWriteCmd_valid = 1'b1;
      end
    end
  end

  always @ (*) begin
    tagsWriteCmd_payload_way = 2'bxx;
    if(stageB_flusher_valid)begin
      tagsWriteCmd_payload_way = 2'b11;
    end
    if(loader_done)begin
      tagsWriteCmd_payload_way = loader_waysAllocator;
    end
    if(_zz_45)begin
      if(invalidate_s2_wayHit)begin
        tagsWriteCmd_payload_way = invalidate_s2_wayHits;
      end
    end
  end

  always @ (*) begin
    tagsWriteCmd_payload_address = 6'h0;
    if(stageB_flusher_valid)begin
      tagsWriteCmd_payload_address = stageB_mmuRsp_physicalAddress[11 : 6];
    end
    if(loader_done)begin
      tagsWriteCmd_payload_address = stageB_mmuRsp_physicalAddress[11 : 6];
    end
    if(_zz_45)begin
      if(invalidate_s2_wayHit)begin
        tagsWriteCmd_payload_address = invalidate_s2_input_payload_fragment_address[11 : 6];
      end
    end
  end

  always @ (*) begin
    tagsWriteCmd_payload_data_valid = 1'bx;
    if(stageB_flusher_valid)begin
      tagsWriteCmd_payload_data_valid = 1'b0;
    end
    if(loader_done)begin
      tagsWriteCmd_payload_data_valid = (! (loader_kill || loader_killReg));
    end
    if(_zz_45)begin
      if(invalidate_s2_wayHit)begin
        tagsWriteCmd_payload_data_valid = 1'b0;
      end
    end
  end

  always @ (*) begin
    tagsWriteCmd_payload_data_error = 1'bx;
    if(loader_done)begin
      tagsWriteCmd_payload_data_error = (loader_error || (io_mem_rsp_valid && io_mem_rsp_payload_error));
    end
  end

  always @ (*) begin
    tagsWriteCmd_payload_data_address = 20'h0;
    if(loader_done)begin
      tagsWriteCmd_payload_data_address = stageB_mmuRsp_physicalAddress[31 : 12];
    end
  end

  always @ (*) begin
    dataWriteCmd_valid = 1'b0;
    if(stageB_cpuWriteToCache)begin
      if((stageB_request_wr && stageB_waysHit))begin
        dataWriteCmd_valid = 1'b1;
      end
    end
    if(_zz_44)begin
      dataWriteCmd_valid = 1'b0;
    end
    if(_zz_46)begin
      dataWriteCmd_valid = 1'b1;
    end
  end

  always @ (*) begin
    dataWriteCmd_payload_way = 2'bxx;
    if(stageB_cpuWriteToCache)begin
      dataWriteCmd_payload_way = stageB_waysHits;
    end
    if(_zz_46)begin
      dataWriteCmd_payload_way = loader_waysAllocator;
    end
  end

  always @ (*) begin
    dataWriteCmd_payload_address = 9'h0;
    if(stageB_cpuWriteToCache)begin
      dataWriteCmd_payload_address = stageB_mmuRsp_physicalAddress[11 : 3];
    end
    if(_zz_46)begin
      dataWriteCmd_payload_address = {stageB_mmuRsp_physicalAddress[11 : 6],loader_counter_value};
    end
  end

  always @ (*) begin
    dataWriteCmd_payload_data = 64'h0;
    if(stageB_cpuWriteToCache)begin
      dataWriteCmd_payload_data[31 : 0] = stageB_requestDataBypass;
      dataWriteCmd_payload_data[63 : 32] = stageB_requestDataBypass;
    end
    if(_zz_46)begin
      dataWriteCmd_payload_data = io_mem_rsp_payload_data;
    end
  end

  always @ (*) begin
    dataWriteCmd_payload_mask = 8'h0;
    if(stageB_cpuWriteToCache)begin
      dataWriteCmd_payload_mask = 8'h0;
      if(_zz_23[0])begin
        dataWriteCmd_payload_mask[3 : 0] = stageB_mask;
      end
      if(_zz_23[1])begin
        dataWriteCmd_payload_mask[7 : 4] = stageB_mask;
      end
    end
    if(_zz_46)begin
      dataWriteCmd_payload_mask = 8'hff;
    end
  end

  always @ (*) begin
    io_cpu_execute_haltIt = 1'b0;
    if(sync_syncContext_full)begin
      io_cpu_execute_haltIt = 1'b1;
    end
  end

  always @ (*) begin
    rspSync = 1'b1;
    if(((! pending_last) || (! memCmdSent)))begin
      rspSync = 1'b0;
    end
  end

  always @ (*) begin
    rspLast = 1'b1;
    if((! pending_last))begin
      rspLast = 1'b0;
    end
  end

  assign pending_counterNext = (_zz_63 - _zz_67);
  assign io_mem_sync_ready = 1'b1;
  assign sync_syncCount = ({1'b0,io_mem_sync_payload_aggregated} + _zz_72);
  assign _zz_12 = sync_syncContext_rPtr;
  assign sync_syncContext_uncached = _zz_36[0];
  assign sync_writeCached_pendingSyncNext = (_zz_77 - _zz_81);
  assign sync_writeUncached_pendingSyncNext = (_zz_82 - _zz_86);
  assign sync_w2w_busy = (sync_w2w_counter != 7'h0);
  assign sync_w2r_busy = (sync_w2r_counter != 7'h0);
  assign sync_w2i_busy = (sync_w2i_counter != 7'h0);
  assign sync_w2o_busy = (sync_w2o_counter != 7'h0);
  assign sync_o2w_busy = (sync_o2w_counter != 7'h0);
  assign sync_o2r_busy = (sync_o2r_counter != 7'h0);
  assign sync_notTotalyConsistent = (((((sync_w2w_busy || sync_w2r_busy) || sync_w2i_busy) || sync_w2o_busy) || sync_o2w_busy) || sync_o2r_busy);
  always @ (*) begin
    case(io_cpu_execute_args_size)
      2'b00 : begin
        _zz_13 = 4'b0001;
      end
      2'b01 : begin
        _zz_13 = 4'b0011;
      end
      default : begin
        _zz_13 = 4'b1111;
      end
    endcase
  end

  assign stage0_mask = (_zz_13 <<< io_cpu_execute_address[1 : 0]);
  assign _zz_14 = io_cpu_execute_address[11 : 2];
  assign _zz_15 = (_zz_14 >>> 1);
  assign _zz_16 = _zz_39;
  always @ (*) begin
    stage0_dataColisions[0] = (((dataWriteCmd_valid && dataWriteCmd_payload_way[0]) && (dataWriteCmd_payload_address == _zz_15)) && ((stage0_mask & _zz_16) != 4'b0000));
    stage0_dataColisions[1] = (((dataWriteCmd_valid && dataWriteCmd_payload_way[1]) && (dataWriteCmd_payload_address == _zz_15)) && ((stage0_mask & _zz_16) != 4'b0000));
  end

  always @ (*) begin
    stage0_wayInvalidate = 2'b00;
    if(_zz_45)begin
      if((invalidate_s2_input_payload_fragment_address[11 : 6] == io_cpu_execute_address[11 : 6]))begin
        stage0_wayInvalidate = invalidate_s2_wayHits;
      end
    end
  end

  assign io_cpu_memory_isWrite = stageA_request_wr;
  always @ (*) begin
    stageA_consistancyCheck_hazard = 1'b0;
    if((stageA_request_isAmo ? (stageA_consistancyCheck_s || stageA_consistancyCheck_l) : (stageA_request_wr ? stageA_consistancyCheck_s : stageA_consistancyCheck_l)))begin
      stageA_consistancyCheck_hazard = 1'b1;
    end
    if((stageA_request_totalyConsistent && (sync_notTotalyConsistent || (io_cpu_writeBack_isValid && io_cpu_writeBack_isWrite))))begin
      stageA_consistancyCheck_hazard = 1'b1;
    end
  end

  assign stageA_consistancyCheck_w = (sync_w2w_busy || sync_o2w_busy);
  assign stageA_consistancyCheck_r = ((_zz_17 || sync_w2r_busy) || sync_o2r_busy);
  assign stageA_consistancyCheck_o = sync_w2o_busy;
  assign stageA_consistancyCheck_i = sync_w2i_busy;
  assign stageA_consistancyCheck_s = (io_cpu_memory_mmuRsp_isIoAccess ? stageA_consistancyCheck_o : stageA_consistancyCheck_w);
  assign stageA_consistancyCheck_l = (io_cpu_memory_mmuRsp_isIoAccess ? stageA_consistancyCheck_i : stageA_consistancyCheck_r);
  always @ (*) begin
    _zz_18[0] = ((io_cpu_memory_mmuRsp_physicalAddress[31 : 12] == ways_0_tagsReadRsp_address) && ways_0_tagsReadRsp_valid);
    _zz_18[1] = ((io_cpu_memory_mmuRsp_physicalAddress[31 : 12] == ways_1_tagsReadRsp_address) && ways_1_tagsReadRsp_valid);
  end

  assign stageA_wayHits = _zz_18;
  assign _zz_19 = io_cpu_memory_address[11 : 2];
  assign _zz_21 = (_zz_19 >>> 1);
  assign _zz_22 = _zz_40;
  always @ (*) begin
    _zz_20[0] = (((dataWriteCmd_valid && dataWriteCmd_payload_way[0]) && (dataWriteCmd_payload_address == _zz_21)) && ((stageA_mask & _zz_22) != 4'b0000));
    _zz_20[1] = (((dataWriteCmd_valid && dataWriteCmd_payload_way[1]) && (dataWriteCmd_payload_address == _zz_21)) && ((stageA_mask & _zz_22) != 4'b0000));
  end

  assign stageA_dataColisions = (stage0_dataColisions_regNextWhen | _zz_20);
  always @ (*) begin
    stageB_mmuRspFreeze = 1'b0;
    if((stageB_loaderValid || loader_valid))begin
      stageB_mmuRspFreeze = 1'b1;
    end
  end

  assign stageB_waysHits = (stageB_waysHitsBeforeInvalidate & (~ stageB_wayInvalidate));
  assign stageB_waysHit = (stageB_waysHits != 2'b00);
  assign stageB_dataMux = (stageB_waysHits[0] ? stageB_dataReadRsp_0 : stageB_dataReadRsp_1);
  always @ (*) begin
    stageB_loaderValid = 1'b0;
    if(io_cpu_writeBack_isValid)begin
      if(! stageB_request_isAmo) begin
        if(! _zz_47) begin
          if(! _zz_48) begin
            if(io_mem_cmd_ready)begin
              stageB_loaderValid = 1'b1;
            end
          end
        end
      end
    end
    if(_zz_44)begin
      stageB_loaderValid = 1'b0;
    end
  end

  assign stageB_ioMemRspMuxed = _zz_41;
  always @ (*) begin
    io_cpu_writeBack_haltIt = io_cpu_writeBack_isValid;
    if(stageB_flusher_valid)begin
      io_cpu_writeBack_haltIt = 1'b1;
    end
    if(io_cpu_writeBack_isValid)begin
      if(stageB_request_isAmo)begin
        case(stageB_amo_external_state)
          `DataCacheExternalAmoStates_defaultEncoding_LR_CMD : begin
          end
          `DataCacheExternalAmoStates_defaultEncoding_LR_RSP : begin
          end
          `DataCacheExternalAmoStates_defaultEncoding_SC_CMD : begin
          end
          default : begin
            if(io_mem_rsp_valid)begin
              if(io_mem_rsp_payload_exclusive)begin
                io_cpu_writeBack_haltIt = 1'b0;
              end
            end
          end
        endcase
      end else begin
        if(_zz_47)begin
          if((_zz_24 ? (io_mem_rsp_valid && rspSync) : io_mem_cmd_ready))begin
            io_cpu_writeBack_haltIt = 1'b0;
          end
        end else begin
          if(_zz_48)begin
            if(((! stageB_request_wr) || io_mem_cmd_ready))begin
              io_cpu_writeBack_haltIt = 1'b0;
            end
          end
        end
      end
    end
    if(_zz_44)begin
      io_cpu_writeBack_haltIt = 1'b0;
    end
  end

  always @ (*) begin
    stageB_flusher_hold = 1'b0;
    if(_zz_45)begin
      if(invalidate_s2_wayHit)begin
        stageB_flusher_hold = 1'b1;
      end
    end
  end

  always @ (*) begin
    io_cpu_flush_ready = 1'b0;
    if(stageB_flusher_start)begin
      io_cpu_flush_ready = 1'b1;
    end
  end

  assign stageB_isAmoCached = 1'b0;
  always @ (*) begin
    stageB_requestDataBypass = stageB_request_data;
    if(stageB_request_isAmo)begin
      stageB_requestDataBypass = stageB_amo_resultReg;
    end
  end

  assign stageB_amo_compare = stageB_request_amoCtrl_alu[2];
  assign stageB_amo_unsigned = (stageB_request_amoCtrl_alu[2 : 1] == 2'b11);
  assign stageB_amo_addSub = _zz_99;
  assign stageB_amo_less = ((stageB_request_data[31] == stageB_ioMemRspMuxed[31]) ? stageB_amo_addSub[31] : (stageB_amo_unsigned ? stageB_ioMemRspMuxed[31] : stageB_request_data[31]));
  assign stageB_amo_selectRf = (stageB_request_amoCtrl_swap ? 1'b1 : (stageB_request_amoCtrl_alu[0] ^ stageB_amo_less));
  always @ (*) begin
    case(_zz_54)
      3'b000 : begin
        stageB_amo_result = stageB_amo_addSub;
      end
      3'b001 : begin
        stageB_amo_result = (stageB_request_data ^ stageB_ioMemRspMuxed);
      end
      3'b010 : begin
        stageB_amo_result = (stageB_request_data | stageB_ioMemRspMuxed);
      end
      3'b011 : begin
        stageB_amo_result = (stageB_request_data & stageB_ioMemRspMuxed);
      end
      default : begin
        stageB_amo_result = (stageB_amo_selectRf ? stageB_request_data : stageB_ioMemRspMuxed);
      end
    endcase
  end

  always @ (*) begin
    stageB_cpuWriteToCache = 1'b0;
    if(io_cpu_writeBack_isValid)begin
      if(stageB_request_isAmo)begin
        case(stageB_amo_external_state)
          `DataCacheExternalAmoStates_defaultEncoding_LR_CMD : begin
          end
          `DataCacheExternalAmoStates_defaultEncoding_LR_RSP : begin
          end
          `DataCacheExternalAmoStates_defaultEncoding_SC_CMD : begin
          end
          default : begin
            if(io_mem_rsp_valid)begin
              if(io_mem_rsp_payload_exclusive)begin
                stageB_cpuWriteToCache = 1'b1;
              end
            end
          end
        endcase
      end else begin
        if(! _zz_47) begin
          if(_zz_48)begin
            stageB_cpuWriteToCache = 1'b1;
          end
        end
      end
    end
    if(_zz_49)begin
      if(((((io_cpu_writeBack_isValid && io_mem_rsp_valid) && rspSync) && io_mem_rsp_payload_exclusive) && stageB_waysHit))begin
        stageB_cpuWriteToCache = 1'b1;
      end
    end
  end

  assign _zz_23 = ({1'd0,1'b1} <<< io_cpu_writeBack_address[2 : 2]);
  always @ (*) begin
    io_cpu_redo = 1'b0;
    if(io_cpu_writeBack_isValid)begin
      if(! stageB_request_isAmo) begin
        if(! _zz_47) begin
          if(_zz_48)begin
            if(_zz_50)begin
              io_cpu_redo = 1'b1;
            end
          end
        end
      end
    end
    if((io_cpu_writeBack_isValid && (stageB_mmuRsp_refilling || stageB_consistancyHazard)))begin
      io_cpu_redo = 1'b1;
    end
    if((loader_valid && (! loader_valid_regNext)))begin
      io_cpu_redo = 1'b1;
    end
  end

  always @ (*) begin
    io_cpu_writeBack_accessError = 1'b0;
    if(stageB_bypassCache)begin
      io_cpu_writeBack_accessError = ((((! stageB_request_wr) && pending_last) && io_mem_rsp_valid) && io_mem_rsp_payload_error);
    end else begin
      io_cpu_writeBack_accessError = ((stageB_waysHits & _zz_25) != 2'b00);
    end
  end

  assign io_cpu_writeBack_mmuException = (io_cpu_writeBack_isValid && ((stageB_mmuRsp_exception || ((! stageB_mmuRsp_allowWrite) && stageB_request_wr)) || ((! stageB_mmuRsp_allowRead) && ((! stageB_request_wr) || stageB_request_isAmo))));
  assign io_cpu_writeBack_unalignedAccess = (io_cpu_writeBack_isValid && stageB_unaligned);
  assign io_cpu_writeBack_isWrite = stageB_request_wr;
  always @ (*) begin
    io_mem_cmd_valid = 1'b0;
    if(io_cpu_writeBack_isValid)begin
      if(stageB_request_isAmo)begin
        case(stageB_amo_external_state)
          `DataCacheExternalAmoStates_defaultEncoding_LR_CMD : begin
            io_mem_cmd_valid = 1'b1;
          end
          `DataCacheExternalAmoStates_defaultEncoding_LR_RSP : begin
          end
          `DataCacheExternalAmoStates_defaultEncoding_SC_CMD : begin
            io_mem_cmd_valid = 1'b1;
          end
          default : begin
          end
        endcase
      end else begin
        if(_zz_47)begin
          io_mem_cmd_valid = (! memCmdSent);
        end else begin
          if(_zz_48)begin
            if(stageB_request_wr)begin
              io_mem_cmd_valid = 1'b1;
            end
            if(_zz_50)begin
              io_mem_cmd_valid = 1'b0;
            end
          end else begin
            if((! memCmdSent))begin
              io_mem_cmd_valid = 1'b1;
            end
          end
        end
      end
    end
    if(_zz_44)begin
      io_mem_cmd_valid = 1'b0;
    end
  end

  always @ (*) begin
    io_mem_cmd_payload_address = {stageB_mmuRsp_physicalAddress[31 : 2],2'b00};
    if(io_cpu_writeBack_isValid)begin
      if(! stageB_request_isAmo) begin
        if(! _zz_47) begin
          if(_zz_48)begin
            io_mem_cmd_payload_address = {stageB_mmuRsp_physicalAddress[31 : 2],2'b00};
          end else begin
            io_mem_cmd_payload_address = {stageB_mmuRsp_physicalAddress[31 : 6],6'h0};
          end
        end
      end
    end
  end

  always @ (*) begin
    io_mem_cmd_payload_length = 4'b0000;
    if(io_cpu_writeBack_isValid)begin
      if(! stageB_request_isAmo) begin
        if(! _zz_47) begin
          if(_zz_48)begin
            io_mem_cmd_payload_length = 4'b0000;
          end else begin
            io_mem_cmd_payload_length = 4'b1111;
          end
        end
      end
    end
  end

  assign io_mem_cmd_payload_last = 1'b1;
  always @ (*) begin
    io_mem_cmd_payload_wr = stageB_request_wr;
    if(io_cpu_writeBack_isValid)begin
      if(stageB_request_isAmo)begin
        case(stageB_amo_external_state)
          `DataCacheExternalAmoStates_defaultEncoding_LR_CMD : begin
            io_mem_cmd_payload_wr = 1'b0;
          end
          `DataCacheExternalAmoStates_defaultEncoding_LR_RSP : begin
          end
          `DataCacheExternalAmoStates_defaultEncoding_SC_CMD : begin
          end
          default : begin
          end
        endcase
      end else begin
        if(! _zz_47) begin
          if(! _zz_48) begin
            io_mem_cmd_payload_wr = 1'b0;
          end
        end
      end
    end
  end

  assign io_mem_cmd_payload_mask = stageB_mask;
  assign io_mem_cmd_payload_data = stageB_requestDataBypass;
  assign io_mem_cmd_payload_uncached = stageB_mmuRsp_isIoAccess;
  assign io_mem_cmd_payload_exclusive = (stageB_request_isLrsc || stageB_request_isAmo);
  assign stageB_bypassCache = ((stageB_mmuRsp_isIoAccess || stageB_request_isLrsc) || stageB_request_isAmo);
  always @ (*) begin
    io_cpu_writeBack_keepMemRspData = 1'b0;
    if(io_cpu_writeBack_isValid)begin
      if(stageB_request_isAmo)begin
        case(stageB_amo_external_state)
          `DataCacheExternalAmoStates_defaultEncoding_LR_CMD : begin
          end
          `DataCacheExternalAmoStates_defaultEncoding_LR_RSP : begin
          end
          `DataCacheExternalAmoStates_defaultEncoding_SC_CMD : begin
          end
          default : begin
            io_cpu_writeBack_keepMemRspData = 1'b1;
          end
        endcase
      end
    end
  end

  always @ (*) begin
    _zz_24 = (! stageB_request_wr);
    if(stageB_request_isLrsc)begin
      _zz_24 = 1'b1;
    end
  end

  always @ (*) begin
    if(stageB_bypassCache)begin
      io_cpu_writeBack_data = stageB_ioMemRspMuxed;
    end else begin
      io_cpu_writeBack_data = stageB_dataMux;
    end
    if(_zz_49)begin
      io_cpu_writeBack_data = {31'd0, _zz_107};
    end
  end

  always @ (*) begin
    _zz_25[0] = stageB_tagsReadRsp_0_error;
    _zz_25[1] = stageB_tagsReadRsp_1_error;
  end

  always @ (*) begin
    loader_counter_willIncrement = 1'b0;
    if(_zz_46)begin
      loader_counter_willIncrement = 1'b1;
    end
  end

  assign loader_counter_willClear = 1'b0;
  assign loader_counter_willOverflowIfInc = (loader_counter_value == 3'b111);
  assign loader_counter_willOverflow = (loader_counter_willOverflowIfInc && loader_counter_willIncrement);
  always @ (*) begin
    loader_counter_valueNext = (loader_counter_value + _zz_109);
    if(loader_counter_willClear)begin
      loader_counter_valueNext = 3'b000;
    end
  end

  always @ (*) begin
    loader_kill = 1'b0;
    if(((((io_mem_inv_valid && io_mem_inv_payload_fragment_enable) && loader_valid) && invalidate_s0_loaderLineHit) && invalidate_s0_loaderTagHit))begin
      loader_kill = 1'b1;
    end
  end

  always @ (*) begin
    loader_done = loader_counter_willOverflow;
    if((loader_valid && (pending_counter == 7'h0)))begin
      loader_done = 1'b1;
    end
    if(_zz_45)begin
      if(invalidate_s2_wayHit)begin
        loader_done = 1'b0;
      end
    end
  end

  assign io_cpu_execute_refilling = loader_valid;
  assign tagsInvReadCmd_valid = (io_mem_inv_valid && io_mem_inv_ready);
  assign tagsInvReadCmd_payload = io_mem_inv_payload_fragment_address[11 : 6];
  assign invalidate_s0_loaderTagHit = (io_mem_inv_payload_fragment_address[31 : 12] == stageB_mmuRsp_physicalAddress[31 : 12]);
  assign invalidate_s0_loaderLineHit = (io_mem_inv_payload_fragment_address[11 : 6] == stageB_mmuRsp_physicalAddress[11 : 6]);
  assign io_mem_inv_ready = ((1'b1 && (! invalidate_s1_input_valid)) || invalidate_s1_input_ready);
  assign invalidate_s1_input_valid = io_mem_inv_m2sPipe_rValid;
  assign invalidate_s1_input_payload_last = io_mem_inv_m2sPipe_rData_last;
  assign invalidate_s1_input_payload_fragment_enable = io_mem_inv_m2sPipe_rData_fragment_enable;
  assign invalidate_s1_input_payload_fragment_address = io_mem_inv_m2sPipe_rData_fragment_address;
  always @ (*) begin
    _zz_26[0] = ((invalidate_s1_input_payload_fragment_address[31 : 12] == ways_0_tagsInvReadRsp_address) && ways_0_tagsInvReadRsp_valid);
    _zz_26[1] = ((invalidate_s1_input_payload_fragment_address[31 : 12] == ways_1_tagsInvReadRsp_address) && ways_1_tagsInvReadRsp_valid);
  end

  assign invalidate_s1_wayHits = (_zz_26 & (~ invalidate_s1_invalidations));
  assign invalidate_s1_input_ready = ((1'b1 && (! invalidate_s2_input_valid)) || invalidate_s2_input_ready);
  assign invalidate_s2_input_valid = invalidate_s1_input_m2sPipe_rValid;
  assign invalidate_s2_input_payload_last = invalidate_s1_input_m2sPipe_rData_last;
  assign invalidate_s2_input_payload_fragment_enable = invalidate_s1_input_m2sPipe_rData_fragment_enable;
  assign invalidate_s2_input_payload_fragment_address = invalidate_s1_input_m2sPipe_rData_fragment_address;
  assign invalidate_s2_wayHit = (invalidate_s2_wayHits != 2'b00);
  assign io_mem_ack_valid = invalidate_s2_input_valid;
  assign invalidate_s2_input_ready = io_mem_ack_ready;
  assign io_mem_ack_payload_fragment_hit = invalidate_s2_wayHit;
  assign io_mem_ack_payload_last = invalidate_s2_input_payload_last;
  assign invalidate_s1_invalidations = _zz_27;
  assign _zz_28 = (_zz_4 && 1'b1);
  assign _zz_29 = ((dataReadCmd_valid && (! io_cpu_memory_isStuck)) && 1'b1);
  assign _zz_30 = (_zz_2 && 1'b1);
  assign _zz_31 = ((dataReadCmd_valid && (! io_cpu_memory_isStuck)) && 1'b1);
  always @ (posedge CLKOUT0) begin
    tagsWriteLastCmd_valid <= tagsWriteCmd_valid;
    tagsWriteLastCmd_payload_way <= tagsWriteCmd_payload_way;
    tagsWriteLastCmd_payload_address <= tagsWriteCmd_payload_address;
    tagsWriteLastCmd_payload_data_valid <= tagsWriteCmd_payload_data_valid;
    tagsWriteLastCmd_payload_data_error <= tagsWriteCmd_payload_data_error;
    tagsWriteLastCmd_payload_data_address <= tagsWriteCmd_payload_data_address;
    pending_done <= (pending_counterNext == 7'h0);
    pending_full <= pending_counter[6];
    pending_last <= (pending_counterNext == 7'h01);
    sync_syncContext_full <= (7'h3f <= _zz_76);
    if((! io_cpu_memory_isStuck))begin
      stageA_request_wr <= io_cpu_execute_args_wr;
      stageA_request_data <= io_cpu_execute_args_data;
      stageA_request_size <= io_cpu_execute_args_size;
      stageA_request_isLrsc <= io_cpu_execute_args_isLrsc;
      stageA_request_isAmo <= io_cpu_execute_args_isAmo;
      stageA_request_amoCtrl_swap <= io_cpu_execute_args_amoCtrl_swap;
      stageA_request_amoCtrl_alu <= io_cpu_execute_args_amoCtrl_alu;
      stageA_request_totalyConsistent <= io_cpu_execute_args_totalyConsistent;
    end
    if((! io_cpu_memory_isStuck))begin
      stageA_mask <= stage0_mask;
    end
    if((! io_cpu_memory_isStuck))begin
      _zz_17 <= (sync_w2r_busy || sync_o2r_busy);
    end
    if((! io_cpu_memory_isStuck))begin
      stageA_wayInvalidate <= stage0_wayInvalidate;
    end
    if((! io_cpu_memory_isStuck))begin
      stage0_dataColisions_regNextWhen <= stage0_dataColisions;
    end
    if((! io_cpu_writeBack_isStuck))begin
      stageB_request_wr <= stageA_request_wr;
      stageB_request_data <= stageA_request_data;
      stageB_request_size <= stageA_request_size;
      stageB_request_isLrsc <= stageA_request_isLrsc;
      stageB_request_isAmo <= stageA_request_isAmo;
      stageB_request_amoCtrl_swap <= stageA_request_amoCtrl_swap;
      stageB_request_amoCtrl_alu <= stageA_request_amoCtrl_alu;
      stageB_request_totalyConsistent <= stageA_request_totalyConsistent;
    end
    if(((! io_cpu_writeBack_isStuck) && (! stageB_mmuRspFreeze)))begin
      stageB_mmuRsp_physicalAddress <= io_cpu_memory_mmuRsp_physicalAddress;
      stageB_mmuRsp_isIoAccess <= io_cpu_memory_mmuRsp_isIoAccess;
      stageB_mmuRsp_allowRead <= io_cpu_memory_mmuRsp_allowRead;
      stageB_mmuRsp_allowWrite <= io_cpu_memory_mmuRsp_allowWrite;
      stageB_mmuRsp_allowExecute <= io_cpu_memory_mmuRsp_allowExecute;
      stageB_mmuRsp_exception <= io_cpu_memory_mmuRsp_exception;
      stageB_mmuRsp_refilling <= io_cpu_memory_mmuRsp_refilling;
      stageB_mmuRsp_bypassTranslation <= io_cpu_memory_mmuRsp_bypassTranslation;
      stageB_mmuRsp_ways_0_sel <= io_cpu_memory_mmuRsp_ways_0_sel;
      stageB_mmuRsp_ways_0_physical <= io_cpu_memory_mmuRsp_ways_0_physical;
      stageB_mmuRsp_ways_1_sel <= io_cpu_memory_mmuRsp_ways_1_sel;
      stageB_mmuRsp_ways_1_physical <= io_cpu_memory_mmuRsp_ways_1_physical;
      stageB_mmuRsp_ways_2_sel <= io_cpu_memory_mmuRsp_ways_2_sel;
      stageB_mmuRsp_ways_2_physical <= io_cpu_memory_mmuRsp_ways_2_physical;
      stageB_mmuRsp_ways_3_sel <= io_cpu_memory_mmuRsp_ways_3_sel;
      stageB_mmuRsp_ways_3_physical <= io_cpu_memory_mmuRsp_ways_3_physical;
    end
    if((! io_cpu_writeBack_isStuck))begin
      stageB_tagsReadRsp_0_valid <= ways_0_tagsReadRsp_valid;
      stageB_tagsReadRsp_0_error <= ways_0_tagsReadRsp_error;
      stageB_tagsReadRsp_0_address <= ways_0_tagsReadRsp_address;
    end
    if((! io_cpu_writeBack_isStuck))begin
      stageB_tagsReadRsp_1_valid <= ways_1_tagsReadRsp_valid;
      stageB_tagsReadRsp_1_error <= ways_1_tagsReadRsp_error;
      stageB_tagsReadRsp_1_address <= ways_1_tagsReadRsp_address;
    end
    if((! io_cpu_writeBack_isStuck))begin
      stageB_dataReadRsp_0 <= ways_0_dataReadRsp;
    end
    if((! io_cpu_writeBack_isStuck))begin
      stageB_dataReadRsp_1 <= ways_1_dataReadRsp;
    end
    if((! io_cpu_writeBack_isStuck))begin
      stageB_wayInvalidate <= stageA_wayInvalidate;
    end
    if((! io_cpu_writeBack_isStuck))begin
      stageB_consistancyHazard <= stageA_consistancyCheck_hazard;
    end
    if((! io_cpu_writeBack_isStuck))begin
      stageB_dataColisions <= stageA_dataColisions;
    end
    if((! io_cpu_writeBack_isStuck))begin
      stageB_unaligned <= (((stageA_request_size == 2'b10) && (io_cpu_memory_address[1 : 0] != 2'b00)) || ((stageA_request_size == 2'b01) && (io_cpu_memory_address[0 : 0] != 1'b0)));
    end
    if((! io_cpu_writeBack_isStuck))begin
      stageB_waysHitsBeforeInvalidate <= stageA_wayHits;
    end
    if((! io_cpu_writeBack_isStuck))begin
      stageB_mask <= stageA_mask;
    end
    if(stageB_flusher_valid)begin
      if(_zz_51)begin
        if(_zz_52)begin
          stageB_mmuRsp_physicalAddress[11 : 6] <= (stageB_mmuRsp_physicalAddress[11 : 6] + 6'h01);
        end
      end
    end
    if(stageB_flusher_start)begin
      stageB_mmuRsp_physicalAddress[11 : 6] <= 6'h0;
    end
    if(io_cpu_writeBack_isValid)begin
      if(stageB_request_isAmo)begin
        case(stageB_amo_external_state)
          `DataCacheExternalAmoStates_defaultEncoding_LR_CMD : begin
          end
          `DataCacheExternalAmoStates_defaultEncoding_LR_RSP : begin
            if(_zz_53)begin
              stageB_amo_resultReg <= stageB_amo_result;
            end
          end
          `DataCacheExternalAmoStates_defaultEncoding_SC_CMD : begin
          end
          default : begin
          end
        endcase
      end
    end
    loader_valid_regNext <= loader_valid;
    if(io_mem_inv_ready)begin
      io_mem_inv_m2sPipe_rData_last <= io_mem_inv_payload_last;
      io_mem_inv_m2sPipe_rData_fragment_enable <= io_mem_inv_payload_fragment_enable;
      io_mem_inv_m2sPipe_rData_fragment_address <= io_mem_inv_payload_fragment_address;
    end
    if(io_mem_inv_ready)begin
      invalidate_s1_loaderValid <= loader_valid;
    end
    if(io_mem_inv_ready)begin
      invalidate_s1_loaderWay <= loader_waysAllocator;
    end
    if(io_mem_inv_ready)begin
      invalidate_s1_loaderTagHit <= invalidate_s0_loaderTagHit;
    end
    if(io_mem_inv_ready)begin
      invalidate_s1_loaderLineHit <= invalidate_s0_loaderLineHit;
    end
    if(invalidate_s1_input_ready)begin
      invalidate_s1_input_m2sPipe_rData_last <= invalidate_s1_input_payload_last;
      invalidate_s1_input_m2sPipe_rData_fragment_enable <= invalidate_s1_input_payload_fragment_enable;
      invalidate_s1_input_m2sPipe_rData_fragment_address <= invalidate_s1_input_payload_fragment_address;
    end
    if(invalidate_s1_input_ready)begin
      invalidate_s2_wayHits <= invalidate_s1_wayHits_1;
    end
    if(io_mem_inv_ready)begin
      _zz_27 <= (((invalidate_s2_input_valid && invalidate_s2_input_payload_fragment_enable) && (invalidate_s2_input_payload_fragment_address[11 : 6] == io_mem_inv_payload_fragment_address[11 : 6])) ? invalidate_s2_wayHits : 2'b00);
    end
  end

  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      memCmdSent <= 1'b0;
      pending_counter <= 7'h0;
      sync_syncContext_wPtr <= 7'h0;
      sync_syncContext_rPtr <= 7'h0;
      sync_writeCached_pendingSync <= 7'h0;
      sync_writeUncached_pendingSync <= 7'h0;
      sync_w2w_counter <= 7'h0;
      sync_w2r_counter <= 7'h0;
      sync_w2i_counter <= 7'h0;
      sync_w2o_counter <= 7'h0;
      sync_o2w_counter <= 7'h0;
      sync_o2r_counter <= 7'h0;
      stageB_flusher_valid <= 1'b0;
      stageB_flusher_start <= 1'b1;
      stageB_amo_external_state <= `DataCacheExternalAmoStates_defaultEncoding_LR_CMD;
      loader_valid <= 1'b0;
      loader_counter_value <= 3'b000;
      loader_waysAllocator <= 2'b01;
      loader_error <= 1'b0;
      loader_killReg <= 1'b0;
      io_mem_inv_m2sPipe_rValid <= 1'b0;
      invalidate_s1_input_m2sPipe_rValid <= 1'b0;
    end else begin
      if(io_mem_cmd_ready)begin
        memCmdSent <= 1'b1;
      end
      if((! io_cpu_writeBack_isStuck))begin
        memCmdSent <= 1'b0;
      end
      pending_counter <= pending_counterNext;
      if(_zz_42)begin
        sync_syncContext_wPtr <= (sync_syncContext_wPtr + 7'h01);
      end
      if((io_mem_sync_valid && io_mem_sync_ready))begin
        sync_syncContext_rPtr <= (sync_syncContext_rPtr + _zz_74);
      end
      sync_writeCached_pendingSync <= sync_writeCached_pendingSyncNext;
      sync_writeUncached_pendingSync <= sync_writeUncached_pendingSyncNext;
      sync_w2w_counter <= (sync_w2w_counter - _zz_88);
      if((io_cpu_writeBack_fence_PW && io_cpu_writeBack_fence_SW))begin
        sync_w2w_counter <= sync_writeCached_pendingSyncNext;
      end
      sync_w2r_counter <= (sync_w2r_counter - _zz_90);
      if((io_cpu_writeBack_fence_PW && io_cpu_writeBack_fence_SR))begin
        sync_w2r_counter <= sync_writeCached_pendingSyncNext;
      end
      sync_w2i_counter <= (sync_w2i_counter - _zz_92);
      if((io_cpu_writeBack_fence_PW && io_cpu_writeBack_fence_SI))begin
        sync_w2i_counter <= sync_writeCached_pendingSyncNext;
      end
      sync_w2o_counter <= (sync_w2o_counter - _zz_94);
      if((io_cpu_writeBack_fence_PW && io_cpu_writeBack_fence_SO))begin
        sync_w2o_counter <= sync_writeCached_pendingSyncNext;
      end
      sync_o2w_counter <= (sync_o2w_counter - _zz_96);
      if((io_cpu_writeBack_fence_PO && io_cpu_writeBack_fence_SW))begin
        sync_o2w_counter <= sync_writeUncached_pendingSyncNext;
      end
      sync_o2r_counter <= (sync_o2r_counter - _zz_98);
      if((io_cpu_writeBack_fence_PO && io_cpu_writeBack_fence_SR))begin
        sync_o2r_counter <= sync_writeUncached_pendingSyncNext;
      end
      if(stageB_flusher_valid)begin
        if(_zz_51)begin
          if(! _zz_52) begin
            stageB_flusher_valid <= 1'b0;
          end
        end
      end
      stageB_flusher_start <= ((((((! stageB_flusher_start) && io_cpu_flush_valid) && (! io_cpu_execute_isValid)) && (! io_cpu_memory_isValid)) && (! io_cpu_writeBack_isValid)) && (! io_cpu_redo));
      if(stageB_flusher_start)begin
        stageB_flusher_valid <= 1'b1;
      end
      if(io_cpu_writeBack_isValid)begin
        if(stageB_request_isAmo)begin
          case(stageB_amo_external_state)
            `DataCacheExternalAmoStates_defaultEncoding_LR_CMD : begin
              if(io_mem_cmd_ready)begin
                stageB_amo_external_state <= `DataCacheExternalAmoStates_defaultEncoding_LR_RSP;
              end
            end
            `DataCacheExternalAmoStates_defaultEncoding_LR_RSP : begin
              if(_zz_53)begin
                stageB_amo_external_state <= `DataCacheExternalAmoStates_defaultEncoding_SC_CMD;
              end
            end
            `DataCacheExternalAmoStates_defaultEncoding_SC_CMD : begin
              if(io_mem_cmd_ready)begin
                stageB_amo_external_state <= `DataCacheExternalAmoStates_defaultEncoding_SC_RSP;
              end
            end
            default : begin
              if(io_mem_rsp_valid)begin
                stageB_amo_external_state <= `DataCacheExternalAmoStates_defaultEncoding_LR_CMD;
              end
            end
          endcase
        end
      end
      if(_zz_44)begin
        stageB_amo_external_state <= `DataCacheExternalAmoStates_defaultEncoding_LR_CMD;
      end
      `ifndef SYNTHESIS
        `ifdef FORMAL
          assert((! ((io_cpu_writeBack_isValid && (! io_cpu_writeBack_haltIt)) && io_cpu_writeBack_isStuck)))
        `else
          if(!(! ((io_cpu_writeBack_isValid && (! io_cpu_writeBack_haltIt)) && io_cpu_writeBack_isStuck))) begin
            $display("FAILURE writeBack stuck by another plugin is not allowed");
            $finish;
          end
        `endif
      `endif
      if(stageB_loaderValid)begin
        loader_valid <= 1'b1;
      end
      loader_counter_value <= loader_counter_valueNext;
      if(loader_kill)begin
        loader_killReg <= 1'b1;
      end
      if(_zz_46)begin
        loader_error <= (loader_error || io_mem_rsp_payload_error);
      end
      if(loader_done)begin
        loader_valid <= 1'b0;
        loader_error <= 1'b0;
        loader_killReg <= 1'b0;
      end
      if((! loader_valid))begin
        loader_waysAllocator <= _zz_110[1:0];
      end
      if(io_mem_inv_ready)begin
        io_mem_inv_m2sPipe_rValid <= io_mem_inv_valid;
      end
      if(invalidate_s1_input_ready)begin
        invalidate_s1_input_m2sPipe_rValid <= invalidate_s1_input_valid;
      end
    end
  end


endmodule

module InstructionCache (
  input               io_flush,
  input               io_cpu_prefetch_isValid,
  output reg          io_cpu_prefetch_haltIt,
  input      [31:0]   io_cpu_prefetch_pc,
  input               io_cpu_fetch_isValid,
  input               io_cpu_fetch_isStuck,
  input               io_cpu_fetch_isRemoved,
  input      [31:0]   io_cpu_fetch_pc,
  output     [31:0]   io_cpu_fetch_data,
  input      [31:0]   io_cpu_fetch_mmuRsp_physicalAddress,
  input               io_cpu_fetch_mmuRsp_isIoAccess,
  input               io_cpu_fetch_mmuRsp_allowRead,
  input               io_cpu_fetch_mmuRsp_allowWrite,
  input               io_cpu_fetch_mmuRsp_allowExecute,
  input               io_cpu_fetch_mmuRsp_exception,
  input               io_cpu_fetch_mmuRsp_refilling,
  input               io_cpu_fetch_mmuRsp_bypassTranslation,
  input               io_cpu_fetch_mmuRsp_ways_0_sel,
  input      [31:0]   io_cpu_fetch_mmuRsp_ways_0_physical,
  input               io_cpu_fetch_mmuRsp_ways_1_sel,
  input      [31:0]   io_cpu_fetch_mmuRsp_ways_1_physical,
  input               io_cpu_fetch_mmuRsp_ways_2_sel,
  input      [31:0]   io_cpu_fetch_mmuRsp_ways_2_physical,
  input               io_cpu_fetch_mmuRsp_ways_3_sel,
  input      [31:0]   io_cpu_fetch_mmuRsp_ways_3_physical,
  output     [31:0]   io_cpu_fetch_physicalAddress,
  input               io_cpu_decode_isValid,
  input               io_cpu_decode_isStuck,
  input      [31:0]   io_cpu_decode_pc,
  output     [31:0]   io_cpu_decode_physicalAddress,
  output     [31:0]   io_cpu_decode_data,
  output              io_cpu_decode_cacheMiss,
  output              io_cpu_decode_error,
  output              io_cpu_decode_mmuRefilling,
  output              io_cpu_decode_mmuException,
  input               io_cpu_decode_isUser,
  input               io_cpu_fill_valid,
  input      [31:0]   io_cpu_fill_payload,
  output              io_mem_cmd_valid,
  input               io_mem_cmd_ready,
  output     [31:0]   io_mem_cmd_payload_address,
  output     [2:0]    io_mem_cmd_payload_size,
  input               io_mem_rsp_valid,
  input      [63:0]   io_mem_rsp_payload_data,
  input               io_mem_rsp_payload_error,
  input      [2:0]    _zz_18,
  input      [31:0]   _zz_19,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  reg        [31:0]   _zz_20;
  reg        [31:0]   _zz_21;
  reg        [21:0]   _zz_22;
  reg        [21:0]   _zz_23;
  reg        [31:0]   _zz_24;
  reg        [31:0]   _zz_25;
  reg                 _zz_26;
  reg        [31:0]   _zz_27;
  wire                _zz_28;
  wire                _zz_29;
  wire       [0:0]    _zz_30;
  wire       [0:0]    _zz_31;
  wire       [0:0]    _zz_32;
  wire       [0:0]    _zz_33;
  wire       [0:0]    _zz_34;
  wire       [0:0]    _zz_35;
  wire       [0:0]    _zz_36;
  wire       [0:0]    _zz_37;
  wire       [21:0]   _zz_38;
  wire       [21:0]   _zz_39;
  reg                 _zz_1;
  reg                 _zz_2;
  reg                 _zz_3;
  reg                 _zz_4;
  reg                 lineLoader_fire;
  reg                 lineLoader_valid;
  (* keep , syn_keep *) reg        [31:0]   lineLoader_address /* synthesis syn_keep = 1 */ ;
  reg                 lineLoader_hadError;
  reg                 lineLoader_flushPending;
  reg        [6:0]    lineLoader_flushCounter;
  reg                 _zz_5;
  reg                 lineLoader_cmdSent;
  reg                 lineLoader_wayToAllocate_willIncrement;
  wire                lineLoader_wayToAllocate_willClear;
  reg        [0:0]    lineLoader_wayToAllocate_valueNext;
  reg        [0:0]    lineLoader_wayToAllocate_value;
  wire                lineLoader_wayToAllocate_willOverflowIfInc;
  wire                lineLoader_wayToAllocate_willOverflow;
  (* keep , syn_keep *) reg        [2:0]    lineLoader_wordIndex /* synthesis syn_keep = 1 */ ;
  wire                lineLoader_write_tag_0_valid;
  wire       [5:0]    lineLoader_write_tag_0_payload_address;
  wire                lineLoader_write_tag_0_payload_data_valid;
  wire                lineLoader_write_tag_0_payload_data_error;
  wire       [19:0]   lineLoader_write_tag_0_payload_data_address;
  wire                lineLoader_write_tag_1_valid;
  wire       [5:0]    lineLoader_write_tag_1_payload_address;
  wire                lineLoader_write_tag_1_payload_data_valid;
  wire                lineLoader_write_tag_1_payload_data_error;
  wire       [19:0]   lineLoader_write_tag_1_payload_data_address;
  wire                lineLoader_write_data_0_valid;
  wire       [9:0]    lineLoader_write_data_0_payload_address;
  wire       [31:0]   lineLoader_write_data_0_payload_data;
  wire                lineLoader_write_data_1_valid;
  wire       [9:0]    lineLoader_write_data_1_payload_address;
  wire       [31:0]   lineLoader_write_data_1_payload_data;
  wire       [0:0]    _zz_6;
  wire       [0:0]    _zz_7;
  wire       [9:0]    _zz_8;
  wire                _zz_9;
  wire       [31:0]   fetchStage_read_banksValue_0_dataMem;
  wire       [31:0]   fetchStage_read_banksValue_0_data;
  wire       [9:0]    _zz_10;
  wire                _zz_11;
  wire       [31:0]   fetchStage_read_banksValue_1_dataMem;
  wire       [31:0]   fetchStage_read_banksValue_1_data;
  wire       [5:0]    _zz_12;
  wire                _zz_13;
  wire                fetchStage_read_waysValues_0_tag_valid;
  wire                fetchStage_read_waysValues_0_tag_error;
  wire       [19:0]   fetchStage_read_waysValues_0_tag_address;
  wire       [21:0]   _zz_14;
  wire       [5:0]    _zz_15;
  wire                _zz_16;
  wire                fetchStage_read_waysValues_1_tag_valid;
  wire                fetchStage_read_waysValues_1_tag_error;
  wire       [19:0]   fetchStage_read_waysValues_1_tag_address;
  wire       [21:0]   _zz_17;
  wire                fetchStage_hit_hits_0;
  wire                fetchStage_hit_hits_1;
  wire                fetchStage_hit_valid;
  wire       [0:0]    fetchStage_hit_wayId;
  wire       [0:0]    fetchStage_hit_bankId;
  wire                fetchStage_hit_error;
  wire       [31:0]   fetchStage_hit_data;
  wire       [31:0]   fetchStage_hit_word;
  reg        [31:0]   io_cpu_fetch_data_regNextWhen;
  reg        [31:0]   decodeStage_mmuRsp_physicalAddress;
  reg                 decodeStage_mmuRsp_isIoAccess;
  reg                 decodeStage_mmuRsp_allowRead;
  reg                 decodeStage_mmuRsp_allowWrite;
  reg                 decodeStage_mmuRsp_allowExecute;
  reg                 decodeStage_mmuRsp_exception;
  reg                 decodeStage_mmuRsp_refilling;
  reg                 decodeStage_mmuRsp_bypassTranslation;
  reg                 decodeStage_mmuRsp_ways_0_sel;
  reg        [31:0]   decodeStage_mmuRsp_ways_0_physical;
  reg                 decodeStage_mmuRsp_ways_1_sel;
  reg        [31:0]   decodeStage_mmuRsp_ways_1_physical;
  reg                 decodeStage_mmuRsp_ways_2_sel;
  reg        [31:0]   decodeStage_mmuRsp_ways_2_physical;
  reg                 decodeStage_mmuRsp_ways_3_sel;
  reg        [31:0]   decodeStage_mmuRsp_ways_3_physical;
  reg                 decodeStage_hit_valid;
  reg                 decodeStage_hit_error;
  reg [31:0] banks_0 [0:1023];
  reg [31:0] banks_1 [0:1023];
  reg [21:0] ways_0_tags [0:63];
  reg [21:0] ways_1_tags [0:63];

  assign _zz_28 = (! lineLoader_flushCounter[6]);
  assign _zz_29 = (lineLoader_flushPending && (! (lineLoader_valid || io_cpu_fetch_isValid)));
  assign _zz_30 = (1'b0 - lineLoader_wayToAllocate_value);
  assign _zz_31 = (1'b1 - lineLoader_wayToAllocate_value);
  assign _zz_32 = _zz_14[0 : 0];
  assign _zz_33 = _zz_14[1 : 1];
  assign _zz_34 = _zz_17[0 : 0];
  assign _zz_35 = _zz_17[1 : 1];
  assign _zz_36 = (fetchStage_hit_wayId + io_cpu_fetch_mmuRsp_physicalAddress[2 : 2]);
  assign _zz_37 = _zz_36;
  assign _zz_38 = {lineLoader_write_tag_0_payload_data_address,{lineLoader_write_tag_0_payload_data_error,lineLoader_write_tag_0_payload_data_valid}};
  assign _zz_39 = {lineLoader_write_tag_1_payload_data_address,{lineLoader_write_tag_1_payload_data_error,lineLoader_write_tag_1_payload_data_valid}};
  always @ (posedge CLKOUT0) begin
    if(_zz_2) begin
      banks_0[lineLoader_write_data_0_payload_address] <= lineLoader_write_data_0_payload_data;
    end
  end

  always @ (posedge CLKOUT0) begin
    if(_zz_9) begin
      _zz_20 <= banks_0[_zz_8];
    end
  end

  always @ (posedge CLKOUT0) begin
    if(_zz_1) begin
      banks_1[lineLoader_write_data_1_payload_address] <= lineLoader_write_data_1_payload_data;
    end
  end

  always @ (posedge CLKOUT0) begin
    if(_zz_11) begin
      _zz_21 <= banks_1[_zz_10];
    end
  end

  always @ (posedge CLKOUT0) begin
    if(_zz_4) begin
      ways_0_tags[lineLoader_write_tag_0_payload_address] <= _zz_38;
    end
  end

  always @ (posedge CLKOUT0) begin
    if(_zz_13) begin
      _zz_22 <= ways_0_tags[_zz_12];
    end
  end

  always @ (posedge CLKOUT0) begin
    if(_zz_3) begin
      ways_1_tags[lineLoader_write_tag_1_payload_address] <= _zz_39;
    end
  end

  always @ (posedge CLKOUT0) begin
    if(_zz_16) begin
      _zz_23 <= ways_1_tags[_zz_15];
    end
  end

  always @(*) begin
    case(_zz_6)
      1'b0 : begin
        _zz_24 = io_mem_rsp_payload_data[31 : 0];
      end
      default : begin
        _zz_24 = io_mem_rsp_payload_data[63 : 32];
      end
    endcase
  end

  always @(*) begin
    case(_zz_7)
      1'b0 : begin
        _zz_25 = io_mem_rsp_payload_data[31 : 0];
      end
      default : begin
        _zz_25 = io_mem_rsp_payload_data[63 : 32];
      end
    endcase
  end

  always @(*) begin
    case(fetchStage_hit_wayId)
      1'b0 : begin
        _zz_26 = fetchStage_read_waysValues_0_tag_error;
      end
      default : begin
        _zz_26 = fetchStage_read_waysValues_1_tag_error;
      end
    endcase
  end

  always @(*) begin
    case(fetchStage_hit_bankId)
      1'b0 : begin
        _zz_27 = fetchStage_read_banksValue_0_data;
      end
      default : begin
        _zz_27 = fetchStage_read_banksValue_1_data;
      end
    endcase
  end

  always @ (*) begin
    _zz_1 = 1'b0;
    if(lineLoader_write_data_1_valid)begin
      _zz_1 = 1'b1;
    end
  end

  always @ (*) begin
    _zz_2 = 1'b0;
    if(lineLoader_write_data_0_valid)begin
      _zz_2 = 1'b1;
    end
  end

  always @ (*) begin
    _zz_3 = 1'b0;
    if(lineLoader_write_tag_1_valid)begin
      _zz_3 = 1'b1;
    end
  end

  always @ (*) begin
    _zz_4 = 1'b0;
    if(lineLoader_write_tag_0_valid)begin
      _zz_4 = 1'b1;
    end
  end

  always @ (*) begin
    lineLoader_fire = 1'b0;
    if(io_mem_rsp_valid)begin
      if((lineLoader_wordIndex == 3'b111))begin
        lineLoader_fire = 1'b1;
      end
    end
  end

  always @ (*) begin
    io_cpu_prefetch_haltIt = (lineLoader_valid || lineLoader_flushPending);
    if(_zz_28)begin
      io_cpu_prefetch_haltIt = 1'b1;
    end
    if((! _zz_5))begin
      io_cpu_prefetch_haltIt = 1'b1;
    end
    if(io_flush)begin
      io_cpu_prefetch_haltIt = 1'b1;
    end
  end

  assign io_mem_cmd_valid = (lineLoader_valid && (! lineLoader_cmdSent));
  assign io_mem_cmd_payload_address = {lineLoader_address[31 : 6],6'h0};
  assign io_mem_cmd_payload_size = 3'b110;
  always @ (*) begin
    lineLoader_wayToAllocate_willIncrement = 1'b0;
    if((! lineLoader_valid))begin
      lineLoader_wayToAllocate_willIncrement = 1'b1;
    end
  end

  assign lineLoader_wayToAllocate_willClear = 1'b0;
  assign lineLoader_wayToAllocate_willOverflowIfInc = (lineLoader_wayToAllocate_value == 1'b1);
  assign lineLoader_wayToAllocate_willOverflow = (lineLoader_wayToAllocate_willOverflowIfInc && lineLoader_wayToAllocate_willIncrement);
  always @ (*) begin
    lineLoader_wayToAllocate_valueNext = (lineLoader_wayToAllocate_value + lineLoader_wayToAllocate_willIncrement);
    if(lineLoader_wayToAllocate_willClear)begin
      lineLoader_wayToAllocate_valueNext = 1'b0;
    end
  end

  assign lineLoader_write_tag_0_valid = (((lineLoader_wayToAllocate_value == 1'b0) && lineLoader_fire) || (! lineLoader_flushCounter[6]));
  assign lineLoader_write_tag_0_payload_address = (lineLoader_flushCounter[6] ? lineLoader_address[11 : 6] : lineLoader_flushCounter[5 : 0]);
  assign lineLoader_write_tag_0_payload_data_valid = lineLoader_flushCounter[6];
  assign lineLoader_write_tag_0_payload_data_error = (lineLoader_hadError || io_mem_rsp_payload_error);
  assign lineLoader_write_tag_0_payload_data_address = lineLoader_address[31 : 12];
  assign lineLoader_write_tag_1_valid = (((lineLoader_wayToAllocate_value == 1'b1) && lineLoader_fire) || (! lineLoader_flushCounter[6]));
  assign lineLoader_write_tag_1_payload_address = (lineLoader_flushCounter[6] ? lineLoader_address[11 : 6] : lineLoader_flushCounter[5 : 0]);
  assign lineLoader_write_tag_1_payload_data_valid = lineLoader_flushCounter[6];
  assign lineLoader_write_tag_1_payload_data_error = (lineLoader_hadError || io_mem_rsp_payload_error);
  assign lineLoader_write_tag_1_payload_data_address = lineLoader_address[31 : 12];
  assign _zz_6 = _zz_30[0 : 0];
  assign lineLoader_write_data_0_valid = (io_mem_rsp_valid && 1'b1);
  assign lineLoader_write_data_0_payload_address = {{lineLoader_address[11 : 6],lineLoader_wordIndex},_zz_6};
  assign lineLoader_write_data_0_payload_data = _zz_24;
  assign _zz_7 = _zz_31[0 : 0];
  assign lineLoader_write_data_1_valid = (io_mem_rsp_valid && 1'b1);
  assign lineLoader_write_data_1_payload_address = {{lineLoader_address[11 : 6],lineLoader_wordIndex},_zz_7};
  assign lineLoader_write_data_1_payload_data = _zz_25;
  assign _zz_8 = io_cpu_prefetch_pc[11 : 2];
  assign _zz_9 = (! io_cpu_fetch_isStuck);
  assign fetchStage_read_banksValue_0_dataMem = _zz_20;
  assign fetchStage_read_banksValue_0_data = fetchStage_read_banksValue_0_dataMem[31 : 0];
  assign _zz_10 = io_cpu_prefetch_pc[11 : 2];
  assign _zz_11 = (! io_cpu_fetch_isStuck);
  assign fetchStage_read_banksValue_1_dataMem = _zz_21;
  assign fetchStage_read_banksValue_1_data = fetchStage_read_banksValue_1_dataMem[31 : 0];
  assign _zz_12 = io_cpu_prefetch_pc[11 : 6];
  assign _zz_13 = (! io_cpu_fetch_isStuck);
  assign _zz_14 = _zz_22;
  assign fetchStage_read_waysValues_0_tag_valid = _zz_32[0];
  assign fetchStage_read_waysValues_0_tag_error = _zz_33[0];
  assign fetchStage_read_waysValues_0_tag_address = _zz_14[21 : 2];
  assign _zz_15 = io_cpu_prefetch_pc[11 : 6];
  assign _zz_16 = (! io_cpu_fetch_isStuck);
  assign _zz_17 = _zz_23;
  assign fetchStage_read_waysValues_1_tag_valid = _zz_34[0];
  assign fetchStage_read_waysValues_1_tag_error = _zz_35[0];
  assign fetchStage_read_waysValues_1_tag_address = _zz_17[21 : 2];
  assign fetchStage_hit_hits_0 = (fetchStage_read_waysValues_0_tag_valid && (fetchStage_read_waysValues_0_tag_address == io_cpu_fetch_mmuRsp_physicalAddress[31 : 12]));
  assign fetchStage_hit_hits_1 = (fetchStage_read_waysValues_1_tag_valid && (fetchStage_read_waysValues_1_tag_address == io_cpu_fetch_mmuRsp_physicalAddress[31 : 12]));
  assign fetchStage_hit_valid = ({fetchStage_hit_hits_1,fetchStage_hit_hits_0} != 2'b00);
  assign fetchStage_hit_wayId = fetchStage_hit_hits_1;
  assign fetchStage_hit_bankId = _zz_37;
  assign fetchStage_hit_error = _zz_26;
  assign fetchStage_hit_data = _zz_27;
  assign fetchStage_hit_word = fetchStage_hit_data;
  assign io_cpu_fetch_data = fetchStage_hit_word;
  assign io_cpu_decode_data = io_cpu_fetch_data_regNextWhen;
  assign io_cpu_fetch_physicalAddress = io_cpu_fetch_mmuRsp_physicalAddress;
  assign io_cpu_decode_cacheMiss = (! decodeStage_hit_valid);
  assign io_cpu_decode_error = decodeStage_hit_error;
  assign io_cpu_decode_mmuRefilling = decodeStage_mmuRsp_refilling;
  assign io_cpu_decode_mmuException = ((! decodeStage_mmuRsp_refilling) && (decodeStage_mmuRsp_exception || (! decodeStage_mmuRsp_allowExecute)));
  assign io_cpu_decode_physicalAddress = decodeStage_mmuRsp_physicalAddress;
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      lineLoader_valid <= 1'b0;
      lineLoader_hadError <= 1'b0;
      lineLoader_flushPending <= 1'b1;
      lineLoader_cmdSent <= 1'b0;
      lineLoader_wayToAllocate_value <= 1'b0;
      lineLoader_wordIndex <= 3'b000;
    end else begin
      if(lineLoader_fire)begin
        lineLoader_valid <= 1'b0;
      end
      if(lineLoader_fire)begin
        lineLoader_hadError <= 1'b0;
      end
      if(io_cpu_fill_valid)begin
        lineLoader_valid <= 1'b1;
      end
      if(io_flush)begin
        lineLoader_flushPending <= 1'b1;
      end
      if(_zz_29)begin
        lineLoader_flushPending <= 1'b0;
      end
      if((io_mem_cmd_valid && io_mem_cmd_ready))begin
        lineLoader_cmdSent <= 1'b1;
      end
      if(lineLoader_fire)begin
        lineLoader_cmdSent <= 1'b0;
      end
      lineLoader_wayToAllocate_value <= lineLoader_wayToAllocate_valueNext;
      if(io_mem_rsp_valid)begin
        lineLoader_wordIndex <= (lineLoader_wordIndex + 3'b001);
        if(io_mem_rsp_payload_error)begin
          lineLoader_hadError <= 1'b1;
        end
      end
    end
  end

  always @ (posedge CLKOUT0) begin
    if(io_cpu_fill_valid)begin
      lineLoader_address <= io_cpu_fill_payload;
    end
    if(_zz_28)begin
      lineLoader_flushCounter <= (lineLoader_flushCounter + 7'h01);
    end
    _zz_5 <= lineLoader_flushCounter[6];
    if(_zz_29)begin
      lineLoader_flushCounter <= 7'h0;
    end
    if((! io_cpu_decode_isStuck))begin
      io_cpu_fetch_data_regNextWhen <= io_cpu_fetch_data;
    end
    if((! io_cpu_decode_isStuck))begin
      decodeStage_mmuRsp_physicalAddress <= io_cpu_fetch_mmuRsp_physicalAddress;
      decodeStage_mmuRsp_isIoAccess <= io_cpu_fetch_mmuRsp_isIoAccess;
      decodeStage_mmuRsp_allowRead <= io_cpu_fetch_mmuRsp_allowRead;
      decodeStage_mmuRsp_allowWrite <= io_cpu_fetch_mmuRsp_allowWrite;
      decodeStage_mmuRsp_allowExecute <= io_cpu_fetch_mmuRsp_allowExecute;
      decodeStage_mmuRsp_exception <= io_cpu_fetch_mmuRsp_exception;
      decodeStage_mmuRsp_refilling <= io_cpu_fetch_mmuRsp_refilling;
      decodeStage_mmuRsp_bypassTranslation <= io_cpu_fetch_mmuRsp_bypassTranslation;
      decodeStage_mmuRsp_ways_0_sel <= io_cpu_fetch_mmuRsp_ways_0_sel;
      decodeStage_mmuRsp_ways_0_physical <= io_cpu_fetch_mmuRsp_ways_0_physical;
      decodeStage_mmuRsp_ways_1_sel <= io_cpu_fetch_mmuRsp_ways_1_sel;
      decodeStage_mmuRsp_ways_1_physical <= io_cpu_fetch_mmuRsp_ways_1_physical;
      decodeStage_mmuRsp_ways_2_sel <= io_cpu_fetch_mmuRsp_ways_2_sel;
      decodeStage_mmuRsp_ways_2_physical <= io_cpu_fetch_mmuRsp_ways_2_physical;
      decodeStage_mmuRsp_ways_3_sel <= io_cpu_fetch_mmuRsp_ways_3_sel;
      decodeStage_mmuRsp_ways_3_physical <= io_cpu_fetch_mmuRsp_ways_3_physical;
    end
    if((! io_cpu_decode_isStuck))begin
      decodeStage_hit_valid <= fetchStage_hit_valid;
    end
    if((! io_cpu_decode_isStuck))begin
      decodeStage_hit_error <= fetchStage_hit_error;
    end
    if((_zz_18 != 3'b000))begin
      io_cpu_fetch_data_regNextWhen <= _zz_19;
    end
  end


endmodule

module SystemDebugger (
  input               io_remote_cmd_valid,
  output              io_remote_cmd_ready,
  input               io_remote_cmd_payload_last,
  input      [0:0]    io_remote_cmd_payload_fragment,
  output              io_remote_rsp_valid,
  input               io_remote_rsp_ready,
  output              io_remote_rsp_payload_error,
  output     [31:0]   io_remote_rsp_payload_data,
  output              io_mem_cmd_valid,
  input               io_mem_cmd_ready,
  output     [31:0]   io_mem_cmd_payload_address,
  output     [31:0]   io_mem_cmd_payload_data,
  output              io_mem_cmd_payload_wr,
  output     [1:0]    io_mem_cmd_payload_size,
  input               io_mem_rsp_valid,
  input      [31:0]   io_mem_rsp_payload,
  input               CLKOUT0,
  input               debugCd_logic_outputReset
);
  wire                _zz_2;
  wire       [0:0]    _zz_3;
  reg        [66:0]   dispatcher_dataShifter;
  reg                 dispatcher_dataLoaded;
  reg        [7:0]    dispatcher_headerShifter;
  wire       [7:0]    dispatcher_header;
  reg                 dispatcher_headerLoaded;
  reg        [2:0]    dispatcher_counter;
  wire       [66:0]   _zz_1;

  assign _zz_2 = (dispatcher_headerLoaded == 1'b0);
  assign _zz_3 = _zz_1[64 : 64];
  assign dispatcher_header = dispatcher_headerShifter[7 : 0];
  assign io_remote_cmd_ready = (! dispatcher_dataLoaded);
  assign _zz_1 = dispatcher_dataShifter[66 : 0];
  assign io_mem_cmd_payload_address = _zz_1[31 : 0];
  assign io_mem_cmd_payload_data = _zz_1[63 : 32];
  assign io_mem_cmd_payload_wr = _zz_3[0];
  assign io_mem_cmd_payload_size = _zz_1[66 : 65];
  assign io_mem_cmd_valid = (dispatcher_dataLoaded && (dispatcher_header == 8'h0));
  assign io_remote_rsp_valid = io_mem_rsp_valid;
  assign io_remote_rsp_payload_error = 1'b0;
  assign io_remote_rsp_payload_data = io_mem_rsp_payload;
  always @ (posedge CLKOUT0) begin
    if(debugCd_logic_outputReset) begin
      dispatcher_dataLoaded <= 1'b0;
      dispatcher_headerLoaded <= 1'b0;
      dispatcher_counter <= 3'b000;
    end else begin
      if(io_remote_cmd_valid)begin
        if(_zz_2)begin
          dispatcher_counter <= (dispatcher_counter + 3'b001);
          if((dispatcher_counter == 3'b111))begin
            dispatcher_headerLoaded <= 1'b1;
          end
        end
        if(io_remote_cmd_payload_last)begin
          dispatcher_headerLoaded <= 1'b1;
          dispatcher_dataLoaded <= 1'b1;
          dispatcher_counter <= 3'b000;
        end
      end
      if(((dispatcher_headerLoaded && dispatcher_dataLoaded) && (! (io_mem_cmd_valid && (! io_mem_cmd_ready)))))begin
        dispatcher_headerLoaded <= 1'b0;
        dispatcher_dataLoaded <= 1'b0;
      end
    end
  end

  always @ (posedge CLKOUT0) begin
    if(io_remote_cmd_valid)begin
      if(_zz_2)begin
        dispatcher_headerShifter <= ({io_remote_cmd_payload_fragment,dispatcher_headerShifter} >>> 1);
      end else begin
        dispatcher_dataShifter <= ({io_remote_cmd_payload_fragment,dispatcher_dataShifter} >>> 1);
      end
    end
  end


endmodule

module JtagBridgeNoTap (
  input               io_ctrl_tdi,
  input               io_ctrl_enable,
  input               io_ctrl_capture,
  input               io_ctrl_shift,
  input               io_ctrl_update,
  input               io_ctrl_reset,
  output              io_ctrl_tdo,
  output              io_remote_cmd_valid,
  input               io_remote_cmd_ready,
  output              io_remote_cmd_payload_last,
  output     [0:0]    io_remote_cmd_payload_fragment,
  input               io_remote_rsp_valid,
  output              io_remote_rsp_ready,
  input               io_remote_rsp_payload_error,
  input      [31:0]   io_remote_rsp_payload_data,
  input               CLKOUT0,
  input               debugCd_logic_outputReset,
  input               TCK
);
  wire                _zz_9;
  wire                flowCCByToggle_1_io_output_valid;
  wire                flowCCByToggle_1_io_output_payload_last;
  wire       [0:0]    flowCCByToggle_1_io_output_payload_fragment;
  wire                _zz_10;
  wire                _zz_11;
  wire                system_cmd_valid;
  wire                system_cmd_payload_last;
  wire       [0:0]    system_cmd_payload_fragment;
  reg                 system_rsp_valid;
  reg                 system_rsp_payload_error;
  reg        [31:0]   system_rsp_payload_data;
  wire                jtag_wrapper_ctrl_tdi;
  wire                jtag_wrapper_ctrl_enable;
  wire                jtag_wrapper_ctrl_capture;
  wire                jtag_wrapper_ctrl_shift;
  wire                jtag_wrapper_ctrl_update;
  wire                jtag_wrapper_ctrl_reset;
  reg                 jtag_wrapper_ctrl_tdo;
  reg        [1:0]    jtag_wrapper_header;
  wire       [1:0]    jtag_wrapper_headerNext;
  reg        [0:0]    jtag_wrapper_counter;
  reg                 jtag_wrapper_done;
  reg                 jtag_wrapper_sendCapture;
  reg                 jtag_wrapper_sendShift;
  reg                 jtag_wrapper_sendUpdate;
  wire                _zz_1;
  wire                _zz_2;
  wire       [0:0]    _zz_3;
  reg                 _zz_4;
  reg                 _zz_5;
  wire                _zz_6;
  reg        [33:0]   _zz_7;
  wire                _zz_8;

  assign _zz_10 = (! jtag_wrapper_done);
  assign _zz_11 = (jtag_wrapper_counter == 1'b1);
  FlowCCByToggle flowCCByToggle_1 (
    .io_input_valid                (_zz_4                                        ), //i
    .io_input_payload_last         (_zz_9                                        ), //i
    .io_input_payload_fragment     (_zz_3                                        ), //i
    .io_output_valid               (flowCCByToggle_1_io_output_valid             ), //o
    .io_output_payload_last        (flowCCByToggle_1_io_output_payload_last      ), //o
    .io_output_payload_fragment    (flowCCByToggle_1_io_output_payload_fragment  ), //o
    .TCK                           (TCK                                          ), //i
    .CLKOUT0                       (CLKOUT0                                      ), //i
    .debugCd_logic_outputReset     (debugCd_logic_outputReset                    )  //i
  );
  assign io_remote_cmd_valid = system_cmd_valid;
  assign io_remote_cmd_payload_last = system_cmd_payload_last;
  assign io_remote_cmd_payload_fragment = system_cmd_payload_fragment;
  assign io_remote_rsp_ready = 1'b1;
  assign jtag_wrapper_headerNext = ({jtag_wrapper_ctrl_tdi,jtag_wrapper_header} >>> 1);
  always @ (*) begin
    jtag_wrapper_sendCapture = 1'b0;
    if(jtag_wrapper_ctrl_enable)begin
      if(jtag_wrapper_ctrl_shift)begin
        if(_zz_10)begin
          if(_zz_11)begin
            jtag_wrapper_sendCapture = 1'b1;
          end
        end
      end
    end
  end

  always @ (*) begin
    jtag_wrapper_sendShift = 1'b0;
    if(jtag_wrapper_ctrl_enable)begin
      if(jtag_wrapper_ctrl_shift)begin
        if(! _zz_10) begin
          jtag_wrapper_sendShift = 1'b1;
        end
      end
    end
  end

  always @ (*) begin
    jtag_wrapper_sendUpdate = 1'b0;
    if(jtag_wrapper_ctrl_enable)begin
      if(jtag_wrapper_ctrl_update)begin
        jtag_wrapper_sendUpdate = 1'b1;
      end
    end
  end

  always @ (*) begin
    jtag_wrapper_ctrl_tdo = 1'b0;
    if(_zz_6)begin
      jtag_wrapper_ctrl_tdo = 1'b0;
    end
    if(_zz_8)begin
      jtag_wrapper_ctrl_tdo = _zz_7[0];
    end
  end

  assign jtag_wrapper_ctrl_tdi = io_ctrl_tdi;
  assign jtag_wrapper_ctrl_enable = io_ctrl_enable;
  assign jtag_wrapper_ctrl_capture = io_ctrl_capture;
  assign jtag_wrapper_ctrl_shift = io_ctrl_shift;
  assign jtag_wrapper_ctrl_update = io_ctrl_update;
  assign jtag_wrapper_ctrl_reset = io_ctrl_reset;
  assign io_ctrl_tdo = jtag_wrapper_ctrl_tdo;
  assign _zz_3[0] = _zz_5;
  assign _zz_9 = (! (_zz_1 && _zz_2));
  assign system_cmd_valid = flowCCByToggle_1_io_output_valid;
  assign system_cmd_payload_last = flowCCByToggle_1_io_output_payload_last;
  assign system_cmd_payload_fragment = flowCCByToggle_1_io_output_payload_fragment;
  assign _zz_6 = (jtag_wrapper_header == 2'b00);
  assign _zz_1 = 1'b1;
  assign _zz_2 = (_zz_6 && jtag_wrapper_sendShift);
  assign _zz_8 = (jtag_wrapper_header == 2'b01);
  always @ (posedge CLKOUT0) begin
    if(io_remote_cmd_valid)begin
      system_rsp_valid <= 1'b0;
    end
    if((io_remote_rsp_valid && io_remote_rsp_ready))begin
      system_rsp_valid <= 1'b1;
      system_rsp_payload_error <= io_remote_rsp_payload_error;
      system_rsp_payload_data <= io_remote_rsp_payload_data;
    end
  end

  always @ (posedge TCK) begin
    if(jtag_wrapper_ctrl_enable)begin
      if(jtag_wrapper_ctrl_capture)begin
        jtag_wrapper_done <= 1'b0;
        jtag_wrapper_counter <= 1'b0;
      end
      if(jtag_wrapper_ctrl_shift)begin
        if(_zz_10)begin
          jtag_wrapper_counter <= (jtag_wrapper_counter + 1'b1);
          jtag_wrapper_header <= jtag_wrapper_headerNext;
          if(_zz_11)begin
            jtag_wrapper_done <= 1'b1;
          end
        end
      end
    end
    _zz_4 <= (_zz_1 && _zz_2);
    _zz_5 <= jtag_wrapper_ctrl_tdi;
    if(1'b1)begin
      if(((jtag_wrapper_headerNext == 2'b01) && jtag_wrapper_sendCapture))begin
        _zz_7 <= {{system_rsp_payload_data,system_rsp_payload_error},system_rsp_valid};
      end
      if((_zz_8 && jtag_wrapper_sendShift))begin
        _zz_7 <= ({jtag_wrapper_ctrl_tdi,_zz_7} >>> 1);
      end
    end
  end


endmodule

//BufferCC_5 replaced by BufferCC_5

//BufferCC_19 replaced by BufferCC_19

module BufferCC_19 (
  input               io_dataIn,
  output              io_dataOut,
  input               CLKOUT1,
  input               sdramCd_logic_outputReset
);
  reg                 buffers_0;
  reg                 buffers_1;

  assign io_dataOut = buffers_1;
  always @ (posedge CLKOUT1) begin
    if(sdramCd_logic_outputReset) begin
      buffers_0 <= 1'b0;
      buffers_1 <= 1'b0;
    end else begin
      buffers_0 <= io_dataIn;
      buffers_1 <= buffers_0;
    end
  end


endmodule

//BufferCC_5 replaced by BufferCC_5

module Backend (
  input      [0:0]    io_config_readLatency,
  input      [3:0]    io_config_RAS,
  input      [3:0]    io_config_RP,
  input      [3:0]    io_config_WR,
  input      [3:0]    io_config_RCD,
  input      [3:0]    io_config_WTR,
  input      [3:0]    io_config_RTP,
  input      [3:0]    io_config_RRD,
  input      [3:0]    io_config_RTW,
  input      [6:0]    io_config_RFC,
  input      [3:0]    io_config_ODT,
  input      [1:0]    io_config_ODTend,
  input      [3:0]    io_config_FAW,
  input      [15:0]   io_config_REF,
  input               io_config_autoRefresh,
  input               io_config_noActive,
  input      [0:0]    io_config_phase_active,
  input      [0:0]    io_config_phase_precharge,
  input      [0:0]    io_config_phase_read,
  input      [0:0]    io_config_phase_write,
  input               io_input_ports_0_read,
  input               io_input_ports_0_write,
  input               io_input_ports_0_active,
  input               io_input_ports_0_precharge,
  input               io_input_ports_0_last,
  input      [0:0]    io_input_ports_0_address_byte,
  input      [9:0]    io_input_ports_0_address_column,
  input      [2:0]    io_input_ports_0_address_bank,
  input      [12:0]   io_input_ports_0_address_row,
  input      [11:0]   io_input_ports_0_context,
  input               io_input_ports_1_read,
  input               io_input_ports_1_write,
  input               io_input_ports_1_active,
  input               io_input_ports_1_precharge,
  input               io_input_ports_1_last,
  input      [0:0]    io_input_ports_1_address_byte,
  input      [9:0]    io_input_ports_1_address_column,
  input      [2:0]    io_input_ports_1_address_bank,
  input      [12:0]   io_input_ports_1_address_row,
  input      [11:0]   io_input_ports_1_context,
  input               io_input_prechargeAll,
  input               io_input_refresh,
  input               io_writeDatas_0_valid,
  output reg          io_writeDatas_0_ready,
  input      [63:0]   io_writeDatas_0_payload_data,
  input      [7:0]    io_writeDatas_0_payload_mask,
  output reg          io_phy_phases_0_CASn,
  output              io_phy_phases_0_CKE,
  output reg          io_phy_phases_0_CSn,
  output reg          io_phy_phases_0_RASn,
  output reg          io_phy_phases_0_WEn,
  output reg          io_phy_phases_0_ODT,
  output reg [1:0]    io_phy_phases_0_DM_0,
  output reg [1:0]    io_phy_phases_0_DM_1,
  output     [15:0]   io_phy_phases_0_DQw_0,
  output     [15:0]   io_phy_phases_0_DQw_1,
  input      [15:0]   io_phy_phases_0_DQr_0,
  input      [15:0]   io_phy_phases_0_DQr_1,
  output reg          io_phy_phases_1_CASn,
  output              io_phy_phases_1_CKE,
  output reg          io_phy_phases_1_CSn,
  output reg          io_phy_phases_1_RASn,
  output reg          io_phy_phases_1_WEn,
  output reg          io_phy_phases_1_ODT,
  output reg [1:0]    io_phy_phases_1_DM_0,
  output reg [1:0]    io_phy_phases_1_DM_1,
  output     [15:0]   io_phy_phases_1_DQw_0,
  output     [15:0]   io_phy_phases_1_DQw_1,
  input      [15:0]   io_phy_phases_1_DQr_0,
  input      [15:0]   io_phy_phases_1_DQr_1,
  output reg [12:0]   io_phy_ADDR,
  output reg [2:0]    io_phy_BA,
  output              io_phy_DQS_preamble,
  output              io_phy_DQS_active,
  output              io_phy_DQS_postamble,
  output              io_phy_writeEnable,
  output reg          io_phy_readEnable,
  input               io_phy_readValid,
  output              io_outputs_0_valid,
  output              io_outputs_0_payload_last,
  output     [63:0]   io_outputs_0_payload_fragment_data,
  output     [11:0]   io_outputs_0_payload_fragment_context,
  input               io_soft_cmd_valid,
  input      [12:0]   io_soft_cmd_payload_ADDR,
  input      [2:0]    io_soft_cmd_payload_BA,
  input               io_soft_cmd_payload_CASn,
  input               io_soft_cmd_payload_CSn,
  input               io_soft_cmd_payload_RASn,
  input               io_soft_cmd_payload_WEn,
  input               io_soft_CKE,
  input               CLKOUT1,
  input               sdramCd_logic_outputReset
);
  wire                _zz_31;
  wire                _zz_32;
  wire                streamFifoLowLatency_5_io_push_ready;
  wire                streamFifoLowLatency_5_io_pop_valid;
  wire                streamFifoLowLatency_5_io_pop_payload_write;
  wire                streamFifoLowLatency_5_io_pop_payload_last;
  wire       [11:0]   streamFifoLowLatency_5_io_pop_payload_context;
  wire       [4:0]    streamFifoLowLatency_5_io_occupancy;
  wire                _zz_33;
  wire                _zz_34;
  wire                _zz_35;
  wire                _zz_36;
  wire       [0:0]    _zz_37;
  wire       [9:0]    _zz_38;
  wire       [9:0]    _zz_39;
  reg                 odt_start;
  reg        [3:0]    odt_counter;
  wire                writePipeline_input_valid;
  wire                writePipeline_inputRepeated_valid;
  wire                writePipeline_writeHistory_0_valid;
  wire                writePipeline_writeHistory_1_valid;
  wire                writePipeline_writeHistory_2_valid;
  wire                _zz_1;
  reg                 _zz_2;
  reg                 _zz_3;
  reg                 writePipeline_history_valid;
  wire       [63:0]   writePipeline_payload_data;
  wire       [7:0]    writePipeline_payload_mask;
  wire       [31:0]   _zz_4;
  wire       [31:0]   _zz_5;
  wire       [3:0]    _zz_6;
  wire       [3:0]    _zz_7;
  reg                 rspPipeline_input_valid;
  reg                 rspPipeline_input_payload_write;
  wire                rspPipeline_input_payload_last;
  wire       [11:0]   rspPipeline_input_payload_context;
  wire                rspPipeline_readHistory_0;
  wire                rspPipeline_readHistory_1;
  wire                rspPipeline_readHistory_2;
  wire                rspPipeline_readHistory_3;
  wire                rspPipeline_readHistory_4;
  wire                rspPipeline_readHistory_5;
  wire                rspPipeline_readHistory_6;
  wire                rspPipeline_readHistory_7;
  wire                rspPipeline_readHistory_8;
  wire                rspPipeline_readHistory_9;
  wire                _zz_8;
  reg                 _zz_9;
  reg                 _zz_10;
  reg                 _zz_11;
  reg                 _zz_12;
  reg                 _zz_13;
  reg                 _zz_14;
  reg                 _zz_15;
  reg                 _zz_16;
  reg                 _zz_17;
  reg                 rspPipeline_beatCounter_willIncrement;
  wire                rspPipeline_beatCounter_willClear;
  wire                rspPipeline_beatCounter_willOverflowIfInc;
  wire                rspPipeline_beatCounter_willOverflow;
  wire                rspPipeline_output_valid;
  wire                rspPipeline_output_payload_last;
  reg        [63:0]   rspPipeline_output_payload_fragment_data;
  wire       [11:0]   rspPipeline_output_payload_fragment_context;
  reg        [63:0]   rspPipeline_debugData;
  reg                 rspPop_valid;
  reg                 rspPop_payload_last;
  reg        [63:0]   rspPop_payload_fragment_data;
  reg        [11:0]   rspPop_payload_fragment_context;
  wire                _zz_18;
  wire                muxedCmd_read;
  wire                muxedCmd_write;
  wire                muxedCmd_active;
  wire                muxedCmd_precharge;
  wire                muxedCmd_last;
  wire       [0:0]    muxedCmd_address_byte;
  wire       [9:0]    muxedCmd_address_column;
  wire       [2:0]    muxedCmd_address_bank;
  wire       [12:0]   muxedCmd_address_row;
  wire       [11:0]   muxedCmd_context;
  wire       [1:0]    _zz_19;
  wire                _zz_20;
  wire                _zz_21;
  wire       [1:0]    _zz_22;
  wire                _zz_23;
  wire                _zz_24;
  wire       [1:0]    _zz_25;
  wire                _zz_26;
  wire                _zz_27;
  wire       [1:0]    _zz_28;
  wire                _zz_29;
  wire                _zz_30;

  assign _zz_33 = ({io_input_ports_1_precharge,io_input_ports_0_precharge} != 2'b00);
  assign _zz_34 = ({io_input_ports_1_active,io_input_ports_0_active} != 2'b00);
  assign _zz_35 = ({io_input_ports_1_write,io_input_ports_0_write} != 2'b00);
  assign _zz_36 = ({io_input_ports_1_read,io_input_ports_0_read} != 2'b00);
  assign _zz_37 = 1'b1;
  assign _zz_38 = muxedCmd_address_column;
  assign _zz_39 = muxedCmd_address_column;
  StreamFifoLowLatency streamFifoLowLatency_5 (
    .io_push_valid                (rspPipeline_input_valid                              ), //i
    .io_push_ready                (streamFifoLowLatency_5_io_push_ready                 ), //o
    .io_push_payload_write        (rspPipeline_input_payload_write                      ), //i
    .io_push_payload_last         (rspPipeline_input_payload_last                       ), //i
    .io_push_payload_context      (rspPipeline_input_payload_context[11:0]              ), //i
    .io_pop_valid                 (streamFifoLowLatency_5_io_pop_valid                  ), //o
    .io_pop_ready                 (_zz_31                                               ), //i
    .io_pop_payload_write         (streamFifoLowLatency_5_io_pop_payload_write          ), //o
    .io_pop_payload_last          (streamFifoLowLatency_5_io_pop_payload_last           ), //o
    .io_pop_payload_context       (streamFifoLowLatency_5_io_pop_payload_context[11:0]  ), //o
    .io_flush                     (_zz_32                                               ), //i
    .io_occupancy                 (streamFifoLowLatency_5_io_occupancy[4:0]             ), //o
    .CLKOUT1                      (CLKOUT1                                              ), //i
    .sdramCd_logic_outputReset    (sdramCd_logic_outputReset                            )  //i
  );
  always @ (*) begin
    io_phy_ADDR = 13'h0;
    if(io_input_prechargeAll)begin
      io_phy_ADDR[10] = 1'b1;
    end
    if(_zz_33)begin
      io_phy_ADDR = muxedCmd_address_row;
      io_phy_ADDR[10] = 1'b0;
    end
    if(_zz_34)begin
      io_phy_ADDR = muxedCmd_address_row;
    end
    if(_zz_35)begin
      io_phy_ADDR = {3'd0, _zz_38};
      io_phy_ADDR[10] = 1'b0;
    end
    if(_zz_36)begin
      io_phy_ADDR = {3'd0, _zz_39};
      io_phy_ADDR[10] = 1'b0;
    end
    if(io_soft_cmd_valid)begin
      io_phy_ADDR = io_soft_cmd_payload_ADDR;
    end
  end

  always @ (*) begin
    io_phy_BA = 3'bxxx;
    if(_zz_33)begin
      io_phy_BA = muxedCmd_address_bank;
    end
    if(_zz_34)begin
      io_phy_BA = muxedCmd_address_bank;
    end
    if(_zz_35)begin
      io_phy_BA = muxedCmd_address_bank;
    end
    if(_zz_36)begin
      io_phy_BA = muxedCmd_address_bank;
    end
    if(io_soft_cmd_valid)begin
      io_phy_BA = io_soft_cmd_payload_BA;
    end
  end

  always @ (*) begin
    io_phy_phases_0_CSn = 1'b0;
    if(io_input_prechargeAll)begin
      if(_zz_20)begin
        io_phy_phases_0_CSn = 1'b0;
      end
    end
    if(io_input_refresh)begin
      if(_zz_23)begin
        io_phy_phases_0_CSn = 1'b0;
      end
    end
    if(_zz_33)begin
      if(_zz_20)begin
        io_phy_phases_0_CSn = 1'b0;
      end
    end
    if(_zz_34)begin
      if(_zz_23)begin
        io_phy_phases_0_CSn = 1'b0;
      end
    end
    if(_zz_35)begin
      if(_zz_26)begin
        io_phy_phases_0_CSn = 1'b0;
      end
    end
    if(_zz_36)begin
      if(_zz_29)begin
        io_phy_phases_0_CSn = 1'b0;
      end
    end
    if(io_soft_cmd_valid)begin
      io_phy_phases_0_CSn = io_soft_cmd_payload_CSn;
    end
  end

  always @ (*) begin
    io_phy_phases_0_RASn = 1'b1;
    if(io_input_prechargeAll)begin
      if(_zz_20)begin
        io_phy_phases_0_RASn = 1'b0;
      end
    end
    if(io_input_refresh)begin
      if(_zz_23)begin
        io_phy_phases_0_RASn = 1'b0;
      end
    end
    if(_zz_33)begin
      if(_zz_20)begin
        io_phy_phases_0_RASn = 1'b0;
      end
    end
    if(_zz_34)begin
      if(_zz_23)begin
        io_phy_phases_0_RASn = io_config_noActive;
      end
    end
    if(io_soft_cmd_valid)begin
      io_phy_phases_0_RASn = io_soft_cmd_payload_RASn;
    end
  end

  always @ (*) begin
    io_phy_phases_0_CASn = 1'b1;
    if(io_input_refresh)begin
      if(_zz_23)begin
        io_phy_phases_0_CASn = 1'b0;
      end
    end
    if(_zz_35)begin
      if(_zz_26)begin
        io_phy_phases_0_CASn = 1'b0;
      end
    end
    if(_zz_36)begin
      if(_zz_29)begin
        io_phy_phases_0_CASn = 1'b0;
      end
    end
    if(io_soft_cmd_valid)begin
      io_phy_phases_0_CASn = io_soft_cmd_payload_CASn;
    end
  end

  always @ (*) begin
    io_phy_phases_0_WEn = 1'b1;
    if(io_input_prechargeAll)begin
      if(_zz_20)begin
        io_phy_phases_0_WEn = 1'b0;
      end
    end
    if(_zz_33)begin
      if(_zz_20)begin
        io_phy_phases_0_WEn = 1'b0;
      end
    end
    if(_zz_35)begin
      if(_zz_26)begin
        io_phy_phases_0_WEn = 1'b0;
      end
    end
    if(io_soft_cmd_valid)begin
      io_phy_phases_0_WEn = io_soft_cmd_payload_WEn;
    end
  end

  assign io_phy_phases_0_CKE = io_soft_CKE;
  always @ (*) begin
    io_phy_phases_1_CSn = 1'b0;
    if(io_input_prechargeAll)begin
      if(_zz_21)begin
        io_phy_phases_1_CSn = 1'b0;
      end
    end
    if(io_input_refresh)begin
      if(_zz_24)begin
        io_phy_phases_1_CSn = 1'b0;
      end
    end
    if(_zz_33)begin
      if(_zz_21)begin
        io_phy_phases_1_CSn = 1'b0;
      end
    end
    if(_zz_34)begin
      if(_zz_24)begin
        io_phy_phases_1_CSn = 1'b0;
      end
    end
    if(_zz_35)begin
      if(_zz_27)begin
        io_phy_phases_1_CSn = 1'b0;
      end
    end
    if(_zz_36)begin
      if(_zz_30)begin
        io_phy_phases_1_CSn = 1'b0;
      end
    end
  end

  always @ (*) begin
    io_phy_phases_1_RASn = 1'b1;
    if(io_input_prechargeAll)begin
      if(_zz_21)begin
        io_phy_phases_1_RASn = 1'b0;
      end
    end
    if(io_input_refresh)begin
      if(_zz_24)begin
        io_phy_phases_1_RASn = 1'b0;
      end
    end
    if(_zz_33)begin
      if(_zz_21)begin
        io_phy_phases_1_RASn = 1'b0;
      end
    end
    if(_zz_34)begin
      if(_zz_24)begin
        io_phy_phases_1_RASn = io_config_noActive;
      end
    end
  end

  always @ (*) begin
    io_phy_phases_1_CASn = 1'b1;
    if(io_input_refresh)begin
      if(_zz_24)begin
        io_phy_phases_1_CASn = 1'b0;
      end
    end
    if(_zz_35)begin
      if(_zz_27)begin
        io_phy_phases_1_CASn = 1'b0;
      end
    end
    if(_zz_36)begin
      if(_zz_30)begin
        io_phy_phases_1_CASn = 1'b0;
      end
    end
  end

  always @ (*) begin
    io_phy_phases_1_WEn = 1'b1;
    if(io_input_prechargeAll)begin
      if(_zz_21)begin
        io_phy_phases_1_WEn = 1'b0;
      end
    end
    if(_zz_33)begin
      if(_zz_21)begin
        io_phy_phases_1_WEn = 1'b0;
      end
    end
    if(_zz_35)begin
      if(_zz_27)begin
        io_phy_phases_1_WEn = 1'b0;
      end
    end
  end

  assign io_phy_phases_1_CKE = io_soft_CKE;
  always @ (*) begin
    odt_start = 1'b0;
    if(_zz_35)begin
      odt_start = 1'b1;
    end
  end

  always @ (*) begin
    io_phy_phases_0_ODT = 1'b0;
    if((odt_start && (io_config_phase_write <= 1'b0)))begin
      io_phy_phases_0_ODT = 1'b1;
    end
    if((4'b0001 < odt_counter))begin
      io_phy_phases_0_ODT = 1'b1;
    end
    if(((odt_counter == 4'b0001) && io_config_ODTend[0]))begin
      io_phy_phases_0_ODT = 1'b1;
    end
  end

  always @ (*) begin
    io_phy_phases_1_ODT = 1'b0;
    if((odt_start && (io_config_phase_write <= 1'b1)))begin
      io_phy_phases_1_ODT = 1'b1;
    end
    if((4'b0001 < odt_counter))begin
      io_phy_phases_1_ODT = 1'b1;
    end
    if(((odt_counter == 4'b0001) && io_config_ODTend[1]))begin
      io_phy_phases_1_ODT = 1'b1;
    end
  end

  assign writePipeline_inputRepeated_valid = writePipeline_input_valid;
  assign _zz_1 = writePipeline_inputRepeated_valid;
  assign writePipeline_writeHistory_0_valid = _zz_1;
  assign writePipeline_writeHistory_1_valid = _zz_2;
  assign writePipeline_writeHistory_2_valid = _zz_3;
  always @ (*) begin
    writePipeline_history_valid = 1'b0;
    writePipeline_history_valid = writePipeline_writeHistory_2_valid;
  end

  assign io_phy_writeEnable = writePipeline_history_valid;
  always @ (*) begin
    io_writeDatas_0_ready = 1'b0;
    if(_zz_37[0])begin
      io_writeDatas_0_ready = writePipeline_history_valid;
    end
  end

  assign writePipeline_payload_data = io_writeDatas_0_payload_data;
  assign writePipeline_payload_mask = io_writeDatas_0_payload_mask;
  assign _zz_4 = writePipeline_payload_data[31 : 0];
  assign _zz_5 = writePipeline_payload_data[63 : 32];
  assign io_phy_phases_0_DQw_0 = _zz_4[15 : 0];
  assign io_phy_phases_0_DQw_1 = _zz_4[31 : 16];
  assign _zz_6 = (~ writePipeline_payload_mask[3 : 0]);
  always @ (*) begin
    if(writePipeline_history_valid)begin
      io_phy_phases_0_DM_0 = _zz_6[1 : 0];
    end else begin
      io_phy_phases_0_DM_0 = 2'b00;
    end
  end

  always @ (*) begin
    if(writePipeline_history_valid)begin
      io_phy_phases_0_DM_1 = _zz_6[3 : 2];
    end else begin
      io_phy_phases_0_DM_1 = 2'b00;
    end
  end

  assign io_phy_phases_1_DQw_0 = _zz_5[15 : 0];
  assign io_phy_phases_1_DQw_1 = _zz_5[31 : 16];
  assign _zz_7 = (~ writePipeline_payload_mask[7 : 4]);
  always @ (*) begin
    if(writePipeline_history_valid)begin
      io_phy_phases_1_DM_0 = _zz_7[1 : 0];
    end else begin
      io_phy_phases_1_DM_0 = 2'b00;
    end
  end

  always @ (*) begin
    if(writePipeline_history_valid)begin
      io_phy_phases_1_DM_1 = _zz_7[3 : 2];
    end else begin
      io_phy_phases_1_DM_1 = 2'b00;
    end
  end

  assign _zz_8 = (rspPipeline_input_valid && (! rspPipeline_input_payload_write));
  assign rspPipeline_readHistory_0 = _zz_8;
  assign rspPipeline_readHistory_1 = _zz_9;
  assign rspPipeline_readHistory_2 = _zz_10;
  assign rspPipeline_readHistory_3 = _zz_11;
  assign rspPipeline_readHistory_4 = _zz_12;
  assign rspPipeline_readHistory_5 = _zz_13;
  assign rspPipeline_readHistory_6 = _zz_14;
  assign rspPipeline_readHistory_7 = _zz_15;
  assign rspPipeline_readHistory_8 = _zz_16;
  assign rspPipeline_readHistory_9 = _zz_17;
  always @ (*) begin
    io_phy_readEnable = 1'b0;
    case(io_config_readLatency)
      1'b0 : begin
        io_phy_readEnable = (rspPipeline_readHistory_8 != 1'b0);
      end
      default : begin
        io_phy_readEnable = (rspPipeline_readHistory_9 != 1'b0);
      end
    endcase
  end

  always @ (*) begin
    rspPipeline_beatCounter_willIncrement = 1'b0;
    if(io_phy_readValid)begin
      rspPipeline_beatCounter_willIncrement = 1'b1;
    end
  end

  assign rspPipeline_beatCounter_willClear = 1'b0;
  assign rspPipeline_beatCounter_willOverflowIfInc = 1'b1;
  assign rspPipeline_beatCounter_willOverflow = (rspPipeline_beatCounter_willOverflowIfInc && rspPipeline_beatCounter_willIncrement);
  assign rspPipeline_output_valid = (((streamFifoLowLatency_5_io_pop_valid && streamFifoLowLatency_5_io_pop_payload_write) && streamFifoLowLatency_5_io_pop_payload_last) || io_phy_readValid);
  assign rspPipeline_output_payload_fragment_context = streamFifoLowLatency_5_io_pop_payload_context;
  assign rspPipeline_output_payload_last = (streamFifoLowLatency_5_io_pop_payload_write || (rspPipeline_beatCounter_willOverflowIfInc && streamFifoLowLatency_5_io_pop_payload_last));
  assign _zz_31 = (streamFifoLowLatency_5_io_pop_payload_write || rspPipeline_beatCounter_willOverflow);
  always @ (*) begin
    rspPipeline_output_payload_fragment_data[31 : 0] = {io_phy_phases_0_DQr_1,io_phy_phases_0_DQr_0};
    rspPipeline_output_payload_fragment_data[63 : 32] = {io_phy_phases_1_DQr_1,io_phy_phases_1_DQr_0};
  end

  assign io_outputs_0_valid = (rspPop_valid && 1'b1);
  assign io_outputs_0_payload_last = rspPop_payload_last;
  assign io_outputs_0_payload_fragment_data = rspPop_payload_fragment_data;
  assign io_outputs_0_payload_fragment_context = rspPop_payload_fragment_context;
  assign _zz_18 = (((io_input_ports_0_read || io_input_ports_0_write) || io_input_ports_0_precharge) || io_input_ports_0_active);
  assign muxedCmd_read = (_zz_18 ? io_input_ports_0_read : io_input_ports_1_read);
  assign muxedCmd_write = (_zz_18 ? io_input_ports_0_write : io_input_ports_1_write);
  assign muxedCmd_active = (_zz_18 ? io_input_ports_0_active : io_input_ports_1_active);
  assign muxedCmd_precharge = (_zz_18 ? io_input_ports_0_precharge : io_input_ports_1_precharge);
  assign muxedCmd_last = (_zz_18 ? io_input_ports_0_last : io_input_ports_1_last);
  assign muxedCmd_address_byte = (_zz_18 ? io_input_ports_0_address_byte : io_input_ports_1_address_byte);
  assign muxedCmd_address_column = (_zz_18 ? io_input_ports_0_address_column : io_input_ports_1_address_column);
  assign muxedCmd_address_bank = (_zz_18 ? io_input_ports_0_address_bank : io_input_ports_1_address_bank);
  assign muxedCmd_address_row = (_zz_18 ? io_input_ports_0_address_row : io_input_ports_1_address_row);
  assign muxedCmd_context = (_zz_18 ? io_input_ports_0_context : io_input_ports_1_context);
  assign writePipeline_input_valid = ({io_input_ports_1_write,io_input_ports_0_write} != 2'b00);
  always @ (*) begin
    rspPipeline_input_valid = 1'b0;
    if(_zz_35)begin
      rspPipeline_input_valid = 1'b1;
    end
    if(_zz_36)begin
      rspPipeline_input_valid = 1'b1;
    end
  end

  assign rspPipeline_input_payload_last = muxedCmd_last;
  assign rspPipeline_input_payload_context = muxedCmd_context;
  always @ (*) begin
    rspPipeline_input_payload_write = 1'bx;
    if(_zz_35)begin
      rspPipeline_input_payload_write = 1'b1;
    end
    if(_zz_36)begin
      rspPipeline_input_payload_write = 1'b0;
    end
  end

  assign _zz_19 = ({1'd0,1'b1} <<< io_config_phase_precharge);
  assign _zz_20 = _zz_19[0];
  assign _zz_21 = _zz_19[1];
  assign _zz_22 = ({1'd0,1'b1} <<< io_config_phase_active);
  assign _zz_23 = _zz_22[0];
  assign _zz_24 = _zz_22[1];
  assign _zz_25 = ({1'd0,1'b1} <<< io_config_phase_write);
  assign _zz_26 = _zz_25[0];
  assign _zz_27 = _zz_25[1];
  assign _zz_28 = ({1'd0,1'b1} <<< io_config_phase_read);
  assign _zz_29 = _zz_28[0];
  assign _zz_30 = _zz_28[1];
  assign _zz_32 = 1'b0;
  always @ (posedge CLKOUT1) begin
    if(sdramCd_logic_outputReset) begin
      odt_counter <= 4'b0000;
      _zz_2 <= 1'b0;
      _zz_3 <= 1'b0;
      _zz_9 <= 1'b0;
      _zz_10 <= 1'b0;
      _zz_11 <= 1'b0;
      _zz_12 <= 1'b0;
      _zz_13 <= 1'b0;
      _zz_14 <= 1'b0;
      _zz_15 <= 1'b0;
      _zz_16 <= 1'b0;
      _zz_17 <= 1'b0;
      rspPop_valid <= 1'b0;
    end else begin
      if((odt_counter != 4'b0000))begin
        odt_counter <= (odt_counter - 4'b0001);
      end
      if(odt_start)begin
        odt_counter <= io_config_ODT;
      end
      _zz_2 <= _zz_1;
      _zz_3 <= _zz_2;
      `ifndef SYNTHESIS
        `ifdef FORMAL
          assert((! ((! io_writeDatas_0_valid) && io_writeDatas_0_ready)))
        `else
          if(!(! ((! io_writeDatas_0_valid) && io_writeDatas_0_ready))) begin
            $display("ERROR SDRAM write data stream starved !");
          end
        `endif
      `endif
      _zz_9 <= _zz_8;
      _zz_10 <= _zz_9;
      _zz_11 <= _zz_10;
      _zz_12 <= _zz_11;
      _zz_13 <= _zz_12;
      _zz_14 <= _zz_13;
      _zz_15 <= _zz_14;
      _zz_16 <= _zz_15;
      _zz_17 <= _zz_16;
      rspPop_valid <= rspPipeline_output_valid;
    end
  end

  always @ (posedge CLKOUT1) begin
    if(rspPipeline_output_valid)begin
      rspPipeline_debugData <= rspPipeline_output_payload_fragment_data;
    end
    rspPop_payload_last <= rspPipeline_output_payload_last;
    rspPop_payload_fragment_data <= rspPipeline_output_payload_fragment_data;
    rspPop_payload_fragment_context <= rspPipeline_output_payload_fragment_context;
  end


endmodule

module Tasker (
  input      [0:0]    io_config_readLatency,
  input      [3:0]    io_config_RAS,
  input      [3:0]    io_config_RP,
  input      [3:0]    io_config_WR,
  input      [3:0]    io_config_RCD,
  input      [3:0]    io_config_WTR,
  input      [3:0]    io_config_RTP,
  input      [3:0]    io_config_RRD,
  input      [3:0]    io_config_RTW,
  input      [6:0]    io_config_RFC,
  input      [3:0]    io_config_ODT,
  input      [1:0]    io_config_ODTend,
  input      [3:0]    io_config_FAW,
  input      [15:0]   io_config_REF,
  input               io_config_autoRefresh,
  input               io_config_noActive,
  input      [0:0]    io_config_phase_active,
  input      [0:0]    io_config_phase_precharge,
  input      [0:0]    io_config_phase_read,
  input      [0:0]    io_config_phase_write,
  input               io_refresh_valid,
  output reg          io_refresh_ready,
  input               io_inputs_0_valid,
  output              io_inputs_0_ready,
  input               io_inputs_0_payload_write,
  input      [26:0]   io_inputs_0_payload_address,
  input      [11:0]   io_inputs_0_payload_context,
  input               io_inputs_0_payload_burstLast,
  input      [2:0]    io_inputs_0_payload_length,
  input      [0:0]    io_writeDataTockens_0,
  output              io_output_ports_0_read,
  output              io_output_ports_0_write,
  output              io_output_ports_0_active,
  output              io_output_ports_0_precharge,
  output              io_output_ports_0_last,
  output     [0:0]    io_output_ports_0_address_byte,
  output     [9:0]    io_output_ports_0_address_column,
  output     [2:0]    io_output_ports_0_address_bank,
  output     [12:0]   io_output_ports_0_address_row,
  output     [11:0]   io_output_ports_0_context,
  output              io_output_ports_1_read,
  output              io_output_ports_1_write,
  output              io_output_ports_1_active,
  output              io_output_ports_1_precharge,
  output              io_output_ports_1_last,
  output     [0:0]    io_output_ports_1_address_byte,
  output     [9:0]    io_output_ports_1_address_column,
  output     [2:0]    io_output_ports_1_address_bank,
  output     [12:0]   io_output_ports_1_address_row,
  output     [11:0]   io_output_ports_1_context,
  output reg          io_output_prechargeAll,
  output reg          io_output_refresh,
  input               CLKOUT1,
  input               sdramCd_logic_outputReset
);
  wire       [12:0]   _zz_71;
  reg                 _zz_72;
  reg                 _zz_73;
  reg                 _zz_74;
  reg                 _zz_75;
  reg                 _zz_76;
  reg                 _zz_77;
  reg                 _zz_78;
  reg                 _zz_79;
  reg                 _zz_80;
  reg                 _zz_81;
  reg                 _zz_82;
  reg                 _zz_83;
  reg                 _zz_84;
  reg                 _zz_85;
  wire                _zz_86;
  wire                _zz_87;
  wire                _zz_88;
  wire                _zz_89;
  wire                _zz_90;
  wire                _zz_91;
  wire                _zz_92;
  wire                _zz_93;
  wire       [0:0]    _zz_94;
  wire       [6:0]    _zz_95;
  wire       [0:0]    _zz_96;
  wire       [3:0]    _zz_97;
  wire       [0:0]    _zz_98;
  wire       [3:0]    _zz_99;
  wire       [0:0]    _zz_100;
  wire       [3:0]    _zz_101;
  wire       [3:0]    _zz_102;
  wire       [0:0]    _zz_103;
  wire       [3:0]    _zz_104;
  wire       [0:0]    _zz_105;
  wire       [3:0]    _zz_106;
  wire       [0:0]    _zz_107;
  wire       [3:0]    _zz_108;
  wire       [0:0]    _zz_109;
  wire       [3:0]    _zz_110;
  wire       [0:0]    _zz_111;
  wire       [3:0]    _zz_112;
  wire       [1:0]    _zz_113;
  wire       [0:0]    _zz_114;
  wire       [1:0]    _zz_115;
  wire       [0:0]    _zz_116;
  wire       [3:0]    _zz_117;
  wire       [0:0]    _zz_118;
  wire       [3:0]    _zz_119;
  wire       [0:0]    _zz_120;
  wire       [3:0]    _zz_121;
  wire       [0:0]    _zz_122;
  wire       [3:0]    _zz_123;
  wire       [0:0]    _zz_124;
  wire       [3:0]    _zz_125;
  wire       [0:0]    _zz_126;
  wire       [3:0]    _zz_127;
  wire       [0:0]    _zz_128;
  wire       [3:0]    _zz_129;
  wire       [0:0]    _zz_130;
  wire       [3:0]    _zz_131;
  wire       [0:0]    _zz_132;
  wire       [3:0]    _zz_133;
  wire       [0:0]    _zz_134;
  wire       [3:0]    _zz_135;
  wire       [0:0]    _zz_136;
  wire       [3:0]    _zz_137;
  wire       [0:0]    _zz_138;
  wire       [3:0]    _zz_139;
  wire       [0:0]    _zz_140;
  wire       [3:0]    _zz_141;
  wire       [0:0]    _zz_142;
  wire       [3:0]    _zz_143;
  wire       [0:0]    _zz_144;
  wire       [3:0]    _zz_145;
  wire       [0:0]    _zz_146;
  wire       [3:0]    _zz_147;
  wire       [0:0]    _zz_148;
  wire       [3:0]    _zz_149;
  wire       [0:0]    _zz_150;
  wire       [3:0]    _zz_151;
  wire       [0:0]    _zz_152;
  wire       [3:0]    _zz_153;
  wire       [0:0]    _zz_154;
  wire       [3:0]    _zz_155;
  wire       [0:0]    _zz_156;
  wire       [3:0]    _zz_157;
  wire       [0:0]    _zz_158;
  wire       [3:0]    _zz_159;
  wire       [0:0]    _zz_160;
  wire       [3:0]    _zz_161;
  wire       [0:0]    _zz_162;
  wire       [3:0]    _zz_163;
  wire       [0:0]    _zz_164;
  wire       [3:0]    _zz_165;
  wire       [0:0]    _zz_166;
  wire       [3:0]    _zz_167;
  wire       [0:0]    _zz_168;
  wire       [3:0]    _zz_169;
  wire       [0:0]    _zz_170;
  wire       [3:0]    _zz_171;
  wire       [0:0]    _zz_172;
  wire       [3:0]    _zz_173;
  wire       [0:0]    _zz_174;
  wire       [3:0]    _zz_175;
  wire       [0:0]    _zz_176;
  wire       [3:0]    _zz_177;
  wire       [0:0]    _zz_178;
  wire       [3:0]    _zz_179;
  wire       [0:0]    _zz_180;
  wire       [3:0]    _zz_181;
  wire       [0:0]    _zz_182;
  wire       [3:0]    _zz_183;
  wire       [0:0]    _zz_184;
  wire       [3:0]    _zz_185;
  wire       [0:0]    _zz_186;
  wire       [3:0]    _zz_187;
  wire       [0:0]    _zz_188;
  wire       [3:0]    _zz_189;
  wire       [0:0]    _zz_190;
  wire       [3:0]    _zz_191;
  wire       [0:0]    _zz_192;
  wire       [3:0]    _zz_193;
  wire       [0:0]    _zz_194;
  wire       [3:0]    _zz_195;
  wire       [5:0]    _zz_196;
  wire       [5:0]    _zz_197;
  wire       [0:0]    _zz_198;
  wire       [5:0]    _zz_199;
  wire       [1:0]    _zz_200;
  wire       [0:0]    _zz_201;
  wire       [1:0]    _zz_202;
  wire       [3:0]    _zz_203;
  wire       [4:0]    _zz_204;
  wire       [9:0]    _zz_205;
  wire       [4:0]    _zz_206;
  wire       [9:0]    _zz_207;
  wire       [12:0]   _zz_208;
  reg                 _zz_1;
  reg                 readyForRefresh;
  reg        [6:0]    RFC_value = 7'b0000000;
  wire                RFC_notZero;
  wire                RFC_busy;
  reg        [3:0]    RRD_value = 4'b0000;
  wire                RRD_notZero;
  wire                RRD_busy;
  reg        [3:0]    WTR_value = 4'b0000;
  wire                WTR_notZero;
  wire                WTR_busy;
  reg        [3:0]    RTW_value = 4'b0000;
  wire                RTW_notZero;
  wire                RTW_busy;
  reg        [3:0]    RP_value = 4'b0000;
  wire                RP_notZero;
  wire                RP_busy;
  wire                FAW_trigger;
  reg        [1:0]    FAW_ptr;
  reg        [3:0]    FAW_slots_0_value = 4'b0000;
  wire                FAW_slots_0_notZero;
  wire                FAW_slots_0_busy;
  reg        [3:0]    FAW_slots_1_value = 4'b0000;
  wire                FAW_slots_1_notZero;
  wire                FAW_slots_1_busy;
  reg        [3:0]    FAW_slots_2_value = 4'b0000;
  wire                FAW_slots_2_notZero;
  wire                FAW_slots_2_busy;
  reg        [3:0]    FAW_slots_3_value = 4'b0000;
  wire                FAW_slots_3_notZero;
  wire                FAW_slots_3_busy;
  wire                FAW_busyNext;
  reg        [1:0]    banks_0_hits;
  reg                 banks_0_activeNext;
  reg                 banks_0_active;
  reg        [1:0]    _zz_2;
  reg        [1:0]    _zz_3;
  reg        [1:0]    _zz_4;
  reg        [3:0]    banks_0_WR_value = 4'b0000;
  wire                banks_0_WR_notZero;
  wire                banks_0_WR_busy;
  reg        [1:0]    _zz_5;
  reg        [3:0]    banks_0_RAS_value = 4'b0000;
  wire                banks_0_RAS_notZero;
  wire                banks_0_RAS_busy;
  reg        [1:0]    _zz_6;
  reg        [3:0]    banks_0_RP_value = 4'b0000;
  wire                banks_0_RP_notZero;
  wire                banks_0_RP_busy;
  reg        [1:0]    _zz_7;
  reg        [3:0]    banks_0_RCD_value = 4'b0000;
  wire                banks_0_RCD_notZero;
  wire                banks_0_RCD_busy;
  reg        [1:0]    _zz_8;
  reg        [3:0]    banks_0_RTP_value = 4'b0000;
  wire                banks_0_RTP_notZero;
  wire                banks_0_RTP_busy;
  wire                banks_0_allowPrecharge;
  wire                banks_0_allowActive;
  wire                banks_0_allowWrite;
  wire                banks_0_allowRead;
  reg        [1:0]    banks_1_hits;
  reg                 banks_1_activeNext;
  reg                 banks_1_active;
  reg        [1:0]    _zz_9;
  reg        [1:0]    _zz_10;
  reg        [1:0]    _zz_11;
  reg        [3:0]    banks_1_WR_value = 4'b0000;
  wire                banks_1_WR_notZero;
  wire                banks_1_WR_busy;
  reg        [1:0]    _zz_12;
  reg        [3:0]    banks_1_RAS_value = 4'b0000;
  wire                banks_1_RAS_notZero;
  wire                banks_1_RAS_busy;
  reg        [1:0]    _zz_13;
  reg        [3:0]    banks_1_RP_value = 4'b0000;
  wire                banks_1_RP_notZero;
  wire                banks_1_RP_busy;
  reg        [1:0]    _zz_14;
  reg        [3:0]    banks_1_RCD_value = 4'b0000;
  wire                banks_1_RCD_notZero;
  wire                banks_1_RCD_busy;
  reg        [1:0]    _zz_15;
  reg        [3:0]    banks_1_RTP_value = 4'b0000;
  wire                banks_1_RTP_notZero;
  wire                banks_1_RTP_busy;
  wire                banks_1_allowPrecharge;
  wire                banks_1_allowActive;
  wire                banks_1_allowWrite;
  wire                banks_1_allowRead;
  reg        [1:0]    banks_2_hits;
  reg                 banks_2_activeNext;
  reg                 banks_2_active;
  reg        [1:0]    _zz_16;
  reg        [1:0]    _zz_17;
  reg        [1:0]    _zz_18;
  reg        [3:0]    banks_2_WR_value = 4'b0000;
  wire                banks_2_WR_notZero;
  wire                banks_2_WR_busy;
  reg        [1:0]    _zz_19;
  reg        [3:0]    banks_2_RAS_value = 4'b0000;
  wire                banks_2_RAS_notZero;
  wire                banks_2_RAS_busy;
  reg        [1:0]    _zz_20;
  reg        [3:0]    banks_2_RP_value = 4'b0000;
  wire                banks_2_RP_notZero;
  wire                banks_2_RP_busy;
  reg        [1:0]    _zz_21;
  reg        [3:0]    banks_2_RCD_value = 4'b0000;
  wire                banks_2_RCD_notZero;
  wire                banks_2_RCD_busy;
  reg        [1:0]    _zz_22;
  reg        [3:0]    banks_2_RTP_value = 4'b0000;
  wire                banks_2_RTP_notZero;
  wire                banks_2_RTP_busy;
  wire                banks_2_allowPrecharge;
  wire                banks_2_allowActive;
  wire                banks_2_allowWrite;
  wire                banks_2_allowRead;
  reg        [1:0]    banks_3_hits;
  reg                 banks_3_activeNext;
  reg                 banks_3_active;
  reg        [1:0]    _zz_23;
  reg        [1:0]    _zz_24;
  reg        [1:0]    _zz_25;
  reg        [3:0]    banks_3_WR_value = 4'b0000;
  wire                banks_3_WR_notZero;
  wire                banks_3_WR_busy;
  reg        [1:0]    _zz_26;
  reg        [3:0]    banks_3_RAS_value = 4'b0000;
  wire                banks_3_RAS_notZero;
  wire                banks_3_RAS_busy;
  reg        [1:0]    _zz_27;
  reg        [3:0]    banks_3_RP_value = 4'b0000;
  wire                banks_3_RP_notZero;
  wire                banks_3_RP_busy;
  reg        [1:0]    _zz_28;
  reg        [3:0]    banks_3_RCD_value = 4'b0000;
  wire                banks_3_RCD_notZero;
  wire                banks_3_RCD_busy;
  reg        [1:0]    _zz_29;
  reg        [3:0]    banks_3_RTP_value = 4'b0000;
  wire                banks_3_RTP_notZero;
  wire                banks_3_RTP_busy;
  wire                banks_3_allowPrecharge;
  wire                banks_3_allowActive;
  wire                banks_3_allowWrite;
  wire                banks_3_allowRead;
  reg        [1:0]    banks_4_hits;
  reg                 banks_4_activeNext;
  reg                 banks_4_active;
  reg        [1:0]    _zz_30;
  reg        [1:0]    _zz_31;
  reg        [1:0]    _zz_32;
  reg        [3:0]    banks_4_WR_value = 4'b0000;
  wire                banks_4_WR_notZero;
  wire                banks_4_WR_busy;
  reg        [1:0]    _zz_33;
  reg        [3:0]    banks_4_RAS_value = 4'b0000;
  wire                banks_4_RAS_notZero;
  wire                banks_4_RAS_busy;
  reg        [1:0]    _zz_34;
  reg        [3:0]    banks_4_RP_value = 4'b0000;
  wire                banks_4_RP_notZero;
  wire                banks_4_RP_busy;
  reg        [1:0]    _zz_35;
  reg        [3:0]    banks_4_RCD_value = 4'b0000;
  wire                banks_4_RCD_notZero;
  wire                banks_4_RCD_busy;
  reg        [1:0]    _zz_36;
  reg        [3:0]    banks_4_RTP_value = 4'b0000;
  wire                banks_4_RTP_notZero;
  wire                banks_4_RTP_busy;
  wire                banks_4_allowPrecharge;
  wire                banks_4_allowActive;
  wire                banks_4_allowWrite;
  wire                banks_4_allowRead;
  reg        [1:0]    banks_5_hits;
  reg                 banks_5_activeNext;
  reg                 banks_5_active;
  reg        [1:0]    _zz_37;
  reg        [1:0]    _zz_38;
  reg        [1:0]    _zz_39;
  reg        [3:0]    banks_5_WR_value = 4'b0000;
  wire                banks_5_WR_notZero;
  wire                banks_5_WR_busy;
  reg        [1:0]    _zz_40;
  reg        [3:0]    banks_5_RAS_value = 4'b0000;
  wire                banks_5_RAS_notZero;
  wire                banks_5_RAS_busy;
  reg        [1:0]    _zz_41;
  reg        [3:0]    banks_5_RP_value = 4'b0000;
  wire                banks_5_RP_notZero;
  wire                banks_5_RP_busy;
  reg        [1:0]    _zz_42;
  reg        [3:0]    banks_5_RCD_value = 4'b0000;
  wire                banks_5_RCD_notZero;
  wire                banks_5_RCD_busy;
  reg        [1:0]    _zz_43;
  reg        [3:0]    banks_5_RTP_value = 4'b0000;
  wire                banks_5_RTP_notZero;
  wire                banks_5_RTP_busy;
  wire                banks_5_allowPrecharge;
  wire                banks_5_allowActive;
  wire                banks_5_allowWrite;
  wire                banks_5_allowRead;
  reg        [1:0]    banks_6_hits;
  reg                 banks_6_activeNext;
  reg                 banks_6_active;
  reg        [1:0]    _zz_44;
  reg        [1:0]    _zz_45;
  reg        [1:0]    _zz_46;
  reg        [3:0]    banks_6_WR_value = 4'b0000;
  wire                banks_6_WR_notZero;
  wire                banks_6_WR_busy;
  reg        [1:0]    _zz_47;
  reg        [3:0]    banks_6_RAS_value = 4'b0000;
  wire                banks_6_RAS_notZero;
  wire                banks_6_RAS_busy;
  reg        [1:0]    _zz_48;
  reg        [3:0]    banks_6_RP_value = 4'b0000;
  wire                banks_6_RP_notZero;
  wire                banks_6_RP_busy;
  reg        [1:0]    _zz_49;
  reg        [3:0]    banks_6_RCD_value = 4'b0000;
  wire                banks_6_RCD_notZero;
  wire                banks_6_RCD_busy;
  reg        [1:0]    _zz_50;
  reg        [3:0]    banks_6_RTP_value = 4'b0000;
  wire                banks_6_RTP_notZero;
  wire                banks_6_RTP_busy;
  wire                banks_6_allowPrecharge;
  wire                banks_6_allowActive;
  wire                banks_6_allowWrite;
  wire                banks_6_allowRead;
  reg        [1:0]    banks_7_hits;
  reg                 banks_7_activeNext;
  reg                 banks_7_active;
  reg        [1:0]    _zz_51;
  reg        [1:0]    _zz_52;
  reg        [1:0]    _zz_53;
  reg        [3:0]    banks_7_WR_value = 4'b0000;
  wire                banks_7_WR_notZero;
  wire                banks_7_WR_busy;
  reg        [1:0]    _zz_54;
  reg        [3:0]    banks_7_RAS_value = 4'b0000;
  wire                banks_7_RAS_notZero;
  wire                banks_7_RAS_busy;
  reg        [1:0]    _zz_55;
  reg        [3:0]    banks_7_RP_value = 4'b0000;
  wire                banks_7_RP_notZero;
  wire                banks_7_RP_busy;
  reg        [1:0]    _zz_56;
  reg        [3:0]    banks_7_RCD_value = 4'b0000;
  wire                banks_7_RCD_notZero;
  wire                banks_7_RCD_busy;
  reg        [1:0]    _zz_57;
  reg        [3:0]    banks_7_RTP_value = 4'b0000;
  wire                banks_7_RTP_notZero;
  wire                banks_7_RTP_busy;
  wire                banks_7_allowPrecharge;
  wire                banks_7_allowActive;
  wire                banks_7_allowWrite;
  wire                banks_7_allowRead;
  wire                allowPrechargeAll;
  wire                writeTockens_0_consume;
  reg        [5:0]    writeTockens_0_counter;
  reg                 writeTockens_0_ready;
  wire                inputsArbiter_output_valid;
  wire                inputsArbiter_output_ready;
  wire                inputsArbiter_output_payload_write;
  wire       [26:0]   inputsArbiter_output_payload_address;
  wire       [11:0]   inputsArbiter_output_payload_context;
  wire                inputsArbiter_output_payload_burstLast;
  wire       [2:0]    inputsArbiter_output_payload_length;
  reg        [0:0]    inputsArbiter_state;
  wire       [0:0]    inputsArbiter_inputsValids;
  wire       [0:0]    _zz_58;
  wire       [1:0]    _zz_59;
  wire       [1:0]    _zz_60;
  wire       [0:0]    inputsArbiter_selOH;
  reg        [2:0]    inputsArbiter_tocken;
  wire                inputsArbiter_tockenIncrement;
  wire                _zz_61;
  wire                _zz_62;
  wire                inputsArbiter_selPayload_write;
  wire       [26:0]   inputsArbiter_selPayload_address;
  wire       [11:0]   inputsArbiter_selPayload_context;
  wire                inputsArbiter_selPayload_burstLast;
  wire       [2:0]    inputsArbiter_selPayload_length;
  wire       [0:0]    taskConstructor_s0_portAddress_byte;
  wire       [9:0]    taskConstructor_s0_portAddress_column;
  wire       [2:0]    taskConstructor_s0_portAddress_bank;
  wire       [12:0]   taskConstructor_s0_portAddress_row;
  wire       [26:0]   _zz_63;
  wire                taskConstructor_s1_input_valid;
  wire                taskConstructor_s1_input_ready;
  wire                taskConstructor_s1_input_payload_write;
  wire       [26:0]   taskConstructor_s1_input_payload_address;
  wire       [11:0]   taskConstructor_s1_input_payload_context;
  wire                taskConstructor_s1_input_payload_burstLast;
  wire       [2:0]    taskConstructor_s1_input_payload_length;
  reg                 inputsArbiter_output_m2sPipe_rValid;
  reg                 inputsArbiter_output_m2sPipe_rData_write;
  reg        [26:0]   inputsArbiter_output_m2sPipe_rData_address;
  reg        [11:0]   inputsArbiter_output_m2sPipe_rData_context;
  reg                 inputsArbiter_output_m2sPipe_rData_burstLast;
  reg        [2:0]    inputsArbiter_output_m2sPipe_rData_length;
  wire       [0:0]    taskConstructor_s1_address_byte;
  wire       [9:0]    taskConstructor_s1_address_column;
  wire       [2:0]    taskConstructor_s1_address_bank;
  wire       [12:0]   taskConstructor_s1_address_row;
  wire       [26:0]   _zz_64;
  reg                 taskConstructor_s1_status_bankActive;
  reg                 taskConstructor_s1_status_bankHit;
  reg                 taskConstructor_s1_status_allowPrecharge;
  reg                 taskConstructor_s1_status_allowActive;
  reg                 taskConstructor_s1_status_allowWrite;
  reg                 taskConstructor_s1_status_allowRead;
  reg                 stations_0_valid;
  reg                 stations_0_status_bankActive;
  reg                 stations_0_status_bankHit;
  reg                 stations_0_status_allowPrecharge;
  reg                 stations_0_status_allowActive;
  reg                 stations_0_status_allowWrite;
  reg                 stations_0_status_allowRead;
  reg        [0:0]    stations_0_address_byte;
  reg        [9:0]    stations_0_address_column;
  reg        [2:0]    stations_0_address_bank;
  reg        [12:0]   stations_0_address_row;
  reg                 stations_0_write;
  reg        [11:0]   stations_0_context;
  reg        [2:0]    stations_0_offset;
  reg        [2:0]    stations_0_offsetLast;
  reg        [1:0]    stations_0_stronger;
  reg        [1:0]    stations_0_afterBank;
  reg        [1:0]    stations_0_afterAccess;
  wire                stations_0_inputMiss;
  wire                stations_0_inputActive;
  wire                stations_0_inputPrecharge;
  wire                stations_0_inputAccess;
  wire                stations_0_inputWrite;
  wire                stations_0_inputRead;
  reg                 stations_0_inibated;
  wire                stations_0_doActive;
  wire                stations_0_doPrecharge;
  wire                stations_0_doWrite;
  wire                stations_0_doRead;
  wire                stations_0_doSomething;
  wire                stations_0_blockedByWriteTocken;
  wire                stations_0_sel;
  reg                 stations_0_fire;
  wire                stations_0_last;
  wire                stations_0_cmdOutputPayload_read;
  wire                stations_0_cmdOutputPayload_write;
  wire                stations_0_cmdOutputPayload_active;
  wire                stations_0_cmdOutputPayload_precharge;
  wire                stations_0_cmdOutputPayload_last;
  wire       [0:0]    stations_0_cmdOutputPayload_address_byte;
  wire       [9:0]    stations_0_cmdOutputPayload_address_column;
  wire       [2:0]    stations_0_cmdOutputPayload_address_bank;
  wire       [12:0]   stations_0_cmdOutputPayload_address_row;
  wire       [11:0]   stations_0_cmdOutputPayload_context;
  reg        [3:0]    stations_0_frustration_counter;
  reg                 stations_0_frustration_increment;
  wire                stations_0_frustration_full;
  reg                 stations_1_valid;
  reg                 stations_1_status_bankActive;
  reg                 stations_1_status_bankHit;
  reg                 stations_1_status_allowPrecharge;
  reg                 stations_1_status_allowActive;
  reg                 stations_1_status_allowWrite;
  reg                 stations_1_status_allowRead;
  reg        [0:0]    stations_1_address_byte;
  reg        [9:0]    stations_1_address_column;
  reg        [2:0]    stations_1_address_bank;
  reg        [12:0]   stations_1_address_row;
  reg                 stations_1_write;
  reg        [11:0]   stations_1_context;
  reg        [2:0]    stations_1_offset;
  reg        [2:0]    stations_1_offsetLast;
  reg        [1:0]    stations_1_stronger;
  reg        [1:0]    stations_1_afterBank;
  reg        [1:0]    stations_1_afterAccess;
  wire                stations_1_inputMiss;
  wire                stations_1_inputActive;
  wire                stations_1_inputPrecharge;
  wire                stations_1_inputAccess;
  wire                stations_1_inputWrite;
  wire                stations_1_inputRead;
  reg                 stations_1_inibated;
  wire                stations_1_doActive;
  wire                stations_1_doPrecharge;
  wire                stations_1_doWrite;
  wire                stations_1_doRead;
  wire                stations_1_doSomething;
  wire                stations_1_blockedByWriteTocken;
  wire                stations_1_sel;
  reg                 stations_1_fire;
  wire                stations_1_last;
  wire                stations_1_cmdOutputPayload_read;
  wire                stations_1_cmdOutputPayload_write;
  wire                stations_1_cmdOutputPayload_active;
  wire                stations_1_cmdOutputPayload_precharge;
  wire                stations_1_cmdOutputPayload_last;
  wire       [0:0]    stations_1_cmdOutputPayload_address_byte;
  wire       [9:0]    stations_1_cmdOutputPayload_address_column;
  wire       [2:0]    stations_1_cmdOutputPayload_address_bank;
  wire       [12:0]   stations_1_cmdOutputPayload_address_row;
  wire       [11:0]   stations_1_cmdOutputPayload_context;
  reg        [3:0]    stations_1_frustration_counter;
  reg                 stations_1_frustration_increment;
  wire                stations_1_frustration_full;
  reg        [1:0]    loader_stationsValid;
  wire       [1:0]    loader_stronger;
  reg        [1:0]    _zz_65;
  wire       [1:0]    loader_afterBank;
  reg        [1:0]    _zz_66;
  wire       [1:0]    loader_afterAccess;
  wire       [2:0]    loader_offset;
  wire       [2:0]    loader_offsetLast;
  wire                loader_slot_0_canSpawn;
  wire       [0:0]    _zz_67;
  wire                loader_slot_1_canSpawn;
  reg        [1:0]    arbiter_selOH;
  reg        [1:0]    _zz_68;
  wire       [1:0]    arbiter_logic_0_othersDoSomething;
  reg        [1:0]    _zz_69;
  wire       [1:0]    arbiter_logic_1_othersDoSomething;
  wire                _zz_70;
  wire                arbiter_askRefresh;
  reg        [1:0]    arbiter_refreshState;
  reg                 allowPrechargeAll_regNext;
  wire       [0:0]    selectedAddress_byte;
  wire       [9:0]    selectedAddress_column;
  wire       [2:0]    selectedAddress_bank;
  wire       [12:0]   selectedAddress_row;
  (* ram_style = "distributed" *) reg [12:0] banksRow [0:7];

  assign _zz_86 = (io_output_ports_0_address_bank == taskConstructor_s1_address_bank);
  assign _zz_87 = (io_output_ports_1_address_bank == taskConstructor_s1_address_bank);
  assign _zz_88 = (stations_0_sel && stations_0_inputAccess);
  assign _zz_89 = (stations_1_sel && stations_1_inputAccess);
  assign _zz_90 = (! RFC_busy);
  assign _zz_91 = (! RP_busy);
  assign _zz_92 = (taskConstructor_s1_input_valid && loader_slot_0_canSpawn);
  assign _zz_93 = (taskConstructor_s1_input_valid && loader_slot_1_canSpawn);
  assign _zz_94 = RFC_notZero;
  assign _zz_95 = {6'd0, _zz_94};
  assign _zz_96 = RRD_notZero;
  assign _zz_97 = {3'd0, _zz_96};
  assign _zz_98 = WTR_notZero;
  assign _zz_99 = {3'd0, _zz_98};
  assign _zz_100 = RTW_notZero;
  assign _zz_101 = {3'd0, _zz_100};
  assign _zz_102 = (io_config_RP + 4'b0001);
  assign _zz_103 = RP_notZero;
  assign _zz_104 = {3'd0, _zz_103};
  assign _zz_105 = FAW_slots_0_notZero;
  assign _zz_106 = {3'd0, _zz_105};
  assign _zz_107 = FAW_slots_1_notZero;
  assign _zz_108 = {3'd0, _zz_107};
  assign _zz_109 = FAW_slots_2_notZero;
  assign _zz_110 = {3'd0, _zz_109};
  assign _zz_111 = FAW_slots_3_notZero;
  assign _zz_112 = {3'd0, _zz_111};
  assign _zz_113 = (FAW_ptr + 2'b01);
  assign _zz_114 = FAW_trigger;
  assign _zz_115 = {1'd0, _zz_114};
  assign _zz_116 = banks_0_WR_notZero;
  assign _zz_117 = {3'd0, _zz_116};
  assign _zz_118 = banks_0_RAS_notZero;
  assign _zz_119 = {3'd0, _zz_118};
  assign _zz_120 = banks_0_RP_notZero;
  assign _zz_121 = {3'd0, _zz_120};
  assign _zz_122 = banks_0_RCD_notZero;
  assign _zz_123 = {3'd0, _zz_122};
  assign _zz_124 = banks_0_RTP_notZero;
  assign _zz_125 = {3'd0, _zz_124};
  assign _zz_126 = banks_1_WR_notZero;
  assign _zz_127 = {3'd0, _zz_126};
  assign _zz_128 = banks_1_RAS_notZero;
  assign _zz_129 = {3'd0, _zz_128};
  assign _zz_130 = banks_1_RP_notZero;
  assign _zz_131 = {3'd0, _zz_130};
  assign _zz_132 = banks_1_RCD_notZero;
  assign _zz_133 = {3'd0, _zz_132};
  assign _zz_134 = banks_1_RTP_notZero;
  assign _zz_135 = {3'd0, _zz_134};
  assign _zz_136 = banks_2_WR_notZero;
  assign _zz_137 = {3'd0, _zz_136};
  assign _zz_138 = banks_2_RAS_notZero;
  assign _zz_139 = {3'd0, _zz_138};
  assign _zz_140 = banks_2_RP_notZero;
  assign _zz_141 = {3'd0, _zz_140};
  assign _zz_142 = banks_2_RCD_notZero;
  assign _zz_143 = {3'd0, _zz_142};
  assign _zz_144 = banks_2_RTP_notZero;
  assign _zz_145 = {3'd0, _zz_144};
  assign _zz_146 = banks_3_WR_notZero;
  assign _zz_147 = {3'd0, _zz_146};
  assign _zz_148 = banks_3_RAS_notZero;
  assign _zz_149 = {3'd0, _zz_148};
  assign _zz_150 = banks_3_RP_notZero;
  assign _zz_151 = {3'd0, _zz_150};
  assign _zz_152 = banks_3_RCD_notZero;
  assign _zz_153 = {3'd0, _zz_152};
  assign _zz_154 = banks_3_RTP_notZero;
  assign _zz_155 = {3'd0, _zz_154};
  assign _zz_156 = banks_4_WR_notZero;
  assign _zz_157 = {3'd0, _zz_156};
  assign _zz_158 = banks_4_RAS_notZero;
  assign _zz_159 = {3'd0, _zz_158};
  assign _zz_160 = banks_4_RP_notZero;
  assign _zz_161 = {3'd0, _zz_160};
  assign _zz_162 = banks_4_RCD_notZero;
  assign _zz_163 = {3'd0, _zz_162};
  assign _zz_164 = banks_4_RTP_notZero;
  assign _zz_165 = {3'd0, _zz_164};
  assign _zz_166 = banks_5_WR_notZero;
  assign _zz_167 = {3'd0, _zz_166};
  assign _zz_168 = banks_5_RAS_notZero;
  assign _zz_169 = {3'd0, _zz_168};
  assign _zz_170 = banks_5_RP_notZero;
  assign _zz_171 = {3'd0, _zz_170};
  assign _zz_172 = banks_5_RCD_notZero;
  assign _zz_173 = {3'd0, _zz_172};
  assign _zz_174 = banks_5_RTP_notZero;
  assign _zz_175 = {3'd0, _zz_174};
  assign _zz_176 = banks_6_WR_notZero;
  assign _zz_177 = {3'd0, _zz_176};
  assign _zz_178 = banks_6_RAS_notZero;
  assign _zz_179 = {3'd0, _zz_178};
  assign _zz_180 = banks_6_RP_notZero;
  assign _zz_181 = {3'd0, _zz_180};
  assign _zz_182 = banks_6_RCD_notZero;
  assign _zz_183 = {3'd0, _zz_182};
  assign _zz_184 = banks_6_RTP_notZero;
  assign _zz_185 = {3'd0, _zz_184};
  assign _zz_186 = banks_7_WR_notZero;
  assign _zz_187 = {3'd0, _zz_186};
  assign _zz_188 = banks_7_RAS_notZero;
  assign _zz_189 = {3'd0, _zz_188};
  assign _zz_190 = banks_7_RP_notZero;
  assign _zz_191 = {3'd0, _zz_190};
  assign _zz_192 = banks_7_RCD_notZero;
  assign _zz_193 = {3'd0, _zz_192};
  assign _zz_194 = banks_7_RTP_notZero;
  assign _zz_195 = {3'd0, _zz_194};
  assign _zz_196 = (writeTockens_0_counter + _zz_197);
  assign _zz_197 = {5'd0, io_writeDataTockens_0};
  assign _zz_198 = writeTockens_0_consume;
  assign _zz_199 = {5'd0, _zz_198};
  assign _zz_200 = (_zz_59 - _zz_202);
  assign _zz_201 = inputsArbiter_state;
  assign _zz_202 = {1'd0, _zz_201};
  assign _zz_203 = {1'd0, inputsArbiter_tocken};
  assign _zz_204 = ({2'd0,stations_0_offset} <<< 2);
  assign _zz_205 = {5'd0, _zz_204};
  assign _zz_206 = ({2'd0,stations_1_offset} <<< 2);
  assign _zz_207 = {5'd0, _zz_206};
  assign _zz_208 = selectedAddress_row;
  assign _zz_71 = banksRow[taskConstructor_s1_address_bank];
  always @ (posedge CLKOUT1) begin
    if(_zz_1) begin
      banksRow[selectedAddress_bank] <= _zz_208;
    end
  end

  always @(*) begin
    case(_zz_113)
      2'b00 : begin
        _zz_72 = FAW_slots_0_busy;
      end
      2'b01 : begin
        _zz_72 = FAW_slots_1_busy;
      end
      2'b10 : begin
        _zz_72 = FAW_slots_2_busy;
      end
      default : begin
        _zz_72 = FAW_slots_3_busy;
      end
    endcase
  end

  always @(*) begin
    case(taskConstructor_s1_address_bank)
      3'b000 : begin
        _zz_73 = banks_0_active;
        _zz_74 = banks_0_allowPrecharge;
        _zz_75 = banks_0_allowActive;
        _zz_76 = banks_0_allowWrite;
        _zz_77 = banks_0_allowRead;
      end
      3'b001 : begin
        _zz_73 = banks_1_active;
        _zz_74 = banks_1_allowPrecharge;
        _zz_75 = banks_1_allowActive;
        _zz_76 = banks_1_allowWrite;
        _zz_77 = banks_1_allowRead;
      end
      3'b010 : begin
        _zz_73 = banks_2_active;
        _zz_74 = banks_2_allowPrecharge;
        _zz_75 = banks_2_allowActive;
        _zz_76 = banks_2_allowWrite;
        _zz_77 = banks_2_allowRead;
      end
      3'b011 : begin
        _zz_73 = banks_3_active;
        _zz_74 = banks_3_allowPrecharge;
        _zz_75 = banks_3_allowActive;
        _zz_76 = banks_3_allowWrite;
        _zz_77 = banks_3_allowRead;
      end
      3'b100 : begin
        _zz_73 = banks_4_active;
        _zz_74 = banks_4_allowPrecharge;
        _zz_75 = banks_4_allowActive;
        _zz_76 = banks_4_allowWrite;
        _zz_77 = banks_4_allowRead;
      end
      3'b101 : begin
        _zz_73 = banks_5_active;
        _zz_74 = banks_5_allowPrecharge;
        _zz_75 = banks_5_allowActive;
        _zz_76 = banks_5_allowWrite;
        _zz_77 = banks_5_allowRead;
      end
      3'b110 : begin
        _zz_73 = banks_6_active;
        _zz_74 = banks_6_allowPrecharge;
        _zz_75 = banks_6_allowActive;
        _zz_76 = banks_6_allowWrite;
        _zz_77 = banks_6_allowRead;
      end
      default : begin
        _zz_73 = banks_7_active;
        _zz_74 = banks_7_allowPrecharge;
        _zz_75 = banks_7_allowActive;
        _zz_76 = banks_7_allowWrite;
        _zz_77 = banks_7_allowRead;
      end
    endcase
  end

  always @(*) begin
    case(stations_0_address_bank)
      3'b000 : begin
        _zz_78 = banks_0_allowPrecharge;
        _zz_79 = banks_0_allowActive;
        _zz_80 = banks_0_allowWrite;
        _zz_81 = banks_0_allowRead;
      end
      3'b001 : begin
        _zz_78 = banks_1_allowPrecharge;
        _zz_79 = banks_1_allowActive;
        _zz_80 = banks_1_allowWrite;
        _zz_81 = banks_1_allowRead;
      end
      3'b010 : begin
        _zz_78 = banks_2_allowPrecharge;
        _zz_79 = banks_2_allowActive;
        _zz_80 = banks_2_allowWrite;
        _zz_81 = banks_2_allowRead;
      end
      3'b011 : begin
        _zz_78 = banks_3_allowPrecharge;
        _zz_79 = banks_3_allowActive;
        _zz_80 = banks_3_allowWrite;
        _zz_81 = banks_3_allowRead;
      end
      3'b100 : begin
        _zz_78 = banks_4_allowPrecharge;
        _zz_79 = banks_4_allowActive;
        _zz_80 = banks_4_allowWrite;
        _zz_81 = banks_4_allowRead;
      end
      3'b101 : begin
        _zz_78 = banks_5_allowPrecharge;
        _zz_79 = banks_5_allowActive;
        _zz_80 = banks_5_allowWrite;
        _zz_81 = banks_5_allowRead;
      end
      3'b110 : begin
        _zz_78 = banks_6_allowPrecharge;
        _zz_79 = banks_6_allowActive;
        _zz_80 = banks_6_allowWrite;
        _zz_81 = banks_6_allowRead;
      end
      default : begin
        _zz_78 = banks_7_allowPrecharge;
        _zz_79 = banks_7_allowActive;
        _zz_80 = banks_7_allowWrite;
        _zz_81 = banks_7_allowRead;
      end
    endcase
  end

  always @(*) begin
    case(stations_1_address_bank)
      3'b000 : begin
        _zz_82 = banks_0_allowPrecharge;
        _zz_83 = banks_0_allowActive;
        _zz_84 = banks_0_allowWrite;
        _zz_85 = banks_0_allowRead;
      end
      3'b001 : begin
        _zz_82 = banks_1_allowPrecharge;
        _zz_83 = banks_1_allowActive;
        _zz_84 = banks_1_allowWrite;
        _zz_85 = banks_1_allowRead;
      end
      3'b010 : begin
        _zz_82 = banks_2_allowPrecharge;
        _zz_83 = banks_2_allowActive;
        _zz_84 = banks_2_allowWrite;
        _zz_85 = banks_2_allowRead;
      end
      3'b011 : begin
        _zz_82 = banks_3_allowPrecharge;
        _zz_83 = banks_3_allowActive;
        _zz_84 = banks_3_allowWrite;
        _zz_85 = banks_3_allowRead;
      end
      3'b100 : begin
        _zz_82 = banks_4_allowPrecharge;
        _zz_83 = banks_4_allowActive;
        _zz_84 = banks_4_allowWrite;
        _zz_85 = banks_4_allowRead;
      end
      3'b101 : begin
        _zz_82 = banks_5_allowPrecharge;
        _zz_83 = banks_5_allowActive;
        _zz_84 = banks_5_allowWrite;
        _zz_85 = banks_5_allowRead;
      end
      3'b110 : begin
        _zz_82 = banks_6_allowPrecharge;
        _zz_83 = banks_6_allowActive;
        _zz_84 = banks_6_allowWrite;
        _zz_85 = banks_6_allowRead;
      end
      default : begin
        _zz_82 = banks_7_allowPrecharge;
        _zz_83 = banks_7_allowActive;
        _zz_84 = banks_7_allowWrite;
        _zz_85 = banks_7_allowRead;
      end
    endcase
  end

  always @ (*) begin
    _zz_1 = 1'b0;
    if((arbiter_selOH != 2'b00))begin
      _zz_1 = 1'b1;
    end
  end

  always @ (*) begin
    readyForRefresh = 1'b1;
    if((inputsArbiter_inputsValids != 1'b0))begin
      readyForRefresh = 1'b0;
    end
    if(taskConstructor_s1_input_valid)begin
      readyForRefresh = 1'b0;
    end
    if(stations_0_valid)begin
      readyForRefresh = 1'b0;
    end
    if(stations_1_valid)begin
      readyForRefresh = 1'b0;
    end
  end

  assign RFC_notZero = (RFC_value != io_config_RFC);
  assign RFC_busy = RFC_notZero;
  assign RRD_notZero = (RRD_value != io_config_RRD);
  assign RRD_busy = RRD_notZero;
  assign WTR_notZero = (WTR_value != io_config_WTR);
  assign WTR_busy = WTR_notZero;
  assign RTW_notZero = (RTW_value != io_config_RTW);
  assign RTW_busy = RTW_notZero;
  assign RP_notZero = (RP_value != _zz_102);
  assign RP_busy = RP_notZero;
  assign FAW_trigger = ({io_output_ports_1_active,io_output_ports_0_active} != 2'b00);
  assign FAW_slots_0_notZero = (FAW_slots_0_value != io_config_FAW);
  assign FAW_slots_0_busy = FAW_slots_0_notZero;
  assign FAW_slots_1_notZero = (FAW_slots_1_value != io_config_FAW);
  assign FAW_slots_1_busy = FAW_slots_1_notZero;
  assign FAW_slots_2_notZero = (FAW_slots_2_value != io_config_FAW);
  assign FAW_slots_2_busy = FAW_slots_2_notZero;
  assign FAW_slots_3_notZero = (FAW_slots_3_value != io_config_FAW);
  assign FAW_slots_3_busy = FAW_slots_3_notZero;
  assign FAW_busyNext = _zz_72;
  always @ (*) begin
    banks_0_hits[0] = (io_output_ports_0_address_bank == 3'b000);
    banks_0_hits[1] = (io_output_ports_1_address_bank == 3'b000);
  end

  always @ (*) begin
    banks_0_activeNext = banks_0_active;
    if((((banks_0_hits & _zz_2) != 2'b00) || io_output_prechargeAll))begin
      banks_0_activeNext = 1'b0;
    end
    if(((banks_0_hits & _zz_3) != 2'b00))begin
      banks_0_activeNext = 1'b1;
    end
  end

  always @ (*) begin
    _zz_2[0] = io_output_ports_0_precharge;
    _zz_2[1] = io_output_ports_1_precharge;
  end

  always @ (*) begin
    _zz_3[0] = io_output_ports_0_active;
    _zz_3[1] = io_output_ports_1_active;
  end

  always @ (*) begin
    _zz_4[0] = io_output_ports_0_write;
    _zz_4[1] = io_output_ports_1_write;
  end

  assign banks_0_WR_notZero = (banks_0_WR_value != io_config_WR);
  assign banks_0_WR_busy = banks_0_WR_notZero;
  always @ (*) begin
    _zz_5[0] = io_output_ports_0_active;
    _zz_5[1] = io_output_ports_1_active;
  end

  assign banks_0_RAS_notZero = (banks_0_RAS_value != io_config_RAS);
  assign banks_0_RAS_busy = banks_0_RAS_notZero;
  always @ (*) begin
    _zz_6[0] = io_output_ports_0_precharge;
    _zz_6[1] = io_output_ports_1_precharge;
  end

  assign banks_0_RP_notZero = (banks_0_RP_value != io_config_RP);
  assign banks_0_RP_busy = banks_0_RP_notZero;
  always @ (*) begin
    _zz_7[0] = io_output_ports_0_active;
    _zz_7[1] = io_output_ports_1_active;
  end

  assign banks_0_RCD_notZero = (banks_0_RCD_value != io_config_RCD);
  assign banks_0_RCD_busy = banks_0_RCD_notZero;
  always @ (*) begin
    _zz_8[0] = io_output_ports_0_read;
    _zz_8[1] = io_output_ports_1_read;
  end

  assign banks_0_RTP_notZero = (banks_0_RTP_value != io_config_RTP);
  assign banks_0_RTP_busy = banks_0_RTP_notZero;
  assign banks_0_allowPrecharge = (((! banks_0_WR_busy) && (! banks_0_RAS_busy)) && (! banks_0_RTP_busy));
  assign banks_0_allowActive = (! banks_0_RP_busy);
  assign banks_0_allowWrite = (! banks_0_RCD_busy);
  assign banks_0_allowRead = (! banks_0_RCD_busy);
  always @ (*) begin
    banks_1_hits[0] = (io_output_ports_0_address_bank == 3'b001);
    banks_1_hits[1] = (io_output_ports_1_address_bank == 3'b001);
  end

  always @ (*) begin
    banks_1_activeNext = banks_1_active;
    if((((banks_1_hits & _zz_9) != 2'b00) || io_output_prechargeAll))begin
      banks_1_activeNext = 1'b0;
    end
    if(((banks_1_hits & _zz_10) != 2'b00))begin
      banks_1_activeNext = 1'b1;
    end
  end

  always @ (*) begin
    _zz_9[0] = io_output_ports_0_precharge;
    _zz_9[1] = io_output_ports_1_precharge;
  end

  always @ (*) begin
    _zz_10[0] = io_output_ports_0_active;
    _zz_10[1] = io_output_ports_1_active;
  end

  always @ (*) begin
    _zz_11[0] = io_output_ports_0_write;
    _zz_11[1] = io_output_ports_1_write;
  end

  assign banks_1_WR_notZero = (banks_1_WR_value != io_config_WR);
  assign banks_1_WR_busy = banks_1_WR_notZero;
  always @ (*) begin
    _zz_12[0] = io_output_ports_0_active;
    _zz_12[1] = io_output_ports_1_active;
  end

  assign banks_1_RAS_notZero = (banks_1_RAS_value != io_config_RAS);
  assign banks_1_RAS_busy = banks_1_RAS_notZero;
  always @ (*) begin
    _zz_13[0] = io_output_ports_0_precharge;
    _zz_13[1] = io_output_ports_1_precharge;
  end

  assign banks_1_RP_notZero = (banks_1_RP_value != io_config_RP);
  assign banks_1_RP_busy = banks_1_RP_notZero;
  always @ (*) begin
    _zz_14[0] = io_output_ports_0_active;
    _zz_14[1] = io_output_ports_1_active;
  end

  assign banks_1_RCD_notZero = (banks_1_RCD_value != io_config_RCD);
  assign banks_1_RCD_busy = banks_1_RCD_notZero;
  always @ (*) begin
    _zz_15[0] = io_output_ports_0_read;
    _zz_15[1] = io_output_ports_1_read;
  end

  assign banks_1_RTP_notZero = (banks_1_RTP_value != io_config_RTP);
  assign banks_1_RTP_busy = banks_1_RTP_notZero;
  assign banks_1_allowPrecharge = (((! banks_1_WR_busy) && (! banks_1_RAS_busy)) && (! banks_1_RTP_busy));
  assign banks_1_allowActive = (! banks_1_RP_busy);
  assign banks_1_allowWrite = (! banks_1_RCD_busy);
  assign banks_1_allowRead = (! banks_1_RCD_busy);
  always @ (*) begin
    banks_2_hits[0] = (io_output_ports_0_address_bank == 3'b010);
    banks_2_hits[1] = (io_output_ports_1_address_bank == 3'b010);
  end

  always @ (*) begin
    banks_2_activeNext = banks_2_active;
    if((((banks_2_hits & _zz_16) != 2'b00) || io_output_prechargeAll))begin
      banks_2_activeNext = 1'b0;
    end
    if(((banks_2_hits & _zz_17) != 2'b00))begin
      banks_2_activeNext = 1'b1;
    end
  end

  always @ (*) begin
    _zz_16[0] = io_output_ports_0_precharge;
    _zz_16[1] = io_output_ports_1_precharge;
  end

  always @ (*) begin
    _zz_17[0] = io_output_ports_0_active;
    _zz_17[1] = io_output_ports_1_active;
  end

  always @ (*) begin
    _zz_18[0] = io_output_ports_0_write;
    _zz_18[1] = io_output_ports_1_write;
  end

  assign banks_2_WR_notZero = (banks_2_WR_value != io_config_WR);
  assign banks_2_WR_busy = banks_2_WR_notZero;
  always @ (*) begin
    _zz_19[0] = io_output_ports_0_active;
    _zz_19[1] = io_output_ports_1_active;
  end

  assign banks_2_RAS_notZero = (banks_2_RAS_value != io_config_RAS);
  assign banks_2_RAS_busy = banks_2_RAS_notZero;
  always @ (*) begin
    _zz_20[0] = io_output_ports_0_precharge;
    _zz_20[1] = io_output_ports_1_precharge;
  end

  assign banks_2_RP_notZero = (banks_2_RP_value != io_config_RP);
  assign banks_2_RP_busy = banks_2_RP_notZero;
  always @ (*) begin
    _zz_21[0] = io_output_ports_0_active;
    _zz_21[1] = io_output_ports_1_active;
  end

  assign banks_2_RCD_notZero = (banks_2_RCD_value != io_config_RCD);
  assign banks_2_RCD_busy = banks_2_RCD_notZero;
  always @ (*) begin
    _zz_22[0] = io_output_ports_0_read;
    _zz_22[1] = io_output_ports_1_read;
  end

  assign banks_2_RTP_notZero = (banks_2_RTP_value != io_config_RTP);
  assign banks_2_RTP_busy = banks_2_RTP_notZero;
  assign banks_2_allowPrecharge = (((! banks_2_WR_busy) && (! banks_2_RAS_busy)) && (! banks_2_RTP_busy));
  assign banks_2_allowActive = (! banks_2_RP_busy);
  assign banks_2_allowWrite = (! banks_2_RCD_busy);
  assign banks_2_allowRead = (! banks_2_RCD_busy);
  always @ (*) begin
    banks_3_hits[0] = (io_output_ports_0_address_bank == 3'b011);
    banks_3_hits[1] = (io_output_ports_1_address_bank == 3'b011);
  end

  always @ (*) begin
    banks_3_activeNext = banks_3_active;
    if((((banks_3_hits & _zz_23) != 2'b00) || io_output_prechargeAll))begin
      banks_3_activeNext = 1'b0;
    end
    if(((banks_3_hits & _zz_24) != 2'b00))begin
      banks_3_activeNext = 1'b1;
    end
  end

  always @ (*) begin
    _zz_23[0] = io_output_ports_0_precharge;
    _zz_23[1] = io_output_ports_1_precharge;
  end

  always @ (*) begin
    _zz_24[0] = io_output_ports_0_active;
    _zz_24[1] = io_output_ports_1_active;
  end

  always @ (*) begin
    _zz_25[0] = io_output_ports_0_write;
    _zz_25[1] = io_output_ports_1_write;
  end

  assign banks_3_WR_notZero = (banks_3_WR_value != io_config_WR);
  assign banks_3_WR_busy = banks_3_WR_notZero;
  always @ (*) begin
    _zz_26[0] = io_output_ports_0_active;
    _zz_26[1] = io_output_ports_1_active;
  end

  assign banks_3_RAS_notZero = (banks_3_RAS_value != io_config_RAS);
  assign banks_3_RAS_busy = banks_3_RAS_notZero;
  always @ (*) begin
    _zz_27[0] = io_output_ports_0_precharge;
    _zz_27[1] = io_output_ports_1_precharge;
  end

  assign banks_3_RP_notZero = (banks_3_RP_value != io_config_RP);
  assign banks_3_RP_busy = banks_3_RP_notZero;
  always @ (*) begin
    _zz_28[0] = io_output_ports_0_active;
    _zz_28[1] = io_output_ports_1_active;
  end

  assign banks_3_RCD_notZero = (banks_3_RCD_value != io_config_RCD);
  assign banks_3_RCD_busy = banks_3_RCD_notZero;
  always @ (*) begin
    _zz_29[0] = io_output_ports_0_read;
    _zz_29[1] = io_output_ports_1_read;
  end

  assign banks_3_RTP_notZero = (banks_3_RTP_value != io_config_RTP);
  assign banks_3_RTP_busy = banks_3_RTP_notZero;
  assign banks_3_allowPrecharge = (((! banks_3_WR_busy) && (! banks_3_RAS_busy)) && (! banks_3_RTP_busy));
  assign banks_3_allowActive = (! banks_3_RP_busy);
  assign banks_3_allowWrite = (! banks_3_RCD_busy);
  assign banks_3_allowRead = (! banks_3_RCD_busy);
  always @ (*) begin
    banks_4_hits[0] = (io_output_ports_0_address_bank == 3'b100);
    banks_4_hits[1] = (io_output_ports_1_address_bank == 3'b100);
  end

  always @ (*) begin
    banks_4_activeNext = banks_4_active;
    if((((banks_4_hits & _zz_30) != 2'b00) || io_output_prechargeAll))begin
      banks_4_activeNext = 1'b0;
    end
    if(((banks_4_hits & _zz_31) != 2'b00))begin
      banks_4_activeNext = 1'b1;
    end
  end

  always @ (*) begin
    _zz_30[0] = io_output_ports_0_precharge;
    _zz_30[1] = io_output_ports_1_precharge;
  end

  always @ (*) begin
    _zz_31[0] = io_output_ports_0_active;
    _zz_31[1] = io_output_ports_1_active;
  end

  always @ (*) begin
    _zz_32[0] = io_output_ports_0_write;
    _zz_32[1] = io_output_ports_1_write;
  end

  assign banks_4_WR_notZero = (banks_4_WR_value != io_config_WR);
  assign banks_4_WR_busy = banks_4_WR_notZero;
  always @ (*) begin
    _zz_33[0] = io_output_ports_0_active;
    _zz_33[1] = io_output_ports_1_active;
  end

  assign banks_4_RAS_notZero = (banks_4_RAS_value != io_config_RAS);
  assign banks_4_RAS_busy = banks_4_RAS_notZero;
  always @ (*) begin
    _zz_34[0] = io_output_ports_0_precharge;
    _zz_34[1] = io_output_ports_1_precharge;
  end

  assign banks_4_RP_notZero = (banks_4_RP_value != io_config_RP);
  assign banks_4_RP_busy = banks_4_RP_notZero;
  always @ (*) begin
    _zz_35[0] = io_output_ports_0_active;
    _zz_35[1] = io_output_ports_1_active;
  end

  assign banks_4_RCD_notZero = (banks_4_RCD_value != io_config_RCD);
  assign banks_4_RCD_busy = banks_4_RCD_notZero;
  always @ (*) begin
    _zz_36[0] = io_output_ports_0_read;
    _zz_36[1] = io_output_ports_1_read;
  end

  assign banks_4_RTP_notZero = (banks_4_RTP_value != io_config_RTP);
  assign banks_4_RTP_busy = banks_4_RTP_notZero;
  assign banks_4_allowPrecharge = (((! banks_4_WR_busy) && (! banks_4_RAS_busy)) && (! banks_4_RTP_busy));
  assign banks_4_allowActive = (! banks_4_RP_busy);
  assign banks_4_allowWrite = (! banks_4_RCD_busy);
  assign banks_4_allowRead = (! banks_4_RCD_busy);
  always @ (*) begin
    banks_5_hits[0] = (io_output_ports_0_address_bank == 3'b101);
    banks_5_hits[1] = (io_output_ports_1_address_bank == 3'b101);
  end

  always @ (*) begin
    banks_5_activeNext = banks_5_active;
    if((((banks_5_hits & _zz_37) != 2'b00) || io_output_prechargeAll))begin
      banks_5_activeNext = 1'b0;
    end
    if(((banks_5_hits & _zz_38) != 2'b00))begin
      banks_5_activeNext = 1'b1;
    end
  end

  always @ (*) begin
    _zz_37[0] = io_output_ports_0_precharge;
    _zz_37[1] = io_output_ports_1_precharge;
  end

  always @ (*) begin
    _zz_38[0] = io_output_ports_0_active;
    _zz_38[1] = io_output_ports_1_active;
  end

  always @ (*) begin
    _zz_39[0] = io_output_ports_0_write;
    _zz_39[1] = io_output_ports_1_write;
  end

  assign banks_5_WR_notZero = (banks_5_WR_value != io_config_WR);
  assign banks_5_WR_busy = banks_5_WR_notZero;
  always @ (*) begin
    _zz_40[0] = io_output_ports_0_active;
    _zz_40[1] = io_output_ports_1_active;
  end

  assign banks_5_RAS_notZero = (banks_5_RAS_value != io_config_RAS);
  assign banks_5_RAS_busy = banks_5_RAS_notZero;
  always @ (*) begin
    _zz_41[0] = io_output_ports_0_precharge;
    _zz_41[1] = io_output_ports_1_precharge;
  end

  assign banks_5_RP_notZero = (banks_5_RP_value != io_config_RP);
  assign banks_5_RP_busy = banks_5_RP_notZero;
  always @ (*) begin
    _zz_42[0] = io_output_ports_0_active;
    _zz_42[1] = io_output_ports_1_active;
  end

  assign banks_5_RCD_notZero = (banks_5_RCD_value != io_config_RCD);
  assign banks_5_RCD_busy = banks_5_RCD_notZero;
  always @ (*) begin
    _zz_43[0] = io_output_ports_0_read;
    _zz_43[1] = io_output_ports_1_read;
  end

  assign banks_5_RTP_notZero = (banks_5_RTP_value != io_config_RTP);
  assign banks_5_RTP_busy = banks_5_RTP_notZero;
  assign banks_5_allowPrecharge = (((! banks_5_WR_busy) && (! banks_5_RAS_busy)) && (! banks_5_RTP_busy));
  assign banks_5_allowActive = (! banks_5_RP_busy);
  assign banks_5_allowWrite = (! banks_5_RCD_busy);
  assign banks_5_allowRead = (! banks_5_RCD_busy);
  always @ (*) begin
    banks_6_hits[0] = (io_output_ports_0_address_bank == 3'b110);
    banks_6_hits[1] = (io_output_ports_1_address_bank == 3'b110);
  end

  always @ (*) begin
    banks_6_activeNext = banks_6_active;
    if((((banks_6_hits & _zz_44) != 2'b00) || io_output_prechargeAll))begin
      banks_6_activeNext = 1'b0;
    end
    if(((banks_6_hits & _zz_45) != 2'b00))begin
      banks_6_activeNext = 1'b1;
    end
  end

  always @ (*) begin
    _zz_44[0] = io_output_ports_0_precharge;
    _zz_44[1] = io_output_ports_1_precharge;
  end

  always @ (*) begin
    _zz_45[0] = io_output_ports_0_active;
    _zz_45[1] = io_output_ports_1_active;
  end

  always @ (*) begin
    _zz_46[0] = io_output_ports_0_write;
    _zz_46[1] = io_output_ports_1_write;
  end

  assign banks_6_WR_notZero = (banks_6_WR_value != io_config_WR);
  assign banks_6_WR_busy = banks_6_WR_notZero;
  always @ (*) begin
    _zz_47[0] = io_output_ports_0_active;
    _zz_47[1] = io_output_ports_1_active;
  end

  assign banks_6_RAS_notZero = (banks_6_RAS_value != io_config_RAS);
  assign banks_6_RAS_busy = banks_6_RAS_notZero;
  always @ (*) begin
    _zz_48[0] = io_output_ports_0_precharge;
    _zz_48[1] = io_output_ports_1_precharge;
  end

  assign banks_6_RP_notZero = (banks_6_RP_value != io_config_RP);
  assign banks_6_RP_busy = banks_6_RP_notZero;
  always @ (*) begin
    _zz_49[0] = io_output_ports_0_active;
    _zz_49[1] = io_output_ports_1_active;
  end

  assign banks_6_RCD_notZero = (banks_6_RCD_value != io_config_RCD);
  assign banks_6_RCD_busy = banks_6_RCD_notZero;
  always @ (*) begin
    _zz_50[0] = io_output_ports_0_read;
    _zz_50[1] = io_output_ports_1_read;
  end

  assign banks_6_RTP_notZero = (banks_6_RTP_value != io_config_RTP);
  assign banks_6_RTP_busy = banks_6_RTP_notZero;
  assign banks_6_allowPrecharge = (((! banks_6_WR_busy) && (! banks_6_RAS_busy)) && (! banks_6_RTP_busy));
  assign banks_6_allowActive = (! banks_6_RP_busy);
  assign banks_6_allowWrite = (! banks_6_RCD_busy);
  assign banks_6_allowRead = (! banks_6_RCD_busy);
  always @ (*) begin
    banks_7_hits[0] = (io_output_ports_0_address_bank == 3'b111);
    banks_7_hits[1] = (io_output_ports_1_address_bank == 3'b111);
  end

  always @ (*) begin
    banks_7_activeNext = banks_7_active;
    if((((banks_7_hits & _zz_51) != 2'b00) || io_output_prechargeAll))begin
      banks_7_activeNext = 1'b0;
    end
    if(((banks_7_hits & _zz_52) != 2'b00))begin
      banks_7_activeNext = 1'b1;
    end
  end

  always @ (*) begin
    _zz_51[0] = io_output_ports_0_precharge;
    _zz_51[1] = io_output_ports_1_precharge;
  end

  always @ (*) begin
    _zz_52[0] = io_output_ports_0_active;
    _zz_52[1] = io_output_ports_1_active;
  end

  always @ (*) begin
    _zz_53[0] = io_output_ports_0_write;
    _zz_53[1] = io_output_ports_1_write;
  end

  assign banks_7_WR_notZero = (banks_7_WR_value != io_config_WR);
  assign banks_7_WR_busy = banks_7_WR_notZero;
  always @ (*) begin
    _zz_54[0] = io_output_ports_0_active;
    _zz_54[1] = io_output_ports_1_active;
  end

  assign banks_7_RAS_notZero = (banks_7_RAS_value != io_config_RAS);
  assign banks_7_RAS_busy = banks_7_RAS_notZero;
  always @ (*) begin
    _zz_55[0] = io_output_ports_0_precharge;
    _zz_55[1] = io_output_ports_1_precharge;
  end

  assign banks_7_RP_notZero = (banks_7_RP_value != io_config_RP);
  assign banks_7_RP_busy = banks_7_RP_notZero;
  always @ (*) begin
    _zz_56[0] = io_output_ports_0_active;
    _zz_56[1] = io_output_ports_1_active;
  end

  assign banks_7_RCD_notZero = (banks_7_RCD_value != io_config_RCD);
  assign banks_7_RCD_busy = banks_7_RCD_notZero;
  always @ (*) begin
    _zz_57[0] = io_output_ports_0_read;
    _zz_57[1] = io_output_ports_1_read;
  end

  assign banks_7_RTP_notZero = (banks_7_RTP_value != io_config_RTP);
  assign banks_7_RTP_busy = banks_7_RTP_notZero;
  assign banks_7_allowPrecharge = (((! banks_7_WR_busy) && (! banks_7_RAS_busy)) && (! banks_7_RTP_busy));
  assign banks_7_allowActive = (! banks_7_RP_busy);
  assign banks_7_allowWrite = (! banks_7_RCD_busy);
  assign banks_7_allowRead = (! banks_7_RCD_busy);
  assign allowPrechargeAll = (((((((banks_0_allowPrecharge && banks_1_allowPrecharge) && banks_2_allowPrecharge) && banks_3_allowPrecharge) && banks_4_allowPrecharge) && banks_5_allowPrecharge) && banks_6_allowPrecharge) && banks_7_allowPrecharge);
  assign writeTockens_0_consume = ({(io_output_ports_1_write && 1'b1),(io_output_ports_0_write && 1'b1)} != 2'b00);
  assign inputsArbiter_inputsValids[0] = io_inputs_0_valid;
  assign _zz_58 = inputsArbiter_inputsValids;
  assign _zz_59 = {_zz_58,_zz_58};
  assign _zz_60 = (_zz_59 & (~ _zz_200));
  assign inputsArbiter_selOH = (_zz_60[1 : 1] | _zz_60[0 : 0]);
  assign inputsArbiter_tockenIncrement = inputsArbiter_output_ready;
  assign inputsArbiter_output_valid = ((inputsArbiter_selOH & inputsArbiter_inputsValids) != 1'b0);
  assign io_inputs_0_ready = (inputsArbiter_selOH[0] && inputsArbiter_output_ready);
  assign _zz_61 = io_inputs_0_payload_write;
  assign _zz_62 = io_inputs_0_payload_burstLast;
  assign inputsArbiter_selPayload_write = _zz_61;
  assign inputsArbiter_selPayload_address = io_inputs_0_payload_address;
  assign inputsArbiter_selPayload_context = io_inputs_0_payload_context;
  assign inputsArbiter_selPayload_burstLast = _zz_62;
  assign inputsArbiter_selPayload_length = io_inputs_0_payload_length;
  assign inputsArbiter_output_payload_write = inputsArbiter_selPayload_write;
  assign inputsArbiter_output_payload_address = inputsArbiter_selPayload_address;
  assign inputsArbiter_output_payload_context = inputsArbiter_selPayload_context;
  assign inputsArbiter_output_payload_burstLast = inputsArbiter_selPayload_burstLast;
  assign inputsArbiter_output_payload_length = inputsArbiter_selPayload_length;
  assign _zz_63 = inputsArbiter_output_payload_address;
  assign taskConstructor_s0_portAddress_byte = _zz_63[0 : 0];
  assign taskConstructor_s0_portAddress_column = _zz_63[10 : 1];
  assign taskConstructor_s0_portAddress_bank = _zz_63[13 : 11];
  assign taskConstructor_s0_portAddress_row = _zz_63[26 : 14];
  assign inputsArbiter_output_ready = ((1'b1 && (! taskConstructor_s1_input_valid)) || taskConstructor_s1_input_ready);
  assign taskConstructor_s1_input_valid = inputsArbiter_output_m2sPipe_rValid;
  assign taskConstructor_s1_input_payload_write = inputsArbiter_output_m2sPipe_rData_write;
  assign taskConstructor_s1_input_payload_address = inputsArbiter_output_m2sPipe_rData_address;
  assign taskConstructor_s1_input_payload_context = inputsArbiter_output_m2sPipe_rData_context;
  assign taskConstructor_s1_input_payload_burstLast = inputsArbiter_output_m2sPipe_rData_burstLast;
  assign taskConstructor_s1_input_payload_length = inputsArbiter_output_m2sPipe_rData_length;
  assign _zz_64 = taskConstructor_s1_input_payload_address;
  assign taskConstructor_s1_address_byte = _zz_64[0 : 0];
  assign taskConstructor_s1_address_column = _zz_64[10 : 1];
  assign taskConstructor_s1_address_bank = _zz_64[13 : 11];
  assign taskConstructor_s1_address_row = _zz_64[26 : 14];
  always @ (*) begin
    taskConstructor_s1_status_allowPrecharge = 1'b1;
    if((! _zz_74))begin
      taskConstructor_s1_status_allowPrecharge = 1'b0;
    end
    if(_zz_86)begin
      if(io_output_ports_0_active)begin
        taskConstructor_s1_status_allowPrecharge = 1'b0;
      end
      if((io_output_ports_0_read || io_output_ports_0_write))begin
        taskConstructor_s1_status_allowPrecharge = 1'b0;
      end
    end
    if(_zz_87)begin
      if(io_output_ports_1_active)begin
        taskConstructor_s1_status_allowPrecharge = 1'b0;
      end
      if((io_output_ports_1_read || io_output_ports_1_write))begin
        taskConstructor_s1_status_allowPrecharge = 1'b0;
      end
    end
  end

  always @ (*) begin
    taskConstructor_s1_status_allowActive = ((! RRD_busy) && (! FAW_busyNext));
    if((! _zz_75))begin
      taskConstructor_s1_status_allowActive = 1'b0;
    end
    if(_zz_86)begin
      if(io_output_ports_0_precharge)begin
        taskConstructor_s1_status_allowActive = 1'b0;
      end
    end
    if(_zz_87)begin
      if(io_output_ports_1_precharge)begin
        taskConstructor_s1_status_allowActive = 1'b0;
      end
    end
  end

  always @ (*) begin
    taskConstructor_s1_status_allowWrite = ((! RTW_busy) && 1'b1);
    if((! _zz_76))begin
      taskConstructor_s1_status_allowWrite = 1'b0;
    end
    if(_zz_86)begin
      if(io_output_ports_0_active)begin
        taskConstructor_s1_status_allowWrite = 1'b0;
      end
    end
    if(_zz_87)begin
      if(io_output_ports_1_active)begin
        taskConstructor_s1_status_allowWrite = 1'b0;
      end
    end
  end

  always @ (*) begin
    taskConstructor_s1_status_allowRead = ((! WTR_busy) && 1'b1);
    if((! _zz_77))begin
      taskConstructor_s1_status_allowRead = 1'b0;
    end
    if(_zz_86)begin
      if(io_output_ports_0_active)begin
        taskConstructor_s1_status_allowRead = 1'b0;
      end
    end
    if(_zz_87)begin
      if(io_output_ports_1_active)begin
        taskConstructor_s1_status_allowRead = 1'b0;
      end
    end
  end

  always @ (*) begin
    taskConstructor_s1_status_bankHit = (_zz_71 == taskConstructor_s1_address_row);
    if(_zz_86)begin
      if(io_output_ports_0_active)begin
        taskConstructor_s1_status_bankHit = (io_output_ports_0_address_row == taskConstructor_s1_address_row);
      end
    end
    if(_zz_87)begin
      if(io_output_ports_1_active)begin
        taskConstructor_s1_status_bankHit = (io_output_ports_1_address_row == taskConstructor_s1_address_row);
      end
    end
  end

  always @ (*) begin
    taskConstructor_s1_status_bankActive = _zz_73;
    if(_zz_86)begin
      if(io_output_ports_0_precharge)begin
        taskConstructor_s1_status_bankActive = 1'b0;
      end
      if(io_output_ports_0_active)begin
        taskConstructor_s1_status_bankActive = 1'b1;
      end
    end
    if(_zz_87)begin
      if(io_output_ports_1_precharge)begin
        taskConstructor_s1_status_bankActive = 1'b0;
      end
      if(io_output_ports_1_active)begin
        taskConstructor_s1_status_bankActive = 1'b1;
      end
    end
  end

  assign stations_0_inputMiss = ((! stations_0_status_bankActive) || (! stations_0_status_bankHit));
  assign stations_0_inputActive = (! stations_0_status_bankActive);
  assign stations_0_inputPrecharge = (stations_0_status_bankActive && (! stations_0_status_bankHit));
  assign stations_0_inputAccess = (stations_0_status_bankActive && stations_0_status_bankHit);
  assign stations_0_inputWrite = ((stations_0_status_bankActive && stations_0_status_bankHit) && stations_0_write);
  assign stations_0_inputRead = ((stations_0_status_bankActive && stations_0_status_bankHit) && (! stations_0_write));
  always @ (*) begin
    stations_0_inibated = 1'b0;
    if((stations_0_inputAccess && (stations_0_afterAccess != 2'b00)))begin
      stations_0_inibated = 1'b1;
    end
    if((stations_0_inputMiss && (stations_0_afterBank != 2'b00)))begin
      stations_0_inibated = 1'b1;
    end
  end

  assign stations_0_doActive = (stations_0_inputActive && stations_0_status_allowActive);
  assign stations_0_doPrecharge = (stations_0_inputPrecharge && stations_0_status_allowPrecharge);
  assign stations_0_doWrite = ((stations_0_inputWrite && stations_0_status_allowWrite) && writeTockens_0_ready);
  assign stations_0_doRead = (stations_0_inputRead && stations_0_status_allowRead);
  assign stations_0_doSomething = ((stations_0_valid && (((stations_0_doActive || stations_0_doPrecharge) || stations_0_doWrite) || stations_0_doRead)) && (! stations_0_inibated));
  assign stations_0_blockedByWriteTocken = ((stations_0_inputWrite && stations_0_status_allowWrite) && (! writeTockens_0_ready));
  always @ (*) begin
    stations_0_fire = 1'b0;
    if(_zz_88)begin
      if(stations_0_last)begin
        stations_0_fire = 1'b1;
      end
    end
  end

  assign stations_0_last = (stations_0_offset == stations_0_offsetLast);
  assign io_output_ports_0_address_byte = stations_0_address_byte;
  assign io_output_ports_0_address_column = (stations_0_address_column | _zz_205);
  assign io_output_ports_0_address_bank = stations_0_address_bank;
  assign io_output_ports_0_address_row = stations_0_address_row;
  assign io_output_ports_0_context = stations_0_context;
  assign io_output_ports_0_active = (stations_0_inputActive && stations_0_sel);
  assign io_output_ports_0_precharge = (stations_0_inputPrecharge && stations_0_sel);
  assign io_output_ports_0_write = (stations_0_inputWrite && stations_0_sel);
  assign io_output_ports_0_read = (stations_0_inputRead && stations_0_sel);
  assign io_output_ports_0_last = stations_0_last;
  always @ (*) begin
    stations_0_frustration_increment = 1'b0;
    if(stations_1_fire)begin
      if(stations_1_stronger[0])begin
        stations_0_frustration_increment = 1'b1;
      end
    end
  end

  assign stations_0_frustration_full = stations_0_frustration_counter[3];
  assign stations_1_inputMiss = ((! stations_1_status_bankActive) || (! stations_1_status_bankHit));
  assign stations_1_inputActive = (! stations_1_status_bankActive);
  assign stations_1_inputPrecharge = (stations_1_status_bankActive && (! stations_1_status_bankHit));
  assign stations_1_inputAccess = (stations_1_status_bankActive && stations_1_status_bankHit);
  assign stations_1_inputWrite = ((stations_1_status_bankActive && stations_1_status_bankHit) && stations_1_write);
  assign stations_1_inputRead = ((stations_1_status_bankActive && stations_1_status_bankHit) && (! stations_1_write));
  always @ (*) begin
    stations_1_inibated = 1'b0;
    if((stations_1_inputAccess && (stations_1_afterAccess != 2'b00)))begin
      stations_1_inibated = 1'b1;
    end
    if((stations_1_inputMiss && (stations_1_afterBank != 2'b00)))begin
      stations_1_inibated = 1'b1;
    end
  end

  assign stations_1_doActive = (stations_1_inputActive && stations_1_status_allowActive);
  assign stations_1_doPrecharge = (stations_1_inputPrecharge && stations_1_status_allowPrecharge);
  assign stations_1_doWrite = ((stations_1_inputWrite && stations_1_status_allowWrite) && writeTockens_0_ready);
  assign stations_1_doRead = (stations_1_inputRead && stations_1_status_allowRead);
  assign stations_1_doSomething = ((stations_1_valid && (((stations_1_doActive || stations_1_doPrecharge) || stations_1_doWrite) || stations_1_doRead)) && (! stations_1_inibated));
  assign stations_1_blockedByWriteTocken = ((stations_1_inputWrite && stations_1_status_allowWrite) && (! writeTockens_0_ready));
  always @ (*) begin
    stations_1_fire = 1'b0;
    if(_zz_89)begin
      if(stations_1_last)begin
        stations_1_fire = 1'b1;
      end
    end
  end

  assign stations_1_last = (stations_1_offset == stations_1_offsetLast);
  assign io_output_ports_1_address_byte = stations_1_address_byte;
  assign io_output_ports_1_address_column = (stations_1_address_column | _zz_207);
  assign io_output_ports_1_address_bank = stations_1_address_bank;
  assign io_output_ports_1_address_row = stations_1_address_row;
  assign io_output_ports_1_context = stations_1_context;
  assign io_output_ports_1_active = (stations_1_inputActive && stations_1_sel);
  assign io_output_ports_1_precharge = (stations_1_inputPrecharge && stations_1_sel);
  assign io_output_ports_1_write = (stations_1_inputWrite && stations_1_sel);
  assign io_output_ports_1_read = (stations_1_inputRead && stations_1_sel);
  assign io_output_ports_1_last = stations_1_last;
  always @ (*) begin
    stations_1_frustration_increment = 1'b0;
    if(stations_0_fire)begin
      if(stations_0_stronger[1])begin
        stations_1_frustration_increment = 1'b1;
      end
    end
  end

  assign stations_1_frustration_full = stations_1_frustration_counter[3];
  always @ (*) begin
    loader_stationsValid[0] = stations_0_valid;
    loader_stationsValid[1] = stations_1_valid;
  end

  assign loader_stronger = loader_stationsValid;
  always @ (*) begin
    _zz_65[0] = (stations_0_address_bank == taskConstructor_s1_address_bank);
    _zz_65[1] = (stations_1_address_bank == taskConstructor_s1_address_bank);
  end

  assign loader_afterBank = (loader_stationsValid & _zz_65);
  always @ (*) begin
    _zz_66[0] = (1'b1 || stations_0_frustration_full);
    _zz_66[1] = (1'b1 || stations_1_frustration_full);
  end

  assign loader_afterAccess = (loader_stationsValid & _zz_66);
  assign taskConstructor_s1_input_ready = (! (stations_0_valid && stations_1_valid));
  assign loader_offset = taskConstructor_s1_address_column[4 : 2];
  assign loader_offsetLast = (loader_offset + taskConstructor_s1_input_payload_length);
  assign loader_slot_0_canSpawn = (1'b1 && (! stations_0_valid));
  assign _zz_67[0] = stations_0_valid;
  assign loader_slot_1_canSpawn = (((~ _zz_67) == 1'b0) && (! stations_1_valid));
  always @ (*) begin
    _zz_68[0] = stations_0_doSomething;
    _zz_68[1] = stations_1_doSomething;
  end

  assign arbiter_logic_0_othersDoSomething = ((_zz_68 & stations_0_stronger) & 2'b10);
  always @ (*) begin
    arbiter_selOH[0] = (stations_0_doSomething && (! (arbiter_logic_0_othersDoSomething != 2'b00)));
    arbiter_selOH[1] = (stations_1_doSomething && (! (arbiter_logic_1_othersDoSomething != 2'b00)));
  end

  always @ (*) begin
    _zz_69[0] = stations_0_doSomething;
    _zz_69[1] = stations_1_doSomething;
  end

  assign arbiter_logic_1_othersDoSomething = ((_zz_69 & stations_1_stronger) & 2'b01);
  assign _zz_70 = arbiter_selOH[0];
  assign stations_0_sel = _zz_70;
  assign stations_1_sel = arbiter_selOH[1];
  assign arbiter_askRefresh = (io_refresh_valid && readyForRefresh);
  always @ (*) begin
    io_refresh_ready = 1'b0;
    if(arbiter_askRefresh)begin
      case(arbiter_refreshState)
        2'b00 : begin
        end
        2'b01 : begin
        end
        2'b10 : begin
        end
        default : begin
          if(_zz_90)begin
            io_refresh_ready = 1'b1;
          end
        end
      endcase
    end
  end

  always @ (*) begin
    io_output_prechargeAll = 1'b0;
    if(arbiter_askRefresh)begin
      case(arbiter_refreshState)
        2'b00 : begin
        end
        2'b01 : begin
          if(allowPrechargeAll_regNext)begin
            io_output_prechargeAll = 1'b1;
          end
        end
        2'b10 : begin
        end
        default : begin
        end
      endcase
    end
  end

  always @ (*) begin
    io_output_refresh = 1'b0;
    if(arbiter_askRefresh)begin
      case(arbiter_refreshState)
        2'b00 : begin
        end
        2'b01 : begin
        end
        2'b10 : begin
          if(_zz_91)begin
            io_output_refresh = 1'b1;
          end
        end
        default : begin
        end
      endcase
    end
  end

  assign selectedAddress_byte = (_zz_70 ? io_output_ports_0_address_byte : io_output_ports_1_address_byte);
  assign selectedAddress_column = (_zz_70 ? io_output_ports_0_address_column : io_output_ports_1_address_column);
  assign selectedAddress_bank = (_zz_70 ? io_output_ports_0_address_bank : io_output_ports_1_address_bank);
  assign selectedAddress_row = (_zz_70 ? io_output_ports_0_address_row : io_output_ports_1_address_row);
  always @ (posedge CLKOUT1) begin
    RFC_value <= (RFC_value + _zz_95);
    if(io_output_refresh)begin
      RFC_value <= 7'h0;
    end
    RRD_value <= (RRD_value + _zz_97);
    if(({io_output_ports_1_active,io_output_ports_0_active} != 2'b00))begin
      RRD_value <= 4'b0000;
    end
    WTR_value <= (WTR_value + _zz_99);
    if(({io_output_ports_1_write,io_output_ports_0_write} != 2'b00))begin
      WTR_value <= 4'b0000;
    end
    RTW_value <= (RTW_value + _zz_101);
    if(({io_output_ports_1_read,io_output_ports_0_read} != 2'b00))begin
      RTW_value <= 4'b0000;
    end
    RP_value <= (RP_value + _zz_104);
    if(io_output_prechargeAll)begin
      RP_value <= 4'b0000;
    end
    FAW_slots_0_value <= (FAW_slots_0_value + _zz_106);
    if(((FAW_ptr == 2'b00) && FAW_trigger))begin
      FAW_slots_0_value <= 4'b0000;
    end
    FAW_slots_1_value <= (FAW_slots_1_value + _zz_108);
    if(((FAW_ptr == 2'b01) && FAW_trigger))begin
      FAW_slots_1_value <= 4'b0000;
    end
    FAW_slots_2_value <= (FAW_slots_2_value + _zz_110);
    if(((FAW_ptr == 2'b10) && FAW_trigger))begin
      FAW_slots_2_value <= 4'b0000;
    end
    FAW_slots_3_value <= (FAW_slots_3_value + _zz_112);
    if(((FAW_ptr == 2'b11) && FAW_trigger))begin
      FAW_slots_3_value <= 4'b0000;
    end
    banks_0_WR_value <= (banks_0_WR_value + _zz_117);
    if(((banks_0_hits & _zz_4) != 2'b00))begin
      banks_0_WR_value <= 4'b0000;
    end
    banks_0_RAS_value <= (banks_0_RAS_value + _zz_119);
    if(((banks_0_hits & _zz_5) != 2'b00))begin
      banks_0_RAS_value <= 4'b0000;
    end
    banks_0_RP_value <= (banks_0_RP_value + _zz_121);
    if(((banks_0_hits & _zz_6) != 2'b00))begin
      banks_0_RP_value <= 4'b0000;
    end
    banks_0_RCD_value <= (banks_0_RCD_value + _zz_123);
    if(((banks_0_hits & _zz_7) != 2'b00))begin
      banks_0_RCD_value <= 4'b0000;
    end
    banks_0_RTP_value <= (banks_0_RTP_value + _zz_125);
    if(((banks_0_hits & _zz_8) != 2'b00))begin
      banks_0_RTP_value <= 4'b0000;
    end
    banks_1_WR_value <= (banks_1_WR_value + _zz_127);
    if(((banks_1_hits & _zz_11) != 2'b00))begin
      banks_1_WR_value <= 4'b0000;
    end
    banks_1_RAS_value <= (banks_1_RAS_value + _zz_129);
    if(((banks_1_hits & _zz_12) != 2'b00))begin
      banks_1_RAS_value <= 4'b0000;
    end
    banks_1_RP_value <= (banks_1_RP_value + _zz_131);
    if(((banks_1_hits & _zz_13) != 2'b00))begin
      banks_1_RP_value <= 4'b0000;
    end
    banks_1_RCD_value <= (banks_1_RCD_value + _zz_133);
    if(((banks_1_hits & _zz_14) != 2'b00))begin
      banks_1_RCD_value <= 4'b0000;
    end
    banks_1_RTP_value <= (banks_1_RTP_value + _zz_135);
    if(((banks_1_hits & _zz_15) != 2'b00))begin
      banks_1_RTP_value <= 4'b0000;
    end
    banks_2_WR_value <= (banks_2_WR_value + _zz_137);
    if(((banks_2_hits & _zz_18) != 2'b00))begin
      banks_2_WR_value <= 4'b0000;
    end
    banks_2_RAS_value <= (banks_2_RAS_value + _zz_139);
    if(((banks_2_hits & _zz_19) != 2'b00))begin
      banks_2_RAS_value <= 4'b0000;
    end
    banks_2_RP_value <= (banks_2_RP_value + _zz_141);
    if(((banks_2_hits & _zz_20) != 2'b00))begin
      banks_2_RP_value <= 4'b0000;
    end
    banks_2_RCD_value <= (banks_2_RCD_value + _zz_143);
    if(((banks_2_hits & _zz_21) != 2'b00))begin
      banks_2_RCD_value <= 4'b0000;
    end
    banks_2_RTP_value <= (banks_2_RTP_value + _zz_145);
    if(((banks_2_hits & _zz_22) != 2'b00))begin
      banks_2_RTP_value <= 4'b0000;
    end
    banks_3_WR_value <= (banks_3_WR_value + _zz_147);
    if(((banks_3_hits & _zz_25) != 2'b00))begin
      banks_3_WR_value <= 4'b0000;
    end
    banks_3_RAS_value <= (banks_3_RAS_value + _zz_149);
    if(((banks_3_hits & _zz_26) != 2'b00))begin
      banks_3_RAS_value <= 4'b0000;
    end
    banks_3_RP_value <= (banks_3_RP_value + _zz_151);
    if(((banks_3_hits & _zz_27) != 2'b00))begin
      banks_3_RP_value <= 4'b0000;
    end
    banks_3_RCD_value <= (banks_3_RCD_value + _zz_153);
    if(((banks_3_hits & _zz_28) != 2'b00))begin
      banks_3_RCD_value <= 4'b0000;
    end
    banks_3_RTP_value <= (banks_3_RTP_value + _zz_155);
    if(((banks_3_hits & _zz_29) != 2'b00))begin
      banks_3_RTP_value <= 4'b0000;
    end
    banks_4_WR_value <= (banks_4_WR_value + _zz_157);
    if(((banks_4_hits & _zz_32) != 2'b00))begin
      banks_4_WR_value <= 4'b0000;
    end
    banks_4_RAS_value <= (banks_4_RAS_value + _zz_159);
    if(((banks_4_hits & _zz_33) != 2'b00))begin
      banks_4_RAS_value <= 4'b0000;
    end
    banks_4_RP_value <= (banks_4_RP_value + _zz_161);
    if(((banks_4_hits & _zz_34) != 2'b00))begin
      banks_4_RP_value <= 4'b0000;
    end
    banks_4_RCD_value <= (banks_4_RCD_value + _zz_163);
    if(((banks_4_hits & _zz_35) != 2'b00))begin
      banks_4_RCD_value <= 4'b0000;
    end
    banks_4_RTP_value <= (banks_4_RTP_value + _zz_165);
    if(((banks_4_hits & _zz_36) != 2'b00))begin
      banks_4_RTP_value <= 4'b0000;
    end
    banks_5_WR_value <= (banks_5_WR_value + _zz_167);
    if(((banks_5_hits & _zz_39) != 2'b00))begin
      banks_5_WR_value <= 4'b0000;
    end
    banks_5_RAS_value <= (banks_5_RAS_value + _zz_169);
    if(((banks_5_hits & _zz_40) != 2'b00))begin
      banks_5_RAS_value <= 4'b0000;
    end
    banks_5_RP_value <= (banks_5_RP_value + _zz_171);
    if(((banks_5_hits & _zz_41) != 2'b00))begin
      banks_5_RP_value <= 4'b0000;
    end
    banks_5_RCD_value <= (banks_5_RCD_value + _zz_173);
    if(((banks_5_hits & _zz_42) != 2'b00))begin
      banks_5_RCD_value <= 4'b0000;
    end
    banks_5_RTP_value <= (banks_5_RTP_value + _zz_175);
    if(((banks_5_hits & _zz_43) != 2'b00))begin
      banks_5_RTP_value <= 4'b0000;
    end
    banks_6_WR_value <= (banks_6_WR_value + _zz_177);
    if(((banks_6_hits & _zz_46) != 2'b00))begin
      banks_6_WR_value <= 4'b0000;
    end
    banks_6_RAS_value <= (banks_6_RAS_value + _zz_179);
    if(((banks_6_hits & _zz_47) != 2'b00))begin
      banks_6_RAS_value <= 4'b0000;
    end
    banks_6_RP_value <= (banks_6_RP_value + _zz_181);
    if(((banks_6_hits & _zz_48) != 2'b00))begin
      banks_6_RP_value <= 4'b0000;
    end
    banks_6_RCD_value <= (banks_6_RCD_value + _zz_183);
    if(((banks_6_hits & _zz_49) != 2'b00))begin
      banks_6_RCD_value <= 4'b0000;
    end
    banks_6_RTP_value <= (banks_6_RTP_value + _zz_185);
    if(((banks_6_hits & _zz_50) != 2'b00))begin
      banks_6_RTP_value <= 4'b0000;
    end
    banks_7_WR_value <= (banks_7_WR_value + _zz_187);
    if(((banks_7_hits & _zz_53) != 2'b00))begin
      banks_7_WR_value <= 4'b0000;
    end
    banks_7_RAS_value <= (banks_7_RAS_value + _zz_189);
    if(((banks_7_hits & _zz_54) != 2'b00))begin
      banks_7_RAS_value <= 4'b0000;
    end
    banks_7_RP_value <= (banks_7_RP_value + _zz_191);
    if(((banks_7_hits & _zz_55) != 2'b00))begin
      banks_7_RP_value <= 4'b0000;
    end
    banks_7_RCD_value <= (banks_7_RCD_value + _zz_193);
    if(((banks_7_hits & _zz_56) != 2'b00))begin
      banks_7_RCD_value <= 4'b0000;
    end
    banks_7_RTP_value <= (banks_7_RTP_value + _zz_195);
    if(((banks_7_hits & _zz_57) != 2'b00))begin
      banks_7_RTP_value <= 4'b0000;
    end
    if(inputsArbiter_output_ready)begin
      inputsArbiter_output_m2sPipe_rData_write <= inputsArbiter_output_payload_write;
      inputsArbiter_output_m2sPipe_rData_address <= inputsArbiter_output_payload_address;
      inputsArbiter_output_m2sPipe_rData_context <= inputsArbiter_output_payload_context;
      inputsArbiter_output_m2sPipe_rData_burstLast <= inputsArbiter_output_payload_burstLast;
      inputsArbiter_output_m2sPipe_rData_length <= inputsArbiter_output_payload_length;
    end
    stations_0_status_allowPrecharge <= 1'b1;
    stations_0_status_allowActive <= ((! RRD_busy) && (! FAW_busyNext));
    stations_0_status_allowWrite <= ((! RTW_busy) && 1'b1);
    stations_0_status_allowRead <= ((! WTR_busy) && 1'b1);
    if((! _zz_78))begin
      stations_0_status_allowPrecharge <= 1'b0;
    end
    if((! _zz_79))begin
      stations_0_status_allowActive <= 1'b0;
    end
    if((! _zz_80))begin
      stations_0_status_allowWrite <= 1'b0;
    end
    if((! _zz_81))begin
      stations_0_status_allowRead <= 1'b0;
    end
    if((io_output_ports_0_address_bank == stations_0_address_bank))begin
      if(io_output_ports_0_precharge)begin
        stations_0_status_bankActive <= 1'b0;
      end
      if(io_output_ports_0_active)begin
        stations_0_status_bankActive <= 1'b1;
        stations_0_status_bankHit <= (io_output_ports_0_address_row == stations_0_address_row);
        stations_0_status_allowRead <= 1'b0;
        stations_0_status_allowWrite <= 1'b0;
        stations_0_status_allowPrecharge <= 1'b0;
      end
      if((io_output_ports_0_read || io_output_ports_0_write))begin
        stations_0_status_allowPrecharge <= 1'b0;
      end
      if(io_output_ports_0_precharge)begin
        stations_0_status_allowActive <= 1'b0;
      end
    end
    if((io_output_ports_1_address_bank == stations_0_address_bank))begin
      if(io_output_ports_1_precharge)begin
        stations_0_status_bankActive <= 1'b0;
      end
      if(io_output_ports_1_active)begin
        stations_0_status_bankActive <= 1'b1;
        stations_0_status_bankHit <= (io_output_ports_1_address_row == stations_0_address_row);
        stations_0_status_allowRead <= 1'b0;
        stations_0_status_allowWrite <= 1'b0;
        stations_0_status_allowPrecharge <= 1'b0;
      end
      if((io_output_ports_1_read || io_output_ports_1_write))begin
        stations_0_status_allowPrecharge <= 1'b0;
      end
      if(io_output_ports_1_precharge)begin
        stations_0_status_allowActive <= 1'b0;
      end
    end
    if(_zz_88)begin
      stations_0_offset <= (stations_0_offset + 3'b001);
    end
    if((stations_0_frustration_increment && (! stations_0_frustration_full)))begin
      stations_0_frustration_counter <= (stations_0_frustration_counter + 4'b0001);
    end
    stations_1_status_allowPrecharge <= 1'b1;
    stations_1_status_allowActive <= ((! RRD_busy) && (! FAW_busyNext));
    stations_1_status_allowWrite <= ((! RTW_busy) && 1'b1);
    stations_1_status_allowRead <= ((! WTR_busy) && 1'b1);
    if((! _zz_82))begin
      stations_1_status_allowPrecharge <= 1'b0;
    end
    if((! _zz_83))begin
      stations_1_status_allowActive <= 1'b0;
    end
    if((! _zz_84))begin
      stations_1_status_allowWrite <= 1'b0;
    end
    if((! _zz_85))begin
      stations_1_status_allowRead <= 1'b0;
    end
    if((io_output_ports_0_address_bank == stations_1_address_bank))begin
      if(io_output_ports_0_precharge)begin
        stations_1_status_bankActive <= 1'b0;
      end
      if(io_output_ports_0_active)begin
        stations_1_status_bankActive <= 1'b1;
        stations_1_status_bankHit <= (io_output_ports_0_address_row == stations_1_address_row);
        stations_1_status_allowRead <= 1'b0;
        stations_1_status_allowWrite <= 1'b0;
        stations_1_status_allowPrecharge <= 1'b0;
      end
      if((io_output_ports_0_read || io_output_ports_0_write))begin
        stations_1_status_allowPrecharge <= 1'b0;
      end
      if(io_output_ports_0_precharge)begin
        stations_1_status_allowActive <= 1'b0;
      end
    end
    if((io_output_ports_1_address_bank == stations_1_address_bank))begin
      if(io_output_ports_1_precharge)begin
        stations_1_status_bankActive <= 1'b0;
      end
      if(io_output_ports_1_active)begin
        stations_1_status_bankActive <= 1'b1;
        stations_1_status_bankHit <= (io_output_ports_1_address_row == stations_1_address_row);
        stations_1_status_allowRead <= 1'b0;
        stations_1_status_allowWrite <= 1'b0;
        stations_1_status_allowPrecharge <= 1'b0;
      end
      if((io_output_ports_1_read || io_output_ports_1_write))begin
        stations_1_status_allowPrecharge <= 1'b0;
      end
      if(io_output_ports_1_precharge)begin
        stations_1_status_allowActive <= 1'b0;
      end
    end
    if(_zz_89)begin
      stations_1_offset <= (stations_1_offset + 3'b001);
    end
    if((stations_1_frustration_increment && (! stations_1_frustration_full)))begin
      stations_1_frustration_counter <= (stations_1_frustration_counter + 4'b0001);
    end
    if(_zz_92)begin
      stations_0_status_bankActive <= taskConstructor_s1_status_bankActive;
      stations_0_status_bankHit <= taskConstructor_s1_status_bankHit;
      stations_0_status_allowPrecharge <= taskConstructor_s1_status_allowPrecharge;
      stations_0_status_allowActive <= taskConstructor_s1_status_allowActive;
      stations_0_status_allowWrite <= taskConstructor_s1_status_allowWrite;
      stations_0_status_allowRead <= taskConstructor_s1_status_allowRead;
      stations_0_address_byte <= taskConstructor_s1_address_byte;
      stations_0_address_column <= (taskConstructor_s1_address_column & 10'h3e3);
      stations_0_address_bank <= taskConstructor_s1_address_bank;
      stations_0_address_row <= taskConstructor_s1_address_row;
      stations_0_offset <= loader_offset;
      stations_0_offsetLast <= loader_offsetLast;
      stations_0_write <= taskConstructor_s1_input_payload_write;
      stations_0_context <= taskConstructor_s1_input_payload_context;
      stations_0_frustration_counter <= 4'b0000;
    end
    if(_zz_93)begin
      stations_1_status_bankActive <= taskConstructor_s1_status_bankActive;
      stations_1_status_bankHit <= taskConstructor_s1_status_bankHit;
      stations_1_status_allowPrecharge <= taskConstructor_s1_status_allowPrecharge;
      stations_1_status_allowActive <= taskConstructor_s1_status_allowActive;
      stations_1_status_allowWrite <= taskConstructor_s1_status_allowWrite;
      stations_1_status_allowRead <= taskConstructor_s1_status_allowRead;
      stations_1_address_byte <= taskConstructor_s1_address_byte;
      stations_1_address_column <= (taskConstructor_s1_address_column & 10'h3e3);
      stations_1_address_bank <= taskConstructor_s1_address_bank;
      stations_1_address_row <= taskConstructor_s1_address_row;
      stations_1_offset <= loader_offset;
      stations_1_offsetLast <= loader_offsetLast;
      stations_1_write <= taskConstructor_s1_input_payload_write;
      stations_1_context <= taskConstructor_s1_input_payload_context;
      stations_1_frustration_counter <= 4'b0000;
    end
    if(({io_output_ports_1_active,io_output_ports_0_active} != 2'b00))begin
      stations_0_status_allowActive <= 1'b0;
    end
    if(({io_output_ports_1_read,io_output_ports_0_read} != 2'b00))begin
      stations_0_status_allowWrite <= 1'b0;
    end
    if(({io_output_ports_1_write,io_output_ports_0_write} != 2'b00))begin
      stations_0_status_allowRead <= 1'b0;
    end
    if(({io_output_ports_1_active,io_output_ports_0_active} != 2'b00))begin
      stations_1_status_allowActive <= 1'b0;
    end
    if(({io_output_ports_1_read,io_output_ports_0_read} != 2'b00))begin
      stations_1_status_allowWrite <= 1'b0;
    end
    if(({io_output_ports_1_write,io_output_ports_0_write} != 2'b00))begin
      stations_1_status_allowRead <= 1'b0;
    end
  end

  always @ (posedge CLKOUT1) begin
    if(sdramCd_logic_outputReset) begin
      FAW_ptr <= 2'b00;
      banks_0_active <= 1'b0;
      banks_1_active <= 1'b0;
      banks_2_active <= 1'b0;
      banks_3_active <= 1'b0;
      banks_4_active <= 1'b0;
      banks_5_active <= 1'b0;
      banks_6_active <= 1'b0;
      banks_7_active <= 1'b0;
      writeTockens_0_counter <= 6'h0;
      writeTockens_0_ready <= 1'b0;
      inputsArbiter_state <= 1'b1;
      inputsArbiter_tocken <= 3'b000;
      inputsArbiter_output_m2sPipe_rValid <= 1'b0;
      stations_0_valid <= 1'b0;
      stations_0_stronger <= 2'b00;
      stations_0_afterBank <= 2'b00;
      stations_0_afterAccess <= 2'b00;
      stations_1_valid <= 1'b0;
      stations_1_stronger <= 2'b00;
      stations_1_afterBank <= 2'b00;
      stations_1_afterAccess <= 2'b00;
      arbiter_refreshState <= 2'b00;
    end else begin
      FAW_ptr <= (FAW_ptr + _zz_115);
      banks_0_active <= banks_0_activeNext;
      banks_1_active <= banks_1_activeNext;
      banks_2_active <= banks_2_activeNext;
      banks_3_active <= banks_3_activeNext;
      banks_4_active <= banks_4_activeNext;
      banks_5_active <= banks_5_activeNext;
      banks_6_active <= banks_6_activeNext;
      banks_7_active <= banks_7_activeNext;
      writeTockens_0_counter <= (_zz_196 - _zz_199);
      if((6'h01 <= writeTockens_0_counter))begin
        writeTockens_0_ready <= 1'b1;
      end
      if((writeTockens_0_consume && (writeTockens_0_counter < 6'h02)))begin
        writeTockens_0_ready <= 1'b0;
      end
      if(inputsArbiter_tockenIncrement)begin
        inputsArbiter_tocken <= (inputsArbiter_tocken + 3'b001);
      end
      if(((! ((io_inputs_0_valid & inputsArbiter_state) != 1'b0)) || (inputsArbiter_tockenIncrement && ((((io_inputs_0_payload_burstLast & inputsArbiter_state) != 1'b0) && (3'b100 <= inputsArbiter_tocken)) || (4'b1000 <= _zz_203)))))begin
        inputsArbiter_state <= inputsArbiter_state[0 : 0];
        inputsArbiter_tocken <= 3'b000;
      end
      if(inputsArbiter_output_ready)begin
        inputsArbiter_output_m2sPipe_rValid <= inputsArbiter_output_valid;
      end
      if(_zz_88)begin
        if(stations_0_last)begin
          stations_0_valid <= 1'b0;
        end
      end
      if(_zz_89)begin
        if(stations_1_last)begin
          stations_1_valid <= 1'b0;
        end
      end
      if(_zz_92)begin
        stations_0_valid <= 1'b1;
        stations_0_stronger <= (loader_stronger & 2'b10);
        stations_0_afterBank <= (loader_afterBank & 2'b10);
        stations_0_afterAccess <= (loader_afterAccess & 2'b10);
      end
      if(_zz_93)begin
        stations_1_valid <= 1'b1;
        stations_1_stronger <= (loader_stronger & 2'b01);
        stations_1_afterBank <= (loader_afterBank & 2'b01);
        stations_1_afterAccess <= (loader_afterAccess & 2'b01);
      end
      if(stations_0_fire)begin
        stations_1_stronger[0] <= 1'b0;
        stations_1_afterAccess[0] <= 1'b0;
        stations_1_afterBank[0] <= 1'b0;
      end
      if(stations_1_fire)begin
        stations_0_stronger[1] <= 1'b0;
        stations_0_afterAccess[1] <= 1'b0;
        stations_0_afterBank[1] <= 1'b0;
      end
      if(arbiter_askRefresh)begin
        case(arbiter_refreshState)
          2'b00 : begin
            arbiter_refreshState <= 2'b01;
          end
          2'b01 : begin
            if(allowPrechargeAll_regNext)begin
              arbiter_refreshState <= 2'b10;
            end
          end
          2'b10 : begin
            if(_zz_91)begin
              arbiter_refreshState <= 2'b11;
            end
          end
          default : begin
            if(_zz_90)begin
              arbiter_refreshState <= 2'b00;
            end
          end
        endcase
      end
    end
  end

  always @ (posedge CLKOUT1) begin
    allowPrechargeAll_regNext <= allowPrechargeAll;
  end


endmodule

module Refresher (
  input      [0:0]    io_config_readLatency,
  input      [3:0]    io_config_RAS,
  input      [3:0]    io_config_RP,
  input      [3:0]    io_config_WR,
  input      [3:0]    io_config_RCD,
  input      [3:0]    io_config_WTR,
  input      [3:0]    io_config_RTP,
  input      [3:0]    io_config_RRD,
  input      [3:0]    io_config_RTW,
  input      [6:0]    io_config_RFC,
  input      [3:0]    io_config_ODT,
  input      [1:0]    io_config_ODTend,
  input      [3:0]    io_config_FAW,
  input      [15:0]   io_config_REF,
  input               io_config_autoRefresh,
  input               io_config_noActive,
  input      [0:0]    io_config_phase_active,
  input      [0:0]    io_config_phase_precharge,
  input      [0:0]    io_config_phase_read,
  input      [0:0]    io_config_phase_write,
  output              io_refresh_valid,
  input               io_refresh_ready,
  input               CLKOUT1,
  input               sdramCd_logic_outputReset
);
  reg        [15:0]   value;
  wire                hit;
  reg                 pending;

  assign hit = (value == 16'h0);
  assign io_refresh_valid = pending;
  always @ (posedge CLKOUT1) begin
    if(sdramCd_logic_outputReset) begin
      value <= 16'h0;
      pending <= 1'b0;
    end else begin
      value <= (value - 16'h0001);
      if((hit || (! io_config_autoRefresh)))begin
        value <= io_config_REF;
      end
      if(io_refresh_ready)begin
        pending <= 1'b0;
      end
      if(hit)begin
        pending <= 1'b1;
      end
      if((! io_config_autoRefresh))begin
        pending <= 1'b0;
      end
    end
  end


endmodule

module StreamFifoCC_2 (
  input               io_push_valid,
  output              io_push_ready,
  input      [63:0]   io_push_payload_data,
  input      [7:0]    io_push_payload_mask,
  output              io_pop_valid,
  input               io_pop_ready,
  output     [63:0]   io_pop_payload_data,
  output     [7:0]    io_pop_payload_mask,
  output     [5:0]    io_pushOccupancy,
  output     [5:0]    io_popOccupancy,
  output     [5:0]    _zz_14,
  input               CLKOUT0,
  input               systemCd_logic_outputReset,
  input               CLKOUT1,
  input               sdramCd_logic_outputReset
);
  reg        [71:0]   _zz_15;
  wire       [5:0]    popToPushGray_buffercc_io_dataOut;
  wire       [5:0]    pushToPopGray_buffercc_io_dataOut;
  wire                _zz_16;
  wire       [5:0]    _zz_17;
  wire       [4:0]    _zz_18;
  wire       [5:0]    _zz_19;
  wire       [4:0]    _zz_20;
  wire       [71:0]   _zz_21;
  wire                _zz_22;
  reg                 _zz_1;
  wire       [5:0]    popToPushGray;
  wire       [5:0]    pushToPopGray;
  reg        [5:0]    pushCC_pushPtr;
  wire       [5:0]    pushCC_pushPtrPlus;
  reg        [5:0]    pushCC_pushPtrGray;
  wire       [5:0]    pushCC_popPtrGray;
  wire                pushCC_full;
  wire                _zz_2;
  wire                _zz_3;
  wire                _zz_4;
  wire                _zz_5;
  wire                _zz_6;
  reg        [5:0]    popCC_popPtr;
  wire       [5:0]    popCC_popPtrPlus;
  reg        [5:0]    popCC_popPtrGray;
  wire       [5:0]    popCC_pushPtrGray;
  wire                popCC_empty;
  wire       [5:0]    _zz_7;
  wire       [71:0]   _zz_8;
  wire                _zz_9;
  wire                _zz_10;
  wire                _zz_11;
  wire                _zz_12;
  wire                _zz_13;
  reg [71:0] ram [0:31];

  assign _zz_16 = (io_push_valid && io_push_ready);
  assign _zz_17 = (pushCC_pushPtrPlus >>> 1'b1);
  assign _zz_18 = pushCC_pushPtr[4:0];
  assign _zz_19 = (popCC_popPtrPlus >>> 1'b1);
  assign _zz_20 = _zz_7[4:0];
  assign _zz_21 = {io_push_payload_mask,io_push_payload_data};
  assign _zz_22 = 1'b1;
  always @ (posedge CLKOUT0) begin
    if(_zz_1) begin
      ram[_zz_18] <= _zz_21;
    end
  end

  always @ (posedge CLKOUT1) begin
    if(_zz_22) begin
      _zz_15 <= ram[_zz_20];
    end
  end

  BufferCC_11 popToPushGray_buffercc (
    .io_dataIn                     (popToPushGray[5:0]                      ), //i
    .io_dataOut                    (popToPushGray_buffercc_io_dataOut[5:0]  ), //o
    .CLKOUT0                       (CLKOUT0                                 ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset              )  //i
  );
  BufferCC_10 pushToPopGray_buffercc (
    .io_dataIn                    (pushToPopGray[5:0]                      ), //i
    .io_dataOut                   (pushToPopGray_buffercc_io_dataOut[5:0]  ), //o
    .CLKOUT1                      (CLKOUT1                                 ), //i
    .sdramCd_logic_outputReset    (sdramCd_logic_outputReset               )  //i
  );
  always @ (*) begin
    _zz_1 = 1'b0;
    if(_zz_16)begin
      _zz_1 = 1'b1;
    end
  end

  assign pushCC_pushPtrPlus = (pushCC_pushPtr + 6'h01);
  assign pushCC_popPtrGray = popToPushGray_buffercc_io_dataOut;
  assign pushCC_full = ((pushCC_pushPtrGray[5 : 4] == (~ pushCC_popPtrGray[5 : 4])) && (pushCC_pushPtrGray[3 : 0] == pushCC_popPtrGray[3 : 0]));
  assign io_push_ready = (! pushCC_full);
  assign _zz_2 = (pushCC_popPtrGray[1] ^ _zz_3);
  assign _zz_3 = (pushCC_popPtrGray[2] ^ _zz_4);
  assign _zz_4 = (pushCC_popPtrGray[3] ^ _zz_5);
  assign _zz_5 = (pushCC_popPtrGray[4] ^ _zz_6);
  assign _zz_6 = pushCC_popPtrGray[5];
  assign io_pushOccupancy = (pushCC_pushPtr - {_zz_6,{_zz_5,{_zz_4,{_zz_3,{_zz_2,(pushCC_popPtrGray[0] ^ _zz_2)}}}}});
  assign popCC_popPtrPlus = (popCC_popPtr + 6'h01);
  assign popCC_pushPtrGray = pushToPopGray_buffercc_io_dataOut;
  assign popCC_empty = (popCC_popPtrGray == popCC_pushPtrGray);
  assign io_pop_valid = (! popCC_empty);
  assign _zz_7 = ((io_pop_valid && io_pop_ready) ? popCC_popPtrPlus : popCC_popPtr);
  assign _zz_8 = _zz_15;
  assign io_pop_payload_data = _zz_8[63 : 0];
  assign io_pop_payload_mask = _zz_8[71 : 64];
  assign _zz_9 = (popCC_pushPtrGray[1] ^ _zz_10);
  assign _zz_10 = (popCC_pushPtrGray[2] ^ _zz_11);
  assign _zz_11 = (popCC_pushPtrGray[3] ^ _zz_12);
  assign _zz_12 = (popCC_pushPtrGray[4] ^ _zz_13);
  assign _zz_13 = popCC_pushPtrGray[5];
  assign io_popOccupancy = ({_zz_13,{_zz_12,{_zz_11,{_zz_10,{_zz_9,(popCC_pushPtrGray[0] ^ _zz_9)}}}}} - popCC_popPtr);
  assign pushToPopGray = pushCC_pushPtrGray;
  assign popToPushGray = popCC_popPtrGray;
  assign _zz_14 = popCC_pushPtrGray;
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      pushCC_pushPtr <= 6'h0;
      pushCC_pushPtrGray <= 6'h0;
    end else begin
      if((io_push_valid && io_push_ready))begin
        pushCC_pushPtrGray <= (_zz_17 ^ pushCC_pushPtrPlus);
      end
      if(_zz_16)begin
        pushCC_pushPtr <= pushCC_pushPtrPlus;
      end
    end
  end

  always @ (posedge CLKOUT1) begin
    if(sdramCd_logic_outputReset) begin
      popCC_popPtr <= 6'h0;
      popCC_popPtrGray <= 6'h0;
    end else begin
      if((io_pop_valid && io_pop_ready))begin
        popCC_popPtrGray <= (_zz_19 ^ popCC_popPtrPlus);
      end
      if((io_pop_valid && io_pop_ready))begin
        popCC_popPtr <= popCC_popPtrPlus;
      end
    end
  end


endmodule

module StreamFifoCC_1 (
  input               io_push_valid,
  output              io_push_ready,
  input               io_push_payload_last,
  input      [63:0]   io_push_payload_fragment_data,
  input      [11:0]   io_push_payload_fragment_context,
  output              io_pop_valid,
  input               io_pop_ready,
  output              io_pop_payload_last,
  output     [63:0]   io_pop_payload_fragment_data,
  output     [11:0]   io_pop_payload_fragment_context,
  output     [5:0]    io_pushOccupancy,
  output     [5:0]    io_popOccupancy,
  input               CLKOUT1,
  input               sdramCd_logic_outputReset,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  reg        [76:0]   _zz_15;
  wire       [5:0]    popToPushGray_buffercc_io_dataOut;
  wire       [5:0]    pushToPopGray_buffercc_io_dataOut;
  wire                _zz_16;
  wire       [5:0]    _zz_17;
  wire       [4:0]    _zz_18;
  wire       [5:0]    _zz_19;
  wire       [4:0]    _zz_20;
  wire       [0:0]    _zz_21;
  wire       [76:0]   _zz_22;
  wire                _zz_23;
  reg                 _zz_1;
  wire       [5:0]    popToPushGray;
  wire       [5:0]    pushToPopGray;
  reg        [5:0]    pushCC_pushPtr;
  wire       [5:0]    pushCC_pushPtrPlus;
  reg        [5:0]    pushCC_pushPtrGray;
  wire       [5:0]    pushCC_popPtrGray;
  wire                pushCC_full;
  wire                _zz_2;
  wire                _zz_3;
  wire                _zz_4;
  wire                _zz_5;
  wire                _zz_6;
  reg        [5:0]    popCC_popPtr;
  wire       [5:0]    popCC_popPtrPlus;
  reg        [5:0]    popCC_popPtrGray;
  wire       [5:0]    popCC_pushPtrGray;
  wire                popCC_empty;
  wire       [5:0]    _zz_7;
  wire       [76:0]   _zz_8;
  wire       [75:0]   _zz_9;
  wire                _zz_10;
  wire                _zz_11;
  wire                _zz_12;
  wire                _zz_13;
  wire                _zz_14;
  reg [76:0] ram [0:31];

  assign _zz_16 = (io_push_valid && io_push_ready);
  assign _zz_17 = (pushCC_pushPtrPlus >>> 1'b1);
  assign _zz_18 = pushCC_pushPtr[4:0];
  assign _zz_19 = (popCC_popPtrPlus >>> 1'b1);
  assign _zz_20 = _zz_7[4:0];
  assign _zz_21 = _zz_8[0 : 0];
  assign _zz_22 = {{io_push_payload_fragment_context,io_push_payload_fragment_data},io_push_payload_last};
  assign _zz_23 = 1'b1;
  always @ (posedge CLKOUT1) begin
    if(_zz_1) begin
      ram[_zz_18] <= _zz_22;
    end
  end

  always @ (posedge CLKOUT0) begin
    if(_zz_23) begin
      _zz_15 <= ram[_zz_20];
    end
  end

  BufferCC_10 popToPushGray_buffercc (
    .io_dataIn                    (popToPushGray[5:0]                      ), //i
    .io_dataOut                   (popToPushGray_buffercc_io_dataOut[5:0]  ), //o
    .CLKOUT1                      (CLKOUT1                                 ), //i
    .sdramCd_logic_outputReset    (sdramCd_logic_outputReset               )  //i
  );
  BufferCC_11 pushToPopGray_buffercc (
    .io_dataIn                     (pushToPopGray[5:0]                      ), //i
    .io_dataOut                    (pushToPopGray_buffercc_io_dataOut[5:0]  ), //o
    .CLKOUT0                       (CLKOUT0                                 ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset              )  //i
  );
  always @ (*) begin
    _zz_1 = 1'b0;
    if(_zz_16)begin
      _zz_1 = 1'b1;
    end
  end

  assign pushCC_pushPtrPlus = (pushCC_pushPtr + 6'h01);
  assign pushCC_popPtrGray = popToPushGray_buffercc_io_dataOut;
  assign pushCC_full = ((pushCC_pushPtrGray[5 : 4] == (~ pushCC_popPtrGray[5 : 4])) && (pushCC_pushPtrGray[3 : 0] == pushCC_popPtrGray[3 : 0]));
  assign io_push_ready = (! pushCC_full);
  assign _zz_2 = (pushCC_popPtrGray[1] ^ _zz_3);
  assign _zz_3 = (pushCC_popPtrGray[2] ^ _zz_4);
  assign _zz_4 = (pushCC_popPtrGray[3] ^ _zz_5);
  assign _zz_5 = (pushCC_popPtrGray[4] ^ _zz_6);
  assign _zz_6 = pushCC_popPtrGray[5];
  assign io_pushOccupancy = (pushCC_pushPtr - {_zz_6,{_zz_5,{_zz_4,{_zz_3,{_zz_2,(pushCC_popPtrGray[0] ^ _zz_2)}}}}});
  assign popCC_popPtrPlus = (popCC_popPtr + 6'h01);
  assign popCC_pushPtrGray = pushToPopGray_buffercc_io_dataOut;
  assign popCC_empty = (popCC_popPtrGray == popCC_pushPtrGray);
  assign io_pop_valid = (! popCC_empty);
  assign _zz_7 = ((io_pop_valid && io_pop_ready) ? popCC_popPtrPlus : popCC_popPtr);
  assign _zz_8 = _zz_15;
  assign _zz_9 = _zz_8[76 : 1];
  assign io_pop_payload_last = _zz_21[0];
  assign io_pop_payload_fragment_data = _zz_9[63 : 0];
  assign io_pop_payload_fragment_context = _zz_9[75 : 64];
  assign _zz_10 = (popCC_pushPtrGray[1] ^ _zz_11);
  assign _zz_11 = (popCC_pushPtrGray[2] ^ _zz_12);
  assign _zz_12 = (popCC_pushPtrGray[3] ^ _zz_13);
  assign _zz_13 = (popCC_pushPtrGray[4] ^ _zz_14);
  assign _zz_14 = popCC_pushPtrGray[5];
  assign io_popOccupancy = ({_zz_14,{_zz_13,{_zz_12,{_zz_11,{_zz_10,(popCC_pushPtrGray[0] ^ _zz_10)}}}}} - popCC_popPtr);
  assign pushToPopGray = pushCC_pushPtrGray;
  assign popToPushGray = popCC_popPtrGray;
  always @ (posedge CLKOUT1) begin
    if(sdramCd_logic_outputReset) begin
      pushCC_pushPtr <= 6'h0;
      pushCC_pushPtrGray <= 6'h0;
    end else begin
      if((io_push_valid && io_push_ready))begin
        pushCC_pushPtrGray <= (_zz_17 ^ pushCC_pushPtrPlus);
      end
      if(_zz_16)begin
        pushCC_pushPtr <= pushCC_pushPtrPlus;
      end
    end
  end

  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      popCC_popPtr <= 6'h0;
      popCC_popPtrGray <= 6'h0;
    end else begin
      if((io_pop_valid && io_pop_ready))begin
        popCC_popPtrGray <= (_zz_19 ^ popCC_popPtrPlus);
      end
      if((io_pop_valid && io_pop_ready))begin
        popCC_popPtr <= popCC_popPtrPlus;
      end
    end
  end


endmodule

module StreamFifoCC (
  input               io_push_valid,
  output              io_push_ready,
  input               io_push_payload_write,
  input      [26:0]   io_push_payload_address,
  input      [11:0]   io_push_payload_context,
  input               io_push_payload_burstLast,
  input      [2:0]    io_push_payload_length,
  output              io_pop_valid,
  input               io_pop_ready,
  output              io_pop_payload_write,
  output     [26:0]   io_pop_payload_address,
  output     [11:0]   io_pop_payload_context,
  output              io_pop_payload_burstLast,
  output     [2:0]    io_pop_payload_length,
  output     [4:0]    io_pushOccupancy,
  output     [4:0]    io_popOccupancy,
  input               CLKOUT0,
  input               systemCd_logic_outputReset,
  input               CLKOUT1,
  input               sdramCd_logic_outputReset
);
  reg        [43:0]   _zz_12;
  wire       [4:0]    popToPushGray_buffercc_io_dataOut;
  wire       [4:0]    pushToPopGray_buffercc_io_dataOut;
  wire                _zz_13;
  wire       [4:0]    _zz_14;
  wire       [3:0]    _zz_15;
  wire       [4:0]    _zz_16;
  wire       [3:0]    _zz_17;
  wire       [0:0]    _zz_18;
  wire       [0:0]    _zz_19;
  wire       [43:0]   _zz_20;
  wire                _zz_21;
  reg                 _zz_1;
  wire       [4:0]    popToPushGray;
  wire       [4:0]    pushToPopGray;
  reg        [4:0]    pushCC_pushPtr;
  wire       [4:0]    pushCC_pushPtrPlus;
  reg        [4:0]    pushCC_pushPtrGray;
  wire       [4:0]    pushCC_popPtrGray;
  wire                pushCC_full;
  wire                _zz_2;
  wire                _zz_3;
  wire                _zz_4;
  wire                _zz_5;
  reg        [4:0]    popCC_popPtr;
  wire       [4:0]    popCC_popPtrPlus;
  reg        [4:0]    popCC_popPtrGray;
  wire       [4:0]    popCC_pushPtrGray;
  wire                popCC_empty;
  wire       [4:0]    _zz_6;
  wire       [43:0]   _zz_7;
  wire                _zz_8;
  wire                _zz_9;
  wire                _zz_10;
  wire                _zz_11;
  reg [43:0] ram [0:15];

  assign _zz_13 = (io_push_valid && io_push_ready);
  assign _zz_14 = (pushCC_pushPtrPlus >>> 1'b1);
  assign _zz_15 = pushCC_pushPtr[3:0];
  assign _zz_16 = (popCC_popPtrPlus >>> 1'b1);
  assign _zz_17 = _zz_6[3:0];
  assign _zz_18 = _zz_7[0 : 0];
  assign _zz_19 = _zz_7[40 : 40];
  assign _zz_20 = {io_push_payload_length,{io_push_payload_burstLast,{io_push_payload_context,{io_push_payload_address,io_push_payload_write}}}};
  assign _zz_21 = 1'b1;
  always @ (posedge CLKOUT0) begin
    if(_zz_1) begin
      ram[_zz_15] <= _zz_20;
    end
  end

  always @ (posedge CLKOUT1) begin
    if(_zz_21) begin
      _zz_12 <= ram[_zz_17];
    end
  end

  BufferCC_8 popToPushGray_buffercc (
    .io_dataIn                     (popToPushGray[4:0]                      ), //i
    .io_dataOut                    (popToPushGray_buffercc_io_dataOut[4:0]  ), //o
    .CLKOUT0                       (CLKOUT0                                 ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset              )  //i
  );
  BufferCC_9 pushToPopGray_buffercc (
    .io_dataIn                    (pushToPopGray[4:0]                      ), //i
    .io_dataOut                   (pushToPopGray_buffercc_io_dataOut[4:0]  ), //o
    .CLKOUT1                      (CLKOUT1                                 ), //i
    .sdramCd_logic_outputReset    (sdramCd_logic_outputReset               )  //i
  );
  always @ (*) begin
    _zz_1 = 1'b0;
    if(_zz_13)begin
      _zz_1 = 1'b1;
    end
  end

  assign pushCC_pushPtrPlus = (pushCC_pushPtr + 5'h01);
  assign pushCC_popPtrGray = popToPushGray_buffercc_io_dataOut;
  assign pushCC_full = ((pushCC_pushPtrGray[4 : 3] == (~ pushCC_popPtrGray[4 : 3])) && (pushCC_pushPtrGray[2 : 0] == pushCC_popPtrGray[2 : 0]));
  assign io_push_ready = (! pushCC_full);
  assign _zz_2 = (pushCC_popPtrGray[1] ^ _zz_3);
  assign _zz_3 = (pushCC_popPtrGray[2] ^ _zz_4);
  assign _zz_4 = (pushCC_popPtrGray[3] ^ _zz_5);
  assign _zz_5 = pushCC_popPtrGray[4];
  assign io_pushOccupancy = (pushCC_pushPtr - {_zz_5,{_zz_4,{_zz_3,{_zz_2,(pushCC_popPtrGray[0] ^ _zz_2)}}}});
  assign popCC_popPtrPlus = (popCC_popPtr + 5'h01);
  assign popCC_pushPtrGray = pushToPopGray_buffercc_io_dataOut;
  assign popCC_empty = (popCC_popPtrGray == popCC_pushPtrGray);
  assign io_pop_valid = (! popCC_empty);
  assign _zz_6 = ((io_pop_valid && io_pop_ready) ? popCC_popPtrPlus : popCC_popPtr);
  assign _zz_7 = _zz_12;
  assign io_pop_payload_write = _zz_18[0];
  assign io_pop_payload_address = _zz_7[27 : 1];
  assign io_pop_payload_context = _zz_7[39 : 28];
  assign io_pop_payload_burstLast = _zz_19[0];
  assign io_pop_payload_length = _zz_7[43 : 41];
  assign _zz_8 = (popCC_pushPtrGray[1] ^ _zz_9);
  assign _zz_9 = (popCC_pushPtrGray[2] ^ _zz_10);
  assign _zz_10 = (popCC_pushPtrGray[3] ^ _zz_11);
  assign _zz_11 = popCC_pushPtrGray[4];
  assign io_popOccupancy = ({_zz_11,{_zz_10,{_zz_9,{_zz_8,(popCC_pushPtrGray[0] ^ _zz_8)}}}} - popCC_popPtr);
  assign pushToPopGray = pushCC_pushPtrGray;
  assign popToPushGray = popCC_popPtrGray;
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      pushCC_pushPtr <= 5'h0;
      pushCC_pushPtrGray <= 5'h0;
    end else begin
      if((io_push_valid && io_push_ready))begin
        pushCC_pushPtrGray <= (_zz_14 ^ pushCC_pushPtrPlus);
      end
      if(_zz_13)begin
        pushCC_pushPtr <= pushCC_pushPtrPlus;
      end
    end
  end

  always @ (posedge CLKOUT1) begin
    if(sdramCd_logic_outputReset) begin
      popCC_popPtr <= 5'h0;
      popCC_popPtrGray <= 5'h0;
    end else begin
      if((io_pop_valid && io_pop_ready))begin
        popCC_popPtrGray <= (_zz_16 ^ popCC_popPtrPlus);
      end
      if((io_pop_valid && io_pop_ready))begin
        popCC_popPtr <= popCC_popPtrPlus;
      end
    end
  end


endmodule

module BmbToCorePort (
  input               io_input_cmd_valid,
  output reg          io_input_cmd_ready,
  input               io_input_cmd_payload_last,
  input      [0:0]    io_input_cmd_payload_fragment_opcode,
  input      [26:0]   io_input_cmd_payload_fragment_address,
  input      [5:0]    io_input_cmd_payload_fragment_length,
  input      [63:0]   io_input_cmd_payload_fragment_data,
  input      [7:0]    io_input_cmd_payload_fragment_mask,
  input      [11:0]   io_input_cmd_payload_fragment_context,
  output              io_input_rsp_valid,
  input               io_input_rsp_ready,
  output              io_input_rsp_payload_last,
  output     [0:0]    io_input_rsp_payload_fragment_opcode,
  output     [63:0]   io_input_rsp_payload_fragment_data,
  output     [11:0]   io_input_rsp_payload_fragment_context,
  input               io_inputBurstLast,
  output              io_output_cmd_valid,
  input               io_output_cmd_ready,
  output              io_output_cmd_payload_write,
  output     [26:0]   io_output_cmd_payload_address,
  output     [11:0]   io_output_cmd_payload_context,
  output              io_output_cmd_payload_burstLast,
  output     [2:0]    io_output_cmd_payload_length,
  output              io_output_writeData_valid,
  input               io_output_writeData_ready,
  output     [63:0]   io_output_writeData_payload_data,
  output     [7:0]    io_output_writeData_payload_mask,
  output     [0:0]    io_output_writeDataTocken,
  input               io_output_rsp_valid,
  output              io_output_rsp_ready,
  input               io_output_rsp_payload_last,
  input      [63:0]   io_output_rsp_payload_fragment_data,
  input      [11:0]   io_output_rsp_payload_fragment_context,
  output     [0:0]    io_output_writeDataAdded,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  wire       [3:0]    _zz_1;
  wire       [1:0]    _zz_2;
  wire       [3:0]    _zz_3;
  wire       [5:0]    _zz_4;
  wire       [3:0]    _zz_5;
  wire       [5:0]    _zz_6;
  wire       [0:0]    _zz_7;
  wire       [5:0]    _zz_8;
  wire       [6:0]    _zz_9;
  wire       [6:0]    _zz_10;
  wire       [3:0]    cmdToRspCount;
  reg        [5:0]    rspPendingCounter;
  wire                toManyRsp;
  wire       [11:0]   cmdContext_input;
  reg                 io_input_cmd_payload_first;
  wire       [11:0]   rspContext_input;

  assign _zz_1 = ({1'b0,io_output_cmd_payload_length} + _zz_3);
  assign _zz_2 = {1'b0,1'b1};
  assign _zz_3 = {2'd0, _zz_2};
  assign _zz_4 = (rspPendingCounter + _zz_6);
  assign _zz_5 = (((io_input_cmd_valid && io_input_cmd_ready) && io_input_cmd_payload_last) ? cmdToRspCount : 4'b0000);
  assign _zz_6 = {2'd0, _zz_5};
  assign _zz_7 = (io_output_rsp_valid && io_output_rsp_ready);
  assign _zz_8 = {5'd0, _zz_7};
  assign _zz_9 = ({1'b0,rspPendingCounter} + _zz_10);
  assign _zz_10 = {3'd0, cmdToRspCount};
  assign cmdToRspCount = (io_output_cmd_payload_write ? 4'b0001 : _zz_1);
  assign toManyRsp = (7'h20 < _zz_9);
  always @ (*) begin
    io_input_cmd_ready = (io_output_cmd_ready && (! toManyRsp));
    if((! io_output_writeData_ready))begin
      io_input_cmd_ready = 1'b0;
    end
  end

  assign cmdContext_input = io_input_cmd_payload_fragment_context;
  assign io_output_cmd_valid = ((io_input_cmd_valid && io_input_cmd_ready) && io_input_cmd_payload_first);
  assign io_output_cmd_payload_write = (io_input_cmd_payload_fragment_opcode == 1'b1);
  assign io_output_cmd_payload_address = io_input_cmd_payload_fragment_address;
  assign io_output_cmd_payload_length = (io_input_cmd_payload_fragment_length >>> 3);
  assign io_output_cmd_payload_context = cmdContext_input;
  assign io_output_cmd_payload_burstLast = io_inputBurstLast;
  assign io_output_writeData_valid = ((io_input_cmd_valid && io_input_cmd_ready) && (io_input_cmd_payload_fragment_opcode == 1'b1));
  assign io_output_writeData_payload_data = io_input_cmd_payload_fragment_data;
  assign io_output_writeData_payload_mask = io_input_cmd_payload_fragment_mask;
  assign rspContext_input = io_output_rsp_payload_fragment_context[11 : 0];
  assign io_input_rsp_valid = io_output_rsp_valid;
  assign io_output_rsp_ready = io_input_rsp_ready;
  assign io_input_rsp_payload_fragment_opcode = 1'b0;
  assign io_input_rsp_payload_last = io_output_rsp_payload_last;
  assign io_input_rsp_payload_fragment_data = io_output_rsp_payload_fragment_data;
  assign io_input_rsp_payload_fragment_context = rspContext_input;
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      rspPendingCounter <= 6'h0;
      io_input_cmd_payload_first <= 1'b1;
    end else begin
      rspPendingCounter <= (_zz_4 - _zz_8);
      if((io_input_cmd_valid && io_input_cmd_ready))begin
        io_input_cmd_payload_first <= io_input_cmd_payload_last;
      end
    end
  end


endmodule

module BmbAlignedSpliter (
  input               io_input_cmd_valid,
  output              io_input_cmd_ready,
  input               io_input_cmd_payload_last,
  input      [0:0]    io_input_cmd_payload_fragment_opcode,
  input      [26:0]   io_input_cmd_payload_fragment_address,
  input      [6:0]    io_input_cmd_payload_fragment_length,
  input      [63:0]   io_input_cmd_payload_fragment_data,
  input      [7:0]    io_input_cmd_payload_fragment_mask,
  input      [9:0]    io_input_cmd_payload_fragment_context,
  output              io_input_rsp_valid,
  input               io_input_rsp_ready,
  output              io_input_rsp_payload_last,
  output     [0:0]    io_input_rsp_payload_fragment_opcode,
  output     [63:0]   io_input_rsp_payload_fragment_data,
  output     [9:0]    io_input_rsp_payload_fragment_context,
  output              io_output_cmd_valid,
  input               io_output_cmd_ready,
  output              io_output_cmd_payload_last,
  output     [0:0]    io_output_cmd_payload_fragment_opcode,
  output     [26:0]   io_output_cmd_payload_fragment_address,
  output     [5:0]    io_output_cmd_payload_fragment_length,
  output     [63:0]   io_output_cmd_payload_fragment_data,
  output     [7:0]    io_output_cmd_payload_fragment_mask,
  output     [11:0]   io_output_cmd_payload_fragment_context,
  input               io_output_rsp_valid,
  output reg          io_output_rsp_ready,
  input               io_output_rsp_payload_last,
  input      [0:0]    io_output_rsp_payload_fragment_opcode,
  input      [63:0]   io_output_rsp_payload_fragment_data,
  input      [11:0]   io_output_rsp_payload_fragment_context,
  output              io_outputBurstLast,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  wire                _zz_3;
  wire       [1:0]    _zz_4;
  wire       [5:0]    _zz_5;
  wire       [7:0]    _zz_6;
  wire       [2:0]    _zz_7;
  wire       [3:0]    _zz_8;
  wire       [3:0]    _zz_9;
  wire       [3:0]    _zz_10;
  wire       [11:0]   _zz_11;
  wire       [11:0]   _zz_12;
  wire       [11:0]   _zz_13;
  wire       [7:0]    _zz_14;
  wire       [11:0]   _zz_15;
  wire       [0:0]    _zz_16;
  wire       [2:0]    _zz_17;
  wire       [0:0]    _zz_18;
  wire       [1:0]    _zz_19;
  wire       [0:0]    _zz_20;
  wire       [0:0]    _zz_21;
  reg        [2:0]    cmdLogic_beatCounter;
  reg        [1:0]    cmdLogic_splitCounter;
  wire       [5:0]    cmdLogic_headLenghtMax;
  wire       [7:0]    cmdLogic_lastAddress;
  wire       [5:0]    cmdLogic_tailLength;
  wire       [1:0]    cmdLogic_splitCount;
  reg                 cmdLogic_firstSplit;
  wire                cmdLogic_lastSplit;
  reg        [26:0]   cmdLogic_addressBase;
  wire       [3:0]    cmdLogic_beatsInSplit;
  wire                cmdLogic_context_last;
  wire                cmdLogic_context_write;
  wire       [9:0]    cmdLogic_context_input;
  reg        [5:0]    _zz_1;
  wire                rspLogic_context_last;
  wire                rspLogic_context_write;
  wire       [9:0]    rspLogic_context_input;
  wire       [11:0]   _zz_2;
  reg                 io_output_rsp_thrown_valid;
  wire                io_output_rsp_thrown_ready;
  wire                io_output_rsp_thrown_payload_last;
  wire       [0:0]    io_output_rsp_thrown_payload_fragment_opcode;
  wire       [63:0]   io_output_rsp_thrown_payload_fragment_data;
  wire       [11:0]   io_output_rsp_thrown_payload_fragment_context;

  assign _zz_3 = (! ((! rspLogic_context_write) || (rspLogic_context_last && io_output_rsp_payload_last)));
  assign _zz_4 = {cmdLogic_firstSplit,cmdLogic_lastSplit};
  assign _zz_5 = io_input_cmd_payload_fragment_address[5 : 0];
  assign _zz_6 = {2'd0, _zz_5};
  assign _zz_7 = (cmdLogic_firstSplit ? io_input_cmd_payload_fragment_address[5 : 3] : 3'b000);
  assign _zz_8 = {1'd0, _zz_7};
  assign _zz_9 = {1'd0, cmdLogic_beatCounter};
  assign _zz_10 = (cmdLogic_beatsInSplit - 4'b0001);
  assign _zz_11 = (_zz_13 + _zz_15);
  assign _zz_12 = cmdLogic_addressBase[11 : 0];
  assign _zz_13 = _zz_12;
  assign _zz_14 = ({6'd0,cmdLogic_splitCounter} <<< 6);
  assign _zz_15 = {4'd0, _zz_14};
  assign _zz_16 = (io_input_cmd_payload_fragment_opcode == 1'b1);
  assign _zz_17 = {2'd0, _zz_16};
  assign _zz_18 = 1'b1;
  assign _zz_19 = {1'd0, _zz_18};
  assign _zz_20 = _zz_2[0 : 0];
  assign _zz_21 = _zz_2[1 : 1];
  assign cmdLogic_headLenghtMax = (6'h3f - io_input_cmd_payload_fragment_address[5 : 0]);
  assign cmdLogic_lastAddress = (_zz_6 + {1'b0,io_input_cmd_payload_fragment_length});
  assign cmdLogic_tailLength = cmdLogic_lastAddress[5 : 0];
  assign cmdLogic_splitCount = (cmdLogic_lastAddress >>> 6);
  assign cmdLogic_lastSplit = (cmdLogic_splitCounter == cmdLogic_splitCount);
  always @ (*) begin
    cmdLogic_addressBase = io_input_cmd_payload_fragment_address;
    if((! cmdLogic_firstSplit))begin
      cmdLogic_addressBase[5 : 0] = 6'h0;
    end
  end

  assign cmdLogic_beatsInSplit = (4'b1000 - _zz_8);
  assign cmdLogic_context_input = io_input_cmd_payload_fragment_context;
  assign cmdLogic_context_last = cmdLogic_lastSplit;
  assign cmdLogic_context_write = (io_input_cmd_payload_fragment_opcode == 1'b1);
  assign io_output_cmd_valid = io_input_cmd_valid;
  assign io_output_cmd_payload_last = (io_input_cmd_payload_last || (_zz_9 == _zz_10));
  assign io_output_cmd_payload_fragment_address = {cmdLogic_addressBase[26 : 12],_zz_11};
  assign io_output_cmd_payload_fragment_context = {cmdLogic_context_input,{cmdLogic_context_write,cmdLogic_context_last}};
  assign io_output_cmd_payload_fragment_opcode = io_input_cmd_payload_fragment_opcode;
  always @ (*) begin
    case(_zz_4)
      2'b10 : begin
        _zz_1 = cmdLogic_headLenghtMax;
      end
      2'b00 : begin
        _zz_1 = 6'h3f;
      end
      2'b01 : begin
        _zz_1 = cmdLogic_tailLength;
      end
      default : begin
        _zz_1 = io_input_cmd_payload_fragment_length[5:0];
      end
    endcase
  end

  assign io_output_cmd_payload_fragment_length = _zz_1;
  assign io_output_cmd_payload_fragment_data = io_input_cmd_payload_fragment_data;
  assign io_output_cmd_payload_fragment_mask = io_input_cmd_payload_fragment_mask;
  assign io_outputBurstLast = cmdLogic_context_last;
  assign io_input_cmd_ready = (io_output_cmd_ready && ((io_input_cmd_payload_fragment_opcode == 1'b1) || cmdLogic_context_last));
  assign _zz_2 = io_output_rsp_payload_fragment_context;
  assign rspLogic_context_last = _zz_20[0];
  assign rspLogic_context_write = _zz_21[0];
  assign rspLogic_context_input = _zz_2[11 : 2];
  always @ (*) begin
    io_output_rsp_thrown_valid = io_output_rsp_valid;
    if(_zz_3)begin
      io_output_rsp_thrown_valid = 1'b0;
    end
  end

  always @ (*) begin
    io_output_rsp_ready = io_output_rsp_thrown_ready;
    if(_zz_3)begin
      io_output_rsp_ready = 1'b1;
    end
  end

  assign io_output_rsp_thrown_payload_last = io_output_rsp_payload_last;
  assign io_output_rsp_thrown_payload_fragment_opcode = io_output_rsp_payload_fragment_opcode;
  assign io_output_rsp_thrown_payload_fragment_data = io_output_rsp_payload_fragment_data;
  assign io_output_rsp_thrown_payload_fragment_context = io_output_rsp_payload_fragment_context;
  assign io_input_rsp_valid = io_output_rsp_thrown_valid;
  assign io_output_rsp_thrown_ready = io_input_rsp_ready;
  assign io_input_rsp_payload_last = (io_output_rsp_payload_last && rspLogic_context_last);
  assign io_input_rsp_payload_fragment_opcode = io_output_rsp_payload_fragment_opcode;
  assign io_input_rsp_payload_fragment_data = io_output_rsp_payload_fragment_data;
  assign io_input_rsp_payload_fragment_context = rspLogic_context_input;
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      cmdLogic_beatCounter <= 3'b000;
      cmdLogic_splitCounter <= 2'b00;
      cmdLogic_firstSplit <= 1'b1;
    end else begin
      if(((io_output_cmd_valid && io_output_cmd_ready) && io_output_cmd_payload_last))begin
        cmdLogic_firstSplit <= 1'b0;
      end
      if((io_output_cmd_valid && io_output_cmd_ready))begin
        cmdLogic_beatCounter <= (cmdLogic_beatCounter + _zz_17);
        if(io_output_cmd_payload_last)begin
          cmdLogic_splitCounter <= (cmdLogic_splitCounter + _zz_19);
          cmdLogic_beatCounter <= 3'b000;
        end
      end
      if(((io_input_cmd_valid && io_input_cmd_ready) && io_input_cmd_payload_last))begin
        cmdLogic_splitCounter <= 2'b00;
        cmdLogic_firstSplit <= 1'b1;
      end
    end
  end


endmodule

module BmbAligner (
  input               io_input_cmd_valid,
  output              io_input_cmd_ready,
  input               io_input_cmd_payload_last,
  input      [4:0]    io_input_cmd_payload_fragment_source,
  input      [0:0]    io_input_cmd_payload_fragment_opcode,
  input      [26:0]   io_input_cmd_payload_fragment_address,
  input      [5:0]    io_input_cmd_payload_fragment_length,
  input      [63:0]   io_input_cmd_payload_fragment_data,
  input      [7:0]    io_input_cmd_payload_fragment_mask,
  output              io_input_rsp_valid,
  input               io_input_rsp_ready,
  output reg          io_input_rsp_payload_last,
  output     [4:0]    io_input_rsp_payload_fragment_source,
  output     [0:0]    io_input_rsp_payload_fragment_opcode,
  output     [63:0]   io_input_rsp_payload_fragment_data,
  output              io_output_cmd_valid,
  input               io_output_cmd_ready,
  output reg          io_output_cmd_payload_last,
  output     [0:0]    io_output_cmd_payload_fragment_opcode,
  output     [26:0]   io_output_cmd_payload_fragment_address,
  output     [6:0]    io_output_cmd_payload_fragment_length,
  output     [63:0]   io_output_cmd_payload_fragment_data,
  output     [7:0]    io_output_cmd_payload_fragment_mask,
  output     [9:0]    io_output_cmd_payload_fragment_context,
  input               io_output_rsp_valid,
  output reg          io_output_rsp_ready,
  input               io_output_rsp_payload_last,
  input      [0:0]    io_output_rsp_payload_fragment_opcode,
  input      [63:0]   io_output_rsp_payload_fragment_data,
  input      [9:0]    io_output_rsp_payload_fragment_context,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  wire       [6:0]    _zz_2;
  wire       [2:0]    _zz_3;
  wire       [6:0]    _zz_4;
  wire       [6:0]    _zz_5;
  wire       [6:0]    _zz_6;
  wire       [2:0]    _zz_7;
  wire       [6:0]    _zz_8;
  wire       [0:0]    _zz_9;
  wire                logic_cmdLogic_context_write;
  wire       [3:0]    logic_cmdLogic_context_transfers;
  wire       [4:0]    logic_cmdLogic_context_source;
  reg                 logic_cmdLogic_inputReadyOk;
  reg                 io_input_cmd_payload_first;
  wire                logic_cmdLogic_forWrite_prePadding;
  reg                 logic_cmdLogic_forWrite_postPadding;
  wire                logic_rspLogic_context_write;
  wire       [3:0]    logic_rspLogic_context_transfers;
  wire       [4:0]    logic_rspLogic_context_source;
  wire       [9:0]    _zz_1;
  reg                 logic_rspLogic_drop;
  reg                 io_output_rsp_thrown_valid;
  wire                io_output_rsp_thrown_ready;
  wire                io_output_rsp_thrown_payload_last;
  wire       [0:0]    io_output_rsp_thrown_payload_fragment_opcode;
  wire       [63:0]   io_output_rsp_thrown_payload_fragment_data;
  wire       [9:0]    io_output_rsp_thrown_payload_fragment_context;
  reg        [3:0]    logic_rspLogic_forRead_transferCounter;
  reg                 io_input_rsp_payload_first;

  assign _zz_2 = (_zz_4 + _zz_5);
  assign _zz_3 = io_input_cmd_payload_fragment_address[2 : 0];
  assign _zz_4 = {4'd0, _zz_3};
  assign _zz_5 = {1'd0, io_input_cmd_payload_fragment_length};
  assign _zz_6 = ({1'b0,io_input_cmd_payload_fragment_length} + _zz_8);
  assign _zz_7 = io_input_cmd_payload_fragment_address[2 : 0];
  assign _zz_8 = {4'd0, _zz_7};
  assign _zz_9 = _zz_1[0 : 0];
  assign io_output_cmd_valid = io_input_cmd_valid;
  assign io_output_cmd_payload_fragment_address = ({3'd0,io_input_cmd_payload_fragment_address[26 : 3]} <<< 3);
  assign io_output_cmd_payload_fragment_opcode = io_input_cmd_payload_fragment_opcode;
  assign io_output_cmd_payload_fragment_length = (_zz_2 | 7'h07);
  always @ (*) begin
    io_output_cmd_payload_last = 1'b0;
    if((io_input_cmd_payload_last && 1'b1))begin
      io_output_cmd_payload_last = 1'b1;
    end
    if((io_input_cmd_payload_fragment_opcode == 1'b0))begin
      io_output_cmd_payload_last = 1'b1;
    end
  end

  assign logic_cmdLogic_context_write = (io_input_cmd_payload_fragment_opcode == 1'b1);
  assign logic_cmdLogic_context_source = io_input_cmd_payload_fragment_source;
  assign io_output_cmd_payload_fragment_context = {logic_cmdLogic_context_source,{logic_cmdLogic_context_transfers,logic_cmdLogic_context_write}};
  always @ (*) begin
    logic_cmdLogic_inputReadyOk = 1'b0;
    if(((! logic_cmdLogic_forWrite_prePadding) && (! (io_input_cmd_payload_last && 1'b0))))begin
      logic_cmdLogic_inputReadyOk = 1'b1;
    end
    if((io_input_cmd_payload_fragment_opcode == 1'b0))begin
      logic_cmdLogic_inputReadyOk = 1'b1;
    end
  end

  assign io_input_cmd_ready = (io_output_cmd_ready && logic_cmdLogic_inputReadyOk);
  assign logic_cmdLogic_forWrite_prePadding = (((io_input_cmd_payload_fragment_opcode == 1'b1) && io_input_cmd_payload_first) && 1'b0);
  assign io_output_cmd_payload_fragment_data = io_input_cmd_payload_fragment_data;
  assign io_output_cmd_payload_fragment_mask = ((! (logic_cmdLogic_forWrite_prePadding || logic_cmdLogic_forWrite_postPadding)) ? io_input_cmd_payload_fragment_mask : 8'h0);
  assign logic_cmdLogic_context_transfers = _zz_6[6 : 3];
  assign _zz_1 = io_output_rsp_payload_fragment_context;
  assign logic_rspLogic_context_write = _zz_9[0];
  assign logic_rspLogic_context_transfers = _zz_1[4 : 1];
  assign logic_rspLogic_context_source = _zz_1[9 : 5];
  always @ (*) begin
    logic_rspLogic_drop = 1'b0;
    if(((! logic_rspLogic_context_write) && ((io_input_rsp_payload_first && 1'b0) || (logic_rspLogic_context_transfers < logic_rspLogic_forRead_transferCounter))))begin
      logic_rspLogic_drop = 1'b1;
    end
  end

  always @ (*) begin
    io_output_rsp_thrown_valid = io_output_rsp_valid;
    if(logic_rspLogic_drop)begin
      io_output_rsp_thrown_valid = 1'b0;
    end
  end

  always @ (*) begin
    io_output_rsp_ready = io_output_rsp_thrown_ready;
    if(logic_rspLogic_drop)begin
      io_output_rsp_ready = 1'b1;
    end
  end

  assign io_output_rsp_thrown_payload_last = io_output_rsp_payload_last;
  assign io_output_rsp_thrown_payload_fragment_opcode = io_output_rsp_payload_fragment_opcode;
  assign io_output_rsp_thrown_payload_fragment_data = io_output_rsp_payload_fragment_data;
  assign io_output_rsp_thrown_payload_fragment_context = io_output_rsp_payload_fragment_context;
  assign io_input_rsp_valid = io_output_rsp_thrown_valid;
  assign io_output_rsp_thrown_ready = io_input_rsp_ready;
  always @ (*) begin
    io_input_rsp_payload_last = 1'b0;
    if((logic_rspLogic_forRead_transferCounter == logic_rspLogic_context_transfers))begin
      io_input_rsp_payload_last = 1'b1;
    end
    if(logic_rspLogic_context_write)begin
      io_input_rsp_payload_last = 1'b1;
    end
  end

  assign io_input_rsp_payload_fragment_opcode = io_output_rsp_payload_fragment_opcode;
  assign io_input_rsp_payload_fragment_source = logic_rspLogic_context_source;
  assign io_input_rsp_payload_fragment_data = io_output_rsp_payload_fragment_data;
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      io_input_cmd_payload_first <= 1'b1;
      logic_cmdLogic_forWrite_postPadding <= 1'b0;
      logic_rspLogic_forRead_transferCounter <= 4'b0000;
      io_input_rsp_payload_first <= 1'b1;
    end else begin
      if((io_input_cmd_valid && io_input_cmd_ready))begin
        io_input_cmd_payload_first <= io_input_cmd_payload_last;
      end
      if((((! logic_cmdLogic_forWrite_prePadding) && (io_output_cmd_valid && io_output_cmd_ready)) && io_input_cmd_payload_last))begin
        logic_cmdLogic_forWrite_postPadding <= 1'b1;
      end
      if(io_input_cmd_ready)begin
        logic_cmdLogic_forWrite_postPadding <= 1'b0;
      end
      if((io_input_rsp_valid && io_input_rsp_ready))begin
        logic_rspLogic_forRead_transferCounter <= (logic_rspLogic_forRead_transferCounter + 4'b0001);
      end
      if(((io_output_rsp_valid && io_output_rsp_ready) && io_output_rsp_payload_last))begin
        logic_rspLogic_forRead_transferCounter <= 4'b0000;
      end
      if((io_input_rsp_valid && io_input_rsp_ready))begin
        io_input_rsp_payload_first <= io_input_rsp_payload_last;
      end
    end
  end


endmodule

//UIntToSigmaDeltaFirstOrder replaced by UIntToSigmaDeltaFirstOrder

module UIntToSigmaDeltaFirstOrder (
  input      [15:0]   io_input,
  output              io_output,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  wire       [0:0]    _zz_1;
  wire       [1:0]    _zz_2;
  wire       [15:0]   _zz_3;
  reg        [16:0]   accumulator = 17'b00000000000000000;
  wire                counter_willIncrement;
  wire                counter_willClear;
  reg        [1:0]    counter_valueNext;
  reg        [1:0]    counter_value;
  wire                counter_willOverflowIfInc;
  wire                counter_willOverflow;
  wire       [2:0]    symbol;

  assign _zz_1 = counter_willIncrement;
  assign _zz_2 = {1'd0, _zz_1};
  assign _zz_3 = accumulator[15:0];
  assign counter_willClear = 1'b0;
  assign counter_willOverflowIfInc = (counter_value == 2'b10);
  assign counter_willOverflow = (counter_willOverflowIfInc && counter_willIncrement);
  always @ (*) begin
    if(counter_willOverflow)begin
      counter_valueNext = 2'b00;
    end else begin
      counter_valueNext = (counter_value + _zz_2);
    end
    if(counter_willClear)begin
      counter_valueNext = 2'b00;
    end
  end

  assign counter_willIncrement = 1'b1;
  assign symbol = (accumulator[16] ? 3'b110 : 3'b100);
  assign io_output = symbol[counter_value];
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      counter_value <= 2'b00;
    end else begin
      counter_value <= counter_valueNext;
    end
  end

  always @ (posedge CLKOUT0) begin
    if((counter_value == 2'b10))begin
      accumulator <= ({1'b0,_zz_3} + {1'b0,io_input});
    end
  end


endmodule

module BsbDownSizerAlignedMultiWidth (
  input      [0:0]    io_sel,
  input               io_input_valid,
  output              io_input_ready,
  input      [31:0]   io_input_payload_data,
  input      [3:0]    io_input_payload_mask,
  input               io_input_payload_last,
  output              io_output_valid,
  input               io_output_ready,
  output reg [31:0]   io_output_payload_data,
  output reg [3:0]    io_output_payload_mask,
  output              io_output_payload_last,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  reg        [2:0]    _zz_1;
  reg        [15:0]   _zz_2;
  reg        [1:0]    _zz_3;
  wire       [1:0]    _zz_4;
  wire       [1:0]    _zz_5;
  wire       [2:0]    _zz_6;
  wire       [0:0]    _zz_7;
  wire       [0:0]    _zz_8;
  reg        [1:0]    counter;
  reg                 end_1;

  assign _zz_4 = _zz_1[1:0];
  assign _zz_5 = 2'b10;
  assign _zz_6 = {1'd0, _zz_5};
  assign _zz_7 = (counter >>> 1);
  assign _zz_8 = (counter >>> 1);
  always @(*) begin
    case(io_sel)
      1'b0 : begin
        _zz_1 = _zz_6;
      end
      default : begin
        _zz_1 = 3'b100;
      end
    endcase
  end

  always @(*) begin
    case(_zz_7)
      1'b0 : begin
        _zz_2 = io_input_payload_data[15 : 0];
      end
      default : begin
        _zz_2 = io_input_payload_data[31 : 16];
      end
    endcase
  end

  always @(*) begin
    case(_zz_8)
      1'b0 : begin
        _zz_3 = io_input_payload_mask[1 : 0];
      end
      default : begin
        _zz_3 = io_input_payload_mask[3 : 2];
      end
    endcase
  end

  always @ (*) begin
    end_1 = 1'b0;
    case(io_sel)
      1'b0 : begin
        if((counter == 2'b10))begin
          end_1 = 1'b1;
        end
      end
      default : begin
        if((counter == 2'b00))begin
          end_1 = 1'b1;
        end
      end
    endcase
  end

  assign io_input_ready = (io_output_ready && end_1);
  assign io_output_valid = io_input_valid;
  assign io_output_payload_last = (io_input_payload_last && end_1);
  always @ (*) begin
    io_output_payload_data = 32'h0;
    case(io_sel)
      1'b0 : begin
        io_output_payload_data[15 : 0] = _zz_2;
      end
      default : begin
        io_output_payload_data[31 : 0] = io_input_payload_data[31 : 0];
      end
    endcase
  end

  always @ (*) begin
    io_output_payload_mask = 4'b0000;
    case(io_sel)
      1'b0 : begin
        io_output_payload_mask[1 : 0] = _zz_3;
      end
      default : begin
        io_output_payload_mask[3 : 0] = io_input_payload_mask[3 : 0];
      end
    endcase
  end

  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      counter <= 2'b00;
    end else begin
      if((io_output_valid && io_output_ready))begin
        counter <= (counter + _zz_4);
      end
      if((io_input_valid && io_input_ready))begin
        counter <= 2'b00;
      end
    end
  end


endmodule

module MacTxHeader (
  input               io_input_valid,
  output reg          io_input_ready,
  input               io_input_payload_last,
  input      [1:0]    io_input_payload_fragment_data,
  output              io_output_valid,
  input               io_output_ready,
  output reg          io_output_payload_last,
  output reg [1:0]    io_output_payload_fragment_data,
  input               CLKOUT5,
  input               txReset
);
  wire                _zz_1;
  reg        [5:0]    state;

  assign _zz_1 = (state == 6'h20);
  assign io_output_valid = io_input_valid;
  always @ (*) begin
    io_output_payload_last = 1'b0;
    if(_zz_1)begin
      io_output_payload_last = io_input_payload_last;
    end
  end

  always @ (*) begin
    io_input_ready = 1'b0;
    if(_zz_1)begin
      io_input_ready = io_output_ready;
    end
  end

  always @ (*) begin
    if(_zz_1)begin
      io_output_payload_fragment_data = io_input_payload_fragment_data;
    end else begin
      io_output_payload_fragment_data = 2'b00;
      io_output_payload_fragment_data[0] = 1'b1;
      if((state == 6'h1f))begin
        io_output_payload_fragment_data[1] = 1'b1;
      end
    end
  end

  always @ (posedge CLKOUT5) begin
    if(txReset) begin
      state <= 6'h0;
    end else begin
      if(! _zz_1) begin
        if((io_output_valid && io_output_ready))begin
          state <= (state + 6'h01);
        end
      end
      if(((io_input_valid && io_input_ready) && io_input_payload_last))begin
        state <= 6'h0;
      end
    end
  end


endmodule

module MacTxCrc (
  input               io_input_valid,
  output reg          io_input_ready,
  input               io_input_payload_last,
  input      [1:0]    io_input_payload_fragment_data,
  output reg          io_output_valid,
  input               io_output_ready,
  output reg          io_output_payload_last,
  output reg [1:0]    io_output_payload_fragment_data,
  input               CLKOUT5,
  input               txReset
);
  wire                _zz_1;
  wire                _zz_2;
  reg        [1:0]    _zz_3;
  wire       [31:0]   crc_2_io_result;
  wire       [31:0]   crc_2_io_resultNext;
  wire                _zz_4;
  wire                _zz_5;
  reg                 emitCrc;
  reg        [3:0]    counter;

  assign _zz_4 = (! emitCrc);
  assign _zz_5 = (counter == 4'b1111);
  Crc_1 crc_2 (
    .io_flush            (_zz_1                                ), //i
    .io_input_valid      (_zz_2                                ), //i
    .io_input_payload    (io_input_payload_fragment_data[1:0]  ), //i
    .io_result           (crc_2_io_result[31:0]                ), //o
    .io_resultNext       (crc_2_io_resultNext[31:0]            ), //o
    .CLKOUT5             (CLKOUT5                              ), //i
    .txReset             (txReset                              )  //i
  );
  always @(*) begin
    case(counter)
      4'b0000 : begin
        _zz_3 = crc_2_io_result[1 : 0];
      end
      4'b0001 : begin
        _zz_3 = crc_2_io_result[3 : 2];
      end
      4'b0010 : begin
        _zz_3 = crc_2_io_result[5 : 4];
      end
      4'b0011 : begin
        _zz_3 = crc_2_io_result[7 : 6];
      end
      4'b0100 : begin
        _zz_3 = crc_2_io_result[9 : 8];
      end
      4'b0101 : begin
        _zz_3 = crc_2_io_result[11 : 10];
      end
      4'b0110 : begin
        _zz_3 = crc_2_io_result[13 : 12];
      end
      4'b0111 : begin
        _zz_3 = crc_2_io_result[15 : 14];
      end
      4'b1000 : begin
        _zz_3 = crc_2_io_result[17 : 16];
      end
      4'b1001 : begin
        _zz_3 = crc_2_io_result[19 : 18];
      end
      4'b1010 : begin
        _zz_3 = crc_2_io_result[21 : 20];
      end
      4'b1011 : begin
        _zz_3 = crc_2_io_result[23 : 22];
      end
      4'b1100 : begin
        _zz_3 = crc_2_io_result[25 : 24];
      end
      4'b1101 : begin
        _zz_3 = crc_2_io_result[27 : 26];
      end
      4'b1110 : begin
        _zz_3 = crc_2_io_result[29 : 28];
      end
      default : begin
        _zz_3 = crc_2_io_result[31 : 30];
      end
    endcase
  end

  assign _zz_2 = (io_input_valid && io_input_ready);
  assign _zz_1 = ((io_output_valid && io_output_ready) && io_output_payload_last);
  always @ (*) begin
    io_output_payload_last = 1'b0;
    if(! _zz_4) begin
      if(_zz_5)begin
        io_output_payload_last = 1'b1;
      end
    end
  end

  always @ (*) begin
    if(_zz_4)begin
      io_output_valid = io_input_valid;
    end else begin
      io_output_valid = 1'b1;
    end
  end

  always @ (*) begin
    if(_zz_4)begin
      io_output_payload_fragment_data = io_input_payload_fragment_data;
    end else begin
      io_output_payload_fragment_data = _zz_3;
    end
  end

  always @ (*) begin
    if(_zz_4)begin
      io_input_ready = io_output_ready;
    end else begin
      io_input_ready = 1'b0;
    end
  end

  always @ (posedge CLKOUT5) begin
    if(txReset) begin
      emitCrc <= 1'b0;
      counter <= 4'b0000;
    end else begin
      if(((io_input_valid && io_input_ready) && io_input_payload_last))begin
        emitCrc <= 1'b1;
      end
      if(((io_output_valid && io_output_ready) && io_output_payload_last))begin
        emitCrc <= 1'b0;
      end
      if(! _zz_4) begin
        if(_zz_5)begin
          if(io_output_ready)begin
            emitCrc <= 1'b0;
          end
        end
        if(io_output_ready)begin
          counter <= (counter + 4'b0001);
        end
      end
    end
  end


endmodule

module MacTxPadder (
  input               io_input_valid,
  output              io_input_ready,
  input               io_input_payload_last,
  input      [1:0]    io_input_payload_fragment_data,
  output reg          io_output_valid,
  input               io_output_ready,
  output reg          io_output_payload_last,
  output reg [1:0]    io_output_payload_fragment_data,
  input               CLKOUT5,
  input               txReset
);
  reg        [7:0]    counter;
  wire                ok;
  reg                 io_input_payload_first;
  wire                fill;
  wire                _zz_1;

  assign ok = (counter == 8'hef);
  assign fill = ((counter != 8'h0) && io_input_payload_first);
  assign _zz_1 = (! fill);
  assign io_input_ready = (io_output_ready && _zz_1);
  always @ (*) begin
    io_output_valid = (io_input_valid && _zz_1);
    if(fill)begin
      io_output_valid = 1'b1;
    end
  end

  always @ (*) begin
    io_output_payload_last = io_input_payload_last;
    if((! ok))begin
      io_output_payload_last = 1'b0;
    end
    if(fill)begin
      io_output_payload_last = ok;
    end
  end

  always @ (*) begin
    io_output_payload_fragment_data = io_input_payload_fragment_data;
    if(fill)begin
      io_output_payload_fragment_data = 2'b00;
    end
  end

  always @ (posedge CLKOUT5) begin
    if(txReset) begin
      counter <= 8'h0;
      io_input_payload_first <= 1'b1;
    end else begin
      if((io_input_valid && io_input_ready))begin
        io_input_payload_first <= io_input_payload_last;
      end
      if(((! ok) && ((counter != 8'h0) || (io_output_valid && io_output_ready))))begin
        counter <= (counter + 8'h01);
      end
      if(((io_output_valid && io_output_ready) && io_output_payload_last))begin
        counter <= 8'h0;
      end
    end
  end


endmodule

module BufferCC_17 (
  input               io_dataIn,
  output              io_dataOut,
  input               CLKOUT5,
  input               txReset
);
  reg                 buffers_0;
  reg                 buffers_1;

  assign io_dataOut = buffers_1;
  always @ (posedge CLKOUT5) begin
    buffers_0 <= io_dataIn;
    buffers_1 <= buffers_0;
  end


endmodule

module MacTxAligner (
  input               io_enable,
  input               io_input_valid,
  output reg          io_input_ready,
  input               io_input_payload_last,
  input      [1:0]    io_input_payload_fragment_data,
  output reg          io_output_valid,
  input               io_output_ready,
  output              io_output_payload_last,
  output     [1:0]    io_output_payload_fragment_data,
  input               CLKOUT5,
  input               txReset
);
  wire                _zz_1;
  reg        [3:0]    state;

  assign _zz_1 = (io_enable && (state != 4'b1000));
  always @ (*) begin
    io_output_valid = io_input_valid;
    if(_zz_1)begin
      io_output_valid = 1'b0;
    end
  end

  always @ (*) begin
    io_input_ready = io_output_ready;
    if(_zz_1)begin
      io_input_ready = 1'b1;
    end
  end

  assign io_output_payload_last = io_input_payload_last;
  assign io_output_payload_fragment_data = io_input_payload_fragment_data;
  always @ (posedge CLKOUT5) begin
    if(txReset) begin
      state <= 4'b0000;
    end else begin
      if(_zz_1)begin
        if(io_input_valid)begin
          state <= (state + 4'b0001);
        end
      end
      if(((io_input_valid && io_input_ready) && io_input_payload_last))begin
        state <= 4'b0000;
      end
    end
  end


endmodule

module MacTxBuffer (
  input               io_push_stream_valid,
  output              io_push_stream_ready,
  input      [31:0]   io_push_stream_payload,
  output     [10:0]   io_push_availability,
  output reg          io_pop_stream_valid,
  input               io_pop_stream_ready,
  output reg          io_pop_stream_payload_last,
  output     [1:0]    io_pop_stream_payload_fragment_data,
  input               io_pop_redo,
  input               io_pop_commit,
  input               CLKOUT0,
  input               systemCd_logic_outputReset,
  input               io_ctrl_tx_flush,
  input               CLKOUT5,
  input               txReset
);
  reg                 _zz_1;
  reg        [1:0]    _zz_2;
  wire                fifo_io_push_stream_ready;
  wire       [10:0]   fifo_io_push_availability;
  wire                fifo_io_pop_stream_valid;
  wire       [31:0]   fifo_io_pop_stream_payload;
  wire                _zz_3;
  wire                _zz_4;
  wire                _zz_5;
  wire                _zz_6;
  wire                _zz_7;
  wire       [14:0]   _zz_8;
  wire       [31:0]   _zz_9;
  wire       [31:0]   _zz_10;
  reg                 push_commit;
  reg        `push_State_defaultEncoding_type push_state_1;
  reg        [14:0]   push_length;
  wire       [9:0]    push_wordCountMinusOne;
  reg        [9:0]    push_wordCounter;
  reg        `pop_State_defaultEncoding_type pop_state_1;
  reg        [14:0]   pop_length;
  wire       [14:0]   pop_lengthMinusOne;
  reg        [9:0]    pop_wordCounter;
  wire       [9:0]    pop_wordCountEndAt;
  wire       [3:0]    pop_spliterEndAt;
  reg        [3:0]    pop_spliter;
  `ifndef SYNTHESIS
  reg [47:0] push_state_1_string;
  reg [47:0] pop_state_1_string;
  `endif


  assign _zz_3 = ((pop_wordCounter == pop_wordCountEndAt) && (pop_spliter == pop_spliterEndAt));
  assign _zz_4 = (pop_spliter == 4'b1111);
  assign _zz_5 = (io_push_stream_valid && fifo_io_push_stream_ready);
  assign _zz_6 = (io_push_stream_valid && io_push_stream_ready);
  assign _zz_7 = (push_wordCounter == push_wordCountMinusOne);
  assign _zz_8 = (push_length - 15'h0001);
  assign _zz_9 = io_push_stream_payload;
  assign _zz_10 = fifo_io_pop_stream_payload;
  MacTxManagedStreamFifoCc fifo (
    .io_push_stream_valid          (io_push_stream_valid              ), //i
    .io_push_stream_ready          (fifo_io_push_stream_ready         ), //o
    .io_push_stream_payload        (io_push_stream_payload[31:0]      ), //i
    .io_push_commit                (push_commit                       ), //i
    .io_push_availability          (fifo_io_push_availability[10:0]   ), //o
    .io_pop_stream_valid           (fifo_io_pop_stream_valid          ), //o
    .io_pop_stream_ready           (_zz_1                             ), //i
    .io_pop_stream_payload         (fifo_io_pop_stream_payload[31:0]  ), //o
    .io_pop_redo                   (io_pop_redo                       ), //i
    .io_pop_commit                 (io_pop_commit                     ), //i
    .CLKOUT0                       (CLKOUT0                           ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset        ), //i
    .io_ctrl_tx_flush              (io_ctrl_tx_flush                  ), //i
    .CLKOUT5                       (CLKOUT5                           ), //i
    .txReset                       (txReset                           )  //i
  );
  always @(*) begin
    case(pop_spliter)
      4'b0000 : begin
        _zz_2 = fifo_io_pop_stream_payload[1 : 0];
      end
      4'b0001 : begin
        _zz_2 = fifo_io_pop_stream_payload[3 : 2];
      end
      4'b0010 : begin
        _zz_2 = fifo_io_pop_stream_payload[5 : 4];
      end
      4'b0011 : begin
        _zz_2 = fifo_io_pop_stream_payload[7 : 6];
      end
      4'b0100 : begin
        _zz_2 = fifo_io_pop_stream_payload[9 : 8];
      end
      4'b0101 : begin
        _zz_2 = fifo_io_pop_stream_payload[11 : 10];
      end
      4'b0110 : begin
        _zz_2 = fifo_io_pop_stream_payload[13 : 12];
      end
      4'b0111 : begin
        _zz_2 = fifo_io_pop_stream_payload[15 : 14];
      end
      4'b1000 : begin
        _zz_2 = fifo_io_pop_stream_payload[17 : 16];
      end
      4'b1001 : begin
        _zz_2 = fifo_io_pop_stream_payload[19 : 18];
      end
      4'b1010 : begin
        _zz_2 = fifo_io_pop_stream_payload[21 : 20];
      end
      4'b1011 : begin
        _zz_2 = fifo_io_pop_stream_payload[23 : 22];
      end
      4'b1100 : begin
        _zz_2 = fifo_io_pop_stream_payload[25 : 24];
      end
      4'b1101 : begin
        _zz_2 = fifo_io_pop_stream_payload[27 : 26];
      end
      4'b1110 : begin
        _zz_2 = fifo_io_pop_stream_payload[29 : 28];
      end
      default : begin
        _zz_2 = fifo_io_pop_stream_payload[31 : 30];
      end
    endcase
  end

  `ifndef SYNTHESIS
  always @(*) begin
    case(push_state_1)
      `push_State_defaultEncoding_LENGTH : push_state_1_string = "LENGTH";
      `push_State_defaultEncoding_DATA : push_state_1_string = "DATA  ";
      default : push_state_1_string = "??????";
    endcase
  end
  always @(*) begin
    case(pop_state_1)
      `pop_State_defaultEncoding_LENGTH : pop_state_1_string = "LENGTH";
      `pop_State_defaultEncoding_DATA : pop_state_1_string = "DATA  ";
      `pop_State_defaultEncoding_WAIT_1 : pop_state_1_string = "WAIT_1";
      default : pop_state_1_string = "??????";
    endcase
  end
  `endif

  assign io_push_availability = fifo_io_push_availability;
  assign io_push_stream_ready = fifo_io_push_stream_ready;
  assign push_wordCountMinusOne = (_zz_8 >>> 5);
  assign pop_lengthMinusOne = (pop_length - 15'h0001);
  assign pop_wordCountEndAt = (pop_lengthMinusOne >>> 5);
  assign pop_spliterEndAt = pop_lengthMinusOne[4 : 1];
  always @ (*) begin
    _zz_1 = 1'b0;
    case(pop_state_1)
      `pop_State_defaultEncoding_LENGTH : begin
        if(fifo_io_pop_stream_valid)begin
          _zz_1 = 1'b1;
        end
      end
      `pop_State_defaultEncoding_DATA : begin
        if(io_pop_stream_ready)begin
          if(_zz_3)begin
            _zz_1 = 1'b1;
          end
          if(_zz_4)begin
            _zz_1 = 1'b1;
          end
        end
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    io_pop_stream_valid = 1'b0;
    case(pop_state_1)
      `pop_State_defaultEncoding_LENGTH : begin
      end
      `pop_State_defaultEncoding_DATA : begin
        io_pop_stream_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    io_pop_stream_payload_last = 1'b0;
    case(pop_state_1)
      `pop_State_defaultEncoding_LENGTH : begin
      end
      `pop_State_defaultEncoding_DATA : begin
        if(io_pop_stream_ready)begin
          if(_zz_3)begin
            io_pop_stream_payload_last = 1'b1;
          end
        end
      end
      default : begin
      end
    endcase
  end

  assign io_pop_stream_payload_fragment_data = _zz_2;
  always @ (posedge CLKOUT0) begin
    push_commit <= 1'b0;
    case(push_state_1)
      `push_State_defaultEncoding_LENGTH : begin
        push_wordCounter <= 10'h0;
        if(_zz_5)begin
          push_length <= _zz_9[14:0];
        end
      end
      default : begin
        if(_zz_6)begin
          push_wordCounter <= (push_wordCounter + 10'h001);
          if(_zz_7)begin
            push_commit <= 1'b1;
          end
        end
      end
    endcase
  end

  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset || io_ctrl_tx_flush) begin
      push_state_1 <= `push_State_defaultEncoding_LENGTH;
    end else begin
      case(push_state_1)
        `push_State_defaultEncoding_LENGTH : begin
          if(_zz_5)begin
            push_state_1 <= `push_State_defaultEncoding_DATA;
          end
        end
        default : begin
          if(_zz_6)begin
            if(_zz_7)begin
              push_state_1 <= `push_State_defaultEncoding_LENGTH;
            end
          end
        end
      endcase
    end
  end

  always @ (posedge CLKOUT5) begin
    if(txReset) begin
      pop_state_1 <= `pop_State_defaultEncoding_LENGTH;
    end else begin
      case(pop_state_1)
        `pop_State_defaultEncoding_LENGTH : begin
          if(fifo_io_pop_stream_valid)begin
            pop_state_1 <= `pop_State_defaultEncoding_DATA;
          end
        end
        `pop_State_defaultEncoding_DATA : begin
          if(io_pop_stream_ready)begin
            if(_zz_3)begin
              pop_state_1 <= `pop_State_defaultEncoding_WAIT_1;
            end
          end
        end
        default : begin
          if(io_pop_commit)begin
            pop_state_1 <= `pop_State_defaultEncoding_LENGTH;
          end
        end
      endcase
      if(io_pop_redo)begin
        pop_state_1 <= `pop_State_defaultEncoding_LENGTH;
      end
    end
  end

  always @ (posedge CLKOUT5) begin
    case(pop_state_1)
      `pop_State_defaultEncoding_LENGTH : begin
        pop_wordCounter <= 10'h0;
        pop_spliter <= 4'b0000;
        if(fifo_io_pop_stream_valid)begin
          pop_length <= _zz_10[14:0];
        end
      end
      `pop_State_defaultEncoding_DATA : begin
        if(io_pop_stream_ready)begin
          pop_spliter <= (pop_spliter + 4'b0001);
          if(_zz_4)begin
            pop_wordCounter <= (pop_wordCounter + 10'h001);
          end
        end
      end
      default : begin
      end
    endcase
  end


endmodule

module MacRxBuffer (
  input               io_push_stream_valid,
  output              io_push_stream_ready,
  input               io_push_stream_payload_last,
  input               io_push_stream_payload_fragment_error,
  input      [1:0]    io_push_stream_payload_fragment_data,
  output              io_push_drop,
  output              io_push_commit,
  output              io_push_error,
  output              io_pop_stream_valid,
  input               io_pop_stream_ready,
  output     [31:0]   io_pop_stream_payload,
  input               io_pop_stats_clear,
  output     [7:0]    io_pop_stats_drops,
  output     [7:0]    io_pop_stats_errors,
  input               CLKOUT5,
  input               rxReset,
  input               CLKOUT0,
  input               systemCd_logic_outputReset,
  input               io_ctrl_rx_flush
);
  wire                _zz_7;
  wire                _zz_8;
  reg        [31:0]   _zz_9;
  wire       [10:0]   popToPushGray_buffercc_io_dataOut;
  wire       [10:0]   pushToPopGray_buffercc_io_dataOut;
  wire                pulseCCByToggle_2_io_pulseOut;
  wire                pulseCCByToggle_3_io_pulseOut;
  wire                _zz_10;
  wire                _zz_11;
  wire       [10:0]   _zz_12;
  wire       [10:0]   _zz_13;
  wire       [14:0]   _zz_14;
  wire       [10:0]   _zz_15;
  wire       [0:0]    _zz_16;
  wire       [7:0]    _zz_17;
  wire       [0:0]    _zz_18;
  wire       [7:0]    _zz_19;
  reg                 _zz_1;
  wire       [10:0]   popToPushGray;
  wire       [10:0]   pushToPopGray;
  reg        [10:0]   push_currentPtr;
  reg        [10:0]   push_oldPtr;
  wire       [10:0]   push_currentPtrPlusOne;
  wire       [10:0]   push_popPtrGray;
  reg        [10:0]   _zz_2;
  reg        [29:0]   push_buffer;
  reg        [3:0]    push_state_1;
  reg        [14:0]   push_length;
  reg                 push_port_valid;
  reg        [9:0]    push_port_payload_address;
  reg        [31:0]   push_port_payload_data;
  reg                 push_error;
  reg                 push_drop;
  reg                 push_doWrite;
  wire       [10:0]   _zz_3;
  wire                push_full;
  reg                 push_cleanup;
  reg                 push_commit;
  reg        [10:0]   pop_currentPtr;
  wire       [10:0]   pop_pushPtrGray;
  wire       [10:0]   pop_popPtrGray;
  reg        [10:0]   pop_popPtrGray_regNext;
  wire                pop_cmd_valid;
  wire                pop_cmd_ready;
  wire       [9:0]    pop_cmd_payload;
  wire                _zz_4;
  wire                _zz_5;
  reg                 _zz_6;
  reg        [7:0]    pop_stats_drops;
  reg        [7:0]    pop_stats_errors;
  reg [31:0] ram [0:1023];

  assign _zz_10 = ((push_error || push_drop) || push_full);
  assign _zz_11 = (io_push_stream_valid && io_push_stream_ready);
  assign _zz_12 = (push_oldPtr >>> 1'b1);
  assign _zz_13 = (push_currentPtrPlusOne >>> 1'b1);
  assign _zz_14 = push_length;
  assign _zz_15 = (pop_currentPtr >>> 1'b1);
  assign _zz_16 = (pulseCCByToggle_2_io_pulseOut && (pop_stats_drops != 8'hff));
  assign _zz_17 = {7'd0, _zz_16};
  assign _zz_18 = (pulseCCByToggle_3_io_pulseOut && (pop_stats_errors != 8'hff));
  assign _zz_19 = {7'd0, _zz_18};
  always @ (posedge CLKOUT5) begin
    if(_zz_1) begin
      ram[push_port_payload_address] <= push_port_payload_data;
    end
  end

  always @ (posedge CLKOUT0) begin
    if(pop_cmd_ready) begin
      _zz_9 <= ram[pop_cmd_payload];
    end
  end

  BufferCC_6 popToPushGray_buffercc (
    .io_dataIn     (popToPushGray[10:0]                      ), //i
    .io_dataOut    (popToPushGray_buffercc_io_dataOut[10:0]  ), //o
    .CLKOUT5       (CLKOUT5                                  ), //i
    .rxReset       (rxReset                                  )  //i
  );
  BufferCC_7 pushToPopGray_buffercc (
    .io_dataIn                     (pushToPopGray[10:0]                      ), //i
    .io_dataOut                    (pushToPopGray_buffercc_io_dataOut[10:0]  ), //o
    .CLKOUT0                       (CLKOUT0                                  ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset               ), //i
    .io_ctrl_rx_flush              (io_ctrl_rx_flush                         )  //i
  );
  PulseCCByToggle pulseCCByToggle_2 (
    .io_pulseIn                    (_zz_7                          ), //i
    .io_pulseOut                   (pulseCCByToggle_2_io_pulseOut  ), //o
    .CLKOUT5                       (CLKOUT5                        ), //i
    .rxReset                       (rxReset                        ), //i
    .CLKOUT0                       (CLKOUT0                        ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset     ), //i
    .io_ctrl_rx_flush              (io_ctrl_rx_flush               )  //i
  );
  PulseCCByToggle pulseCCByToggle_3 (
    .io_pulseIn                    (_zz_8                          ), //i
    .io_pulseOut                   (pulseCCByToggle_3_io_pulseOut  ), //o
    .CLKOUT5                       (CLKOUT5                        ), //i
    .rxReset                       (rxReset                        ), //i
    .CLKOUT0                       (CLKOUT0                        ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset     ), //i
    .io_ctrl_rx_flush              (io_ctrl_rx_flush               )  //i
  );
  always @ (*) begin
    _zz_1 = 1'b0;
    if(push_port_valid)begin
      _zz_1 = 1'b1;
    end
  end

  assign push_currentPtrPlusOne = (push_currentPtr + 11'h001);
  assign push_popPtrGray = popToPushGray_buffercc_io_dataOut;
  assign pushToPopGray = _zz_2;
  always @ (*) begin
    push_port_valid = 1'b0;
    if(push_doWrite)begin
      if(! push_full) begin
        push_port_valid = 1'b1;
      end
    end
    if(push_commit)begin
      if(! _zz_10) begin
        push_port_valid = 1'b1;
      end
    end
  end

  always @ (*) begin
    push_port_payload_address = 10'h0;
    if(push_doWrite)begin
      if(! push_full) begin
        push_port_payload_address = push_currentPtrPlusOne[9:0];
      end
    end
    if(push_commit)begin
      if(! _zz_10) begin
        push_port_payload_address = push_oldPtr[9:0];
      end
    end
  end

  always @ (*) begin
    push_port_payload_data = 32'h0;
    if(push_doWrite)begin
      if(! push_full) begin
        push_port_payload_data = {io_push_stream_payload_fragment_data,push_buffer};
      end
    end
    if(push_commit)begin
      if(! _zz_10) begin
        push_port_payload_data = {17'd0, _zz_14};
      end
    end
  end

  always @ (*) begin
    push_doWrite = 1'b0;
    if(_zz_11)begin
      if((push_state_1 == 4'b1111))begin
        push_doWrite = 1'b1;
      end
    end
    if((push_cleanup && (push_state_1 != 4'b0000)))begin
      push_doWrite = 1'b1;
    end
  end

  assign _zz_3 = (_zz_13 ^ push_currentPtrPlusOne);
  assign push_full = ((_zz_3[10 : 9] == (~ push_popPtrGray[10 : 9])) && (_zz_3[8 : 0] == push_popPtrGray[8 : 0]));
  assign io_push_stream_ready = ((! push_cleanup) && (! push_commit));
  assign io_push_drop = (push_drop || (push_commit && push_full));
  assign io_push_commit = push_commit;
  assign io_push_error = push_error;
  assign pop_pushPtrGray = pushToPopGray_buffercc_io_dataOut;
  assign pop_popPtrGray = (_zz_15 ^ pop_currentPtr);
  assign popToPushGray = pop_popPtrGray_regNext;
  assign pop_cmd_valid = (! (pop_popPtrGray == pop_pushPtrGray));
  assign pop_cmd_payload = pop_currentPtr[9:0];
  assign pop_cmd_ready = ((! _zz_4) || _zz_5);
  assign _zz_4 = _zz_6;
  assign io_pop_stream_valid = _zz_4;
  assign _zz_5 = io_pop_stream_ready;
  assign io_pop_stream_payload = _zz_9;
  assign _zz_7 = (push_commit && push_drop);
  assign _zz_8 = (push_commit && push_error);
  assign io_pop_stats_drops = pop_stats_drops;
  assign io_pop_stats_errors = pop_stats_errors;
  always @ (posedge CLKOUT5) begin
    if(rxReset) begin
      push_currentPtr <= 11'h0;
      push_oldPtr <= 11'h0;
      _zz_2 <= 11'h0;
      push_state_1 <= 4'b0000;
      push_length <= 15'h0;
      push_error <= 1'b0;
      push_drop <= 1'b0;
      push_cleanup <= 1'b0;
      push_commit <= 1'b0;
    end else begin
      _zz_2 <= (_zz_12 ^ push_oldPtr);
      if(((io_push_stream_valid && io_push_stream_ready) && io_push_stream_payload_fragment_error))begin
        push_error <= 1'b1;
      end
      if(_zz_11)begin
        push_state_1 <= (push_state_1 + 4'b0001);
        push_length <= (push_length + 15'h0002);
      end
      if(push_doWrite)begin
        if(push_full)begin
          push_drop <= 1'b1;
        end else begin
          push_currentPtr <= push_currentPtrPlusOne;
        end
      end
      push_cleanup <= ((io_push_stream_valid && io_push_stream_ready) && io_push_stream_payload_last);
      push_commit <= push_cleanup;
      if(push_commit)begin
        if(_zz_10)begin
          push_currentPtr <= push_oldPtr;
        end else begin
          push_oldPtr <= push_currentPtrPlusOne;
          push_currentPtr <= push_currentPtrPlusOne;
        end
        push_error <= 1'b0;
        push_drop <= 1'b0;
        push_state_1 <= 4'b0000;
        push_length <= 15'h0;
      end
    end
  end

  always @ (posedge CLKOUT5) begin
    if(_zz_11)begin
      if((push_state_1 == 4'b0000))begin
        push_buffer[1 : 0] <= io_push_stream_payload_fragment_data;
      end
      if((push_state_1 == 4'b0001))begin
        push_buffer[3 : 2] <= io_push_stream_payload_fragment_data;
      end
      if((push_state_1 == 4'b0010))begin
        push_buffer[5 : 4] <= io_push_stream_payload_fragment_data;
      end
      if((push_state_1 == 4'b0011))begin
        push_buffer[7 : 6] <= io_push_stream_payload_fragment_data;
      end
      if((push_state_1 == 4'b0100))begin
        push_buffer[9 : 8] <= io_push_stream_payload_fragment_data;
      end
      if((push_state_1 == 4'b0101))begin
        push_buffer[11 : 10] <= io_push_stream_payload_fragment_data;
      end
      if((push_state_1 == 4'b0110))begin
        push_buffer[13 : 12] <= io_push_stream_payload_fragment_data;
      end
      if((push_state_1 == 4'b0111))begin
        push_buffer[15 : 14] <= io_push_stream_payload_fragment_data;
      end
      if((push_state_1 == 4'b1000))begin
        push_buffer[17 : 16] <= io_push_stream_payload_fragment_data;
      end
      if((push_state_1 == 4'b1001))begin
        push_buffer[19 : 18] <= io_push_stream_payload_fragment_data;
      end
      if((push_state_1 == 4'b1010))begin
        push_buffer[21 : 20] <= io_push_stream_payload_fragment_data;
      end
      if((push_state_1 == 4'b1011))begin
        push_buffer[23 : 22] <= io_push_stream_payload_fragment_data;
      end
      if((push_state_1 == 4'b1100))begin
        push_buffer[25 : 24] <= io_push_stream_payload_fragment_data;
      end
      if((push_state_1 == 4'b1101))begin
        push_buffer[27 : 26] <= io_push_stream_payload_fragment_data;
      end
      if((push_state_1 == 4'b1110))begin
        push_buffer[29 : 28] <= io_push_stream_payload_fragment_data;
      end
    end
  end

  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset || io_ctrl_rx_flush) begin
      pop_currentPtr <= 11'h0;
      pop_popPtrGray_regNext <= 11'h0;
      _zz_6 <= 1'b0;
      pop_stats_drops <= 8'h0;
      pop_stats_errors <= 8'h0;
    end else begin
      pop_popPtrGray_regNext <= pop_popPtrGray;
      if(_zz_5)begin
        _zz_6 <= 1'b0;
      end
      if(pop_cmd_ready)begin
        _zz_6 <= pop_cmd_valid;
      end
      if((pop_cmd_valid && pop_cmd_ready))begin
        pop_currentPtr <= (pop_currentPtr + 11'h001);
      end
      pop_stats_drops <= (pop_stats_drops + _zz_17);
      pop_stats_errors <= (pop_stats_errors + _zz_19);
      if(io_pop_stats_clear)begin
        pop_stats_drops <= 8'h0;
        pop_stats_errors <= 8'h0;
      end
    end
  end


endmodule

module BufferCC_16 (
  input               io_dataIn,
  output              io_dataOut,
  input               CLKOUT5,
  input               rxReset
);
  reg                 buffers_0;
  reg                 buffers_1;

  assign io_dataOut = buffers_1;
  always @ (posedge CLKOUT5) begin
    buffers_0 <= io_dataIn;
    buffers_1 <= buffers_0;
  end


endmodule

module MacRxAligner (
  input               io_enable,
  input               io_input_valid,
  output reg          io_input_ready,
  input               io_input_payload_last,
  input               io_input_payload_fragment_error,
  input      [1:0]    io_input_payload_fragment_data,
  output reg          io_output_valid,
  input               io_output_ready,
  output reg          io_output_payload_last,
  output reg          io_output_payload_fragment_error,
  output     [1:0]    io_output_payload_fragment_data,
  input               CLKOUT5,
  input               rxReset
);
  wire                _zz_1;
  reg        [3:0]    state;

  assign _zz_1 = (io_enable && (state != 4'b1000));
  always @ (*) begin
    io_output_valid = io_input_valid;
    if(_zz_1)begin
      io_output_valid = 1'b1;
    end
  end

  always @ (*) begin
    io_input_ready = io_output_ready;
    if(_zz_1)begin
      io_input_ready = 1'b0;
    end
  end

  always @ (*) begin
    io_output_payload_last = io_input_payload_last;
    if(_zz_1)begin
      io_output_payload_last = 1'b0;
    end
  end

  always @ (*) begin
    io_output_payload_fragment_error = io_input_payload_fragment_error;
    if(_zz_1)begin
      io_output_payload_fragment_error = 1'b0;
    end
  end

  assign io_output_payload_fragment_data = io_input_payload_fragment_data;
  always @ (posedge CLKOUT5) begin
    if(rxReset) begin
      state <= 4'b0000;
    end else begin
      if(_zz_1)begin
        if(io_output_ready)begin
          state <= (state + 4'b0001);
        end
      end
      if(((io_input_valid && io_input_ready) && io_input_payload_last))begin
        state <= 4'b0000;
      end
    end
  end


endmodule

module MacRxChecker (
  input               io_input_valid,
  output              io_input_ready,
  input               io_input_payload_last,
  input               io_input_payload_fragment_error,
  input      [1:0]    io_input_payload_fragment_data,
  output              io_output_valid,
  input               io_output_ready,
  output              io_output_payload_last,
  output              io_output_payload_fragment_error,
  output     [1:0]    io_output_payload_fragment_data,
  input               CLKOUT5,
  input               rxReset
);
  wire                _zz_1;
  wire       [31:0]   crc_2_io_result;
  wire       [31:0]   crc_2_io_resultNext;
  wire                crcHit;

  Crc crc_2 (
    .io_flush            (_zz_1                                ), //i
    .io_input_valid      (io_input_valid                       ), //i
    .io_input_payload    (io_input_payload_fragment_data[1:0]  ), //i
    .io_result           (crc_2_io_result[31:0]                ), //o
    .io_resultNext       (crc_2_io_resultNext[31:0]            ), //o
    .CLKOUT5             (CLKOUT5                              ), //i
    .rxReset             (rxReset                              )  //i
  );
  assign _zz_1 = ((io_output_valid && io_output_ready) && io_output_payload_last);
  assign crcHit = (crc_2_io_resultNext == 32'h2144df1c);
  assign io_output_valid = io_input_valid;
  assign io_output_payload_last = io_input_payload_last;
  assign io_output_payload_fragment_data = io_input_payload_fragment_data;
  assign io_output_payload_fragment_error = (io_input_payload_fragment_error || (io_input_payload_last && (! crcHit)));
  assign io_input_ready = io_output_ready;

endmodule

module MacRxPreamble (
  input               io_input_valid,
  output              io_input_ready,
  input               io_input_payload_last,
  input               io_input_payload_fragment_error,
  input      [1:0]    io_input_payload_fragment_data,
  output reg          io_output_valid,
  input               io_output_ready,
  output              io_output_payload_last,
  output              io_output_payload_fragment_error,
  output     [1:0]    io_output_payload_fragment_data,
  input               CLKOUT5,
  input               rxReset
);
  wire                _zz_22;
  wire                _zz_1;
  wire                history_0_valid;
  wire                history_0_ready;
  wire                history_0_payload_last;
  wire                history_0_payload_fragment_error;
  wire       [1:0]    history_0_payload_fragment_data;
  wire                history_1_valid;
  wire                history_1_ready;
  wire                history_1_payload_last;
  wire                history_1_payload_fragment_error;
  wire       [1:0]    history_1_payload_fragment_data;
  wire                history_2_valid;
  wire                history_2_ready;
  wire                history_2_payload_last;
  wire                history_2_payload_fragment_error;
  wire       [1:0]    history_2_payload_fragment_data;
  wire                history_3_valid;
  wire                history_3_ready;
  wire                history_3_payload_last;
  wire                history_3_payload_fragment_error;
  wire       [1:0]    history_3_payload_fragment_data;
  wire                _zz_2;
  wire                _zz_3;
  wire                _zz_4;
  wire                _zz_5;
  wire       [1:0]    _zz_6;
  reg                 _zz_7;
  reg                 _zz_8;
  reg                 _zz_9;
  reg                 _zz_10;
  reg        [1:0]    _zz_11;
  reg                 _zz_12;
  reg                 _zz_13;
  reg                 _zz_14;
  reg                 _zz_15;
  reg        [1:0]    _zz_16;
  reg                 _zz_17;
  reg                 _zz_18;
  reg                 _zz_19;
  reg                 _zz_20;
  reg        [1:0]    _zz_21;
  wire       [7:0]    historyDataCat;
  wire                hit;
  reg                 inFrame;

  assign _zz_22 = (! inFrame);
  assign _zz_1 = (io_input_valid && io_input_ready);
  assign _zz_2 = io_input_valid;
  assign _zz_3 = io_input_ready;
  assign _zz_4 = io_input_payload_last;
  assign _zz_5 = io_input_payload_fragment_error;
  assign _zz_6 = io_input_payload_fragment_data;
  assign history_0_valid = _zz_2;
  assign history_0_ready = _zz_3;
  assign history_0_payload_last = _zz_4;
  assign history_0_payload_fragment_error = _zz_5;
  assign history_0_payload_fragment_data = _zz_6;
  assign history_1_valid = _zz_7;
  assign history_1_ready = _zz_8;
  assign history_1_payload_last = _zz_9;
  assign history_1_payload_fragment_error = _zz_10;
  assign history_1_payload_fragment_data = _zz_11;
  assign history_2_valid = _zz_12;
  assign history_2_ready = _zz_13;
  assign history_2_payload_last = _zz_14;
  assign history_2_payload_fragment_error = _zz_15;
  assign history_2_payload_fragment_data = _zz_16;
  assign history_3_valid = _zz_17;
  assign history_3_ready = _zz_18;
  assign history_3_payload_last = _zz_19;
  assign history_3_payload_fragment_error = _zz_20;
  assign history_3_payload_fragment_data = _zz_21;
  assign historyDataCat = {history_0_payload_fragment_data,{history_1_payload_fragment_data,{history_2_payload_fragment_data,history_3_payload_fragment_data}}};
  assign hit = ((((history_0_valid && history_1_valid) && history_2_valid) && history_3_valid) && (historyDataCat == 8'hd5));
  always @ (*) begin
    io_output_valid = 1'b0;
    if(! _zz_22) begin
      if(io_input_valid)begin
        io_output_valid = 1'b1;
      end
    end
  end

  assign io_output_payload_last = io_input_payload_last;
  assign io_output_payload_fragment_error = io_input_payload_fragment_error;
  assign io_output_payload_fragment_data = io_input_payload_fragment_data;
  assign io_input_ready = ((! inFrame) || io_output_ready);
  always @ (posedge CLKOUT5) begin
    if(_zz_1)begin
      _zz_7 <= _zz_2;
      _zz_8 <= _zz_3;
      _zz_9 <= _zz_4;
      _zz_10 <= _zz_5;
      _zz_11 <= _zz_6;
    end
    if(_zz_1)begin
      _zz_12 <= _zz_7;
      _zz_13 <= _zz_8;
      _zz_14 <= _zz_9;
      _zz_15 <= _zz_10;
      _zz_16 <= _zz_11;
    end
    if(_zz_1)begin
      _zz_17 <= _zz_12;
      _zz_18 <= _zz_13;
      _zz_19 <= _zz_14;
      _zz_20 <= _zz_15;
      _zz_21 <= _zz_16;
    end
  end

  always @ (posedge CLKOUT5) begin
    if(rxReset) begin
      inFrame <= 1'b0;
    end else begin
      if(_zz_22)begin
        if(hit)begin
          inFrame <= 1'b1;
        end
      end else begin
        if(io_input_valid)begin
          if((io_output_ready && io_input_payload_last))begin
            inFrame <= 1'b0;
          end
        end
      end
    end
  end


endmodule

//BufferCC_14 replaced by BufferCC_14

module BufferCC_14 (
  input               io_dataIn,
  output              io_dataOut,
  input               CLKOUT5,
  input               _zz_1
);
  reg                 buffers_0;
  reg                 buffers_1;

  assign io_dataOut = buffers_1;
  always @ (posedge CLKOUT5 or posedge _zz_1) begin
    if (_zz_1) begin
      buffers_0 <= 1'b1;
      buffers_1 <= 1'b1;
    end else begin
      buffers_0 <= io_dataIn;
      buffers_1 <= buffers_0;
    end
  end


endmodule

module UartCtrlRx (
  input      [2:0]    io_configFrame_dataLength,
  input      `UartStopType_defaultEncoding_type io_configFrame_stop,
  input      `UartParityType_defaultEncoding_type io_configFrame_parity,
  input               io_samplingTick,
  output              io_read_valid,
  input               io_read_ready,
  output     [7:0]    io_read_payload,
  input               io_rxd,
  output              io_rts,
  output reg          io_error,
  output              io_break,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  wire                io_rxd_buffercc_io_dataOut;
  wire                _zz_2;
  wire                _zz_3;
  wire                _zz_4;
  wire                _zz_5;
  wire                _zz_6;
  wire       [0:0]    _zz_7;
  wire       [2:0]    _zz_8;
  reg                 _zz_1;
  wire                sampler_synchroniser;
  wire                sampler_samples_0;
  reg                 sampler_samples_1;
  reg                 sampler_samples_2;
  reg                 sampler_value;
  reg                 sampler_tick;
  reg        [2:0]    bitTimer_counter;
  reg                 bitTimer_tick;
  reg        [2:0]    bitCounter_value;
  reg        [6:0]    break_counter;
  wire                break_valid;
  reg        `UartCtrlRxState_defaultEncoding_type stateMachine_state;
  reg                 stateMachine_parity;
  reg        [7:0]    stateMachine_shifter;
  reg                 stateMachine_validReg;
  `ifndef SYNTHESIS
  reg [23:0] io_configFrame_stop_string;
  reg [31:0] io_configFrame_parity_string;
  reg [47:0] stateMachine_state_string;
  `endif


  assign _zz_2 = (stateMachine_parity == sampler_value);
  assign _zz_3 = (! sampler_value);
  assign _zz_4 = (bitTimer_counter == 3'b000);
  assign _zz_5 = ((sampler_tick && (! sampler_value)) && (! break_valid));
  assign _zz_6 = (bitCounter_value == io_configFrame_dataLength);
  assign _zz_7 = ((io_configFrame_stop == `UartStopType_defaultEncoding_ONE) ? 1'b0 : 1'b1);
  assign _zz_8 = {2'd0, _zz_7};
  BufferCC_5 io_rxd_buffercc (
    .io_dataIn                     (io_rxd                      ), //i
    .io_dataOut                    (io_rxd_buffercc_io_dataOut  ), //o
    .CLKOUT0                       (CLKOUT0                     ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset  )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(io_configFrame_stop)
      `UartStopType_defaultEncoding_ONE : io_configFrame_stop_string = "ONE";
      `UartStopType_defaultEncoding_TWO : io_configFrame_stop_string = "TWO";
      default : io_configFrame_stop_string = "???";
    endcase
  end
  always @(*) begin
    case(io_configFrame_parity)
      `UartParityType_defaultEncoding_NONE : io_configFrame_parity_string = "NONE";
      `UartParityType_defaultEncoding_EVEN : io_configFrame_parity_string = "EVEN";
      `UartParityType_defaultEncoding_ODD : io_configFrame_parity_string = "ODD ";
      default : io_configFrame_parity_string = "????";
    endcase
  end
  always @(*) begin
    case(stateMachine_state)
      `UartCtrlRxState_defaultEncoding_IDLE : stateMachine_state_string = "IDLE  ";
      `UartCtrlRxState_defaultEncoding_START : stateMachine_state_string = "START ";
      `UartCtrlRxState_defaultEncoding_DATA : stateMachine_state_string = "DATA  ";
      `UartCtrlRxState_defaultEncoding_PARITY : stateMachine_state_string = "PARITY";
      `UartCtrlRxState_defaultEncoding_STOP : stateMachine_state_string = "STOP  ";
      default : stateMachine_state_string = "??????";
    endcase
  end
  `endif

  always @ (*) begin
    io_error = 1'b0;
    case(stateMachine_state)
      `UartCtrlRxState_defaultEncoding_IDLE : begin
      end
      `UartCtrlRxState_defaultEncoding_START : begin
      end
      `UartCtrlRxState_defaultEncoding_DATA : begin
      end
      `UartCtrlRxState_defaultEncoding_PARITY : begin
        if(bitTimer_tick)begin
          if(! _zz_2) begin
            io_error = 1'b1;
          end
        end
      end
      default : begin
        if(bitTimer_tick)begin
          if(_zz_3)begin
            io_error = 1'b1;
          end
        end
      end
    endcase
  end

  assign io_rts = _zz_1;
  assign sampler_synchroniser = io_rxd_buffercc_io_dataOut;
  assign sampler_samples_0 = sampler_synchroniser;
  always @ (*) begin
    bitTimer_tick = 1'b0;
    if(sampler_tick)begin
      if(_zz_4)begin
        bitTimer_tick = 1'b1;
      end
    end
  end

  assign break_valid = (break_counter == 7'h41);
  assign io_break = break_valid;
  assign io_read_valid = stateMachine_validReg;
  assign io_read_payload = stateMachine_shifter;
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      _zz_1 <= 1'b0;
      sampler_samples_1 <= 1'b1;
      sampler_samples_2 <= 1'b1;
      sampler_value <= 1'b1;
      sampler_tick <= 1'b0;
      break_counter <= 7'h0;
      stateMachine_state <= `UartCtrlRxState_defaultEncoding_IDLE;
      stateMachine_validReg <= 1'b0;
    end else begin
      _zz_1 <= (! io_read_ready);
      if(io_samplingTick)begin
        sampler_samples_1 <= sampler_samples_0;
      end
      if(io_samplingTick)begin
        sampler_samples_2 <= sampler_samples_1;
      end
      sampler_value <= (((1'b0 || ((1'b1 && sampler_samples_0) && sampler_samples_1)) || ((1'b1 && sampler_samples_0) && sampler_samples_2)) || ((1'b1 && sampler_samples_1) && sampler_samples_2));
      sampler_tick <= io_samplingTick;
      if(sampler_value)begin
        break_counter <= 7'h0;
      end else begin
        if((io_samplingTick && (! break_valid)))begin
          break_counter <= (break_counter + 7'h01);
        end
      end
      stateMachine_validReg <= 1'b0;
      case(stateMachine_state)
        `UartCtrlRxState_defaultEncoding_IDLE : begin
          if(_zz_5)begin
            stateMachine_state <= `UartCtrlRxState_defaultEncoding_START;
          end
        end
        `UartCtrlRxState_defaultEncoding_START : begin
          if(bitTimer_tick)begin
            stateMachine_state <= `UartCtrlRxState_defaultEncoding_DATA;
            if((sampler_value == 1'b1))begin
              stateMachine_state <= `UartCtrlRxState_defaultEncoding_IDLE;
            end
          end
        end
        `UartCtrlRxState_defaultEncoding_DATA : begin
          if(bitTimer_tick)begin
            if(_zz_6)begin
              if((io_configFrame_parity == `UartParityType_defaultEncoding_NONE))begin
                stateMachine_state <= `UartCtrlRxState_defaultEncoding_STOP;
                stateMachine_validReg <= 1'b1;
              end else begin
                stateMachine_state <= `UartCtrlRxState_defaultEncoding_PARITY;
              end
            end
          end
        end
        `UartCtrlRxState_defaultEncoding_PARITY : begin
          if(bitTimer_tick)begin
            if(_zz_2)begin
              stateMachine_state <= `UartCtrlRxState_defaultEncoding_STOP;
              stateMachine_validReg <= 1'b1;
            end else begin
              stateMachine_state <= `UartCtrlRxState_defaultEncoding_IDLE;
            end
          end
        end
        default : begin
          if(bitTimer_tick)begin
            if(_zz_3)begin
              stateMachine_state <= `UartCtrlRxState_defaultEncoding_IDLE;
            end else begin
              if((bitCounter_value == _zz_8))begin
                stateMachine_state <= `UartCtrlRxState_defaultEncoding_IDLE;
              end
            end
          end
        end
      endcase
    end
  end

  always @ (posedge CLKOUT0) begin
    if(sampler_tick)begin
      bitTimer_counter <= (bitTimer_counter - 3'b001);
      if(_zz_4)begin
        bitTimer_counter <= 3'b100;
      end
    end
    if(bitTimer_tick)begin
      bitCounter_value <= (bitCounter_value + 3'b001);
    end
    if(bitTimer_tick)begin
      stateMachine_parity <= (stateMachine_parity ^ sampler_value);
    end
    case(stateMachine_state)
      `UartCtrlRxState_defaultEncoding_IDLE : begin
        if(_zz_5)begin
          bitTimer_counter <= 3'b001;
        end
      end
      `UartCtrlRxState_defaultEncoding_START : begin
        if(bitTimer_tick)begin
          bitCounter_value <= 3'b000;
          stateMachine_parity <= (io_configFrame_parity == `UartParityType_defaultEncoding_ODD);
        end
      end
      `UartCtrlRxState_defaultEncoding_DATA : begin
        if(bitTimer_tick)begin
          stateMachine_shifter[bitCounter_value] <= sampler_value;
          if(_zz_6)begin
            bitCounter_value <= 3'b000;
          end
        end
      end
      `UartCtrlRxState_defaultEncoding_PARITY : begin
        if(bitTimer_tick)begin
          bitCounter_value <= 3'b000;
        end
      end
      default : begin
      end
    endcase
  end


endmodule

module UartCtrlTx (
  input      [2:0]    io_configFrame_dataLength,
  input      `UartStopType_defaultEncoding_type io_configFrame_stop,
  input      `UartParityType_defaultEncoding_type io_configFrame_parity,
  input               io_samplingTick,
  input               io_write_valid,
  output reg          io_write_ready,
  input      [7:0]    io_write_payload,
  input               io_cts,
  output              io_txd,
  input               io_break,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  wire                _zz_2;
  wire       [0:0]    _zz_3;
  wire       [2:0]    _zz_4;
  wire       [0:0]    _zz_5;
  wire       [2:0]    _zz_6;
  reg                 clockDivider_counter_willIncrement;
  wire                clockDivider_counter_willClear;
  reg        [2:0]    clockDivider_counter_valueNext;
  reg        [2:0]    clockDivider_counter_value;
  wire                clockDivider_counter_willOverflowIfInc;
  wire                clockDivider_counter_willOverflow;
  reg        [2:0]    tickCounter_value;
  reg        `UartCtrlTxState_defaultEncoding_type stateMachine_state;
  reg                 stateMachine_parity;
  reg                 stateMachine_txd;
  reg                 _zz_1;
  `ifndef SYNTHESIS
  reg [23:0] io_configFrame_stop_string;
  reg [31:0] io_configFrame_parity_string;
  reg [47:0] stateMachine_state_string;
  `endif


  assign _zz_2 = (tickCounter_value == io_configFrame_dataLength);
  assign _zz_3 = clockDivider_counter_willIncrement;
  assign _zz_4 = {2'd0, _zz_3};
  assign _zz_5 = ((io_configFrame_stop == `UartStopType_defaultEncoding_ONE) ? 1'b0 : 1'b1);
  assign _zz_6 = {2'd0, _zz_5};
  `ifndef SYNTHESIS
  always @(*) begin
    case(io_configFrame_stop)
      `UartStopType_defaultEncoding_ONE : io_configFrame_stop_string = "ONE";
      `UartStopType_defaultEncoding_TWO : io_configFrame_stop_string = "TWO";
      default : io_configFrame_stop_string = "???";
    endcase
  end
  always @(*) begin
    case(io_configFrame_parity)
      `UartParityType_defaultEncoding_NONE : io_configFrame_parity_string = "NONE";
      `UartParityType_defaultEncoding_EVEN : io_configFrame_parity_string = "EVEN";
      `UartParityType_defaultEncoding_ODD : io_configFrame_parity_string = "ODD ";
      default : io_configFrame_parity_string = "????";
    endcase
  end
  always @(*) begin
    case(stateMachine_state)
      `UartCtrlTxState_defaultEncoding_IDLE : stateMachine_state_string = "IDLE  ";
      `UartCtrlTxState_defaultEncoding_START : stateMachine_state_string = "START ";
      `UartCtrlTxState_defaultEncoding_DATA : stateMachine_state_string = "DATA  ";
      `UartCtrlTxState_defaultEncoding_PARITY : stateMachine_state_string = "PARITY";
      `UartCtrlTxState_defaultEncoding_STOP : stateMachine_state_string = "STOP  ";
      default : stateMachine_state_string = "??????";
    endcase
  end
  `endif

  always @ (*) begin
    clockDivider_counter_willIncrement = 1'b0;
    if(io_samplingTick)begin
      clockDivider_counter_willIncrement = 1'b1;
    end
  end

  assign clockDivider_counter_willClear = 1'b0;
  assign clockDivider_counter_willOverflowIfInc = (clockDivider_counter_value == 3'b100);
  assign clockDivider_counter_willOverflow = (clockDivider_counter_willOverflowIfInc && clockDivider_counter_willIncrement);
  always @ (*) begin
    if(clockDivider_counter_willOverflow)begin
      clockDivider_counter_valueNext = 3'b000;
    end else begin
      clockDivider_counter_valueNext = (clockDivider_counter_value + _zz_4);
    end
    if(clockDivider_counter_willClear)begin
      clockDivider_counter_valueNext = 3'b000;
    end
  end

  always @ (*) begin
    stateMachine_txd = 1'b1;
    case(stateMachine_state)
      `UartCtrlTxState_defaultEncoding_IDLE : begin
      end
      `UartCtrlTxState_defaultEncoding_START : begin
        stateMachine_txd = 1'b0;
      end
      `UartCtrlTxState_defaultEncoding_DATA : begin
        stateMachine_txd = io_write_payload[tickCounter_value];
      end
      `UartCtrlTxState_defaultEncoding_PARITY : begin
        stateMachine_txd = stateMachine_parity;
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    io_write_ready = io_break;
    case(stateMachine_state)
      `UartCtrlTxState_defaultEncoding_IDLE : begin
      end
      `UartCtrlTxState_defaultEncoding_START : begin
      end
      `UartCtrlTxState_defaultEncoding_DATA : begin
        if(clockDivider_counter_willOverflow)begin
          if(_zz_2)begin
            io_write_ready = 1'b1;
          end
        end
      end
      `UartCtrlTxState_defaultEncoding_PARITY : begin
      end
      default : begin
      end
    endcase
  end

  assign io_txd = _zz_1;
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      clockDivider_counter_value <= 3'b000;
      stateMachine_state <= `UartCtrlTxState_defaultEncoding_IDLE;
      _zz_1 <= 1'b1;
    end else begin
      clockDivider_counter_value <= clockDivider_counter_valueNext;
      case(stateMachine_state)
        `UartCtrlTxState_defaultEncoding_IDLE : begin
          if(((io_write_valid && (! io_cts)) && clockDivider_counter_willOverflow))begin
            stateMachine_state <= `UartCtrlTxState_defaultEncoding_START;
          end
        end
        `UartCtrlTxState_defaultEncoding_START : begin
          if(clockDivider_counter_willOverflow)begin
            stateMachine_state <= `UartCtrlTxState_defaultEncoding_DATA;
          end
        end
        `UartCtrlTxState_defaultEncoding_DATA : begin
          if(clockDivider_counter_willOverflow)begin
            if(_zz_2)begin
              if((io_configFrame_parity == `UartParityType_defaultEncoding_NONE))begin
                stateMachine_state <= `UartCtrlTxState_defaultEncoding_STOP;
              end else begin
                stateMachine_state <= `UartCtrlTxState_defaultEncoding_PARITY;
              end
            end
          end
        end
        `UartCtrlTxState_defaultEncoding_PARITY : begin
          if(clockDivider_counter_willOverflow)begin
            stateMachine_state <= `UartCtrlTxState_defaultEncoding_STOP;
          end
        end
        default : begin
          if(clockDivider_counter_willOverflow)begin
            if((tickCounter_value == _zz_6))begin
              stateMachine_state <= (io_write_valid ? `UartCtrlTxState_defaultEncoding_START : `UartCtrlTxState_defaultEncoding_IDLE);
            end
          end
        end
      endcase
      _zz_1 <= (stateMachine_txd && (! io_break));
    end
  end

  always @ (posedge CLKOUT0) begin
    if(clockDivider_counter_willOverflow)begin
      tickCounter_value <= (tickCounter_value + 3'b001);
    end
    if(clockDivider_counter_willOverflow)begin
      stateMachine_parity <= (stateMachine_parity ^ stateMachine_txd);
    end
    case(stateMachine_state)
      `UartCtrlTxState_defaultEncoding_IDLE : begin
      end
      `UartCtrlTxState_defaultEncoding_START : begin
        if(clockDivider_counter_willOverflow)begin
          stateMachine_parity <= (io_configFrame_parity == `UartParityType_defaultEncoding_ODD);
          tickCounter_value <= 3'b000;
        end
      end
      `UartCtrlTxState_defaultEncoding_DATA : begin
        if(clockDivider_counter_willOverflow)begin
          if(_zz_2)begin
            tickCounter_value <= 3'b000;
          end
        end
      end
      `UartCtrlTxState_defaultEncoding_PARITY : begin
        if(clockDivider_counter_willOverflow)begin
          tickCounter_value <= 3'b000;
        end
      end
      default : begin
      end
    endcase
  end


endmodule

module FlowCCByToggle (
  input               io_input_valid,
  input               io_input_payload_last,
  input      [0:0]    io_input_payload_fragment,
  output              io_output_valid,
  output              io_output_payload_last,
  output     [0:0]    io_output_payload_fragment,
  input               TCK,
  input               CLKOUT0,
  input               debugCd_logic_outputReset
);
  wire                inputArea_target_buffercc_io_dataOut;
  wire                outHitSignal;
  reg                 inputArea_target = 0;
  reg                 inputArea_data_last;
  reg        [0:0]    inputArea_data_fragment;
  wire                outputArea_target;
  reg                 outputArea_hit;
  wire                outputArea_flow_valid;
  wire                outputArea_flow_payload_last;
  wire       [0:0]    outputArea_flow_payload_fragment;
  reg                 outputArea_flow_regNext_valid;
  reg                 outputArea_flow_regNext_payload_last;
  reg        [0:0]    outputArea_flow_regNext_payload_fragment;

  BufferCC_4 inputArea_target_buffercc (
    .io_dataIn                    (inputArea_target                      ), //i
    .io_dataOut                   (inputArea_target_buffercc_io_dataOut  ), //o
    .CLKOUT0                      (CLKOUT0                               ), //i
    .debugCd_logic_outputReset    (debugCd_logic_outputReset             )  //i
  );
  assign outputArea_target = inputArea_target_buffercc_io_dataOut;
  assign outputArea_flow_valid = (outputArea_target != outputArea_hit);
  assign outputArea_flow_payload_last = inputArea_data_last;
  assign outputArea_flow_payload_fragment = inputArea_data_fragment;
  assign io_output_valid = outputArea_flow_regNext_valid;
  assign io_output_payload_last = outputArea_flow_regNext_payload_last;
  assign io_output_payload_fragment = outputArea_flow_regNext_payload_fragment;
  always @ (posedge TCK) begin
    if(io_input_valid)begin
      inputArea_target <= (! inputArea_target);
      inputArea_data_last <= io_input_payload_last;
      inputArea_data_fragment <= io_input_payload_fragment;
    end
  end

  always @ (posedge CLKOUT0) begin
    outputArea_hit <= outputArea_target;
    outputArea_flow_regNext_payload_last <= outputArea_flow_payload_last;
    outputArea_flow_regNext_payload_fragment <= outputArea_flow_payload_fragment;
  end

  always @ (posedge CLKOUT0) begin
    if(debugCd_logic_outputReset) begin
      outputArea_flow_regNext_valid <= 1'b0;
    end else begin
      outputArea_flow_regNext_valid <= outputArea_flow_valid;
    end
  end


endmodule

module StreamFifoLowLatency (
  input               io_push_valid,
  output              io_push_ready,
  input               io_push_payload_write,
  input               io_push_payload_last,
  input      [11:0]   io_push_payload_context,
  output              io_pop_valid,
  input               io_pop_ready,
  output              io_pop_payload_write,
  output              io_pop_payload_last,
  output     [11:0]   io_pop_payload_context,
  input               io_flush,
  output     [4:0]    io_occupancy,
  input               CLKOUT1,
  input               sdramCd_logic_outputReset
);
  wire       [13:0]   _zz_3;
  wire       [0:0]    _zz_4;
  wire       [3:0]    _zz_5;
  wire       [0:0]    _zz_6;
  wire       [3:0]    _zz_7;
  wire       [0:0]    _zz_8;
  wire       [0:0]    _zz_9;
  wire       [13:0]   _zz_10;
  reg                 _zz_1;
  reg                 pushPtr_willIncrement;
  reg                 pushPtr_willClear;
  reg        [3:0]    pushPtr_valueNext;
  reg        [3:0]    pushPtr_value;
  wire                pushPtr_willOverflowIfInc;
  wire                pushPtr_willOverflow;
  reg                 popPtr_willIncrement;
  reg                 popPtr_willClear;
  reg        [3:0]    popPtr_valueNext;
  reg        [3:0]    popPtr_value;
  wire                popPtr_willOverflowIfInc;
  wire                popPtr_willOverflow;
  wire                ptrMatch;
  reg                 risingOccupancy;
  wire                empty;
  wire                full;
  wire                pushing;
  wire                popping;
  wire       [13:0]   _zz_2;
  wire       [3:0]    ptrDif;
  (* ram_style = "distributed" *) reg [13:0] ram [0:15];

  assign _zz_4 = pushPtr_willIncrement;
  assign _zz_5 = {3'd0, _zz_4};
  assign _zz_6 = popPtr_willIncrement;
  assign _zz_7 = {3'd0, _zz_6};
  assign _zz_8 = _zz_2[0 : 0];
  assign _zz_9 = _zz_2[1 : 1];
  assign _zz_10 = {io_push_payload_context,{io_push_payload_last,io_push_payload_write}};
  assign _zz_3 = ram[popPtr_value];
  always @ (posedge CLKOUT1) begin
    if(_zz_1) begin
      ram[pushPtr_value] <= _zz_10;
    end
  end

  always @ (*) begin
    _zz_1 = 1'b0;
    if(pushing)begin
      _zz_1 = 1'b1;
    end
  end

  always @ (*) begin
    pushPtr_willIncrement = 1'b0;
    if(pushing)begin
      pushPtr_willIncrement = 1'b1;
    end
  end

  always @ (*) begin
    pushPtr_willClear = 1'b0;
    if(io_flush)begin
      pushPtr_willClear = 1'b1;
    end
  end

  assign pushPtr_willOverflowIfInc = (pushPtr_value == 4'b1111);
  assign pushPtr_willOverflow = (pushPtr_willOverflowIfInc && pushPtr_willIncrement);
  always @ (*) begin
    pushPtr_valueNext = (pushPtr_value + _zz_5);
    if(pushPtr_willClear)begin
      pushPtr_valueNext = 4'b0000;
    end
  end

  always @ (*) begin
    popPtr_willIncrement = 1'b0;
    if(popping)begin
      popPtr_willIncrement = 1'b1;
    end
  end

  always @ (*) begin
    popPtr_willClear = 1'b0;
    if(io_flush)begin
      popPtr_willClear = 1'b1;
    end
  end

  assign popPtr_willOverflowIfInc = (popPtr_value == 4'b1111);
  assign popPtr_willOverflow = (popPtr_willOverflowIfInc && popPtr_willIncrement);
  always @ (*) begin
    popPtr_valueNext = (popPtr_value + _zz_7);
    if(popPtr_willClear)begin
      popPtr_valueNext = 4'b0000;
    end
  end

  assign ptrMatch = (pushPtr_value == popPtr_value);
  assign empty = (ptrMatch && (! risingOccupancy));
  assign full = (ptrMatch && risingOccupancy);
  assign pushing = (io_push_valid && io_push_ready);
  assign popping = (io_pop_valid && io_pop_ready);
  assign io_push_ready = (! full);
  assign io_pop_valid = (! empty);
  assign _zz_2 = _zz_3;
  assign io_pop_payload_write = _zz_8[0];
  assign io_pop_payload_last = _zz_9[0];
  assign io_pop_payload_context = _zz_2[13 : 2];
  assign ptrDif = (pushPtr_value - popPtr_value);
  assign io_occupancy = {(risingOccupancy && ptrMatch),ptrDif};
  always @ (posedge CLKOUT1) begin
    if(sdramCd_logic_outputReset) begin
      pushPtr_value <= 4'b0000;
      popPtr_value <= 4'b0000;
      risingOccupancy <= 1'b0;
    end else begin
      pushPtr_value <= pushPtr_valueNext;
      popPtr_value <= popPtr_valueNext;
      if((pushing != popping))begin
        risingOccupancy <= pushing;
      end
      if(io_flush)begin
        risingOccupancy <= 1'b0;
      end
    end
  end


endmodule

//BufferCC_10 replaced by BufferCC_10

//BufferCC_11 replaced by BufferCC_11

module BufferCC_11 (
  input      [5:0]    io_dataIn,
  output     [5:0]    io_dataOut,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  reg        [5:0]    buffers_0;
  reg        [5:0]    buffers_1;

  assign io_dataOut = buffers_1;
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      buffers_0 <= 6'h0;
      buffers_1 <= 6'h0;
    end else begin
      buffers_0 <= io_dataIn;
      buffers_1 <= buffers_0;
    end
  end


endmodule

module BufferCC_10 (
  input      [5:0]    io_dataIn,
  output     [5:0]    io_dataOut,
  input               CLKOUT1,
  input               sdramCd_logic_outputReset
);
  reg        [5:0]    buffers_0;
  reg        [5:0]    buffers_1;

  assign io_dataOut = buffers_1;
  always @ (posedge CLKOUT1) begin
    if(sdramCd_logic_outputReset) begin
      buffers_0 <= 6'h0;
      buffers_1 <= 6'h0;
    end else begin
      buffers_0 <= io_dataIn;
      buffers_1 <= buffers_0;
    end
  end


endmodule

module BufferCC_9 (
  input      [4:0]    io_dataIn,
  output     [4:0]    io_dataOut,
  input               CLKOUT1,
  input               sdramCd_logic_outputReset
);
  reg        [4:0]    buffers_0;
  reg        [4:0]    buffers_1;

  assign io_dataOut = buffers_1;
  always @ (posedge CLKOUT1) begin
    if(sdramCd_logic_outputReset) begin
      buffers_0 <= 5'h0;
      buffers_1 <= 5'h0;
    end else begin
      buffers_0 <= io_dataIn;
      buffers_1 <= buffers_0;
    end
  end


endmodule

module BufferCC_8 (
  input      [4:0]    io_dataIn,
  output     [4:0]    io_dataOut,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  reg        [4:0]    buffers_0;
  reg        [4:0]    buffers_1;

  assign io_dataOut = buffers_1;
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      buffers_0 <= 5'h0;
      buffers_1 <= 5'h0;
    end else begin
      buffers_0 <= io_dataIn;
      buffers_1 <= buffers_0;
    end
  end


endmodule

module Crc_1 (
  input               io_flush,
  input               io_input_valid,
  input      [1:0]    io_input_payload,
  output     [31:0]   io_result,
  output     [31:0]   io_resultNext,
  input               CLKOUT5,
  input               txReset
);
  wire       [31:0]   _zz_1;
  wire       [31:0]   _zz_2;
  wire                _zz_3;
  wire       [0:0]    _zz_4;
  wire       [20:0]   _zz_5;
  wire                _zz_6;
  wire       [0:0]    _zz_7;
  wire       [9:0]    _zz_8;
  wire                _zz_9;
  wire       [0:0]    _zz_10;
  wire       [20:0]   _zz_11;
  wire                _zz_12;
  wire       [0:0]    _zz_13;
  wire       [9:0]    _zz_14;
  reg        [31:0]   state_2;
  reg        [31:0]   state_1;
  reg        [31:0]   state;
  wire       [31:0]   stateXor;
  wire       [31:0]   accXor;

  assign _zz_1 = (state <<< 1);
  assign _zz_2 = (state_1 <<< 1);
  assign _zz_3 = stateXor[9];
  assign _zz_4 = stateXor[10];
  assign _zz_5 = {stateXor[11],{stateXor[12],{stateXor[13],{stateXor[14],{stateXor[15],{stateXor[16],{stateXor[17],{stateXor[18],{stateXor[19],{_zz_6,{_zz_7,_zz_8}}}}}}}}}}};
  assign _zz_6 = stateXor[20];
  assign _zz_7 = stateXor[21];
  assign _zz_8 = {stateXor[22],{stateXor[23],{stateXor[24],{stateXor[25],{stateXor[26],{stateXor[27],{stateXor[28],{stateXor[29],{stateXor[30],stateXor[31]}}}}}}}}};
  assign _zz_9 = accXor[9];
  assign _zz_10 = accXor[10];
  assign _zz_11 = {accXor[11],{accXor[12],{accXor[13],{accXor[14],{accXor[15],{accXor[16],{accXor[17],{accXor[18],{accXor[19],{_zz_12,{_zz_13,_zz_14}}}}}}}}}}};
  assign _zz_12 = accXor[20];
  assign _zz_13 = accXor[21];
  assign _zz_14 = {accXor[22],{accXor[23],{accXor[24],{accXor[25],{accXor[26],{accXor[27],{accXor[28],{accXor[29],{accXor[30],accXor[31]}}}}}}}}};
  always @ (*) begin
    state_2 = state_1;
    state_2 = (_zz_2 ^ ((io_input_payload[1] ^ state_1[31]) ? 32'h04c11db7 : 32'h0));
  end

  always @ (*) begin
    state_1 = state;
    state_1 = (_zz_1 ^ ((io_input_payload[0] ^ state[31]) ? 32'h04c11db7 : 32'h0));
  end

  assign stateXor = (state ^ 32'hffffffff);
  assign accXor = (state_2 ^ 32'hffffffff);
  assign io_result = {stateXor[0],{stateXor[1],{stateXor[2],{stateXor[3],{stateXor[4],{stateXor[5],{stateXor[6],{stateXor[7],{stateXor[8],{_zz_3,{_zz_4,_zz_5}}}}}}}}}}};
  assign io_resultNext = {accXor[0],{accXor[1],{accXor[2],{accXor[3],{accXor[4],{accXor[5],{accXor[6],{accXor[7],{accXor[8],{_zz_9,{_zz_10,_zz_11}}}}}}}}}}};
  always @ (posedge CLKOUT5) begin
    if(txReset) begin
      state <= 32'hffffffff;
    end else begin
      if(io_input_valid)begin
        state <= state_2;
      end
      if(io_flush)begin
        state <= 32'hffffffff;
      end
    end
  end


endmodule

module MacTxManagedStreamFifoCc (
  input               io_push_stream_valid,
  output              io_push_stream_ready,
  input      [31:0]   io_push_stream_payload,
  input               io_push_commit,
  output     [10:0]   io_push_availability,
  output              io_pop_stream_valid,
  input               io_pop_stream_ready,
  output     [31:0]   io_pop_stream_payload,
  input               io_pop_redo,
  input               io_pop_commit,
  input               CLKOUT0,
  input               systemCd_logic_outputReset,
  input               io_ctrl_tx_flush,
  input               CLKOUT5,
  input               txReset
);
  reg        [31:0]   _zz_18;
  wire       [10:0]   popToPushGray_buffercc_io_dataOut;
  wire       [10:0]   pushToPopGray_buffercc_io_dataOut;
  wire                _zz_19;
  wire       [10:0]   _zz_20;
  wire       [10:0]   _zz_21;
  wire       [9:0]    _zz_22;
  wire       [10:0]   _zz_23;
  wire       [10:0]   _zz_24;
  wire       [10:0]   _zz_25;
  wire       [0:0]    _zz_26;
  wire       [0:0]    _zz_27;
  reg                 _zz_1;
  wire       [10:0]   popToPushGray;
  wire       [10:0]   pushToPopGray;
  reg        [10:0]   push_currentPtr;
  reg        [10:0]   push_oldPtr;
  wire       [10:0]   push_popPtrGray;
  reg        [10:0]   _zz_2;
  wire       [10:0]   _zz_3;
  wire                _zz_4;
  wire                _zz_5;
  wire                _zz_6;
  wire                _zz_7;
  wire                _zz_8;
  wire                _zz_9;
  wire                _zz_10;
  wire                _zz_11;
  wire                _zz_12;
  wire                _zz_13;
  reg        [10:0]   pop_currentPtr;
  reg        [10:0]   pop_oldPtr;
  wire       [10:0]   pop_pushPtrGray;
  wire       [10:0]   pop_popPtrGray;
  reg        [10:0]   pop_popPtrGray_regNext;
  wire                pop_cmd_valid;
  wire                pop_cmd_ready;
  wire       [9:0]    pop_cmd_payload;
  reg        [10:0]   pop_commitPtr;
  wire                _zz_14;
  reg                 _zz_15;
  reg                 _zz_16;
  reg                 _zz_17;
  reg [31:0] ram [0:1023];

  assign _zz_19 = (io_push_stream_valid && io_push_stream_ready);
  assign _zz_20 = (push_oldPtr >>> 1'b1);
  assign _zz_21 = (push_currentPtr >>> 1'b1);
  assign _zz_22 = push_currentPtr[9:0];
  assign _zz_23 = (push_currentPtr - {_zz_13,{_zz_12,{_zz_11,{_zz_10,{_zz_9,{_zz_8,{_zz_7,{_zz_6,{_zz_5,{_zz_26,_zz_27}}}}}}}}}});
  assign _zz_24 = (pop_oldPtr >>> 1'b1);
  assign _zz_25 = (pop_currentPtr >>> 1'b1);
  assign _zz_26 = _zz_4;
  assign _zz_27 = (push_popPtrGray[0] ^ _zz_4);
  always @ (posedge CLKOUT0) begin
    if(_zz_1) begin
      ram[_zz_22] <= io_push_stream_payload;
    end
  end

  always @ (posedge CLKOUT5) begin
    if(pop_cmd_ready) begin
      _zz_18 <= ram[pop_cmd_payload];
    end
  end

  BufferCC_2 popToPushGray_buffercc (
    .io_dataIn                     (popToPushGray[10:0]                      ), //i
    .io_dataOut                    (popToPushGray_buffercc_io_dataOut[10:0]  ), //o
    .CLKOUT0                       (CLKOUT0                                  ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset               ), //i
    .io_ctrl_tx_flush              (io_ctrl_tx_flush                         )  //i
  );
  BufferCC_3 pushToPopGray_buffercc (
    .io_dataIn     (pushToPopGray[10:0]                      ), //i
    .io_dataOut    (pushToPopGray_buffercc_io_dataOut[10:0]  ), //o
    .CLKOUT5       (CLKOUT5                                  ), //i
    .txReset       (txReset                                  )  //i
  );
  always @ (*) begin
    _zz_1 = 1'b0;
    if(_zz_19)begin
      _zz_1 = 1'b1;
    end
  end

  assign push_popPtrGray = popToPushGray_buffercc_io_dataOut;
  assign pushToPopGray = _zz_2;
  assign _zz_3 = (_zz_21 ^ push_currentPtr);
  assign io_push_stream_ready = (! ((_zz_3[10 : 9] == (~ push_popPtrGray[10 : 9])) && (_zz_3[8 : 0] == push_popPtrGray[8 : 0])));
  assign _zz_4 = (push_popPtrGray[1] ^ _zz_5);
  assign _zz_5 = (push_popPtrGray[2] ^ _zz_6);
  assign _zz_6 = (push_popPtrGray[3] ^ _zz_7);
  assign _zz_7 = (push_popPtrGray[4] ^ _zz_8);
  assign _zz_8 = (push_popPtrGray[5] ^ _zz_9);
  assign _zz_9 = (push_popPtrGray[6] ^ _zz_10);
  assign _zz_10 = (push_popPtrGray[7] ^ _zz_11);
  assign _zz_11 = (push_popPtrGray[8] ^ _zz_12);
  assign _zz_12 = (push_popPtrGray[9] ^ _zz_13);
  assign _zz_13 = push_popPtrGray[10];
  assign io_push_availability = (11'h400 - _zz_23);
  assign pop_pushPtrGray = pushToPopGray_buffercc_io_dataOut;
  assign pop_popPtrGray = (_zz_24 ^ pop_oldPtr);
  assign popToPushGray = pop_popPtrGray_regNext;
  assign pop_cmd_valid = ((! ((_zz_25 ^ pop_currentPtr) == pop_pushPtrGray)) && (! io_pop_redo));
  assign pop_cmd_payload = pop_currentPtr[9:0];
  assign pop_cmd_ready = ((! _zz_14) || _zz_15);
  assign _zz_14 = _zz_16;
  always @ (*) begin
    _zz_17 = _zz_14;
    if(io_pop_redo)begin
      _zz_17 = 1'b0;
    end
  end

  always @ (*) begin
    _zz_15 = io_pop_stream_ready;
    if(io_pop_redo)begin
      _zz_15 = 1'b1;
    end
  end

  assign io_pop_stream_valid = _zz_17;
  assign io_pop_stream_payload = _zz_18;
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset || io_ctrl_tx_flush) begin
      push_currentPtr <= 11'h0;
      push_oldPtr <= 11'h0;
      _zz_2 <= 11'h0;
    end else begin
      _zz_2 <= (_zz_20 ^ push_oldPtr);
      if(_zz_19)begin
        push_currentPtr <= (push_currentPtr + 11'h001);
      end
      if(io_push_commit)begin
        push_oldPtr <= push_currentPtr;
      end
    end
  end

  always @ (posedge CLKOUT5) begin
    if(txReset) begin
      pop_currentPtr <= 11'h0;
      pop_oldPtr <= 11'h0;
      pop_popPtrGray_regNext <= 11'h0;
      _zz_16 <= 1'b0;
    end else begin
      pop_popPtrGray_regNext <= pop_popPtrGray;
      if(_zz_15)begin
        _zz_16 <= 1'b0;
      end
      if(pop_cmd_ready)begin
        _zz_16 <= pop_cmd_valid;
      end
      if((pop_cmd_valid && pop_cmd_ready))begin
        pop_currentPtr <= (pop_currentPtr + 11'h001);
      end
      if(io_pop_redo)begin
        pop_currentPtr <= pop_oldPtr;
      end
      if(io_pop_commit)begin
        pop_oldPtr <= pop_commitPtr;
      end
    end
  end

  always @ (posedge CLKOUT5) begin
    if((io_pop_stream_valid && io_pop_stream_ready))begin
      pop_commitPtr <= pop_currentPtr;
    end
  end


endmodule

//PulseCCByToggle replaced by PulseCCByToggle

module PulseCCByToggle (
  input               io_pulseIn,
  output              io_pulseOut,
  input               CLKOUT5,
  input               rxReset,
  input               CLKOUT0,
  input               systemCd_logic_outputReset,
  input               io_ctrl_rx_flush
);
  wire                inArea_target_buffercc_io_dataOut;
  reg                 inArea_target;
  wire                outArea_target;
  reg                 outArea_hit;

  BufferCC inArea_target_buffercc (
    .io_dataIn                     (inArea_target                      ), //i
    .io_dataOut                    (inArea_target_buffercc_io_dataOut  ), //o
    .CLKOUT0                       (CLKOUT0                            ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset         ), //i
    .io_ctrl_rx_flush              (io_ctrl_rx_flush                   )  //i
  );
  assign outArea_target = inArea_target_buffercc_io_dataOut;
  assign io_pulseOut = (outArea_target != outArea_hit);
  always @ (posedge CLKOUT5) begin
    if(rxReset) begin
      inArea_target <= 1'b0;
    end else begin
      if(io_pulseIn)begin
        inArea_target <= (! inArea_target);
      end
    end
  end

  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset || io_ctrl_rx_flush) begin
      outArea_hit <= 1'b0;
    end else begin
      if((outArea_target != outArea_hit))begin
        outArea_hit <= (! outArea_hit);
      end
    end
  end


endmodule

module BufferCC_7 (
  input      [10:0]   io_dataIn,
  output     [10:0]   io_dataOut,
  input               CLKOUT0,
  input               systemCd_logic_outputReset,
  input               io_ctrl_rx_flush
);
  reg        [10:0]   buffers_0;
  reg        [10:0]   buffers_1;

  assign io_dataOut = buffers_1;
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset || io_ctrl_rx_flush) begin
      buffers_0 <= 11'h0;
      buffers_1 <= 11'h0;
    end else begin
      buffers_0 <= io_dataIn;
      buffers_1 <= buffers_0;
    end
  end


endmodule

module BufferCC_6 (
  input      [10:0]   io_dataIn,
  output     [10:0]   io_dataOut,
  input               CLKOUT5,
  input               rxReset
);
  reg        [10:0]   buffers_0;
  reg        [10:0]   buffers_1;

  assign io_dataOut = buffers_1;
  always @ (posedge CLKOUT5) begin
    if(rxReset) begin
      buffers_0 <= 11'h0;
      buffers_1 <= 11'h0;
    end else begin
      buffers_0 <= io_dataIn;
      buffers_1 <= buffers_0;
    end
  end


endmodule

module Crc (
  input               io_flush,
  input               io_input_valid,
  input      [1:0]    io_input_payload,
  output     [31:0]   io_result,
  output     [31:0]   io_resultNext,
  input               CLKOUT5,
  input               rxReset
);
  wire       [31:0]   _zz_1;
  wire       [31:0]   _zz_2;
  wire                _zz_3;
  wire       [0:0]    _zz_4;
  wire       [20:0]   _zz_5;
  wire                _zz_6;
  wire       [0:0]    _zz_7;
  wire       [9:0]    _zz_8;
  wire                _zz_9;
  wire       [0:0]    _zz_10;
  wire       [20:0]   _zz_11;
  wire                _zz_12;
  wire       [0:0]    _zz_13;
  wire       [9:0]    _zz_14;
  reg        [31:0]   state_2;
  reg        [31:0]   state_1;
  reg        [31:0]   state;
  wire       [31:0]   stateXor;
  wire       [31:0]   accXor;

  assign _zz_1 = (state <<< 1);
  assign _zz_2 = (state_1 <<< 1);
  assign _zz_3 = stateXor[9];
  assign _zz_4 = stateXor[10];
  assign _zz_5 = {stateXor[11],{stateXor[12],{stateXor[13],{stateXor[14],{stateXor[15],{stateXor[16],{stateXor[17],{stateXor[18],{stateXor[19],{_zz_6,{_zz_7,_zz_8}}}}}}}}}}};
  assign _zz_6 = stateXor[20];
  assign _zz_7 = stateXor[21];
  assign _zz_8 = {stateXor[22],{stateXor[23],{stateXor[24],{stateXor[25],{stateXor[26],{stateXor[27],{stateXor[28],{stateXor[29],{stateXor[30],stateXor[31]}}}}}}}}};
  assign _zz_9 = accXor[9];
  assign _zz_10 = accXor[10];
  assign _zz_11 = {accXor[11],{accXor[12],{accXor[13],{accXor[14],{accXor[15],{accXor[16],{accXor[17],{accXor[18],{accXor[19],{_zz_12,{_zz_13,_zz_14}}}}}}}}}}};
  assign _zz_12 = accXor[20];
  assign _zz_13 = accXor[21];
  assign _zz_14 = {accXor[22],{accXor[23],{accXor[24],{accXor[25],{accXor[26],{accXor[27],{accXor[28],{accXor[29],{accXor[30],accXor[31]}}}}}}}}};
  always @ (*) begin
    state_2 = state_1;
    state_2 = (_zz_2 ^ ((io_input_payload[1] ^ state_1[31]) ? 32'h04c11db7 : 32'h0));
  end

  always @ (*) begin
    state_1 = state;
    state_1 = (_zz_1 ^ ((io_input_payload[0] ^ state[31]) ? 32'h04c11db7 : 32'h0));
  end

  assign stateXor = (state ^ 32'hffffffff);
  assign accXor = (state_2 ^ 32'hffffffff);
  assign io_result = {stateXor[0],{stateXor[1],{stateXor[2],{stateXor[3],{stateXor[4],{stateXor[5],{stateXor[6],{stateXor[7],{stateXor[8],{_zz_3,{_zz_4,_zz_5}}}}}}}}}}};
  assign io_resultNext = {accXor[0],{accXor[1],{accXor[2],{accXor[3],{accXor[4],{accXor[5],{accXor[6],{accXor[7],{accXor[8],{_zz_9,{_zz_10,_zz_11}}}}}}}}}}};
  always @ (posedge CLKOUT5) begin
    if(rxReset) begin
      state <= 32'hffffffff;
    end else begin
      if(io_input_valid)begin
        state <= state_2;
      end
      if(io_flush)begin
        state <= 32'hffffffff;
      end
    end
  end


endmodule

module BufferCC_5 (
  input               io_dataIn,
  output              io_dataOut,
  input               CLKOUT0,
  input               systemCd_logic_outputReset
);
  reg                 buffers_0;
  reg                 buffers_1;

  assign io_dataOut = buffers_1;
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset) begin
      buffers_0 <= 1'b0;
      buffers_1 <= 1'b0;
    end else begin
      buffers_0 <= io_dataIn;
      buffers_1 <= buffers_0;
    end
  end


endmodule

module BufferCC_4 (
  input               io_dataIn,
  output              io_dataOut,
  input               CLKOUT0,
  input               debugCd_logic_outputReset
);
  reg                 buffers_0;
  reg                 buffers_1;

  assign io_dataOut = buffers_1;
  always @ (posedge CLKOUT0) begin
    buffers_0 <= io_dataIn;
    buffers_1 <= buffers_0;
  end


endmodule

module BufferCC_3 (
  input      [10:0]   io_dataIn,
  output     [10:0]   io_dataOut,
  input               CLKOUT5,
  input               txReset
);
  reg        [10:0]   buffers_0;
  reg        [10:0]   buffers_1;

  assign io_dataOut = buffers_1;
  always @ (posedge CLKOUT5) begin
    if(txReset) begin
      buffers_0 <= 11'h0;
      buffers_1 <= 11'h0;
    end else begin
      buffers_0 <= io_dataIn;
      buffers_1 <= buffers_0;
    end
  end


endmodule

module BufferCC_2 (
  input      [10:0]   io_dataIn,
  output     [10:0]   io_dataOut,
  input               CLKOUT0,
  input               systemCd_logic_outputReset,
  input               io_ctrl_tx_flush
);
  reg        [10:0]   buffers_0;
  reg        [10:0]   buffers_1;

  assign io_dataOut = buffers_1;
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset || io_ctrl_tx_flush) begin
      buffers_0 <= 11'h0;
      buffers_1 <= 11'h0;
    end else begin
      buffers_0 <= io_dataIn;
      buffers_1 <= buffers_0;
    end
  end


endmodule

//BufferCC replaced by BufferCC

module BufferCC (
  input               io_dataIn,
  output              io_dataOut,
  input               CLKOUT0,
  input               systemCd_logic_outputReset,
  input               io_ctrl_rx_flush
);
  reg                 buffers_0;
  reg                 buffers_1;

  assign io_dataOut = buffers_1;
  always @ (posedge CLKOUT0) begin
    if(systemCd_logic_outputReset || io_ctrl_rx_flush) begin
      buffers_0 <= 1'b0;
      buffers_1 <= 1'b0;
    end else begin
      buffers_0 <= io_dataIn;
      buffers_1 <= buffers_0;
    end
  end


endmodule
